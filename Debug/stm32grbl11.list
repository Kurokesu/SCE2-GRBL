
stm32grbl11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c7e8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006fc  0800c8f8  0800c8f8  0001c8f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000008  0800cff4  0800cff4  0001cff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800cffc  0800cffc  0001cffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000538  20000000  0800d000  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001300  20000538  0800d538  00020538  2**2
                  ALLOC
  7 ._user_heap_stack 00000280  20001838  0800d538  00021838  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020538  2**0
                  CONTENTS, READONLY
  9 .debug_info   00029800  00000000  00000000  00020561  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00007143  00000000  00000000  00049d61  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000f7a9  00000000  00000000  00050ea4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001240  00000000  00000000  00060650  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00003358  00000000  00000000  00061890  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  000166ae  00000000  00000000  00064be8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00019e25  00000000  00000000  0007b296  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0005e1de  00000000  00000000  000950bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  000f3299  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000392c  00000000  00000000  000f3314  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000538 	.word	0x20000538
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c8e0 	.word	0x0800c8e0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000053c 	.word	0x2000053c
 800014c:	0800c8e0 	.word	0x0800c8e0

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2f>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a04:	bf24      	itt	cs
 8000a06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a0e:	d90d      	bls.n	8000a2c <__aeabi_d2f+0x30>
 8000a10:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a1c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a24:	bf08      	it	eq
 8000a26:	f020 0001 	biceq.w	r0, r0, #1
 8000a2a:	4770      	bx	lr
 8000a2c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a30:	d121      	bne.n	8000a76 <__aeabi_d2f+0x7a>
 8000a32:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a36:	bfbc      	itt	lt
 8000a38:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	4770      	bxlt	lr
 8000a3e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a42:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a46:	f1c2 0218 	rsb	r2, r2, #24
 8000a4a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a4e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a52:	fa20 f002 	lsr.w	r0, r0, r2
 8000a56:	bf18      	it	ne
 8000a58:	f040 0001 	orrne.w	r0, r0, #1
 8000a5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a64:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a68:	ea40 000c 	orr.w	r0, r0, ip
 8000a6c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a74:	e7cc      	b.n	8000a10 <__aeabi_d2f+0x14>
 8000a76:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a7a:	d107      	bne.n	8000a8c <__aeabi_d2f+0x90>
 8000a7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a80:	bf1e      	ittt	ne
 8000a82:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a86:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a8a:	4770      	bxne	lr
 8000a8c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_frsub>:
 8000a9c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000aa0:	e002      	b.n	8000aa8 <__addsf3>
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_fsub>:
 8000aa4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000aa8 <__addsf3>:
 8000aa8:	0042      	lsls	r2, r0, #1
 8000aaa:	bf1f      	itttt	ne
 8000aac:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ab0:	ea92 0f03 	teqne	r2, r3
 8000ab4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ab8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000abc:	d06a      	beq.n	8000b94 <__addsf3+0xec>
 8000abe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ac2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ac6:	bfc1      	itttt	gt
 8000ac8:	18d2      	addgt	r2, r2, r3
 8000aca:	4041      	eorgt	r1, r0
 8000acc:	4048      	eorgt	r0, r1
 8000ace:	4041      	eorgt	r1, r0
 8000ad0:	bfb8      	it	lt
 8000ad2:	425b      	neglt	r3, r3
 8000ad4:	2b19      	cmp	r3, #25
 8000ad6:	bf88      	it	hi
 8000ad8:	4770      	bxhi	lr
 8000ada:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ade:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ae6:	bf18      	it	ne
 8000ae8:	4240      	negne	r0, r0
 8000aea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aee:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000af2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000af6:	bf18      	it	ne
 8000af8:	4249      	negne	r1, r1
 8000afa:	ea92 0f03 	teq	r2, r3
 8000afe:	d03f      	beq.n	8000b80 <__addsf3+0xd8>
 8000b00:	f1a2 0201 	sub.w	r2, r2, #1
 8000b04:	fa41 fc03 	asr.w	ip, r1, r3
 8000b08:	eb10 000c 	adds.w	r0, r0, ip
 8000b0c:	f1c3 0320 	rsb	r3, r3, #32
 8000b10:	fa01 f103 	lsl.w	r1, r1, r3
 8000b14:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b18:	d502      	bpl.n	8000b20 <__addsf3+0x78>
 8000b1a:	4249      	negs	r1, r1
 8000b1c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b20:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b24:	d313      	bcc.n	8000b4e <__addsf3+0xa6>
 8000b26:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b2a:	d306      	bcc.n	8000b3a <__addsf3+0x92>
 8000b2c:	0840      	lsrs	r0, r0, #1
 8000b2e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b32:	f102 0201 	add.w	r2, r2, #1
 8000b36:	2afe      	cmp	r2, #254	; 0xfe
 8000b38:	d251      	bcs.n	8000bde <__addsf3+0x136>
 8000b3a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b42:	bf08      	it	eq
 8000b44:	f020 0001 	biceq.w	r0, r0, #1
 8000b48:	ea40 0003 	orr.w	r0, r0, r3
 8000b4c:	4770      	bx	lr
 8000b4e:	0049      	lsls	r1, r1, #1
 8000b50:	eb40 0000 	adc.w	r0, r0, r0
 8000b54:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b58:	f1a2 0201 	sub.w	r2, r2, #1
 8000b5c:	d1ed      	bne.n	8000b3a <__addsf3+0x92>
 8000b5e:	fab0 fc80 	clz	ip, r0
 8000b62:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b66:	ebb2 020c 	subs.w	r2, r2, ip
 8000b6a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b6e:	bfaa      	itet	ge
 8000b70:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b74:	4252      	neglt	r2, r2
 8000b76:	4318      	orrge	r0, r3
 8000b78:	bfbc      	itt	lt
 8000b7a:	40d0      	lsrlt	r0, r2
 8000b7c:	4318      	orrlt	r0, r3
 8000b7e:	4770      	bx	lr
 8000b80:	f092 0f00 	teq	r2, #0
 8000b84:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b88:	bf06      	itte	eq
 8000b8a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b8e:	3201      	addeq	r2, #1
 8000b90:	3b01      	subne	r3, #1
 8000b92:	e7b5      	b.n	8000b00 <__addsf3+0x58>
 8000b94:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b9c:	bf18      	it	ne
 8000b9e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ba2:	d021      	beq.n	8000be8 <__addsf3+0x140>
 8000ba4:	ea92 0f03 	teq	r2, r3
 8000ba8:	d004      	beq.n	8000bb4 <__addsf3+0x10c>
 8000baa:	f092 0f00 	teq	r2, #0
 8000bae:	bf08      	it	eq
 8000bb0:	4608      	moveq	r0, r1
 8000bb2:	4770      	bx	lr
 8000bb4:	ea90 0f01 	teq	r0, r1
 8000bb8:	bf1c      	itt	ne
 8000bba:	2000      	movne	r0, #0
 8000bbc:	4770      	bxne	lr
 8000bbe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bc2:	d104      	bne.n	8000bce <__addsf3+0x126>
 8000bc4:	0040      	lsls	r0, r0, #1
 8000bc6:	bf28      	it	cs
 8000bc8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bcc:	4770      	bx	lr
 8000bce:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bd2:	bf3c      	itt	cc
 8000bd4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bd8:	4770      	bxcc	lr
 8000bda:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bde:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000be2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be6:	4770      	bx	lr
 8000be8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bec:	bf16      	itet	ne
 8000bee:	4608      	movne	r0, r1
 8000bf0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bf4:	4601      	movne	r1, r0
 8000bf6:	0242      	lsls	r2, r0, #9
 8000bf8:	bf06      	itte	eq
 8000bfa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bfe:	ea90 0f01 	teqeq	r0, r1
 8000c02:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_ui2f>:
 8000c08:	f04f 0300 	mov.w	r3, #0
 8000c0c:	e004      	b.n	8000c18 <__aeabi_i2f+0x8>
 8000c0e:	bf00      	nop

08000c10 <__aeabi_i2f>:
 8000c10:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c14:	bf48      	it	mi
 8000c16:	4240      	negmi	r0, r0
 8000c18:	ea5f 0c00 	movs.w	ip, r0
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c24:	4601      	mov	r1, r0
 8000c26:	f04f 0000 	mov.w	r0, #0
 8000c2a:	e01c      	b.n	8000c66 <__aeabi_l2f+0x2a>

08000c2c <__aeabi_ul2f>:
 8000c2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c30:	bf08      	it	eq
 8000c32:	4770      	bxeq	lr
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e00a      	b.n	8000c50 <__aeabi_l2f+0x14>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_l2f>:
 8000c3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c40:	bf08      	it	eq
 8000c42:	4770      	bxeq	lr
 8000c44:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c48:	d502      	bpl.n	8000c50 <__aeabi_l2f+0x14>
 8000c4a:	4240      	negs	r0, r0
 8000c4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c50:	ea5f 0c01 	movs.w	ip, r1
 8000c54:	bf02      	ittt	eq
 8000c56:	4684      	moveq	ip, r0
 8000c58:	4601      	moveq	r1, r0
 8000c5a:	2000      	moveq	r0, #0
 8000c5c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c60:	bf08      	it	eq
 8000c62:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c66:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c6a:	fabc f28c 	clz	r2, ip
 8000c6e:	3a08      	subs	r2, #8
 8000c70:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c74:	db10      	blt.n	8000c98 <__aeabi_l2f+0x5c>
 8000c76:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c80:	f1c2 0220 	rsb	r2, r2, #32
 8000c84:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c88:	fa20 f202 	lsr.w	r2, r0, r2
 8000c8c:	eb43 0002 	adc.w	r0, r3, r2
 8000c90:	bf08      	it	eq
 8000c92:	f020 0001 	biceq.w	r0, r0, #1
 8000c96:	4770      	bx	lr
 8000c98:	f102 0220 	add.w	r2, r2, #32
 8000c9c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca0:	f1c2 0220 	rsb	r2, r2, #32
 8000ca4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ca8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cac:	eb43 0002 	adc.w	r0, r3, r2
 8000cb0:	bf08      	it	eq
 8000cb2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_fmul>:
 8000cb8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cbc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cc0:	bf1e      	ittt	ne
 8000cc2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cc6:	ea92 0f0c 	teqne	r2, ip
 8000cca:	ea93 0f0c 	teqne	r3, ip
 8000cce:	d06f      	beq.n	8000db0 <__aeabi_fmul+0xf8>
 8000cd0:	441a      	add	r2, r3
 8000cd2:	ea80 0c01 	eor.w	ip, r0, r1
 8000cd6:	0240      	lsls	r0, r0, #9
 8000cd8:	bf18      	it	ne
 8000cda:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cde:	d01e      	beq.n	8000d1e <__aeabi_fmul+0x66>
 8000ce0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000ce4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000ce8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cec:	fba0 3101 	umull	r3, r1, r0, r1
 8000cf0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000cf4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000cf8:	bf3e      	ittt	cc
 8000cfa:	0049      	lslcc	r1, r1, #1
 8000cfc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d00:	005b      	lslcc	r3, r3, #1
 8000d02:	ea40 0001 	orr.w	r0, r0, r1
 8000d06:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d0a:	2afd      	cmp	r2, #253	; 0xfd
 8000d0c:	d81d      	bhi.n	8000d4a <__aeabi_fmul+0x92>
 8000d0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d12:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d16:	bf08      	it	eq
 8000d18:	f020 0001 	biceq.w	r0, r0, #1
 8000d1c:	4770      	bx	lr
 8000d1e:	f090 0f00 	teq	r0, #0
 8000d22:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d26:	bf08      	it	eq
 8000d28:	0249      	lsleq	r1, r1, #9
 8000d2a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d2e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d32:	3a7f      	subs	r2, #127	; 0x7f
 8000d34:	bfc2      	ittt	gt
 8000d36:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d3a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d3e:	4770      	bxgt	lr
 8000d40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d44:	f04f 0300 	mov.w	r3, #0
 8000d48:	3a01      	subs	r2, #1
 8000d4a:	dc5d      	bgt.n	8000e08 <__aeabi_fmul+0x150>
 8000d4c:	f112 0f19 	cmn.w	r2, #25
 8000d50:	bfdc      	itt	le
 8000d52:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d56:	4770      	bxle	lr
 8000d58:	f1c2 0200 	rsb	r2, r2, #0
 8000d5c:	0041      	lsls	r1, r0, #1
 8000d5e:	fa21 f102 	lsr.w	r1, r1, r2
 8000d62:	f1c2 0220 	rsb	r2, r2, #32
 8000d66:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d6a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d6e:	f140 0000 	adc.w	r0, r0, #0
 8000d72:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d76:	bf08      	it	eq
 8000d78:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d7c:	4770      	bx	lr
 8000d7e:	f092 0f00 	teq	r2, #0
 8000d82:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d86:	bf02      	ittt	eq
 8000d88:	0040      	lsleq	r0, r0, #1
 8000d8a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d8e:	3a01      	subeq	r2, #1
 8000d90:	d0f9      	beq.n	8000d86 <__aeabi_fmul+0xce>
 8000d92:	ea40 000c 	orr.w	r0, r0, ip
 8000d96:	f093 0f00 	teq	r3, #0
 8000d9a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d9e:	bf02      	ittt	eq
 8000da0:	0049      	lsleq	r1, r1, #1
 8000da2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000da6:	3b01      	subeq	r3, #1
 8000da8:	d0f9      	beq.n	8000d9e <__aeabi_fmul+0xe6>
 8000daa:	ea41 010c 	orr.w	r1, r1, ip
 8000dae:	e78f      	b.n	8000cd0 <__aeabi_fmul+0x18>
 8000db0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000db4:	ea92 0f0c 	teq	r2, ip
 8000db8:	bf18      	it	ne
 8000dba:	ea93 0f0c 	teqne	r3, ip
 8000dbe:	d00a      	beq.n	8000dd6 <__aeabi_fmul+0x11e>
 8000dc0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000dc4:	bf18      	it	ne
 8000dc6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000dca:	d1d8      	bne.n	8000d7e <__aeabi_fmul+0xc6>
 8000dcc:	ea80 0001 	eor.w	r0, r0, r1
 8000dd0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dd4:	4770      	bx	lr
 8000dd6:	f090 0f00 	teq	r0, #0
 8000dda:	bf17      	itett	ne
 8000ddc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000de0:	4608      	moveq	r0, r1
 8000de2:	f091 0f00 	teqne	r1, #0
 8000de6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dea:	d014      	beq.n	8000e16 <__aeabi_fmul+0x15e>
 8000dec:	ea92 0f0c 	teq	r2, ip
 8000df0:	d101      	bne.n	8000df6 <__aeabi_fmul+0x13e>
 8000df2:	0242      	lsls	r2, r0, #9
 8000df4:	d10f      	bne.n	8000e16 <__aeabi_fmul+0x15e>
 8000df6:	ea93 0f0c 	teq	r3, ip
 8000dfa:	d103      	bne.n	8000e04 <__aeabi_fmul+0x14c>
 8000dfc:	024b      	lsls	r3, r1, #9
 8000dfe:	bf18      	it	ne
 8000e00:	4608      	movne	r0, r1
 8000e02:	d108      	bne.n	8000e16 <__aeabi_fmul+0x15e>
 8000e04:	ea80 0001 	eor.w	r0, r0, r1
 8000e08:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e14:	4770      	bx	lr
 8000e16:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e1a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e1e:	4770      	bx	lr

08000e20 <__aeabi_fdiv>:
 8000e20:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e24:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e28:	bf1e      	ittt	ne
 8000e2a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e2e:	ea92 0f0c 	teqne	r2, ip
 8000e32:	ea93 0f0c 	teqne	r3, ip
 8000e36:	d069      	beq.n	8000f0c <__aeabi_fdiv+0xec>
 8000e38:	eba2 0203 	sub.w	r2, r2, r3
 8000e3c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e40:	0249      	lsls	r1, r1, #9
 8000e42:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e46:	d037      	beq.n	8000eb8 <__aeabi_fdiv+0x98>
 8000e48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e4c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e50:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e54:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e58:	428b      	cmp	r3, r1
 8000e5a:	bf38      	it	cc
 8000e5c:	005b      	lslcc	r3, r3, #1
 8000e5e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e62:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e66:	428b      	cmp	r3, r1
 8000e68:	bf24      	itt	cs
 8000e6a:	1a5b      	subcs	r3, r3, r1
 8000e6c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e70:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e74:	bf24      	itt	cs
 8000e76:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e7a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e7e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e82:	bf24      	itt	cs
 8000e84:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e88:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e8c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e90:	bf24      	itt	cs
 8000e92:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e96:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e9a:	011b      	lsls	r3, r3, #4
 8000e9c:	bf18      	it	ne
 8000e9e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ea2:	d1e0      	bne.n	8000e66 <__aeabi_fdiv+0x46>
 8000ea4:	2afd      	cmp	r2, #253	; 0xfd
 8000ea6:	f63f af50 	bhi.w	8000d4a <__aeabi_fmul+0x92>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eb0:	bf08      	it	eq
 8000eb2:	f020 0001 	biceq.w	r0, r0, #1
 8000eb6:	4770      	bx	lr
 8000eb8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ebc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ec0:	327f      	adds	r2, #127	; 0x7f
 8000ec2:	bfc2      	ittt	gt
 8000ec4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ec8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ecc:	4770      	bxgt	lr
 8000ece:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ed2:	f04f 0300 	mov.w	r3, #0
 8000ed6:	3a01      	subs	r2, #1
 8000ed8:	e737      	b.n	8000d4a <__aeabi_fmul+0x92>
 8000eda:	f092 0f00 	teq	r2, #0
 8000ede:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ee2:	bf02      	ittt	eq
 8000ee4:	0040      	lsleq	r0, r0, #1
 8000ee6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000eea:	3a01      	subeq	r2, #1
 8000eec:	d0f9      	beq.n	8000ee2 <__aeabi_fdiv+0xc2>
 8000eee:	ea40 000c 	orr.w	r0, r0, ip
 8000ef2:	f093 0f00 	teq	r3, #0
 8000ef6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000efa:	bf02      	ittt	eq
 8000efc:	0049      	lsleq	r1, r1, #1
 8000efe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f02:	3b01      	subeq	r3, #1
 8000f04:	d0f9      	beq.n	8000efa <__aeabi_fdiv+0xda>
 8000f06:	ea41 010c 	orr.w	r1, r1, ip
 8000f0a:	e795      	b.n	8000e38 <__aeabi_fdiv+0x18>
 8000f0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f10:	ea92 0f0c 	teq	r2, ip
 8000f14:	d108      	bne.n	8000f28 <__aeabi_fdiv+0x108>
 8000f16:	0242      	lsls	r2, r0, #9
 8000f18:	f47f af7d 	bne.w	8000e16 <__aeabi_fmul+0x15e>
 8000f1c:	ea93 0f0c 	teq	r3, ip
 8000f20:	f47f af70 	bne.w	8000e04 <__aeabi_fmul+0x14c>
 8000f24:	4608      	mov	r0, r1
 8000f26:	e776      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f28:	ea93 0f0c 	teq	r3, ip
 8000f2c:	d104      	bne.n	8000f38 <__aeabi_fdiv+0x118>
 8000f2e:	024b      	lsls	r3, r1, #9
 8000f30:	f43f af4c 	beq.w	8000dcc <__aeabi_fmul+0x114>
 8000f34:	4608      	mov	r0, r1
 8000f36:	e76e      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f38:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f3c:	bf18      	it	ne
 8000f3e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f42:	d1ca      	bne.n	8000eda <__aeabi_fdiv+0xba>
 8000f44:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f48:	f47f af5c 	bne.w	8000e04 <__aeabi_fmul+0x14c>
 8000f4c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f50:	f47f af3c 	bne.w	8000dcc <__aeabi_fmul+0x114>
 8000f54:	e75f      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f56:	bf00      	nop

08000f58 <__gesf2>:
 8000f58:	f04f 3cff 	mov.w	ip, #4294967295
 8000f5c:	e006      	b.n	8000f6c <__cmpsf2+0x4>
 8000f5e:	bf00      	nop

08000f60 <__lesf2>:
 8000f60:	f04f 0c01 	mov.w	ip, #1
 8000f64:	e002      	b.n	8000f6c <__cmpsf2+0x4>
 8000f66:	bf00      	nop

08000f68 <__cmpsf2>:
 8000f68:	f04f 0c01 	mov.w	ip, #1
 8000f6c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f70:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f7c:	bf18      	it	ne
 8000f7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f82:	d011      	beq.n	8000fa8 <__cmpsf2+0x40>
 8000f84:	b001      	add	sp, #4
 8000f86:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f8a:	bf18      	it	ne
 8000f8c:	ea90 0f01 	teqne	r0, r1
 8000f90:	bf58      	it	pl
 8000f92:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f96:	bf88      	it	hi
 8000f98:	17c8      	asrhi	r0, r1, #31
 8000f9a:	bf38      	it	cc
 8000f9c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fa0:	bf18      	it	ne
 8000fa2:	f040 0001 	orrne.w	r0, r0, #1
 8000fa6:	4770      	bx	lr
 8000fa8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fac:	d102      	bne.n	8000fb4 <__cmpsf2+0x4c>
 8000fae:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fb2:	d105      	bne.n	8000fc0 <__cmpsf2+0x58>
 8000fb4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fb8:	d1e4      	bne.n	8000f84 <__cmpsf2+0x1c>
 8000fba:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fbe:	d0e1      	beq.n	8000f84 <__cmpsf2+0x1c>
 8000fc0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop

08000fc8 <__aeabi_cfrcmple>:
 8000fc8:	4684      	mov	ip, r0
 8000fca:	4608      	mov	r0, r1
 8000fcc:	4661      	mov	r1, ip
 8000fce:	e7ff      	b.n	8000fd0 <__aeabi_cfcmpeq>

08000fd0 <__aeabi_cfcmpeq>:
 8000fd0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fd2:	f7ff ffc9 	bl	8000f68 <__cmpsf2>
 8000fd6:	2800      	cmp	r0, #0
 8000fd8:	bf48      	it	mi
 8000fda:	f110 0f00 	cmnmi.w	r0, #0
 8000fde:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fe0 <__aeabi_fcmpeq>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff fff4 	bl	8000fd0 <__aeabi_cfcmpeq>
 8000fe8:	bf0c      	ite	eq
 8000fea:	2001      	moveq	r0, #1
 8000fec:	2000      	movne	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmplt>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffea 	bl	8000fd0 <__aeabi_cfcmpeq>
 8000ffc:	bf34      	ite	cc
 8000ffe:	2001      	movcc	r0, #1
 8001000:	2000      	movcs	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmple>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffe0 	bl	8000fd0 <__aeabi_cfcmpeq>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpge>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffd2 	bl	8000fc8 <__aeabi_cfrcmple>
 8001024:	bf94      	ite	ls
 8001026:	2001      	movls	r0, #1
 8001028:	2000      	movhi	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_fcmpgt>:
 8001030:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001034:	f7ff ffc8 	bl	8000fc8 <__aeabi_cfrcmple>
 8001038:	bf34      	ite	cc
 800103a:	2001      	movcc	r0, #1
 800103c:	2000      	movcs	r0, #0
 800103e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001042:	bf00      	nop

08001044 <__aeabi_fcmpun>:
 8001044:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001048:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800104c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001050:	d102      	bne.n	8001058 <__aeabi_fcmpun+0x14>
 8001052:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001056:	d108      	bne.n	800106a <__aeabi_fcmpun+0x26>
 8001058:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800105c:	d102      	bne.n	8001064 <__aeabi_fcmpun+0x20>
 800105e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001062:	d102      	bne.n	800106a <__aeabi_fcmpun+0x26>
 8001064:	f04f 0000 	mov.w	r0, #0
 8001068:	4770      	bx	lr
 800106a:	f04f 0001 	mov.w	r0, #1
 800106e:	4770      	bx	lr

08001070 <__aeabi_f2iz>:
 8001070:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001074:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001078:	d30f      	bcc.n	800109a <__aeabi_f2iz+0x2a>
 800107a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800107e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001082:	d90d      	bls.n	80010a0 <__aeabi_f2iz+0x30>
 8001084:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001088:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800108c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001090:	fa23 f002 	lsr.w	r0, r3, r2
 8001094:	bf18      	it	ne
 8001096:	4240      	negne	r0, r0
 8001098:	4770      	bx	lr
 800109a:	f04f 0000 	mov.w	r0, #0
 800109e:	4770      	bx	lr
 80010a0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010a4:	d101      	bne.n	80010aa <__aeabi_f2iz+0x3a>
 80010a6:	0242      	lsls	r2, r0, #9
 80010a8:	d105      	bne.n	80010b6 <__aeabi_f2iz+0x46>
 80010aa:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80010ae:	bf08      	it	eq
 80010b0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80010b4:	4770      	bx	lr
 80010b6:	f04f 0000 	mov.w	r0, #0
 80010ba:	4770      	bx	lr

080010bc <__aeabi_f2uiz>:
 80010bc:	0042      	lsls	r2, r0, #1
 80010be:	d20e      	bcs.n	80010de <__aeabi_f2uiz+0x22>
 80010c0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010c4:	d30b      	bcc.n	80010de <__aeabi_f2uiz+0x22>
 80010c6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010ca:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010ce:	d409      	bmi.n	80010e4 <__aeabi_f2uiz+0x28>
 80010d0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010d8:	fa23 f002 	lsr.w	r0, r3, r2
 80010dc:	4770      	bx	lr
 80010de:	f04f 0000 	mov.w	r0, #0
 80010e2:	4770      	bx	lr
 80010e4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010e8:	d101      	bne.n	80010ee <__aeabi_f2uiz+0x32>
 80010ea:	0242      	lsls	r2, r0, #9
 80010ec:	d102      	bne.n	80010f4 <__aeabi_f2uiz+0x38>
 80010ee:	f04f 30ff 	mov.w	r0, #4294967295
 80010f2:	4770      	bx	lr
 80010f4:	f04f 0000 	mov.w	r0, #0
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop

080010fc <NVIC_PriorityGroupConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 80010fc:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8001100:	4b02      	ldr	r3, [pc, #8]	; (800110c <NVIC_PriorityGroupConfig+0x10>)
 8001102:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8001106:	60d8      	str	r0, [r3, #12]
}
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	e000ed00 	.word	0xe000ed00

08001110 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8001110:	b4f0      	push	{r4, r5, r6, r7}
 8001112:	2401      	movs	r4, #1
 8001114:	7801      	ldrb	r1, [r0, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8001116:	78c3      	ldrb	r3, [r0, #3]
 8001118:	f001 021f 	and.w	r2, r1, #31
 800111c:	4094      	lsls	r4, r2
 800111e:	094e      	lsrs	r6, r1, #5
 8001120:	b92b      	cbnz	r3, 800112e <NVIC_Init+0x1e>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001122:	4b0f      	ldr	r3, [pc, #60]	; (8001160 <NVIC_Init+0x50>)
 8001124:	3620      	adds	r6, #32
 8001126:	f843 4026 	str.w	r4, [r3, r6, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800112a:	bcf0      	pop	{r4, r5, r6, r7}
 800112c:	4770      	bx	lr
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800112e:	4b0d      	ldr	r3, [pc, #52]	; (8001164 <NVIC_Init+0x54>)
    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8001130:	7847      	ldrb	r7, [r0, #1]
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8001132:	68dd      	ldr	r5, [r3, #12]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8001134:	7882      	ldrb	r2, [r0, #2]
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8001136:	43e8      	mvns	r0, r5
    tmpsub = tmpsub >> tmppriority;
 8001138:	230f      	movs	r3, #15
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800113a:	f3c0 2002 	ubfx	r0, r0, #8, #3
    tmppre = (0x4 - tmppriority);
 800113e:	f1c0 0504 	rsb	r5, r0, #4
    tmpsub = tmpsub >> tmppriority;
 8001142:	40c3      	lsrs	r3, r0
    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8001144:	fa07 f505 	lsl.w	r5, r7, r5
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8001148:	4013      	ands	r3, r2
 800114a:	432b      	orrs	r3, r5
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800114c:	4a04      	ldr	r2, [pc, #16]	; (8001160 <NVIC_Init+0x50>)
    tmppriority = tmppriority << 0x04;
 800114e:	011b      	lsls	r3, r3, #4
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8001150:	b2db      	uxtb	r3, r3
 8001152:	4411      	add	r1, r2
 8001154:	f881 3300 	strb.w	r3, [r1, #768]	; 0x300
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001158:	f842 4026 	str.w	r4, [r2, r6, lsl #2]
}
 800115c:	bcf0      	pop	{r4, r5, r6, r7}
 800115e:	4770      	bx	lr
 8001160:	e000e100 	.word	0xe000e100
 8001164:	e000ed00 	.word	0xe000ed00

08001168 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8001168:	7903      	ldrb	r3, [r0, #4]
 800116a:	b470      	push	{r4, r5, r6}
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 800116c:	7982      	ldrb	r2, [r0, #6]
 800116e:	6805      	ldr	r5, [r0, #0]
 8001170:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001174:	f503 3382 	add.w	r3, r3, #66560	; 0x10400
 8001178:	43ec      	mvns	r4, r5
 800117a:	b31a      	cbz	r2, 80011c4 <EXTI_Init+0x5c>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 800117c:	4a18      	ldr	r2, [pc, #96]	; (80011e0 <EXTI_Init+0x78>)
    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 800117e:	7941      	ldrb	r1, [r0, #5]
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8001180:	6816      	ldr	r6, [r2, #0]
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8001182:	2910      	cmp	r1, #16
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8001184:	ea06 0604 	and.w	r6, r6, r4
 8001188:	6016      	str	r6, [r2, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 800118a:	6856      	ldr	r6, [r2, #4]
 800118c:	ea04 0406 	and.w	r4, r4, r6
 8001190:	6054      	str	r4, [r2, #4]
    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8001192:	681c      	ldr	r4, [r3, #0]
 8001194:	ea45 0504 	orr.w	r5, r5, r4
 8001198:	601d      	str	r5, [r3, #0]
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 800119a:	6800      	ldr	r0, [r0, #0]
 800119c:	6894      	ldr	r4, [r2, #8]
 800119e:	ea6f 0300 	mvn.w	r3, r0
 80011a2:	ea04 0403 	and.w	r4, r4, r3
 80011a6:	6094      	str	r4, [r2, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 80011a8:	68d4      	ldr	r4, [r2, #12]
 80011aa:	ea03 0304 	and.w	r3, r3, r4
 80011ae:	60d3      	str	r3, [r2, #12]
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 80011b0:	d00d      	beq.n	80011ce <EXTI_Init+0x66>
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 80011b2:	bc70      	pop	{r4, r5, r6}
      tmp += EXTI_InitStruct->EXTI_Trigger;
 80011b4:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 80011b8:	f503 3382 	add.w	r3, r3, #66560	; 0x10400
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	4310      	orrs	r0, r2
 80011c0:	6018      	str	r0, [r3, #0]
}
 80011c2:	4770      	bx	lr
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	4014      	ands	r4, r2
 80011c8:	601c      	str	r4, [r3, #0]
}
 80011ca:	bc70      	pop	{r4, r5, r6}
 80011cc:	4770      	bx	lr
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 80011ce:	6893      	ldr	r3, [r2, #8]
}
 80011d0:	bc70      	pop	{r4, r5, r6}
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 80011d2:	4303      	orrs	r3, r0
 80011d4:	6093      	str	r3, [r2, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 80011d6:	68d3      	ldr	r3, [r2, #12]
 80011d8:	4318      	orrs	r0, r3
 80011da:	60d0      	str	r0, [r2, #12]
}
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	40010400 	.word	0x40010400

080011e4 <EXTI_GetITStatus>:
  ITStatus bitstatus = RESET;
  uint32_t enablestatus = 0;
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 80011e4:	4b05      	ldr	r3, [pc, #20]	; (80011fc <EXTI_GetITStatus+0x18>)
 80011e6:	681a      	ldr	r2, [r3, #0]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 80011e8:	695b      	ldr	r3, [r3, #20]
 80011ea:	4003      	ands	r3, r0
 80011ec:	d004      	beq.n	80011f8 <EXTI_GetITStatus+0x14>
 80011ee:	4202      	tst	r2, r0
  {
    bitstatus = SET;
 80011f0:	bf14      	ite	ne
 80011f2:	2001      	movne	r0, #1
 80011f4:	2000      	moveq	r0, #0
 80011f6:	4770      	bx	lr
  }
  else
  {
    bitstatus = RESET;
 80011f8:	4618      	mov	r0, r3
  }
  return bitstatus;
}
 80011fa:	4770      	bx	lr
 80011fc:	40010400 	.word	0x40010400

08001200 <EXTI_ClearITPendingBit>:
 8001200:	4b01      	ldr	r3, [pc, #4]	; (8001208 <EXTI_ClearITPendingBit+0x8>)
 8001202:	6158      	str	r0, [r3, #20]
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	40010400 	.word	0x40010400

0800120c <FLASH_Unlock>:
  * @retval None
  */
void FLASH_Unlock(void)
{
  /* Authorize the FPEC of Bank1 Access */
  FLASH->KEYR = FLASH_KEY1;
 800120c:	4b02      	ldr	r3, [pc, #8]	; (8001218 <FLASH_Unlock+0xc>)
 800120e:	4903      	ldr	r1, [pc, #12]	; (800121c <FLASH_Unlock+0x10>)
  FLASH->KEYR = FLASH_KEY2;
 8001210:	4a03      	ldr	r2, [pc, #12]	; (8001220 <FLASH_Unlock+0x14>)
  FLASH->KEYR = FLASH_KEY1;
 8001212:	6059      	str	r1, [r3, #4]
  FLASH->KEYR = FLASH_KEY2;
 8001214:	605a      	str	r2, [r3, #4]
#ifdef STM32F10X_XL
  /* Authorize the FPEC of Bank2 Access */
  FLASH->KEYR2 = FLASH_KEY1;
  FLASH->KEYR2 = FLASH_KEY2;
#endif /* STM32F10X_XL */
}
 8001216:	4770      	bx	lr
 8001218:	40022000 	.word	0x40022000
 800121c:	45670123 	.word	0x45670123
 8001220:	cdef89ab 	.word	0xcdef89ab

08001224 <FLASH_ErasePage>:
  */
FLASH_Status FLASH_GetBank1Status(void)
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 8001224:	4a32      	ldr	r2, [pc, #200]	; (80012f0 <FLASH_ErasePage+0xcc>)
{
 8001226:	b410      	push	{r4}
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 8001228:	68d3      	ldr	r3, [r2, #12]
 800122a:	07dc      	lsls	r4, r3, #31
 800122c:	d426      	bmi.n	800127c <FLASH_ErasePage+0x58>
  {
    flashstatus = FLASH_BUSY;
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 800122e:	68d3      	ldr	r3, [r2, #12]
 8001230:	0759      	lsls	r1, r3, #29
 8001232:	d440      	bmi.n	80012b6 <FLASH_ErasePage+0x92>
    { 
      flashstatus = FLASH_ERROR_PG;
    }
    else 
    {
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 8001234:	68d3      	ldr	r3, [r2, #12]
 8001236:	06db      	lsls	r3, r3, #27
 8001238:	d502      	bpl.n	8001240 <FLASH_ErasePage+0x1c>
      {
        flashstatus = FLASH_ERROR_WRP;
 800123a:	2003      	movs	r0, #3
}
 800123c:	bc10      	pop	{r4}
 800123e:	4770      	bx	lr
    FLASH->CR|= CR_PER_Set;
 8001240:	4b2b      	ldr	r3, [pc, #172]	; (80012f0 <FLASH_ErasePage+0xcc>)
 8001242:	691a      	ldr	r2, [r3, #16]
 8001244:	f042 0202 	orr.w	r2, r2, #2
 8001248:	611a      	str	r2, [r3, #16]
    FLASH->AR = Page_Address; 
 800124a:	6158      	str	r0, [r3, #20]
    FLASH->CR|= CR_STRT_Set;
 800124c:	691a      	ldr	r2, [r3, #16]
 800124e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001252:	611a      	str	r2, [r3, #16]
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 8001254:	68da      	ldr	r2, [r3, #12]
 8001256:	07d1      	lsls	r1, r2, #31
 8001258:	d42f      	bmi.n	80012ba <FLASH_ErasePage+0x96>
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 800125a:	68da      	ldr	r2, [r3, #12]
 800125c:	0752      	lsls	r2, r2, #29
 800125e:	d445      	bmi.n	80012ec <FLASH_ErasePage+0xc8>
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 8001260:	68db      	ldr	r3, [r3, #12]
        flashstatus = FLASH_ERROR_WRP;
 8001262:	f013 0f10 	tst.w	r3, #16
 8001266:	bf0c      	ite	eq
 8001268:	2004      	moveq	r0, #4
 800126a:	2003      	movne	r0, #3
    FLASH->CR &= CR_PER_Reset;
 800126c:	f641 71fd 	movw	r1, #8189	; 0x1ffd
 8001270:	4a1f      	ldr	r2, [pc, #124]	; (80012f0 <FLASH_ErasePage+0xcc>)
}
 8001272:	bc10      	pop	{r4}
    FLASH->CR &= CR_PER_Reset;
 8001274:	6913      	ldr	r3, [r2, #16]
 8001276:	400b      	ands	r3, r1
 8001278:	6113      	str	r3, [r2, #16]
}
 800127a:	4770      	bx	lr
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 800127c:	f44f 2330 	mov.w	r3, #720896	; 0xb0000
 8001280:	68d4      	ldr	r4, [r2, #12]
 8001282:	1e59      	subs	r1, r3, #1
 8001284:	07e4      	lsls	r4, r4, #31
 8001286:	d40a      	bmi.n	800129e <FLASH_ErasePage+0x7a>
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 8001288:	68d4      	ldr	r4, [r2, #12]
 800128a:	0764      	lsls	r4, r4, #29
 800128c:	d411      	bmi.n	80012b2 <FLASH_ErasePage+0x8e>
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 800128e:	68d2      	ldr	r2, [r2, #12]
 8001290:	06d4      	lsls	r4, r2, #27
 8001292:	d408      	bmi.n	80012a6 <FLASH_ErasePage+0x82>
  while((status == FLASH_BUSY) && (Timeout != 0x00))
  {
    status = FLASH_GetBank1Status();
    Timeout--;
  }
  if(Timeout == 0x00 )
 8001294:	2b01      	cmp	r3, #1
 8001296:	d1d3      	bne.n	8001240 <FLASH_ErasePage+0x1c>
  {
    status = FLASH_TIMEOUT;
 8001298:	2005      	movs	r0, #5
}
 800129a:	bc10      	pop	{r4}
 800129c:	4770      	bx	lr
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 800129e:	460b      	mov	r3, r1
 80012a0:	2900      	cmp	r1, #0
 80012a2:	d1ed      	bne.n	8001280 <FLASH_ErasePage+0x5c>
 80012a4:	e7f8      	b.n	8001298 <FLASH_ErasePage+0x74>
        flashstatus = FLASH_ERROR_WRP;
 80012a6:	2003      	movs	r0, #3
    status = FLASH_TIMEOUT;
 80012a8:	2900      	cmp	r1, #0
 80012aa:	bf08      	it	eq
 80012ac:	2005      	moveq	r0, #5
}
 80012ae:	bc10      	pop	{r4}
 80012b0:	4770      	bx	lr
      flashstatus = FLASH_ERROR_PG;
 80012b2:	2002      	movs	r0, #2
 80012b4:	e7f8      	b.n	80012a8 <FLASH_ErasePage+0x84>
 80012b6:	2002      	movs	r0, #2
 80012b8:	e7ef      	b.n	800129a <FLASH_ErasePage+0x76>
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 80012ba:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 80012be:	68d9      	ldr	r1, [r3, #12]
 80012c0:	3a01      	subs	r2, #1
 80012c2:	07cc      	lsls	r4, r1, #31
 80012c4:	d40c      	bmi.n	80012e0 <FLASH_ErasePage+0xbc>
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 80012c6:	68d9      	ldr	r1, [r3, #12]
 80012c8:	0749      	lsls	r1, r1, #29
 80012ca:	d40d      	bmi.n	80012e8 <FLASH_ErasePage+0xc4>
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 80012cc:	68db      	ldr	r3, [r3, #12]
        flashstatus = FLASH_COMPLETE;
 80012ce:	f013 0f10 	tst.w	r3, #16
 80012d2:	bf14      	ite	ne
 80012d4:	2003      	movne	r0, #3
 80012d6:	2004      	moveq	r0, #4
    status = FLASH_TIMEOUT;
 80012d8:	2a00      	cmp	r2, #0
 80012da:	bf08      	it	eq
 80012dc:	2005      	moveq	r0, #5
 80012de:	e7c5      	b.n	800126c <FLASH_ErasePage+0x48>
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 80012e0:	2a00      	cmp	r2, #0
 80012e2:	d1ec      	bne.n	80012be <FLASH_ErasePage+0x9a>
    status = FLASH_TIMEOUT;
 80012e4:	2005      	movs	r0, #5
 80012e6:	e7c1      	b.n	800126c <FLASH_ErasePage+0x48>
      flashstatus = FLASH_ERROR_PG;
 80012e8:	2002      	movs	r0, #2
 80012ea:	e7f5      	b.n	80012d8 <FLASH_ErasePage+0xb4>
 80012ec:	2002      	movs	r0, #2
 80012ee:	e7bd      	b.n	800126c <FLASH_ErasePage+0x48>
 80012f0:	40022000 	.word	0x40022000

080012f4 <FLASH_ProgramHalfWord>:
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 80012f4:	4a30      	ldr	r2, [pc, #192]	; (80013b8 <FLASH_ProgramHalfWord+0xc4>)
{
 80012f6:	b430      	push	{r4, r5}
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 80012f8:	68d3      	ldr	r3, [r2, #12]
 80012fa:	07dd      	lsls	r5, r3, #31
 80012fc:	d422      	bmi.n	8001344 <FLASH_ProgramHalfWord+0x50>
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 80012fe:	68d3      	ldr	r3, [r2, #12]
 8001300:	075c      	lsls	r4, r3, #29
 8001302:	d43c      	bmi.n	800137e <FLASH_ProgramHalfWord+0x8a>
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 8001304:	68d3      	ldr	r3, [r2, #12]
 8001306:	06db      	lsls	r3, r3, #27
 8001308:	d502      	bpl.n	8001310 <FLASH_ProgramHalfWord+0x1c>
}
 800130a:	bc30      	pop	{r4, r5}
        flashstatus = FLASH_ERROR_WRP;
 800130c:	2003      	movs	r0, #3
}
 800130e:	4770      	bx	lr
    FLASH->CR |= CR_PG_Set;
 8001310:	4a29      	ldr	r2, [pc, #164]	; (80013b8 <FLASH_ProgramHalfWord+0xc4>)
 8001312:	6913      	ldr	r3, [r2, #16]
 8001314:	f043 0301 	orr.w	r3, r3, #1
 8001318:	6113      	str	r3, [r2, #16]
    *(__IO uint16_t*)Address = Data;
 800131a:	8001      	strh	r1, [r0, #0]
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 800131c:	68d3      	ldr	r3, [r2, #12]
 800131e:	07db      	lsls	r3, r3, #31
 8001320:	d42f      	bmi.n	8001382 <FLASH_ProgramHalfWord+0x8e>
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 8001322:	68d3      	ldr	r3, [r2, #12]
 8001324:	075d      	lsls	r5, r3, #29
 8001326:	d445      	bmi.n	80013b4 <FLASH_ProgramHalfWord+0xc0>
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 8001328:	68d3      	ldr	r3, [r2, #12]
        flashstatus = FLASH_ERROR_WRP;
 800132a:	f013 0f10 	tst.w	r3, #16
 800132e:	bf0c      	ite	eq
 8001330:	2004      	moveq	r0, #4
 8001332:	2003      	movne	r0, #3
}
 8001334:	bc30      	pop	{r4, r5}
    FLASH->CR &= CR_PG_Reset;
 8001336:	f641 71fe 	movw	r1, #8190	; 0x1ffe
 800133a:	4a1f      	ldr	r2, [pc, #124]	; (80013b8 <FLASH_ProgramHalfWord+0xc4>)
 800133c:	6913      	ldr	r3, [r2, #16]
 800133e:	400b      	ands	r3, r1
 8001340:	6113      	str	r3, [r2, #16]
}
 8001342:	4770      	bx	lr
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 8001344:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001348:	68d5      	ldr	r5, [r2, #12]
 800134a:	1e5c      	subs	r4, r3, #1
 800134c:	07ed      	lsls	r5, r5, #31
 800134e:	d40a      	bmi.n	8001366 <FLASH_ProgramHalfWord+0x72>
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 8001350:	68d5      	ldr	r5, [r2, #12]
 8001352:	076d      	lsls	r5, r5, #29
 8001354:	d411      	bmi.n	800137a <FLASH_ProgramHalfWord+0x86>
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 8001356:	68d2      	ldr	r2, [r2, #12]
 8001358:	06d2      	lsls	r2, r2, #27
 800135a:	d408      	bmi.n	800136e <FLASH_ProgramHalfWord+0x7a>
  if(Timeout == 0x00 )
 800135c:	2b01      	cmp	r3, #1
 800135e:	d1d7      	bne.n	8001310 <FLASH_ProgramHalfWord+0x1c>
    status = FLASH_TIMEOUT;
 8001360:	2005      	movs	r0, #5
}
 8001362:	bc30      	pop	{r4, r5}
 8001364:	4770      	bx	lr
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 8001366:	4623      	mov	r3, r4
 8001368:	2c00      	cmp	r4, #0
 800136a:	d1ed      	bne.n	8001348 <FLASH_ProgramHalfWord+0x54>
 800136c:	e7f8      	b.n	8001360 <FLASH_ProgramHalfWord+0x6c>
        flashstatus = FLASH_ERROR_WRP;
 800136e:	2003      	movs	r0, #3
    status = FLASH_TIMEOUT;
 8001370:	2c00      	cmp	r4, #0
 8001372:	bf08      	it	eq
 8001374:	2005      	moveq	r0, #5
}
 8001376:	bc30      	pop	{r4, r5}
 8001378:	4770      	bx	lr
      flashstatus = FLASH_ERROR_PG;
 800137a:	2002      	movs	r0, #2
 800137c:	e7f8      	b.n	8001370 <FLASH_ProgramHalfWord+0x7c>
 800137e:	2002      	movs	r0, #2
 8001380:	e7ef      	b.n	8001362 <FLASH_ProgramHalfWord+0x6e>
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 8001382:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001386:	68d1      	ldr	r1, [r2, #12]
 8001388:	3b01      	subs	r3, #1
 800138a:	07cc      	lsls	r4, r1, #31
 800138c:	d40c      	bmi.n	80013a8 <FLASH_ProgramHalfWord+0xb4>
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 800138e:	68d1      	ldr	r1, [r2, #12]
 8001390:	0749      	lsls	r1, r1, #29
 8001392:	d40d      	bmi.n	80013b0 <FLASH_ProgramHalfWord+0xbc>
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 8001394:	68d2      	ldr	r2, [r2, #12]
        flashstatus = FLASH_COMPLETE;
 8001396:	f012 0f10 	tst.w	r2, #16
 800139a:	bf14      	ite	ne
 800139c:	2003      	movne	r0, #3
 800139e:	2004      	moveq	r0, #4
    status = FLASH_TIMEOUT;
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	bf08      	it	eq
 80013a4:	2005      	moveq	r0, #5
 80013a6:	e7c5      	b.n	8001334 <FLASH_ProgramHalfWord+0x40>
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d1ec      	bne.n	8001386 <FLASH_ProgramHalfWord+0x92>
    status = FLASH_TIMEOUT;
 80013ac:	2005      	movs	r0, #5
 80013ae:	e7c1      	b.n	8001334 <FLASH_ProgramHalfWord+0x40>
      flashstatus = FLASH_ERROR_PG;
 80013b0:	2002      	movs	r0, #2
 80013b2:	e7f5      	b.n	80013a0 <FLASH_ProgramHalfWord+0xac>
 80013b4:	2002      	movs	r0, #2
 80013b6:	e7bd      	b.n	8001334 <FLASH_ProgramHalfWord+0x40>
 80013b8:	40022000 	.word	0x40022000

080013bc <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80013bc:	b430      	push	{r4, r5}
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 80013be:	78cc      	ldrb	r4, [r1, #3]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 80013c0:	06e3      	lsls	r3, r4, #27
 80013c2:	bf48      	it	mi
 80013c4:	788b      	ldrbmi	r3, [r1, #2]
 80013c6:	f004 050f 	and.w	r5, r4, #15
 80013ca:	bf48      	it	mi
 80013cc:	431d      	orrmi	r5, r3
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 80013ce:	880b      	ldrh	r3, [r1, #0]
 80013d0:	f013 0fff 	tst.w	r3, #255	; 0xff
 80013d4:	d033      	beq.n	800143e <GPIO_Init+0x82>
 80013d6:	2c48      	cmp	r4, #72	; 0x48
  {
    tmpreg = GPIOx->CRL;
 80013d8:	6802      	ldr	r2, [r0, #0]
 80013da:	f000 80f4 	beq.w	80015c6 <GPIO_Init+0x20a>
 80013de:	2c28      	cmp	r4, #40	; 0x28
 80013e0:	f000 8133 	beq.w	800164a <GPIO_Init+0x28e>
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = ((uint32_t)0x01) << pinpos;
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
      if (currentpin == pos)
 80013e4:	07d9      	lsls	r1, r3, #31
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 80013e6:	bf44      	itt	mi
 80013e8:	f022 020f 	bicmi.w	r2, r2, #15
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80013ec:	432a      	orrmi	r2, r5
      if (currentpin == pos)
 80013ee:	0799      	lsls	r1, r3, #30
        tmpreg &= ~pinmask;
 80013f0:	bf44      	itt	mi
 80013f2:	f022 02f0 	bicmi.w	r2, r2, #240	; 0xf0
        tmpreg |= (currentmode << pos);
 80013f6:	ea42 1205 	orrmi.w	r2, r2, r5, lsl #4
      if (currentpin == pos)
 80013fa:	0759      	lsls	r1, r3, #29
        tmpreg &= ~pinmask;
 80013fc:	bf44      	itt	mi
 80013fe:	f422 6270 	bicmi.w	r2, r2, #3840	; 0xf00
        tmpreg |= (currentmode << pos);
 8001402:	ea42 2205 	orrmi.w	r2, r2, r5, lsl #8
      if (currentpin == pos)
 8001406:	0719      	lsls	r1, r3, #28
        tmpreg &= ~pinmask;
 8001408:	bf44      	itt	mi
 800140a:	f422 4270 	bicmi.w	r2, r2, #61440	; 0xf000
        tmpreg |= (currentmode << pos);
 800140e:	ea42 3205 	orrmi.w	r2, r2, r5, lsl #12
      if (currentpin == pos)
 8001412:	06d9      	lsls	r1, r3, #27
        tmpreg &= ~pinmask;
 8001414:	bf44      	itt	mi
 8001416:	f422 2270 	bicmi.w	r2, r2, #983040	; 0xf0000
        tmpreg |= (currentmode << pos);
 800141a:	ea42 4205 	orrmi.w	r2, r2, r5, lsl #16
      if (currentpin == pos)
 800141e:	0699      	lsls	r1, r3, #26
        tmpreg &= ~pinmask;
 8001420:	bf44      	itt	mi
 8001422:	f422 0270 	bicmi.w	r2, r2, #15728640	; 0xf00000
        tmpreg |= (currentmode << pos);
 8001426:	ea42 5205 	orrmi.w	r2, r2, r5, lsl #20
      if (currentpin == pos)
 800142a:	0659      	lsls	r1, r3, #25
        tmpreg &= ~pinmask;
 800142c:	bf44      	itt	mi
 800142e:	f022 6270 	bicmi.w	r2, r2, #251658240	; 0xf000000
        tmpreg |= (currentmode << pos);
 8001432:	ea42 6205 	orrmi.w	r2, r2, r5, lsl #24
      if (currentpin == pos)
 8001436:	0619      	lsls	r1, r3, #24
 8001438:	f100 8104 	bmi.w	8001644 <GPIO_Init+0x288>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 800143c:	6002      	str	r2, [r0, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 800143e:	2bff      	cmp	r3, #255	; 0xff
 8001440:	d94b      	bls.n	80014da <GPIO_Init+0x11e>
 8001442:	2c28      	cmp	r4, #40	; 0x28
  {
    tmpreg = GPIOx->CRH;
 8001444:	6842      	ldr	r2, [r0, #4]
 8001446:	d04a      	beq.n	80014de <GPIO_Init+0x122>
 8001448:	2c48      	cmp	r4, #72	; 0x48
 800144a:	f040 808e 	bne.w	800156a <GPIO_Init+0x1ae>
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
      if (currentpin == pos)
 800144e:	05d9      	lsls	r1, r3, #23
 8001450:	d505      	bpl.n	800145e <GPIO_Init+0xa2>
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001452:	f44f 7180 	mov.w	r1, #256	; 0x100
        tmpreg &= ~pinmask;
 8001456:	f022 020f 	bic.w	r2, r2, #15
        tmpreg |= (currentmode << pos);
 800145a:	432a      	orrs	r2, r5
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800145c:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 800145e:	059c      	lsls	r4, r3, #22
 8001460:	d506      	bpl.n	8001470 <GPIO_Init+0xb4>
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001462:	f44f 7100 	mov.w	r1, #512	; 0x200
        tmpreg &= ~pinmask;
 8001466:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
        tmpreg |= (currentmode << pos);
 800146a:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800146e:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 8001470:	0559      	lsls	r1, r3, #21
 8001472:	d506      	bpl.n	8001482 <GPIO_Init+0xc6>
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001474:	f44f 6180 	mov.w	r1, #1024	; 0x400
        tmpreg &= ~pinmask;
 8001478:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
        tmpreg |= (currentmode << pos);
 800147c:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001480:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 8001482:	051c      	lsls	r4, r3, #20
 8001484:	d506      	bpl.n	8001494 <GPIO_Init+0xd8>
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001486:	f44f 6100 	mov.w	r1, #2048	; 0x800
        tmpreg &= ~pinmask;
 800148a:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
        tmpreg |= (currentmode << pos);
 800148e:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001492:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 8001494:	04d9      	lsls	r1, r3, #19
 8001496:	d506      	bpl.n	80014a6 <GPIO_Init+0xea>
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001498:	f44f 5180 	mov.w	r1, #4096	; 0x1000
        tmpreg &= ~pinmask;
 800149c:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
        tmpreg |= (currentmode << pos);
 80014a0:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80014a4:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 80014a6:	049c      	lsls	r4, r3, #18
 80014a8:	d506      	bpl.n	80014b8 <GPIO_Init+0xfc>
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80014aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
        tmpreg &= ~pinmask;
 80014ae:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
        tmpreg |= (currentmode << pos);
 80014b2:	ea42 5205 	orr.w	r2, r2, r5, lsl #20
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80014b6:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 80014b8:	0459      	lsls	r1, r3, #17
 80014ba:	d506      	bpl.n	80014ca <GPIO_Init+0x10e>
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80014bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
        tmpreg &= ~pinmask;
 80014c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
        tmpreg |= (currentmode << pos);
 80014c4:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80014c8:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 80014ca:	041c      	lsls	r4, r3, #16
 80014cc:	d504      	bpl.n	80014d8 <GPIO_Init+0x11c>
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80014ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
        tmpreg |= (currentmode << pos);
 80014d2:	f365 721f 	bfi	r2, r5, #28, #4
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80014d6:	6103      	str	r3, [r0, #16]
        }
      }
    }
    GPIOx->CRH = tmpreg;
 80014d8:	6042      	str	r2, [r0, #4]
  }
}
 80014da:	bc30      	pop	{r4, r5}
 80014dc:	4770      	bx	lr
      if (currentpin == pos)
 80014de:	05d9      	lsls	r1, r3, #23
 80014e0:	d505      	bpl.n	80014ee <GPIO_Init+0x132>
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80014e2:	f44f 7180 	mov.w	r1, #256	; 0x100
        tmpreg &= ~pinmask;
 80014e6:	f022 020f 	bic.w	r2, r2, #15
        tmpreg |= (currentmode << pos);
 80014ea:	432a      	orrs	r2, r5
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80014ec:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 80014ee:	059c      	lsls	r4, r3, #22
 80014f0:	d506      	bpl.n	8001500 <GPIO_Init+0x144>
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80014f2:	f44f 7100 	mov.w	r1, #512	; 0x200
        tmpreg &= ~pinmask;
 80014f6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
        tmpreg |= (currentmode << pos);
 80014fa:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80014fe:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 8001500:	0559      	lsls	r1, r3, #21
 8001502:	d506      	bpl.n	8001512 <GPIO_Init+0x156>
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001504:	f44f 6180 	mov.w	r1, #1024	; 0x400
        tmpreg &= ~pinmask;
 8001508:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
        tmpreg |= (currentmode << pos);
 800150c:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001510:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 8001512:	051c      	lsls	r4, r3, #20
 8001514:	d506      	bpl.n	8001524 <GPIO_Init+0x168>
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001516:	f44f 6100 	mov.w	r1, #2048	; 0x800
        tmpreg &= ~pinmask;
 800151a:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
        tmpreg |= (currentmode << pos);
 800151e:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001522:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 8001524:	04d9      	lsls	r1, r3, #19
 8001526:	d506      	bpl.n	8001536 <GPIO_Init+0x17a>
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001528:	f44f 5180 	mov.w	r1, #4096	; 0x1000
        tmpreg &= ~pinmask;
 800152c:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
        tmpreg |= (currentmode << pos);
 8001530:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001534:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 8001536:	049c      	lsls	r4, r3, #18
 8001538:	d506      	bpl.n	8001548 <GPIO_Init+0x18c>
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800153a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
        tmpreg &= ~pinmask;
 800153e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
        tmpreg |= (currentmode << pos);
 8001542:	ea42 5205 	orr.w	r2, r2, r5, lsl #20
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001546:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 8001548:	0459      	lsls	r1, r3, #17
 800154a:	d506      	bpl.n	800155a <GPIO_Init+0x19e>
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800154c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
        tmpreg &= ~pinmask;
 8001550:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
        tmpreg |= (currentmode << pos);
 8001554:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001558:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 800155a:	041b      	lsls	r3, r3, #16
 800155c:	d5bc      	bpl.n	80014d8 <GPIO_Init+0x11c>
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800155e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
        tmpreg |= (currentmode << pos);
 8001562:	f365 721f 	bfi	r2, r5, #28, #4
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001566:	6143      	str	r3, [r0, #20]
 8001568:	e7b6      	b.n	80014d8 <GPIO_Init+0x11c>
      if (currentpin == pos)
 800156a:	05d9      	lsls	r1, r3, #23
        tmpreg &= ~pinmask;
 800156c:	bf44      	itt	mi
 800156e:	f022 020f 	bicmi.w	r2, r2, #15
        tmpreg |= (currentmode << pos);
 8001572:	432a      	orrmi	r2, r5
      if (currentpin == pos)
 8001574:	059c      	lsls	r4, r3, #22
        tmpreg &= ~pinmask;
 8001576:	bf44      	itt	mi
 8001578:	f022 02f0 	bicmi.w	r2, r2, #240	; 0xf0
        tmpreg |= (currentmode << pos);
 800157c:	ea42 1205 	orrmi.w	r2, r2, r5, lsl #4
      if (currentpin == pos)
 8001580:	0559      	lsls	r1, r3, #21
        tmpreg &= ~pinmask;
 8001582:	bf44      	itt	mi
 8001584:	f422 6270 	bicmi.w	r2, r2, #3840	; 0xf00
        tmpreg |= (currentmode << pos);
 8001588:	ea42 2205 	orrmi.w	r2, r2, r5, lsl #8
      if (currentpin == pos)
 800158c:	051c      	lsls	r4, r3, #20
        tmpreg &= ~pinmask;
 800158e:	bf44      	itt	mi
 8001590:	f422 4270 	bicmi.w	r2, r2, #61440	; 0xf000
        tmpreg |= (currentmode << pos);
 8001594:	ea42 3205 	orrmi.w	r2, r2, r5, lsl #12
      if (currentpin == pos)
 8001598:	04d9      	lsls	r1, r3, #19
        tmpreg &= ~pinmask;
 800159a:	bf44      	itt	mi
 800159c:	f422 2270 	bicmi.w	r2, r2, #983040	; 0xf0000
        tmpreg |= (currentmode << pos);
 80015a0:	ea42 4205 	orrmi.w	r2, r2, r5, lsl #16
      if (currentpin == pos)
 80015a4:	049c      	lsls	r4, r3, #18
        tmpreg &= ~pinmask;
 80015a6:	bf44      	itt	mi
 80015a8:	f422 0270 	bicmi.w	r2, r2, #15728640	; 0xf00000
        tmpreg |= (currentmode << pos);
 80015ac:	ea42 5205 	orrmi.w	r2, r2, r5, lsl #20
      if (currentpin == pos)
 80015b0:	0459      	lsls	r1, r3, #17
        tmpreg &= ~pinmask;
 80015b2:	bf44      	itt	mi
 80015b4:	f022 6270 	bicmi.w	r2, r2, #251658240	; 0xf000000
        tmpreg |= (currentmode << pos);
 80015b8:	ea42 6205 	orrmi.w	r2, r2, r5, lsl #24
      if (currentpin == pos)
 80015bc:	041c      	lsls	r4, r3, #16
 80015be:	d58b      	bpl.n	80014d8 <GPIO_Init+0x11c>
        tmpreg |= (currentmode << pos);
 80015c0:	f365 721f 	bfi	r2, r5, #28, #4
 80015c4:	e788      	b.n	80014d8 <GPIO_Init+0x11c>
      if (currentpin == pos)
 80015c6:	07d9      	lsls	r1, r3, #31
 80015c8:	d504      	bpl.n	80015d4 <GPIO_Init+0x218>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80015ca:	2101      	movs	r1, #1
        tmpreg &= ~pinmask;
 80015cc:	f022 020f 	bic.w	r2, r2, #15
        tmpreg |= (currentmode << pos);
 80015d0:	432a      	orrs	r2, r5
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80015d2:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 80015d4:	0799      	lsls	r1, r3, #30
 80015d6:	d505      	bpl.n	80015e4 <GPIO_Init+0x228>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80015d8:	2102      	movs	r1, #2
        tmpreg &= ~pinmask;
 80015da:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
        tmpreg |= (currentmode << pos);
 80015de:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80015e2:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 80015e4:	0759      	lsls	r1, r3, #29
 80015e6:	d505      	bpl.n	80015f4 <GPIO_Init+0x238>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80015e8:	2104      	movs	r1, #4
        tmpreg &= ~pinmask;
 80015ea:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
        tmpreg |= (currentmode << pos);
 80015ee:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80015f2:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 80015f4:	0719      	lsls	r1, r3, #28
 80015f6:	d505      	bpl.n	8001604 <GPIO_Init+0x248>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80015f8:	2108      	movs	r1, #8
        tmpreg &= ~pinmask;
 80015fa:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
        tmpreg |= (currentmode << pos);
 80015fe:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8001602:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 8001604:	06d9      	lsls	r1, r3, #27
 8001606:	d505      	bpl.n	8001614 <GPIO_Init+0x258>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8001608:	2110      	movs	r1, #16
        tmpreg &= ~pinmask;
 800160a:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
        tmpreg |= (currentmode << pos);
 800160e:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8001612:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 8001614:	0699      	lsls	r1, r3, #26
 8001616:	d505      	bpl.n	8001624 <GPIO_Init+0x268>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8001618:	2120      	movs	r1, #32
        tmpreg &= ~pinmask;
 800161a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
        tmpreg |= (currentmode << pos);
 800161e:	ea42 5205 	orr.w	r2, r2, r5, lsl #20
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8001622:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 8001624:	0659      	lsls	r1, r3, #25
 8001626:	d505      	bpl.n	8001634 <GPIO_Init+0x278>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8001628:	2140      	movs	r1, #64	; 0x40
        tmpreg &= ~pinmask;
 800162a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
        tmpreg |= (currentmode << pos);
 800162e:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8001632:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 8001634:	0619      	lsls	r1, r3, #24
 8001636:	f57f af01 	bpl.w	800143c <GPIO_Init+0x80>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 800163a:	2180      	movs	r1, #128	; 0x80
        tmpreg |= (currentmode << pos);
 800163c:	f365 721f 	bfi	r2, r5, #28, #4
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8001640:	6101      	str	r1, [r0, #16]
 8001642:	e6fb      	b.n	800143c <GPIO_Init+0x80>
        tmpreg |= (currentmode << pos);
 8001644:	f365 721f 	bfi	r2, r5, #28, #4
 8001648:	e6f8      	b.n	800143c <GPIO_Init+0x80>
      if (currentpin == pos)
 800164a:	07d9      	lsls	r1, r3, #31
 800164c:	d504      	bpl.n	8001658 <GPIO_Init+0x29c>
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 800164e:	2101      	movs	r1, #1
        tmpreg &= ~pinmask;
 8001650:	f022 020f 	bic.w	r2, r2, #15
        tmpreg |= (currentmode << pos);
 8001654:	432a      	orrs	r2, r5
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8001656:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 8001658:	0799      	lsls	r1, r3, #30
 800165a:	d505      	bpl.n	8001668 <GPIO_Init+0x2ac>
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 800165c:	2102      	movs	r1, #2
        tmpreg &= ~pinmask;
 800165e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
        tmpreg |= (currentmode << pos);
 8001662:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8001666:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 8001668:	0759      	lsls	r1, r3, #29
 800166a:	d505      	bpl.n	8001678 <GPIO_Init+0x2bc>
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 800166c:	2104      	movs	r1, #4
        tmpreg &= ~pinmask;
 800166e:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
        tmpreg |= (currentmode << pos);
 8001672:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8001676:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 8001678:	0719      	lsls	r1, r3, #28
 800167a:	d505      	bpl.n	8001688 <GPIO_Init+0x2cc>
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 800167c:	2108      	movs	r1, #8
        tmpreg &= ~pinmask;
 800167e:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
        tmpreg |= (currentmode << pos);
 8001682:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8001686:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 8001688:	06d9      	lsls	r1, r3, #27
 800168a:	d505      	bpl.n	8001698 <GPIO_Init+0x2dc>
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 800168c:	2110      	movs	r1, #16
        tmpreg &= ~pinmask;
 800168e:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
        tmpreg |= (currentmode << pos);
 8001692:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8001696:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 8001698:	0699      	lsls	r1, r3, #26
 800169a:	d505      	bpl.n	80016a8 <GPIO_Init+0x2ec>
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 800169c:	2120      	movs	r1, #32
        tmpreg &= ~pinmask;
 800169e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
        tmpreg |= (currentmode << pos);
 80016a2:	ea42 5205 	orr.w	r2, r2, r5, lsl #20
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80016a6:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 80016a8:	0659      	lsls	r1, r3, #25
 80016aa:	d505      	bpl.n	80016b8 <GPIO_Init+0x2fc>
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80016ac:	2140      	movs	r1, #64	; 0x40
        tmpreg &= ~pinmask;
 80016ae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
        tmpreg |= (currentmode << pos);
 80016b2:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80016b6:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 80016b8:	0619      	lsls	r1, r3, #24
 80016ba:	f57f aebf 	bpl.w	800143c <GPIO_Init+0x80>
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80016be:	2180      	movs	r1, #128	; 0x80
        tmpreg |= (currentmode << pos);
 80016c0:	f365 721f 	bfi	r2, r5, #28, #4
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80016c4:	6141      	str	r1, [r0, #20]
 80016c6:	e6b9      	b.n	800143c <GPIO_Init+0x80>

080016c8 <GPIO_ReadInputData>:
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  return ((uint16_t)GPIOx->IDR);
 80016c8:	6880      	ldr	r0, [r0, #8]
}
 80016ca:	b280      	uxth	r0, r0
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop

080016d0 <GPIO_ReadOutputData>:
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    
  return ((uint16_t)GPIOx->ODR);
 80016d0:	68c0      	ldr	r0, [r0, #12]
}
 80016d2:	b280      	uxth	r0, r0
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop

080016d8 <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 80016d8:	6101      	str	r1, [r0, #16]
}
 80016da:	4770      	bx	lr

080016dc <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 80016dc:	6141      	str	r1, [r0, #20]
}
 80016de:	4770      	bx	lr

080016e0 <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
 80016e0:	b90a      	cbnz	r2, 80016e6 <GPIO_WriteBit+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
 80016e2:	6141      	str	r1, [r0, #20]
  }
}
 80016e4:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 80016e6:	6101      	str	r1, [r0, #16]
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop

080016ec <GPIO_PinRemapConfig>:

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if((GPIO_Remap & 0x80000000) == 0x80000000)
 80016ec:	2800      	cmp	r0, #0
  {
    tmpreg = AFIO->MAPR2;
 80016ee:	4b19      	ldr	r3, [pc, #100]	; (8001754 <GPIO_PinRemapConfig+0x68>)
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 80016f0:	f400 1240 	and.w	r2, r0, #3145728	; 0x300000
    tmpreg = AFIO->MAPR2;
 80016f4:	bfb4      	ite	lt
 80016f6:	69db      	ldrlt	r3, [r3, #28]
    tmpreg = AFIO->MAPR;
 80016f8:	685b      	ldrge	r3, [r3, #4]
  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 80016fa:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
{
 80016fe:	b430      	push	{r4, r5}
  tmp = GPIO_Remap & LSB_MASK;
 8001700:	b284      	uxth	r4, r0
  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 8001702:	d01e      	beq.n	8001742 <GPIO_PinRemapConfig+0x56>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
 8001704:	02c2      	lsls	r2, r0, #11
 8001706:	d513      	bpl.n	8001730 <GPIO_PinRemapConfig+0x44>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
 8001708:	2203      	movs	r2, #3
  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
 800170a:	f3c0 4503 	ubfx	r5, r0, #16, #4
    tmp1 = ((uint32_t)0x03) << tmpmask;
 800170e:	40aa      	lsls	r2, r5
    tmpreg &= ~tmp1;
 8001710:	ea23 0302 	bic.w	r3, r3, r2
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 8001714:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
  }

  if (NewState != DISABLE)
 8001718:	b119      	cbz	r1, 8001722 <GPIO_PinRemapConfig+0x36>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
 800171a:	0d42      	lsrs	r2, r0, #21
 800171c:	0112      	lsls	r2, r2, #4
 800171e:	4094      	lsls	r4, r2
 8001720:	4323      	orrs	r3, r4
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
  {
    AFIO->MAPR2 = tmpreg;
 8001722:	4a0c      	ldr	r2, [pc, #48]	; (8001754 <GPIO_PinRemapConfig+0x68>)
  if((GPIO_Remap & 0x80000000) == 0x80000000)
 8001724:	2800      	cmp	r0, #0
    AFIO->MAPR2 = tmpreg;
 8001726:	bfb4      	ite	lt
 8001728:	61d3      	strlt	r3, [r2, #28]
  }
  else
  {
    AFIO->MAPR = tmpreg;
 800172a:	6053      	strge	r3, [r2, #4]
  }  
}
 800172c:	bc30      	pop	{r4, r5}
 800172e:	4770      	bx	lr
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 8001730:	0d42      	lsrs	r2, r0, #21
 8001732:	0112      	lsls	r2, r2, #4
 8001734:	fa04 f202 	lsl.w	r2, r4, r2
 8001738:	ea23 0302 	bic.w	r3, r3, r2
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 800173c:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8001740:	e7ea      	b.n	8001718 <GPIO_PinRemapConfig+0x2c>
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 8001742:	4d04      	ldr	r5, [pc, #16]	; (8001754 <GPIO_PinRemapConfig+0x68>)
    tmpreg &= DBGAFR_SWJCFG_MASK;
 8001744:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 8001748:	686a      	ldr	r2, [r5, #4]
 800174a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800174e:	606a      	str	r2, [r5, #4]
 8001750:	e7e2      	b.n	8001718 <GPIO_PinRemapConfig+0x2c>
 8001752:	bf00      	nop
 8001754:	40010000 	.word	0x40010000

08001758 <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
 8001758:	b410      	push	{r4}
  uint32_t tmp = 0x00;
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
 800175a:	240f      	movs	r4, #15
 800175c:	f001 03fc 	and.w	r3, r1, #252	; 0xfc
 8001760:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001764:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001768:	f001 0103 	and.w	r1, r1, #3
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 800176c:	689a      	ldr	r2, [r3, #8]
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
 800176e:	0089      	lsls	r1, r1, #2
 8001770:	408c      	lsls	r4, r1
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 8001772:	ea22 0204 	bic.w	r2, r2, r4
 8001776:	609a      	str	r2, [r3, #8]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
 8001778:	689a      	ldr	r2, [r3, #8]
 800177a:	fa00 f101 	lsl.w	r1, r0, r1
 800177e:	4311      	orrs	r1, r2
 8001780:	6099      	str	r1, [r3, #8]
}
 8001782:	bc10      	pop	{r4}
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop

08001788 <RCC_USBCLKConfig>:
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
 8001788:	4b01      	ldr	r3, [pc, #4]	; (8001790 <RCC_USBCLKConfig+0x8>)
 800178a:	6018      	str	r0, [r3, #0]
}
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	424200d8 	.word	0x424200d8

08001794 <RCC_GetClocksFreq>:
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8001794:	4a21      	ldr	r2, [pc, #132]	; (800181c <RCC_GetClocksFreq+0x88>)
{
 8001796:	b430      	push	{r4, r5}
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8001798:	6853      	ldr	r3, [r2, #4]
 800179a:	f003 030c 	and.w	r3, r3, #12
  
  switch (tmp)
 800179e:	2b04      	cmp	r3, #4
 80017a0:	d033      	beq.n	800180a <RCC_GetClocksFreq+0x76>
 80017a2:	2b08      	cmp	r3, #8
 80017a4:	d020      	beq.n	80017e8 <RCC_GetClocksFreq+0x54>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80017a6:	4b1e      	ldr	r3, [pc, #120]	; (8001820 <RCC_GetClocksFreq+0x8c>)
 80017a8:	6003      	str	r3, [r0, #0]
      break;
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 80017aa:	4a1c      	ldr	r2, [pc, #112]	; (800181c <RCC_GetClocksFreq+0x88>)
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];
 80017ac:	4c1d      	ldr	r4, [pc, #116]	; (8001824 <RCC_GetClocksFreq+0x90>)
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 80017ae:	6851      	ldr	r1, [r2, #4]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
  tmp = tmp >> 14;
  presc = ADCPrescTable[tmp];
 80017b0:	4d1d      	ldr	r5, [pc, #116]	; (8001828 <RCC_GetClocksFreq+0x94>)
  tmp = tmp >> 4;
 80017b2:	f3c1 1103 	ubfx	r1, r1, #4, #4
  presc = APBAHBPrescTable[tmp];
 80017b6:	5c61      	ldrb	r1, [r4, r1]
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80017b8:	40cb      	lsrs	r3, r1
 80017ba:	6043      	str	r3, [r0, #4]
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 80017bc:	6851      	ldr	r1, [r2, #4]
  tmp = tmp >> 8;
 80017be:	f3c1 2102 	ubfx	r1, r1, #8, #3
  presc = APBAHBPrescTable[tmp];
 80017c2:	5c61      	ldrb	r1, [r4, r1]
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80017c4:	fa23 f101 	lsr.w	r1, r3, r1
 80017c8:	6081      	str	r1, [r0, #8]
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 80017ca:	6851      	ldr	r1, [r2, #4]
  tmp = tmp >> 11;
 80017cc:	f3c1 21c2 	ubfx	r1, r1, #11, #3
  presc = APBAHBPrescTable[tmp];
 80017d0:	5c61      	ldrb	r1, [r4, r1]
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80017d2:	40cb      	lsrs	r3, r1
 80017d4:	60c3      	str	r3, [r0, #12]
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 80017d6:	6852      	ldr	r2, [r2, #4]
  tmp = tmp >> 14;
 80017d8:	f3c2 3281 	ubfx	r2, r2, #14, #2
  presc = ADCPrescTable[tmp];
 80017dc:	5caa      	ldrb	r2, [r5, r2]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
}
 80017de:	bc30      	pop	{r4, r5}
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 80017e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80017e4:	6103      	str	r3, [r0, #16]
}
 80017e6:	4770      	bx	lr
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 80017e8:	6853      	ldr	r3, [r2, #4]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 80017ea:	6851      	ldr	r1, [r2, #4]
      pllmull = ( pllmull >> 18) + 2;
 80017ec:	f3c3 4383 	ubfx	r3, r3, #18, #4
      if (pllsource == 0x00)
 80017f0:	03c9      	lsls	r1, r1, #15
      pllmull = ( pllmull >> 18) + 2;
 80017f2:	f103 0302 	add.w	r3, r3, #2
      if (pllsource == 0x00)
 80017f6:	d50b      	bpl.n	8001810 <RCC_GetClocksFreq+0x7c>
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 80017f8:	6852      	ldr	r2, [r2, #4]
 80017fa:	0392      	lsls	r2, r2, #14
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 80017fc:	bf4c      	ite	mi
 80017fe:	4a0b      	ldrmi	r2, [pc, #44]	; (800182c <RCC_GetClocksFreq+0x98>)
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 8001800:	4a0b      	ldrpl	r2, [pc, #44]	; (8001830 <RCC_GetClocksFreq+0x9c>)
 8001802:	fb02 f303 	mul.w	r3, r2, r3
 8001806:	6003      	str	r3, [r0, #0]
 8001808:	e7cf      	b.n	80017aa <RCC_GetClocksFreq+0x16>
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 800180a:	4b09      	ldr	r3, [pc, #36]	; (8001830 <RCC_GetClocksFreq+0x9c>)
 800180c:	6003      	str	r3, [r0, #0]
      break;
 800180e:	e7cc      	b.n	80017aa <RCC_GetClocksFreq+0x16>
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 8001810:	4a08      	ldr	r2, [pc, #32]	; (8001834 <RCC_GetClocksFreq+0xa0>)
 8001812:	fb02 f303 	mul.w	r3, r2, r3
 8001816:	6003      	str	r3, [r0, #0]
 8001818:	e7c7      	b.n	80017aa <RCC_GetClocksFreq+0x16>
 800181a:	bf00      	nop
 800181c:	40021000 	.word	0x40021000
 8001820:	007a1200 	.word	0x007a1200
 8001824:	20000004 	.word	0x20000004
 8001828:	20000000 	.word	0x20000000
 800182c:	00061a80 	.word	0x00061a80
 8001830:	000c3500 	.word	0x000c3500
 8001834:	003d0900 	.word	0x003d0900

08001838 <RCC_APB2PeriphClockCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001838:	4a04      	ldr	r2, [pc, #16]	; (800184c <RCC_APB2PeriphClockCmd+0x14>)
 800183a:	6993      	ldr	r3, [r2, #24]
  if (NewState != DISABLE)
 800183c:	b919      	cbnz	r1, 8001846 <RCC_APB2PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 800183e:	ea23 0000 	bic.w	r0, r3, r0
 8001842:	6190      	str	r0, [r2, #24]
  }
}
 8001844:	4770      	bx	lr
    RCC->APB2ENR |= RCC_APB2Periph;
 8001846:	4318      	orrs	r0, r3
 8001848:	6190      	str	r0, [r2, #24]
 800184a:	4770      	bx	lr
 800184c:	40021000 	.word	0x40021000

08001850 <RCC_APB1PeriphClockCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001850:	4a04      	ldr	r2, [pc, #16]	; (8001864 <RCC_APB1PeriphClockCmd+0x14>)
 8001852:	69d3      	ldr	r3, [r2, #28]
  if (NewState != DISABLE)
 8001854:	b919      	cbnz	r1, 800185e <RCC_APB1PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001856:	ea23 0000 	bic.w	r0, r3, r0
 800185a:	61d0      	str	r0, [r2, #28]
  }
}
 800185c:	4770      	bx	lr
    RCC->APB1ENR |= RCC_APB1Periph;
 800185e:	4318      	orrs	r0, r3
 8001860:	61d0      	str	r0, [r2, #28]
 8001862:	4770      	bx	lr
 8001864:	40021000 	.word	0x40021000

08001868 <TIM_TimeBaseInit>:
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 8001868:	4a27      	ldr	r2, [pc, #156]	; (8001908 <TIM_TimeBaseInit+0xa0>)
  tmpcr1 = TIMx->CR1;  
 800186a:	8803      	ldrh	r3, [r0, #0]
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 800186c:	4290      	cmp	r0, r2
{
 800186e:	b470      	push	{r4, r5, r6}
  tmpcr1 = TIMx->CR1;  
 8001870:	b29b      	uxth	r3, r3
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 8001872:	d012      	beq.n	800189a <TIM_TimeBaseInit+0x32>
 8001874:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001878:	4290      	cmp	r0, r2
 800187a:	d00e      	beq.n	800189a <TIM_TimeBaseInit+0x32>
 800187c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001880:	d00b      	beq.n	800189a <TIM_TimeBaseInit+0x32>
 8001882:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001886:	4290      	cmp	r0, r2
 8001888:	d007      	beq.n	800189a <TIM_TimeBaseInit+0x32>
 800188a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800188e:	4290      	cmp	r0, r2
 8001890:	d003      	beq.n	800189a <TIM_TimeBaseInit+0x32>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8001892:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001896:	4290      	cmp	r0, r2
 8001898:	d103      	bne.n	80018a2 <TIM_TimeBaseInit+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 800189a:	884a      	ldrh	r2, [r1, #2]
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 800189c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80018a0:	4313      	orrs	r3, r2
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 80018a2:	4d1a      	ldr	r5, [pc, #104]	; (800190c <TIM_TimeBaseInit+0xa4>)
 80018a4:	888c      	ldrh	r4, [r1, #4]
 80018a6:	42a8      	cmp	r0, r5
 80018a8:	880a      	ldrh	r2, [r1, #0]
 80018aa:	d015      	beq.n	80018d8 <TIM_TimeBaseInit+0x70>
 80018ac:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80018b0:	42a8      	cmp	r0, r5
 80018b2:	d011      	beq.n	80018d8 <TIM_TimeBaseInit+0x70>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80018b4:	88ce      	ldrh	r6, [r1, #6]
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 80018b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80018ba:	b29b      	uxth	r3, r3
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 80018bc:	f505 358c 	add.w	r5, r5, #71680	; 0x11800
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80018c0:	4333      	orrs	r3, r6
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 80018c2:	42a8      	cmp	r0, r5
  TIMx->CR1 = tmpcr1;
 80018c4:	8003      	strh	r3, [r0, #0]
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80018c6:	8584      	strh	r4, [r0, #44]	; 0x2c
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80018c8:	8502      	strh	r2, [r0, #40]	; 0x28
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 80018ca:	d10c      	bne.n	80018e6 <TIM_TimeBaseInit+0x7e>
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
}
 80018cc:	bc70      	pop	{r4, r5, r6}
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 80018ce:	7a0b      	ldrb	r3, [r1, #8]
 80018d0:	8603      	strh	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 80018d2:	2301      	movs	r3, #1
 80018d4:	8283      	strh	r3, [r0, #20]
}
 80018d6:	4770      	bx	lr
  TIMx->CR1 = tmpcr1;
 80018d8:	8003      	strh	r3, [r0, #0]
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80018da:	8584      	strh	r4, [r0, #44]	; 0x2c
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80018dc:	8502      	strh	r2, [r0, #40]	; 0x28
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 80018de:	2301      	movs	r3, #1
}
 80018e0:	bc70      	pop	{r4, r5, r6}
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 80018e2:	8283      	strh	r3, [r0, #20]
}
 80018e4:	4770      	bx	lr
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 80018e6:	4b0a      	ldr	r3, [pc, #40]	; (8001910 <TIM_TimeBaseInit+0xa8>)
 80018e8:	4298      	cmp	r0, r3
 80018ea:	d0ef      	beq.n	80018cc <TIM_TimeBaseInit+0x64>
 80018ec:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80018f0:	4298      	cmp	r0, r3
 80018f2:	d0eb      	beq.n	80018cc <TIM_TimeBaseInit+0x64>
 80018f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80018f8:	4298      	cmp	r0, r3
 80018fa:	d0e7      	beq.n	80018cc <TIM_TimeBaseInit+0x64>
 80018fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001900:	4298      	cmp	r0, r3
 8001902:	d0e3      	beq.n	80018cc <TIM_TimeBaseInit+0x64>
 8001904:	e7eb      	b.n	80018de <TIM_TimeBaseInit+0x76>
 8001906:	bf00      	nop
 8001908:	40012c00 	.word	0x40012c00
 800190c:	40001000 	.word	0x40001000
 8001910:	40013400 	.word	0x40013400

08001914 <TIM_OC1Init>:
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 8001914:	8c03      	ldrh	r3, [r0, #32]
{
 8001916:	b4f0      	push	{r4, r5, r6, r7}
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 8001918:	f023 0301 	bic.w	r3, r3, #1
 800191c:	041b      	lsls	r3, r3, #16
 800191e:	0c1b      	lsrs	r3, r3, #16
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8001920:	890d      	ldrh	r5, [r1, #8]
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 8001922:	8403      	strh	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001924:	8c02      	ldrh	r2, [r0, #32]
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8001926:	884e      	ldrh	r6, [r1, #2]
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 8001928:	f022 0202 	bic.w	r2, r2, #2
  tmpcr2 =  TIMx->CR2;
 800192c:	8884      	ldrh	r4, [r0, #4]
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 800192e:	0412      	lsls	r2, r2, #16
  tmpccmrx = TIMx->CCMR1;
 8001930:	8b03      	ldrh	r3, [r0, #24]
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8001932:	4335      	orrs	r5, r6
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 8001934:	0c12      	lsrs	r2, r2, #16
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
 8001936:	f023 0373 	bic.w	r3, r3, #115	; 0x73
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 800193a:	432a      	orrs	r2, r5
    
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
 800193c:	4d16      	ldr	r5, [pc, #88]	; (8001998 <TIM_OC1Init+0x84>)
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
 800193e:	041b      	lsls	r3, r3, #16
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8001940:	880e      	ldrh	r6, [r1, #0]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
 8001942:	0c1b      	lsrs	r3, r3, #16
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
 8001944:	42a8      	cmp	r0, r5
  tmpcr2 =  TIMx->CR2;
 8001946:	b2a4      	uxth	r4, r4
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8001948:	ea43 0306 	orr.w	r3, r3, r6
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
 800194c:	d00f      	beq.n	800196e <TIM_OC1Init+0x5a>
 800194e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001952:	42a8      	cmp	r0, r5
 8001954:	d00b      	beq.n	800196e <TIM_OC1Init+0x5a>
 8001956:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800195a:	42a8      	cmp	r0, r5
 800195c:	d007      	beq.n	800196e <TIM_OC1Init+0x5a>
 800195e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001962:	42a8      	cmp	r0, r5
 8001964:	d003      	beq.n	800196e <TIM_OC1Init+0x5a>
     (TIMx == TIM16)|| (TIMx == TIM17))
 8001966:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800196a:	42a8      	cmp	r0, r5
 800196c:	d10d      	bne.n	800198a <TIM_OC1Init+0x76>
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NP));
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 800196e:	894e      	ldrh	r6, [r1, #10]
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NP));
 8001970:	f022 0208 	bic.w	r2, r2, #8
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1N));
    
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8001974:	898d      	ldrh	r5, [r1, #12]
 8001976:	89cf      	ldrh	r7, [r1, #14]
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8001978:	4332      	orrs	r2, r6
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 800197a:	888e      	ldrh	r6, [r1, #4]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1N));
 800197c:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NE));    
 8001980:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8001984:	433d      	orrs	r5, r7
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8001986:	4332      	orrs	r2, r6
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8001988:	432c      	orrs	r4, r5
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
 800198a:	88c9      	ldrh	r1, [r1, #6]
  TIMx->CR2 = tmpcr2;
 800198c:	8084      	strh	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800198e:	8303      	strh	r3, [r0, #24]
 
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8001990:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
 8001992:	8681      	strh	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8001994:	8402      	strh	r2, [r0, #32]
}
 8001996:	4770      	bx	lr
 8001998:	40012c00 	.word	0x40012c00

0800199c <TIM_TimeBaseStructInit>:
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFF;
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 800199c:	2300      	movs	r3, #0
 800199e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019a2:	6003      	str	r3, [r0, #0]
 80019a4:	6042      	str	r2, [r0, #4]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 80019a6:	7203      	strb	r3, [r0, #8]
}
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop

080019ac <TIM_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80019ac:	8803      	ldrh	r3, [r0, #0]
  if (NewState != DISABLE)
 80019ae:	b929      	cbnz	r1, 80019bc <TIM_Cmd+0x10>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 80019b0:	f023 0301 	bic.w	r3, r3, #1
 80019b4:	041b      	lsls	r3, r3, #16
 80019b6:	0c1b      	lsrs	r3, r3, #16
 80019b8:	8003      	strh	r3, [r0, #0]
  }
}
 80019ba:	4770      	bx	lr
    TIMx->CR1 |= TIM_CR1_CEN;
 80019bc:	f043 0301 	orr.w	r3, r3, #1
 80019c0:	8003      	strh	r3, [r0, #0]
 80019c2:	4770      	bx	lr

080019c4 <TIM_CtrlPWMOutputs>:
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 80019c4:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
  if (NewState != DISABLE)
 80019c8:	b921      	cbnz	r1, 80019d4 <TIM_CtrlPWMOutputs+0x10>
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)(~((uint16_t)TIM_BDTR_MOE));
 80019ca:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80019ce:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  }  
}
 80019d2:	4770      	bx	lr
    TIMx->BDTR |= TIM_BDTR_MOE;
 80019d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019d8:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop

080019e0 <TIM_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 80019e0:	8983      	ldrh	r3, [r0, #12]
  if (NewState != DISABLE)
 80019e2:	b91a      	cbnz	r2, 80019ec <TIM_ITConfig+0xc>
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 80019e4:	ea23 0101 	bic.w	r1, r3, r1
 80019e8:	8181      	strh	r1, [r0, #12]
  }
}
 80019ea:	4770      	bx	lr
    TIMx->DIER |= TIM_IT;
 80019ec:	4319      	orrs	r1, r3
 80019ee:	8181      	strh	r1, [r0, #12]
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop

080019f4 <TIM_OC1PreloadConfig>:
{
  uint16_t tmpccmr1 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr1 = TIMx->CCMR1;
 80019f4:	8b03      	ldrh	r3, [r0, #24]
  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1PE);
 80019f6:	f023 0308 	bic.w	r3, r3, #8
 80019fa:	041b      	lsls	r3, r3, #16
 80019fc:	0c1b      	lsrs	r3, r3, #16
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 80019fe:	4319      	orrs	r1, r3
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8001a00:	8301      	strh	r1, [r0, #24]
}
 8001a02:	4770      	bx	lr

08001a04 <TIM_ClearITPendingBit>:
 8001a04:	43c9      	mvns	r1, r1
 8001a06:	b289      	uxth	r1, r1
 8001a08:	8201      	strh	r1, [r0, #16]
 8001a0a:	4770      	bx	lr

08001a0c <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8001a0c:	b530      	push	{r4, r5, lr}
 8001a0e:	460d      	mov	r5, r1
 8001a10:	4604      	mov	r4, r0
  }

  usartxbase = (uint32_t)USARTx;

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8001a12:	8a03      	ldrh	r3, [r0, #16]
 8001a14:	88ca      	ldrh	r2, [r1, #6]
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a1c:	4313      	orrs	r3, r2
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
 8001a1e:	898a      	ldrh	r2, [r1, #12]
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8001a20:	8203      	strh	r3, [r0, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8001a22:	8980      	ldrh	r0, [r0, #12]
 8001a24:	4b23      	ldr	r3, [pc, #140]	; (8001ab4 <USART_Init+0xa8>)
 8001a26:	8889      	ldrh	r1, [r1, #4]
 8001a28:	4003      	ands	r3, r0
 8001a2a:	8928      	ldrh	r0, [r5, #8]
 8001a2c:	430b      	orrs	r3, r1
 8001a2e:	8969      	ldrh	r1, [r5, #10]
 8001a30:	4303      	orrs	r3, r0
 8001a32:	430b      	orrs	r3, r1
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8001a34:	81a3      	strh	r3, [r4, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8001a36:	8aa3      	ldrh	r3, [r4, #20]
{
 8001a38:	b087      	sub	sp, #28
  tmpreg = USARTx->CR3;
 8001a3a:	b29b      	uxth	r3, r3
 8001a3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a40:	4313      	orrs	r3, r2
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8001a42:	a801      	add	r0, sp, #4
  USARTx->CR3 = (uint16_t)tmpreg;
 8001a44:	82a3      	strh	r3, [r4, #20]
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8001a46:	f7ff fea5 	bl	8001794 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8001a4a:	e9dd 3103 	ldrd	r3, r1, [sp, #12]
  if (usartxbase == USART1_BASE)
 8001a4e:	481a      	ldr	r0, [pc, #104]	; (8001ab8 <USART_Init+0xac>)
 8001a50:	682a      	ldr	r2, [r5, #0]
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8001a52:	4284      	cmp	r4, r0
 8001a54:	bf08      	it	eq
 8001a56:	460b      	moveq	r3, r1
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8001a58:	89a1      	ldrh	r1, [r4, #12]
 8001a5a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001a5e:	0409      	lsls	r1, r1, #16
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8001a60:	bf4c      	ite	mi
 8001a62:	0052      	lslmi	r2, r2, #1
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8001a64:	0092      	lslpl	r2, r2, #2
 8001a66:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001a6a:	fbb3 f3f2 	udiv	r3, r3, r2
 8001a6e:	2264      	movs	r2, #100	; 0x64
  }
  tmpreg = (integerdivider / 100) << 4;
 8001a70:	4812      	ldr	r0, [pc, #72]	; (8001abc <USART_Init+0xb0>)

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8001a72:	89a5      	ldrh	r5, [r4, #12]
  tmpreg = (integerdivider / 100) << 4;
 8001a74:	fba0 c103 	umull	ip, r1, r0, r3
 8001a78:	0949      	lsrs	r1, r1, #5
 8001a7a:	fb02 3311 	mls	r3, r2, r1, r3
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8001a7e:	042a      	lsls	r2, r5, #16
  tmpreg = (integerdivider / 100) << 4;
 8001a80:	ea4f 1101 	mov.w	r1, r1, lsl #4
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8001a84:	d40a      	bmi.n	8001a9c <USART_Init+0x90>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8001a86:	011b      	lsls	r3, r3, #4
 8001a88:	3332      	adds	r3, #50	; 0x32
 8001a8a:	fba0 2303 	umull	r2, r3, r0, r3
 8001a8e:	f3c3 1343 	ubfx	r3, r3, #5, #4
 8001a92:	430b      	orrs	r3, r1
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	8123      	strh	r3, [r4, #8]
}
 8001a98:	b007      	add	sp, #28
 8001a9a:	bd30      	pop	{r4, r5, pc}
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8001a9c:	00da      	lsls	r2, r3, #3
 8001a9e:	3232      	adds	r2, #50	; 0x32
 8001aa0:	fba0 3202 	umull	r3, r2, r0, r2
 8001aa4:	f3c2 1242 	ubfx	r2, r2, #5, #3
 8001aa8:	ea42 0301 	orr.w	r3, r2, r1
  USARTx->BRR = (uint16_t)tmpreg;
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	8123      	strh	r3, [r4, #8]
}
 8001ab0:	b007      	add	sp, #28
 8001ab2:	bd30      	pop	{r4, r5, pc}
 8001ab4:	ffffe9f3 	.word	0xffffe9f3
 8001ab8:	40013800 	.word	0x40013800
 8001abc:	51eb851f 	.word	0x51eb851f

08001ac0 <USART_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 8001ac0:	8983      	ldrh	r3, [r0, #12]
  if (NewState != DISABLE)
 8001ac2:	b929      	cbnz	r1, 8001ad0 <USART_Cmd+0x10>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
 8001ac4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001ac8:	041b      	lsls	r3, r3, #16
 8001aca:	0c1b      	lsrs	r3, r3, #16
 8001acc:	8183      	strh	r3, [r0, #12]
  }
}
 8001ace:	4770      	bx	lr
    USARTx->CR1 |= CR1_UE_Set;
 8001ad0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ad4:	8183      	strh	r3, [r0, #12]
 8001ad6:	4770      	bx	lr

08001ad8 <USART_ITConfig>:
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
  itmask = (((uint32_t)0x01) << itpos);
 8001ad8:	2301      	movs	r3, #1
{
 8001ada:	b410      	push	{r4}
  itpos = USART_IT & IT_Mask;
 8001adc:	f001 041f 	and.w	r4, r1, #31
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8001ae0:	f3c1 1142 	ubfx	r1, r1, #5, #3
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8001ae4:	2901      	cmp	r1, #1
  itmask = (((uint32_t)0x01) << itpos);
 8001ae6:	fa03 f304 	lsl.w	r3, r3, r4
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8001aea:	d00f      	beq.n	8001b0c <USART_ITConfig+0x34>
  {
    usartxbase += 0x0C;
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8001aec:	2902      	cmp	r1, #2
  {
    usartxbase += 0x10;
 8001aee:	bf0c      	ite	eq
 8001af0:	3010      	addeq	r0, #16
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8001af2:	3014      	addne	r0, #20
  }
  if (NewState != DISABLE)
 8001af4:	b92a      	cbnz	r2, 8001b02 <USART_ITConfig+0x2a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8001af6:	6802      	ldr	r2, [r0, #0]
  }
}
 8001af8:	bc10      	pop	{r4}
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8001afa:	ea22 0303 	bic.w	r3, r2, r3
 8001afe:	6003      	str	r3, [r0, #0]
}
 8001b00:	4770      	bx	lr
    *(__IO uint32_t*)usartxbase  |= itmask;
 8001b02:	6802      	ldr	r2, [r0, #0]
}
 8001b04:	bc10      	pop	{r4}
    *(__IO uint32_t*)usartxbase  |= itmask;
 8001b06:	4313      	orrs	r3, r2
 8001b08:	6003      	str	r3, [r0, #0]
}
 8001b0a:	4770      	bx	lr
    usartxbase += 0x0C;
 8001b0c:	300c      	adds	r0, #12
 8001b0e:	e7f1      	b.n	8001af4 <USART_ITConfig+0x1c>

08001b10 <USART_SendData>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8001b10:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8001b14:	8081      	strh	r1, [r0, #4]
}
 8001b16:	4770      	bx	lr

08001b18 <coolant_init>:

#include "grbl.h"


void coolant_init()
{
 8001b18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	GPIO_Init(COOLANT_FLOOD_PORT, &GPIO_InitStructure);

	RCC_APB2PeriphClockCmd(RCC_COOLANT_MIST_PORT, ENABLE);
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Pin = 1 << COOLANT_MIST_BIT;
 8001b1c:	2708      	movs	r7, #8
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8001b1e:	2510      	movs	r5, #16
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001b20:	f04f 0803 	mov.w	r8, #3
{
 8001b24:	b082      	sub	sp, #8
	GPIO_Init(COOLANT_FLOOD_PORT, &GPIO_InitStructure);
 8001b26:	4c14      	ldr	r4, [pc, #80]	; (8001b78 <coolant_init+0x60>)
	GPIO_InitStructure.GPIO_Pin = 1 << COOLANT_FLOOD_BIT;
 8001b28:	ae02      	add	r6, sp, #8
	RCC_APB2PeriphClockCmd(RCC_COOLANT_FLOOD_PORT, ENABLE);
 8001b2a:	4638      	mov	r0, r7
 8001b2c:	2101      	movs	r1, #1
 8001b2e:	f7ff fe83 	bl	8001838 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Pin = 1 << COOLANT_FLOOD_BIT;
 8001b32:	f826 5d04 	strh.w	r5, [r6, #-4]!
	GPIO_Init(COOLANT_FLOOD_PORT, &GPIO_InitStructure);
 8001b36:	4631      	mov	r1, r6
 8001b38:	4620      	mov	r0, r4
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8001b3a:	f88d 5007 	strb.w	r5, [sp, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001b3e:	f88d 8006 	strb.w	r8, [sp, #6]
	GPIO_Init(COOLANT_FLOOD_PORT, &GPIO_InitStructure);
 8001b42:	f7ff fc3b 	bl	80013bc <GPIO_Init>
	RCC_APB2PeriphClockCmd(RCC_COOLANT_MIST_PORT, ENABLE);
 8001b46:	4638      	mov	r0, r7
 8001b48:	2101      	movs	r1, #1
 8001b4a:	f7ff fe75 	bl	8001838 <RCC_APB2PeriphClockCmd>
	GPIO_Init(COOLANT_MIST_PORT, &GPIO_InitStructure);
 8001b4e:	4631      	mov	r1, r6
 8001b50:	4620      	mov	r0, r4
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001b52:	f88d 8006 	strb.w	r8, [sp, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8001b56:	f88d 5007 	strb.w	r5, [sp, #7]
	GPIO_InitStructure.GPIO_Pin = 1 << COOLANT_MIST_BIT;
 8001b5a:	f8ad 7004 	strh.w	r7, [sp, #4]
	GPIO_Init(COOLANT_MIST_PORT, &GPIO_InitStructure);
 8001b5e:	f7ff fc2d 	bl	80013bc <GPIO_Init>
#endif
  #else
#ifdef AVRTARGET
	COOLANT_FLOOD_PORT &= ~(1 << COOLANT_FLOOD_BIT);
#else
	GPIO_ResetBits(COOLANT_FLOOD_PORT,1 << COOLANT_FLOOD_BIT);
 8001b62:	4629      	mov	r1, r5
 8001b64:	4620      	mov	r0, r4
 8001b66:	f7ff fdb9 	bl	80016dc <GPIO_ResetBits>
#endif
    #else
#ifdef AVRTARGET
	COOLANT_MIST_PORT &= ~(1 << COOLANT_MIST_BIT);
#else
	GPIO_ResetBits(COOLANT_MIST_PORT, 1 << COOLANT_MIST_BIT);
 8001b6a:	4639      	mov	r1, r7
 8001b6c:	4620      	mov	r0, r4
 8001b6e:	f7ff fdb5 	bl	80016dc <GPIO_ResetBits>
}
 8001b72:	b002      	add	sp, #8
 8001b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001b78:	40010c00 	.word	0x40010c00

08001b7c <coolant_get_state>:
{
 8001b7c:	b510      	push	{r4, lr}
    if (bit_istrue(
 8001b7e:	4807      	ldr	r0, [pc, #28]	; (8001b9c <coolant_get_state+0x20>)
 8001b80:	f7ff fda6 	bl	80016d0 <GPIO_ReadOutputData>
  uint8_t cl_state = COOLANT_STATE_DISABLE;
 8001b84:	f3c0 1400 	ubfx	r4, r0, #4, #1
      if (bit_istrue(
 8001b88:	4804      	ldr	r0, [pc, #16]	; (8001b9c <coolant_get_state+0x20>)
 8001b8a:	f7ff fda1 	bl	80016d0 <GPIO_ReadOutputData>
 8001b8e:	0703      	lsls	r3, r0, #28
      cl_state |= COOLANT_STATE_MIST;
 8001b90:	bf48      	it	mi
 8001b92:	f044 0402 	orrmi.w	r4, r4, #2
}
 8001b96:	4620      	mov	r0, r4
 8001b98:	bd10      	pop	{r4, pc}
 8001b9a:	bf00      	nop
 8001b9c:	40010c00 	.word	0x40010c00

08001ba0 <coolant_stop>:
{
 8001ba0:	b510      	push	{r4, lr}
	GPIO_ResetBits(COOLANT_FLOOD_PORT,1 << COOLANT_FLOOD_BIT);
 8001ba2:	4c05      	ldr	r4, [pc, #20]	; (8001bb8 <coolant_stop+0x18>)
 8001ba4:	2110      	movs	r1, #16
 8001ba6:	4620      	mov	r0, r4
 8001ba8:	f7ff fd98 	bl	80016dc <GPIO_ResetBits>
	GPIO_ResetBits(COOLANT_MIST_PORT, 1 << COOLANT_MIST_BIT);
 8001bac:	4620      	mov	r0, r4
#endif
    #endif
  #endif
#endif
}
 8001bae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	GPIO_ResetBits(COOLANT_MIST_PORT, 1 << COOLANT_MIST_BIT);
 8001bb2:	2108      	movs	r1, #8
 8001bb4:	f7ff bd92 	b.w	80016dc <GPIO_ResetBits>
 8001bb8:	40010c00 	.word	0x40010c00

08001bbc <coolant_set_state>:
// Main program only. Immediately sets flood coolant running state and also mist coolant, 
// if enabled. Also sets a flag to report an update to a coolant state.
// Called by coolant toggle override, parking restore, parking retract, sleep mode, g-code
// parser program end, and g-code parser coolant_sync().
void coolant_set_state(uint8_t mode)
{
 8001bbc:	b538      	push	{r3, r4, r5, lr}
  if (sys.abort) { return; } // Block during abort.  
 8001bbe:	4d0f      	ldr	r5, [pc, #60]	; (8001bfc <coolant_set_state+0x40>)
 8001bc0:	786b      	ldrb	r3, [r5, #1]
 8001bc2:	b93b      	cbnz	r3, 8001bd4 <coolant_set_state+0x18>
 8001bc4:	4604      	mov	r4, r0
  
  if (mode == COOLANT_DISABLE) {
 8001bc6:	b130      	cbz	r0, 8001bd6 <coolant_set_state+0x1a>
    coolant_stop(); 
  
  } else {
  
#if defined(AVRTARGET) || defined(STM32F103C8)
	  if (mode & COOLANT_FLOOD_ENABLE) {
 8001bc8:	0642      	lsls	r2, r0, #25
 8001bca:	d40d      	bmi.n	8001be8 <coolant_set_state+0x2c>
#endif
      #endif
    }
  
    #ifdef ENABLE_M7
      if (mode & COOLANT_MIST_ENABLE) {
 8001bcc:	0623      	lsls	r3, r4, #24
 8001bce:	d410      	bmi.n	8001bf2 <coolant_set_state+0x36>
        #endif
      }
    #endif
#endif  
  }
  sys.report_ovr_counter = 0; // Set to report change immediately
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	732b      	strb	r3, [r5, #12]
}
 8001bd4:	bd38      	pop	{r3, r4, r5, pc}
	GPIO_ResetBits(COOLANT_FLOOD_PORT,1 << COOLANT_FLOOD_BIT);
 8001bd6:	2110      	movs	r1, #16
 8001bd8:	4809      	ldr	r0, [pc, #36]	; (8001c00 <coolant_set_state+0x44>)
 8001bda:	f7ff fd7f 	bl	80016dc <GPIO_ResetBits>
	GPIO_ResetBits(COOLANT_MIST_PORT, 1 << COOLANT_MIST_BIT);
 8001bde:	2108      	movs	r1, #8
 8001be0:	4807      	ldr	r0, [pc, #28]	; (8001c00 <coolant_set_state+0x44>)
 8001be2:	f7ff fd7b 	bl	80016dc <GPIO_ResetBits>
 8001be6:	e7f3      	b.n	8001bd0 <coolant_set_state+0x14>
		GPIO_SetBits(COOLANT_FLOOD_PORT,1 << COOLANT_FLOOD_BIT);
 8001be8:	2110      	movs	r1, #16
 8001bea:	4805      	ldr	r0, [pc, #20]	; (8001c00 <coolant_set_state+0x44>)
 8001bec:	f7ff fd74 	bl	80016d8 <GPIO_SetBits>
 8001bf0:	e7ec      	b.n	8001bcc <coolant_set_state+0x10>
		  GPIO_SetBits(COOLANT_MIST_PORT, 1 << COOLANT_MIST_BIT);
 8001bf2:	2108      	movs	r1, #8
 8001bf4:	4802      	ldr	r0, [pc, #8]	; (8001c00 <coolant_set_state+0x44>)
 8001bf6:	f7ff fd6f 	bl	80016d8 <GPIO_SetBits>
 8001bfa:	e7e9      	b.n	8001bd0 <coolant_set_state+0x14>
 8001bfc:	20001408 	.word	0x20001408
 8001c00:	40010c00 	.word	0x40010c00

08001c04 <coolant_sync>:


// G-code parser entry-point for setting coolant state. Forces a planner buffer sync and bails 
// if an abort or check-mode is active.
void coolant_sync(uint8_t mode)
{
 8001c04:	b538      	push	{r3, r4, r5, lr}
  if (sys.state == STATE_CHECK_MODE) { return; }
 8001c06:	4c12      	ldr	r4, [pc, #72]	; (8001c50 <coolant_sync+0x4c>)
 8001c08:	7823      	ldrb	r3, [r4, #0]
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d004      	beq.n	8001c18 <coolant_sync+0x14>
 8001c0e:	4605      	mov	r5, r0
  protocol_buffer_synchronize(); // Ensure coolant turns on when specified in program.
 8001c10:	f004 faba 	bl	8006188 <protocol_buffer_synchronize>
  if (sys.abort) { return; } // Block during abort.  
 8001c14:	7863      	ldrb	r3, [r4, #1]
 8001c16:	b103      	cbz	r3, 8001c1a <coolant_sync+0x16>
  coolant_set_state(mode);
}
 8001c18:	bd38      	pop	{r3, r4, r5, pc}
  if (mode == COOLANT_DISABLE) {
 8001c1a:	b135      	cbz	r5, 8001c2a <coolant_sync+0x26>
	  if (mode & COOLANT_FLOOD_ENABLE) {
 8001c1c:	066a      	lsls	r2, r5, #25
 8001c1e:	d40d      	bmi.n	8001c3c <coolant_sync+0x38>
      if (mode & COOLANT_MIST_ENABLE) {
 8001c20:	062b      	lsls	r3, r5, #24
 8001c22:	d410      	bmi.n	8001c46 <coolant_sync+0x42>
  sys.report_ovr_counter = 0; // Set to report change immediately
 8001c24:	2300      	movs	r3, #0
 8001c26:	7323      	strb	r3, [r4, #12]
}
 8001c28:	bd38      	pop	{r3, r4, r5, pc}
	GPIO_ResetBits(COOLANT_FLOOD_PORT,1 << COOLANT_FLOOD_BIT);
 8001c2a:	2110      	movs	r1, #16
 8001c2c:	4809      	ldr	r0, [pc, #36]	; (8001c54 <coolant_sync+0x50>)
 8001c2e:	f7ff fd55 	bl	80016dc <GPIO_ResetBits>
	GPIO_ResetBits(COOLANT_MIST_PORT, 1 << COOLANT_MIST_BIT);
 8001c32:	2108      	movs	r1, #8
 8001c34:	4807      	ldr	r0, [pc, #28]	; (8001c54 <coolant_sync+0x50>)
 8001c36:	f7ff fd51 	bl	80016dc <GPIO_ResetBits>
 8001c3a:	e7f3      	b.n	8001c24 <coolant_sync+0x20>
		GPIO_SetBits(COOLANT_FLOOD_PORT,1 << COOLANT_FLOOD_BIT);
 8001c3c:	2110      	movs	r1, #16
 8001c3e:	4805      	ldr	r0, [pc, #20]	; (8001c54 <coolant_sync+0x50>)
 8001c40:	f7ff fd4a 	bl	80016d8 <GPIO_SetBits>
 8001c44:	e7ec      	b.n	8001c20 <coolant_sync+0x1c>
		  GPIO_SetBits(COOLANT_MIST_PORT, 1 << COOLANT_MIST_BIT);
 8001c46:	2108      	movs	r1, #8
 8001c48:	4802      	ldr	r0, [pc, #8]	; (8001c54 <coolant_sync+0x50>)
 8001c4a:	f7ff fd45 	bl	80016d8 <GPIO_SetBits>
 8001c4e:	e7e9      	b.n	8001c24 <coolant_sync+0x20>
 8001c50:	20001408 	.word	0x20001408
 8001c54:	40010c00 	.word	0x40010c00

08001c58 <eeprom_init>:
		nSize -= 4;
		nAddress += 4;
	}
}
void eeprom_init()
{
 8001c58:	b410      	push	{r4}
	uint16_t VarIdx = 0;
	uint8_t *pTmp = EE_Buffer;
 8001c5a:	4c0d      	ldr	r4, [pc, #52]	; (8001c90 <eeprom_init+0x38>)
 8001c5c:	4623      	mov	r3, r4
 8001c5e:	f1c4 6100 	rsb	r1, r4, #134217728	; 0x8000000
 8001c62:	f501 31fe 	add.w	r1, r1, #130048	; 0x1fc00
 8001c66:	f504 6080 	add.w	r0, r4, #1024	; 0x400
 8001c6a:	185a      	adds	r2, r3, r1

	for (VarIdx = 0; VarIdx < PAGE_SIZE; VarIdx++)
	{
		*pTmp++ = (*(__IO uint8_t*)(EEPROM_START_ADDRESS + VarIdx));
 8001c6c:	7812      	ldrb	r2, [r2, #0]
 8001c6e:	f803 2b01 	strb.w	r2, [r3], #1
	for (VarIdx = 0; VarIdx < PAGE_SIZE; VarIdx++)
 8001c72:	4283      	cmp	r3, r0
 8001c74:	d1f9      	bne.n	8001c6a <eeprom_init+0x12>
	}

	if (EE_Buffer[0] != SETTINGS_VERSION)
 8001c76:	7823      	ldrb	r3, [r4, #0]
 8001c78:	2b0a      	cmp	r3, #10
 8001c7a:	d006      	beq.n	8001c8a <eeprom_init+0x32>
 8001c7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c80:	21ff      	movs	r1, #255	; 0xff
 8001c82:	4803      	ldr	r0, [pc, #12]	; (8001c90 <eeprom_init+0x38>)
		for (VarIdx = 0; VarIdx < PAGE_SIZE; VarIdx++)
		{
			*pTmp++ = 0xFF;
		}
	}
}
 8001c84:	bc10      	pop	{r4}
 8001c86:	f009 bccc 	b.w	800b622 <memset>
 8001c8a:	bc10      	pop	{r4}
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	20000f6c 	.word	0x20000f6c

08001c94 <eeprom_get_char>:
	EEAR = addr; // Set EEPROM address register.
	EECR = (1<<EERE); // Start EEPROM read operation.
	return EEDR; // Return the byte read from EEPROM.
#endif
#if defined(WIN32) || defined(STM32F103C8)
	return EE_Buffer[addr];
 8001c94:	4b01      	ldr	r3, [pc, #4]	; (8001c9c <eeprom_get_char+0x8>)
#endif
}
 8001c96:	5c18      	ldrb	r0, [r3, r0]
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	20000f6c 	.word	0x20000f6c

08001ca0 <eeprom_put_char>:
	}
	
	sei(); // Restore interrupt flag state.
#endif
#if defined(WIN32) || defined(STM32F103C8)
	EE_Buffer[addr] = new_value;
 8001ca0:	4b01      	ldr	r3, [pc, #4]	; (8001ca8 <eeprom_put_char+0x8>)
 8001ca2:	5419      	strb	r1, [r3, r0]
#endif
}
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	20000f6c 	.word	0x20000f6c

08001cac <memcpy_to_eeprom_with_checksum>:

// Extensions added as part of Grbl 


void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
 8001cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001cb0:	4607      	mov	r7, r0
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
 8001cb2:	2a00      	cmp	r2, #0
 8001cb4:	d03f      	beq.n	8001d36 <memcpy_to_eeprom_with_checksum+0x8a>
  unsigned char checksum = 0;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	4d20      	ldr	r5, [pc, #128]	; (8001d3c <memcpy_to_eeprom_with_checksum+0x90>)
 8001cba:	3801      	subs	r0, #1
 8001cbc:	4428      	add	r0, r5
 8001cbe:	188e      	adds	r6, r1, r2
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += *source;
 8001cc0:	f811 4b01 	ldrb.w	r4, [r1], #1
    checksum = (checksum << 1) || (checksum >> 7);
 8001cc4:	b97b      	cbnz	r3, 8001ce6 <memcpy_to_eeprom_with_checksum+0x3a>
    checksum += *source;
 8001cc6:	eb04 13d3 	add.w	r3, r4, r3, lsr #7
  for(; size > 0; size--) { 
 8001cca:	428e      	cmp	r6, r1
    checksum += *source;
 8001ccc:	b2db      	uxtb	r3, r3
	EE_Buffer[addr] = new_value;
 8001cce:	f800 4f01 	strb.w	r4, [r0, #1]!
  for(; size > 0; size--) { 
 8001cd2:	d1f5      	bne.n	8001cc0 <memcpy_to_eeprom_with_checksum+0x14>
 8001cd4:	4417      	add	r7, r2
	FlashStatus = FLASH_ErasePage(EEPROM_START_ADDRESS);
 8001cd6:	481a      	ldr	r0, [pc, #104]	; (8001d40 <memcpy_to_eeprom_with_checksum+0x94>)
	EE_Buffer[addr] = new_value;
 8001cd8:	55eb      	strb	r3, [r5, r7]
	FlashStatus = FLASH_ErasePage(EEPROM_START_ADDRESS);
 8001cda:	f7ff faa3 	bl	8001224 <FLASH_ErasePage>
	if (FlashStatus != FLASH_COMPLETE)
 8001cde:	2804      	cmp	r0, #4
 8001ce0:	d008      	beq.n	8001cf4 <memcpy_to_eeprom_with_checksum+0x48>
#if defined(WIN32) || defined(STM32F103C8)
#ifndef NOEEPROMSUPPORT
  eeprom_flush();
#endif
#endif
}
 8001ce2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    checksum += *source;
 8001ce6:	1c63      	adds	r3, r4, #1
  for(; size > 0; size--) { 
 8001ce8:	428e      	cmp	r6, r1
	EE_Buffer[addr] = new_value;
 8001cea:	f800 4f01 	strb.w	r4, [r0, #1]!
    checksum += *source;
 8001cee:	b2db      	uxtb	r3, r3
  for(; size > 0; size--) { 
 8001cf0:	d1e6      	bne.n	8001cc0 <memcpy_to_eeprom_with_checksum+0x14>
 8001cf2:	e7ef      	b.n	8001cd4 <memcpy_to_eeprom_with_checksum+0x28>
	uint16_t *pBuffer = (uint16_t *)EE_Buffer;
 8001cf4:	4c11      	ldr	r4, [pc, #68]	; (8001d3c <memcpy_to_eeprom_with_checksum+0x90>)
			FLASH_ProgramHalfWord(nAddress + 2, *pBuffer++);
 8001cf6:	4f13      	ldr	r7, [pc, #76]	; (8001d44 <memcpy_to_eeprom_with_checksum+0x98>)
 8001cf8:	f1c5 6600 	rsb	r6, r5, #134217728	; 0x8000000
 8001cfc:	f504 6880 	add.w	r8, r4, #1024	; 0x400
 8001d00:	1b7f      	subs	r7, r7, r5
 8001d02:	f506 36fe 	add.w	r6, r6, #130048	; 0x1fc00
		if (*pBuffer != 0xffff)
 8001d06:	4625      	mov	r5, r4
 8001d08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d0c:	f835 1b02 	ldrh.w	r1, [r5], #2
 8001d10:	19a0      	adds	r0, r4, r6
 8001d12:	4299      	cmp	r1, r3
 8001d14:	f104 0404 	add.w	r4, r4, #4
 8001d18:	d001      	beq.n	8001d1e <memcpy_to_eeprom_with_checksum+0x72>
			FLASH_ProgramHalfWord(nAddress, *pBuffer++);
 8001d1a:	f7ff faeb 	bl	80012f4 <FLASH_ProgramHalfWord>
		if (*pBuffer != 0xffff)
 8001d1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d22:	8829      	ldrh	r1, [r5, #0]
			FLASH_ProgramHalfWord(nAddress + 2, *pBuffer++);
 8001d24:	19e0      	adds	r0, r4, r7
		if (*pBuffer != 0xffff)
 8001d26:	4299      	cmp	r1, r3
 8001d28:	d001      	beq.n	8001d2e <memcpy_to_eeprom_with_checksum+0x82>
			FLASH_ProgramHalfWord(nAddress + 2, *pBuffer++);
 8001d2a:	f7ff fae3 	bl	80012f4 <FLASH_ProgramHalfWord>
	while (nSize > 0)
 8001d2e:	4544      	cmp	r4, r8
 8001d30:	d1e9      	bne.n	8001d06 <memcpy_to_eeprom_with_checksum+0x5a>
}
 8001d32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  unsigned char checksum = 0;
 8001d36:	4613      	mov	r3, r2
 8001d38:	4d00      	ldr	r5, [pc, #0]	; (8001d3c <memcpy_to_eeprom_with_checksum+0x90>)
 8001d3a:	e7cc      	b.n	8001cd6 <memcpy_to_eeprom_with_checksum+0x2a>
 8001d3c:	20000f6c 	.word	0x20000f6c
 8001d40:	0801fc00 	.word	0x0801fc00
 8001d44:	0801fbfe 	.word	0x0801fbfe

08001d48 <memcpy_from_eeprom_with_checksum>:

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
 8001d48:	b4f0      	push	{r4, r5, r6, r7}
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
 8001d4a:	b1f2      	cbz	r2, 8001d8a <memcpy_from_eeprom_with_checksum+0x42>
  unsigned char data, checksum = 0;
 8001d4c:	2400      	movs	r4, #0
 8001d4e:	4f10      	ldr	r7, [pc, #64]	; (8001d90 <memcpy_from_eeprom_with_checksum+0x48>)
 8001d50:	1e4d      	subs	r5, r1, #1
 8001d52:	443d      	add	r5, r7
 8001d54:	1886      	adds	r6, r0, r2
	return EE_Buffer[addr];
 8001d56:	f815 3f01 	ldrb.w	r3, [r5, #1]!
    data = eeprom_get_char(source++);
    checksum = (checksum << 1) || (checksum >> 7);
 8001d5a:	b974      	cbnz	r4, 8001d7a <memcpy_from_eeprom_with_checksum+0x32>
    checksum += data;    
    *(destination++) = data; 
 8001d5c:	f800 3b01 	strb.w	r3, [r0], #1
    checksum += data;    
 8001d60:	eb03 14d4 	add.w	r4, r3, r4, lsr #7
  for(; size > 0; size--) { 
 8001d64:	4286      	cmp	r6, r0
    checksum += data;    
 8001d66:	b2e4      	uxtb	r4, r4
  for(; size > 0; size--) { 
 8001d68:	d1f5      	bne.n	8001d56 <memcpy_from_eeprom_with_checksum+0xe>
 8001d6a:	4411      	add	r1, r2
  }
  return(checksum == eeprom_get_char(source));
 8001d6c:	5c78      	ldrb	r0, [r7, r1]
}
 8001d6e:	1b00      	subs	r0, r0, r4
 8001d70:	fab0 f080 	clz	r0, r0
 8001d74:	bcf0      	pop	{r4, r5, r6, r7}
 8001d76:	0940      	lsrs	r0, r0, #5
 8001d78:	4770      	bx	lr
    *(destination++) = data; 
 8001d7a:	f800 3b01 	strb.w	r3, [r0], #1
  for(; size > 0; size--) { 
 8001d7e:	4286      	cmp	r6, r0
    checksum += data;    
 8001d80:	f103 0301 	add.w	r3, r3, #1
 8001d84:	b2dc      	uxtb	r4, r3
  for(; size > 0; size--) { 
 8001d86:	d1e6      	bne.n	8001d56 <memcpy_from_eeprom_with_checksum+0xe>
 8001d88:	e7ef      	b.n	8001d6a <memcpy_from_eeprom_with_checksum+0x22>
  unsigned char data, checksum = 0;
 8001d8a:	4614      	mov	r4, r2
 8001d8c:	4f00      	ldr	r7, [pc, #0]	; (8001d90 <memcpy_from_eeprom_with_checksum+0x48>)
 8001d8e:	e7ed      	b.n	8001d6c <memcpy_from_eeprom_with_checksum+0x24>
 8001d90:	20000f6c 	.word	0x20000f6c

08001d94 <gc_init>:

#define FAIL(status) return(status);


void gc_init()
{
 8001d94:	b508      	push	{r3, lr}
  memset(&gc_state, 0, sizeof(parser_state_t));
 8001d96:	2100      	movs	r1, #0
 8001d98:	2250      	movs	r2, #80	; 0x50
 8001d9a:	4807      	ldr	r0, [pc, #28]	; (8001db8 <gc_init+0x24>)
 8001d9c:	f009 fc41 	bl	800b622 <memset>

  // Load default G54 coordinate system.
  if (!(settings_read_coord_data(gc_state.modal.coord_select,gc_state.coord_system))) {
 8001da0:	4906      	ldr	r1, [pc, #24]	; (8001dbc <gc_init+0x28>)
 8001da2:	2000      	movs	r0, #0
 8001da4:	f005 feca 	bl	8007b3c <settings_read_coord_data>
 8001da8:	b100      	cbz	r0, 8001dac <gc_init+0x18>
    report_status_message(STATUS_SETTING_READ_FAIL);
  }
}
 8001daa:	bd08      	pop	{r3, pc}
    report_status_message(STATUS_SETTING_READ_FAIL);
 8001dac:	2007      	movs	r0, #7
}
 8001dae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    report_status_message(STATUS_SETTING_READ_FAIL);
 8001db2:	f004 bcc9 	b.w	8006748 <report_status_message>
 8001db6:	bf00      	nop
 8001db8:	2000136c 	.word	0x2000136c
 8001dbc:	20001398 	.word	0x20001398

08001dc0 <gc_sync_position>:

// Sets g-code parser position in mm. Input in steps. Called by the system abort and hard
// limit pull-off routines.
void gc_sync_position()
{
  system_convert_array_steps_to_mpos(gc_state.position,sys_position);
 8001dc0:	4901      	ldr	r1, [pc, #4]	; (8001dc8 <gc_sync_position+0x8>)
 8001dc2:	4802      	ldr	r0, [pc, #8]	; (8001dcc <gc_sync_position+0xc>)
 8001dc4:	f007 bf2a 	b.w	8009c1c <system_convert_array_steps_to_mpos>
 8001dc8:	20001430 	.word	0x20001430
 8001dcc:	20001388 	.word	0x20001388

08001dd0 <gc_execute_line>:
// characters and signed floating point values (no whitespace). Comments and block delete
// characters have been removed. In this function, all units and positions are converted and
// exported to grbl's internal functions in terms of (mm, mm/min) and absolute machine
// coordinates, respectively.
uint8_t gc_execute_line(char *line)
{
 8001dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001dd4:	4607      	mov	r7, r0
     updates these modes and commands as the block line is parser and will only be used and
     executed after successful error-checking. The parser block struct also contains a block
     values struct, word tracking variables, and a non-modal commands tracker for the new
     block. This struct contains all of the necessary information to execute the block. */

  memset(&gc_block, 0, sizeof(parser_block_t)); // Initialize the parser block struct.
 8001dd6:	f8df 9210 	ldr.w	r9, [pc, #528]	; 8001fe8 <gc_execute_line+0x218>
 8001dda:	2248      	movs	r2, #72	; 0x48
 8001ddc:	2100      	movs	r1, #0
{
 8001dde:	b09d      	sub	sp, #116	; 0x74
  memset(&gc_block, 0, sizeof(parser_block_t)); // Initialize the parser block struct.
 8001de0:	4648      	mov	r0, r9
 8001de2:	f009 fc1e 	bl	800b622 <memset>
  memcpy(&gc_block.modal,&gc_state.modal,sizeof(gc_modal_t)); // Copy current modes
 8001de6:	4b7d      	ldr	r3, [pc, #500]	; (8001fdc <gc_execute_line+0x20c>)
 8001de8:	cb03      	ldmia	r3!, {r0, r1}
 8001dea:	881c      	ldrh	r4, [r3, #0]
 8001dec:	789a      	ldrb	r2, [r3, #2]
 8001dee:	f8c9 0001 	str.w	r0, [r9, #1]
 8001df2:	f8c9 1005 	str.w	r1, [r9, #5]
 8001df6:	f8a9 4009 	strh.w	r4, [r9, #9]
 8001dfa:	f889 200b 	strb.w	r2, [r9, #11]
  uint16_t command_words = 0; // Tracks G and M command words. Also used for modal group violations.
  uint16_t value_words = 0; // Tracks value words.
  uint8_t gc_parser_flags = GC_PARSER_NONE;

  // Determine if the line is a jogging motion or a normal g-code block.
  if (line[0] == '$') { // NOTE: `$J=` already parsed when passed to this function.
 8001dfe:	783b      	ldrb	r3, [r7, #0]
 8001e00:	2b24      	cmp	r3, #36	; 0x24
 8001e02:	f000 823d 	beq.w	8002280 <gc_execute_line+0x4b0>
  char letter;
  float value;
  uint8_t int_value = 0;
  uint16_t mantissa = 0;
  if (gc_parser_flags & GC_PARSER_JOG_MOTION) { char_counter = 3; } // Start parsing after `$J=`
  else { char_counter = 0; }
 8001e06:	2200      	movs	r2, #0
  uint8_t gc_parser_flags = GC_PARSER_NONE;
 8001e08:	9209      	str	r2, [sp, #36]	; 0x24
    gc_parser_flags |= GC_PARSER_JOG_MOTION;
 8001e0a:	f04f 0800 	mov.w	r8, #0

  while (line[char_counter] != 0) { // Loop until no more g-code words in line.
 8001e0e:	5cbd      	ldrb	r5, [r7, r2]
 8001e10:	f88d 204f 	strb.w	r2, [sp, #79]	; 0x4f
    gc_parser_flags |= GC_PARSER_JOG_MOTION;
 8001e14:	4644      	mov	r4, r8
 8001e16:	f8cd 8020 	str.w	r8, [sp, #32]
 8001e1a:	e9cd 8806 	strd	r8, r8, [sp, #24]
  while (line[char_counter] != 0) { // Loop until no more g-code words in line.
 8001e1e:	2d00      	cmp	r5, #0
 8001e20:	f000 80fd 	beq.w	800201e <gc_execute_line+0x24e>

    // Import the next g-code word, expecting a letter followed by a value. Otherwise, error out.
    letter = line[char_counter];
    if((letter < 'A') || (letter > 'Z')) { FAIL(STATUS_EXPECTED_COMMAND_LETTER); } // [Expected word letter]
 8001e24:	f1a5 0641 	sub.w	r6, r5, #65	; 0x41
 8001e28:	b2f3      	uxtb	r3, r6
 8001e2a:	2b19      	cmp	r3, #25
 8001e2c:	f200 837c 	bhi.w	8002528 <gc_execute_line+0x758>
    char_counter++;
 8001e30:	1c53      	adds	r3, r2, #1
    if (!read_float(line, &char_counter, &value)) { FAIL(STATUS_BAD_NUMBER_FORMAT); } // [Expected word value]
 8001e32:	f10d 014f 	add.w	r1, sp, #79	; 0x4f
 8001e36:	aa14      	add	r2, sp, #80	; 0x50
 8001e38:	4638      	mov	r0, r7
    char_counter++;
 8001e3a:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
    if (!read_float(line, &char_counter, &value)) { FAIL(STATUS_BAD_NUMBER_FORMAT); } // [Expected word value]
 8001e3e:	f002 f91f 	bl	8004080 <read_float>
 8001e42:	2800      	cmp	r0, #0
 8001e44:	f000 8375 	beq.w	8002532 <gc_execute_line+0x762>
    // accurate than the NIST gcode requirement of x10 when used for commands, but not quite
    // accurate enough for value words that require integers to within 0.0001. This should be
    // a good enough comprimise and catch most all non-integer errors. To make it compliant,
    // we would simply need to change the mantissa to int16, but this add compiled flash space.
    // Maybe update this later.
    int_value = truncf(value);
 8001e48:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
 8001e4c:	4658      	mov	r0, fp
 8001e4e:	f7ff f935 	bl	80010bc <__aeabi_f2uiz>
 8001e52:	fa5f fa80 	uxtb.w	sl, r0
	mantissa = (uint16_t)lroundf(100 * (value - int_value)); // Compute mantissa for Gxx.x commands.
 8001e56:	4650      	mov	r0, sl
 8001e58:	f7fe feda 	bl	8000c10 <__aeabi_i2f>
 8001e5c:	4601      	mov	r1, r0
 8001e5e:	4658      	mov	r0, fp
 8001e60:	f7fe fe20 	bl	8000aa4 <__aeabi_fsub>
 8001e64:	495e      	ldr	r1, [pc, #376]	; (8001fe0 <gc_execute_line+0x210>)
 8001e66:	f7fe ff27 	bl	8000cb8 <__aeabi_fmul>
 8001e6a:	f009 fd51 	bl	800b910 <lroundf>
    // NOTE: Rounding must be used to catch small floating point errors.

    // Check if the g-code word is supported or errors due to modal group violations or has
    // been repeated in the g-code block. If ok, update the command or record its value.
    switch(letter) {
 8001e6e:	2d47      	cmp	r5, #71	; 0x47
	mantissa = (uint16_t)lroundf(100 * (value - int_value)); // Compute mantissa for Gxx.x commands.
 8001e70:	b282      	uxth	r2, r0
    switch(letter) {
 8001e72:	d028      	beq.n	8001ec6 <gc_execute_line+0xf6>
 8001e74:	2d4d      	cmp	r5, #77	; 0x4d
 8001e76:	f040 8092 	bne.w	8001f9e <gc_execute_line+0x1ce>
		if(system_control_get_state() & CONTROL_PIN_INDEX_RESET) { // if reset button is pressed
			mc_reset();
		}
#endif
        // Determine 'M' command and its modal group
        if (mantissa > 0) { FAIL(STATUS_GCODE_COMMAND_VALUE_NOT_INTEGER); } // [No Mxx.x commands]
 8001e7a:	2a00      	cmp	r2, #0
 8001e7c:	f040 836c 	bne.w	8002558 <gc_execute_line+0x788>
 8001e80:	f1ba 0f1e 	cmp.w	sl, #30
 8001e84:	f200 81f0 	bhi.w	8002268 <gc_execute_line+0x498>
 8001e88:	2301      	movs	r3, #1
 8001e8a:	4a56      	ldr	r2, [pc, #344]	; (8001fe4 <gc_execute_line+0x214>)
 8001e8c:	fa03 f30a 	lsl.w	r3, r3, sl
 8001e90:	4213      	tst	r3, r2
 8001e92:	f040 80ab 	bne.w	8001fec <gc_execute_line+0x21c>
 8001e96:	f413 7f60 	tst.w	r3, #896	; 0x380
 8001e9a:	f040 81b6 	bne.w	800220a <gc_execute_line+0x43a>
 8001e9e:	f013 0f38 	tst.w	r3, #56	; 0x38
 8001ea2:	f000 81e1 	beq.w	8002268 <gc_execute_line+0x498>
              default: gc_block.modal.program_flow = int_value; // Program end and reset
            }
            break;
					case 3: case 4: case 5:
            word_bit = MODAL_GROUP_M7;
            switch(int_value) {
 8001ea6:	f1ba 0f04 	cmp.w	sl, #4
 8001eaa:	f000 8328 	beq.w	80024fe <gc_execute_line+0x72e>
 8001eae:	f1ba 0f05 	cmp.w	sl, #5
 8001eb2:	f000 834a 	beq.w	800254a <gc_execute_line+0x77a>
 8001eb6:	f1ba 0f03 	cmp.w	sl, #3
 8001eba:	f000 832e 	beq.w	800251a <gc_execute_line+0x74a>
 8001ebe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ec2:	230c      	movs	r3, #12
 8001ec4:	e09f      	b.n	8002006 <gc_execute_line+0x236>
        switch(int_value) {
 8001ec6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8001eca:	f200 81cd 	bhi.w	8002268 <gc_execute_line+0x498>
 8001ece:	e8df f01a 	tbh	[pc, sl, lsl #1]
 8001ed2:	0231      	.short	0x0231
 8001ed4:	02310231 	.word	0x02310231
 8001ed8:	02500231 	.word	0x02500231
 8001edc:	01cb01cb 	.word	0x01cb01cb
 8001ee0:	01cb01cb 	.word	0x01cb01cb
 8001ee4:	025a01cb 	.word	0x025a01cb
 8001ee8:	01cb01cb 	.word	0x01cb01cb
 8001eec:	01cb01cb 	.word	0x01cb01cb
 8001ef0:	01cb01cb 	.word	0x01cb01cb
 8001ef4:	02790279 	.word	0x02790279
 8001ef8:	01ee0279 	.word	0x01ee0279
 8001efc:	01cb01ee 	.word	0x01cb01ee
 8001f00:	01cb01cb 	.word	0x01cb01cb
 8001f04:	01cb01cb 	.word	0x01cb01cb
 8001f08:	025a01cb 	.word	0x025a01cb
 8001f0c:	025a01cb 	.word	0x025a01cb
 8001f10:	01cb01cb 	.word	0x01cb01cb
 8001f14:	01cb01cb 	.word	0x01cb01cb
 8001f18:	01cb01cb 	.word	0x01cb01cb
 8001f1c:	023101cb 	.word	0x023101cb
 8001f20:	01e001cb 	.word	0x01e001cb
 8001f24:	01cb01cb 	.word	0x01cb01cb
 8001f28:	01cb01f4 	.word	0x01cb01f4
 8001f2c:	01cb01cb 	.word	0x01cb01cb
 8001f30:	01cb01cb 	.word	0x01cb01cb
 8001f34:	01cb01f4 	.word	0x01cb01f4
 8001f38:	01cb01cb 	.word	0x01cb01cb
 8001f3c:	02050250 	.word	0x02050250
 8001f40:	02050205 	.word	0x02050205
 8001f44:	02050205 	.word	0x02050205
 8001f48:	01cb0205 	.word	0x01cb0205
 8001f4c:	01cb021f 	.word	0x01cb021f
 8001f50:	01cb01cb 	.word	0x01cb01cb
 8001f54:	01cb01cb 	.word	0x01cb01cb
 8001f58:	01cb01cb 	.word	0x01cb01cb
 8001f5c:	01cb01cb 	.word	0x01cb01cb
 8001f60:	01cb01cb 	.word	0x01cb01cb
 8001f64:	01cb01cb 	.word	0x01cb01cb
 8001f68:	01cb01cb 	.word	0x01cb01cb
 8001f6c:	01cb01cb 	.word	0x01cb01cb
 8001f70:	020b01cb 	.word	0x020b01cb
 8001f74:	01cb01cb 	.word	0x01cb01cb
 8001f78:	01cb01cb 	.word	0x01cb01cb
 8001f7c:	01cb01cb 	.word	0x01cb01cb
 8001f80:	01cb01cb 	.word	0x01cb01cb
 8001f84:	021001cb 	.word	0x021001cb
 8001f88:	025a0210 	.word	0x025a0210
 8001f8c:	02190219 	.word	0x02190219
 8001f90:	01cb01cb 	.word	0x01cb01cb
 8001f94:	01cb01cb 	.word	0x01cb01cb
 8001f98:	027f01cb 	.word	0x027f01cb
 8001f9c:	027f      	.short	0x027f
      default:

        /* Non-Command Words: This initial parsing phase only checks for repeats of the remaining
           legal g-code words and stores their value. Error-checking is performed later since some
           words (I,J,K,L,P,R) have multiple connotations and/or depend on the issued commands. */
        switch(letter){
 8001f9e:	2e19      	cmp	r6, #25
 8001fa0:	f200 8162 	bhi.w	8002268 <gc_execute_line+0x498>
 8001fa4:	e8df f016 	tbh	[pc, r6, lsl #1]
 8001fa8:	01600218 	.word	0x01600218
 8001fac:	01600160 	.word	0x01600160
 8001fb0:	02280160 	.word	0x02280160
 8001fb4:	01600160 	.word	0x01600160
 8001fb8:	0238029b 	.word	0x0238029b
 8001fbc:	0253024a 	.word	0x0253024a
 8001fc0:	02580160 	.word	0x02580160
 8001fc4:	02600160 	.word	0x02600160
 8001fc8:	02650160 	.word	0x02650160
 8001fcc:	0270026a 	.word	0x0270026a
 8001fd0:	01600160 	.word	0x01600160
 8001fd4:	027d0160 	.word	0x027d0160
 8001fd8:	02910287 	.word	0x02910287
 8001fdc:	2000136c 	.word	0x2000136c
 8001fe0:	42c80000 	.word	0x42c80000
 8001fe4:	40000007 	.word	0x40000007
 8001fe8:	200013bc 	.word	0x200013bc
            switch(int_value) {
 8001fec:	f1ba 0f00 	cmp.w	sl, #0
 8001ff0:	f000 813f 	beq.w	8002272 <gc_execute_line+0x4a2>
 8001ff4:	f1ba 0f01 	cmp.w	sl, #1
 8001ff8:	f000 8117 	beq.w	800222a <gc_execute_line+0x45a>
              default: gc_block.modal.program_flow = int_value; // Program end and reset
 8001ffc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002000:	230b      	movs	r3, #11
 8002002:	f889 a008 	strb.w	sl, [r9, #8]
        if ( bit_istrue(command_words,bit(word_bit)) ) { FAIL(STATUS_GCODE_MODAL_GROUP_VIOLATION); }
 8002006:	fa44 f303 	asr.w	r3, r4, r3
 800200a:	07db      	lsls	r3, r3, #31
 800200c:	f100 82a6 	bmi.w	800255c <gc_execute_line+0x78c>
        command_words |= bit(word_bit);
 8002010:	4314      	orrs	r4, r2
 8002012:	f89d 204f 	ldrb.w	r2, [sp, #79]	; 0x4f
  while (line[char_counter] != 0) { // Loop until no more g-code words in line.
 8002016:	5cbd      	ldrb	r5, [r7, r2]
 8002018:	2d00      	cmp	r5, #0
 800201a:	f47f af03 	bne.w	8001e24 <gc_execute_line+0x54>

  // [0. Non-specific/common error-checks and miscellaneous setup]:

  // Determine implicit axis command conditions. Axis words have been passed, but no explicit axis
  // command has been sent. If so, set axis command to current motion mode.
  if (axis_words) {
 800201e:	9b06      	ldr	r3, [sp, #24]
 8002020:	b123      	cbz	r3, 800202c <gc_execute_line+0x25c>
    if (!axis_command) { axis_command = AXIS_COMMAND_MOTION_MODE; } // Assign implicit motion-mode
 8002022:	9b07      	ldr	r3, [sp, #28]
 8002024:	2b00      	cmp	r3, #0
 8002026:	bf08      	it	eq
 8002028:	2302      	moveq	r3, #2
 800202a:	9307      	str	r3, [sp, #28]
  }

  // Check for valid line number N value.
  if (bit_istrue(value_words,bit(WORD_N))) {
 800202c:	f018 0f20 	tst.w	r8, #32
 8002030:	d005      	beq.n	800203e <gc_execute_line+0x26e>
    // Line number value cannot be less than zero (done) or greater than max line number.
    if (gc_block.values.n > MAX_LINE_NUMBER) { FAIL(STATUS_GCODE_INVALID_LINE_NUMBER); } // [Exceeds max line number]
 8002032:	4bb9      	ldr	r3, [pc, #740]	; (8002318 <gc_execute_line+0x548>)
 8002034:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
 8002038:	429a      	cmp	r2, r3
 800203a:	f300 82d3 	bgt.w	80025e4 <gc_execute_line+0x814>
  // [1. Comments ]: MSG's NOT SUPPORTED. Comment handling performed by protocol.

  // [2. Set feed rate mode ]: G93 F word missing with G1,G2/3 active, implicitly or explicitly. Feed rate
  //   is not defined after switching to G94 from G93.
  // NOTE: For jogging, ignore prior feed rate mode. Enforce G94 and check for required F word.
  if (gc_parser_flags & GC_PARSER_JOG_MOTION) {
 800203e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002040:	2b00      	cmp	r3, #0
 8002042:	f000 82a1 	beq.w	8002588 <gc_execute_line+0x7b8>
    if (bit_isfalse(value_words,bit(WORD_F))) { FAIL(STATUS_GCODE_UNDEFINED_FEED_RATE); }
 8002046:	f018 0f01 	tst.w	r8, #1
 800204a:	f000 82dd 	beq.w	8002608 <gc_execute_line+0x838>
    if (gc_block.modal.units == UNITS_MODE_INCHES) { gc_block.values.f *= MM_PER_INCH; }
 800204e:	f899 3003 	ldrb.w	r3, [r9, #3]
 8002052:	2b01      	cmp	r3, #1
 8002054:	f000 8329 	beq.w	80026aa <gc_execute_line+0x8da>
    }
  }
  // bit_false(value_words,bit(WORD_F)); // NOTE: Single-meaning value word. Set at end of error-checking.

  // [4. Set spindle speed ]: S is negative (done.)
  if (bit_isfalse(value_words,bit(WORD_S))) { gc_block.values.s = gc_state.spindle_speed; }
 8002058:	f418 7f80 	tst.w	r8, #256	; 0x100
 800205c:	f000 82ab 	beq.w	80025b6 <gc_execute_line+0x7e6>
		}
	}
#endif
	
  // [10. Dwell ]: P value missing. P is negative (done.) NOTE: See below.
  if (gc_block.non_modal_command == NON_MODAL_DWELL) {
 8002060:	f899 5000 	ldrb.w	r5, [r9]
 8002064:	2d04      	cmp	r5, #4
 8002066:	f000 82da 	beq.w	800261e <gc_execute_line+0x84e>
  }


  // [xx. G100]: TMC control
  // G100 P0 L96 N0 S2 F2 R2 $0D$0A
  if (gc_block.non_modal_command == NON_MODAL_G100) {
 800206a:	2d64      	cmp	r5, #100	; 0x64
 800206c:	f000 82a8 	beq.w	80025c0 <gc_execute_line+0x7f0>

  }

  // [xx. G101]: TMC read
  // G101 P0 R16 $0D$0A
  if (gc_block.non_modal_command == NON_MODAL_G101) {
 8002070:	2d65      	cmp	r5, #101	; 0x65
 8002072:	d108      	bne.n	8002086 <gc_execute_line+0x2b6>
    if (bit_isfalse(value_words,bit(WORD_P))) { FAIL(STATUS_GCODE_VALUE_WORD_MISSING); } // [P word missing]
    bit_false(value_words, bit(WORD_P));

    if (bit_isfalse(value_words,bit(WORD_R))) { FAIL(STATUS_GCODE_VALUE_WORD_MISSING); } // [R word missing]
 8002074:	f008 03c0 	and.w	r3, r8, #192	; 0xc0
 8002078:	2bc0      	cmp	r3, #192	; 0xc0
 800207a:	f040 82ca 	bne.w	8002612 <gc_execute_line+0x842>
    bit_false(value_words, bit(WORD_R));
 800207e:	f028 08c0 	bic.w	r8, r8, #192	; 0xc0
 8002082:	fa1f f888 	uxth.w	r8, r8
  }



  // [11. Set active plane ]: N/A
  switch (gc_block.modal.plane_select) {
 8002086:	f899 3005 	ldrb.w	r3, [r9, #5]
 800208a:	2b00      	cmp	r3, #0
 800208c:	f000 8315 	beq.w	80026ba <gc_execute_line+0x8ea>
 8002090:	2b01      	cmp	r3, #1
 8002092:	f040 831b 	bne.w	80026cc <gc_execute_line+0x8fc>
 8002096:	2600      	movs	r6, #0
 8002098:	2702      	movs	r7, #2
      axis_1 = Y_AXIS;
      axis_linear = Z_AXIS;
      break;
    case PLANE_SELECT_ZX:
      axis_0 = Z_AXIS;
      axis_1 = X_AXIS;
 800209a:	e9cd 630d 	strd	r6, r3, [sp, #52]	; 0x34
  switch (gc_block.modal.plane_select) {
 800209e:	2305      	movs	r3, #5
      axis_0 = Z_AXIS;
 80020a0:	970c      	str	r7, [sp, #48]	; 0x30
  switch (gc_block.modal.plane_select) {
 80020a2:	930b      	str	r3, [sp, #44]	; 0x2c
  }

  // [12. Set length units ]: N/A
  // Pre-convert XYZ coordinate values to millimeters, if applicable.
  uint8_t idx;
  if (gc_block.modal.units == UNITS_MODE_INCHES) {
 80020a4:	f899 3003 	ldrb.w	r3, [r9, #3]
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	f000 82c9 	beq.w	8002640 <gc_execute_line+0x870>
  // [14. Cutter length compensation ]: G43 NOT SUPPORTED, but G43.1 and G49 are.
  // [G43.1 Errors]: Motion command in same line.
  //   NOTE: Although not explicitly stated so, G43.1 should be applied to only one valid
  //   axis that is configured (in config.h). There should be an error if the configured axis
  //   is absent or if any of the other axis words are present.
  if (axis_command == AXIS_COMMAND_TOOL_LENGTH_OFFSET ) { // Indicates called in block.
 80020ae:	9b07      	ldr	r3, [sp, #28]
 80020b0:	2b03      	cmp	r3, #3
 80020b2:	f000 82ef 	beq.w	8002694 <gc_execute_line+0x8c4>
  // TODO: An EEPROM read of the coordinate data may require a buffer sync when the cycle
  // is active. The read pauses the processor temporarily and may cause a rare crash. For
  // future versions on processors with enough memory, all coordinate data should be stored
  // in memory and written to EEPROM only when there is not a cycle active.
  float block_coord_system[N_AXIS];
  memcpy(block_coord_system,gc_state.coord_system,sizeof(gc_state.coord_system));
 80020b6:	f8df b278 	ldr.w	fp, [pc, #632]	; 8002330 <gc_execute_line+0x560>
 80020ba:	f10d 0a60 	add.w	sl, sp, #96	; 0x60
 80020be:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 80020c2:	e88a 000f 	stmia.w	sl, {r0, r1, r2, r3}
  if ( bit_istrue(command_words,bit(MODAL_GROUP_G12)) ) { // Check if called in block
 80020c6:	05a0      	lsls	r0, r4, #22
 80020c8:	d510      	bpl.n	80020ec <gc_execute_line+0x31c>
    if (gc_block.modal.coord_select > N_COORDINATE_SYSTEM) { FAIL(STATUS_GCODE_UNSUPPORTED_COORD_SYS); } // [Greater than N sys]
 80020ca:	f899 0007 	ldrb.w	r0, [r9, #7]
 80020ce:	2806      	cmp	r0, #6
 80020d0:	f200 8381 	bhi.w	80027d6 <gc_execute_line+0xa06>
    if (gc_state.modal.coord_select != gc_block.modal.coord_select) {
 80020d4:	4b91      	ldr	r3, [pc, #580]	; (800231c <gc_execute_line+0x54c>)
 80020d6:	799b      	ldrb	r3, [r3, #6]
 80020d8:	4283      	cmp	r3, r0
 80020da:	d007      	beq.n	80020ec <gc_execute_line+0x31c>
      if (!(settings_read_coord_data(gc_block.modal.coord_select,block_coord_system))) { FAIL(STATUS_SETTING_READ_FAIL); }
 80020dc:	4651      	mov	r1, sl
 80020de:	f005 fd2d 	bl	8007b3c <settings_read_coord_data>
 80020e2:	2800      	cmp	r0, #0
 80020e4:	f000 8386 	beq.w	80027f4 <gc_execute_line+0xa24>
 80020e8:	f899 5000 	ldrb.w	r5, [r9]
  // [19. Remaining non-modal actions ]: Check go to predefined position, set G10, or set axis offsets.
  // NOTE: We need to separate the non-modal commands that are axis word-using (G10/G28/G30/G92), as these
  // commands all treat axis words differently. G10 as absolute offsets or computes current position as
  // the axis value, G92 similarly to G10 L20, and G28/30 as an intermediate target position that observes
  // all the current coordinate system and G92 offsets.
  switch (gc_block.non_modal_command) {
 80020ec:	2d0a      	cmp	r5, #10
 80020ee:	f000 80a0 	beq.w	8002232 <gc_execute_line+0x462>
 80020f2:	2d5c      	cmp	r5, #92	; 0x5c
 80020f4:	f040 82f3 	bne.w	80026de <gc_execute_line+0x90e>
        } // Else, keep current stored value.
      }
      break;
    case NON_MODAL_SET_COORDINATE_OFFSET:
      // [G92 Errors]: No axis words.
      if (!axis_words) { FAIL(STATUS_GCODE_NO_AXIS_WORDS); } // [No axis words]
 80020f8:	9b06      	ldr	r3, [sp, #24]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	f000 836d 	beq.w	80027da <gc_execute_line+0xa0a>
      // active coordinate system is selected, but is still active unless G92.1 disables it.
      for (idx=0; idx<N_AXIS; idx++) { // Axes indices are consistent, so loop may be used.
        if (bit_istrue(axis_words,bit(idx)) ) {
          // WPos = MPos - WCS - G92 - TLO  ->  G92 = MPos - WCS - TLO - WPos
          gc_block.values.xyz[idx] = gc_state.position[idx]-block_coord_system[idx]-gc_block.values.xyz[idx];
          if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.xyz[idx] -= gc_state.tool_length_offset; }
 8002100:	4a86      	ldr	r2, [pc, #536]	; (800231c <gc_execute_line+0x54c>)
        if (bit_istrue(axis_words,bit(idx)) ) {
 8002102:	07d9      	lsls	r1, r3, #31
          if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.xyz[idx] -= gc_state.tool_length_offset; }
 8002104:	6cd5      	ldr	r5, [r2, #76]	; 0x4c
        if (bit_istrue(axis_words,bit(idx)) ) {
 8002106:	f140 83a2 	bpl.w	800284e <gc_execute_line+0xa7e>
          gc_block.values.xyz[idx] = gc_state.position[idx]-block_coord_system[idx]-gc_block.values.xyz[idx];
 800210a:	4b84      	ldr	r3, [pc, #528]	; (800231c <gc_execute_line+0x54c>)
 800210c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800210e:	69d8      	ldr	r0, [r3, #28]
 8002110:	f7fe fcc8 	bl	8000aa4 <__aeabi_fsub>
 8002114:	f8d9 1038 	ldr.w	r1, [r9, #56]	; 0x38
 8002118:	f7fe fcc4 	bl	8000aa4 <__aeabi_fsub>
 800211c:	f8c9 0038 	str.w	r0, [r9, #56]	; 0x38
        if (bit_istrue(axis_words,bit(idx)) ) {
 8002120:	9b06      	ldr	r3, [sp, #24]
 8002122:	079a      	lsls	r2, r3, #30
 8002124:	f140 84ab 	bpl.w	8002a7e <gc_execute_line+0xcae>
          gc_block.values.xyz[idx] = gc_state.position[idx]-block_coord_system[idx]-gc_block.values.xyz[idx];
 8002128:	4b7c      	ldr	r3, [pc, #496]	; (800231c <gc_execute_line+0x54c>)
 800212a:	9919      	ldr	r1, [sp, #100]	; 0x64
 800212c:	6a18      	ldr	r0, [r3, #32]
 800212e:	f7fe fcb9 	bl	8000aa4 <__aeabi_fsub>
 8002132:	f8d9 103c 	ldr.w	r1, [r9, #60]	; 0x3c
 8002136:	f7fe fcb5 	bl	8000aa4 <__aeabi_fsub>
 800213a:	f8c9 003c 	str.w	r0, [r9, #60]	; 0x3c
        if (bit_istrue(axis_words,bit(idx)) ) {
 800213e:	9b06      	ldr	r3, [sp, #24]
 8002140:	075b      	lsls	r3, r3, #29
 8002142:	f140 8359 	bpl.w	80027f8 <gc_execute_line+0xa28>
          gc_block.values.xyz[idx] = gc_state.position[idx]-block_coord_system[idx]-gc_block.values.xyz[idx];
 8002146:	4b75      	ldr	r3, [pc, #468]	; (800231c <gc_execute_line+0x54c>)
 8002148:	991a      	ldr	r1, [sp, #104]	; 0x68
 800214a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800214c:	f7fe fcaa 	bl	8000aa4 <__aeabi_fsub>
 8002150:	f8d9 1040 	ldr.w	r1, [r9, #64]	; 0x40
 8002154:	f7fe fca6 	bl	8000aa4 <__aeabi_fsub>
          if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.xyz[idx] -= gc_state.tool_length_offset; }
 8002158:	4629      	mov	r1, r5
 800215a:	f7fe fca3 	bl	8000aa4 <__aeabi_fsub>
 800215e:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
        if (bit_istrue(axis_words,bit(idx)) ) {
 8002162:	9b06      	ldr	r3, [sp, #24]
 8002164:	071d      	lsls	r5, r3, #28
 8002166:	f140 84be 	bpl.w	8002ae6 <gc_execute_line+0xd16>
          gc_block.values.xyz[idx] = gc_state.position[idx]-block_coord_system[idx]-gc_block.values.xyz[idx];
 800216a:	4b6c      	ldr	r3, [pc, #432]	; (800231c <gc_execute_line+0x54c>)
 800216c:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800216e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002170:	f7fe fc98 	bl	8000aa4 <__aeabi_fsub>
 8002174:	f8d9 1044 	ldr.w	r1, [r9, #68]	; 0x44
 8002178:	f7fe fc94 	bl	8000aa4 <__aeabi_fsub>
 800217c:	f8c9 0044 	str.w	r0, [r9, #68]	; 0x44
  uint8_t coord_select = 0; // Tracks G10 P coordinate selection for execution
 8002180:	2300      	movs	r3, #0
 8002182:	930a      	str	r3, [sp, #40]	; 0x28
          break;
      }
  }

  // [20. Motion modes ]:
  if (gc_block.modal.motion == MOTION_MODE_NONE) {
 8002184:	f899 5001 	ldrb.w	r5, [r9, #1]
 8002188:	2d50      	cmp	r5, #80	; 0x50
 800218a:	f000 84a9 	beq.w	8002ae0 <gc_execute_line+0xd10>
    // NOTE: Even non-modal commands or TLO that use axis words will throw this strict error.
    if (axis_words) { FAIL(STATUS_GCODE_AXIS_WORDS_EXIST); } // [No axis words allowed]

  // Check remaining motion modes, if axis word are implicit (exist and not used by G10/28/30/92), or
  // was explicitly commanded in the g-code block.
  } else if ( axis_command == AXIS_COMMAND_MOTION_MODE ) {
 800218e:	9b07      	ldr	r3, [sp, #28]
 8002190:	2b02      	cmp	r3, #2
 8002192:	f000 8361 	beq.w	8002858 <gc_execute_line+0xa88>

  // [21. Program flow ]: No error checks required.

  // [0. Non-specific error-checks]: Complete unused value words check, i.e. IJK used when in arc
  // radius mode, or axis words that aren't used in the block.
  if (gc_parser_flags & GC_PARSER_JOG_MOTION) {
 8002196:	9b09      	ldr	r3, [sp, #36]	; 0x24
  } else {
      bit_false(value_words, (bit(WORD_N) | bit(WORD_F) | bit(WORD_S) | bit(WORD_T))); // Remove single-meaning value words.
  }
// --- YSV 22-06-2018
  #ifdef AA_AXIS
  if (axis_command) { bit_false(value_words,(bit(WORD_X)|bit(WORD_Y)|bit(WORD_Z)|bit(WORD_A))); } // Remove axis words.
 8002198:	9907      	ldr	r1, [sp, #28]
  if (gc_parser_flags & GC_PARSER_JOG_MOTION) {
 800219a:	f013 0201 	ands.w	r2, r3, #1
      bit_false(value_words, (bit(WORD_N) | bit(WORD_F) | bit(WORD_S) | bit(WORD_T))); // Remove single-meaning value words.
 800219e:	bf0d      	iteet	eq
 80021a0:	4b5f      	ldreq	r3, [pc, #380]	; (8002320 <gc_execute_line+0x550>)
      bit_false(value_words, (bit(WORD_N) | bit(WORD_F)));
 80021a2:	f028 0821 	bicne.w	r8, r8, #33	; 0x21
 80021a6:	fa1f f388 	uxthne.w	r3, r8
      bit_false(value_words, (bit(WORD_N) | bit(WORD_F) | bit(WORD_S) | bit(WORD_T))); // Remove single-meaning value words.
 80021aa:	ea08 0303 	andeq.w	r3, r8, r3
  if (axis_command) { bit_false(value_words,(bit(WORD_X)|bit(WORD_Y)|bit(WORD_Z)|bit(WORD_A))); } // Remove axis words.
 80021ae:	b119      	cbz	r1, 80021b8 <gc_execute_line+0x3e8>
 80021b0:	f423 5870 	bic.w	r8, r3, #15360	; 0x3c00
 80021b4:	fa1f f388 	uxth.w	r3, r8
  if (axis_command) { bit_false(value_words,(bit(WORD_X)|bit(WORD_Y)|bit(WORD_Z)|bit(WORD_A)|bit(WORD_B)|bit(WORD_C))); } // Remove axis words.
  #else
  if (axis_command) { bit_false(value_words,(bit(WORD_X)|bit(WORD_Y)|bit(WORD_Z))); } // Remove axis words.
  #endif
// ---
  if (value_words) { FAIL(STATUS_GCODE_UNUSED_WORDS); } // [Unused words]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	f040 8310 	bne.w	80027de <gc_execute_line+0xa0e>
  */

  // Initialize planner data struct for motion blocks.
  plan_line_data_t plan_data;
  plan_line_data_t *pl_data = &plan_data;
  memset(pl_data,0,sizeof(plan_line_data_t)); // Zero pl_data struct
 80021be:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
 80021c2:	9317      	str	r3, [sp, #92]	; 0x5c

                                              // Intercept jog commands and complete error checking for valid jog commands and execute.
                                              // NOTE: G-code parser state is not updated, except the position to ensure sequential jog
                                              // targets are computed correctly. The final parser position after a jog is updated in
                                              // protocol_execute_realtime() when jogging completes or is canceled.
  if (gc_parser_flags & GC_PARSER_JOG_MOTION) {
 80021c4:	2a00      	cmp	r2, #0
 80021c6:	f000 836b 	beq.w	80028a0 <gc_execute_line+0xad0>
      // Only distance and unit modal commands and G53 absolute override command are allowed.
      // NOTE: Feed rate word and axis word checks have already been performed in STEP 3.
      if (command_words & ~(bit(MODAL_GROUP_G3) | bit(MODAL_GROUP_G6 | bit(MODAL_GROUP_G0)))) { FAIL(STATUS_INVALID_JOG_COMMAND) };
 80021ca:	f024 0449 	bic.w	r4, r4, #73	; 0x49
 80021ce:	2c00      	cmp	r4, #0
 80021d0:	f040 84bf 	bne.w	8002b52 <gc_execute_line+0xd82>
      if (!(gc_block.non_modal_command == NON_MODAL_ABSOLUTE_OVERRIDE || gc_block.non_modal_command == NON_MODAL_NO_ACTION)) { FAIL(STATUS_INVALID_JOG_COMMAND); }
 80021d4:	f899 3000 	ldrb.w	r3, [r9]
 80021d8:	2b35      	cmp	r3, #53	; 0x35
 80021da:	d002      	beq.n	80021e2 <gc_execute_line+0x412>
 80021dc:	2b00      	cmp	r3, #0
 80021de:	f040 84b8 	bne.w	8002b52 <gc_execute_line+0xd82>

      // Initialize planner data to current spindle and coolant modal state.
      pl_data->spindle_speed = gc_state.spindle_speed;
      plan_data.condition = (gc_state.modal.spindle | gc_state.modal.coolant);
 80021e2:	4a4e      	ldr	r2, [pc, #312]	; (800231c <gc_execute_line+0x54c>)

      uint8_t status = jog_execute(&plan_data, &gc_block);
 80021e4:	a815      	add	r0, sp, #84	; 0x54
      plan_data.condition = (gc_state.modal.spindle | gc_state.modal.coolant);
 80021e6:	7a11      	ldrb	r1, [r2, #8]
 80021e8:	7a53      	ldrb	r3, [r2, #9]
      pl_data->spindle_speed = gc_state.spindle_speed;
 80021ea:	68d2      	ldr	r2, [r2, #12]
      plan_data.condition = (gc_state.modal.spindle | gc_state.modal.coolant);
 80021ec:	430b      	orrs	r3, r1
      uint8_t status = jog_execute(&plan_data, &gc_block);
 80021ee:	494d      	ldr	r1, [pc, #308]	; (8002324 <gc_execute_line+0x554>)
      plan_data.condition = (gc_state.modal.spindle | gc_state.modal.coolant);
 80021f0:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
      pl_data->spindle_speed = gc_state.spindle_speed;
 80021f4:	9216      	str	r2, [sp, #88]	; 0x58
      uint8_t status = jog_execute(&plan_data, &gc_block);
 80021f6:	f000 ffc1 	bl	800317c <jog_execute>
      if (status == STATUS_OK) { memcpy(gc_state.position, gc_block.values.xyz, sizeof(gc_block.values.xyz)); }
 80021fa:	4604      	mov	r4, r0
 80021fc:	bba8      	cbnz	r0, 800226a <gc_execute_line+0x49a>
 80021fe:	4b4a      	ldr	r3, [pc, #296]	; (8002328 <gc_execute_line+0x558>)
 8002200:	4d4a      	ldr	r5, [pc, #296]	; (800232c <gc_execute_line+0x55c>)
 8002202:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002204:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002208:	e02f      	b.n	800226a <gc_execute_line+0x49a>
            switch(int_value) {
 800220a:	f1ba 0f08 	cmp.w	sl, #8
 800220e:	f000 816f 	beq.w	80024f0 <gc_execute_line+0x720>
 8002212:	f1ba 0f09 	cmp.w	sl, #9
 8002216:	f000 8191 	beq.w	800253c <gc_execute_line+0x76c>
 800221a:	f1ba 0f07 	cmp.w	sl, #7
 800221e:	f000 8175 	beq.w	800250c <gc_execute_line+0x73c>
 8002222:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002226:	230d      	movs	r3, #13
 8002228:	e6ed      	b.n	8002006 <gc_execute_line+0x236>
            switch(int_value) {
 800222a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800222e:	230b      	movs	r3, #11
 8002230:	e6e9      	b.n	8002006 <gc_execute_line+0x236>
      if (!axis_words) { FAIL(STATUS_GCODE_NO_AXIS_WORDS) }; // [No axis words]
 8002232:	9b06      	ldr	r3, [sp, #24]
 8002234:	2b00      	cmp	r3, #0
 8002236:	f000 82d0 	beq.w	80027da <gc_execute_line+0xa0a>
      if (bit_isfalse(value_words,((1<<WORD_P)|(1<<WORD_L)))) { FAIL(STATUS_GCODE_VALUE_WORD_MISSING); } // [P/L word missing]
 800223a:	f018 0f50 	tst.w	r8, #80	; 0x50
 800223e:	f000 81e8 	beq.w	8002612 <gc_execute_line+0x842>
      coord_select = truncf(gc_block.values.p); // Convert p value to int.
 8002242:	f8d9 0028 	ldr.w	r0, [r9, #40]	; 0x28
 8002246:	f7fe ff39 	bl	80010bc <__aeabi_f2uiz>
 800224a:	b2c0      	uxtb	r0, r0
      if (coord_select > N_COORDINATE_SYSTEM) { FAIL(STATUS_GCODE_UNSUPPORTED_COORD_SYS); } // [Greater than N sys]
 800224c:	2806      	cmp	r0, #6
 800224e:	f200 82c2 	bhi.w	80027d6 <gc_execute_line+0xa06>
      if (gc_block.values.l != 20) {
 8002252:	f899 3020 	ldrb.w	r3, [r9, #32]
 8002256:	2b14      	cmp	r3, #20
 8002258:	f000 8289 	beq.w	800276e <gc_execute_line+0x99e>
        if (gc_block.values.l == 2) {
 800225c:	2b02      	cmp	r3, #2
 800225e:	d103      	bne.n	8002268 <gc_execute_line+0x498>
          if (bit_istrue(value_words,bit(WORD_R))) { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); } // [G10 L2 R not supported]
 8002260:	f018 0f80 	tst.w	r8, #128	; 0x80
 8002264:	f000 8283 	beq.w	800276e <gc_execute_line+0x99e>
        } else { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); } // [Unsupported L]
 8002268:	2414      	movs	r4, #20
  }

  // TODO: % to denote start of program.

  return(STATUS_OK);
}
 800226a:	4620      	mov	r0, r4
 800226c:	b01d      	add	sp, #116	; 0x74
 800226e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
              case 0: gc_block.modal.program_flow = PROGRAM_FLOW_PAUSED; break; // Program pause
 8002272:	2303      	movs	r3, #3
 8002274:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002278:	f889 3008 	strb.w	r3, [r9, #8]
 800227c:	230b      	movs	r3, #11
 800227e:	e6c2      	b.n	8002006 <gc_execute_line+0x236>
	gc_block.modal.motion = MOTION_MODE_LINEAR;
 8002280:	2301      	movs	r3, #1
    gc_block.modal.feed_rate = FEED_RATE_MODE_UNITS_PER_MIN;
 8002282:	2200      	movs	r2, #0
	gc_block.modal.motion = MOTION_MODE_LINEAR;
 8002284:	f889 3001 	strb.w	r3, [r9, #1]
    gc_block.modal.feed_rate = FEED_RATE_MODE_UNITS_PER_MIN;
 8002288:	f889 2002 	strb.w	r2, [r9, #2]
    gc_parser_flags |= GC_PARSER_JOG_MOTION;
 800228c:	9309      	str	r3, [sp, #36]	; 0x24
  if (gc_parser_flags & GC_PARSER_JOG_MOTION) { char_counter = 3; } // Start parsing after `$J=`
 800228e:	2203      	movs	r2, #3
 8002290:	e5bb      	b.n	8001e0a <gc_execute_line+0x3a>
        switch(int_value) {
 8002292:	2107      	movs	r1, #7
        if (mantissa > 0) { FAIL(STATUS_GCODE_COMMAND_VALUE_NOT_INTEGER); } // [Unsupported or invalid Gxx.x command]
 8002294:	2a00      	cmp	r2, #0
 8002296:	f040 815f 	bne.w	8002558 <gc_execute_line+0x788>
        if ( bit_istrue(command_words,bit(word_bit)) ) { FAIL(STATUS_GCODE_MODAL_GROUP_VIOLATION); }
 800229a:	fa44 f301 	asr.w	r3, r4, r1
 800229e:	07da      	lsls	r2, r3, #31
 80022a0:	f100 815c 	bmi.w	800255c <gc_execute_line+0x78c>
        command_words |= bit(word_bit);
 80022a4:	2301      	movs	r3, #1
 80022a6:	408b      	lsls	r3, r1
 80022a8:	431c      	orrs	r4, r3
 80022aa:	b2a4      	uxth	r4, r4
        break;
 80022ac:	e6b1      	b.n	8002012 <gc_execute_line+0x242>
            gc_block.modal.units = 21 - int_value;
 80022ae:	f1ca 0a15 	rsb	sl, sl, #21
 80022b2:	f889 a003 	strb.w	sl, [r9, #3]
            break;
 80022b6:	2106      	movs	r1, #6
 80022b8:	e7ec      	b.n	8002294 <gc_execute_line+0x4c4>
            if (axis_command) { FAIL(STATUS_GCODE_AXIS_COMMAND_CONFLICT); } // [Axis word/command conflict] }
 80022ba:	9b07      	ldr	r3, [sp, #28]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	f040 8290 	bne.w	80027e2 <gc_execute_line+0xa12>
            if (int_value == 49) { // G49
 80022c2:	f1ba 0f31 	cmp.w	sl, #49	; 0x31
 80022c6:	f000 8170 	beq.w	80025aa <gc_execute_line+0x7da>
            } else if (mantissa == 10) { // G43.1
 80022ca:	2a0a      	cmp	r2, #10
 80022cc:	d1cc      	bne.n	8002268 <gc_execute_line+0x498>
              gc_block.modal.tool_length = TOOL_LENGTH_OFFSET_ENABLE_DYNAMIC;
 80022ce:	2301      	movs	r3, #1
 80022d0:	f889 3006 	strb.w	r3, [r9, #6]
            axis_command = AXIS_COMMAND_TOOL_LENGTH_OFFSET;
 80022d4:	2303      	movs	r3, #3
              gc_block.modal.tool_length = TOOL_LENGTH_OFFSET_ENABLE_DYNAMIC;
 80022d6:	2108      	movs	r1, #8
            axis_command = AXIS_COMMAND_TOOL_LENGTH_OFFSET;
 80022d8:	9307      	str	r3, [sp, #28]
 80022da:	e7de      	b.n	800229a <gc_execute_line+0x4ca>
            gc_block.modal.coord_select = int_value - 54; // Shift to array indexing.
 80022dc:	f1aa 0a36 	sub.w	sl, sl, #54	; 0x36
 80022e0:	f889 a007 	strb.w	sl, [r9, #7]
            break;
 80022e4:	2109      	movs	r1, #9
 80022e6:	e7d5      	b.n	8002294 <gc_execute_line+0x4c4>
            gc_block.modal.motion = int_value;
 80022e8:	2350      	movs	r3, #80	; 0x50
 80022ea:	2101      	movs	r1, #1
 80022ec:	f889 3001 	strb.w	r3, [r9, #1]
 80022f0:	e7d0      	b.n	8002294 <gc_execute_line+0x4c4>
            if (mantissa == 0) {
 80022f2:	2a00      	cmp	r2, #0
 80022f4:	f040 813f 	bne.w	8002576 <gc_execute_line+0x7a6>
              gc_block.modal.distance = int_value - 90;
 80022f8:	f1aa 0a5a 	sub.w	sl, sl, #90	; 0x5a
 80022fc:	f889 a004 	strb.w	sl, [r9, #4]
 8002300:	2103      	movs	r1, #3
 8002302:	e7ca      	b.n	800229a <gc_execute_line+0x4ca>
            gc_block.modal.feed_rate = 94 - int_value;
 8002304:	f1ca 0a5e 	rsb	sl, sl, #94	; 0x5e
 8002308:	f889 a002 	strb.w	sl, [r9, #2]
            break;
 800230c:	2105      	movs	r1, #5
 800230e:	e7c1      	b.n	8002294 <gc_execute_line+0x4c4>
            if (mantissa != 0) { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); } // [G61.1 not supported]
 8002310:	2a00      	cmp	r2, #0
 8002312:	d1a9      	bne.n	8002268 <gc_execute_line+0x498>
 8002314:	210a      	movs	r1, #10
 8002316:	e7c0      	b.n	800229a <gc_execute_line+0x4ca>
 8002318:	00989680 	.word	0x00989680
 800231c:	2000136c 	.word	0x2000136c
 8002320:	fffffcde 	.word	0xfffffcde
 8002324:	200013bc 	.word	0x200013bc
 8002328:	200013f4 	.word	0x200013f4
 800232c:	20001388 	.word	0x20001388
 8002330:	20001398 	.word	0x20001398
            if (axis_command) { FAIL(STATUS_GCODE_AXIS_COMMAND_CONFLICT); } // [Axis word/command conflict]
 8002334:	9b07      	ldr	r3, [sp, #28]
 8002336:	2b00      	cmp	r3, #0
 8002338:	f040 8253 	bne.w	80027e2 <gc_execute_line+0xa12>
            if (int_value == 38){
 800233c:	f1ba 0f26 	cmp.w	sl, #38	; 0x26
            gc_block.modal.motion = int_value;
 8002340:	f889 a001 	strb.w	sl, [r9, #1]
            if (int_value == 38){
 8002344:	f040 8167 	bne.w	8002616 <gc_execute_line+0x846>
              if (!((mantissa == 20) || (mantissa == 30) || (mantissa == 40) || (mantissa == 50))) {
 8002348:	f1a2 0314 	sub.w	r3, r2, #20
 800234c:	b29b      	uxth	r3, r3
 800234e:	2b1e      	cmp	r3, #30
 8002350:	d88a      	bhi.n	8002268 <gc_execute_line+0x498>
 8002352:	49b7      	ldr	r1, [pc, #732]	; (8002630 <gc_execute_line+0x860>)
 8002354:	fa21 f303 	lsr.w	r3, r1, r3
 8002358:	07d9      	lsls	r1, r3, #31
 800235a:	d585      	bpl.n	8002268 <gc_execute_line+0x498>
              gc_block.modal.motion += (mantissa/10)+100;
 800235c:	4bb5      	ldr	r3, [pc, #724]	; (8002634 <gc_execute_line+0x864>)
 800235e:	2101      	movs	r1, #1
 8002360:	fba3 2302 	umull	r2, r3, r3, r2
 8002364:	08db      	lsrs	r3, r3, #3
 8002366:	3b76      	subs	r3, #118	; 0x76
 8002368:	f889 3001 	strb.w	r3, [r9, #1]
            axis_command = AXIS_COMMAND_MOTION_MODE;
 800236c:	2302      	movs	r3, #2
 800236e:	9307      	str	r3, [sp, #28]
 8002370:	e793      	b.n	800229a <gc_execute_line+0x4ca>
            if ((int_value == 28) || (int_value == 30) || (int_value == 92)) {
 8002372:	f1ba 0f1c 	cmp.w	sl, #28
            gc_block.non_modal_command = int_value;
 8002376:	f889 a000 	strb.w	sl, [r9]
            if ((int_value == 28) || (int_value == 30) || (int_value == 92)) {
 800237a:	d01a      	beq.n	80023b2 <gc_execute_line+0x5e2>
 800237c:	f1ba 0f1e 	cmp.w	sl, #30
 8002380:	d017      	beq.n	80023b2 <gc_execute_line+0x5e2>
 8002382:	2100      	movs	r1, #0
 8002384:	e786      	b.n	8002294 <gc_execute_line+0x4c4>
            if (mantissa == 0) { // Ignore G28.1, G30.1, and G92.1
 8002386:	2a00      	cmp	r2, #0
 8002388:	f040 80ea 	bne.w	8002560 <gc_execute_line+0x790>
              if (axis_command) { FAIL(STATUS_GCODE_AXIS_COMMAND_CONFLICT); } // [Axis word/command conflict]
 800238c:	9b07      	ldr	r3, [sp, #28]
 800238e:	2b00      	cmp	r3, #0
 8002390:	f040 8227 	bne.w	80027e2 <gc_execute_line+0xa12>
            if ((int_value == 28) || (int_value == 30) || (int_value == 92)) {
 8002394:	f1ba 0f1c 	cmp.w	sl, #28
            gc_block.non_modal_command = int_value;
 8002398:	f889 a000 	strb.w	sl, [r9]
            if ((int_value == 28) || (int_value == 30) || (int_value == 92)) {
 800239c:	f000 8136 	beq.w	800260c <gc_execute_line+0x83c>
 80023a0:	f1ba 0f1e 	cmp.w	sl, #30
 80023a4:	f000 8132 	beq.w	800260c <gc_execute_line+0x83c>
              axis_command = AXIS_COMMAND_NON_MODAL;
 80023a8:	2301      	movs	r3, #1
 80023aa:	9307      	str	r3, [sp, #28]
            if ((int_value == 28) || (int_value == 30) || (int_value == 92)) {
 80023ac:	f1ba 0f5c 	cmp.w	sl, #92	; 0x5c
 80023b0:	d1e7      	bne.n	8002382 <gc_execute_line+0x5b2>
              if (!((mantissa == 0) || (mantissa == 10))) { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); }
 80023b2:	b112      	cbz	r2, 80023ba <gc_execute_line+0x5ea>
 80023b4:	2a0a      	cmp	r2, #10
 80023b6:	f47f af57 	bne.w	8002268 <gc_execute_line+0x498>
              gc_block.non_modal_command += mantissa;
 80023ba:	4450      	add	r0, sl
 80023bc:	f889 0000 	strb.w	r0, [r9]
 80023c0:	2100      	movs	r1, #0
 80023c2:	e76a      	b.n	800229a <gc_execute_line+0x4ca>
            gc_block.modal.plane_select = int_value - 17;
 80023c4:	f1aa 0a11 	sub.w	sl, sl, #17
 80023c8:	f889 a005 	strb.w	sl, [r9, #5]
            break;
 80023cc:	2102      	movs	r1, #2
 80023ce:	e761      	b.n	8002294 <gc_execute_line+0x4c4>
            gc_block.non_modal_command = int_value;
 80023d0:	f889 a000 	strb.w	sl, [r9]
            break;
 80023d4:	210f      	movs	r1, #15
 80023d6:	e75d      	b.n	8002294 <gc_execute_line+0x4c4>
		  case 'A': word_bit = WORD_A; gc_block.values.xyz[A_AXIS] = value; axis_words |= (1<<A_AXIS); break;
 80023d8:	9b06      	ldr	r3, [sp, #24]
 80023da:	f44f 5500 	mov.w	r5, #8192	; 0x2000
 80023de:	f043 0308 	orr.w	r3, r3, #8
 80023e2:	9306      	str	r3, [sp, #24]
 80023e4:	230d      	movs	r3, #13
 80023e6:	f8c9 b044 	str.w	fp, [r9, #68]	; 0x44
        if (bit_istrue(value_words,bit(word_bit))) { FAIL(STATUS_GCODE_WORD_REPEATED); } // [Word repeated]
 80023ea:	fa48 f303 	asr.w	r3, r8, r3
 80023ee:	07d8      	lsls	r0, r3, #31
 80023f0:	d41f      	bmi.n	8002432 <gc_execute_line+0x662>
        value_words |= bit(word_bit); // Flag to indicate parameter assigned.
 80023f2:	ea45 0808 	orr.w	r8, r5, r8
 80023f6:	e60c      	b.n	8002012 <gc_execute_line+0x242>
          case 'F': word_bit = WORD_F; gc_block.values.f = value; break;
 80023f8:	2501      	movs	r5, #1
 80023fa:	2300      	movs	r3, #0
 80023fc:	f8c9 b00c 	str.w	fp, [r9, #12]
        if (bit_istrue(value_words,bit(word_bit))) { FAIL(STATUS_GCODE_WORD_REPEATED); } // [Word repeated]
 8002400:	fa48 f303 	asr.w	r3, r8, r3
 8002404:	07de      	lsls	r6, r3, #31
 8002406:	d414      	bmi.n	8002432 <gc_execute_line+0x662>
          if (value < 0.0) { FAIL(STATUS_NEGATIVE_VALUE); } // [Word value cannot be negative]
 8002408:	4658      	mov	r0, fp
 800240a:	2100      	movs	r1, #0
 800240c:	f7fe fdf2 	bl	8000ff4 <__aeabi_fcmplt>
 8002410:	2800      	cmp	r0, #0
 8002412:	d0ee      	beq.n	80023f2 <gc_execute_line+0x622>
 8002414:	2404      	movs	r4, #4
 8002416:	e728      	b.n	800226a <gc_execute_line+0x49a>
          case 'J': word_bit = WORD_J; gc_block.values.ijk[Y_AXIS] = value; ijk_words |= (1<<Y_AXIS); break;
 8002418:	9b08      	ldr	r3, [sp, #32]
 800241a:	f8c9 b014 	str.w	fp, [r9, #20]
 800241e:	f043 0302 	orr.w	r3, r3, #2
 8002422:	9308      	str	r3, [sp, #32]
 8002424:	2302      	movs	r3, #2
        if (bit_istrue(value_words,bit(word_bit))) { FAIL(STATUS_GCODE_WORD_REPEATED); } // [Word repeated]
 8002426:	fa48 f303 	asr.w	r3, r8, r3
 800242a:	07d8      	lsls	r0, r3, #31
          case 'J': word_bit = WORD_J; gc_block.values.ijk[Y_AXIS] = value; ijk_words |= (1<<Y_AXIS); break;
 800242c:	f04f 0504 	mov.w	r5, #4
        if (bit_istrue(value_words,bit(word_bit))) { FAIL(STATUS_GCODE_WORD_REPEATED); } // [Word repeated]
 8002430:	d5df      	bpl.n	80023f2 <gc_execute_line+0x622>
 8002432:	2419      	movs	r4, #25
}
 8002434:	4620      	mov	r0, r4
 8002436:	b01d      	add	sp, #116	; 0x74
 8002438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          case 'K': word_bit = WORD_K; gc_block.values.ijk[Z_AXIS] = value; ijk_words |= (1<<Z_AXIS); break;
 800243c:	9b08      	ldr	r3, [sp, #32]
 800243e:	f8c9 b018 	str.w	fp, [r9, #24]
 8002442:	f043 0304 	orr.w	r3, r3, #4
 8002446:	9308      	str	r3, [sp, #32]
 8002448:	2508      	movs	r5, #8
 800244a:	2303      	movs	r3, #3
 800244c:	e7cd      	b.n	80023ea <gc_execute_line+0x61a>
          case 'L': word_bit = WORD_L; gc_block.values.l = int_value; break;
 800244e:	f889 a020 	strb.w	sl, [r9, #32]
 8002452:	2510      	movs	r5, #16
 8002454:	2304      	movs	r3, #4
 8002456:	e7c8      	b.n	80023ea <gc_execute_line+0x61a>
          case 'N': word_bit = WORD_N; gc_block.values.n = truncf(value); break;
 8002458:	4658      	mov	r0, fp
 800245a:	f7fe fe09 	bl	8001070 <__aeabi_f2iz>
 800245e:	2520      	movs	r5, #32
 8002460:	f8c9 0024 	str.w	r0, [r9, #36]	; 0x24
 8002464:	2305      	movs	r3, #5
 8002466:	e7cb      	b.n	8002400 <gc_execute_line+0x630>
          case 'P': word_bit = WORD_P; gc_block.values.p = value; break;
 8002468:	f8c9 b028 	str.w	fp, [r9, #40]	; 0x28
 800246c:	2540      	movs	r5, #64	; 0x40
 800246e:	2306      	movs	r3, #6
 8002470:	e7c6      	b.n	8002400 <gc_execute_line+0x630>
          case 'R': word_bit = WORD_R; gc_block.values.r = value; break;
 8002472:	f8c9 b02c 	str.w	fp, [r9, #44]	; 0x2c
 8002476:	2580      	movs	r5, #128	; 0x80
 8002478:	2307      	movs	r3, #7
 800247a:	e7b6      	b.n	80023ea <gc_execute_line+0x61a>
          case 'S': word_bit = WORD_S; gc_block.values.s = value; break;
 800247c:	f8c9 b030 	str.w	fp, [r9, #48]	; 0x30
 8002480:	f44f 7580 	mov.w	r5, #256	; 0x100
 8002484:	2308      	movs	r3, #8
 8002486:	e7bb      	b.n	8002400 <gc_execute_line+0x630>
				if (value > MAX_TOOL_NUMBER) { FAIL(STATUS_GCODE_MAX_VALUE_EXCEEDED); }
 8002488:	496b      	ldr	r1, [pc, #428]	; (8002638 <gc_execute_line+0x868>)
 800248a:	4658      	mov	r0, fp
 800248c:	f7fe fdd0 	bl	8001030 <__aeabi_fcmpgt>
 8002490:	2800      	cmp	r0, #0
 8002492:	f040 82fa 	bne.w	8002a8a <gc_execute_line+0xcba>
					gc_block.values.t = int_value;
 8002496:	f889 a034 	strb.w	sl, [r9, #52]	; 0x34
				break;
 800249a:	f44f 7500 	mov.w	r5, #512	; 0x200
 800249e:	2309      	movs	r3, #9
 80024a0:	e7ae      	b.n	8002400 <gc_execute_line+0x630>
		  case 'X': word_bit = WORD_X; gc_block.values.xyz[X_AXIS] = value; axis_words |= (1<<X_AXIS); break;
 80024a2:	9b06      	ldr	r3, [sp, #24]
 80024a4:	f8c9 b038 	str.w	fp, [r9, #56]	; 0x38
 80024a8:	f043 0301 	orr.w	r3, r3, #1
 80024ac:	9306      	str	r3, [sp, #24]
 80024ae:	f44f 6580 	mov.w	r5, #1024	; 0x400
 80024b2:	230a      	movs	r3, #10
 80024b4:	e799      	b.n	80023ea <gc_execute_line+0x61a>
          case 'Y': word_bit = WORD_Y; gc_block.values.xyz[Y_AXIS] = value; axis_words |= (1<<Y_AXIS); break;
 80024b6:	9b06      	ldr	r3, [sp, #24]
 80024b8:	f8c9 b03c 	str.w	fp, [r9, #60]	; 0x3c
 80024bc:	f043 0302 	orr.w	r3, r3, #2
 80024c0:	9306      	str	r3, [sp, #24]
 80024c2:	f44f 6500 	mov.w	r5, #2048	; 0x800
 80024c6:	230b      	movs	r3, #11
 80024c8:	e78f      	b.n	80023ea <gc_execute_line+0x61a>
          case 'Z': word_bit = WORD_Z; gc_block.values.xyz[Z_AXIS] = value; axis_words |= (1<<Z_AXIS); break;
 80024ca:	9b06      	ldr	r3, [sp, #24]
 80024cc:	f8c9 b040 	str.w	fp, [r9, #64]	; 0x40
 80024d0:	f043 0304 	orr.w	r3, r3, #4
 80024d4:	9306      	str	r3, [sp, #24]
 80024d6:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 80024da:	230c      	movs	r3, #12
 80024dc:	e785      	b.n	80023ea <gc_execute_line+0x61a>
          case 'I': word_bit = WORD_I; gc_block.values.ijk[X_AXIS] = value; ijk_words |= (1<<X_AXIS); break;
 80024de:	9b08      	ldr	r3, [sp, #32]
 80024e0:	f8c9 b010 	str.w	fp, [r9, #16]
 80024e4:	f043 0301 	orr.w	r3, r3, #1
 80024e8:	9308      	str	r3, [sp, #32]
 80024ea:	2502      	movs	r5, #2
 80024ec:	2301      	movs	r3, #1
 80024ee:	e77c      	b.n	80023ea <gc_execute_line+0x61a>
              case 8: gc_block.modal.coolant = COOLANT_FLOOD_ENABLE; break;
 80024f0:	2340      	movs	r3, #64	; 0x40
 80024f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024f6:	f889 3009 	strb.w	r3, [r9, #9]
 80024fa:	230d      	movs	r3, #13
 80024fc:	e583      	b.n	8002006 <gc_execute_line+0x236>
              case 4: gc_block.modal.spindle = SPINDLE_ENABLE_CCW; break;
 80024fe:	2320      	movs	r3, #32
 8002500:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002504:	f889 300a 	strb.w	r3, [r9, #10]
 8002508:	230c      	movs	r3, #12
 800250a:	e57c      	b.n	8002006 <gc_execute_line+0x236>
                case 7: gc_block.modal.coolant = COOLANT_MIST_ENABLE; break;
 800250c:	2380      	movs	r3, #128	; 0x80
 800250e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002512:	f889 3009 	strb.w	r3, [r9, #9]
 8002516:	230d      	movs	r3, #13
 8002518:	e575      	b.n	8002006 <gc_execute_line+0x236>
              case 3: gc_block.modal.spindle = SPINDLE_ENABLE_CW; break;
 800251a:	2310      	movs	r3, #16
 800251c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002520:	f889 300a 	strb.w	r3, [r9, #10]
 8002524:	230c      	movs	r3, #12
 8002526:	e56e      	b.n	8002006 <gc_execute_line+0x236>
    if((letter < 'A') || (letter > 'Z')) { FAIL(STATUS_EXPECTED_COMMAND_LETTER); } // [Expected word letter]
 8002528:	2401      	movs	r4, #1
}
 800252a:	4620      	mov	r0, r4
 800252c:	b01d      	add	sp, #116	; 0x74
 800252e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (!read_float(line, &char_counter, &value)) { FAIL(STATUS_BAD_NUMBER_FORMAT); } // [Expected word value]
 8002532:	2402      	movs	r4, #2
}
 8002534:	4620      	mov	r0, r4
 8002536:	b01d      	add	sp, #116	; 0x74
 8002538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
              case 9: gc_block.modal.coolant = COOLANT_DISABLE; break;
 800253c:	2300      	movs	r3, #0
 800253e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002542:	f889 3009 	strb.w	r3, [r9, #9]
 8002546:	230d      	movs	r3, #13
 8002548:	e55d      	b.n	8002006 <gc_execute_line+0x236>
              case 5: gc_block.modal.spindle = SPINDLE_DISABLE; break;
 800254a:	2300      	movs	r3, #0
 800254c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002550:	f889 300a 	strb.w	r3, [r9, #10]
 8002554:	230c      	movs	r3, #12
 8002556:	e556      	b.n	8002006 <gc_execute_line+0x236>
        if (mantissa > 0) { FAIL(STATUS_GCODE_COMMAND_VALUE_NOT_INTEGER); } // [Unsupported or invalid Gxx.x command]
 8002558:	2417      	movs	r4, #23
 800255a:	e686      	b.n	800226a <gc_execute_line+0x49a>
        if ( bit_istrue(command_words,bit(word_bit)) ) { FAIL(STATUS_GCODE_MODAL_GROUP_VIOLATION); }
 800255c:	2415      	movs	r4, #21
 800255e:	e684      	b.n	800226a <gc_execute_line+0x49a>
            if ((int_value == 28) || (int_value == 30) || (int_value == 92)) {
 8002560:	f1ba 0f1c 	cmp.w	sl, #28
            gc_block.non_modal_command = int_value;
 8002564:	f889 a000 	strb.w	sl, [r9]
            if ((int_value == 28) || (int_value == 30) || (int_value == 92)) {
 8002568:	f43f af24 	beq.w	80023b4 <gc_execute_line+0x5e4>
 800256c:	f1ba 0f1e 	cmp.w	sl, #30
 8002570:	f47f af1c 	bne.w	80023ac <gc_execute_line+0x5dc>
 8002574:	e71e      	b.n	80023b4 <gc_execute_line+0x5e4>
              if ((mantissa != 10) || (int_value == 90)) { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); } // [G90.1 not supported]
 8002576:	2a0a      	cmp	r2, #10
 8002578:	f47f ae76 	bne.w	8002268 <gc_execute_line+0x498>
 800257c:	f1ba 0f5a 	cmp.w	sl, #90	; 0x5a
 8002580:	f43f ae72 	beq.w	8002268 <gc_execute_line+0x498>
 8002584:	2104      	movs	r1, #4
 8002586:	e688      	b.n	800229a <gc_execute_line+0x4ca>
    if (gc_block.modal.feed_rate == FEED_RATE_MODE_INVERSE_TIME) { // = G93
 8002588:	f899 3002 	ldrb.w	r3, [r9, #2]
 800258c:	2b01      	cmp	r3, #1
 800258e:	d02b      	beq.n	80025e8 <gc_execute_line+0x818>
      if (gc_state.modal.feed_rate == FEED_RATE_MODE_UNITS_PER_MIN) { // Last state is also G94
 8002590:	4a2a      	ldr	r2, [pc, #168]	; (800263c <gc_execute_line+0x86c>)
 8002592:	7853      	ldrb	r3, [r2, #1]
 8002594:	2b00      	cmp	r3, #0
 8002596:	f47f ad5f 	bne.w	8002058 <gc_execute_line+0x288>
        if (bit_istrue(value_words,bit(WORD_F))) {
 800259a:	f018 0f01 	tst.w	r8, #1
 800259e:	f47f ad56 	bne.w	800204e <gc_execute_line+0x27e>
          gc_block.values.f = gc_state.feed_rate; // Push last state feed rate
 80025a2:	6913      	ldr	r3, [r2, #16]
 80025a4:	f8c9 300c 	str.w	r3, [r9, #12]
 80025a8:	e556      	b.n	8002058 <gc_execute_line+0x288>
              gc_block.modal.tool_length = TOOL_LENGTH_OFFSET_CANCEL;
 80025aa:	f889 3006 	strb.w	r3, [r9, #6]
            axis_command = AXIS_COMMAND_TOOL_LENGTH_OFFSET;
 80025ae:	2303      	movs	r3, #3
              gc_block.modal.tool_length = TOOL_LENGTH_OFFSET_CANCEL;
 80025b0:	2108      	movs	r1, #8
            axis_command = AXIS_COMMAND_TOOL_LENGTH_OFFSET;
 80025b2:	9307      	str	r3, [sp, #28]
 80025b4:	e671      	b.n	800229a <gc_execute_line+0x4ca>
  if (bit_isfalse(value_words,bit(WORD_S))) { gc_block.values.s = gc_state.spindle_speed; }
 80025b6:	4b21      	ldr	r3, [pc, #132]	; (800263c <gc_execute_line+0x86c>)
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	f8c9 3030 	str.w	r3, [r9, #48]	; 0x30
 80025be:	e54f      	b.n	8002060 <gc_execute_line+0x290>
    if (bit_isfalse(value_words,bit(WORD_L))) { FAIL(STATUS_GCODE_VALUE_WORD_MISSING); } // [L word missing]
 80025c0:	f008 0350 	and.w	r3, r8, #80	; 0x50
 80025c4:	2b50      	cmp	r3, #80	; 0x50
 80025c6:	d124      	bne.n	8002612 <gc_execute_line+0x842>
    if (bit_isfalse(value_words,bit(WORD_S))) { FAIL(STATUS_GCODE_VALUE_WORD_MISSING); } // [S word missing]
 80025c8:	f408 7390 	and.w	r3, r8, #288	; 0x120
 80025cc:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 80025d0:	d11f      	bne.n	8002612 <gc_execute_line+0x842>
    if (bit_isfalse(value_words,bit(WORD_R))) { FAIL(STATUS_GCODE_VALUE_WORD_MISSING); } // [R word missing]
 80025d2:	f008 0381 	and.w	r3, r8, #129	; 0x81
 80025d6:	2b81      	cmp	r3, #129	; 0x81
 80025d8:	d11b      	bne.n	8002612 <gc_execute_line+0x842>
	bit_false(value_words, bit(WORD_R));
 80025da:	f2a3 2373 	subw	r3, r3, #627	; 0x273
 80025de:	ea08 0803 	and.w	r8, r8, r3
 80025e2:	e550      	b.n	8002086 <gc_execute_line+0x2b6>
    if (gc_block.values.n > MAX_LINE_NUMBER) { FAIL(STATUS_GCODE_INVALID_LINE_NUMBER); } // [Exceeds max line number]
 80025e4:	241b      	movs	r4, #27
 80025e6:	e640      	b.n	800226a <gc_execute_line+0x49a>
      if (axis_command == AXIS_COMMAND_MOTION_MODE) {
 80025e8:	9b07      	ldr	r3, [sp, #28]
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	f47f ad34 	bne.w	8002058 <gc_execute_line+0x288>
		if ((gc_block.modal.motion != MOTION_MODE_NONE) && (gc_block.modal.motion != MOTION_MODE_SEEK)) {
 80025f0:	f899 3001 	ldrb.w	r3, [r9, #1]
 80025f4:	2b50      	cmp	r3, #80	; 0x50
 80025f6:	f43f ad2f 	beq.w	8002058 <gc_execute_line+0x288>
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	f43f ad2c 	beq.w	8002058 <gc_execute_line+0x288>
          if (bit_isfalse(value_words,bit(WORD_F))) { FAIL(STATUS_GCODE_UNDEFINED_FEED_RATE); } // [F word missing]
 8002600:	f018 0f01 	tst.w	r8, #1
 8002604:	f47f ad28 	bne.w	8002058 <gc_execute_line+0x288>
      if (gc_block.values.f == 0.0f) { FAIL(STATUS_GCODE_UNDEFINED_FEED_RATE); } // [Feed rate undefined]
 8002608:	2416      	movs	r4, #22
 800260a:	e62e      	b.n	800226a <gc_execute_line+0x49a>
              axis_command = AXIS_COMMAND_NON_MODAL;
 800260c:	2301      	movs	r3, #1
 800260e:	9307      	str	r3, [sp, #28]
 8002610:	e6d3      	b.n	80023ba <gc_execute_line+0x5ea>
    if (bit_isfalse(value_words,bit(WORD_P))) { FAIL(STATUS_GCODE_VALUE_WORD_MISSING); } // [P word missing]
 8002612:	241c      	movs	r4, #28
 8002614:	e629      	b.n	800226a <gc_execute_line+0x49a>
            axis_command = AXIS_COMMAND_MOTION_MODE;
 8002616:	2302      	movs	r3, #2
 8002618:	2101      	movs	r1, #1
 800261a:	9307      	str	r3, [sp, #28]
 800261c:	e63a      	b.n	8002294 <gc_execute_line+0x4c4>
    if (bit_isfalse(value_words,bit(WORD_P))) { FAIL(STATUS_GCODE_VALUE_WORD_MISSING); } // [P word missing]
 800261e:	f018 0f40 	tst.w	r8, #64	; 0x40
 8002622:	d0f6      	beq.n	8002612 <gc_execute_line+0x842>
    bit_false(value_words,bit(WORD_P));
 8002624:	f028 0840 	bic.w	r8, r8, #64	; 0x40
 8002628:	fa1f f888 	uxth.w	r8, r8
 800262c:	e52b      	b.n	8002086 <gc_execute_line+0x2b6>
 800262e:	bf00      	nop
 8002630:	40100401 	.word	0x40100401
 8002634:	cccccccd 	.word	0xcccccccd
 8002638:	437f0000 	.word	0x437f0000
 800263c:	2000136c 	.word	0x2000136c
      if (bit_istrue(axis_words,bit(idx)) ) {
 8002640:	9b06      	ldr	r3, [sp, #24]
 8002642:	07d8      	lsls	r0, r3, #31
 8002644:	d507      	bpl.n	8002656 <gc_execute_line+0x886>
        gc_block.values.xyz[idx] *= MM_PER_INCH;
 8002646:	f8d9 0038 	ldr.w	r0, [r9, #56]	; 0x38
 800264a:	4992      	ldr	r1, [pc, #584]	; (8002894 <gc_execute_line+0xac4>)
 800264c:	f7fe fb34 	bl	8000cb8 <__aeabi_fmul>
 8002650:	9b06      	ldr	r3, [sp, #24]
 8002652:	f8c9 0038 	str.w	r0, [r9, #56]	; 0x38
      if (bit_istrue(axis_words,bit(idx)) ) {
 8002656:	0799      	lsls	r1, r3, #30
 8002658:	d507      	bpl.n	800266a <gc_execute_line+0x89a>
        gc_block.values.xyz[idx] *= MM_PER_INCH;
 800265a:	f8d9 003c 	ldr.w	r0, [r9, #60]	; 0x3c
 800265e:	498d      	ldr	r1, [pc, #564]	; (8002894 <gc_execute_line+0xac4>)
 8002660:	f7fe fb2a 	bl	8000cb8 <__aeabi_fmul>
 8002664:	9b06      	ldr	r3, [sp, #24]
 8002666:	f8c9 003c 	str.w	r0, [r9, #60]	; 0x3c
      if (bit_istrue(axis_words,bit(idx)) ) {
 800266a:	075a      	lsls	r2, r3, #29
 800266c:	d507      	bpl.n	800267e <gc_execute_line+0x8ae>
        gc_block.values.xyz[idx] *= MM_PER_INCH;
 800266e:	f8d9 0040 	ldr.w	r0, [r9, #64]	; 0x40
 8002672:	4988      	ldr	r1, [pc, #544]	; (8002894 <gc_execute_line+0xac4>)
 8002674:	f7fe fb20 	bl	8000cb8 <__aeabi_fmul>
 8002678:	9b06      	ldr	r3, [sp, #24]
 800267a:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
      if (bit_istrue(axis_words,bit(idx)) ) {
 800267e:	071b      	lsls	r3, r3, #28
 8002680:	f57f ad15 	bpl.w	80020ae <gc_execute_line+0x2de>
        gc_block.values.xyz[idx] *= MM_PER_INCH;
 8002684:	f8d9 0044 	ldr.w	r0, [r9, #68]	; 0x44
 8002688:	4982      	ldr	r1, [pc, #520]	; (8002894 <gc_execute_line+0xac4>)
 800268a:	f7fe fb15 	bl	8000cb8 <__aeabi_fmul>
 800268e:	f8c9 0044 	str.w	r0, [r9, #68]	; 0x44
 8002692:	e50c      	b.n	80020ae <gc_execute_line+0x2de>
    if (gc_block.modal.tool_length == TOOL_LENGTH_OFFSET_ENABLE_DYNAMIC) {
 8002694:	f899 3006 	ldrb.w	r3, [r9, #6]
 8002698:	2b01      	cmp	r3, #1
 800269a:	f47f ad0c 	bne.w	80020b6 <gc_execute_line+0x2e6>
      if (axis_words ^ (1<<TOOL_LENGTH_OFFSET_AXIS)) { FAIL(STATUS_GCODE_G43_DYNAMIC_AXIS_ERROR); }
 800269e:	9b06      	ldr	r3, [sp, #24]
 80026a0:	2b04      	cmp	r3, #4
 80026a2:	f43f ad08 	beq.w	80020b6 <gc_execute_line+0x2e6>
 80026a6:	2425      	movs	r4, #37	; 0x25
 80026a8:	e5df      	b.n	800226a <gc_execute_line+0x49a>
    if (gc_block.modal.units == UNITS_MODE_INCHES) { gc_block.values.f *= MM_PER_INCH; }
 80026aa:	f8d9 000c 	ldr.w	r0, [r9, #12]
 80026ae:	4979      	ldr	r1, [pc, #484]	; (8002894 <gc_execute_line+0xac4>)
 80026b0:	f7fe fb02 	bl	8000cb8 <__aeabi_fmul>
 80026b4:	f8c9 000c 	str.w	r0, [r9, #12]
 80026b8:	e4ce      	b.n	8002058 <gc_execute_line+0x288>
  switch (gc_block.modal.plane_select) {
 80026ba:	2601      	movs	r6, #1
 80026bc:	461f      	mov	r7, r3
      axis_1 = Y_AXIS;
 80026be:	e9cd 360c 	strd	r3, r6, [sp, #48]	; 0x30
  switch (gc_block.modal.plane_select) {
 80026c2:	2303      	movs	r3, #3
 80026c4:	930b      	str	r3, [sp, #44]	; 0x2c
      axis_linear = Z_AXIS;
 80026c6:	2302      	movs	r3, #2
 80026c8:	930e      	str	r3, [sp, #56]	; 0x38
 80026ca:	e4eb      	b.n	80020a4 <gc_execute_line+0x2d4>
    default: // case PLANE_SELECT_YZ:
 80026cc:	2306      	movs	r3, #6
      axis_0 = Y_AXIS;
 80026ce:	2701      	movs	r7, #1
 80026d0:	2602      	movs	r6, #2
    default: // case PLANE_SELECT_YZ:
 80026d2:	930b      	str	r3, [sp, #44]	; 0x2c
      axis_linear = X_AXIS;
 80026d4:	2300      	movs	r3, #0
      axis_0 = Y_AXIS;
 80026d6:	e9cd 760c 	strd	r7, r6, [sp, #48]	; 0x30
      axis_linear = X_AXIS;
 80026da:	930e      	str	r3, [sp, #56]	; 0x38
 80026dc:	e4e2      	b.n	80020a4 <gc_execute_line+0x2d4>
      if (axis_command != AXIS_COMMAND_TOOL_LENGTH_OFFSET ) { // TLO block any axis command.
 80026de:	9b07      	ldr	r3, [sp, #28]
 80026e0:	2b03      	cmp	r3, #3
 80026e2:	d033      	beq.n	800274c <gc_execute_line+0x97c>
        if (axis_words) {
 80026e4:	9a06      	ldr	r2, [sp, #24]
 80026e6:	2a00      	cmp	r2, #0
 80026e8:	d030      	beq.n	800274c <gc_execute_line+0x97c>
                  if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.xyz[idx] += gc_state.tool_length_offset; }
 80026ea:	496b      	ldr	r1, [pc, #428]	; (8002898 <gc_execute_line+0xac8>)
 80026ec:	f899 3004 	ldrb.w	r3, [r9, #4]
 80026f0:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80026f2:	910a      	str	r1, [sp, #40]	; 0x28
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	f040 81fc 	bne.w	8002af2 <gc_execute_line+0xd22>
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 80026fa:	07d0      	lsls	r0, r2, #31
 80026fc:	f100 822c 	bmi.w	8002b58 <gc_execute_line+0xd88>
              gc_block.values.xyz[idx] = gc_state.position[idx]; // No axis word in block. Keep same axis position.
 8002700:	4b65      	ldr	r3, [pc, #404]	; (8002898 <gc_execute_line+0xac8>)
 8002702:	69db      	ldr	r3, [r3, #28]
 8002704:	f8c9 3038 	str.w	r3, [r9, #56]	; 0x38
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 8002708:	9b06      	ldr	r3, [sp, #24]
 800270a:	0799      	lsls	r1, r3, #30
 800270c:	f100 8461 	bmi.w	8002fd2 <gc_execute_line+0x1202>
              gc_block.values.xyz[idx] = gc_state.position[idx]; // No axis word in block. Keep same axis position.
 8002710:	4b61      	ldr	r3, [pc, #388]	; (8002898 <gc_execute_line+0xac8>)
 8002712:	6a1b      	ldr	r3, [r3, #32]
 8002714:	f8c9 303c 	str.w	r3, [r9, #60]	; 0x3c
 8002718:	9b06      	ldr	r3, [sp, #24]
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 800271a:	075a      	lsls	r2, r3, #29
 800271c:	f100 81c6 	bmi.w	8002aac <gc_execute_line+0xcdc>
              gc_block.values.xyz[idx] = gc_state.position[idx]; // No axis word in block. Keep same axis position.
 8002720:	4b5d      	ldr	r3, [pc, #372]	; (8002898 <gc_execute_line+0xac8>)
 8002722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002724:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
 8002728:	9b06      	ldr	r3, [sp, #24]
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 800272a:	071b      	lsls	r3, r3, #28
 800272c:	f140 81d3 	bpl.w	8002ad6 <gc_execute_line+0xd06>
              if (gc_block.non_modal_command != NON_MODAL_ABSOLUTE_OVERRIDE) {
 8002730:	2d35      	cmp	r5, #53	; 0x35
 8002732:	f000 8084 	beq.w	800283e <gc_execute_line+0xa6e>
                  gc_block.values.xyz[idx] += block_coord_system[idx] + gc_state.coord_offset[idx];
 8002736:	f8d9 1044 	ldr.w	r1, [r9, #68]	; 0x44
 800273a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800273c:	f7fe f9b4 	bl	8000aa8 <__addsf3>
 8002740:	4b55      	ldr	r3, [pc, #340]	; (8002898 <gc_execute_line+0xac8>)
 8002742:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8002744:	f7fe f9b0 	bl	8000aa8 <__addsf3>
 8002748:	f8c9 0044 	str.w	r0, [r9, #68]	; 0x44
      switch (gc_block.non_modal_command) {
 800274c:	2d1e      	cmp	r5, #30
 800274e:	f000 819f 	beq.w	8002a90 <gc_execute_line+0xcc0>
 8002752:	2d35      	cmp	r5, #53	; 0x35
 8002754:	d073      	beq.n	800283e <gc_execute_line+0xa6e>
 8002756:	2d1c      	cmp	r5, #28
 8002758:	d045      	beq.n	80027e6 <gc_execute_line+0xa16>
 800275a:	f899 5001 	ldrb.w	r5, [r9, #1]
  if (gc_block.modal.motion == MOTION_MODE_NONE) {
 800275e:	2d50      	cmp	r5, #80	; 0x50
 8002760:	d172      	bne.n	8002848 <gc_execute_line+0xa78>
    if (axis_words) { FAIL(STATUS_GCODE_AXIS_WORDS_EXIST); } // [No axis words allowed]
 8002762:	9b06      	ldr	r3, [sp, #24]
 8002764:	2b00      	cmp	r3, #0
 8002766:	f040 81bb 	bne.w	8002ae0 <gc_execute_line+0xd10>
 800276a:	930a      	str	r3, [sp, #40]	; 0x28
 800276c:	e513      	b.n	8002196 <gc_execute_line+0x3c6>
      if (coord_select > 0) { coord_select--; } // Adjust P1-P6 index to EEPROM coordinate data indexing.
 800276e:	2800      	cmp	r0, #0
 8002770:	f000 8201 	beq.w	8002b76 <gc_execute_line+0xda6>
 8002774:	3801      	subs	r0, #1
 8002776:	b2c3      	uxtb	r3, r0
 8002778:	4618      	mov	r0, r3
 800277a:	930a      	str	r3, [sp, #40]	; 0x28
      if (!settings_read_coord_data(coord_select,gc_block.values.ijk)) { FAIL(STATUS_SETTING_READ_FAIL); } // [EEPROM read fail]
 800277c:	4947      	ldr	r1, [pc, #284]	; (800289c <gc_execute_line+0xacc>)
 800277e:	f005 f9dd 	bl	8007b3c <settings_read_coord_data>
 8002782:	2800      	cmp	r0, #0
 8002784:	d036      	beq.n	80027f4 <gc_execute_line+0xa24>
 8002786:	f899 3020 	ldrb.w	r3, [r9, #32]
            if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.ijk[idx] -= gc_state.tool_length_offset; }
 800278a:	4a43      	ldr	r2, [pc, #268]	; (8002898 <gc_execute_line+0xac8>)
 800278c:	2b14      	cmp	r3, #20
 800278e:	6cd5      	ldr	r5, [r2, #76]	; 0x4c
        if (bit_istrue(axis_words,bit(idx)) ) {
 8002790:	9b06      	ldr	r3, [sp, #24]
 8002792:	f000 8269 	beq.w	8002c68 <gc_execute_line+0xe98>
 8002796:	07da      	lsls	r2, r3, #31
            gc_block.values.ijk[idx] = gc_block.values.xyz[idx];
 8002798:	bf44      	itt	mi
 800279a:	f8d9 3038 	ldrmi.w	r3, [r9, #56]	; 0x38
 800279e:	f8c9 3010 	strmi.w	r3, [r9, #16]
        if (bit_istrue(axis_words,bit(idx)) ) {
 80027a2:	9b06      	ldr	r3, [sp, #24]
 80027a4:	079b      	lsls	r3, r3, #30
            gc_block.values.ijk[idx] = gc_block.values.xyz[idx];
 80027a6:	bf44      	itt	mi
 80027a8:	f8d9 303c 	ldrmi.w	r3, [r9, #60]	; 0x3c
 80027ac:	f8c9 3014 	strmi.w	r3, [r9, #20]
        if (bit_istrue(axis_words,bit(idx)) ) {
 80027b0:	9b06      	ldr	r3, [sp, #24]
 80027b2:	075d      	lsls	r5, r3, #29
            gc_block.values.ijk[idx] = gc_block.values.xyz[idx];
 80027b4:	bf44      	itt	mi
 80027b6:	f8d9 3040 	ldrmi.w	r3, [r9, #64]	; 0x40
 80027ba:	f8c9 3018 	strmi.w	r3, [r9, #24]
        if (bit_istrue(axis_words,bit(idx)) ) {
 80027be:	9b06      	ldr	r3, [sp, #24]
 80027c0:	0718      	lsls	r0, r3, #28
 80027c2:	d503      	bpl.n	80027cc <gc_execute_line+0x9fc>
            gc_block.values.ijk[idx] = gc_block.values.xyz[idx];
 80027c4:	f8d9 3044 	ldr.w	r3, [r9, #68]	; 0x44
 80027c8:	f8c9 301c 	str.w	r3, [r9, #28]
      bit_false(value_words,(bit(WORD_L)|bit(WORD_P)));
 80027cc:	f028 0850 	bic.w	r8, r8, #80	; 0x50
 80027d0:	fa1f f888 	uxth.w	r8, r8
 80027d4:	e4d6      	b.n	8002184 <gc_execute_line+0x3b4>
    if (gc_block.modal.coord_select > N_COORDINATE_SYSTEM) { FAIL(STATUS_GCODE_UNSUPPORTED_COORD_SYS); } // [Greater than N sys]
 80027d6:	241d      	movs	r4, #29
 80027d8:	e547      	b.n	800226a <gc_execute_line+0x49a>
      if (!axis_words) { FAIL(STATUS_GCODE_NO_AXIS_WORDS) }; // [No axis words]
 80027da:	241a      	movs	r4, #26
 80027dc:	e545      	b.n	800226a <gc_execute_line+0x49a>
  if (value_words) { FAIL(STATUS_GCODE_UNUSED_WORDS); } // [Unused words]
 80027de:	2424      	movs	r4, #36	; 0x24
 80027e0:	e543      	b.n	800226a <gc_execute_line+0x49a>
              if (axis_command) { FAIL(STATUS_GCODE_AXIS_COMMAND_CONFLICT); } // [Axis word/command conflict]
 80027e2:	2418      	movs	r4, #24
 80027e4:	e541      	b.n	800226a <gc_execute_line+0x49a>
            if (!settings_read_coord_data(SETTING_INDEX_G28,gc_block.values.ijk)) { FAIL(STATUS_SETTING_READ_FAIL); }
 80027e6:	492d      	ldr	r1, [pc, #180]	; (800289c <gc_execute_line+0xacc>)
 80027e8:	2006      	movs	r0, #6
 80027ea:	f005 f9a7 	bl	8007b3c <settings_read_coord_data>
 80027ee:	2800      	cmp	r0, #0
 80027f0:	f040 8155 	bne.w	8002a9e <gc_execute_line+0xcce>
        if (!(settings_read_coord_data(gc_state.modal.coord_select,gc_state.coord_system))) { FAIL(STATUS_SETTING_READ_FAIL); }
 80027f4:	2407      	movs	r4, #7
 80027f6:	e538      	b.n	800226a <gc_execute_line+0x49a>
          gc_block.values.xyz[idx] = gc_state.coord_offset[idx];
 80027f8:	4b27      	ldr	r3, [pc, #156]	; (8002898 <gc_execute_line+0xac8>)
 80027fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fc:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
 8002800:	e4af      	b.n	8002162 <gc_execute_line+0x392>
              if (gc_block.non_modal_command != NON_MODAL_ABSOLUTE_OVERRIDE) {
 8002802:	2d35      	cmp	r5, #53	; 0x35
 8002804:	f000 821c 	beq.w	8002c40 <gc_execute_line+0xe70>
                  gc_block.values.xyz[idx] += gc_state.position[idx];
 8002808:	4b23      	ldr	r3, [pc, #140]	; (8002898 <gc_execute_line+0xac8>)
 800280a:	f8d9 1038 	ldr.w	r1, [r9, #56]	; 0x38
 800280e:	69d8      	ldr	r0, [r3, #28]
 8002810:	f7fe f94a 	bl	8000aa8 <__addsf3>
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 8002814:	9b06      	ldr	r3, [sp, #24]
                  gc_block.values.xyz[idx] += gc_state.position[idx];
 8002816:	f8c9 0038 	str.w	r0, [r9, #56]	; 0x38
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 800281a:	079b      	lsls	r3, r3, #30
 800281c:	f100 8176 	bmi.w	8002b0c <gc_execute_line+0xd3c>
              gc_block.values.xyz[idx] = gc_state.position[idx]; // No axis word in block. Keep same axis position.
 8002820:	4b1d      	ldr	r3, [pc, #116]	; (8002898 <gc_execute_line+0xac8>)
 8002822:	6a1b      	ldr	r3, [r3, #32]
 8002824:	f8c9 303c 	str.w	r3, [r9, #60]	; 0x3c
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 8002828:	9b06      	ldr	r3, [sp, #24]
 800282a:	0758      	lsls	r0, r3, #29
 800282c:	f140 8210 	bpl.w	8002c50 <gc_execute_line+0xe80>
              if (gc_block.non_modal_command != NON_MODAL_ABSOLUTE_OVERRIDE) {
 8002830:	2d35      	cmp	r5, #53	; 0x35
 8002832:	f040 8177 	bne.w	8002b24 <gc_execute_line+0xd54>
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 8002836:	9b06      	ldr	r3, [sp, #24]
 8002838:	071a      	lsls	r2, r3, #28
 800283a:	f140 814c 	bpl.w	8002ad6 <gc_execute_line+0xd06>
          if (!(gc_block.modal.motion == MOTION_MODE_SEEK || gc_block.modal.motion == MOTION_MODE_LINEAR)) {
 800283e:	f899 5001 	ldrb.w	r5, [r9, #1]
 8002842:	2d01      	cmp	r5, #1
 8002844:	f200 8182 	bhi.w	8002b4c <gc_execute_line+0xd7c>
 8002848:	2300      	movs	r3, #0
 800284a:	930a      	str	r3, [sp, #40]	; 0x28
 800284c:	e49f      	b.n	800218e <gc_execute_line+0x3be>
          gc_block.values.xyz[idx] = gc_state.coord_offset[idx];
 800284e:	4b12      	ldr	r3, [pc, #72]	; (8002898 <gc_execute_line+0xac8>)
 8002850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002852:	f8c9 3038 	str.w	r3, [r9, #56]	; 0x38
 8002856:	e463      	b.n	8002120 <gc_execute_line+0x350>
    if (gc_block.modal.motion == MOTION_MODE_SEEK) {
 8002858:	b1ad      	cbz	r5, 8002886 <gc_execute_line+0xab6>
      if (gc_block.values.f == 0.0f) { FAIL(STATUS_GCODE_UNDEFINED_FEED_RATE); } // [Feed rate undefined]
 800285a:	2100      	movs	r1, #0
 800285c:	f8d9 000c 	ldr.w	r0, [r9, #12]
 8002860:	f7fe fbbe 	bl	8000fe0 <__aeabi_fcmpeq>
 8002864:	2800      	cmp	r0, #0
 8002866:	f47f aecf 	bne.w	8002608 <gc_execute_line+0x838>
      switch (gc_block.modal.motion) {
 800286a:	2d8c      	cmp	r5, #140	; 0x8c
 800286c:	f000 8385 	beq.w	8002f7a <gc_execute_line+0x11aa>
 8002870:	f200 8379 	bhi.w	8002f66 <gc_execute_line+0x1196>
 8002874:	2d02      	cmp	r5, #2
 8002876:	f000 82d3 	beq.w	8002e20 <gc_execute_line+0x1050>
 800287a:	2d03      	cmp	r5, #3
 800287c:	f000 82d4 	beq.w	8002e28 <gc_execute_line+0x1058>
 8002880:	2d01      	cmp	r5, #1
 8002882:	f47f ac88 	bne.w	8002196 <gc_execute_line+0x3c6>
          if (!axis_words) { axis_command = AXIS_COMMAND_NONE; }
 8002886:	9b06      	ldr	r3, [sp, #24]
 8002888:	2b00      	cmp	r3, #0
 800288a:	9b07      	ldr	r3, [sp, #28]
 800288c:	bf08      	it	eq
 800288e:	2300      	moveq	r3, #0
 8002890:	9307      	str	r3, [sp, #28]
 8002892:	e480      	b.n	8002196 <gc_execute_line+0x3c6>
 8002894:	41cb3333 	.word	0x41cb3333
 8002898:	2000136c 	.word	0x2000136c
 800289c:	200013cc 	.word	0x200013cc
  if (bit_istrue(settings.flags, BITFLAG_LASER_MODE)) {
 80028a0:	4bb7      	ldr	r3, [pc, #732]	; (8002b80 <gc_execute_line+0xdb0>)
 80028a2:	4ab8      	ldr	r2, [pc, #736]	; (8002b84 <gc_execute_line+0xdb4>)
 80028a4:	f893 5058 	ldrb.w	r5, [r3, #88]	; 0x58
 80028a8:	7a54      	ldrb	r4, [r2, #9]
 80028aa:	f015 0502 	ands.w	r5, r5, #2
 80028ae:	d014      	beq.n	80028da <gc_execute_line+0xb0a>
      if (!((gc_block.modal.motion == MOTION_MODE_LINEAR) || (gc_block.modal.motion == MOTION_MODE_CW_ARC)
 80028b0:	f899 3001 	ldrb.w	r3, [r9, #1]
 80028b4:	3b01      	subs	r3, #1
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d903      	bls.n	80028c2 <gc_execute_line+0xaf2>
          gc_parser_flags |= GC_PARSER_LASER_DISABLE;
 80028ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80028bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028c0:	9309      	str	r3, [sp, #36]	; 0x24
      if (axis_words && (axis_command == AXIS_COMMAND_MOTION_MODE)) {
 80028c2:	9b06      	ldr	r3, [sp, #24]
 80028c4:	b11b      	cbz	r3, 80028ce <gc_execute_line+0xafe>
 80028c6:	9b07      	ldr	r3, [sp, #28]
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	f000 8279 	beq.w	8002dc0 <gc_execute_line+0xff0>
 80028ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
        if (gc_state.modal.spindle == SPINDLE_ENABLE_CW) {
 80028d0:	2c10      	cmp	r4, #16
 80028d2:	f003 0540 	and.w	r5, r3, #64	; 0x40
 80028d6:	f000 8365 	beq.w	8002fa4 <gc_execute_line+0x11d4>
  gc_state.line_number = gc_block.values.n;
 80028da:	49aa      	ldr	r1, [pc, #680]	; (8002b84 <gc_execute_line+0xdb4>)
 80028dc:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
  gc_state.modal.feed_rate = gc_block.modal.feed_rate;
 80028e0:	f899 3002 	ldrb.w	r3, [r9, #2]
  gc_state.line_number = gc_block.values.n;
 80028e4:	618a      	str	r2, [r1, #24]
  gc_state.modal.feed_rate = gc_block.modal.feed_rate;
 80028e6:	704b      	strb	r3, [r1, #1]
  if (gc_state.modal.feed_rate) { pl_data->condition |= PL_COND_FLAG_INVERSE_TIME; } // Set condition flag for planner use.
 80028e8:	b113      	cbz	r3, 80028f0 <gc_execute_line+0xb20>
 80028ea:	2308      	movs	r3, #8
 80028ec:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
  gc_state.feed_rate = gc_block.values.f; // Always copy this value. See feed rate error-checking.
 80028f0:	f8d9 300c 	ldr.w	r3, [r9, #12]
  if ((gc_state.spindle_speed != gc_block.values.s) || bit_istrue(gc_parser_flags, GC_PARSER_LASER_FORCE_SYNC)) {
 80028f4:	4aa3      	ldr	r2, [pc, #652]	; (8002b84 <gc_execute_line+0xdb4>)
 80028f6:	f8d9 6030 	ldr.w	r6, [r9, #48]	; 0x30
 80028fa:	68d0      	ldr	r0, [r2, #12]
 80028fc:	4631      	mov	r1, r6
  gc_state.feed_rate = gc_block.values.f; // Always copy this value. See feed rate error-checking.
 80028fe:	6113      	str	r3, [r2, #16]
  pl_data->feed_rate = gc_state.feed_rate; // Record data for planner use.
 8002900:	9315      	str	r3, [sp, #84]	; 0x54
  if ((gc_state.spindle_speed != gc_block.values.s) || bit_istrue(gc_parser_flags, GC_PARSER_LASER_FORCE_SYNC)) {
 8002902:	f7fe fb6d 	bl	8000fe0 <__aeabi_fcmpeq>
 8002906:	2800      	cmp	r0, #0
 8002908:	f000 80a7 	beq.w	8002a5a <gc_execute_line+0xc8a>
 800290c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800290e:	069b      	lsls	r3, r3, #26
 8002910:	f100 80a3 	bmi.w	8002a5a <gc_execute_line+0xc8a>
  if (bit_isfalse(gc_parser_flags, GC_PARSER_LASER_DISABLE)) {
 8002914:	b905      	cbnz	r5, 8002918 <gc_execute_line+0xb48>
      pl_data->spindle_speed = gc_state.spindle_speed; // Record data for planner use. 
 8002916:	9616      	str	r6, [sp, #88]	; 0x58
  if (gc_state.modal.spindle != gc_block.modal.spindle) {
 8002918:	f899 000a 	ldrb.w	r0, [r9, #10]
  gc_state.tool = gc_block.values.t;
 800291c:	f899 3034 	ldrb.w	r3, [r9, #52]	; 0x34
 8002920:	4d98      	ldr	r5, [pc, #608]	; (8002b84 <gc_execute_line+0xdb4>)
  if (gc_state.modal.spindle != gc_block.modal.spindle) {
 8002922:	42a0      	cmp	r0, r4
  gc_state.tool = gc_block.values.t;
 8002924:	752b      	strb	r3, [r5, #20]
  if (gc_state.modal.spindle != gc_block.modal.spindle) {
 8002926:	d005      	beq.n	8002934 <gc_execute_line+0xb64>
    spindle_sync(gc_block.modal.spindle, pl_data->spindle_speed);
 8002928:	9916      	ldr	r1, [sp, #88]	; 0x58
 800292a:	f005 fcb1 	bl	8008290 <spindle_sync>
    gc_state.modal.spindle = gc_block.modal.spindle;
 800292e:	f899 400a 	ldrb.w	r4, [r9, #10]
 8002932:	726c      	strb	r4, [r5, #9]
  if (gc_state.modal.coolant != gc_block.modal.coolant) {
 8002934:	4d93      	ldr	r5, [pc, #588]	; (8002b84 <gc_execute_line+0xdb4>)
  pl_data->condition |= gc_state.modal.spindle; // Set condition flag for planner use.
 8002936:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
  if (gc_state.modal.coolant != gc_block.modal.coolant) {
 800293a:	f899 0009 	ldrb.w	r0, [r9, #9]
 800293e:	7a2b      	ldrb	r3, [r5, #8]
  pl_data->condition |= gc_state.modal.spindle; // Set condition flag for planner use.
 8002940:	4314      	orrs	r4, r2
  if (gc_state.modal.coolant != gc_block.modal.coolant) {
 8002942:	4283      	cmp	r3, r0
  pl_data->condition |= gc_state.modal.spindle; // Set condition flag for planner use.
 8002944:	f88d 405c 	strb.w	r4, [sp, #92]	; 0x5c
  if (gc_state.modal.coolant != gc_block.modal.coolant) {
 8002948:	d009      	beq.n	800295e <gc_execute_line+0xb8e>
    coolant_sync(gc_block.modal.coolant);
 800294a:	f7ff f95b 	bl	8001c04 <coolant_sync>
    if (gc_block.modal.coolant == COOLANT_DISABLE) { gc_state.modal.coolant = COOLANT_DISABLE; }
 800294e:	f899 0009 	ldrb.w	r0, [r9, #9]
 8002952:	2800      	cmp	r0, #0
 8002954:	f040 816d 	bne.w	8002c32 <gc_execute_line+0xe62>
 8002958:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
 800295c:	7228      	strb	r0, [r5, #8]
  if (gc_block.non_modal_command == NON_MODAL_DWELL) { mc_dwell(gc_block.values.p); }
 800295e:	f899 3000 	ldrb.w	r3, [r9]
  pl_data->condition |= gc_state.modal.coolant; // Set condition flag for planner use.
 8002962:	4304      	orrs	r4, r0
  if (gc_block.non_modal_command == NON_MODAL_DWELL) { mc_dwell(gc_block.values.p); }
 8002964:	2b04      	cmp	r3, #4
  pl_data->condition |= gc_state.modal.coolant; // Set condition flag for planner use.
 8002966:	f88d 405c 	strb.w	r4, [sp, #92]	; 0x5c
  if (gc_block.non_modal_command == NON_MODAL_DWELL) { mc_dwell(gc_block.values.p); }
 800296a:	f000 8230 	beq.w	8002dce <gc_execute_line+0xffe>
  if (gc_block.non_modal_command == NON_MODAL_G100) {
 800296e:	2b64      	cmp	r3, #100	; 0x64
 8002970:	f000 81c3 	beq.w	8002cfa <gc_execute_line+0xf2a>
  if (gc_block.non_modal_command == NON_MODAL_G101) {
 8002974:	2b65      	cmp	r3, #101	; 0x65
 8002976:	f000 81b2 	beq.w	8002cde <gc_execute_line+0xf0e>
  gc_state.modal.units = gc_block.modal.units;
 800297a:	f899 3003 	ldrb.w	r3, [r9, #3]
  gc_state.modal.plane_select = gc_block.modal.plane_select;
 800297e:	4981      	ldr	r1, [pc, #516]	; (8002b84 <gc_execute_line+0xdb4>)
 8002980:	f899 2005 	ldrb.w	r2, [r9, #5]
  gc_state.modal.units = gc_block.modal.units;
 8002984:	708b      	strb	r3, [r1, #2]
  if (axis_command == AXIS_COMMAND_TOOL_LENGTH_OFFSET ) { // Indicates a change.
 8002986:	9b07      	ldr	r3, [sp, #28]
  gc_state.modal.plane_select = gc_block.modal.plane_select;
 8002988:	710a      	strb	r2, [r1, #4]
  if (axis_command == AXIS_COMMAND_TOOL_LENGTH_OFFSET ) { // Indicates a change.
 800298a:	2b03      	cmp	r3, #3
 800298c:	f000 8120 	beq.w	8002bd0 <gc_execute_line+0xe00>
  if (gc_state.modal.coord_select != gc_block.modal.coord_select) {
 8002990:	4d7c      	ldr	r5, [pc, #496]	; (8002b84 <gc_execute_line+0xdb4>)
 8002992:	f899 4007 	ldrb.w	r4, [r9, #7]
 8002996:	79ab      	ldrb	r3, [r5, #6]
 8002998:	42a3      	cmp	r3, r4
 800299a:	d006      	beq.n	80029aa <gc_execute_line+0xbda>
    memcpy(gc_state.coord_system,block_coord_system,N_AXIS*sizeof(float));
 800299c:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
 80029a0:	e88b 000f 	stmia.w	fp, {r0, r1, r2, r3}
    gc_state.modal.coord_select = gc_block.modal.coord_select;
 80029a4:	71ac      	strb	r4, [r5, #6]
    system_flag_wco_change();
 80029a6:	f007 f92f 	bl	8009c08 <system_flag_wco_change>
  switch(gc_block.non_modal_command) {
 80029aa:	f899 3000 	ldrb.w	r3, [r9]
  gc_state.modal.distance = gc_block.modal.distance;
 80029ae:	f899 2004 	ldrb.w	r2, [r9, #4]
 80029b2:	4974      	ldr	r1, [pc, #464]	; (8002b84 <gc_execute_line+0xdb4>)
  switch(gc_block.non_modal_command) {
 80029b4:	2b26      	cmp	r3, #38	; 0x26
  gc_state.modal.distance = gc_block.modal.distance;
 80029b6:	70ca      	strb	r2, [r1, #3]
  switch(gc_block.non_modal_command) {
 80029b8:	f000 81c0 	beq.w	8002d3c <gc_execute_line+0xf6c>
 80029bc:	f240 811e 	bls.w	8002bfc <gc_execute_line+0xe2c>
 80029c0:	2b5c      	cmp	r3, #92	; 0x5c
 80029c2:	f000 81cb 	beq.w	8002d5c <gc_execute_line+0xf8c>
 80029c6:	2b66      	cmp	r3, #102	; 0x66
 80029c8:	f000 81bd 	beq.w	8002d46 <gc_execute_line+0xf76>
 80029cc:	2b28      	cmp	r3, #40	; 0x28
 80029ce:	d103      	bne.n	80029d8 <gc_execute_line+0xc08>
      settings_write_coord_data(SETTING_INDEX_G30,gc_state.position);
 80029d0:	496d      	ldr	r1, [pc, #436]	; (8002b88 <gc_execute_line+0xdb8>)
 80029d2:	2007      	movs	r0, #7
 80029d4:	f004 ffda 	bl	800798c <settings_write_coord_data>
  gc_state.modal.motion = gc_block.modal.motion;
 80029d8:	f899 3001 	ldrb.w	r3, [r9, #1]
 80029dc:	4a69      	ldr	r2, [pc, #420]	; (8002b84 <gc_execute_line+0xdb4>)
  if (gc_state.modal.motion != MOTION_MODE_NONE) {
 80029de:	2b50      	cmp	r3, #80	; 0x50
  gc_state.modal.motion = gc_block.modal.motion;
 80029e0:	7013      	strb	r3, [r2, #0]
  if (gc_state.modal.motion != MOTION_MODE_NONE) {
 80029e2:	d003      	beq.n	80029ec <gc_execute_line+0xc1c>
    if (axis_command == AXIS_COMMAND_MOTION_MODE) {
 80029e4:	9a07      	ldr	r2, [sp, #28]
 80029e6:	2a02      	cmp	r2, #2
 80029e8:	f000 81c0 	beq.w	8002d6c <gc_execute_line+0xf9c>
  gc_state.modal.program_flow = gc_block.modal.program_flow;
 80029ec:	f899 4008 	ldrb.w	r4, [r9, #8]
 80029f0:	4b64      	ldr	r3, [pc, #400]	; (8002b84 <gc_execute_line+0xdb4>)
 80029f2:	71dc      	strb	r4, [r3, #7]
  if (gc_state.modal.program_flow) {
 80029f4:	2c00      	cmp	r4, #0
 80029f6:	f43f ac38 	beq.w	800226a <gc_execute_line+0x49a>
    protocol_buffer_synchronize(); // Sync and finish all remaining buffered motions before moving on.
 80029fa:	f003 fbc5 	bl	8006188 <protocol_buffer_synchronize>
    if (gc_state.modal.program_flow == PROGRAM_FLOW_PAUSED) {
 80029fe:	4b61      	ldr	r3, [pc, #388]	; (8002b84 <gc_execute_line+0xdb4>)
 8002a00:	79db      	ldrb	r3, [r3, #7]
 8002a02:	2b03      	cmp	r3, #3
 8002a04:	f000 81d1 	beq.w	8002daa <gc_execute_line+0xfda>
      gc_state.modal.motion = MOTION_MODE_LINEAR;
 8002a08:	2201      	movs	r2, #1
      gc_state.modal.plane_select = PLANE_SELECT_XY;
 8002a0a:	2400      	movs	r4, #0
        sys.f_override = DEFAULT_FEED_OVERRIDE;
 8002a0c:	f246 4064 	movw	r0, #25700	; 0x6464
        sys.r_override = DEFAULT_RAPID_OVERRIDE;
 8002a10:	2164      	movs	r1, #100	; 0x64
      gc_state.modal.plane_select = PLANE_SELECT_XY;
 8002a12:	4d5c      	ldr	r5, [pc, #368]	; (8002b84 <gc_execute_line+0xdb4>)
        sys.f_override = DEFAULT_FEED_OVERRIDE;
 8002a14:	4b5d      	ldr	r3, [pc, #372]	; (8002b8c <gc_execute_line+0xdbc>)
      gc_state.modal.motion = MOTION_MODE_LINEAR;
 8002a16:	802a      	strh	r2, [r5, #0]
      if (sys.state != STATE_CHECK_MODE) {
 8002a18:	781a      	ldrb	r2, [r3, #0]
      gc_state.modal.plane_select = PLANE_SELECT_XY;
 8002a1a:	712c      	strb	r4, [r5, #4]
      if (sys.state != STATE_CHECK_MODE) {
 8002a1c:	2a02      	cmp	r2, #2
      gc_state.modal.distance = DISTANCE_MODE_ABSOLUTE;
 8002a1e:	70ec      	strb	r4, [r5, #3]
      gc_state.modal.coord_select = 0; // G54
 8002a20:	71ac      	strb	r4, [r5, #6]
      gc_state.modal.coolant = COOLANT_DISABLE;
 8002a22:	812c      	strh	r4, [r5, #8]
        sys.f_override = DEFAULT_FEED_OVERRIDE;
 8002a24:	8118      	strh	r0, [r3, #8]
        sys.r_override = DEFAULT_RAPID_OVERRIDE;
 8002a26:	7299      	strb	r1, [r3, #10]
      if (sys.state != STATE_CHECK_MODE) {
 8002a28:	d010      	beq.n	8002a4c <gc_execute_line+0xc7c>
        if (!(settings_read_coord_data(gc_state.modal.coord_select,gc_state.coord_system))) { FAIL(STATUS_SETTING_READ_FAIL); }
 8002a2a:	f105 012c 	add.w	r1, r5, #44	; 0x2c
 8002a2e:	4620      	mov	r0, r4
 8002a30:	f005 f884 	bl	8007b3c <settings_read_coord_data>
 8002a34:	2800      	cmp	r0, #0
 8002a36:	f43f aedd 	beq.w	80027f4 <gc_execute_line+0xa24>
        system_flag_wco_change(); // Set to refresh immediately just in case something altered.
 8002a3a:	f007 f8e5 	bl	8009c08 <system_flag_wco_change>
        spindle_set_state(SPINDLE_DISABLE,0.0f);
 8002a3e:	4620      	mov	r0, r4
 8002a40:	2100      	movs	r1, #0
 8002a42:	f005 fb99 	bl	8008178 <spindle_set_state>
        coolant_set_state(COOLANT_DISABLE);
 8002a46:	4620      	mov	r0, r4
 8002a48:	f7ff f8b8 	bl	8001bbc <coolant_set_state>
      report_feedback_message(MESSAGE_PROGRAM_END);
 8002a4c:	2008      	movs	r0, #8
 8002a4e:	f003 fea9 	bl	80067a4 <report_feedback_message>
    gc_state.modal.program_flow = PROGRAM_FLOW_RUNNING; // Reset program flow.
 8002a52:	2400      	movs	r4, #0
 8002a54:	4b4b      	ldr	r3, [pc, #300]	; (8002b84 <gc_execute_line+0xdb4>)
 8002a56:	71dc      	strb	r4, [r3, #7]
 8002a58:	e407      	b.n	800226a <gc_execute_line+0x49a>
      if (gc_state.modal.spindle != SPINDLE_DISABLE) {
 8002a5a:	b16c      	cbz	r4, 8002a78 <gc_execute_line+0xca8>
        if (bit_isfalse(gc_parser_flags, GC_PARSER_LASER_ISMOTION)) {
 8002a5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a5e:	061f      	lsls	r7, r3, #24
 8002a60:	d40a      	bmi.n	8002a78 <gc_execute_line+0xca8>
          if (bit_istrue(gc_parser_flags, GC_PARSER_LASER_DISABLE)) {
 8002a62:	2d00      	cmp	r5, #0
 8002a64:	f000 82ac 	beq.w	8002fc0 <gc_execute_line+0x11f0>
            spindle_sync(gc_state.modal.spindle, 0.0);
 8002a68:	4620      	mov	r0, r4
 8002a6a:	2100      	movs	r1, #0
 8002a6c:	f005 fc10 	bl	8008290 <spindle_sync>
 8002a70:	4b44      	ldr	r3, [pc, #272]	; (8002b84 <gc_execute_line+0xdb4>)
 8002a72:	f8d9 6030 	ldr.w	r6, [r9, #48]	; 0x30
 8002a76:	7a5c      	ldrb	r4, [r3, #9]
      gc_state.spindle_speed = gc_block.values.s; // Update spindle speed state.
 8002a78:	4b42      	ldr	r3, [pc, #264]	; (8002b84 <gc_execute_line+0xdb4>)
 8002a7a:	60de      	str	r6, [r3, #12]
 8002a7c:	e74a      	b.n	8002914 <gc_execute_line+0xb44>
          gc_block.values.xyz[idx] = gc_state.coord_offset[idx];
 8002a7e:	4b41      	ldr	r3, [pc, #260]	; (8002b84 <gc_execute_line+0xdb4>)
 8002a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a82:	f8c9 303c 	str.w	r3, [r9, #60]	; 0x3c
 8002a86:	f7ff bb5a 	b.w	800213e <gc_execute_line+0x36e>
				if (value > MAX_TOOL_NUMBER) { FAIL(STATUS_GCODE_MAX_VALUE_EXCEEDED); }
 8002a8a:	2426      	movs	r4, #38	; 0x26
 8002a8c:	f7ff bbed 	b.w	800226a <gc_execute_line+0x49a>
            if (!settings_read_coord_data(SETTING_INDEX_G30,gc_block.values.ijk)) { FAIL(STATUS_SETTING_READ_FAIL); }
 8002a90:	493f      	ldr	r1, [pc, #252]	; (8002b90 <gc_execute_line+0xdc0>)
 8002a92:	2007      	movs	r0, #7
 8002a94:	f005 f852 	bl	8007b3c <settings_read_coord_data>
 8002a98:	2800      	cmp	r0, #0
 8002a9a:	f43f aeab 	beq.w	80027f4 <gc_execute_line+0xa24>
          if (axis_words) {
 8002a9e:	9b06      	ldr	r3, [sp, #24]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d177      	bne.n	8002b94 <gc_execute_line+0xdc4>
  uint8_t coord_select = 0; // Tracks G10 P coordinate selection for execution
 8002aa4:	930a      	str	r3, [sp, #40]	; 0x28
            axis_command = AXIS_COMMAND_NONE; // Set to none if no intermediate motion.
 8002aa6:	9307      	str	r3, [sp, #28]
 8002aa8:	f7ff bb75 	b.w	8002196 <gc_execute_line+0x3c6>
              if (gc_block.non_modal_command != NON_MODAL_ABSOLUTE_OVERRIDE) {
 8002aac:	2d35      	cmp	r5, #53	; 0x35
 8002aae:	f43f ae3c 	beq.w	800272a <gc_execute_line+0x95a>
                  gc_block.values.xyz[idx] += block_coord_system[idx] + gc_state.coord_offset[idx];
 8002ab2:	f8d9 1040 	ldr.w	r1, [r9, #64]	; 0x40
 8002ab6:	981a      	ldr	r0, [sp, #104]	; 0x68
 8002ab8:	f7fd fff6 	bl	8000aa8 <__addsf3>
 8002abc:	4b31      	ldr	r3, [pc, #196]	; (8002b84 <gc_execute_line+0xdb4>)
 8002abe:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002ac0:	f7fd fff2 	bl	8000aa8 <__addsf3>
                  if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.xyz[idx] += gc_state.tool_length_offset; }
 8002ac4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002ac6:	f7fd ffef 	bl	8000aa8 <__addsf3>
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 8002aca:	9b06      	ldr	r3, [sp, #24]
                  if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.xyz[idx] += gc_state.tool_length_offset; }
 8002acc:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 8002ad0:	0718      	lsls	r0, r3, #28
 8002ad2:	f53f ae30 	bmi.w	8002736 <gc_execute_line+0x966>
              gc_block.values.xyz[idx] = gc_state.position[idx]; // No axis word in block. Keep same axis position.
 8002ad6:	4b2b      	ldr	r3, [pc, #172]	; (8002b84 <gc_execute_line+0xdb4>)
 8002ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ada:	f8c9 3044 	str.w	r3, [r9, #68]	; 0x44
 8002ade:	e635      	b.n	800274c <gc_execute_line+0x97c>
    if (axis_words) { FAIL(STATUS_GCODE_AXIS_WORDS_EXIST); } // [No axis words allowed]
 8002ae0:	241f      	movs	r4, #31
 8002ae2:	f7ff bbc2 	b.w	800226a <gc_execute_line+0x49a>
          gc_block.values.xyz[idx] = gc_state.coord_offset[idx];
 8002ae6:	4b27      	ldr	r3, [pc, #156]	; (8002b84 <gc_execute_line+0xdb4>)
 8002ae8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aea:	f8c9 3044 	str.w	r3, [r9, #68]	; 0x44
 8002aee:	f7ff bb47 	b.w	8002180 <gc_execute_line+0x3b0>
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 8002af2:	07d1      	lsls	r1, r2, #31
 8002af4:	f53f ae85 	bmi.w	8002802 <gc_execute_line+0xa32>
              gc_block.values.xyz[idx] = gc_state.position[idx]; // No axis word in block. Keep same axis position.
 8002af8:	4b22      	ldr	r3, [pc, #136]	; (8002b84 <gc_execute_line+0xdb4>)
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 8002afa:	0792      	lsls	r2, r2, #30
              gc_block.values.xyz[idx] = gc_state.position[idx]; // No axis word in block. Keep same axis position.
 8002afc:	69db      	ldr	r3, [r3, #28]
 8002afe:	f8c9 3038 	str.w	r3, [r9, #56]	; 0x38
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 8002b02:	f57f ae8d 	bpl.w	8002820 <gc_execute_line+0xa50>
              if (gc_block.non_modal_command != NON_MODAL_ABSOLUTE_OVERRIDE) {
 8002b06:	2d35      	cmp	r5, #53	; 0x35
 8002b08:	f000 809e 	beq.w	8002c48 <gc_execute_line+0xe78>
                  gc_block.values.xyz[idx] += gc_state.position[idx];
 8002b0c:	4b1d      	ldr	r3, [pc, #116]	; (8002b84 <gc_execute_line+0xdb4>)
 8002b0e:	f8d9 103c 	ldr.w	r1, [r9, #60]	; 0x3c
 8002b12:	6a18      	ldr	r0, [r3, #32]
 8002b14:	f7fd ffc8 	bl	8000aa8 <__addsf3>
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 8002b18:	9b06      	ldr	r3, [sp, #24]
                  gc_block.values.xyz[idx] += gc_state.position[idx];
 8002b1a:	f8c9 003c 	str.w	r0, [r9, #60]	; 0x3c
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 8002b1e:	0759      	lsls	r1, r3, #29
 8002b20:	f140 8096 	bpl.w	8002c50 <gc_execute_line+0xe80>
                  gc_block.values.xyz[idx] += gc_state.position[idx];
 8002b24:	4b17      	ldr	r3, [pc, #92]	; (8002b84 <gc_execute_line+0xdb4>)
 8002b26:	f8d9 1040 	ldr.w	r1, [r9, #64]	; 0x40
 8002b2a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002b2c:	f7fd ffbc 	bl	8000aa8 <__addsf3>
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 8002b30:	9b06      	ldr	r3, [sp, #24]
                  gc_block.values.xyz[idx] += gc_state.position[idx];
 8002b32:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 8002b36:	071b      	lsls	r3, r3, #28
 8002b38:	d5cd      	bpl.n	8002ad6 <gc_execute_line+0xd06>
                  gc_block.values.xyz[idx] += gc_state.position[idx];
 8002b3a:	4b12      	ldr	r3, [pc, #72]	; (8002b84 <gc_execute_line+0xdb4>)
 8002b3c:	f8d9 1044 	ldr.w	r1, [r9, #68]	; 0x44
 8002b40:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002b42:	f7fd ffb1 	bl	8000aa8 <__addsf3>
 8002b46:	f8c9 0044 	str.w	r0, [r9, #68]	; 0x44
 8002b4a:	e5ff      	b.n	800274c <gc_execute_line+0x97c>
            FAIL(STATUS_GCODE_G53_INVALID_MOTION_MODE); // [G53 G0/1 not active]
 8002b4c:	241e      	movs	r4, #30
 8002b4e:	f7ff bb8c 	b.w	800226a <gc_execute_line+0x49a>
      if (command_words & ~(bit(MODAL_GROUP_G3) | bit(MODAL_GROUP_G6 | bit(MODAL_GROUP_G0)))) { FAIL(STATUS_INVALID_JOG_COMMAND) };
 8002b52:	2410      	movs	r4, #16
 8002b54:	f7ff bb89 	b.w	800226a <gc_execute_line+0x49a>
              if (gc_block.non_modal_command != NON_MODAL_ABSOLUTE_OVERRIDE) {
 8002b58:	2d35      	cmp	r5, #53	; 0x35
 8002b5a:	f43f add5 	beq.w	8002708 <gc_execute_line+0x938>
                  gc_block.values.xyz[idx] += block_coord_system[idx] + gc_state.coord_offset[idx];
 8002b5e:	f8d9 1038 	ldr.w	r1, [r9, #56]	; 0x38
 8002b62:	9818      	ldr	r0, [sp, #96]	; 0x60
 8002b64:	f7fd ffa0 	bl	8000aa8 <__addsf3>
 8002b68:	4b06      	ldr	r3, [pc, #24]	; (8002b84 <gc_execute_line+0xdb4>)
 8002b6a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002b6c:	f7fd ff9c 	bl	8000aa8 <__addsf3>
 8002b70:	f8c9 0038 	str.w	r0, [r9, #56]	; 0x38
 8002b74:	e5c8      	b.n	8002708 <gc_execute_line+0x938>
      else { coord_select = gc_block.modal.coord_select; } // Index P0 as the active coordinate system
 8002b76:	f899 3007 	ldrb.w	r3, [r9, #7]
 8002b7a:	930a      	str	r3, [sp, #40]	; 0x28
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	e5fd      	b.n	800277c <gc_execute_line+0x9ac>
 8002b80:	20001744 	.word	0x20001744
 8002b84:	2000136c 	.word	0x2000136c
 8002b88:	20001388 	.word	0x20001388
 8002b8c:	20001408 	.word	0x20001408
 8002b90:	200013cc 	.word	0x200013cc
              if (!(axis_words & (1<<idx))) { gc_block.values.ijk[idx] = gc_state.position[idx]; }
 8002b94:	07dd      	lsls	r5, r3, #31
 8002b96:	d404      	bmi.n	8002ba2 <gc_execute_line+0xdd2>
 8002b98:	4b9b      	ldr	r3, [pc, #620]	; (8002e08 <gc_execute_line+0x1038>)
 8002b9a:	69db      	ldr	r3, [r3, #28]
 8002b9c:	f8c9 3010 	str.w	r3, [r9, #16]
 8002ba0:	9b06      	ldr	r3, [sp, #24]
 8002ba2:	0798      	lsls	r0, r3, #30
 8002ba4:	d404      	bmi.n	8002bb0 <gc_execute_line+0xde0>
 8002ba6:	4b98      	ldr	r3, [pc, #608]	; (8002e08 <gc_execute_line+0x1038>)
 8002ba8:	6a1b      	ldr	r3, [r3, #32]
 8002baa:	f8c9 3014 	str.w	r3, [r9, #20]
 8002bae:	9b06      	ldr	r3, [sp, #24]
 8002bb0:	0759      	lsls	r1, r3, #29
 8002bb2:	d404      	bmi.n	8002bbe <gc_execute_line+0xdee>
 8002bb4:	4b94      	ldr	r3, [pc, #592]	; (8002e08 <gc_execute_line+0x1038>)
 8002bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb8:	f8c9 3018 	str.w	r3, [r9, #24]
 8002bbc:	9b06      	ldr	r3, [sp, #24]
 8002bbe:	071a      	lsls	r2, r3, #28
 8002bc0:	f53f aade 	bmi.w	8002180 <gc_execute_line+0x3b0>
 8002bc4:	4b90      	ldr	r3, [pc, #576]	; (8002e08 <gc_execute_line+0x1038>)
 8002bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc8:	f8c9 301c 	str.w	r3, [r9, #28]
 8002bcc:	f7ff bad8 	b.w	8002180 <gc_execute_line+0x3b0>
    gc_state.modal.tool_length = gc_block.modal.tool_length;
 8002bd0:	f899 3006 	ldrb.w	r3, [r9, #6]
 8002bd4:	714b      	strb	r3, [r1, #5]
    if (gc_state.modal.tool_length == TOOL_LENGTH_OFFSET_CANCEL) { // G49
 8002bd6:	b913      	cbnz	r3, 8002bde <gc_execute_line+0xe0e>
      gc_block.values.xyz[TOOL_LENGTH_OFFSET_AXIS] = 0.0f;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
    if ( gc_state.tool_length_offset != gc_block.values.xyz[TOOL_LENGTH_OFFSET_AXIS] ) {
 8002bde:	f8d9 4040 	ldr.w	r4, [r9, #64]	; 0x40
 8002be2:	4b89      	ldr	r3, [pc, #548]	; (8002e08 <gc_execute_line+0x1038>)
 8002be4:	4621      	mov	r1, r4
 8002be6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002be8:	f7fe f9fa 	bl	8000fe0 <__aeabi_fcmpeq>
 8002bec:	2800      	cmp	r0, #0
 8002bee:	f47f aecf 	bne.w	8002990 <gc_execute_line+0xbc0>
      gc_state.tool_length_offset = gc_block.values.xyz[TOOL_LENGTH_OFFSET_AXIS];
 8002bf2:	4b85      	ldr	r3, [pc, #532]	; (8002e08 <gc_execute_line+0x1038>)
 8002bf4:	64dc      	str	r4, [r3, #76]	; 0x4c
      system_flag_wco_change();
 8002bf6:	f007 f807 	bl	8009c08 <system_flag_wco_change>
 8002bfa:	e6c9      	b.n	8002990 <gc_execute_line+0xbc0>
  switch(gc_block.non_modal_command) {
 8002bfc:	2b1c      	cmp	r3, #28
 8002bfe:	f000 80ed 	beq.w	8002ddc <gc_execute_line+0x100c>
 8002c02:	2b1e      	cmp	r3, #30
 8002c04:	f000 80ea 	beq.w	8002ddc <gc_execute_line+0x100c>
 8002c08:	2b0a      	cmp	r3, #10
 8002c0a:	f47f aee5 	bne.w	80029d8 <gc_execute_line+0xc08>
      settings_write_coord_data(coord_select,gc_block.values.ijk);
 8002c0e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8002c10:	4c7e      	ldr	r4, [pc, #504]	; (8002e0c <gc_execute_line+0x103c>)
 8002c12:	4628      	mov	r0, r5
 8002c14:	4621      	mov	r1, r4
 8002c16:	f004 feb9 	bl	800798c <settings_write_coord_data>
      if (gc_state.modal.coord_select == coord_select) {
 8002c1a:	4b7b      	ldr	r3, [pc, #492]	; (8002e08 <gc_execute_line+0x1038>)
 8002c1c:	799b      	ldrb	r3, [r3, #6]
 8002c1e:	42ab      	cmp	r3, r5
 8002c20:	f47f aeda 	bne.w	80029d8 <gc_execute_line+0xc08>
        memcpy(gc_state.coord_system,gc_block.values.ijk,N_AXIS*sizeof(float));
 8002c24:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002c28:	e88b 000f 	stmia.w	fp, {r0, r1, r2, r3}
        system_flag_wco_change();
 8002c2c:	f006 ffec 	bl	8009c08 <system_flag_wco_change>
 8002c30:	e6d2      	b.n	80029d8 <gc_execute_line+0xc08>
    else { gc_state.modal.coolant |= gc_block.modal.coolant; }
 8002c32:	4a75      	ldr	r2, [pc, #468]	; (8002e08 <gc_execute_line+0x1038>)
 8002c34:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
 8002c38:	7a13      	ldrb	r3, [r2, #8]
 8002c3a:	4318      	orrs	r0, r3
 8002c3c:	7210      	strb	r0, [r2, #8]
 8002c3e:	e68e      	b.n	800295e <gc_execute_line+0xb8e>
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 8002c40:	9b06      	ldr	r3, [sp, #24]
 8002c42:	0799      	lsls	r1, r3, #30
 8002c44:	f57f adec 	bpl.w	8002820 <gc_execute_line+0xa50>
 8002c48:	9b06      	ldr	r3, [sp, #24]
 8002c4a:	075b      	lsls	r3, r3, #29
 8002c4c:	f53f adf3 	bmi.w	8002836 <gc_execute_line+0xa66>
              gc_block.values.xyz[idx] = gc_state.position[idx]; // No axis word in block. Keep same axis position.
 8002c50:	4b6d      	ldr	r3, [pc, #436]	; (8002e08 <gc_execute_line+0x1038>)
 8002c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c54:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 8002c58:	9b06      	ldr	r3, [sp, #24]
 8002c5a:	071a      	lsls	r2, r3, #28
 8002c5c:	f57f af3b 	bpl.w	8002ad6 <gc_execute_line+0xd06>
              if (gc_block.non_modal_command != NON_MODAL_ABSOLUTE_OVERRIDE) {
 8002c60:	2d35      	cmp	r5, #53	; 0x35
 8002c62:	f47f af6a 	bne.w	8002b3a <gc_execute_line+0xd6a>
 8002c66:	e5ea      	b.n	800283e <gc_execute_line+0xa6e>
        if (bit_istrue(axis_words,bit(idx)) ) {
 8002c68:	07d9      	lsls	r1, r3, #31
 8002c6a:	d509      	bpl.n	8002c80 <gc_execute_line+0xeb0>
            gc_block.values.ijk[idx] = gc_state.position[idx]-gc_state.coord_offset[idx]-gc_block.values.xyz[idx];
 8002c6c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002c6e:	69d0      	ldr	r0, [r2, #28]
 8002c70:	f7fd ff18 	bl	8000aa4 <__aeabi_fsub>
 8002c74:	f8d9 1038 	ldr.w	r1, [r9, #56]	; 0x38
 8002c78:	f7fd ff14 	bl	8000aa4 <__aeabi_fsub>
 8002c7c:	f8c9 0010 	str.w	r0, [r9, #16]
        if (bit_istrue(axis_words,bit(idx)) ) {
 8002c80:	9b06      	ldr	r3, [sp, #24]
 8002c82:	079b      	lsls	r3, r3, #30
 8002c84:	d50a      	bpl.n	8002c9c <gc_execute_line+0xecc>
            gc_block.values.ijk[idx] = gc_state.position[idx]-gc_state.coord_offset[idx]-gc_block.values.xyz[idx];
 8002c86:	4b60      	ldr	r3, [pc, #384]	; (8002e08 <gc_execute_line+0x1038>)
 8002c88:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002c8a:	6a18      	ldr	r0, [r3, #32]
 8002c8c:	f7fd ff0a 	bl	8000aa4 <__aeabi_fsub>
 8002c90:	f8d9 103c 	ldr.w	r1, [r9, #60]	; 0x3c
 8002c94:	f7fd ff06 	bl	8000aa4 <__aeabi_fsub>
 8002c98:	f8c9 0014 	str.w	r0, [r9, #20]
        if (bit_istrue(axis_words,bit(idx)) ) {
 8002c9c:	9b06      	ldr	r3, [sp, #24]
 8002c9e:	0758      	lsls	r0, r3, #29
 8002ca0:	d50d      	bpl.n	8002cbe <gc_execute_line+0xeee>
            gc_block.values.ijk[idx] = gc_state.position[idx]-gc_state.coord_offset[idx]-gc_block.values.xyz[idx];
 8002ca2:	4b59      	ldr	r3, [pc, #356]	; (8002e08 <gc_execute_line+0x1038>)
 8002ca4:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002ca6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002ca8:	f7fd fefc 	bl	8000aa4 <__aeabi_fsub>
 8002cac:	f8d9 1040 	ldr.w	r1, [r9, #64]	; 0x40
 8002cb0:	f7fd fef8 	bl	8000aa4 <__aeabi_fsub>
            if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.ijk[idx] -= gc_state.tool_length_offset; }
 8002cb4:	4629      	mov	r1, r5
 8002cb6:	f7fd fef5 	bl	8000aa4 <__aeabi_fsub>
 8002cba:	f8c9 0018 	str.w	r0, [r9, #24]
        if (bit_istrue(axis_words,bit(idx)) ) {
 8002cbe:	9b06      	ldr	r3, [sp, #24]
 8002cc0:	0719      	lsls	r1, r3, #28
 8002cc2:	f57f ad83 	bpl.w	80027cc <gc_execute_line+0x9fc>
            gc_block.values.ijk[idx] = gc_state.position[idx]-gc_state.coord_offset[idx]-gc_block.values.xyz[idx];
 8002cc6:	4b50      	ldr	r3, [pc, #320]	; (8002e08 <gc_execute_line+0x1038>)
 8002cc8:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8002cca:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002ccc:	f7fd feea 	bl	8000aa4 <__aeabi_fsub>
 8002cd0:	f8d9 1044 	ldr.w	r1, [r9, #68]	; 0x44
 8002cd4:	f7fd fee6 	bl	8000aa4 <__aeabi_fsub>
 8002cd8:	f8c9 001c 	str.w	r0, [r9, #28]
 8002cdc:	e576      	b.n	80027cc <gc_execute_line+0x9fc>
	  tmc_read(gc_block.values.p, gc_block.values.r);
 8002cde:	f8d9 002c 	ldr.w	r0, [r9, #44]	; 0x2c
 8002ce2:	f7fe f9eb 	bl	80010bc <__aeabi_f2uiz>
 8002ce6:	b2c4      	uxtb	r4, r0
 8002ce8:	f8d9 0028 	ldr.w	r0, [r9, #40]	; 0x28
 8002cec:	f7fe f9e6 	bl	80010bc <__aeabi_f2uiz>
 8002cf0:	4621      	mov	r1, r4
 8002cf2:	b2c0      	uxtb	r0, r0
 8002cf4:	f007 f984 	bl	800a000 <tmc_read>
 8002cf8:	e63f      	b.n	800297a <gc_execute_line+0xbaa>
	  tmc_set(gc_block.values.p, gc_block.values.l, gc_block.values.n, gc_block.values.s, gc_block.values.f, gc_block.values.r);
 8002cfa:	f8d9 0030 	ldr.w	r0, [r9, #48]	; 0x30
 8002cfe:	f7fe f9dd 	bl	80010bc <__aeabi_f2uiz>
 8002d02:	b2c5      	uxtb	r5, r0
 8002d04:	f8d9 0028 	ldr.w	r0, [r9, #40]	; 0x28
 8002d08:	f7fe f9d8 	bl	80010bc <__aeabi_f2uiz>
 8002d0c:	b2c4      	uxtb	r4, r0
 8002d0e:	f8d9 002c 	ldr.w	r0, [r9, #44]	; 0x2c
 8002d12:	f7fe f9d3 	bl	80010bc <__aeabi_f2uiz>
 8002d16:	b2c3      	uxtb	r3, r0
 8002d18:	f8d9 000c 	ldr.w	r0, [r9, #12]
 8002d1c:	9301      	str	r3, [sp, #4]
 8002d1e:	f7fe f9cd 	bl	80010bc <__aeabi_f2uiz>
 8002d22:	b2c0      	uxtb	r0, r0
 8002d24:	462b      	mov	r3, r5
 8002d26:	9000      	str	r0, [sp, #0]
 8002d28:	f899 2024 	ldrb.w	r2, [r9, #36]	; 0x24
 8002d2c:	f899 1020 	ldrb.w	r1, [r9, #32]
 8002d30:	4620      	mov	r0, r4
 8002d32:	f007 f8df 	bl	8009ef4 <tmc_set>
 8002d36:	f899 3000 	ldrb.w	r3, [r9]
 8002d3a:	e61b      	b.n	8002974 <gc_execute_line+0xba4>
      settings_write_coord_data(SETTING_INDEX_G28,gc_state.position);
 8002d3c:	4934      	ldr	r1, [pc, #208]	; (8002e10 <gc_execute_line+0x1040>)
 8002d3e:	2006      	movs	r0, #6
 8002d40:	f004 fe24 	bl	800798c <settings_write_coord_data>
      break;
 8002d44:	e648      	b.n	80029d8 <gc_execute_line+0xc08>
      clear_vector(gc_state.coord_offset); // Disable G92 offsets by zeroing offset vector.
 8002d46:	2300      	movs	r3, #0
 8002d48:	4a32      	ldr	r2, [pc, #200]	; (8002e14 <gc_execute_line+0x1044>)
 8002d4a:	f1a2 013c 	sub.w	r1, r2, #60	; 0x3c
 8002d4e:	63cb      	str	r3, [r1, #60]	; 0x3c
 8002d50:	e9c2 3301 	strd	r3, r3, [r2, #4]
 8002d54:	60d3      	str	r3, [r2, #12]
      system_flag_wco_change();
 8002d56:	f006 ff57 	bl	8009c08 <system_flag_wco_change>
      break;
 8002d5a:	e63d      	b.n	80029d8 <gc_execute_line+0xc08>
      memcpy(gc_state.coord_offset,gc_block.values.xyz,sizeof(gc_block.values.xyz));
 8002d5c:	4c2d      	ldr	r4, [pc, #180]	; (8002e14 <gc_execute_line+0x1044>)
 8002d5e:	4b2e      	ldr	r3, [pc, #184]	; (8002e18 <gc_execute_line+0x1048>)
 8002d60:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d62:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      system_flag_wco_change();
 8002d66:	f006 ff4f 	bl	8009c08 <system_flag_wco_change>
      break;
 8002d6a:	e635      	b.n	80029d8 <gc_execute_line+0xc08>
      if (gc_state.modal.motion == MOTION_MODE_LINEAR) {
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	f000 81f9 	beq.w	8003164 <gc_execute_line+0x1394>
      } else if (gc_state.modal.motion == MOTION_MODE_SEEK) {
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	f000 81e9 	beq.w	800314a <gc_execute_line+0x137a>
      } else if ((gc_state.modal.motion == MOTION_MODE_CW_ARC) || (gc_state.modal.motion == MOTION_MODE_CCW_ARC)) {
 8002d78:	3b02      	subs	r3, #2
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	f240 81ce 	bls.w	800311c <gc_execute_line+0x134c>
          pl_data->condition |= PL_COND_FLAG_NO_FEED_OVERRIDE;
 8002d80:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
        gc_update_pos = mc_probe_cycle(gc_block.values.xyz, pl_data, gc_parser_flags);
 8002d84:	4d24      	ldr	r5, [pc, #144]	; (8002e18 <gc_execute_line+0x1048>)
          pl_data->condition |= PL_COND_FLAG_NO_FEED_OVERRIDE;
 8002d86:	f043 0304 	orr.w	r3, r3, #4
        gc_update_pos = mc_probe_cycle(gc_block.values.xyz, pl_data, gc_parser_flags);
 8002d8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002d8c:	a915      	add	r1, sp, #84	; 0x54
 8002d8e:	4628      	mov	r0, r5
          pl_data->condition |= PL_COND_FLAG_NO_FEED_OVERRIDE;
 8002d90:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
        gc_update_pos = mc_probe_cycle(gc_block.values.xyz, pl_data, gc_parser_flags);
 8002d94:	f001 f8b0 	bl	8003ef8 <mc_probe_cycle>
      if (gc_update_pos == GC_UPDATE_POS_TARGET) {
 8002d98:	2800      	cmp	r0, #0
 8002d9a:	f040 81a6 	bne.w	80030ea <gc_execute_line+0x131a>
 8002d9e:	4c1c      	ldr	r4, [pc, #112]	; (8002e10 <gc_execute_line+0x1040>)
        memcpy(gc_state.position, gc_block.values.xyz, sizeof(gc_block.values.xyz)); // gc_state.position[] = gc_block.values.xyz[]
 8002da0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002da4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002da8:	e620      	b.n	80029ec <gc_execute_line+0xc1c>
      if (sys.state != STATE_CHECK_MODE) {
 8002daa:	4b1c      	ldr	r3, [pc, #112]	; (8002e1c <gc_execute_line+0x104c>)
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	f43f ae4f 	beq.w	8002a52 <gc_execute_line+0xc82>
        system_set_exec_state_flag(EXEC_FEED_HOLD); // Use feed hold for program pause.
 8002db4:	2008      	movs	r0, #8
 8002db6:	f006 ffd3 	bl	8009d60 <system_set_exec_state_flag>
        protocol_execute_realtime(); // Execute suspend.
 8002dba:	f002 fff7 	bl	8005dac <protocol_execute_realtime>
 8002dbe:	e648      	b.n	8002a52 <gc_execute_line+0xc82>
 8002dc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002dc2:	f003 0540 	and.w	r5, r3, #64	; 0x40
        gc_parser_flags |= GC_PARSER_LASER_ISMOTION;
 8002dc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dca:	9309      	str	r3, [sp, #36]	; 0x24
 8002dcc:	e585      	b.n	80028da <gc_execute_line+0xb0a>
  if (gc_block.non_modal_command == NON_MODAL_DWELL) { mc_dwell(gc_block.values.p); }
 8002dce:	f8d9 0028 	ldr.w	r0, [r9, #40]	; 0x28
 8002dd2:	f001 f84f 	bl	8003e74 <mc_dwell>
 8002dd6:	f899 3000 	ldrb.w	r3, [r9]
 8002dda:	e5c8      	b.n	800296e <gc_execute_line+0xb9e>
      pl_data->condition |= PL_COND_FLAG_RAPID_MOTION; // Set rapid motion condition flag.
 8002ddc:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
 8002de0:	f043 0301 	orr.w	r3, r3, #1
 8002de4:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
      if (axis_command) { mc_line(gc_block.values.xyz, pl_data); }
 8002de8:	9b07      	ldr	r3, [sp, #28]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	f040 8102 	bne.w	8002ff4 <gc_execute_line+0x1224>
      mc_line(gc_block.values.ijk, pl_data);
 8002df0:	4d06      	ldr	r5, [pc, #24]	; (8002e0c <gc_execute_line+0x103c>)
      memcpy(gc_state.position, gc_block.values.ijk, N_AXIS*sizeof(float));
 8002df2:	4c07      	ldr	r4, [pc, #28]	; (8002e10 <gc_execute_line+0x1040>)
      mc_line(gc_block.values.ijk, pl_data);
 8002df4:	4628      	mov	r0, r5
 8002df6:	a915      	add	r1, sp, #84	; 0x54
 8002df8:	f000 fe04 	bl	8003a04 <mc_line>
      memcpy(gc_state.position, gc_block.values.ijk, N_AXIS*sizeof(float));
 8002dfc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002e00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      break;
 8002e04:	e5e8      	b.n	80029d8 <gc_execute_line+0xc08>
 8002e06:	bf00      	nop
 8002e08:	2000136c 	.word	0x2000136c
 8002e0c:	200013cc 	.word	0x200013cc
 8002e10:	20001388 	.word	0x20001388
 8002e14:	200013a8 	.word	0x200013a8
 8002e18:	200013f4 	.word	0x200013f4
 8002e1c:	20001408 	.word	0x20001408
          gc_parser_flags |= GC_PARSER_ARC_IS_CLOCKWISE; // No break intentional.
 8002e20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e22:	f043 0304 	orr.w	r3, r3, #4
 8002e26:	9309      	str	r3, [sp, #36]	; 0x24
          if (!axis_words) { FAIL(STATUS_GCODE_NO_AXIS_WORDS); } // [No axis words]
 8002e28:	9b06      	ldr	r3, [sp, #24]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	f43f acd5 	beq.w	80027da <gc_execute_line+0xa0a>
          if (!(axis_words & (bit(axis_0)|bit(axis_1)))) { FAIL(STATUS_GCODE_NO_AXIS_WORDS_IN_PLANE); } // [No axis words in plane]
 8002e30:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002e32:	4213      	tst	r3, r2
 8002e34:	f000 80ee 	beq.w	8003014 <gc_execute_line+0x1244>
          x = gc_block.values.xyz[axis_0]-gc_state.position[axis_0]; // Delta x between current position and target
 8002e38:	4db0      	ldr	r5, [pc, #704]	; (80030fc <gc_execute_line+0x132c>)
 8002e3a:	eb09 0287 	add.w	r2, r9, r7, lsl #2
 8002e3e:	eb05 0387 	add.w	r3, r5, r7, lsl #2
 8002e42:	69d9      	ldr	r1, [r3, #28]
 8002e44:	6b90      	ldr	r0, [r2, #56]	; 0x38
 8002e46:	f7fd fe2d 	bl	8000aa4 <__aeabi_fsub>
          y = gc_block.values.xyz[axis_1]-gc_state.position[axis_1]; // Delta y between current position and target
 8002e4a:	eb05 0386 	add.w	r3, r5, r6, lsl #2
 8002e4e:	eb09 0286 	add.w	r2, r9, r6, lsl #2
          x = gc_block.values.xyz[axis_0]-gc_state.position[axis_0]; // Delta x between current position and target
 8002e52:	900f      	str	r0, [sp, #60]	; 0x3c
          y = gc_block.values.xyz[axis_1]-gc_state.position[axis_1]; // Delta y between current position and target
 8002e54:	69d9      	ldr	r1, [r3, #28]
 8002e56:	6b90      	ldr	r0, [r2, #56]	; 0x38
 8002e58:	f7fd fe24 	bl	8000aa4 <__aeabi_fsub>
          if (value_words & bit(WORD_R)) { // Arc Radius Mode
 8002e5c:	f018 0580 	ands.w	r5, r8, #128	; 0x80
          y = gc_block.values.xyz[axis_1]-gc_state.position[axis_1]; // Delta y between current position and target
 8002e60:	9010      	str	r0, [sp, #64]	; 0x40
          if (value_words & bit(WORD_R)) { // Arc Radius Mode
 8002e62:	f000 80da 	beq.w	800301a <gc_execute_line+0x124a>
            bit_false(value_words,bit(WORD_R));
 8002e66:	f028 0880 	bic.w	r8, r8, #128	; 0x80
            if (isequal_position_vector(gc_state.position, gc_block.values.xyz)) { FAIL(STATUS_GCODE_INVALID_TARGET); } // [Invalid target]
 8002e6a:	2210      	movs	r2, #16
 8002e6c:	49a4      	ldr	r1, [pc, #656]	; (8003100 <gc_execute_line+0x1330>)
 8002e6e:	48a5      	ldr	r0, [pc, #660]	; (8003104 <gc_execute_line+0x1334>)
            bit_false(value_words,bit(WORD_R));
 8002e70:	fa1f f888 	uxth.w	r8, r8
            if (isequal_position_vector(gc_state.position, gc_block.values.xyz)) { FAIL(STATUS_GCODE_INVALID_TARGET); } // [Invalid target]
 8002e74:	f008 fbc6 	bl	800b604 <memcmp>
 8002e78:	2800      	cmp	r0, #0
 8002e7a:	f000 8090 	beq.w	8002f9e <gc_execute_line+0x11ce>
            if (gc_block.modal.units == UNITS_MODE_INCHES) { gc_block.values.r *= MM_PER_INCH; }
 8002e7e:	f899 3003 	ldrb.w	r3, [r9, #3]
 8002e82:	f8d9 002c 	ldr.w	r0, [r9, #44]	; 0x2c
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d104      	bne.n	8002e94 <gc_execute_line+0x10c4>
 8002e8a:	499f      	ldr	r1, [pc, #636]	; (8003108 <gc_execute_line+0x1338>)
 8002e8c:	f7fd ff14 	bl	8000cb8 <__aeabi_fmul>
 8002e90:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
            float h_x2_div_d = 4.0f * gc_block.values.r*gc_block.values.r - x*x - y*y;
 8002e94:	f8d9 102c 	ldr.w	r1, [r9, #44]	; 0x2c
 8002e98:	4608      	mov	r0, r1
 8002e9a:	f7fd ff0d 	bl	8000cb8 <__aeabi_fmul>
 8002e9e:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002ea2:	f7fd ff09 	bl	8000cb8 <__aeabi_fmul>
 8002ea6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002ea8:	4605      	mov	r5, r0
 8002eaa:	4619      	mov	r1, r3
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7fd ff03 	bl	8000cb8 <__aeabi_fmul>
 8002eb2:	4601      	mov	r1, r0
 8002eb4:	4628      	mov	r0, r5
 8002eb6:	f7fd fdf5 	bl	8000aa4 <__aeabi_fsub>
 8002eba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002ebc:	4605      	mov	r5, r0
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7fd fef9 	bl	8000cb8 <__aeabi_fmul>
 8002ec6:	4601      	mov	r1, r0
 8002ec8:	4628      	mov	r0, r5
 8002eca:	f7fd fdeb 	bl	8000aa4 <__aeabi_fsub>
            if (h_x2_div_d < 0) { FAIL(STATUS_GCODE_ARC_RADIUS_ERROR); } // [Arc radius error]
 8002ece:	2100      	movs	r1, #0
            float h_x2_div_d = 4.0f * gc_block.values.r*gc_block.values.r - x*x - y*y;
 8002ed0:	4605      	mov	r5, r0
            if (h_x2_div_d < 0) { FAIL(STATUS_GCODE_ARC_RADIUS_ERROR); } // [Arc radius error]
 8002ed2:	f7fe f88f 	bl	8000ff4 <__aeabi_fcmplt>
 8002ed6:	2800      	cmp	r0, #0
 8002ed8:	f040 8091 	bne.w	8002ffe <gc_execute_line+0x122e>
            h_x2_div_d = -sqrtf(h_x2_div_d)/hypot_f(x,y); // == -(h * 2 / d)
 8002edc:	4628      	mov	r0, r5
 8002ede:	f008 fd7b 	bl	800b9d8 <sqrtf>
 8002ee2:	9910      	ldr	r1, [sp, #64]	; 0x40
 8002ee4:	4605      	mov	r5, r0
 8002ee6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8002ee8:	f001 f996 	bl	8004218 <hypot_f>
 8002eec:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8002ef0:	4601      	mov	r1, r0
 8002ef2:	4628      	mov	r0, r5
 8002ef4:	f7fd ff94 	bl	8000e20 <__aeabi_fdiv>
            if (gc_block.modal.motion == MOTION_MODE_CCW_ARC) { h_x2_div_d = -h_x2_div_d; }
 8002ef8:	f899 3001 	ldrb.w	r3, [r9, #1]
            h_x2_div_d = -sqrtf(h_x2_div_d)/hypot_f(x,y); // == -(h * 2 / d)
 8002efc:	4605      	mov	r5, r0
            if (gc_block.modal.motion == MOTION_MODE_CCW_ARC) { h_x2_div_d = -h_x2_div_d; }
 8002efe:	2b03      	cmp	r3, #3
            if (gc_block.values.r < 0) {
 8002f00:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
            if (gc_block.modal.motion == MOTION_MODE_CCW_ARC) { h_x2_div_d = -h_x2_div_d; }
 8002f04:	bf08      	it	eq
 8002f06:	f100 4500 	addeq.w	r5, r0, #2147483648	; 0x80000000
            if (gc_block.values.r < 0) {
 8002f0a:	2100      	movs	r1, #0
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	9308      	str	r3, [sp, #32]
 8002f10:	f7fe f870 	bl	8000ff4 <__aeabi_fcmplt>
 8002f14:	9b08      	ldr	r3, [sp, #32]
 8002f16:	b128      	cbz	r0, 8002f24 <gc_execute_line+0x1154>
                gc_block.values.r = -gc_block.values.r; // Finished with r. Set to positive for mc_arc
 8002f18:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
                h_x2_div_d = -h_x2_div_d;
 8002f1c:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
                gc_block.values.r = -gc_block.values.r; // Finished with r. Set to positive for mc_arc
 8002f20:	f8c9 302c 	str.w	r3, [r9, #44]	; 0x2c
            gc_block.values.ijk[axis_0] = 0.5f*(x-(y*h_x2_div_d));
 8002f24:	9910      	ldr	r1, [sp, #64]	; 0x40
 8002f26:	4628      	mov	r0, r5
 8002f28:	f7fd fec6 	bl	8000cb8 <__aeabi_fmul>
 8002f2c:	4601      	mov	r1, r0
 8002f2e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8002f30:	f7fd fdb8 	bl	8000aa4 <__aeabi_fsub>
 8002f34:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002f38:	f7fd febe 	bl	8000cb8 <__aeabi_fmul>
 8002f3c:	3702      	adds	r7, #2
 8002f3e:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8002f42:	60b8      	str	r0, [r7, #8]
            gc_block.values.ijk[axis_1] = 0.5f*(y+(x*h_x2_div_d));
 8002f44:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8002f46:	4628      	mov	r0, r5
 8002f48:	f7fd feb6 	bl	8000cb8 <__aeabi_fmul>
 8002f4c:	9910      	ldr	r1, [sp, #64]	; 0x40
 8002f4e:	f7fd fdab 	bl	8000aa8 <__addsf3>
 8002f52:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002f56:	f7fd feaf 	bl	8000cb8 <__aeabi_fmul>
 8002f5a:	3602      	adds	r6, #2
 8002f5c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8002f60:	60b0      	str	r0, [r6, #8]
 8002f62:	f7ff b918 	b.w	8002196 <gc_execute_line+0x3c6>
      switch (gc_block.modal.motion) {
 8002f66:	2d8e      	cmp	r5, #142	; 0x8e
 8002f68:	d007      	beq.n	8002f7a <gc_execute_line+0x11aa>
 8002f6a:	d302      	bcc.n	8002f72 <gc_execute_line+0x11a2>
 8002f6c:	2d8f      	cmp	r5, #143	; 0x8f
 8002f6e:	f47f a912 	bne.w	8002196 <gc_execute_line+0x3c6>
            gc_parser_flags |= GC_PARSER_PROBE_IS_NO_ERROR; // No break intentional.
 8002f72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f74:	f043 0310 	orr.w	r3, r3, #16
 8002f78:	9309      	str	r3, [sp, #36]	; 0x24
            if ((gc_block.modal.motion == MOTION_MODE_PROBE_AWAY) ||
 8002f7a:	f105 0372 	add.w	r3, r5, #114	; 0x72
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	f240 808f 	bls.w	80030a4 <gc_execute_line+0x12d4>
          if (!axis_words) { FAIL(STATUS_GCODE_NO_AXIS_WORDS); } // [No axis words]
 8002f86:	9b06      	ldr	r3, [sp, #24]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	f43f ac26 	beq.w	80027da <gc_execute_line+0xa0a>
          if (isequal_position_vector(gc_state.position, gc_block.values.xyz)) { FAIL(STATUS_GCODE_INVALID_TARGET); } // [Invalid target]
 8002f8e:	2210      	movs	r2, #16
 8002f90:	495b      	ldr	r1, [pc, #364]	; (8003100 <gc_execute_line+0x1330>)
 8002f92:	485c      	ldr	r0, [pc, #368]	; (8003104 <gc_execute_line+0x1334>)
 8002f94:	f008 fb36 	bl	800b604 <memcmp>
 8002f98:	2800      	cmp	r0, #0
 8002f9a:	f47f a8fc 	bne.w	8002196 <gc_execute_line+0x3c6>
            if (isequal_position_vector(gc_state.position, gc_block.values.xyz)) { FAIL(STATUS_GCODE_INVALID_TARGET); } // [Invalid target]
 8002f9e:	2421      	movs	r4, #33	; 0x21
 8002fa0:	f7ff b963 	b.w	800226a <gc_execute_line+0x49a>
            || (gc_state.modal.motion == MOTION_MODE_CCW_ARC)) {
 8002fa4:	4b55      	ldr	r3, [pc, #340]	; (80030fc <gc_execute_line+0x132c>)
 8002fa6:	781b      	ldrb	r3, [r3, #0]
          if ((gc_state.modal.motion == MOTION_MODE_LINEAR) || (gc_state.modal.motion == MOTION_MODE_CW_ARC)
 8002fa8:	3b01      	subs	r3, #1
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d82a      	bhi.n	8003004 <gc_execute_line+0x1234>
            if (bit_istrue(gc_parser_flags, GC_PARSER_LASER_DISABLE)) {
 8002fae:	2d00      	cmp	r5, #0
 8002fb0:	f43f ac93 	beq.w	80028da <gc_execute_line+0xb0a>
              gc_parser_flags |= GC_PARSER_LASER_FORCE_SYNC; // Change from G1/2/3 motion mode.
 8002fb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002fb6:	2540      	movs	r5, #64	; 0x40
 8002fb8:	f043 0320 	orr.w	r3, r3, #32
 8002fbc:	9309      	str	r3, [sp, #36]	; 0x24
 8002fbe:	e48c      	b.n	80028da <gc_execute_line+0xb0a>
          else { spindle_sync(gc_state.modal.spindle, gc_block.values.s); }
 8002fc0:	4631      	mov	r1, r6
 8002fc2:	4620      	mov	r0, r4
 8002fc4:	f005 f964 	bl	8008290 <spindle_sync>
 8002fc8:	4b4c      	ldr	r3, [pc, #304]	; (80030fc <gc_execute_line+0x132c>)
 8002fca:	f8d9 6030 	ldr.w	r6, [r9, #48]	; 0x30
 8002fce:	7a5c      	ldrb	r4, [r3, #9]
 8002fd0:	e552      	b.n	8002a78 <gc_execute_line+0xca8>
              if (gc_block.non_modal_command != NON_MODAL_ABSOLUTE_OVERRIDE) {
 8002fd2:	2d35      	cmp	r5, #53	; 0x35
 8002fd4:	f43f aba1 	beq.w	800271a <gc_execute_line+0x94a>
                  gc_block.values.xyz[idx] += block_coord_system[idx] + gc_state.coord_offset[idx];
 8002fd8:	f8d9 103c 	ldr.w	r1, [r9, #60]	; 0x3c
 8002fdc:	9819      	ldr	r0, [sp, #100]	; 0x64
 8002fde:	f7fd fd63 	bl	8000aa8 <__addsf3>
 8002fe2:	4b46      	ldr	r3, [pc, #280]	; (80030fc <gc_execute_line+0x132c>)
 8002fe4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002fe6:	f7fd fd5f 	bl	8000aa8 <__addsf3>
 8002fea:	9b06      	ldr	r3, [sp, #24]
 8002fec:	f8c9 003c 	str.w	r0, [r9, #60]	; 0x3c
 8002ff0:	f7ff bb93 	b.w	800271a <gc_execute_line+0x94a>
      if (axis_command) { mc_line(gc_block.values.xyz, pl_data); }
 8002ff4:	a915      	add	r1, sp, #84	; 0x54
 8002ff6:	4842      	ldr	r0, [pc, #264]	; (8003100 <gc_execute_line+0x1330>)
 8002ff8:	f000 fd04 	bl	8003a04 <mc_line>
 8002ffc:	e6f8      	b.n	8002df0 <gc_execute_line+0x1020>
            if (h_x2_div_d < 0) { FAIL(STATUS_GCODE_ARC_RADIUS_ERROR); } // [Arc radius error]
 8002ffe:	2422      	movs	r4, #34	; 0x22
 8003000:	f7ff b933 	b.w	800226a <gc_execute_line+0x49a>
            if (bit_isfalse(gc_parser_flags, GC_PARSER_LASER_DISABLE)) {
 8003004:	2d00      	cmp	r5, #0
 8003006:	f47f ac68 	bne.w	80028da <gc_execute_line+0xb0a>
              gc_parser_flags |= GC_PARSER_LASER_FORCE_SYNC;
 800300a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800300c:	f043 0320 	orr.w	r3, r3, #32
 8003010:	9309      	str	r3, [sp, #36]	; 0x24
 8003012:	e462      	b.n	80028da <gc_execute_line+0xb0a>
          if (!(axis_words & (bit(axis_0)|bit(axis_1)))) { FAIL(STATUS_GCODE_NO_AXIS_WORDS_IN_PLANE); } // [No axis words in plane]
 8003014:	2420      	movs	r4, #32
 8003016:	f7ff b928 	b.w	800226a <gc_execute_line+0x49a>
            if (!(ijk_words & (bit(axis_0)|bit(axis_1)))) { FAIL(STATUS_GCODE_NO_OFFSETS_IN_PLANE); } // [No offsets in plane]
 800301a:	9b08      	ldr	r3, [sp, #32]
 800301c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800301e:	4213      	tst	r3, r2
 8003020:	d060      	beq.n	80030e4 <gc_execute_line+0x1314>
            if (gc_block.modal.units == UNITS_MODE_INCHES) {
 8003022:	f899 3003 	ldrb.w	r3, [r9, #3]
            bit_false(value_words,(bit(WORD_I)|bit(WORD_J)|bit(WORD_K)));
 8003026:	f028 080e 	bic.w	r8, r8, #14
            if (gc_block.modal.units == UNITS_MODE_INCHES) {
 800302a:	2b01      	cmp	r3, #1
            bit_false(value_words,(bit(WORD_I)|bit(WORD_J)|bit(WORD_K)));
 800302c:	fa1f f888 	uxth.w	r8, r8
            if (gc_block.modal.units == UNITS_MODE_INCHES) {
 8003030:	d03d      	beq.n	80030ae <gc_execute_line+0x12de>
            y -= gc_block.values.ijk[axis_1]; // Delta y between circle center and target
 8003032:	1cb5      	adds	r5, r6, #2
 8003034:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8003038:	68a9      	ldr	r1, [r5, #8]
 800303a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800303c:	f7fd fd32 	bl	8000aa4 <__aeabi_fsub>
 8003040:	4606      	mov	r6, r0
            x -= gc_block.values.ijk[axis_0]; // Delta x between circle center and target
 8003042:	3702      	adds	r7, #2
 8003044:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8003048:	68b9      	ldr	r1, [r7, #8]
 800304a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800304c:	f7fd fd2a 	bl	8000aa4 <__aeabi_fsub>
            float target_r = hypot_f(x,y);
 8003050:	4631      	mov	r1, r6
 8003052:	f001 f8e1 	bl	8004218 <hypot_f>
            gc_block.values.r = hypot_f(gc_block.values.ijk[axis_0], gc_block.values.ijk[axis_1]);
 8003056:	68a9      	ldr	r1, [r5, #8]
            float target_r = hypot_f(x,y);
 8003058:	4606      	mov	r6, r0
            gc_block.values.r = hypot_f(gc_block.values.ijk[axis_0], gc_block.values.ijk[axis_1]);
 800305a:	68b8      	ldr	r0, [r7, #8]
 800305c:	f001 f8dc 	bl	8004218 <hypot_f>
 8003060:	4607      	mov	r7, r0
            float delta_r = fabsf(target_r-gc_block.values.r);
 8003062:	4630      	mov	r0, r6
 8003064:	4639      	mov	r1, r7
            gc_block.values.r = hypot_f(gc_block.values.ijk[axis_0], gc_block.values.ijk[axis_1]);
 8003066:	f8c9 702c 	str.w	r7, [r9, #44]	; 0x2c
            float delta_r = fabsf(target_r-gc_block.values.r);
 800306a:	f7fd fd1b 	bl	8000aa4 <__aeabi_fsub>
 800306e:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
            if (delta_r > 0.005f) {
 8003072:	4628      	mov	r0, r5
 8003074:	4925      	ldr	r1, [pc, #148]	; (800310c <gc_execute_line+0x133c>)
 8003076:	f7fd ffdb 	bl	8001030 <__aeabi_fcmpgt>
 800307a:	2800      	cmp	r0, #0
 800307c:	f43f a88b 	beq.w	8002196 <gc_execute_line+0x3c6>
              if (delta_r > 0.5f) { FAIL(STATUS_GCODE_INVALID_TARGET); } // [Arc definition error] > 0.5mm
 8003080:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003084:	4628      	mov	r0, r5
 8003086:	f7fd ffd3 	bl	8001030 <__aeabi_fcmpgt>
 800308a:	2800      	cmp	r0, #0
 800308c:	d187      	bne.n	8002f9e <gc_execute_line+0x11ce>
              if (delta_r > (0.001f*gc_block.values.r)) { FAIL(STATUS_GCODE_INVALID_TARGET); } // [Arc definition error] > 0.005mm AND 0.1% radius
 800308e:	4920      	ldr	r1, [pc, #128]	; (8003110 <gc_execute_line+0x1340>)
 8003090:	4638      	mov	r0, r7
 8003092:	f7fd fe11 	bl	8000cb8 <__aeabi_fmul>
 8003096:	4629      	mov	r1, r5
 8003098:	f7fd ffac 	bl	8000ff4 <__aeabi_fcmplt>
 800309c:	2800      	cmp	r0, #0
 800309e:	f43f a87a 	beq.w	8002196 <gc_execute_line+0x3c6>
 80030a2:	e77c      	b.n	8002f9e <gc_execute_line+0x11ce>
                (gc_block.modal.motion == MOTION_MODE_PROBE_AWAY_NO_ERROR)) { gc_parser_flags |= GC_PARSER_PROBE_IS_AWAY; }
 80030a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80030a6:	f043 0308 	orr.w	r3, r3, #8
 80030aa:	9309      	str	r3, [sp, #36]	; 0x24
 80030ac:	e76b      	b.n	8002f86 <gc_execute_line+0x11b6>
 80030ae:	4b19      	ldr	r3, [pc, #100]	; (8003114 <gc_execute_line+0x1344>)
                if (ijk_words & bit(idx)) { gc_block.values.ijk[idx] *= MM_PER_INCH; }
 80030b0:	960b      	str	r6, [sp, #44]	; 0x2c
 80030b2:	4626      	mov	r6, r4
 80030b4:	461c      	mov	r4, r3
 80030b6:	4a14      	ldr	r2, [pc, #80]	; (8003108 <gc_execute_line+0x1338>)
 80030b8:	9b08      	ldr	r3, [sp, #32]
 80030ba:	fa43 f105 	asr.w	r1, r3, r5
 80030be:	f011 0f01 	tst.w	r1, #1
 80030c2:	f105 0501 	add.w	r5, r5, #1
 80030c6:	d006      	beq.n	80030d6 <gc_execute_line+0x1306>
 80030c8:	4611      	mov	r1, r2
 80030ca:	6820      	ldr	r0, [r4, #0]
 80030cc:	9211      	str	r2, [sp, #68]	; 0x44
 80030ce:	f7fd fdf3 	bl	8000cb8 <__aeabi_fmul>
 80030d2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80030d4:	6020      	str	r0, [r4, #0]
              for (idx=0; idx<N_AXIS; idx++) { // Axes indices are consistent, so loop may be used to save flash space.
 80030d6:	2d04      	cmp	r5, #4
 80030d8:	f104 0404 	add.w	r4, r4, #4
 80030dc:	d1ec      	bne.n	80030b8 <gc_execute_line+0x12e8>
 80030de:	4634      	mov	r4, r6
 80030e0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80030e2:	e7a6      	b.n	8003032 <gc_execute_line+0x1262>
            if (!(ijk_words & (bit(axis_0)|bit(axis_1)))) { FAIL(STATUS_GCODE_NO_OFFSETS_IN_PLANE); } // [No offsets in plane]
 80030e4:	2423      	movs	r4, #35	; 0x23
 80030e6:	f7ff b8c0 	b.w	800226a <gc_execute_line+0x49a>
      } else if (gc_update_pos == GC_UPDATE_POS_SYSTEM) {
 80030ea:	2801      	cmp	r0, #1
 80030ec:	f47f ac7e 	bne.w	80029ec <gc_execute_line+0xc1c>
  system_convert_array_steps_to_mpos(gc_state.position,sys_position);
 80030f0:	4909      	ldr	r1, [pc, #36]	; (8003118 <gc_execute_line+0x1348>)
 80030f2:	4804      	ldr	r0, [pc, #16]	; (8003104 <gc_execute_line+0x1334>)
 80030f4:	f006 fd92 	bl	8009c1c <system_convert_array_steps_to_mpos>
 80030f8:	e478      	b.n	80029ec <gc_execute_line+0xc1c>
 80030fa:	bf00      	nop
 80030fc:	2000136c 	.word	0x2000136c
 8003100:	200013f4 	.word	0x200013f4
 8003104:	20001388 	.word	0x20001388
 8003108:	41cb3333 	.word	0x41cb3333
 800310c:	3ba3d70a 	.word	0x3ba3d70a
 8003110:	3a83126f 	.word	0x3a83126f
 8003114:	200013cc 	.word	0x200013cc
 8003118:	20001430 	.word	0x20001430
          mc_arc(gc_block.values.xyz, pl_data, gc_state.position, gc_block.values.ijk, gc_block.values.r,
 800311c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800311e:	4d15      	ldr	r5, [pc, #84]	; (8003174 <gc_execute_line+0x13a4>)
 8003120:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003124:	9304      	str	r3, [sp, #16]
 8003126:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003128:	4c13      	ldr	r4, [pc, #76]	; (8003178 <gc_execute_line+0x13a8>)
 800312a:	9303      	str	r3, [sp, #12]
 800312c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800312e:	f8d9 602c 	ldr.w	r6, [r9, #44]	; 0x2c
 8003132:	9302      	str	r3, [sp, #8]
 8003134:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003136:	a915      	add	r1, sp, #84	; 0x54
 8003138:	9301      	str	r3, [sp, #4]
 800313a:	4622      	mov	r2, r4
 800313c:	f1a5 0328 	sub.w	r3, r5, #40	; 0x28
 8003140:	4628      	mov	r0, r5
 8003142:	9600      	str	r6, [sp, #0]
 8003144:	f000 fc94 	bl	8003a70 <mc_arc>
 8003148:	e62a      	b.n	8002da0 <gc_execute_line+0xfd0>
        pl_data->condition |= PL_COND_FLAG_RAPID_MOTION; // Set rapid motion condition flag.
 800314a:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
        mc_line(gc_block.values.xyz, pl_data);
 800314e:	4d09      	ldr	r5, [pc, #36]	; (8003174 <gc_execute_line+0x13a4>)
        pl_data->condition |= PL_COND_FLAG_RAPID_MOTION; // Set rapid motion condition flag.
 8003150:	f043 0301 	orr.w	r3, r3, #1
        mc_line(gc_block.values.xyz, pl_data);
 8003154:	a915      	add	r1, sp, #84	; 0x54
 8003156:	4628      	mov	r0, r5
        pl_data->condition |= PL_COND_FLAG_RAPID_MOTION; // Set rapid motion condition flag.
 8003158:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 800315c:	4c06      	ldr	r4, [pc, #24]	; (8003178 <gc_execute_line+0x13a8>)
        mc_line(gc_block.values.xyz, pl_data);
 800315e:	f000 fc51 	bl	8003a04 <mc_line>
 8003162:	e61d      	b.n	8002da0 <gc_execute_line+0xfd0>
        mc_line(gc_block.values.xyz, pl_data);
 8003164:	4d03      	ldr	r5, [pc, #12]	; (8003174 <gc_execute_line+0x13a4>)
 8003166:	a915      	add	r1, sp, #84	; 0x54
 8003168:	4628      	mov	r0, r5
 800316a:	f000 fc4b 	bl	8003a04 <mc_line>
 800316e:	4c02      	ldr	r4, [pc, #8]	; (8003178 <gc_execute_line+0x13a8>)
 8003170:	e616      	b.n	8002da0 <gc_execute_line+0xfd0>
 8003172:	bf00      	nop
 8003174:	200013f4 	.word	0x200013f4
 8003178:	20001388 	.word	0x20001388

0800317c <jog_execute>:
#include "grbl.h"


// Sets up valid jog motion received from g-code parser, checks for soft-limits, and executes the jog.
uint8_t jog_execute(plan_line_data_t *pl_data, parser_block_t *gc_block)
{
 800317c:	b570      	push	{r4, r5, r6, lr}
 800317e:	4605      	mov	r5, r0
  // Initialize planner data struct for jogging motions.
  // NOTE: Spindle and coolant are allowed to fully function with overrides during a jog.
  pl_data->feed_rate = gc_block->values.f;
  pl_data->condition |= PL_COND_FLAG_NO_FEED_OVERRIDE;
 8003180:	7a03      	ldrb	r3, [r0, #8]
  pl_data->feed_rate = gc_block->values.f;
 8003182:	68c8      	ldr	r0, [r1, #12]
  pl_data->condition |= PL_COND_FLAG_NO_FEED_OVERRIDE;
 8003184:	f043 0304 	orr.w	r3, r3, #4
#ifdef USE_LINE_NUMBERS
  pl_data->line_number = gc_block->values.n;
#endif

  if (bit_istrue(settings.flags, BITFLAG_SOFT_LIMIT_ENABLE)) {
 8003188:	4a12      	ldr	r2, [pc, #72]	; (80031d4 <jog_execute+0x58>)
  pl_data->feed_rate = gc_block->values.f;
 800318a:	6028      	str	r0, [r5, #0]
  pl_data->condition |= PL_COND_FLAG_NO_FEED_OVERRIDE;
 800318c:	722b      	strb	r3, [r5, #8]
  if (bit_istrue(settings.flags, BITFLAG_SOFT_LIMIT_ENABLE)) {
 800318e:	f892 3058 	ldrb.w	r3, [r2, #88]	; 0x58
 8003192:	f101 0438 	add.w	r4, r1, #56	; 0x38
 8003196:	069b      	lsls	r3, r3, #26
 8003198:	d503      	bpl.n	80031a2 <jog_execute+0x26>
    if (system_check_travel_limits(gc_block->values.xyz)) { return(STATUS_TRAVEL_EXCEEDED); }
 800319a:	4620      	mov	r0, r4
 800319c:	f006 fd62 	bl	8009c64 <system_check_travel_limits>
 80031a0:	b9a8      	cbnz	r0, 80031ce <jog_execute+0x52>
  }

  // Valid jog command. Plan, set state, and execute.
  mc_line(gc_block->values.xyz, pl_data);
  if (sys.state == STATE_IDLE) {
 80031a2:	4e0d      	ldr	r6, [pc, #52]	; (80031d8 <jog_execute+0x5c>)
  mc_line(gc_block->values.xyz, pl_data);
 80031a4:	4620      	mov	r0, r4
 80031a6:	4629      	mov	r1, r5
 80031a8:	f000 fc2c 	bl	8003a04 <mc_line>
  if (sys.state == STATE_IDLE) {
 80031ac:	7834      	ldrb	r4, [r6, #0]
 80031ae:	b114      	cbz	r4, 80031b6 <jog_execute+0x3a>
      st_prep_buffer();
      st_wake_up();  // NOTE: Manual start. No state machine required.
    }
  }

  return(STATUS_OK);
 80031b0:	2400      	movs	r4, #0
}
 80031b2:	4620      	mov	r0, r4
 80031b4:	bd70      	pop	{r4, r5, r6, pc}
    if (plan_get_current_block() != NULL) { // Check if there is a block to execute.
 80031b6:	f001 fa3d 	bl	8004634 <plan_get_current_block>
 80031ba:	2800      	cmp	r0, #0
 80031bc:	d0f8      	beq.n	80031b0 <jog_execute+0x34>
      sys.state = STATE_JOG;
 80031be:	2320      	movs	r3, #32
 80031c0:	7033      	strb	r3, [r6, #0]
      st_prep_buffer();
 80031c2:	f005 fca1 	bl	8008b08 <st_prep_buffer>
      st_wake_up();  // NOTE: Manual start. No state machine required.
 80031c6:	f005 f91d 	bl	8008404 <st_wake_up>
}
 80031ca:	4620      	mov	r0, r4
 80031cc:	bd70      	pop	{r4, r5, r6, pc}
    if (system_check_travel_limits(gc_block->values.xyz)) { return(STATUS_TRAVEL_EXCEEDED); }
 80031ce:	240f      	movs	r4, #15
}
 80031d0:	4620      	mov	r0, r4
 80031d2:	bd70      	pop	{r4, r5, r6, pc}
 80031d4:	20001744 	.word	0x20001744
 80031d8:	20001408 	.word	0x20001408

080031dc <limits_init>:
#ifndef HOMING_AXIS_LOCATE_SCALAR
  #define HOMING_AXIS_LOCATE_SCALAR  5.0f // Must be > 1 to ensure limit switch is cleared.
#endif

void limits_init()
{
 80031dc:	b530      	push	{r4, r5, lr}
    WDTCSR = (1<<WDP0); // Set time-out at ~32msec.
  #endif
#endif
#ifdef STM32F103C8
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_APB2PeriphClockCmd(RCC_LIMIT_PORT | RCC_APB2Periph_AFIO, ENABLE);
 80031de:	2101      	movs	r1, #1
{
 80031e0:	b085      	sub	sp, #20
	RCC_APB2PeriphClockCmd(RCC_LIMIT_PORT | RCC_APB2Periph_AFIO, ENABLE);
 80031e2:	2009      	movs	r0, #9
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
#else
	//GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPD; // ZZZZZZZZZZZZZZZZZZZZZZ
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
#endif
	GPIO_InitStructure.GPIO_Pin = LIMIT_MASK;
 80031e4:	f44f 4470 	mov.w	r4, #61440	; 0xf000
	RCC_APB2PeriphClockCmd(RCC_LIMIT_PORT | RCC_APB2Periph_AFIO, ENABLE);
 80031e8:	f7fe fb26 	bl	8001838 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 80031ec:	2348      	movs	r3, #72	; 0x48
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80031ee:	2203      	movs	r2, #3
	GPIO_InitStructure.GPIO_Pin = LIMIT_MASK;
 80031f0:	a904      	add	r1, sp, #16
	GPIO_Init(LIMIT_PORT, &GPIO_InitStructure);

	if (bit_istrue(settings.flags, BITFLAG_HARD_LIMIT_ENABLE))
 80031f2:	4d21      	ldr	r5, [pc, #132]	; (8003278 <limits_init+0x9c>)
	GPIO_InitStructure.GPIO_Pin = LIMIT_MASK;
 80031f4:	f821 4d10 	strh.w	r4, [r1, #-16]!
	GPIO_Init(LIMIT_PORT, &GPIO_InitStructure);
 80031f8:	4820      	ldr	r0, [pc, #128]	; (800327c <limits_init+0xa0>)
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 80031fa:	f88d 3003 	strb.w	r3, [sp, #3]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80031fe:	f88d 2002 	strb.w	r2, [sp, #2]
	GPIO_Init(LIMIT_PORT, &GPIO_InitStructure);
 8003202:	f7fe f8db 	bl	80013bc <GPIO_Init>
	if (bit_istrue(settings.flags, BITFLAG_HARD_LIMIT_ENABLE))
 8003206:	f895 3058 	ldrb.w	r3, [r5, #88]	; 0x58
 800320a:	071b      	lsls	r3, r3, #28
 800320c:	d406      	bmi.n	800321c <limits_init+0x40>

    \param [in]      IRQn  Number of the external interrupt to disable
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 800320e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003212:	4b1b      	ldr	r3, [pc, #108]	; (8003280 <limits_init+0xa4>)
 8003214:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	else
	{
		limits_disable();
	}
#endif
}
 8003218:	b005      	add	sp, #20
 800321a:	bd30      	pop	{r4, r5, pc}
		delay_ms(100); // added by MS for debug (issue#14)
 800321c:	2064      	movs	r0, #100	; 0x64
 800321e:	f000 ffeb 	bl	80041f8 <delay_ms>
		GPIO_EXTILineConfig(GPIO_LIMIT_PORT, X_LIMIT_BIT);
 8003222:	210c      	movs	r1, #12
 8003224:	2001      	movs	r0, #1
 8003226:	f7fe fa97 	bl	8001758 <GPIO_EXTILineConfig>
		GPIO_EXTILineConfig(GPIO_LIMIT_PORT, Y_LIMIT_BIT);
 800322a:	210d      	movs	r1, #13
 800322c:	2001      	movs	r0, #1
 800322e:	f7fe fa93 	bl	8001758 <GPIO_EXTILineConfig>
		GPIO_EXTILineConfig(GPIO_LIMIT_PORT, Z_LIMIT_BIT);
 8003232:	210e      	movs	r1, #14
 8003234:	2001      	movs	r0, #1
 8003236:	f7fe fa8f 	bl	8001758 <GPIO_EXTILineConfig>
		GPIO_EXTILineConfig(GPIO_LIMIT_PORT, A_LIMIT_BIT);
 800323a:	210f      	movs	r1, #15
 800323c:	2001      	movs	r0, #1
 800323e:	f7fe fa8b 	bl	8001758 <GPIO_EXTILineConfig>
		if (bit_istrue(settings.flags, BITFLAG_INVERT_LIMIT_PINS )) { // for normally closed switches, we need to interrupt on the rising edge
 8003242:	f895 3058 	ldrb.w	r3, [r5, #88]	; 0x58
		EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt; //Interrupt mode, optional values for the interrupt EXTI_Mode_Interrupt and event EXTI_Mode_Event.
 8003246:	2200      	movs	r2, #0
		if (bit_istrue(settings.flags, BITFLAG_INVERT_LIMIT_PINS )) { // for normally closed switches, we need to interrupt on the rising edge
 8003248:	f013 0f40 	tst.w	r3, #64	; 0x40
			EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling; //Trigger mode, can be a falling edge trigger EXTI_Trigger_Falling, the rising edge triggered EXTI_Trigger_Rising, or any level (rising edge and falling edge trigger EXTI_Trigger_Rising_Falling)
 800324c:	bf14      	ite	ne
 800324e:	2108      	movne	r1, #8
 8003250:	210c      	moveq	r1, #12
		EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8003252:	2301      	movs	r3, #1
		EXTI_Init(&EXTI_InitStructure);
 8003254:	a802      	add	r0, sp, #8
 8003256:	f88d 100d 	strb.w	r1, [sp, #13]
		EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt; //Interrupt mode, optional values for the interrupt EXTI_Mode_Interrupt and event EXTI_Mode_Event.
 800325a:	f88d 200c 	strb.w	r2, [sp, #12]
		EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 800325e:	f88d 300e 	strb.w	r3, [sp, #14]
		EXTI_InitStructure.EXTI_Line = LIMIT_MASK;    //
 8003262:	9402      	str	r4, [sp, #8]
		EXTI_Init(&EXTI_InitStructure);
 8003264:	f7fd ff80 	bl	8001168 <EXTI_Init>
		NVIC_InitStructure.NVIC_IRQChannel = EXTI15_10_IRQn; //Enable keypad external interrupt channel
 8003268:	4b06      	ldr	r3, [pc, #24]	; (8003284 <limits_init+0xa8>)
 800326a:	a804      	add	r0, sp, #16
 800326c:	f840 3d0c 	str.w	r3, [r0, #-12]!
		NVIC_Init(&NVIC_InitStructure);
 8003270:	f7fd ff4e 	bl	8001110 <NVIC_Init>
}
 8003274:	b005      	add	sp, #20
 8003276:	bd30      	pop	{r4, r5, pc}
 8003278:	20001744 	.word	0x20001744
 800327c:	40010c00 	.word	0x40010c00
 8003280:	e000e100 	.word	0xe000e100
 8003284:	01020228 	.word	0x01020228

08003288 <limits_disable>:
 8003288:	f44f 7280 	mov.w	r2, #256	; 0x100
 800328c:	4b01      	ldr	r3, [pc, #4]	; (8003294 <limits_disable+0xc>)
 800328e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  PCICR &= ~(1 << LIMIT_INT);  // Disable Pin Change Interrupt
#endif
#ifdef STM32F103C8
  NVIC_DisableIRQ(EXTI15_10_IRQn);
#endif
}
 8003292:	4770      	bx	lr
 8003294:	e000e100 	.word	0xe000e100

08003298 <limits_get_state>:

// Returns limit state as a bit-wise uint8 variable. Each bit indicates an axis limit, where
// triggered is 1 and not triggered is 0. Invert mask is applied. Axes are defined by their
// number in bit position, i.e. Z_AXIS is (1<<2) or bit 2, and Y_AXIS is (1<<1) or bit 1.
uint8_t limits_get_state()
{
 8003298:	b570      	push	{r4, r5, r6, lr}
  bool bouncy_detected = false;	// ZZZZZZZZZZ

  // uint16_t pin = GPIO_ReadInputData(LIMIT_PIN); // original

  uint16_t pin, pin2 = 0;
  pin = GPIO_ReadInputData(LIMIT_PIN);
 800329a:	481b      	ldr	r0, [pc, #108]	; (8003308 <limits_get_state+0x70>)
 800329c:	f7fe fa14 	bl	80016c8 <GPIO_ReadInputData>
		  // do something???
	  }
  }
  */

  uint8_t i = 0;
 80032a0:	2400      	movs	r4, #0
  pin = GPIO_ReadInputData(LIMIT_PIN);
 80032a2:	4605      	mov	r5, r0
  do{
	  pin2 = GPIO_ReadInputData(LIMIT_PIN);
 80032a4:	4e18      	ldr	r6, [pc, #96]	; (8003308 <limits_get_state+0x70>)
 80032a6:	4630      	mov	r0, r6
 80032a8:	f7fe fa0e 	bl	80016c8 <GPIO_ReadInputData>
	  {
		  bouncy_detected = true;
		  i = 0;
		  pin = GPIO_ReadInputData(LIMIT_PIN);
	  }
	  i++;
 80032ac:	3401      	adds	r4, #1
	  if(pin != pin2)
 80032ae:	4285      	cmp	r5, r0
	  i++;
 80032b0:	b2e4      	uxtb	r4, r4
	  if(pin != pin2)
 80032b2:	d005      	beq.n	80032c0 <limits_get_state+0x28>
		  pin = GPIO_ReadInputData(LIMIT_PIN);
 80032b4:	4630      	mov	r0, r6
 80032b6:	f7fe fa07 	bl	80016c8 <GPIO_ReadInputData>
	  i++;
 80032ba:	2401      	movs	r4, #1
		  pin = GPIO_ReadInputData(LIMIT_PIN);
 80032bc:	4605      	mov	r5, r0
 80032be:	e7f2      	b.n	80032a6 <limits_get_state+0xe>
  } while (i<READ_CNT);
 80032c0:	2c09      	cmp	r4, #9
 80032c2:	d9f0      	bls.n	80032a6 <limits_get_state+0xe>

#endif
  #ifdef INVERT_LIMIT_PIN_MASK
    pin ^= INVERT_LIMIT_PIN_MASK;
  #endif
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_LIMIT_PINS)) { pin ^= LIMIT_MASK; }
 80032c4:	4b11      	ldr	r3, [pc, #68]	; (800330c <limits_get_state+0x74>)
 80032c6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80032ca:	065b      	lsls	r3, r3, #25
 80032cc:	bf5c      	itt	pl
 80032ce:	f485 4570 	eorpl.w	r5, r5, #61440	; 0xf000
 80032d2:	b2ad      	uxthpl	r5, r5
  if (pin) {
 80032d4:	b1ad      	cbz	r5, 8003302 <limits_get_state+0x6a>
    uint8_t idx;
    for (idx=0; idx<N_AXIS; idx++) {
      if (pin & limit_pin_mask[idx]) { limit_state |= (1 << idx); }
 80032d6:	4b0e      	ldr	r3, [pc, #56]	; (8003310 <limits_get_state+0x78>)
 80032d8:	8819      	ldrh	r1, [r3, #0]
 80032da:	885a      	ldrh	r2, [r3, #2]
 80032dc:	420d      	tst	r5, r1
  uint8_t limit_state = 0;
 80032de:	bf14      	ite	ne
 80032e0:	2001      	movne	r0, #1
 80032e2:	2000      	moveq	r0, #0
      if (pin & limit_pin_mask[idx]) { limit_state |= (1 << idx); }
 80032e4:	4215      	tst	r5, r2
 80032e6:	889a      	ldrh	r2, [r3, #4]
 80032e8:	88db      	ldrh	r3, [r3, #6]
 80032ea:	bf18      	it	ne
 80032ec:	f040 0002 	orrne.w	r0, r0, #2
 80032f0:	4215      	tst	r5, r2
 80032f2:	bf18      	it	ne
 80032f4:	f040 0004 	orrne.w	r0, r0, #4
 80032f8:	421d      	tst	r5, r3
 80032fa:	d001      	beq.n	8003300 <limits_get_state+0x68>
 80032fc:	f040 0008 	orr.w	r0, r0, #8
    }
  }
#endif
  return(limit_state);
}
 8003300:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t limit_state = 0;
 8003302:	4628      	mov	r0, r5
}
 8003304:	bd70      	pop	{r4, r5, r6, pc}
 8003306:	bf00      	nop
 8003308:	40010c00 	.word	0x40010c00
 800330c:	20001744 	.word	0x20001744
 8003310:	0800cb24 	.word	0x0800cb24

08003314 <EXTI15_10_IRQHandler>:
#if defined(AVRTARGET) 
ISR(LIMIT_INT_vect) // DEFAULT: Limit pin change interrupt process.
#else
void EXTI15_10_IRQHandler(void)
#endif
{
 8003314:	b508      	push	{r3, lr}
#if defined (STM32F103C8)
	if (EXTI_GetITStatus(1 << X_LIMIT_BIT) != RESET)
 8003316:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800331a:	f7fd ff63 	bl	80011e4 <EXTI_GetITStatus>
 800331e:	bb88      	cbnz	r0, 8003384 <EXTI15_10_IRQHandler+0x70>
	{
		EXTI_ClearITPendingBit(1 << X_LIMIT_BIT);
	}
	if (EXTI_GetITStatus(1 << Y_LIMIT_BIT) != RESET)
 8003320:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003324:	f7fd ff5e 	bl	80011e4 <EXTI_GetITStatus>
 8003328:	bb38      	cbnz	r0, 800337a <EXTI15_10_IRQHandler+0x66>
	{
		EXTI_ClearITPendingBit(1 << Y_LIMIT_BIT);
	}
	if (EXTI_GetITStatus(1 << Z_LIMIT_BIT) != RESET)
 800332a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800332e:	f7fd ff59 	bl	80011e4 <EXTI_GetITStatus>
 8003332:	b9e8      	cbnz	r0, 8003370 <EXTI15_10_IRQHandler+0x5c>
	{
		EXTI_ClearITPendingBit(1 << Z_LIMIT_BIT);
	}
// --- YSV 22-06-2018
	#if defined(AA_AXIS) || defined(AB_AXIS) || defined(ABC_AXIS)
	if (EXTI_GetITStatus(1 << A_LIMIT_BIT) != RESET)
 8003334:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003338:	f7fd ff54 	bl	80011e4 <EXTI_GetITStatus>
 800333c:	b998      	cbnz	r0, 8003366 <EXTI15_10_IRQHandler+0x52>

    \param [in]      IRQn  Number of the interrupt for clear pending
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
 800333e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003342:	4a13      	ldr	r2, [pc, #76]	; (8003390 <EXTI15_10_IRQHandler+0x7c>)
  // Ignore limit switches if already in an alarm state or in-process of executing an alarm.
  // When in the alarm state, Grbl should have been reset or will force a reset, so any pending
  // moves in the planner and serial buffers are all cleared and newly sent blocks will be
  // locked out until a homing cycle or a kill lock command. Allows the user to disable the hard
  // limit setting if their limits are constantly triggering after a reset and move their axes.
  if (sys.state != STATE_ALARM) {
 8003344:	4b13      	ldr	r3, [pc, #76]	; (8003394 <EXTI15_10_IRQHandler+0x80>)
 8003346:	f8c2 1184 	str.w	r1, [r2, #388]	; 0x184
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	2b01      	cmp	r3, #1
 800334e:	d002      	beq.n	8003356 <EXTI15_10_IRQHandler+0x42>
    if (!(sys_rt_exec_alarm)) {
 8003350:	4b11      	ldr	r3, [pc, #68]	; (8003398 <EXTI15_10_IRQHandler+0x84>)
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	b103      	cbz	r3, 8003358 <EXTI15_10_IRQHandler+0x44>
      mc_reset(); // Initiate system kill.
      system_set_exec_alarm(EXEC_ALARM_HARD_LIMIT); // Indicate hard limit critical event
#endif
    }
  }
}
 8003356:	bd08      	pop	{r3, pc}
      mc_reset(); // Initiate system kill.
 8003358:	f000 fe60 	bl	800401c <mc_reset>
}
 800335c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      system_set_exec_alarm(EXEC_ALARM_HARD_LIMIT); // Indicate hard limit critical event
 8003360:	2001      	movs	r0, #1
 8003362:	f006 bd11 	b.w	8009d88 <system_set_exec_alarm>
		EXTI_ClearITPendingBit(1 << A_LIMIT_BIT);
 8003366:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800336a:	f7fd ff49 	bl	8001200 <EXTI_ClearITPendingBit>
 800336e:	e7e6      	b.n	800333e <EXTI15_10_IRQHandler+0x2a>
		EXTI_ClearITPendingBit(1 << Z_LIMIT_BIT);
 8003370:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003374:	f7fd ff44 	bl	8001200 <EXTI_ClearITPendingBit>
 8003378:	e7dc      	b.n	8003334 <EXTI15_10_IRQHandler+0x20>
		EXTI_ClearITPendingBit(1 << Y_LIMIT_BIT);
 800337a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800337e:	f7fd ff3f 	bl	8001200 <EXTI_ClearITPendingBit>
 8003382:	e7d2      	b.n	800332a <EXTI15_10_IRQHandler+0x16>
		EXTI_ClearITPendingBit(1 << X_LIMIT_BIT);
 8003384:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003388:	f7fd ff3a 	bl	8001200 <EXTI_ClearITPendingBit>
 800338c:	e7c8      	b.n	8003320 <EXTI15_10_IRQHandler+0xc>
 800338e:	bf00      	nop
 8003390:	e000e100 	.word	0xe000e100
 8003394:	20001408 	.word	0x20001408
 8003398:	20001440 	.word	0x20001440

0800339c <limits_go_home>:
// mask, which prevents the stepper algorithm from executing step pulses. Homing motions typically
// circumvent the processes for executing motions in normal operation.
// NOTE: Only the abort realtime command can interrupt this process.
// TODO: Move limit pin-specific calls to a general function for portability.
void limits_go_home(uint8_t cycle_mask)
{
 800339c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //char buffer[30];  // ZZZZZZZZZZZZZZ
  //printString("HOME START\r\n"); // ZZZZZZZZZZZZZZ
  if (sys.abort) { return; } // Block if system reset has been issued.
 80033a0:	f8df a25c 	ldr.w	sl, [pc, #604]	; 8003600 <limits_go_home+0x264>
{
 80033a4:	b093      	sub	sp, #76	; 0x4c
  if (sys.abort) { return; } // Block if system reset has been issued.
 80033a6:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80033aa:	b113      	cbz	r3, 80033b2 <limits_go_home+0x16>
    }
  }
  sys.step_control = STEP_CONTROL_NORMAL_OP; // Return step control to normal operation.

  //printString("HOME END\r\n"); // ZZZZZZZZZZZZZZ
}
 80033ac:	b013      	add	sp, #76	; 0x4c
 80033ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033b2:	4605      	mov	r5, r0
  pl_data->condition = (PL_COND_FLAG_SYSTEM_MOTION|PL_COND_FLAG_NO_FEED_OVERRIDE);
 80033b4:	2406      	movs	r4, #6
 80033b6:	498d      	ldr	r1, [pc, #564]	; (80035ec <limits_go_home+0x250>)
 80033b8:	9006      	str	r0, [sp, #24]
    if (bit_istrue(cycle_mask,bit(idx))) {
 80033ba:	f005 0501 	and.w	r5, r5, #1
 80033be:	6808      	ldr	r0, [r1, #0]
 80033c0:	6849      	ldr	r1, [r1, #4]
  memset(pl_data,0,sizeof(plan_line_data_t));
 80033c2:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
 80033c6:	aa09      	add	r2, sp, #36	; 0x24
 80033c8:	930b      	str	r3, [sp, #44]	; 0x2c
    if (bit_istrue(cycle_mask,bit(idx))) {
 80033ca:	f005 03ff 	and.w	r3, r5, #255	; 0xff
 80033ce:	c203      	stmia	r2!, {r0, r1}
  pl_data->condition = (PL_COND_FLAG_SYSTEM_MOTION|PL_COND_FLAG_NO_FEED_OVERRIDE);
 80033d0:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
    if (bit_istrue(cycle_mask,bit(idx))) {
 80033d4:	9307      	str	r3, [sp, #28]
 80033d6:	2d00      	cmp	r5, #0
 80033d8:	f040 80e6 	bne.w	80035a8 <limits_go_home+0x20c>
  float max_travel = 0.0f;
 80033dc:	2400      	movs	r4, #0
 80033de:	f8df 9224 	ldr.w	r9, [pc, #548]	; 8003604 <limits_go_home+0x268>
    if (bit_istrue(cycle_mask,bit(idx))) {
 80033e2:	9b06      	ldr	r3, [sp, #24]
 80033e4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80033e8:	9304      	str	r3, [sp, #16]
 80033ea:	b15b      	cbz	r3, 8003404 <limits_go_home+0x68>
      max_travel = max(max_travel,(-HOMING_AXIS_SEARCH_SCALAR)*settings.max_travel[idx]);
 80033ec:	4980      	ldr	r1, [pc, #512]	; (80035f0 <limits_go_home+0x254>)
 80033ee:	f8d9 0034 	ldr.w	r0, [r9, #52]	; 0x34
 80033f2:	f7fd fc61 	bl	8000cb8 <__aeabi_fmul>
 80033f6:	4606      	mov	r6, r0
 80033f8:	4601      	mov	r1, r0
 80033fa:	4620      	mov	r0, r4
 80033fc:	f7fd fe0e 	bl	800101c <__aeabi_fcmpge>
 8003400:	b900      	cbnz	r0, 8003404 <limits_go_home+0x68>
 8003402:	4634      	mov	r4, r6
    if (bit_istrue(cycle_mask,bit(idx))) {
 8003404:	9b06      	ldr	r3, [sp, #24]
 8003406:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800340a:	9303      	str	r3, [sp, #12]
 800340c:	b15b      	cbz	r3, 8003426 <limits_go_home+0x8a>
      max_travel = max(max_travel,(-HOMING_AXIS_SEARCH_SCALAR)*settings.max_travel[idx]);
 800340e:	4978      	ldr	r1, [pc, #480]	; (80035f0 <limits_go_home+0x254>)
 8003410:	f8d9 0038 	ldr.w	r0, [r9, #56]	; 0x38
 8003414:	f7fd fc50 	bl	8000cb8 <__aeabi_fmul>
 8003418:	4606      	mov	r6, r0
 800341a:	4601      	mov	r1, r0
 800341c:	4620      	mov	r0, r4
 800341e:	f7fd fdfd 	bl	800101c <__aeabi_fcmpge>
 8003422:	b900      	cbnz	r0, 8003426 <limits_go_home+0x8a>
 8003424:	4634      	mov	r4, r6
    if (bit_istrue(cycle_mask,bit(idx))) {
 8003426:	9b06      	ldr	r3, [sp, #24]
 8003428:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800342c:	9305      	str	r3, [sp, #20]
 800342e:	b15b      	cbz	r3, 8003448 <limits_go_home+0xac>
      max_travel = max(max_travel,(-HOMING_AXIS_SEARCH_SCALAR)*settings.max_travel[idx]);
 8003430:	496f      	ldr	r1, [pc, #444]	; (80035f0 <limits_go_home+0x254>)
 8003432:	f8d9 003c 	ldr.w	r0, [r9, #60]	; 0x3c
 8003436:	f7fd fc3f 	bl	8000cb8 <__aeabi_fmul>
 800343a:	4606      	mov	r6, r0
 800343c:	4601      	mov	r1, r0
 800343e:	4620      	mov	r0, r4
 8003440:	f7fd fdec 	bl	800101c <__aeabi_fcmpge>
 8003444:	b900      	cbnz	r0, 8003448 <limits_go_home+0xac>
 8003446:	4634      	mov	r4, r6
  float homing_rate = settings.homing_seek_rate;
 8003448:	2304      	movs	r3, #4
  bool approach = true;
 800344a:	2701      	movs	r7, #1
  float homing_rate = settings.homing_seek_rate;
 800344c:	9301      	str	r3, [sp, #4]
 800344e:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 8003452:	b2eb      	uxtb	r3, r5
 8003454:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8003608 <limits_go_home+0x26c>
 8003458:	9302      	str	r3, [sp, #8]
    system_convert_array_steps_to_mpos(target,sys_position);
 800345a:	4966      	ldr	r1, [pc, #408]	; (80035f4 <limits_go_home+0x258>)
 800345c:	a80e      	add	r0, sp, #56	; 0x38
 800345e:	f006 fbdd 	bl	8009c1c <system_convert_array_steps_to_mpos>
      if (bit_istrue(cycle_mask,bit(idx))) {
 8003462:	9b02      	ldr	r3, [sp, #8]
 8003464:	2b00      	cmp	r3, #0
 8003466:	f000 8143 	beq.w	80036f0 <limits_go_home+0x354>
          sys_position[idx] = 0;
 800346a:	2100      	movs	r1, #0
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 800346c:	f8b9 305a 	ldrh.w	r3, [r9, #90]	; 0x5a
          sys_position[idx] = 0;
 8003470:	4a60      	ldr	r2, [pc, #384]	; (80035f4 <limits_go_home+0x258>)
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8003472:	07dd      	lsls	r5, r3, #31
          sys_position[idx] = 0;
 8003474:	6011      	str	r1, [r2, #0]
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8003476:	f140 814f 	bpl.w	8003718 <limits_go_home+0x37c>
          if (approach) { target[idx] = -max_travel; }
 800347a:	2f00      	cmp	r7, #0
 800347c:	f040 814f 	bne.w	800371e <limits_go_home+0x382>
          else { target[idx] = max_travel; }
 8003480:	940e      	str	r4, [sp, #56]	; 0x38
        axislock |= step_pin[idx];
 8003482:	2302      	movs	r3, #2
        n_active_axis++;
 8003484:	2001      	movs	r0, #1
        axislock |= step_pin[idx];
 8003486:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
      if (bit_istrue(cycle_mask,bit(idx))) {
 800348a:	9a04      	ldr	r2, [sp, #16]
 800348c:	b17a      	cbz	r2, 80034ae <limits_go_home+0x112>
          sys_position[idx] = 0;
 800348e:	2000      	movs	r0, #0
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8003490:	f8b9 205a 	ldrh.w	r2, [r9, #90]	; 0x5a
          sys_position[idx] = 0;
 8003494:	4957      	ldr	r1, [pc, #348]	; (80035f4 <limits_go_home+0x258>)
 8003496:	6048      	str	r0, [r1, #4]
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8003498:	0790      	lsls	r0, r2, #30
 800349a:	f140 8132 	bpl.w	8003702 <limits_go_home+0x366>
          if (approach) { target[idx] = -max_travel; }
 800349e:	2f00      	cmp	r7, #0
 80034a0:	f040 8132 	bne.w	8003708 <limits_go_home+0x36c>
          else { target[idx] = max_travel; }
 80034a4:	940f      	str	r4, [sp, #60]	; 0x3c
        n_active_axis++;
 80034a6:	4618      	mov	r0, r3
        axislock |= step_pin[idx];
 80034a8:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
 80034ac:	4315      	orrs	r5, r2
      if (bit_istrue(cycle_mask,bit(idx))) {
 80034ae:	9b03      	ldr	r3, [sp, #12]
 80034b0:	b183      	cbz	r3, 80034d4 <limits_go_home+0x138>
          sys_position[idx] = 0;
 80034b2:	2100      	movs	r1, #0
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 80034b4:	f8b9 305a 	ldrh.w	r3, [r9, #90]	; 0x5a
          sys_position[idx] = 0;
 80034b8:	4a4e      	ldr	r2, [pc, #312]	; (80035f4 <limits_go_home+0x258>)
        n_active_axis++;
 80034ba:	3001      	adds	r0, #1
          sys_position[idx] = 0;
 80034bc:	6091      	str	r1, [r2, #8]
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 80034be:	0759      	lsls	r1, r3, #29
        n_active_axis++;
 80034c0:	b2c0      	uxtb	r0, r0
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 80034c2:	f140 8130 	bpl.w	8003726 <limits_go_home+0x38a>
          if (approach) { target[idx] = -max_travel; }
 80034c6:	2f00      	cmp	r7, #0
 80034c8:	f040 8130 	bne.w	800372c <limits_go_home+0x390>
          else { target[idx] = max_travel; }
 80034cc:	9410      	str	r4, [sp, #64]	; 0x40
        axislock |= step_pin[idx];
 80034ce:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 80034d2:	431d      	orrs	r5, r3
      if (bit_istrue(cycle_mask,bit(idx))) {
 80034d4:	9b05      	ldr	r3, [sp, #20]
 80034d6:	b183      	cbz	r3, 80034fa <limits_go_home+0x15e>
          sys_position[idx] = 0;
 80034d8:	2100      	movs	r1, #0
 80034da:	4a46      	ldr	r2, [pc, #280]	; (80035f4 <limits_go_home+0x258>)
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 80034dc:	f8b9 305a 	ldrh.w	r3, [r9, #90]	; 0x5a
        n_active_axis++;
 80034e0:	3001      	adds	r0, #1
          sys_position[idx] = 0;
 80034e2:	60d1      	str	r1, [r2, #12]
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 80034e4:	071a      	lsls	r2, r3, #28
        n_active_axis++;
 80034e6:	b2c0      	uxtb	r0, r0
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 80034e8:	f100 8112 	bmi.w	8003710 <limits_go_home+0x374>
          if (approach) { target[idx] = max_travel; }
 80034ec:	b90f      	cbnz	r7, 80034f2 <limits_go_home+0x156>
          if (approach) { target[idx] = -max_travel; }
 80034ee:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
        axislock |= step_pin[idx];
 80034f2:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
          if (approach) { target[idx] = -max_travel; }
 80034f6:	9411      	str	r4, [sp, #68]	; 0x44
        axislock |= step_pin[idx];
 80034f8:	431d      	orrs	r5, r3
    homing_rate *= sqrtf(n_active_axis); // [sqrt(N_AXIS)] Adjust so individual axes all move at homing rate.
 80034fa:	f7fd fb85 	bl	8000c08 <__aeabi_ui2f>
 80034fe:	f008 fa6b 	bl	800b9d8 <sqrtf>
 8003502:	4631      	mov	r1, r6
    sys.homing_axis_lock = axislock;
 8003504:	f8aa 5006 	strh.w	r5, [sl, #6]
    homing_rate *= sqrtf(n_active_axis); // [sqrt(N_AXIS)] Adjust so individual axes all move at homing rate.
 8003508:	f7fd fbd6 	bl	8000cb8 <__aeabi_fmul>
    plan_buffer_line(target, pl_data); // Bypass mc_line(). Directly plan homing motion.
 800350c:	a90b      	add	r1, sp, #44	; 0x2c
    pl_data->feed_rate = homing_rate; // Set current homing rate.
 800350e:	900b      	str	r0, [sp, #44]	; 0x2c
    plan_buffer_line(target, pl_data); // Bypass mc_line(). Directly plan homing motion.
 8003510:	a80e      	add	r0, sp, #56	; 0x38
 8003512:	f001 f97d 	bl	8004810 <plan_buffer_line>
    sys.step_control = STEP_CONTROL_EXECUTE_SYS_MOTION; // Set to execute homing motion and clear existing flags.
 8003516:	2304      	movs	r3, #4
 8003518:	f88a 3004 	strb.w	r3, [sl, #4]
    st_prep_buffer(); // Prep and fill segment buffer from newly planned block.
 800351c:	f005 faf4 	bl	8008b08 <st_prep_buffer>
    st_wake_up(); // Initiate motion
 8003520:	f004 ff70 	bl	8008404 <st_wake_up>
  pin = GPIO_ReadInputData(LIMIT_PIN);
 8003524:	4e34      	ldr	r6, [pc, #208]	; (80035f8 <limits_go_home+0x25c>)
      if (approach) {
 8003526:	2f00      	cmp	r7, #0
 8003528:	d14e      	bne.n	80035c8 <limits_go_home+0x22c>
      st_prep_buffer(); // Check and prep segment buffer. NOTE: Should take no longer than 200us.
 800352a:	f005 faed 	bl	8008b08 <st_prep_buffer>
      if (sys_rt_exec_state & (EXEC_SAFETY_DOOR | EXEC_RESET | EXEC_CYCLE_STOP)) {
 800352e:	f898 3000 	ldrb.w	r3, [r8]
 8003532:	f013 0f34 	tst.w	r3, #52	; 0x34
 8003536:	f040 80b1 	bne.w	800369c <limits_go_home+0x300>
    } while (STEP_MASK & axislock);
 800353a:	072b      	lsls	r3, r5, #28
 800353c:	d1f3      	bne.n	8003526 <limits_go_home+0x18a>
    st_reset(); // Immediately force kill steppers and reset step segment buffer.
 800353e:	f005 f97b 	bl	8008838 <st_reset>
    delay_ms(settings.homing_debounce_delay); // Delay to allow transient dynamics to dissipate.
 8003542:	f8b9 0064 	ldrh.w	r0, [r9, #100]	; 0x64
 8003546:	f000 fe57 	bl	80041f8 <delay_ms>
 800354a:	f087 0501 	eor.w	r5, r7, #1
    if (approach) {
 800354e:	2f00      	cmp	r7, #0
 8003550:	f040 80d2 	bne.w	80036f8 <limits_go_home+0x35c>
      max_travel = settings.homing_pulloff*HOMING_AXIS_LOCATE_SCALAR;
 8003554:	4929      	ldr	r1, [pc, #164]	; (80035fc <limits_go_home+0x260>)
 8003556:	f8d9 0068 	ldr.w	r0, [r9, #104]	; 0x68
 800355a:	f7fd fbad 	bl	8000cb8 <__aeabi_fmul>
 800355e:	4604      	mov	r4, r0
      homing_rate = settings.homing_feed_rate;
 8003560:	f8d9 605c 	ldr.w	r6, [r9, #92]	; 0x5c
 8003564:	9b01      	ldr	r3, [sp, #4]
    approach = !approach;
 8003566:	462f      	mov	r7, r5
 8003568:	3b01      	subs	r3, #1
  } while (n_cycle-- > 0);
 800356a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 800356e:	9301      	str	r3, [sp, #4]
 8003570:	f47f af73 	bne.w	800345a <limits_go_home+0xbe>
    if (cycle_mask & bit(idx)) {
 8003574:	9b07      	ldr	r3, [sp, #28]
 8003576:	b113      	cbz	r3, 800357e <limits_go_home+0x1e2>
        sys_position[idx] = set_axis_position;
 8003578:	4b1e      	ldr	r3, [pc, #120]	; (80035f4 <limits_go_home+0x258>)
 800357a:	9a01      	ldr	r2, [sp, #4]
 800357c:	601a      	str	r2, [r3, #0]
    if (cycle_mask & bit(idx)) {
 800357e:	9b04      	ldr	r3, [sp, #16]
 8003580:	b113      	cbz	r3, 8003588 <limits_go_home+0x1ec>
        sys_position[idx] = set_axis_position;
 8003582:	2300      	movs	r3, #0
 8003584:	4a1b      	ldr	r2, [pc, #108]	; (80035f4 <limits_go_home+0x258>)
 8003586:	6053      	str	r3, [r2, #4]
    if (cycle_mask & bit(idx)) {
 8003588:	9b03      	ldr	r3, [sp, #12]
 800358a:	b113      	cbz	r3, 8003592 <limits_go_home+0x1f6>
        sys_position[idx] = set_axis_position;
 800358c:	2300      	movs	r3, #0
 800358e:	4a19      	ldr	r2, [pc, #100]	; (80035f4 <limits_go_home+0x258>)
 8003590:	6093      	str	r3, [r2, #8]
    if (cycle_mask & bit(idx)) {
 8003592:	9b05      	ldr	r3, [sp, #20]
 8003594:	b113      	cbz	r3, 800359c <limits_go_home+0x200>
        sys_position[idx] = set_axis_position;
 8003596:	2300      	movs	r3, #0
 8003598:	4a16      	ldr	r2, [pc, #88]	; (80035f4 <limits_go_home+0x258>)
 800359a:	60d3      	str	r3, [r2, #12]
  sys.step_control = STEP_CONTROL_NORMAL_OP; // Return step control to normal operation.
 800359c:	2300      	movs	r3, #0
 800359e:	f88a 3004 	strb.w	r3, [sl, #4]
}
 80035a2:	b013      	add	sp, #76	; 0x4c
 80035a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      max_travel = max(max_travel,(-HOMING_AXIS_SEARCH_SCALAR)*settings.max_travel[idx]);
 80035a8:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8003604 <limits_go_home+0x268>
 80035ac:	4910      	ldr	r1, [pc, #64]	; (80035f0 <limits_go_home+0x254>)
 80035ae:	f8d9 0030 	ldr.w	r0, [r9, #48]	; 0x30
 80035b2:	f7fd fb81 	bl	8000cb8 <__aeabi_fmul>
 80035b6:	2100      	movs	r1, #0
 80035b8:	4604      	mov	r4, r0
 80035ba:	f7fd fd2f 	bl	800101c <__aeabi_fcmpge>
 80035be:	2800      	cmp	r0, #0
 80035c0:	f47f af0f 	bne.w	80033e2 <limits_go_home+0x46>
 80035c4:	2400      	movs	r4, #0
 80035c6:	e70c      	b.n	80033e2 <limits_go_home+0x46>
  pin = GPIO_ReadInputData(LIMIT_PIN);
 80035c8:	4630      	mov	r0, r6
 80035ca:	f7fe f87d 	bl	80016c8 <GPIO_ReadInputData>
  uint8_t i = 0;
 80035ce:	2400      	movs	r4, #0
  pin = GPIO_ReadInputData(LIMIT_PIN);
 80035d0:	4683      	mov	fp, r0
	  pin2 = GPIO_ReadInputData(LIMIT_PIN);
 80035d2:	4630      	mov	r0, r6
 80035d4:	f7fe f878 	bl	80016c8 <GPIO_ReadInputData>
	  i++;
 80035d8:	3401      	adds	r4, #1
	  if(pin != pin2)
 80035da:	4558      	cmp	r0, fp
	  i++;
 80035dc:	b2e4      	uxtb	r4, r4
	  if(pin != pin2)
 80035de:	d015      	beq.n	800360c <limits_go_home+0x270>
		  pin = GPIO_ReadInputData(LIMIT_PIN);
 80035e0:	4630      	mov	r0, r6
 80035e2:	f7fe f871 	bl	80016c8 <GPIO_ReadInputData>
	  i++;
 80035e6:	2401      	movs	r4, #1
		  pin = GPIO_ReadInputData(LIMIT_PIN);
 80035e8:	4683      	mov	fp, r0
 80035ea:	e7f2      	b.n	80035d2 <limits_go_home+0x236>
 80035ec:	0800cb2c 	.word	0x0800cb2c
 80035f0:	bfc00000 	.word	0xbfc00000
 80035f4:	20001430 	.word	0x20001430
 80035f8:	40010c00 	.word	0x40010c00
 80035fc:	40a00000 	.word	0x40a00000
 8003600:	20001408 	.word	0x20001408
 8003604:	20001744 	.word	0x20001744
 8003608:	2000141d 	.word	0x2000141d
  } while (i<READ_CNT);
 800360c:	2c09      	cmp	r4, #9
 800360e:	d9e0      	bls.n	80035d2 <limits_go_home+0x236>
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_LIMIT_PINS)) { pin ^= LIMIT_MASK; }
 8003610:	f899 3058 	ldrb.w	r3, [r9, #88]	; 0x58
 8003614:	065b      	lsls	r3, r3, #25
 8003616:	bf5c      	itt	pl
 8003618:	f48b 4070 	eorpl.w	r0, fp, #61440	; 0xf000
 800361c:	b280      	uxthpl	r0, r0
  if (pin) {
 800361e:	2800      	cmp	r0, #0
 8003620:	d032      	beq.n	8003688 <limits_go_home+0x2ec>
      if (pin & limit_pin_mask[idx]) { limit_state |= (1 << idx); }
 8003622:	4a5f      	ldr	r2, [pc, #380]	; (80037a0 <limits_go_home+0x404>)
 8003624:	8813      	ldrh	r3, [r2, #0]
 8003626:	8852      	ldrh	r2, [r2, #2]
 8003628:	4218      	tst	r0, r3
 800362a:	bf14      	ite	ne
 800362c:	2301      	movne	r3, #1
 800362e:	2300      	moveq	r3, #0
 8003630:	4210      	tst	r0, r2
 8003632:	4a5b      	ldr	r2, [pc, #364]	; (80037a0 <limits_go_home+0x404>)
 8003634:	bf18      	it	ne
 8003636:	f043 0302 	orrne.w	r3, r3, #2
 800363a:	8892      	ldrh	r2, [r2, #4]
 800363c:	4210      	tst	r0, r2
 800363e:	4a58      	ldr	r2, [pc, #352]	; (80037a0 <limits_go_home+0x404>)
 8003640:	bf18      	it	ne
 8003642:	f043 0304 	orrne.w	r3, r3, #4
 8003646:	88d2      	ldrh	r2, [r2, #6]
 8003648:	4210      	tst	r0, r2
          if (axislock & step_pin[idx]) {
 800364a:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
      if (pin & limit_pin_mask[idx]) { limit_state |= (1 << idx); }
 800364e:	bf18      	it	ne
 8003650:	f043 0308 	orrne.w	r3, r3, #8
          if (axislock & step_pin[idx]) {
 8003654:	4215      	tst	r5, r2
 8003656:	d002      	beq.n	800365e <limits_go_home+0x2c2>
            if (limit_state & (1 << idx)) {
 8003658:	07dc      	lsls	r4, r3, #31
                axislock &= ~(step_pin[idx]);
 800365a:	bf48      	it	mi
 800365c:	4395      	bicmi	r5, r2
          if (axislock & step_pin[idx]) {
 800365e:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
 8003662:	4215      	tst	r5, r2
 8003664:	d002      	beq.n	800366c <limits_go_home+0x2d0>
            if (limit_state & (1 << idx)) {
 8003666:	0798      	lsls	r0, r3, #30
                axislock &= ~(step_pin[idx]);
 8003668:	bf48      	it	mi
 800366a:	4395      	bicmi	r5, r2
          if (axislock & step_pin[idx]) {
 800366c:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8003670:	4215      	tst	r5, r2
 8003672:	d002      	beq.n	800367a <limits_go_home+0x2de>
            if (limit_state & (1 << idx)) {
 8003674:	0759      	lsls	r1, r3, #29
                axislock &= ~(step_pin[idx]);
 8003676:	bf48      	it	mi
 8003678:	4395      	bicmi	r5, r2
          if (axislock & step_pin[idx]) {
 800367a:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 800367e:	4215      	tst	r5, r2
 8003680:	d002      	beq.n	8003688 <limits_go_home+0x2ec>
            if (limit_state & (1 << idx)) {
 8003682:	08db      	lsrs	r3, r3, #3
                axislock &= ~(step_pin[idx]);
 8003684:	bf18      	it	ne
 8003686:	4395      	bicne	r5, r2
        sys.homing_axis_lock = axislock;
 8003688:	f8aa 5006 	strh.w	r5, [sl, #6]
      st_prep_buffer(); // Check and prep segment buffer. NOTE: Should take no longer than 200us.
 800368c:	f005 fa3c 	bl	8008b08 <st_prep_buffer>
      if (sys_rt_exec_state & (EXEC_SAFETY_DOOR | EXEC_RESET | EXEC_CYCLE_STOP)) {
 8003690:	f898 3000 	ldrb.w	r3, [r8]
 8003694:	f013 0f34 	tst.w	r3, #52	; 0x34
 8003698:	f43f af4f 	beq.w	800353a <limits_go_home+0x19e>
        uint8_t rt_exec = sys_rt_exec_state;
 800369c:	f898 4000 	ldrb.w	r4, [r8]
 80036a0:	b2e4      	uxtb	r4, r4
        if (rt_exec & EXEC_RESET) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_RESET); }
 80036a2:	06e5      	lsls	r5, r4, #27
 80036a4:	d446      	bmi.n	8003734 <limits_go_home+0x398>
        if (rt_exec & EXEC_SAFETY_DOOR) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_DOOR); }
 80036a6:	06a0      	lsls	r0, r4, #26
 80036a8:	d40a      	bmi.n	80036c0 <limits_go_home+0x324>
        if (!approach && (limits_get_state() & cycle_mask)) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_PULLOFF); }
 80036aa:	b177      	cbz	r7, 80036ca <limits_go_home+0x32e>
        if (approach && (rt_exec & EXEC_CYCLE_STOP)) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_APPROACH); }
 80036ac:	0762      	lsls	r2, r4, #29
 80036ae:	d46e      	bmi.n	800378e <limits_go_home+0x3f2>
        if (sys_rt_exec_alarm) {
 80036b0:	4b3c      	ldr	r3, [pc, #240]	; (80037a4 <limits_go_home+0x408>)
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d16e      	bne.n	8003796 <limits_go_home+0x3fa>
          system_clear_exec_state_flag(EXEC_CYCLE_STOP);
 80036b8:	2004      	movs	r0, #4
 80036ba:	f006 fb5b 	bl	8009d74 <system_clear_exec_state_flag>
          break;
 80036be:	e73e      	b.n	800353e <limits_go_home+0x1a2>
        if (rt_exec & EXEC_SAFETY_DOOR) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_DOOR); }
 80036c0:	2007      	movs	r0, #7
 80036c2:	f006 fb61 	bl	8009d88 <system_set_exec_alarm>
        if (!approach && (limits_get_state() & cycle_mask)) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_PULLOFF); }
 80036c6:	2f00      	cmp	r7, #0
 80036c8:	d1f0      	bne.n	80036ac <limits_go_home+0x310>
  pin = GPIO_ReadInputData(LIMIT_PIN);
 80036ca:	4837      	ldr	r0, [pc, #220]	; (80037a8 <limits_go_home+0x40c>)
 80036cc:	f7fd fffc 	bl	80016c8 <GPIO_ReadInputData>
  uint8_t i = 0;
 80036d0:	463e      	mov	r6, r7
  pin = GPIO_ReadInputData(LIMIT_PIN);
 80036d2:	4604      	mov	r4, r0
	  pin2 = GPIO_ReadInputData(LIMIT_PIN);
 80036d4:	4d34      	ldr	r5, [pc, #208]	; (80037a8 <limits_go_home+0x40c>)
 80036d6:	4628      	mov	r0, r5
 80036d8:	f7fd fff6 	bl	80016c8 <GPIO_ReadInputData>
	  i++;
 80036dc:	3601      	adds	r6, #1
	  if(pin != pin2)
 80036de:	42a0      	cmp	r0, r4
	  i++;
 80036e0:	b2f6      	uxtb	r6, r6
	  if(pin != pin2)
 80036e2:	d02b      	beq.n	800373c <limits_go_home+0x3a0>
		  pin = GPIO_ReadInputData(LIMIT_PIN);
 80036e4:	4628      	mov	r0, r5
 80036e6:	f7fd ffef 	bl	80016c8 <GPIO_ReadInputData>
	  i++;
 80036ea:	2601      	movs	r6, #1
		  pin = GPIO_ReadInputData(LIMIT_PIN);
 80036ec:	4604      	mov	r4, r0
 80036ee:	e7f2      	b.n	80036d6 <limits_go_home+0x33a>
 80036f0:	461d      	mov	r5, r3
    n_active_axis = 0;
 80036f2:	4618      	mov	r0, r3
      if (bit_istrue(cycle_mask,bit(idx))) {
 80036f4:	2301      	movs	r3, #1
 80036f6:	e6c8      	b.n	800348a <limits_go_home+0xee>
      max_travel = settings.homing_pulloff;
 80036f8:	f8d9 4068 	ldr.w	r4, [r9, #104]	; 0x68
      homing_rate = settings.homing_seek_rate;
 80036fc:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 8003700:	e730      	b.n	8003564 <limits_go_home+0x1c8>
          if (approach) { target[idx] = max_travel; }
 8003702:	2f00      	cmp	r7, #0
 8003704:	f47f aece 	bne.w	80034a4 <limits_go_home+0x108>
          if (approach) { target[idx] = -max_travel; }
 8003708:	f104 4200 	add.w	r2, r4, #2147483648	; 0x80000000
 800370c:	920f      	str	r2, [sp, #60]	; 0x3c
 800370e:	e6ca      	b.n	80034a6 <limits_go_home+0x10a>
 8003710:	2f00      	cmp	r7, #0
 8003712:	f47f aeec 	bne.w	80034ee <limits_go_home+0x152>
 8003716:	e6ec      	b.n	80034f2 <limits_go_home+0x156>
          if (approach) { target[idx] = max_travel; }
 8003718:	2f00      	cmp	r7, #0
 800371a:	f47f aeb1 	bne.w	8003480 <limits_go_home+0xe4>
          if (approach) { target[idx] = -max_travel; }
 800371e:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
 8003722:	930e      	str	r3, [sp, #56]	; 0x38
 8003724:	e6ad      	b.n	8003482 <limits_go_home+0xe6>
          if (approach) { target[idx] = max_travel; }
 8003726:	2f00      	cmp	r7, #0
 8003728:	f47f aed0 	bne.w	80034cc <limits_go_home+0x130>
          if (approach) { target[idx] = -max_travel; }
 800372c:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
 8003730:	9310      	str	r3, [sp, #64]	; 0x40
 8003732:	e6cc      	b.n	80034ce <limits_go_home+0x132>
        if (rt_exec & EXEC_RESET) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_RESET); }
 8003734:	2006      	movs	r0, #6
 8003736:	f006 fb27 	bl	8009d88 <system_set_exec_alarm>
 800373a:	e7b4      	b.n	80036a6 <limits_go_home+0x30a>
  } while (i<READ_CNT);
 800373c:	2e09      	cmp	r6, #9
 800373e:	d9ca      	bls.n	80036d6 <limits_go_home+0x33a>
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_LIMIT_PINS)) { pin ^= LIMIT_MASK; }
 8003740:	f899 3058 	ldrb.w	r3, [r9, #88]	; 0x58
 8003744:	0659      	lsls	r1, r3, #25
 8003746:	bf5c      	itt	pl
 8003748:	f484 4070 	eorpl.w	r0, r4, #61440	; 0xf000
 800374c:	b280      	uxthpl	r0, r0
  if (pin) {
 800374e:	2800      	cmp	r0, #0
 8003750:	d0ae      	beq.n	80036b0 <limits_go_home+0x314>
      if (pin & limit_pin_mask[idx]) { limit_state |= (1 << idx); }
 8003752:	4a13      	ldr	r2, [pc, #76]	; (80037a0 <limits_go_home+0x404>)
 8003754:	8813      	ldrh	r3, [r2, #0]
 8003756:	8852      	ldrh	r2, [r2, #2]
 8003758:	4218      	tst	r0, r3
 800375a:	bf14      	ite	ne
 800375c:	2301      	movne	r3, #1
 800375e:	2300      	moveq	r3, #0
 8003760:	4210      	tst	r0, r2
 8003762:	4a0f      	ldr	r2, [pc, #60]	; (80037a0 <limits_go_home+0x404>)
 8003764:	bf18      	it	ne
 8003766:	f043 0302 	orrne.w	r3, r3, #2
 800376a:	8892      	ldrh	r2, [r2, #4]
 800376c:	4210      	tst	r0, r2
 800376e:	4a0c      	ldr	r2, [pc, #48]	; (80037a0 <limits_go_home+0x404>)
 8003770:	bf18      	it	ne
 8003772:	f043 0304 	orrne.w	r3, r3, #4
 8003776:	88d2      	ldrh	r2, [r2, #6]
 8003778:	4210      	tst	r0, r2
        if (!approach && (limits_get_state() & cycle_mask)) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_PULLOFF); }
 800377a:	9a06      	ldr	r2, [sp, #24]
      if (pin & limit_pin_mask[idx]) { limit_state |= (1 << idx); }
 800377c:	bf18      	it	ne
 800377e:	f043 0308 	orrne.w	r3, r3, #8
        if (!approach && (limits_get_state() & cycle_mask)) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_PULLOFF); }
 8003782:	421a      	tst	r2, r3
 8003784:	d094      	beq.n	80036b0 <limits_go_home+0x314>
 8003786:	2008      	movs	r0, #8
 8003788:	f006 fafe 	bl	8009d88 <system_set_exec_alarm>
 800378c:	e790      	b.n	80036b0 <limits_go_home+0x314>
        if (approach && (rt_exec & EXEC_CYCLE_STOP)) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_APPROACH); }
 800378e:	2009      	movs	r0, #9
 8003790:	f006 fafa 	bl	8009d88 <system_set_exec_alarm>
 8003794:	e78c      	b.n	80036b0 <limits_go_home+0x314>
          mc_reset(); // Stop motors, if they are running.
 8003796:	f000 fc41 	bl	800401c <mc_reset>
          protocol_execute_realtime();
 800379a:	f002 fb07 	bl	8005dac <protocol_execute_realtime>
          return;
 800379e:	e605      	b.n	80033ac <limits_go_home+0x10>
 80037a0:	0800cb24 	.word	0x0800cb24
 80037a4:	20001440 	.word	0x20001440
 80037a8:	40010c00 	.word	0x40010c00

080037ac <limits_soft_check>:

// Performs a soft limit check. Called from mc_line() only. Assumes the machine has been homed,
// the workspace volume is in all negative space, and the system is in normal operation.
// NOTE: Used by jogging to limit travel within soft-limit volume.
void limits_soft_check(float *target)
{
 80037ac:	b510      	push	{r4, lr}
  if (system_check_travel_limits(target)) {
 80037ae:	f006 fa59 	bl	8009c64 <system_check_travel_limits>
 80037b2:	b1c8      	cbz	r0, 80037e8 <limits_soft_check+0x3c>
    sys.soft_limit = true;
 80037b4:	2301      	movs	r3, #1
 80037b6:	4c0d      	ldr	r4, [pc, #52]	; (80037ec <limits_soft_check+0x40>)
    // Force feed hold if cycle is active. All buffered blocks are guaranteed to be within
    // workspace volume so just come to a controlled stop so position is not lost. When complete
    // enter alarm mode.
    if (sys.state == STATE_CYCLE) {
 80037b8:	7820      	ldrb	r0, [r4, #0]
    sys.soft_limit = true;
 80037ba:	70e3      	strb	r3, [r4, #3]
    if (sys.state == STATE_CYCLE) {
 80037bc:	2808      	cmp	r0, #8
 80037be:	d008      	beq.n	80037d2 <limits_soft_check+0x26>
      do {
        protocol_execute_realtime();
        if (sys.abort) { return; }
      } while ( sys.state != STATE_IDLE );
    }
    mc_reset(); // Issue system reset and ensure spindle and coolant are shutdown.
 80037c0:	f000 fc2c 	bl	800401c <mc_reset>
    system_set_exec_alarm(EXEC_ALARM_SOFT_LIMIT); // Indicate soft limit critical event
 80037c4:	2002      	movs	r0, #2
 80037c6:	f006 fadf 	bl	8009d88 <system_set_exec_alarm>
    protocol_execute_realtime(); // Execute to enter critical event loop and system abort
    return;
  }
}
 80037ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    protocol_execute_realtime(); // Execute to enter critical event loop and system abort
 80037ce:	f002 baed 	b.w	8005dac <protocol_execute_realtime>
      system_set_exec_state_flag(EXEC_FEED_HOLD);
 80037d2:	f006 fac5 	bl	8009d60 <system_set_exec_state_flag>
 80037d6:	e002      	b.n	80037de <limits_soft_check+0x32>
      } while ( sys.state != STATE_IDLE );
 80037d8:	7823      	ldrb	r3, [r4, #0]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d0f0      	beq.n	80037c0 <limits_soft_check+0x14>
        protocol_execute_realtime();
 80037de:	f002 fae5 	bl	8005dac <protocol_execute_realtime>
        if (sys.abort) { return; }
 80037e2:	7863      	ldrb	r3, [r4, #1]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d0f7      	beq.n	80037d8 <limits_soft_check+0x2c>
}
 80037e8:	bd10      	pop	{r4, pc}
 80037ea:	bf00      	nop
 80037ec:	20001408 	.word	0x20001408

080037f0 <USART3_Configuration>:

#endif

#ifdef USE_TMC2300
void USART3_Configuration(u32 BaudRate)
{
 80037f0:	b570      	push	{r4, r5, r6, lr}
 80037f2:	4606      	mov	r6, r0
 80037f4:	b086      	sub	sp, #24
	GPIO_InitTypeDef GPIO_InitStructure;
	USART_InitTypeDef USART_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
 80037f6:	f44f 7040 	mov.w	r0, #768	; 0x300
 80037fa:	f7fd fc7f 	bl	80010fc <NVIC_PriorityGroupConfig>
	NVIC_InitStructure.NVIC_IRQChannel = USART3_IRQn;
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;

	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80037fe:	2501      	movs	r5, #1
	NVIC_InitStructure.NVIC_IRQChannel = USART3_IRQn;
 8003800:	2327      	movs	r3, #39	; 0x27
	NVIC_Init(&NVIC_InitStructure);
 8003802:	a801      	add	r0, sp, #4
	NVIC_InitStructure.NVIC_IRQChannel = USART3_IRQn;
 8003804:	f8ad 3004 	strh.w	r3, [sp, #4]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8003808:	f88d 5007 	strb.w	r5, [sp, #7]
	NVIC_Init(&NVIC_InitStructure);
 800380c:	f7fd fc80 	bl	8001110 <NVIC_Init>
	//RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3 | RCC_APB2Periph_GPIOB | RCC_APB2Periph_AFIO, ENABLE);
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
 8003810:	4629      	mov	r1, r5
 8003812:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8003816:	f7fe f81b 	bl	8001850 <RCC_APB1PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB | RCC_APB2Periph_AFIO, ENABLE);
 800381a:	4629      	mov	r1, r5
 800381c:	2009      	movs	r0, #9
 800381e:	f7fe f80b 	bl	8001838 <RCC_APB2PeriphClockCmd>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
 8003822:	f44f 6180 	mov.w	r1, #1024	; 0x400
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8003826:	2218      	movs	r2, #24
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8003828:	2303      	movs	r3, #3
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 800382a:	4c1a      	ldr	r4, [pc, #104]	; (8003894 <USART3_Configuration+0xa4>)
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
 800382c:	f8ad 1000 	strh.w	r1, [sp]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003830:	4620      	mov	r0, r4
 8003832:	4669      	mov	r1, sp
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8003834:	f88d 2003 	strb.w	r2, [sp, #3]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8003838:	f88d 3002 	strb.w	r3, [sp, #2]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 800383c:	f7fd fdbe 	bl	80013bc <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
 8003840:	f44f 6200 	mov.w	r2, #2048	; 0x800
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8003844:	2304      	movs	r3, #4
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003846:	4669      	mov	r1, sp
 8003848:	4620      	mov	r0, r4
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
 800384a:	f8ad 2000 	strh.w	r2, [sp]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 800384e:	f88d 3003 	strb.w	r3, [sp, #3]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003852:	f7fd fdb3 	bl	80013bc <GPIO_Init>

	USART_InitStructure.USART_BaudRate = BaudRate;
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
	USART_InitStructure.USART_Parity = USART_Parity_No;
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8003856:	2300      	movs	r3, #0
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8003858:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 800385c:	e9cd 3203 	strd	r3, r2, [sp, #12]
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
	USART3->CR1 |= (USART_CR1_RE | USART_CR1_TE);
 8003860:	f5a4 4444 	sub.w	r4, r4, #50176	; 0xc400
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8003864:	f8ad 3014 	strh.w	r3, [sp, #20]
	USART3->CR1 |= (USART_CR1_RE | USART_CR1_TE);
 8003868:	89a3      	ldrh	r3, [r4, #12]
	USART_Init(USART3, &USART_InitStructure);
 800386a:	4620      	mov	r0, r4
	USART3->CR1 |= (USART_CR1_RE | USART_CR1_TE);
 800386c:	f043 030c 	orr.w	r3, r3, #12
	USART_InitStructure.USART_BaudRate = BaudRate;
 8003870:	9602      	str	r6, [sp, #8]
	USART_Init(USART3, &USART_InitStructure);
 8003872:	a902      	add	r1, sp, #8
	USART3->CR1 |= (USART_CR1_RE | USART_CR1_TE);
 8003874:	81a3      	strh	r3, [r4, #12]
	USART_Init(USART3, &USART_InitStructure);
 8003876:	f7fe f8c9 	bl	8001a0c <USART_Init>
	//	USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
	USART_ITConfig(USART3, USART_IT_RXNE, ENABLE); // DISABLED INTERRUPTS for now!!!
 800387a:	462a      	mov	r2, r5
 800387c:	4620      	mov	r0, r4
 800387e:	f240 5125 	movw	r1, #1317	; 0x525
 8003882:	f7fe f929 	bl	8001ad8 <USART_ITConfig>
	USART_Cmd(USART3, ENABLE);
 8003886:	4629      	mov	r1, r5
 8003888:	4620      	mov	r0, r4
 800388a:	f7fe f919 	bl	8001ac0 <USART_Cmd>
		USART_SendData(USART3, cmd1[i]);
	}
	*/


}
 800388e:	b006      	add	sp, #24
 8003890:	bd70      	pop	{r4, r5, r6, pc}
 8003892:	bf00      	nop
 8003894:	40010c00 	.word	0x40010c00

08003898 <main>:
#ifdef WIN32
int main(int argc, char *argv[])
#else
int main(void)
#endif
{
 8003898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if defined (STM32F103C8)
    //GPIO_PinRemapConfig(GPIO_Remap_SWJ_Disable, ENABLE); // ??? Disable JTAG and SWD!?? Bug?
#ifdef LEDBLINK
	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 800389c:	2101      	movs	r1, #1
{
 800389e:	b083      	sub	sp, #12
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 80038a0:	2010      	movs	r0, #16
 80038a2:	f7fd ffc9 	bl	8001838 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
 80038a6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 80038aa:	2202      	movs	r2, #2
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 80038ac:	2310      	movs	r3, #16
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
 80038ae:	a902      	add	r1, sp, #8
 80038b0:	f821 0d04 	strh.w	r0, [r1, #-4]!
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 80038b4:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 80038b8:	f500 4070 	add.w	r0, r0, #61440	; 0xf000
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 80038bc:	f88d 2006 	strb.w	r2, [sp, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 80038c0:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 80038c4:	f7fd fd7a 	bl	80013bc <GPIO_Init>


#ifndef USEUSB
	USART1_Configuration(115200);
#else
	Set_USBClock();
 80038c8:	f007 fb50 	bl	800af6c <Set_USBClock>
	USB_Interrupts_Config();
 80038cc:	f007 fb5a 	bl	800af84 <USB_Interrupts_Config>
	USB_Init();
 80038d0:	f007 f900 	bl	800aad4 <USB_Init>
#endif

#ifndef NOEEPROMSUPPORT
	FLASH_Unlock();
 80038d4:	f7fd fc9a 	bl	800120c <FLASH_Unlock>
	eeprom_init();
 80038d8:	f7fe f9be 	bl	8001c58 <eeprom_init>
#endif
	SysTick->CTRL &= 0xfffffffb;
 80038dc:	4a2a      	ldr	r2, [pc, #168]	; (8003988 <main+0xf0>)

    // Reset system variables.
    uint8_t prior_state = sys.state;
    memset(&sys, 0, sizeof(system_t)); // Clear system struct variable.
    sys.state = prior_state;
    sys.f_override = DEFAULT_FEED_OVERRIDE;  // Set to 100%
 80038de:	f246 4b64 	movw	fp, #25700	; 0x6464
	SysTick->CTRL &= 0xfffffffb;
 80038e2:	6813      	ldr	r3, [r2, #0]
    sys.r_override = DEFAULT_RAPID_OVERRIDE; // Set to 100%
 80038e4:	f04f 0a64 	mov.w	sl, #100	; 0x64
	SysTick->CTRL &= 0xfffffffb;
 80038e8:	f023 0304 	bic.w	r3, r3, #4
 80038ec:	6013      	str	r3, [r2, #0]
  serial_init();   // Setup serial baud rate and interrupts
 80038ee:	f003 fec5 	bl	800767c <serial_init>
  settings_init(); // Load Grbl settings from EEPROM
 80038f2:	f004 fa9f 	bl	8007e34 <settings_init>
  stepper_init();  // Configure stepper pins and interrupt timers
 80038f6:	f005 f83f 	bl	8008978 <stepper_init>
  system_init();   // Configure pinout pins and pin-change interrupt
 80038fa:	f005 fee3 	bl	80096c4 <system_init>
  	USART3_Configuration(9600); // SCE2, TODO: change back?
 80038fe:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8003902:	f7ff ff75 	bl	80037f0 <USART3_Configuration>
  memset(sys_position,0,sizeof(sys_position)); // Clear machine position.
 8003906:	2000      	movs	r0, #0
 8003908:	4601      	mov	r1, r0
    memset(&sys, 0, sizeof(system_t)); // Clear system struct variable.
 800390a:	4604      	mov	r4, r0
  memset(sys_position,0,sizeof(sys_position)); // Clear machine position.
 800390c:	4d1f      	ldr	r5, [pc, #124]	; (800398c <main+0xf4>)
 800390e:	4f20      	ldr	r7, [pc, #128]	; (8003990 <main+0xf8>)
 8003910:	e9c5 0000 	strd	r0, r0, [r5]
 8003914:	e9c5 0002 	strd	r0, r0, [r5, #8]
 8003918:	4e1e      	ldr	r6, [pc, #120]	; (8003994 <main+0xfc>)
 800391a:	f8df 9088 	ldr.w	r9, [pc, #136]	; 80039a4 <main+0x10c>
 800391e:	f8df 8088 	ldr.w	r8, [pc, #136]	; 80039a8 <main+0x110>
 8003922:	4d1d      	ldr	r5, [pc, #116]	; (8003998 <main+0x100>)
    sys.spindle_speed_ovr = DEFAULT_SPINDLE_SPEED_OVERRIDE; // Set to 100%
	memset(sys_probe_position,0,sizeof(sys_probe_position)); // Clear probe position.
    sys_probe_state = 0;
    sys_rt_exec_state = 0;
    sys_rt_exec_alarm = 0;
 8003924:	4b1d      	ldr	r3, [pc, #116]	; (800399c <main+0x104>)
    sys_probe_state = 0;
 8003926:	f889 4000 	strb.w	r4, [r9]
    sys_rt_exec_state = 0;
 800392a:	f888 4000 	strb.w	r4, [r8]
    sys_rt_exec_alarm = 0;
 800392e:	701c      	strb	r4, [r3, #0]
    sys_rt_exec_motion_override = 0;
 8003930:	4b1b      	ldr	r3, [pc, #108]	; (80039a0 <main+0x108>)
    memset(&sys, 0, sizeof(system_t)); // Clear system struct variable.
 8003932:	60bc      	str	r4, [r7, #8]
 8003934:	603c      	str	r4, [r7, #0]
 8003936:	607c      	str	r4, [r7, #4]
 8003938:	e9c7 4403 	strd	r4, r4, [r7, #12]
    sys.f_override = DEFAULT_FEED_OVERRIDE;  // Set to 100%
 800393c:	f8a7 b008 	strh.w	fp, [r7, #8]
    sys.r_override = DEFAULT_RAPID_OVERRIDE; // Set to 100%
 8003940:	f887 a00a 	strb.w	sl, [r7, #10]
    sys_rt_exec_motion_override = 0;
 8003944:	701c      	strb	r4, [r3, #0]
    sys.state = prior_state;
 8003946:	7039      	strb	r1, [r7, #0]
	memset(sys_probe_position,0,sizeof(sys_probe_position)); // Clear probe position.
 8003948:	e9c6 4400 	strd	r4, r4, [r6]
 800394c:	e9c6 4402 	strd	r4, r4, [r6, #8]
    sys_rt_exec_accessory_override = 0;
 8003950:	702c      	strb	r4, [r5, #0]

    // Reset Grbl primary systems.
    serial_reset_read_buffer(); // Clear serial read buffer
 8003952:	f003 ffef 	bl	8007934 <serial_reset_read_buffer>
    gc_init(); // Set g-code parser to default state
 8003956:	f7fe fa1d 	bl	8001d94 <gc_init>
    spindle_init();
 800395a:	f004 fb07 	bl	8007f6c <spindle_init>
    coolant_init();
 800395e:	f7fe f8db 	bl	8001b18 <coolant_init>
    limits_init();
 8003962:	f7ff fc3b 	bl	80031dc <limits_init>
    probe_init();
 8003966:	f001 fcab 	bl	80052c0 <probe_init>
    plan_reset(); // Clear block buffer and planner variables
 800396a:	f000 fe1f 	bl	80045ac <plan_reset>
    st_reset(); // Clear stepper subsystem variables.
 800396e:	f004 ff63 	bl	8008838 <st_reset>

    // Sync cleared gcode and planner positions to current system position.
    plan_sync_position();
 8003972:	f001 f9a1 	bl	8004cb8 <plan_sync_position>
    gc_sync_position();
 8003976:	f7fe fa23 	bl	8001dc0 <gc_sync_position>

    // Print welcome message. Indicates an initialization has occured at power-up or with a reset.
    report_init_message();
 800397a:	f002 ff71 	bl	8006860 <report_init_message>

    // Start Grbl main loop. Processes program inputs and executes them.
    protocol_main_loop();
 800397e:	f002 fe27 	bl	80065d0 <protocol_main_loop>
 8003982:	7839      	ldrb	r1, [r7, #0]
 8003984:	e7ce      	b.n	8003924 <main+0x8c>
 8003986:	bf00      	nop
 8003988:	e000e010 	.word	0xe000e010
 800398c:	20001430 	.word	0x20001430
 8003990:	20001408 	.word	0x20001408
 8003994:	20001420 	.word	0x20001420
 8003998:	2000141c 	.word	0x2000141c
 800399c:	20001440 	.word	0x20001440
 80039a0:	20001404 	.word	0x20001404
 80039a4:	2000141e 	.word	0x2000141e
 80039a8:	2000141d 	.word	0x2000141d

080039ac <_delay_ms>:
}
#if defined (STM32F103C8)
void _delay_ms(uint32_t x)
{
	u32 temp;
	SysTick->LOAD = (u32)72000000 / 8000 * x;                     // Loading time
 80039ac:	f242 3128 	movw	r1, #9000	; 0x2328
 80039b0:	4b09      	ldr	r3, [pc, #36]	; (80039d8 <_delay_ms+0x2c>)
{
 80039b2:	b430      	push	{r4, r5}
	SysTick->VAL = 0x00;                                            // Empty the counter
 80039b4:	2500      	movs	r5, #0
	SysTick->CTRL = 0x01;                                           // Start from bottom
 80039b6:	2401      	movs	r4, #1
	do
	{
		temp = SysTick->CTRL;
 80039b8:	461a      	mov	r2, r3
	SysTick->LOAD = (u32)72000000 / 8000 * x;                     // Loading time
 80039ba:	fb01 f000 	mul.w	r0, r1, r0
 80039be:	6058      	str	r0, [r3, #4]
	SysTick->VAL = 0x00;                                            // Empty the counter
 80039c0:	609d      	str	r5, [r3, #8]
	SysTick->CTRL = 0x01;                                           // Start from bottom
 80039c2:	601c      	str	r4, [r3, #0]
		temp = SysTick->CTRL;
 80039c4:	6813      	ldr	r3, [r2, #0]
	} while ((temp & 0x01) && !(temp&(1 << 16)));                             // Wait time arrive
 80039c6:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d0fa      	beq.n	80039c4 <_delay_ms+0x18>
	SysTick->CTRL = 0x00;                                            // Close the counter
	SysTick->VAL = 0X00;                                            // Empty the counter
}
 80039ce:	bc30      	pop	{r4, r5}
	SysTick->CTRL = 0x00;                                            // Close the counter
 80039d0:	2300      	movs	r3, #0
 80039d2:	6013      	str	r3, [r2, #0]
	SysTick->VAL = 0X00;                                            // Empty the counter
 80039d4:	6093      	str	r3, [r2, #8]
}
 80039d6:	4770      	bx	lr
 80039d8:	e000e010 	.word	0xe000e010

080039dc <LedBlink>:
void LedBlink(void)
{
 80039dc:	b510      	push	{r4, lr}
	static BitAction nOnFlag = Bit_SET;
	GPIO_WriteBit(GPIOC, GPIO_Pin_13, nOnFlag);
 80039de:	4c07      	ldr	r4, [pc, #28]	; (80039fc <LedBlink+0x20>)
 80039e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80039e4:	7822      	ldrb	r2, [r4, #0]
 80039e6:	4806      	ldr	r0, [pc, #24]	; (8003a00 <LedBlink+0x24>)
 80039e8:	f7fd fe7a 	bl	80016e0 <GPIO_WriteBit>
	nOnFlag = (nOnFlag == Bit_SET) ? Bit_RESET : Bit_SET;
 80039ec:	7823      	ldrb	r3, [r4, #0]
 80039ee:	f113 33ff 	adds.w	r3, r3, #4294967295
 80039f2:	bf18      	it	ne
 80039f4:	2301      	movne	r3, #1
 80039f6:	7023      	strb	r3, [r4, #0]
}
 80039f8:	bd10      	pop	{r4, pc}
 80039fa:	bf00      	nop
 80039fc:	20000014 	.word	0x20000014
 8003a00:	40011000 	.word	0x40011000

08003a04 <mc_line>:
// NOTE: This is the primary gateway to the grbl planner. All line motions, including arc line
// segments, must pass through this routine before being passed to the planner. The seperation of
// mc_line and plan_buffer_line is done primarily to place non-planner-type functions from being
// in the planner and to let backlash compensation or canned cycle integration simple and direct.
void mc_line(float *target, plan_line_data_t *pl_data)
{
 8003a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // If enabled, check for soft limit violations. Placed here all line motions are picked up
  // from everywhere in Grbl.
  if (bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE)) {
 8003a06:	4d17      	ldr	r5, [pc, #92]	; (8003a64 <mc_line+0x60>)
 8003a08:	4c17      	ldr	r4, [pc, #92]	; (8003a68 <mc_line+0x64>)
 8003a0a:	f895 2058 	ldrb.w	r2, [r5, #88]	; 0x58
{
 8003a0e:	460e      	mov	r6, r1
  if (bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE)) {
 8003a10:	0691      	lsls	r1, r2, #26
 8003a12:	7823      	ldrb	r3, [r4, #0]
{
 8003a14:	4607      	mov	r7, r0
  if (bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE)) {
 8003a16:	d504      	bpl.n	8003a22 <mc_line+0x1e>
    // NOTE: Block jog state. Jogging is a special case and soft limits are handled independently.
    if (sys.state != STATE_JOG) { limits_soft_check(target); }
 8003a18:	2b20      	cmp	r3, #32
 8003a1a:	d00a      	beq.n	8003a32 <mc_line+0x2e>
 8003a1c:	f7ff fec6 	bl	80037ac <limits_soft_check>
 8003a20:	7823      	ldrb	r3, [r4, #0]
  }

  // If in check gcode mode, prevent motion by blocking planner. Soft limits still work.
  if (sys.state == STATE_CHECK_MODE) { return; }
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d105      	bne.n	8003a32 <mc_line+0x2e>
			if (pl_data->condition & PL_COND_FLAG_SPINDLE_CW) {
				spindle_sync(PL_COND_FLAG_SPINDLE_CW, pl_data->spindle_speed);
			}
		}
	}
}
 8003a26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ( plan_check_full_buffer() ) { protocol_auto_cycle_start(); } // Auto-cycle start when buffer is full.
 8003a28:	f000 fe32 	bl	8004690 <plan_check_full_buffer>
 8003a2c:	b138      	cbz	r0, 8003a3e <mc_line+0x3a>
 8003a2e:	f001 fcb5 	bl	800539c <protocol_auto_cycle_start>
    protocol_execute_realtime(); // Check for any run-time commands
 8003a32:	f002 f9bb 	bl	8005dac <protocol_execute_realtime>
    if (sys.abort) { return; } // Bail, if system abort.
 8003a36:	7863      	ldrb	r3, [r4, #1]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d0f5      	beq.n	8003a28 <mc_line+0x24>
 8003a3c:	e7f3      	b.n	8003a26 <mc_line+0x22>
	if (plan_buffer_line(target, pl_data) == PLAN_EMPTY_BLOCK) {
 8003a3e:	4638      	mov	r0, r7
 8003a40:	4631      	mov	r1, r6
 8003a42:	f000 fee5 	bl	8004810 <plan_buffer_line>
 8003a46:	2800      	cmp	r0, #0
 8003a48:	d1ed      	bne.n	8003a26 <mc_line+0x22>
		if (bit_istrue(settings.flags, BITFLAG_LASER_MODE)) {
 8003a4a:	f895 3058 	ldrb.w	r3, [r5, #88]	; 0x58
 8003a4e:	079a      	lsls	r2, r3, #30
 8003a50:	d5e9      	bpl.n	8003a26 <mc_line+0x22>
			if (pl_data->condition & PL_COND_FLAG_SPINDLE_CW) {
 8003a52:	7a33      	ldrb	r3, [r6, #8]
 8003a54:	06db      	lsls	r3, r3, #27
 8003a56:	d5e6      	bpl.n	8003a26 <mc_line+0x22>
				spindle_sync(PL_COND_FLAG_SPINDLE_CW, pl_data->spindle_speed);
 8003a58:	6871      	ldr	r1, [r6, #4]
 8003a5a:	2010      	movs	r0, #16
}
 8003a5c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				spindle_sync(PL_COND_FLAG_SPINDLE_CW, pl_data->spindle_speed);
 8003a60:	f004 bc16 	b.w	8008290 <spindle_sync>
 8003a64:	20001744 	.word	0x20001744
 8003a68:	20001408 	.word	0x20001408
 8003a6c:	00000000 	.word	0x00000000

08003a70 <mc_arc>:
// The arc is approximated by generating a huge number of tiny, linear segments. The chordal tolerance
// of each segment is configured in settings.arc_tolerance, which is defined to be the maximum normal
// distance from segment to the circle when the end points both lie on the circle.
void mc_arc(float *target, plan_line_data_t *pl_data, float *position, float *offset, float radius,
  uint8_t axis_0, uint8_t axis_1, uint8_t axis_linear, uint8_t is_clockwise_arc)
{
 8003a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a74:	461f      	mov	r7, r3
 8003a76:	b091      	sub	sp, #68	; 0x44
 8003a78:	f89d 406c 	ldrb.w	r4, [sp, #108]	; 0x6c
 8003a7c:	4683      	mov	fp, r0
  float center_axis0 = position[axis_0] + offset[axis_0];
 8003a7e:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
 8003a82:	00a3      	lsls	r3, r4, #2
 8003a84:	18d6      	adds	r6, r2, r3
{
 8003a86:	900f      	str	r0, [sp, #60]	; 0x3c
  float center_axis0 = position[axis_0] + offset[axis_0];
 8003a88:	18fb      	adds	r3, r7, r3
{
 8003a8a:	910b      	str	r1, [sp, #44]	; 0x2c
  float center_axis0 = position[axis_0] + offset[axis_0];
 8003a8c:	4628      	mov	r0, r5
 8003a8e:	f852 1024 	ldr.w	r1, [r2, r4, lsl #2]
 8003a92:	9206      	str	r2, [sp, #24]
 8003a94:	9602      	str	r6, [sp, #8]
 8003a96:	930c      	str	r3, [sp, #48]	; 0x30
 8003a98:	f7fd f806 	bl	8000aa8 <__addsf3>
{
 8003a9c:	f89d 6070 	ldrb.w	r6, [sp, #112]	; 0x70
  float center_axis1 = position[axis_1] + offset[axis_1];
 8003aa0:	9a06      	ldr	r2, [sp, #24]
 8003aa2:	f857 8026 	ldr.w	r8, [r7, r6, lsl #2]
 8003aa6:	00b3      	lsls	r3, r6, #2
 8003aa8:	f852 1026 	ldr.w	r1, [r2, r6, lsl #2]
  float center_axis0 = position[axis_0] + offset[axis_0];
 8003aac:	4682      	mov	sl, r0
  float center_axis1 = position[axis_1] + offset[axis_1];
 8003aae:	441f      	add	r7, r3
  float center_axis0 = position[axis_0] + offset[axis_0];
 8003ab0:	9004      	str	r0, [sp, #16]
  float center_axis1 = position[axis_1] + offset[axis_1];
 8003ab2:	18d3      	adds	r3, r2, r3
 8003ab4:	4640      	mov	r0, r8
 8003ab6:	9303      	str	r3, [sp, #12]
 8003ab8:	970d      	str	r7, [sp, #52]	; 0x34
 8003aba:	f7fc fff5 	bl	8000aa8 <__addsf3>
  float r_axis0 = -offset[axis_0];  // Radius vector from center to current location
  float r_axis1 = -offset[axis_1];
  float rt_axis0 = target[axis_0] - center_axis0;
 8003abe:	4651      	mov	r1, sl
  float center_axis1 = position[axis_1] + offset[axis_1];
 8003ac0:	4681      	mov	r9, r0
 8003ac2:	9005      	str	r0, [sp, #20]
  float rt_axis0 = target[axis_0] - center_axis0;
 8003ac4:	f85b 0024 	ldr.w	r0, [fp, r4, lsl #2]
 8003ac8:	f7fc ffec 	bl	8000aa4 <__aeabi_fsub>
  float rt_axis1 = target[axis_1] - center_axis1;
 8003acc:	4649      	mov	r1, r9
  float rt_axis0 = target[axis_0] - center_axis0;
 8003ace:	4604      	mov	r4, r0
  float rt_axis1 = target[axis_1] - center_axis1;
 8003ad0:	f85b 0026 	ldr.w	r0, [fp, r6, lsl #2]
 8003ad4:	f7fc ffe6 	bl	8000aa4 <__aeabi_fsub>
  float r_axis0 = -offset[axis_0];  // Radius vector from center to current location
 8003ad8:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
  float rt_axis1 = target[axis_1] - center_axis1;
 8003adc:	4606      	mov	r6, r0

  // CCW angle between position and target from circle center. Only one atan2() trig computation required.
  float angular_travel = atan2f(r_axis0*rt_axis1-r_axis1*rt_axis0, r_axis0*rt_axis0+r_axis1*rt_axis1);
 8003ade:	4621      	mov	r1, r4
 8003ae0:	4628      	mov	r0, r5
 8003ae2:	f7fd f8e9 	bl	8000cb8 <__aeabi_fmul>
  float r_axis1 = -offset[axis_1];
 8003ae6:	f108 4800 	add.w	r8, r8, #2147483648	; 0x80000000
  float angular_travel = atan2f(r_axis0*rt_axis1-r_axis1*rt_axis0, r_axis0*rt_axis0+r_axis1*rt_axis1);
 8003aea:	4607      	mov	r7, r0
 8003aec:	4631      	mov	r1, r6
 8003aee:	4640      	mov	r0, r8
 8003af0:	f7fd f8e2 	bl	8000cb8 <__aeabi_fmul>
 8003af4:	4601      	mov	r1, r0
 8003af6:	4638      	mov	r0, r7
 8003af8:	f7fc ffd6 	bl	8000aa8 <__addsf3>
 8003afc:	4631      	mov	r1, r6
 8003afe:	4607      	mov	r7, r0
 8003b00:	4628      	mov	r0, r5
 8003b02:	f7fd f8d9 	bl	8000cb8 <__aeabi_fmul>
 8003b06:	4621      	mov	r1, r4
 8003b08:	4606      	mov	r6, r0
 8003b0a:	4640      	mov	r0, r8
 8003b0c:	f7fd f8d4 	bl	8000cb8 <__aeabi_fmul>
 8003b10:	4601      	mov	r1, r0
 8003b12:	4630      	mov	r0, r6
 8003b14:	f7fc ffc6 	bl	8000aa4 <__aeabi_fsub>
 8003b18:	4639      	mov	r1, r7
 8003b1a:	f007 ff5b 	bl	800b9d4 <atan2f>
 8003b1e:	4604      	mov	r4, r0
 8003b20:	f7fc fc7a 	bl	8000418 <__aeabi_f2d>
{
 8003b24:	f89d b078 	ldrb.w	fp, [sp, #120]	; 0x78
 8003b28:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
 8003b2c:	4606      	mov	r6, r0
 8003b2e:	460f      	mov	r7, r1
 8003b30:	f89d a074 	ldrb.w	sl, [sp, #116]	; 0x74
  if (is_clockwise_arc) { // Correct atan2 output per direction
 8003b34:	f1bb 0f00 	cmp.w	fp, #0
 8003b38:	f000 815e 	beq.w	8003df8 <mc_arc+0x388>
    if (angular_travel >= -ARC_ANGULAR_TRAVEL_EPSILON) { angular_travel -= 2*M_PI; }
 8003b3c:	a3a8      	add	r3, pc, #672	; (adr r3, 8003de0 <mc_arc+0x370>)
 8003b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b42:	f7fc ff47 	bl	80009d4 <__aeabi_dcmpge>
 8003b46:	2800      	cmp	r0, #0
 8003b48:	f040 8174 	bne.w	8003e34 <mc_arc+0x3c4>
  // NOTE: Segment end points are on the arc, which can lead to the arc diameter being smaller by up to
  // (2x) settings.arc_tolerance. For 99% of users, this is just fine. If a different arc segment fit
  // is desired, i.e. least-squares, midpoint on arc, just change the mm_per_arc_segment calculation.
  // For the intended uses of Grbl, this value shouldn't exceed 2000 for the strictest of cases.
  uint16_t segments = (uint16_t)floorf(fabsf(0.5f*angular_travel*radius) /
                          sqrtf(settings.arc_tolerance*(2*radius - settings.arc_tolerance)) );
 8003b4c:	f8df b2a4 	ldr.w	fp, [pc, #676]	; 8003df4 <mc_arc+0x384>
 8003b50:	4649      	mov	r1, r9
 8003b52:	f8db 604c 	ldr.w	r6, [fp, #76]	; 0x4c
 8003b56:	4648      	mov	r0, r9
 8003b58:	f7fc ffa6 	bl	8000aa8 <__addsf3>
 8003b5c:	4631      	mov	r1, r6
 8003b5e:	f7fc ffa1 	bl	8000aa4 <__aeabi_fsub>
 8003b62:	4631      	mov	r1, r6
 8003b64:	f7fd f8a8 	bl	8000cb8 <__aeabi_fmul>
 8003b68:	f007 ff36 	bl	800b9d8 <sqrtf>
  uint16_t segments = (uint16_t)floorf(fabsf(0.5f*angular_travel*radius) /
 8003b6c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
                          sqrtf(settings.arc_tolerance*(2*radius - settings.arc_tolerance)) );
 8003b70:	4606      	mov	r6, r0
  uint16_t segments = (uint16_t)floorf(fabsf(0.5f*angular_travel*radius) /
 8003b72:	4648      	mov	r0, r9
 8003b74:	f7fd f8a0 	bl	8000cb8 <__aeabi_fmul>
 8003b78:	4621      	mov	r1, r4
 8003b7a:	f7fd f89d 	bl	8000cb8 <__aeabi_fmul>
 8003b7e:	4631      	mov	r1, r6
 8003b80:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003b84:	f7fd f94c 	bl	8000e20 <__aeabi_fdiv>
 8003b88:	f007 fe82 	bl	800b890 <floorf>
 8003b8c:	f7fd fa96 	bl	80010bc <__aeabi_f2uiz>
 8003b90:	b283      	uxth	r3, r0
 8003b92:	9301      	str	r3, [sp, #4]

  if (segments) {
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	f000 8158 	beq.w	8003e4a <mc_arc+0x3da>
 8003b9a:	4618      	mov	r0, r3
    // Multiply inverse feed_rate to compensate for the fact that this movement is approximated
    // by a number of discrete segments. The inverse feed_rate should be correct for the sum of
    // all segments.
    if (pl_data->condition & PL_COND_FLAG_INVERSE_TIME) { 
 8003b9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003b9e:	7a1e      	ldrb	r6, [r3, #8]
 8003ba0:	f7fd f836 	bl	8000c10 <__aeabi_i2f>
 8003ba4:	0731      	lsls	r1, r6, #28
 8003ba6:	4607      	mov	r7, r0
 8003ba8:	f100 8139 	bmi.w	8003e1e <mc_arc+0x3ae>
 8003bac:	4639      	mov	r1, r7
 8003bae:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003bb2:	f7fd f935 	bl	8000e20 <__aeabi_fdiv>
 8003bb6:	4606      	mov	r6, r0
      pl_data->feed_rate *= segments; 
      bit_false(pl_data->condition,PL_COND_FLAG_INVERSE_TIME); // Force as feed absolute mode over arc segments.
    }
    
    float theta_per_segment = angular_travel/segments;
 8003bb8:	4601      	mov	r1, r0
 8003bba:	4620      	mov	r0, r4
 8003bbc:	f7fd f87c 	bl	8000cb8 <__aeabi_fmul>
    float linear_per_segment = (target[axis_linear] - position[axis_linear])/segments;
 8003bc0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003bc2:	9f06      	ldr	r7, [sp, #24]
    float theta_per_segment = angular_travel/segments;
 8003bc4:	4681      	mov	r9, r0
    float linear_per_segment = (target[axis_linear] - position[axis_linear])/segments;
 8003bc6:	f857 102a 	ldr.w	r1, [r7, sl, lsl #2]
    float theta_per_segment = angular_travel/segments;
 8003bca:	900e      	str	r0, [sp, #56]	; 0x38
    float linear_per_segment = (target[axis_linear] - position[axis_linear])/segments;
 8003bcc:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8003bd0:	f7fc ff68 	bl	8000aa4 <__aeabi_fsub>
 8003bd4:	4631      	mov	r1, r6
 8003bd6:	f7fd f86f 	bl	8000cb8 <__aeabi_fmul>
       without the initial overhead of computing cos() or sin(). By the time the arc needs to be applied
       a correction, the planner should have caught up to the lag caused by the initial mc_arc overhead.
       This is important when there are successive arc motions.
    */
    // Computes: cos_T = 1 - theta_per_segment^2/2, sin_T = theta_per_segment - theta_per_segment^3/6) in ~52usec
    float cos_T = 2.0f - theta_per_segment*theta_per_segment;
 8003bda:	4649      	mov	r1, r9
    float linear_per_segment = (target[axis_linear] - position[axis_linear])/segments;
 8003bdc:	9007      	str	r0, [sp, #28]
    float cos_T = 2.0f - theta_per_segment*theta_per_segment;
 8003bde:	4648      	mov	r0, r9
 8003be0:	f7fd f86a 	bl	8000cb8 <__aeabi_fmul>
 8003be4:	4604      	mov	r4, r0
 8003be6:	4601      	mov	r1, r0
 8003be8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003bec:	f7fc ff5a 	bl	8000aa4 <__aeabi_fsub>
    float sin_T = theta_per_segment*0.16666667f*(cos_T + 4.0f);
 8003bf0:	4621      	mov	r1, r4
    float cos_T = 2.0f - theta_per_segment*theta_per_segment;
 8003bf2:	4606      	mov	r6, r0
    float sin_T = theta_per_segment*0.16666667f*(cos_T + 4.0f);
 8003bf4:	487c      	ldr	r0, [pc, #496]	; (8003de8 <mc_arc+0x378>)
 8003bf6:	f7fc ff55 	bl	8000aa4 <__aeabi_fsub>
 8003bfa:	497c      	ldr	r1, [pc, #496]	; (8003dec <mc_arc+0x37c>)
 8003bfc:	4604      	mov	r4, r0
 8003bfe:	4648      	mov	r0, r9
 8003c00:	f7fd f85a 	bl	8000cb8 <__aeabi_fmul>
 8003c04:	4601      	mov	r1, r0
 8003c06:	4620      	mov	r0, r4
 8003c08:	f7fd f856 	bl	8000cb8 <__aeabi_fmul>
    cos_T *= 0.5;
 8003c0c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    float sin_T = theta_per_segment*0.16666667f*(cos_T + 4.0f);
 8003c10:	9008      	str	r0, [sp, #32]
    cos_T *= 0.5;
 8003c12:	4630      	mov	r0, r6
 8003c14:	f7fd f850 	bl	8000cb8 <__aeabi_fmul>
    float cos_Ti;
    float r_axisi;
    uint16_t i;
    uint8_t count = 0;

    for (i = 1; i<segments; i++) { // Increment (segments-1).
 8003c18:	9b01      	ldr	r3, [sp, #4]
    float linear_per_segment = (target[axis_linear] - position[axis_linear])/segments;
 8003c1a:	eb07 078a 	add.w	r7, r7, sl, lsl #2
    for (i = 1; i<segments; i++) { // Increment (segments-1).
 8003c1e:	2b01      	cmp	r3, #1
    cos_T *= 0.5;
 8003c20:	9009      	str	r0, [sp, #36]	; 0x24
    for (i = 1; i<segments; i++) { // Increment (segments-1).
 8003c22:	f000 8112 	beq.w	8003e4a <mc_arc+0x3da>
 8003c26:	2601      	movs	r6, #1
    uint8_t count = 0;
 8003c28:	f04f 0900 	mov.w	r9, #0
 8003c2c:	4c70      	ldr	r4, [pc, #448]	; (8003df0 <mc_arc+0x380>)

      if (count < N_ARC_CORRECTION) {
 8003c2e:	f1b9 0f0b 	cmp.w	r9, #11
 8003c32:	f200 809f 	bhi.w	8003d74 <mc_arc+0x304>
        // Apply vector rotation matrix. ~40 usec
        r_axisi = r_axis0*sin_T + r_axis1*cos_T;
 8003c36:	4629      	mov	r1, r5
 8003c38:	9808      	ldr	r0, [sp, #32]
 8003c3a:	f7fd f83d 	bl	8000cb8 <__aeabi_fmul>
 8003c3e:	4641      	mov	r1, r8
 8003c40:	4682      	mov	sl, r0
 8003c42:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003c44:	f7fd f838 	bl	8000cb8 <__aeabi_fmul>
 8003c48:	4601      	mov	r1, r0
 8003c4a:	4650      	mov	r0, sl
 8003c4c:	f7fc ff2c 	bl	8000aa8 <__addsf3>
        r_axis0 = r_axis0*cos_T - r_axis1*sin_T;
 8003c50:	4629      	mov	r1, r5
        r_axisi = r_axis0*sin_T + r_axis1*cos_T;
 8003c52:	4682      	mov	sl, r0
        r_axis0 = r_axis0*cos_T - r_axis1*sin_T;
 8003c54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003c56:	f7fd f82f 	bl	8000cb8 <__aeabi_fmul>
 8003c5a:	4641      	mov	r1, r8
 8003c5c:	4605      	mov	r5, r0
 8003c5e:	9808      	ldr	r0, [sp, #32]
 8003c60:	f7fd f82a 	bl	8000cb8 <__aeabi_fmul>
 8003c64:	4601      	mov	r1, r0
 8003c66:	4628      	mov	r0, r5
 8003c68:	f7fc ff1c 	bl	8000aa4 <__aeabi_fsub>
        r_axis1 = r_axisi;
 8003c6c:	46d0      	mov	r8, sl
        r_axis0 = r_axis0*cos_T - r_axis1*sin_T;
 8003c6e:	4605      	mov	r5, r0
        count++;
 8003c70:	f109 0901 	add.w	r9, r9, #1
 8003c74:	fa5f f989 	uxtb.w	r9, r9
        r_axis1 = -offset[axis_0]*sin_Ti - offset[axis_1]*cos_Ti;
        count = 0;
      }

      // Update arc_target location
      position[axis_0] = center_axis0 + r_axis0;
 8003c78:	9904      	ldr	r1, [sp, #16]
 8003c7a:	4628      	mov	r0, r5
 8003c7c:	f7fc ff14 	bl	8000aa8 <__addsf3>
 8003c80:	9b02      	ldr	r3, [sp, #8]
      position[axis_1] = center_axis1 + r_axis1;
 8003c82:	9905      	ldr	r1, [sp, #20]
      position[axis_0] = center_axis0 + r_axis0;
 8003c84:	6018      	str	r0, [r3, #0]
      position[axis_1] = center_axis1 + r_axis1;
 8003c86:	4640      	mov	r0, r8
 8003c88:	f7fc ff0e 	bl	8000aa8 <__addsf3>
 8003c8c:	9b03      	ldr	r3, [sp, #12]
      position[axis_linear] += linear_per_segment;
 8003c8e:	9907      	ldr	r1, [sp, #28]
      position[axis_1] = center_axis1 + r_axis1;
 8003c90:	6018      	str	r0, [r3, #0]
      position[axis_linear] += linear_per_segment;
 8003c92:	6838      	ldr	r0, [r7, #0]
 8003c94:	f7fc ff08 	bl	8000aa8 <__addsf3>
 8003c98:	6038      	str	r0, [r7, #0]
  if (bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE)) {
 8003c9a:	f89b 3058 	ldrb.w	r3, [fp, #88]	; 0x58
 8003c9e:	069a      	lsls	r2, r3, #26
 8003ca0:	d505      	bpl.n	8003cae <mc_arc+0x23e>
    if (sys.state != STATE_JOG) { limits_soft_check(target); }
 8003ca2:	7823      	ldrb	r3, [r4, #0]
 8003ca4:	2b20      	cmp	r3, #32
 8003ca6:	d00b      	beq.n	8003cc0 <mc_arc+0x250>
 8003ca8:	9806      	ldr	r0, [sp, #24]
 8003caa:	f7ff fd7f 	bl	80037ac <limits_soft_check>
  if (sys.state == STATE_CHECK_MODE) { return; }
 8003cae:	7823      	ldrb	r3, [r4, #0]
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d105      	bne.n	8003cc0 <mc_arc+0x250>
 8003cb4:	e020      	b.n	8003cf8 <mc_arc+0x288>
    if ( plan_check_full_buffer() ) { protocol_auto_cycle_start(); } // Auto-cycle start when buffer is full.
 8003cb6:	f000 fceb 	bl	8004690 <plan_check_full_buffer>
 8003cba:	b148      	cbz	r0, 8003cd0 <mc_arc+0x260>
 8003cbc:	f001 fb6e 	bl	800539c <protocol_auto_cycle_start>
    protocol_execute_realtime(); // Check for any run-time commands
 8003cc0:	f002 f874 	bl	8005dac <protocol_execute_realtime>
    if (sys.abort) { return; } // Bail, if system abort.
 8003cc4:	7863      	ldrb	r3, [r4, #1]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d0f5      	beq.n	8003cb6 <mc_arc+0x246>
      if (sys.abort) { return; }
    }
  }
  // Ensure last segment arrives at target location.
  mc_line(target, pl_data);
}
 8003cca:	b011      	add	sp, #68	; 0x44
 8003ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (plan_buffer_line(target, pl_data) == PLAN_EMPTY_BLOCK) {
 8003cd0:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8003cd4:	9806      	ldr	r0, [sp, #24]
 8003cd6:	4651      	mov	r1, sl
 8003cd8:	f000 fd9a 	bl	8004810 <plan_buffer_line>
 8003cdc:	b960      	cbnz	r0, 8003cf8 <mc_arc+0x288>
		if (bit_istrue(settings.flags, BITFLAG_LASER_MODE)) {
 8003cde:	f89b 3058 	ldrb.w	r3, [fp, #88]	; 0x58
 8003ce2:	079b      	lsls	r3, r3, #30
 8003ce4:	d508      	bpl.n	8003cf8 <mc_arc+0x288>
			if (pl_data->condition & PL_COND_FLAG_SPINDLE_CW) {
 8003ce6:	f89a 3008 	ldrb.w	r3, [sl, #8]
 8003cea:	06d8      	lsls	r0, r3, #27
 8003cec:	d504      	bpl.n	8003cf8 <mc_arc+0x288>
				spindle_sync(PL_COND_FLAG_SPINDLE_CW, pl_data->spindle_speed);
 8003cee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003cf0:	2010      	movs	r0, #16
 8003cf2:	6859      	ldr	r1, [r3, #4]
 8003cf4:	f004 facc 	bl	8008290 <spindle_sync>
      if (sys.abort) { return; }
 8003cf8:	7863      	ldrb	r3, [r4, #1]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d1e5      	bne.n	8003cca <mc_arc+0x25a>
 8003cfe:	3601      	adds	r6, #1
    for (i = 1; i<segments; i++) { // Increment (segments-1).
 8003d00:	9a01      	ldr	r2, [sp, #4]
 8003d02:	b2b3      	uxth	r3, r6
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d392      	bcc.n	8003c2e <mc_arc+0x1be>
  if (bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE)) {
 8003d08:	f89b 2058 	ldrb.w	r2, [fp, #88]	; 0x58
 8003d0c:	7823      	ldrb	r3, [r4, #0]
 8003d0e:	0691      	lsls	r1, r2, #26
 8003d10:	d505      	bpl.n	8003d1e <mc_arc+0x2ae>
    if (sys.state != STATE_JOG) { limits_soft_check(target); }
 8003d12:	2b20      	cmp	r3, #32
 8003d14:	d00f      	beq.n	8003d36 <mc_arc+0x2c6>
 8003d16:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003d18:	f7ff fd48 	bl	80037ac <limits_soft_check>
 8003d1c:	7823      	ldrb	r3, [r4, #0]
  if (sys.state == STATE_CHECK_MODE) { return; }
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d0d3      	beq.n	8003cca <mc_arc+0x25a>
    protocol_execute_realtime(); // Check for any run-time commands
 8003d22:	f002 f843 	bl	8005dac <protocol_execute_realtime>
    if (sys.abort) { return; } // Bail, if system abort.
 8003d26:	7863      	ldrb	r3, [r4, #1]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d1ce      	bne.n	8003cca <mc_arc+0x25a>
    if ( plan_check_full_buffer() ) { protocol_auto_cycle_start(); } // Auto-cycle start when buffer is full.
 8003d2c:	f000 fcb0 	bl	8004690 <plan_check_full_buffer>
 8003d30:	b150      	cbz	r0, 8003d48 <mc_arc+0x2d8>
 8003d32:	f001 fb33 	bl	800539c <protocol_auto_cycle_start>
    protocol_execute_realtime(); // Check for any run-time commands
 8003d36:	f002 f839 	bl	8005dac <protocol_execute_realtime>
    if (sys.abort) { return; } // Bail, if system abort.
 8003d3a:	7863      	ldrb	r3, [r4, #1]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d1c4      	bne.n	8003cca <mc_arc+0x25a>
    if ( plan_check_full_buffer() ) { protocol_auto_cycle_start(); } // Auto-cycle start when buffer is full.
 8003d40:	f000 fca6 	bl	8004690 <plan_check_full_buffer>
 8003d44:	2800      	cmp	r0, #0
 8003d46:	d1f4      	bne.n	8003d32 <mc_arc+0x2c2>
	if (plan_buffer_line(target, pl_data) == PLAN_EMPTY_BLOCK) {
 8003d48:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8003d4a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003d4c:	4621      	mov	r1, r4
 8003d4e:	f000 fd5f 	bl	8004810 <plan_buffer_line>
 8003d52:	2800      	cmp	r0, #0
 8003d54:	d1b9      	bne.n	8003cca <mc_arc+0x25a>
		if (bit_istrue(settings.flags, BITFLAG_LASER_MODE)) {
 8003d56:	f89b 3058 	ldrb.w	r3, [fp, #88]	; 0x58
 8003d5a:	079a      	lsls	r2, r3, #30
 8003d5c:	d5b5      	bpl.n	8003cca <mc_arc+0x25a>
			if (pl_data->condition & PL_COND_FLAG_SPINDLE_CW) {
 8003d5e:	7a23      	ldrb	r3, [r4, #8]
 8003d60:	06db      	lsls	r3, r3, #27
 8003d62:	d5b2      	bpl.n	8003cca <mc_arc+0x25a>
				spindle_sync(PL_COND_FLAG_SPINDLE_CW, pl_data->spindle_speed);
 8003d64:	2010      	movs	r0, #16
 8003d66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003d68:	6859      	ldr	r1, [r3, #4]
}
 8003d6a:	b011      	add	sp, #68	; 0x44
 8003d6c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				spindle_sync(PL_COND_FLAG_SPINDLE_CW, pl_data->spindle_speed);
 8003d70:	f004 ba8e 	b.w	8008290 <spindle_sync>
        cos_Ti = cosf(i*theta_per_segment);
 8003d74:	4630      	mov	r0, r6
 8003d76:	f7fc ff4b 	bl	8000c10 <__aeabi_i2f>
 8003d7a:	990e      	ldr	r1, [sp, #56]	; 0x38
 8003d7c:	f7fc ff9c 	bl	8000cb8 <__aeabi_fmul>
 8003d80:	4605      	mov	r5, r0
 8003d82:	f007 fd51 	bl	800b828 <cosf>
 8003d86:	4681      	mov	r9, r0
        sin_Ti = sinf(i*theta_per_segment);
 8003d88:	4628      	mov	r0, r5
 8003d8a:	f007 fded 	bl	800b968 <sinf>
        r_axis0 = -offset[axis_0]*cos_Ti + offset[axis_1]*sin_Ti;
 8003d8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
        sin_Ti = sinf(i*theta_per_segment);
 8003d90:	4682      	mov	sl, r0
        r_axis0 = -offset[axis_0]*cos_Ti + offset[axis_1]*sin_Ti;
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4649      	mov	r1, r9
 8003d96:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	930a      	str	r3, [sp, #40]	; 0x28
 8003d9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003da0:	f8d3 8000 	ldr.w	r8, [r3]
 8003da4:	f7fc ff88 	bl	8000cb8 <__aeabi_fmul>
 8003da8:	4651      	mov	r1, sl
 8003daa:	4605      	mov	r5, r0
 8003dac:	4640      	mov	r0, r8
 8003dae:	f7fc ff83 	bl	8000cb8 <__aeabi_fmul>
 8003db2:	4601      	mov	r1, r0
 8003db4:	4628      	mov	r0, r5
 8003db6:	f7fc fe77 	bl	8000aa8 <__addsf3>
        r_axis1 = -offset[axis_0]*sin_Ti - offset[axis_1]*cos_Ti;
 8003dba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003dbc:	4651      	mov	r1, sl
        r_axis0 = -offset[axis_0]*cos_Ti + offset[axis_1]*sin_Ti;
 8003dbe:	4605      	mov	r5, r0
        r_axis1 = -offset[axis_0]*sin_Ti - offset[axis_1]*cos_Ti;
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f7fc ff79 	bl	8000cb8 <__aeabi_fmul>
 8003dc6:	4649      	mov	r1, r9
 8003dc8:	4682      	mov	sl, r0
 8003dca:	4640      	mov	r0, r8
 8003dcc:	f7fc ff74 	bl	8000cb8 <__aeabi_fmul>
 8003dd0:	4601      	mov	r1, r0
 8003dd2:	4650      	mov	r0, sl
 8003dd4:	f7fc fe66 	bl	8000aa4 <__aeabi_fsub>
        count = 0;
 8003dd8:	f04f 0900 	mov.w	r9, #0
        r_axis1 = -offset[axis_0]*sin_Ti - offset[axis_1]*cos_Ti;
 8003ddc:	4680      	mov	r8, r0
 8003dde:	e74b      	b.n	8003c78 <mc_arc+0x208>
 8003de0:	a0b5ed8d 	.word	0xa0b5ed8d
 8003de4:	bea0c6f7 	.word	0xbea0c6f7
 8003de8:	40c00000 	.word	0x40c00000
 8003dec:	3e2aaaab 	.word	0x3e2aaaab
 8003df0:	20001408 	.word	0x20001408
 8003df4:	20001744 	.word	0x20001744
    if (angular_travel <= ARC_ANGULAR_TRAVEL_EPSILON) { angular_travel += 2*M_PI; }
 8003df8:	a319      	add	r3, pc, #100	; (adr r3, 8003e60 <mc_arc+0x3f0>)
 8003dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dfe:	f7fc fddf 	bl	80009c0 <__aeabi_dcmple>
 8003e02:	2800      	cmp	r0, #0
 8003e04:	f43f aea2 	beq.w	8003b4c <mc_arc+0xdc>
 8003e08:	a317      	add	r3, pc, #92	; (adr r3, 8003e68 <mc_arc+0x3f8>)
 8003e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e0e:	4630      	mov	r0, r6
 8003e10:	4639      	mov	r1, r7
 8003e12:	f7fc f9a3 	bl	800015c <__adddf3>
 8003e16:	f7fc fdf1 	bl	80009fc <__aeabi_d2f>
 8003e1a:	4604      	mov	r4, r0
 8003e1c:	e696      	b.n	8003b4c <mc_arc+0xdc>
      pl_data->feed_rate *= segments; 
 8003e1e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003e20:	4601      	mov	r1, r0
 8003e22:	6810      	ldr	r0, [r2, #0]
 8003e24:	f7fc ff48 	bl	8000cb8 <__aeabi_fmul>
 8003e28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
      bit_false(pl_data->condition,PL_COND_FLAG_INVERSE_TIME); // Force as feed absolute mode over arc segments.
 8003e2a:	f026 0608 	bic.w	r6, r6, #8
      pl_data->feed_rate *= segments; 
 8003e2e:	6018      	str	r0, [r3, #0]
      bit_false(pl_data->condition,PL_COND_FLAG_INVERSE_TIME); // Force as feed absolute mode over arc segments.
 8003e30:	721e      	strb	r6, [r3, #8]
 8003e32:	e6bb      	b.n	8003bac <mc_arc+0x13c>
    if (angular_travel >= -ARC_ANGULAR_TRAVEL_EPSILON) { angular_travel -= 2*M_PI; }
 8003e34:	a30c      	add	r3, pc, #48	; (adr r3, 8003e68 <mc_arc+0x3f8>)
 8003e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e3a:	4630      	mov	r0, r6
 8003e3c:	4639      	mov	r1, r7
 8003e3e:	f7fc f98b 	bl	8000158 <__aeabi_dsub>
 8003e42:	f7fc fddb 	bl	80009fc <__aeabi_d2f>
 8003e46:	4604      	mov	r4, r0
 8003e48:	e680      	b.n	8003b4c <mc_arc+0xdc>
  if (bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE)) {
 8003e4a:	f89b 2058 	ldrb.w	r2, [fp, #88]	; 0x58
 8003e4e:	4c08      	ldr	r4, [pc, #32]	; (8003e70 <mc_arc+0x400>)
 8003e50:	0691      	lsls	r1, r2, #26
 8003e52:	7823      	ldrb	r3, [r4, #0]
 8003e54:	f57f af63 	bpl.w	8003d1e <mc_arc+0x2ae>
 8003e58:	e75b      	b.n	8003d12 <mc_arc+0x2a2>
 8003e5a:	bf00      	nop
 8003e5c:	f3af 8000 	nop.w
 8003e60:	a0b5ed8d 	.word	0xa0b5ed8d
 8003e64:	3ea0c6f7 	.word	0x3ea0c6f7
 8003e68:	54442d18 	.word	0x54442d18
 8003e6c:	401921fb 	.word	0x401921fb
 8003e70:	20001408 	.word	0x20001408

08003e74 <mc_dwell>:


// Execute dwell in seconds.
void mc_dwell(float seconds)
{
  if (sys.state == STATE_CHECK_MODE) { return; }
 8003e74:	4b07      	ldr	r3, [pc, #28]	; (8003e94 <mc_dwell+0x20>)
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	d009      	beq.n	8003e90 <mc_dwell+0x1c>
{
 8003e7c:	b510      	push	{r4, lr}
 8003e7e:	4604      	mov	r4, r0
  protocol_buffer_synchronize();
 8003e80:	f002 f982 	bl	8006188 <protocol_buffer_synchronize>
  delay_sec(seconds, DELAY_MODE_DWELL);
 8003e84:	4620      	mov	r0, r4
}
 8003e86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  delay_sec(seconds, DELAY_MODE_DWELL);
 8003e8a:	2100      	movs	r1, #0
 8003e8c:	f000 b97c 	b.w	8004188 <delay_sec>
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop
 8003e94:	20001408 	.word	0x20001408

08003e98 <mc_homing_cycle>:

// Perform homing cycle to locate and set machine zero. Only '$H' executes this command.
// NOTE: There should be no motions in the buffer and Grbl must be in an idle state before
// executing the homing cycle. This prevents incorrect buffered plans after homing.
void mc_homing_cycle(uint8_t cycle_mask)
{
 8003e98:	b510      	push	{r4, lr}
 8003e9a:	4604      	mov	r4, r0
      system_set_exec_alarm(EXEC_ALARM_HARD_LIMIT);
      return;
    }
  #endif

  limits_disable(); // Disable hard limits pin change register for cycle duration
 8003e9c:	f7ff f9f4 	bl	8003288 <limits_disable>

  // -------------------------------------------------------------------------------------
  // Perform homing routine. NOTE: Special motion case. Only system reset works.
  
  #ifdef HOMING_SINGLE_AXIS_COMMANDS
    if (cycle_mask) { limits_go_home(cycle_mask); } // Perform homing cycle based on mask.
 8003ea0:	b144      	cbz	r4, 8003eb4 <mc_homing_cycle+0x1c>
 8003ea2:	4620      	mov	r0, r4
 8003ea4:	f7ff fa7a 	bl	800339c <limits_go_home>
    #ifdef HOMING_CYCLE_2
      limits_go_home(HOMING_CYCLE_2);  // Homing cycle 2
    #endif
  }

  protocol_execute_realtime(); // Check for reset and set system abort.
 8003ea8:	f001 ff80 	bl	8005dac <protocol_execute_realtime>
  if (sys.abort) { return; } // Did not complete. Alarm state set by mc_alarm.
 8003eac:	4b10      	ldr	r3, [pc, #64]	; (8003ef0 <mc_homing_cycle+0x58>)
 8003eae:	785b      	ldrb	r3, [r3, #1]
 8003eb0:	b17b      	cbz	r3, 8003ed2 <mc_homing_cycle+0x3a>
	NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
	NVIC_EnableIRQ(EXTI15_10_IRQn);
#else
	limits_init();
#endif
}
 8003eb2:	bd10      	pop	{r4, pc}
    limits_go_home(HOMING_CYCLE_0);  // Homing cycle 0
 8003eb4:	2004      	movs	r0, #4
 8003eb6:	f7ff fa71 	bl	800339c <limits_go_home>
      limits_go_home(HOMING_CYCLE_1);  // Homing cycle 1
 8003eba:	2003      	movs	r0, #3
 8003ebc:	f7ff fa6e 	bl	800339c <limits_go_home>
      limits_go_home(HOMING_CYCLE_2);  // Homing cycle 2
 8003ec0:	2008      	movs	r0, #8
 8003ec2:	f7ff fa6b 	bl	800339c <limits_go_home>
  protocol_execute_realtime(); // Check for reset and set system abort.
 8003ec6:	f001 ff71 	bl	8005dac <protocol_execute_realtime>
  if (sys.abort) { return; } // Did not complete. Alarm state set by mc_alarm.
 8003eca:	4b09      	ldr	r3, [pc, #36]	; (8003ef0 <mc_homing_cycle+0x58>)
 8003ecc:	785b      	ldrb	r3, [r3, #1]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d1ef      	bne.n	8003eb2 <mc_homing_cycle+0x1a>
  gc_sync_position();
 8003ed2:	f7fd ff75 	bl	8001dc0 <gc_sync_position>
  plan_sync_position();
 8003ed6:	f000 feef 	bl	8004cb8 <plan_sync_position>
	EXTI_ClearITPendingBit((1 << X_LIMIT_BIT) | (1 << Y_LIMIT_BIT) | (1 << Z_LIMIT_BIT) | (1 << A_LIMIT_BIT));
 8003eda:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8003ede:	f7fd f98f 	bl	8001200 <EXTI_ClearITPendingBit>
 8003ee2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ee6:	4b03      	ldr	r3, [pc, #12]	; (8003ef4 <mc_homing_cycle+0x5c>)
 8003ee8:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 8003eec:	605a      	str	r2, [r3, #4]
}
 8003eee:	bd10      	pop	{r4, pc}
 8003ef0:	20001408 	.word	0x20001408
 8003ef4:	e000e100 	.word	0xe000e100

08003ef8 <mc_probe_cycle>:


// Perform tool length probe cycle. Requires probe switch.
// NOTE: Upon probe failure, the program will be stopped and placed into ALARM state.
uint8_t mc_probe_cycle(float *target, plan_line_data_t *pl_data, uint8_t parser_flags)
{
 8003ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // TODO: Need to update this cycle so it obeys a non-auto cycle start.
  if (sys.state == STATE_CHECK_MODE) { return(GC_PROBE_CHECK_MODE); }
 8003efc:	4c42      	ldr	r4, [pc, #264]	; (8004008 <mc_probe_cycle+0x110>)
 8003efe:	7823      	ldrb	r3, [r4, #0]
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	d032      	beq.n	8003f6a <mc_probe_cycle+0x72>
 8003f04:	4615      	mov	r5, r2
 8003f06:	460f      	mov	r7, r1
 8003f08:	4606      	mov	r6, r0

  // Finish all queued commands and empty planner buffer before starting probe cycle.
  protocol_buffer_synchronize();
 8003f0a:	f002 f93d 	bl	8006188 <protocol_buffer_synchronize>
  if (sys.abort) { return(GC_PROBE_ABORT); } // Return if system reset has been issued.
 8003f0e:	f894 8001 	ldrb.w	r8, [r4, #1]
 8003f12:	f1b8 0f00 	cmp.w	r8, #0
 8003f16:	d125      	bne.n	8003f64 <mc_probe_cycle+0x6c>

  // Initialize probing control variables
  uint8_t is_probe_away = bit_istrue(parser_flags, GC_PARSER_PROBE_IS_AWAY);
  uint8_t is_no_error = bit_istrue(parser_flags, GC_PARSER_PROBE_IS_NO_ERROR);
  sys.probe_succeeded = false; // Re-initialize probe history before beginning cycle.
  probe_configure_invert_mask(is_probe_away);
 8003f18:	f3c5 00c0 	ubfx	r0, r5, #3, #1
  sys.probe_succeeded = false; // Re-initialize probe history before beginning cycle.
 8003f1c:	f884 8005 	strb.w	r8, [r4, #5]
  probe_configure_invert_mask(is_probe_away);
 8003f20:	f001 f9f4 	bl	800530c <probe_configure_invert_mask>

  // After syncing, check if probe is already triggered. If so, halt and issue alarm.
  // NOTE: This probe initialization error applies to all probing cycles.
  if ( probe_get_state() ) { // Check probe pin state.
 8003f24:	f001 fa06 	bl	8005334 <probe_get_state>
 8003f28:	bb68      	cbnz	r0, 8003f86 <mc_probe_cycle+0x8e>
  if (bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE)) {
 8003f2a:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 8004018 <mc_probe_cycle+0x120>
 8003f2e:	7823      	ldrb	r3, [r4, #0]
 8003f30:	f898 2058 	ldrb.w	r2, [r8, #88]	; 0x58
 8003f34:	0690      	lsls	r0, r2, #26
 8003f36:	d505      	bpl.n	8003f44 <mc_probe_cycle+0x4c>
    if (sys.state != STATE_JOG) { limits_soft_check(target); }
 8003f38:	2b20      	cmp	r3, #32
 8003f3a:	d01e      	beq.n	8003f7a <mc_probe_cycle+0x82>
 8003f3c:	4630      	mov	r0, r6
 8003f3e:	f7ff fc35 	bl	80037ac <limits_soft_check>
 8003f42:	7823      	ldrb	r3, [r4, #0]
  if (sys.state == STATE_CHECK_MODE) { return; }
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d118      	bne.n	8003f7a <mc_probe_cycle+0x82>

  // Setup and queue probing motion. Auto cycle-start should not start the cycle.
  mc_line(target, pl_data);

  // Activate the probing state monitor in the stepper module.
  sys_probe_state = PROBE_ACTIVE;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	4e30      	ldr	r6, [pc, #192]	; (800400c <mc_probe_cycle+0x114>)

  // Perform probing cycle. Wait here until probe is triggered or motion completes.
  system_set_exec_state_flag(EXEC_CYCLE_START);
 8003f4c:	2002      	movs	r0, #2
  sys_probe_state = PROBE_ACTIVE;
 8003f4e:	7033      	strb	r3, [r6, #0]
  system_set_exec_state_flag(EXEC_CYCLE_START);
 8003f50:	f005 ff06 	bl	8009d60 <system_set_exec_state_flag>
 8003f54:	e001      	b.n	8003f5a <mc_probe_cycle+0x62>
  do {
    protocol_execute_realtime();
    if (sys.abort) { return(GC_PROBE_ABORT); } // Check for system abort
  } while (sys.state != STATE_IDLE);
 8003f56:	7823      	ldrb	r3, [r4, #0]
 8003f58:	b1f3      	cbz	r3, 8003f98 <mc_probe_cycle+0xa0>
    protocol_execute_realtime();
 8003f5a:	f001 ff27 	bl	8005dac <protocol_execute_realtime>
    if (sys.abort) { return(GC_PROBE_ABORT); } // Check for system abort
 8003f5e:	7863      	ldrb	r3, [r4, #1]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d0f8      	beq.n	8003f56 <mc_probe_cycle+0x5e>
    return(GC_PROBE_FAIL_INIT); // Nothing else to do but bail.
 8003f64:	2002      	movs	r0, #2
    report_probe_parameters();
  #endif

  if (sys.probe_succeeded) { return(GC_PROBE_FOUND); } // Successful probe cycle.
  else { return(GC_PROBE_FAIL_END); } // Failed to trigger probe within travel. With or without error.
}
 8003f66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (sys.state == STATE_CHECK_MODE) { return(GC_PROBE_CHECK_MODE); }
 8003f6a:	2000      	movs	r0, #0
}
 8003f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ( plan_check_full_buffer() ) { protocol_auto_cycle_start(); } // Auto-cycle start when buffer is full.
 8003f70:	f000 fb8e 	bl	8004690 <plan_check_full_buffer>
 8003f74:	b348      	cbz	r0, 8003fca <mc_probe_cycle+0xd2>
 8003f76:	f001 fa11 	bl	800539c <protocol_auto_cycle_start>
    protocol_execute_realtime(); // Check for any run-time commands
 8003f7a:	f001 ff17 	bl	8005dac <protocol_execute_realtime>
    if (sys.abort) { return; } // Bail, if system abort.
 8003f7e:	7863      	ldrb	r3, [r4, #1]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d0f5      	beq.n	8003f70 <mc_probe_cycle+0x78>
 8003f84:	e7e0      	b.n	8003f48 <mc_probe_cycle+0x50>
    system_set_exec_alarm(EXEC_ALARM_PROBE_FAIL_INITIAL);
 8003f86:	2004      	movs	r0, #4
 8003f88:	f005 fefe 	bl	8009d88 <system_set_exec_alarm>
    protocol_execute_realtime();
 8003f8c:	f001 ff0e 	bl	8005dac <protocol_execute_realtime>
    probe_configure_invert_mask(false); // Re-initialize invert mask before returning.
 8003f90:	4640      	mov	r0, r8
 8003f92:	f001 f9bb 	bl	800530c <probe_configure_invert_mask>
 8003f96:	e7e5      	b.n	8003f64 <mc_probe_cycle+0x6c>
  if (sys_probe_state == PROBE_ACTIVE) {
 8003f98:	7833      	ldrb	r3, [r6, #0]
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d027      	beq.n	8003fee <mc_probe_cycle+0xf6>
    sys.probe_succeeded = true; // Indicate to system the probing cycle completed successfully.
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	7163      	strb	r3, [r4, #5]
  sys_probe_state = PROBE_OFF; // Ensure probe state monitor is disabled.
 8003fa2:	2300      	movs	r3, #0
  probe_configure_invert_mask(false); // Re-initialize invert mask.
 8003fa4:	4618      	mov	r0, r3
  sys_probe_state = PROBE_OFF; // Ensure probe state monitor is disabled.
 8003fa6:	7033      	strb	r3, [r6, #0]
  probe_configure_invert_mask(false); // Re-initialize invert mask.
 8003fa8:	f001 f9b0 	bl	800530c <probe_configure_invert_mask>
  protocol_execute_realtime();   // Check and execute run-time commands
 8003fac:	f001 fefe 	bl	8005dac <protocol_execute_realtime>
  st_reset(); // Reset step segment buffer.
 8003fb0:	f004 fc42 	bl	8008838 <st_reset>
  plan_reset(); // Reset planner buffer. Zero planner positions. Ensure probing motion is cleared.
 8003fb4:	f000 fafa 	bl	80045ac <plan_reset>
  plan_sync_position(); // Sync planner position to current machine position.
 8003fb8:	f000 fe7e 	bl	8004cb8 <plan_sync_position>
    report_probe_parameters();
 8003fbc:	f002 ff24 	bl	8006e08 <report_probe_parameters>
  if (sys.probe_succeeded) { return(GC_PROBE_FOUND); } // Successful probe cycle.
 8003fc0:	7960      	ldrb	r0, [r4, #5]
  if (sys.state == STATE_CHECK_MODE) { return(GC_PROBE_CHECK_MODE); }
 8003fc2:	3000      	adds	r0, #0
 8003fc4:	bf18      	it	ne
 8003fc6:	2001      	movne	r0, #1
 8003fc8:	e7cd      	b.n	8003f66 <mc_probe_cycle+0x6e>
	if (plan_buffer_line(target, pl_data) == PLAN_EMPTY_BLOCK) {
 8003fca:	4630      	mov	r0, r6
 8003fcc:	4639      	mov	r1, r7
 8003fce:	f000 fc1f 	bl	8004810 <plan_buffer_line>
 8003fd2:	2800      	cmp	r0, #0
 8003fd4:	d1b8      	bne.n	8003f48 <mc_probe_cycle+0x50>
		if (bit_istrue(settings.flags, BITFLAG_LASER_MODE)) {
 8003fd6:	f898 3058 	ldrb.w	r3, [r8, #88]	; 0x58
 8003fda:	0799      	lsls	r1, r3, #30
 8003fdc:	d5b4      	bpl.n	8003f48 <mc_probe_cycle+0x50>
			if (pl_data->condition & PL_COND_FLAG_SPINDLE_CW) {
 8003fde:	7a3b      	ldrb	r3, [r7, #8]
 8003fe0:	06da      	lsls	r2, r3, #27
 8003fe2:	d5b1      	bpl.n	8003f48 <mc_probe_cycle+0x50>
				spindle_sync(PL_COND_FLAG_SPINDLE_CW, pl_data->spindle_speed);
 8003fe4:	6879      	ldr	r1, [r7, #4]
 8003fe6:	2010      	movs	r0, #16
 8003fe8:	f004 f952 	bl	8008290 <spindle_sync>
 8003fec:	e7ac      	b.n	8003f48 <mc_probe_cycle+0x50>
    if (is_no_error) { memcpy(sys_probe_position, sys_position, sizeof(sys_position)); }
 8003fee:	06eb      	lsls	r3, r5, #27
 8003ff0:	d505      	bpl.n	8003ffe <mc_probe_cycle+0x106>
 8003ff2:	4b07      	ldr	r3, [pc, #28]	; (8004010 <mc_probe_cycle+0x118>)
 8003ff4:	4d07      	ldr	r5, [pc, #28]	; (8004014 <mc_probe_cycle+0x11c>)
 8003ff6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003ff8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8003ffc:	e7d1      	b.n	8003fa2 <mc_probe_cycle+0xaa>
    else { system_set_exec_alarm(EXEC_ALARM_PROBE_FAIL_CONTACT); }
 8003ffe:	2005      	movs	r0, #5
 8004000:	f005 fec2 	bl	8009d88 <system_set_exec_alarm>
 8004004:	e7cd      	b.n	8003fa2 <mc_probe_cycle+0xaa>
 8004006:	bf00      	nop
 8004008:	20001408 	.word	0x20001408
 800400c:	2000141e 	.word	0x2000141e
 8004010:	20001430 	.word	0x20001430
 8004014:	20001420 	.word	0x20001420
 8004018:	20001744 	.word	0x20001744

0800401c <mc_reset>:
// active processes in the system. This also checks if a system reset is issued while Grbl
// is in a motion state. If so, kills the steppers and sets the system alarm to flag position
// lost, since there was an abrupt uncontrolled deceleration. Called at an interrupt level by
// realtime abort command and hard limits. So, keep to a minimum.
void mc_reset()
{
 800401c:	b508      	push	{r3, lr}
  // Only this function can set the system reset. Helps prevent multiple kill calls.
  if (bit_isfalse(sys_rt_exec_state, EXEC_RESET)) {
 800401e:	4b15      	ldr	r3, [pc, #84]	; (8004074 <mc_reset+0x58>)
 8004020:	781b      	ldrb	r3, [r3, #0]
 8004022:	06db      	lsls	r3, r3, #27
 8004024:	d500      	bpl.n	8004028 <mc_reset+0xc>
      }
      else { system_set_exec_alarm(EXEC_ALARM_ABORT_CYCLE); }
      st_go_idle(); // Force kill steppers. Position has likely been lost.
    }
  }
}
 8004026:	bd08      	pop	{r3, pc}
    system_set_exec_state_flag(EXEC_RESET);
 8004028:	2010      	movs	r0, #16
 800402a:	f005 fe99 	bl	8009d60 <system_set_exec_state_flag>
    spindle_stop();
 800402e:	f004 f843 	bl	80080b8 <spindle_stop>
    coolant_stop();
 8004032:	f7fd fdb5 	bl	8001ba0 <coolant_stop>
    if ((sys.state & (STATE_CYCLE | STATE_HOMING | STATE_JOG)) ||
 8004036:	4a10      	ldr	r2, [pc, #64]	; (8004078 <mc_reset+0x5c>)
 8004038:	7813      	ldrb	r3, [r2, #0]
 800403a:	f013 0f2c 	tst.w	r3, #44	; 0x2c
 800403e:	d008      	beq.n	8004052 <mc_reset+0x36>
      if (sys.state == STATE_HOMING) {
 8004040:	2b04      	cmp	r3, #4
 8004042:	d10b      	bne.n	800405c <mc_reset+0x40>
        if (!sys_rt_exec_alarm) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_RESET); }
 8004044:	4b0d      	ldr	r3, [pc, #52]	; (800407c <mc_reset+0x60>)
 8004046:	781b      	ldrb	r3, [r3, #0]
 8004048:	b17b      	cbz	r3, 800406a <mc_reset+0x4e>
}
 800404a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      st_go_idle(); // Force kill steppers. Position has likely been lost.
 800404e:	f004 ba19 	b.w	8008484 <st_go_idle>
    if ((sys.state & (STATE_CYCLE | STATE_HOMING | STATE_JOG)) ||
 8004052:	7912      	ldrb	r2, [r2, #4]
 8004054:	f012 0f06 	tst.w	r2, #6
 8004058:	d1f2      	bne.n	8004040 <mc_reset+0x24>
 800405a:	e7e4      	b.n	8004026 <mc_reset+0xa>
      else { system_set_exec_alarm(EXEC_ALARM_ABORT_CYCLE); }
 800405c:	2003      	movs	r0, #3
 800405e:	f005 fe93 	bl	8009d88 <system_set_exec_alarm>
}
 8004062:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      st_go_idle(); // Force kill steppers. Position has likely been lost.
 8004066:	f004 ba0d 	b.w	8008484 <st_go_idle>
        if (!sys_rt_exec_alarm) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_RESET); }
 800406a:	2006      	movs	r0, #6
 800406c:	f005 fe8c 	bl	8009d88 <system_set_exec_alarm>
 8004070:	e7eb      	b.n	800404a <mc_reset+0x2e>
 8004072:	bf00      	nop
 8004074:	2000141d 	.word	0x2000141d
 8004078:	20001408 	.word	0x20001408
 800407c:	20001440 	.word	0x20001440

08004080 <read_float>:
// CNC applications, the typical decimal value is expected to be in the range of E0 to E-4.
// Scientific notation is officially not supported by g-code, and the 'E' character may
// be a g-code word on some CNC systems. So, 'E' notation will not be recognized.
// NOTE: Thanks to Radu-Eosif Mihailescu for identifying the issues with using strtod().
uint8_t read_float(char *line, uint8_t *char_counter, float *float_ptr)
{
 8004080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  char *ptr = line + *char_counter;
 8004084:	780c      	ldrb	r4, [r1, #0]
{
 8004086:	b083      	sub	sp, #12
  unsigned char c;

  // Grab first character and increment pointer. No spaces assumed in line.
  c = *ptr++;
 8004088:	5d03      	ldrb	r3, [r0, r4]
  char *ptr = line + *char_counter;
 800408a:	4404      	add	r4, r0

  // Capture initial positive/minus character
  bool isnegative = false;
  if (c == '-') {
 800408c:	2b2d      	cmp	r3, #45	; 0x2d
 800408e:	d069      	beq.n	8004164 <read_float+0xe4>
    isnegative = true;
    c = *ptr++;
  } else if (c == '+') {
 8004090:	2b2b      	cmp	r3, #43	; 0x2b
 8004092:	d01d      	beq.n	80040d0 <read_float+0x50>
  bool isnegative = false;
 8004094:	f04f 0800 	mov.w	r8, #0
  c = *ptr++;
 8004098:	1c65      	adds	r5, r4, #1

  // Extract number into fast integer. Track decimal in terms of exponent value.
  uint32_t intval = 0;
  int8_t exp = 0;
  uint8_t ndigit = 0;
  bool isdecimal = false;
 800409a:	2600      	movs	r6, #0
  uint8_t ndigit = 0;
 800409c:	4634      	mov	r4, r6
  int8_t exp = 0;
 800409e:	4637      	mov	r7, r6
  uint32_t intval = 0;
 80040a0:	46b4      	mov	ip, r6
 80040a2:	e00c      	b.n	80040be <read_float+0x3e>
  while(1) {
    c -= '0';
    if (c <= 9) {
      ndigit++;
 80040a4:	3401      	adds	r4, #1
 80040a6:	b2e4      	uxtb	r4, r4
      if (ndigit <= MAX_INT_DIGITS) {
 80040a8:	2c08      	cmp	r4, #8
 80040aa:	d816      	bhi.n	80040da <read_float+0x5a>
        if (isdecimal) { exp--; }
 80040ac:	b10e      	cbz	r6, 80040b2 <read_float+0x32>
 80040ae:	3f01      	subs	r7, #1
 80040b0:	b27f      	sxtb	r7, r7
        intval = (((intval << 2) + intval) << 1) + c; // intval*10 + c
 80040b2:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 80040b6:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
    } else if (c == (('.'-'0') & 0xff)  &&  !(isdecimal)) {
      isdecimal = true;
    } else {
      break;
    }
    c = *ptr++;
 80040ba:	f815 3b01 	ldrb.w	r3, [r5], #1
    c -= '0';
 80040be:	3b30      	subs	r3, #48	; 0x30
 80040c0:	b2db      	uxtb	r3, r3
    if (c <= 9) {
 80040c2:	2b09      	cmp	r3, #9
 80040c4:	d9ee      	bls.n	80040a4 <read_float+0x24>
    } else if (c == (('.'-'0') & 0xff)  &&  !(isdecimal)) {
 80040c6:	2bfe      	cmp	r3, #254	; 0xfe
 80040c8:	d10c      	bne.n	80040e4 <read_float+0x64>
 80040ca:	b95e      	cbnz	r6, 80040e4 <read_float+0x64>
      isdecimal = true;
 80040cc:	2601      	movs	r6, #1
 80040ce:	e7f4      	b.n	80040ba <read_float+0x3a>
  bool isnegative = false;
 80040d0:	f04f 0800 	mov.w	r8, #0
    c = *ptr++;
 80040d4:	7863      	ldrb	r3, [r4, #1]
 80040d6:	1ca5      	adds	r5, r4, #2
 80040d8:	e7df      	b.n	800409a <read_float+0x1a>
        if (!(isdecimal)) { exp++; }  // Drop overflow digits
 80040da:	2e00      	cmp	r6, #0
 80040dc:	d1ed      	bne.n	80040ba <read_float+0x3a>
 80040de:	3701      	adds	r7, #1
 80040e0:	b27f      	sxtb	r7, r7
 80040e2:	e7ea      	b.n	80040ba <read_float+0x3a>
  }

  // Return if no digits have been read.
  if (!ndigit) { return(false); };
 80040e4:	2c00      	cmp	r4, #0
 80040e6:	d039      	beq.n	800415c <read_float+0xdc>
 80040e8:	4682      	mov	sl, r0

  // Convert integer into floating point.
  float fval;
  fval = (float)intval;
 80040ea:	4660      	mov	r0, ip
 80040ec:	9101      	str	r1, [sp, #4]
 80040ee:	4691      	mov	r9, r2
 80040f0:	f7fc fd8a 	bl	8000c08 <__aeabi_ui2f>

  // Apply decimal. Should perform no more than two floating point multiplications for the
  // expected range of E0 to E-4.
  if (fval != 0) {
 80040f4:	2100      	movs	r1, #0
  fval = (float)intval;
 80040f6:	4683      	mov	fp, r0
  if (fval != 0) {
 80040f8:	f7fc ff72 	bl	8000fe0 <__aeabi_fcmpeq>
 80040fc:	bb08      	cbnz	r0, 8004142 <read_float+0xc2>
    while (exp <= -2) {
 80040fe:	1c79      	adds	r1, r7, #1
 8004100:	da12      	bge.n	8004128 <read_float+0xa8>
 8004102:	463e      	mov	r6, r7
      fval *= 0.01f;
 8004104:	4c1d      	ldr	r4, [pc, #116]	; (800417c <read_float+0xfc>)
 8004106:	4658      	mov	r0, fp
 8004108:	4621      	mov	r1, r4
 800410a:	f7fc fdd5 	bl	8000cb8 <__aeabi_fmul>
 800410e:	1cb3      	adds	r3, r6, #2
 8004110:	b25e      	sxtb	r6, r3
    while (exp <= -2) {
 8004112:	1c72      	adds	r2, r6, #1
      fval *= 0.01f;
 8004114:	4683      	mov	fp, r0
    while (exp <= -2) {
 8004116:	dbf6      	blt.n	8004106 <read_float+0x86>
 8004118:	b2ff      	uxtb	r7, r7
 800411a:	f1c7 03fe 	rsb	r3, r7, #254	; 0xfe
 800411e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004122:	441f      	add	r7, r3
 8004124:	3702      	adds	r7, #2
 8004126:	b27f      	sxtb	r7, r7
      exp += 2;
    }
    if (exp < 0) {
 8004128:	1c7b      	adds	r3, r7, #1
 800412a:	d020      	beq.n	800416e <read_float+0xee>
      fval *= 0.1f;
    } else if (exp > 0) {
 800412c:	b14f      	cbz	r7, 8004142 <read_float+0xc2>
      do {
        fval *= 10.0f;
 800412e:	4c14      	ldr	r4, [pc, #80]	; (8004180 <read_float+0x100>)
 8004130:	4658      	mov	r0, fp
 8004132:	4621      	mov	r1, r4
 8004134:	f7fc fdc0 	bl	8000cb8 <__aeabi_fmul>
 8004138:	3f01      	subs	r7, #1
 800413a:	b27f      	sxtb	r7, r7
 800413c:	4683      	mov	fp, r0
      } while (--exp > 0);
 800413e:	2f00      	cmp	r7, #0
 8004140:	d1f6      	bne.n	8004130 <read_float+0xb0>
    }
  }

  // Assign floating point value with correct sign.
  if (isnegative) {
 8004142:	f1b8 0f00 	cmp.w	r8, #0
 8004146:	d001      	beq.n	800414c <read_float+0xcc>
    *float_ptr = -fval;
 8004148:	f10b 4b00 	add.w	fp, fp, #2147483648	; 0x80000000
    *float_ptr = fval;
  }

  *char_counter = ptr - line - 1; // Set char_counter to next statement

  return(true);
 800414c:	2401      	movs	r4, #1
  *char_counter = ptr - line - 1; // Set char_counter to next statement
 800414e:	eba5 050a 	sub.w	r5, r5, sl
 8004152:	9b01      	ldr	r3, [sp, #4]
 8004154:	3d01      	subs	r5, #1
 8004156:	f8c9 b000 	str.w	fp, [r9]
 800415a:	701d      	strb	r5, [r3, #0]
}
 800415c:	4620      	mov	r0, r4
 800415e:	b003      	add	sp, #12
 8004160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c = *ptr++;
 8004164:	1ca5      	adds	r5, r4, #2
 8004166:	7863      	ldrb	r3, [r4, #1]
    isnegative = true;
 8004168:	f04f 0801 	mov.w	r8, #1
 800416c:	e795      	b.n	800409a <read_float+0x1a>
      fval *= 0.1f;
 800416e:	4658      	mov	r0, fp
 8004170:	4904      	ldr	r1, [pc, #16]	; (8004184 <read_float+0x104>)
 8004172:	f7fc fda1 	bl	8000cb8 <__aeabi_fmul>
 8004176:	4683      	mov	fp, r0
 8004178:	e7e3      	b.n	8004142 <read_float+0xc2>
 800417a:	bf00      	nop
 800417c:	3c23d70a 	.word	0x3c23d70a
 8004180:	41200000 	.word	0x41200000
 8004184:	3dcccccd 	.word	0x3dcccccd

08004188 <delay_sec>:


// Non-blocking delay function used for general operation and suspend features.
void delay_sec(float seconds, uint8_t mode)
{
 8004188:	b570      	push	{r4, r5, r6, lr}
 800418a:	460e      	mov	r6, r1
	uint16_t i = (uint16_t)ceilf(1000 / DWELL_TIME_STEP*seconds);
 800418c:	4918      	ldr	r1, [pc, #96]	; (80041f0 <delay_sec+0x68>)
 800418e:	f7fc fd93 	bl	8000cb8 <__aeabi_fmul>
 8004192:	f007 fb09 	bl	800b7a8 <ceilf>
 8004196:	f7fc ff91 	bl	80010bc <__aeabi_f2uiz>
 800419a:	b280      	uxth	r0, r0
	while (i-- > 0) {
 800419c:	b1b0      	cbz	r0, 80041cc <delay_sec+0x44>
		if (sys.abort) { return; }
 800419e:	4d15      	ldr	r5, [pc, #84]	; (80041f4 <delay_sec+0x6c>)
 80041a0:	786b      	ldrb	r3, [r5, #1]
 80041a2:	b99b      	cbnz	r3, 80041cc <delay_sec+0x44>
 80041a4:	1e44      	subs	r4, r0, #1
 80041a6:	b2a4      	uxth	r4, r4
 80041a8:	b18e      	cbz	r6, 80041ce <delay_sec+0x46>
	while (i-- > 0) {
 80041aa:	f64f 76ff 	movw	r6, #65535	; 0xffff
 80041ae:	e008      	b.n	80041c2 <delay_sec+0x3a>
 80041b0:	3c01      	subs	r4, #1
		} else { // DELAY_MODE_SYS_SUSPEND
		  // Execute rt_system() only to avoid nesting suspend loops.
		  protocol_exec_rt_system();
		  if (sys.suspend & SUSPEND_RESTART_RETRACT) { return; } // Bail, if safety door reopens.
		}
		_delay_ms(DWELL_TIME_STEP); // Delay DWELL_TIME_STEP increment
 80041b2:	2032      	movs	r0, #50	; 0x32
	while (i-- > 0) {
 80041b4:	b2a4      	uxth	r4, r4
		_delay_ms(DWELL_TIME_STEP); // Delay DWELL_TIME_STEP increment
 80041b6:	f7ff fbf9 	bl	80039ac <_delay_ms>
	while (i-- > 0) {
 80041ba:	42b4      	cmp	r4, r6
 80041bc:	d006      	beq.n	80041cc <delay_sec+0x44>
		if (sys.abort) { return; }
 80041be:	786b      	ldrb	r3, [r5, #1]
 80041c0:	b923      	cbnz	r3, 80041cc <delay_sec+0x44>
		  protocol_exec_rt_system();
 80041c2:	f001 f8f5 	bl	80053b0 <protocol_exec_rt_system>
		  if (sys.suspend & SUSPEND_RESTART_RETRACT) { return; } // Bail, if safety door reopens.
 80041c6:	78ab      	ldrb	r3, [r5, #2]
 80041c8:	079b      	lsls	r3, r3, #30
 80041ca:	d5f1      	bpl.n	80041b0 <delay_sec+0x28>
	}
}
 80041cc:	bd70      	pop	{r4, r5, r6, pc}
	while (i-- > 0) {
 80041ce:	f64f 76ff 	movw	r6, #65535	; 0xffff
 80041d2:	e002      	b.n	80041da <delay_sec+0x52>
		if (sys.abort) { return; }
 80041d4:	786b      	ldrb	r3, [r5, #1]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d1f8      	bne.n	80041cc <delay_sec+0x44>
	while (i-- > 0) {
 80041da:	3c01      	subs	r4, #1
			protocol_execute_realtime();
 80041dc:	f001 fde6 	bl	8005dac <protocol_execute_realtime>
	while (i-- > 0) {
 80041e0:	b2a4      	uxth	r4, r4
		_delay_ms(DWELL_TIME_STEP); // Delay DWELL_TIME_STEP increment
 80041e2:	2032      	movs	r0, #50	; 0x32
 80041e4:	f7ff fbe2 	bl	80039ac <_delay_ms>
	while (i-- > 0) {
 80041e8:	42b4      	cmp	r4, r6
 80041ea:	d1f3      	bne.n	80041d4 <delay_sec+0x4c>
}
 80041ec:	bd70      	pop	{r4, r5, r6, pc}
 80041ee:	bf00      	nop
 80041f0:	41a00000 	.word	0x41a00000
 80041f4:	20001408 	.word	0x20001408

080041f8 <delay_ms>:

// Delays variable defined milliseconds. Compiler compatibility fix for _delay_ms(),
// which only accepts constants in future compiler releases.
void delay_ms(uint16_t ms)
{
  while ( ms-- ) { _delay_ms(1); }
 80041f8:	b160      	cbz	r0, 8004214 <delay_ms+0x1c>
{
 80041fa:	b538      	push	{r3, r4, r5, lr}
  while ( ms-- ) { _delay_ms(1); }
 80041fc:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8004200:	1e44      	subs	r4, r0, #1
 8004202:	b2a4      	uxth	r4, r4
 8004204:	3c01      	subs	r4, #1
 8004206:	2001      	movs	r0, #1
 8004208:	b2a4      	uxth	r4, r4
 800420a:	f7ff fbcf 	bl	80039ac <_delay_ms>
 800420e:	42ac      	cmp	r4, r5
 8004210:	d1f8      	bne.n	8004204 <delay_ms+0xc>
}
 8004212:	bd38      	pop	{r3, r4, r5, pc}
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop

08004218 <hypot_f>:


// Simple hypotenuse computation function.
float hypot_f(float x, float y) { return(sqrtf(x*x + y*y)); }
 8004218:	b538      	push	{r3, r4, r5, lr}
 800421a:	460d      	mov	r5, r1
 800421c:	4601      	mov	r1, r0
 800421e:	f7fc fd4b 	bl	8000cb8 <__aeabi_fmul>
 8004222:	4629      	mov	r1, r5
 8004224:	4604      	mov	r4, r0
 8004226:	4628      	mov	r0, r5
 8004228:	f7fc fd46 	bl	8000cb8 <__aeabi_fmul>
 800422c:	4601      	mov	r1, r0
 800422e:	4620      	mov	r0, r4
 8004230:	f7fc fc3a 	bl	8000aa8 <__addsf3>
 8004234:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004238:	f007 bbce 	b.w	800b9d8 <sqrtf>

0800423c <convert_delta_vector_to_unit_vector>:


float convert_delta_vector_to_unit_vector(float *vector)
{
 800423c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t idx;
  float magnitude = 0.0f;
  for (idx=0; idx<N_AXIS; idx++) {
    if (vector[idx] != 0.0f) {
 800423e:	6806      	ldr	r6, [r0, #0]
{
 8004240:	4604      	mov	r4, r0
    if (vector[idx] != 0.0f) {
 8004242:	2100      	movs	r1, #0
 8004244:	4630      	mov	r0, r6
 8004246:	f7fc fecb 	bl	8000fe0 <__aeabi_fcmpeq>
 800424a:	2800      	cmp	r0, #0
 800424c:	d150      	bne.n	80042f0 <convert_delta_vector_to_unit_vector+0xb4>
      magnitude += vector[idx]*vector[idx];
 800424e:	4631      	mov	r1, r6
 8004250:	4630      	mov	r0, r6
 8004252:	f7fc fd31 	bl	8000cb8 <__aeabi_fmul>
 8004256:	4605      	mov	r5, r0
    if (vector[idx] != 0.0f) {
 8004258:	6867      	ldr	r7, [r4, #4]
 800425a:	2100      	movs	r1, #0
 800425c:	4638      	mov	r0, r7
 800425e:	f7fc febf 	bl	8000fe0 <__aeabi_fcmpeq>
 8004262:	b940      	cbnz	r0, 8004276 <convert_delta_vector_to_unit_vector+0x3a>
      magnitude += vector[idx]*vector[idx];
 8004264:	4639      	mov	r1, r7
 8004266:	4638      	mov	r0, r7
 8004268:	f7fc fd26 	bl	8000cb8 <__aeabi_fmul>
 800426c:	4601      	mov	r1, r0
 800426e:	4628      	mov	r0, r5
 8004270:	f7fc fc1a 	bl	8000aa8 <__addsf3>
 8004274:	4605      	mov	r5, r0
    if (vector[idx] != 0.0f) {
 8004276:	68a7      	ldr	r7, [r4, #8]
 8004278:	2100      	movs	r1, #0
 800427a:	4638      	mov	r0, r7
 800427c:	f7fc feb0 	bl	8000fe0 <__aeabi_fcmpeq>
 8004280:	b940      	cbnz	r0, 8004294 <convert_delta_vector_to_unit_vector+0x58>
      magnitude += vector[idx]*vector[idx];
 8004282:	4639      	mov	r1, r7
 8004284:	4638      	mov	r0, r7
 8004286:	f7fc fd17 	bl	8000cb8 <__aeabi_fmul>
 800428a:	4601      	mov	r1, r0
 800428c:	4628      	mov	r0, r5
 800428e:	f7fc fc0b 	bl	8000aa8 <__addsf3>
 8004292:	4605      	mov	r5, r0
    if (vector[idx] != 0.0f) {
 8004294:	68e7      	ldr	r7, [r4, #12]
 8004296:	2100      	movs	r1, #0
 8004298:	4638      	mov	r0, r7
 800429a:	f7fc fea1 	bl	8000fe0 <__aeabi_fcmpeq>
 800429e:	b940      	cbnz	r0, 80042b2 <convert_delta_vector_to_unit_vector+0x76>
      magnitude += vector[idx]*vector[idx];
 80042a0:	4639      	mov	r1, r7
 80042a2:	4638      	mov	r0, r7
 80042a4:	f7fc fd08 	bl	8000cb8 <__aeabi_fmul>
 80042a8:	4601      	mov	r1, r0
 80042aa:	4628      	mov	r0, r5
 80042ac:	f7fc fbfc 	bl	8000aa8 <__addsf3>
 80042b0:	4605      	mov	r5, r0
    }
  }
  magnitude = sqrtf(magnitude);
 80042b2:	4628      	mov	r0, r5
 80042b4:	f007 fb90 	bl	800b9d8 <sqrtf>
 80042b8:	4607      	mov	r7, r0
  float inv_magnitude = 1.0f/magnitude;
 80042ba:	4601      	mov	r1, r0
 80042bc:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80042c0:	f7fc fdae 	bl	8000e20 <__aeabi_fdiv>
  for (idx=0; idx<N_AXIS; idx++) { vector[idx] *= inv_magnitude; }
 80042c4:	4631      	mov	r1, r6
  float inv_magnitude = 1.0f/magnitude;
 80042c6:	4605      	mov	r5, r0
  for (idx=0; idx<N_AXIS; idx++) { vector[idx] *= inv_magnitude; }
 80042c8:	f7fc fcf6 	bl	8000cb8 <__aeabi_fmul>
 80042cc:	4629      	mov	r1, r5
 80042ce:	6020      	str	r0, [r4, #0]
 80042d0:	6860      	ldr	r0, [r4, #4]
 80042d2:	f7fc fcf1 	bl	8000cb8 <__aeabi_fmul>
 80042d6:	4629      	mov	r1, r5
 80042d8:	6060      	str	r0, [r4, #4]
 80042da:	68a0      	ldr	r0, [r4, #8]
 80042dc:	f7fc fcec 	bl	8000cb8 <__aeabi_fmul>
 80042e0:	4629      	mov	r1, r5
 80042e2:	60a0      	str	r0, [r4, #8]
 80042e4:	68e0      	ldr	r0, [r4, #12]
 80042e6:	f7fc fce7 	bl	8000cb8 <__aeabi_fmul>
 80042ea:	60e0      	str	r0, [r4, #12]
  return(magnitude);
}
 80042ec:	4638      	mov	r0, r7
 80042ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  float magnitude = 0.0f;
 80042f0:	2500      	movs	r5, #0
 80042f2:	e7b1      	b.n	8004258 <convert_delta_vector_to_unit_vector+0x1c>

080042f4 <limit_value_by_axis_maximum>:


float limit_value_by_axis_maximum(float *max_value, float *unit_vec)
{
 80042f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t idx;
  float limit_value = SOME_LARGE_VALUE;
  for (idx=0; idx<N_AXIS; idx++) {
    if (unit_vec[idx] != 0) {  // Avoid divide by zero.
 80042f6:	680c      	ldr	r4, [r1, #0]
{
 80042f8:	460d      	mov	r5, r1
 80042fa:	4606      	mov	r6, r0
    if (unit_vec[idx] != 0) {  // Avoid divide by zero.
 80042fc:	2100      	movs	r1, #0
 80042fe:	4620      	mov	r0, r4
 8004300:	f7fc fe6e 	bl	8000fe0 <__aeabi_fcmpeq>
 8004304:	2800      	cmp	r0, #0
 8004306:	d140      	bne.n	800438a <limit_value_by_axis_maximum+0x96>
      limit_value = min(limit_value,fabsf(max_value[idx]/unit_vec[idx]));
 8004308:	4621      	mov	r1, r4
 800430a:	6830      	ldr	r0, [r6, #0]
 800430c:	f7fc fd88 	bl	8000e20 <__aeabi_fdiv>
 8004310:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 8004314:	4620      	mov	r0, r4
 8004316:	4921      	ldr	r1, [pc, #132]	; (800439c <limit_value_by_axis_maximum+0xa8>)
 8004318:	f7fc fe76 	bl	8001008 <__aeabi_fcmple>
 800431c:	2800      	cmp	r0, #0
 800431e:	d034      	beq.n	800438a <limit_value_by_axis_maximum+0x96>
    if (unit_vec[idx] != 0) {  // Avoid divide by zero.
 8004320:	686f      	ldr	r7, [r5, #4]
 8004322:	2100      	movs	r1, #0
 8004324:	4638      	mov	r0, r7
 8004326:	f7fc fe5b 	bl	8000fe0 <__aeabi_fcmpeq>
 800432a:	b950      	cbnz	r0, 8004342 <limit_value_by_axis_maximum+0x4e>
      limit_value = min(limit_value,fabsf(max_value[idx]/unit_vec[idx]));
 800432c:	4639      	mov	r1, r7
 800432e:	6870      	ldr	r0, [r6, #4]
 8004330:	f7fc fd76 	bl	8000e20 <__aeabi_fdiv>
 8004334:	f020 4700 	bic.w	r7, r0, #2147483648	; 0x80000000
 8004338:	4639      	mov	r1, r7
 800433a:	4620      	mov	r0, r4
 800433c:	f7fc fe64 	bl	8001008 <__aeabi_fcmple>
 8004340:	b350      	cbz	r0, 8004398 <limit_value_by_axis_maximum+0xa4>
    if (unit_vec[idx] != 0) {  // Avoid divide by zero.
 8004342:	68af      	ldr	r7, [r5, #8]
 8004344:	2100      	movs	r1, #0
 8004346:	4638      	mov	r0, r7
 8004348:	f7fc fe4a 	bl	8000fe0 <__aeabi_fcmpeq>
 800434c:	b950      	cbnz	r0, 8004364 <limit_value_by_axis_maximum+0x70>
      limit_value = min(limit_value,fabsf(max_value[idx]/unit_vec[idx]));
 800434e:	4639      	mov	r1, r7
 8004350:	68b0      	ldr	r0, [r6, #8]
 8004352:	f7fc fd65 	bl	8000e20 <__aeabi_fdiv>
 8004356:	f020 4700 	bic.w	r7, r0, #2147483648	; 0x80000000
 800435a:	4639      	mov	r1, r7
 800435c:	4620      	mov	r0, r4
 800435e:	f7fc fe53 	bl	8001008 <__aeabi_fcmple>
 8004362:	b1b8      	cbz	r0, 8004394 <limit_value_by_axis_maximum+0xa0>
    if (unit_vec[idx] != 0) {  // Avoid divide by zero.
 8004364:	68ed      	ldr	r5, [r5, #12]
 8004366:	2100      	movs	r1, #0
 8004368:	4628      	mov	r0, r5
 800436a:	f7fc fe39 	bl	8000fe0 <__aeabi_fcmpeq>
 800436e:	b950      	cbnz	r0, 8004386 <limit_value_by_axis_maximum+0x92>
      limit_value = min(limit_value,fabsf(max_value[idx]/unit_vec[idx]));
 8004370:	4629      	mov	r1, r5
 8004372:	68f0      	ldr	r0, [r6, #12]
 8004374:	f7fc fd54 	bl	8000e20 <__aeabi_fdiv>
 8004378:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800437c:	4629      	mov	r1, r5
 800437e:	4620      	mov	r0, r4
 8004380:	f7fc fe42 	bl	8001008 <__aeabi_fcmple>
 8004384:	b118      	cbz	r0, 800438e <limit_value_by_axis_maximum+0x9a>
    }
  }
  return(limit_value);
}
 8004386:	4620      	mov	r0, r4
 8004388:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  float limit_value = SOME_LARGE_VALUE;
 800438a:	4c04      	ldr	r4, [pc, #16]	; (800439c <limit_value_by_axis_maximum+0xa8>)
 800438c:	e7c8      	b.n	8004320 <limit_value_by_axis_maximum+0x2c>
      limit_value = min(limit_value,fabsf(max_value[idx]/unit_vec[idx]));
 800438e:	462c      	mov	r4, r5
}
 8004390:	4620      	mov	r0, r4
 8004392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      limit_value = min(limit_value,fabsf(max_value[idx]/unit_vec[idx]));
 8004394:	463c      	mov	r4, r7
 8004396:	e7e5      	b.n	8004364 <limit_value_by_axis_maximum+0x70>
 8004398:	463c      	mov	r4, r7
 800439a:	e7d2      	b.n	8004342 <limit_value_by_axis_maximum+0x4e>
 800439c:	7f7fffff 	.word	0x7f7fffff

080043a0 <planner_recalculate>:
  to compute an optimal plan, so select carefully. The Arduino 328p memory is already maxed out, but future
  ARM versions should have enough memory and speed for look-ahead blocks numbering up to a hundred or more.

*/
static void planner_recalculate()
{
 80043a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  // Initialize block index to the last block in the planner buffer.
  uint8_t block_index = plan_prev_block_index(block_buffer_head);
 80043a4:	4b7c      	ldr	r3, [pc, #496]	; (8004598 <planner_recalculate+0x1f8>)
 80043a6:	4a7d      	ldr	r2, [pc, #500]	; (800459c <planner_recalculate+0x1fc>)
 80043a8:	781b      	ldrb	r3, [r3, #0]
{
 80043aa:	b083      	sub	sp, #12
  uint8_t block_index = plan_prev_block_index(block_buffer_head);
 80043ac:	9301      	str	r3, [sp, #4]
 80043ae:	f892 8000 	ldrb.w	r8, [r2]
  if (block_index == 0) { block_index = BLOCK_BUFFER_SIZE; }
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	f000 80b5 	beq.w	8004522 <planner_recalculate+0x182>
  block_index--;
 80043b8:	1e5c      	subs	r4, r3, #1
 80043ba:	b2e4      	uxtb	r4, r4

  // Bail. Can't do anything with one only one plan-able block.
  if (block_index == block_buffer_planned) { return; }
 80043bc:	4544      	cmp	r4, r8
 80043be:	f000 80ad 	beq.w	800451c <planner_recalculate+0x17c>
  // Reverse Pass: Coarsely maximize all possible deceleration curves back-planning from the last
  // block in buffer. Cease planning when the last optimal planned or tail pointer is reached.
  // NOTE: Forward pass will later refine and correct the reverse pass to create an optimal plan.
  float entry_speed_sqr;
  plan_block_t *next;
  plan_block_t *current = &block_buffer[block_index];
 80043c2:	4d77      	ldr	r5, [pc, #476]	; (80045a0 <planner_recalculate+0x200>)
 80043c4:	ebc4 07c4 	rsb	r7, r4, r4, lsl #3
 80043c8:	eb05 07c7 	add.w	r7, r5, r7, lsl #3

  // Calculate maximum entry speed for last block in buffer, where the exit speed is always zero.
  current->entry_speed_sqr = min( current->max_entry_speed_sqr, 2*current->acceleration*current->millimeters);
 80043cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80043ce:	6a38      	ldr	r0, [r7, #32]
 80043d0:	f7fc fc72 	bl	8000cb8 <__aeabi_fmul>
 80043d4:	4601      	mov	r1, r0
 80043d6:	f7fc fb67 	bl	8000aa8 <__addsf3>
 80043da:	f8d7 a01c 	ldr.w	sl, [r7, #28]
 80043de:	4681      	mov	r9, r0
 80043e0:	4651      	mov	r1, sl
 80043e2:	f107 0618 	add.w	r6, r7, #24
 80043e6:	f7fc fe0f 	bl	8001008 <__aeabi_fcmple>
 80043ea:	2800      	cmp	r0, #0
 80043ec:	f000 80c6 	beq.w	800457c <planner_recalculate+0x1dc>
 80043f0:	f8c6 9000 	str.w	r9, [r6]
  if (block_index == 0) { block_index = BLOCK_BUFFER_SIZE; }
 80043f4:	f04f 0a23 	mov.w	sl, #35	; 0x23
 80043f8:	2c00      	cmp	r4, #0
 80043fa:	f040 80c8 	bne.w	800458e <planner_recalculate+0x1ee>
 80043fe:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 80045a8 <planner_recalculate+0x208>

  block_index = plan_prev_block_index(block_index);
  if (block_index == block_buffer_planned) { // Only two plannable blocks in buffer. Reverse pass complete.
 8004402:	45d0      	cmp	r8, sl
 8004404:	f899 2000 	ldrb.w	r2, [r9]
 8004408:	d12d      	bne.n	8004466 <planner_recalculate+0xc6>
 800440a:	e0a9      	b.n	8004560 <planner_recalculate+0x1c0>
 800440c:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004410:	fa5f fa83 	uxtb.w	sl, r3
      next = current;
      current = &block_buffer[block_index];
      block_index = plan_prev_block_index(block_index);

      // Check if next block is the tail block(=planned block). If so, update current stepper parameters.
      if (block_index == block_buffer_tail) { st_update_plan_block_parameters(); }
 8004414:	4552      	cmp	r2, sl
 8004416:	d032      	beq.n	800447e <planner_recalculate+0xde>

      // Compute maximum entry speed decelerating over the current block from its exit speed.
      if (current->entry_speed_sqr != current->max_entry_speed_sqr) {
 8004418:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 800441c:	eb05 0bc6 	add.w	fp, r5, r6, lsl #3
 8004420:	f8db 601c 	ldr.w	r6, [fp, #28]
 8004424:	f8db 0018 	ldr.w	r0, [fp, #24]
 8004428:	4631      	mov	r1, r6
 800442a:	f7fc fdd9 	bl	8000fe0 <__aeabi_fcmpeq>
 800442e:	b9a8      	cbnz	r0, 800445c <planner_recalculate+0xbc>
        entry_speed_sqr = next->entry_speed_sqr + 2*current->acceleration*current->millimeters;
 8004430:	f8db 1024 	ldr.w	r1, [fp, #36]	; 0x24
 8004434:	f8db 0020 	ldr.w	r0, [fp, #32]
 8004438:	f7fc fc3e 	bl	8000cb8 <__aeabi_fmul>
 800443c:	4601      	mov	r1, r0
 800443e:	f7fc fb33 	bl	8000aa8 <__addsf3>
 8004442:	69b9      	ldr	r1, [r7, #24]
 8004444:	f7fc fb30 	bl	8000aa8 <__addsf3>
 8004448:	4607      	mov	r7, r0
        if (entry_speed_sqr < current->max_entry_speed_sqr) {
 800444a:	4601      	mov	r1, r0
 800444c:	4630      	mov	r0, r6
 800444e:	f7fc fdef 	bl	8001030 <__aeabi_fcmpgt>
 8004452:	2800      	cmp	r0, #0
 8004454:	f000 808f 	beq.w	8004576 <planner_recalculate+0x1d6>
          current->entry_speed_sqr = entry_speed_sqr;
 8004458:	f8cb 7018 	str.w	r7, [fp, #24]
    while (block_index != block_buffer_planned) {
 800445c:	45c2      	cmp	sl, r8
 800445e:	d014      	beq.n	800448a <planner_recalculate+0xea>
 8004460:	4627      	mov	r7, r4
 8004462:	f899 2000 	ldrb.w	r2, [r9]
      current = &block_buffer[block_index];
 8004466:	ebca 04ca 	rsb	r4, sl, sl, lsl #3
 800446a:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
 800446e:	4656      	mov	r6, sl
  if (block_index == 0) { block_index = BLOCK_BUFFER_SIZE; }
 8004470:	f1ba 0f00 	cmp.w	sl, #0
 8004474:	d1ca      	bne.n	800440c <planner_recalculate+0x6c>
 8004476:	f04f 0a23 	mov.w	sl, #35	; 0x23
      if (block_index == block_buffer_tail) { st_update_plan_block_parameters(); }
 800447a:	4552      	cmp	r2, sl
 800447c:	d1cc      	bne.n	8004418 <planner_recalculate+0x78>
 800447e:	f004 fb2d 	bl	8008adc <st_update_plan_block_parameters>
 8004482:	4b46      	ldr	r3, [pc, #280]	; (800459c <planner_recalculate+0x1fc>)
 8004484:	f893 8000 	ldrb.w	r8, [r3]
 8004488:	e7c6      	b.n	8004418 <planner_recalculate+0x78>
 800448a:	4b43      	ldr	r3, [pc, #268]	; (8004598 <planner_recalculate+0x1f8>)
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	9301      	str	r3, [sp, #4]
  block_index++;
 8004490:	f10a 0401 	add.w	r4, sl, #1
 8004494:	b2e4      	uxtb	r4, r4
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 8004496:	2c24      	cmp	r4, #36	; 0x24
    }
  }

  // Forward Pass: Forward plan the acceleration curve from the planned pointer onward.
  // Also scans for optimal plan breakpoints and appropriately updates the planned pointer.
  next = &block_buffer[block_buffer_planned]; // Begin at buffer planned pointer
 8004498:	ebca 02ca 	rsb	r2, sl, sl, lsl #3
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 800449c:	bf08      	it	eq
 800449e:	2400      	moveq	r4, #0
  next = &block_buffer[block_buffer_planned]; // Begin at buffer planned pointer
 80044a0:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 80044a4:	e02e      	b.n	8004504 <planner_recalculate+0x164>
    next = &block_buffer[block_index];

    // Any acceleration detected in the forward pass automatically moves the optimal planned
    // pointer forward, since everything before this is all optimal. In other words, nothing
    // can improve the plan from the buffer tail to the planned pointer by logic.
    if (current->entry_speed_sqr < next->entry_speed_sqr) {
 80044a6:	f8d6 9018 	ldr.w	r9, [r6, #24]
 80044aa:	f8d7 8018 	ldr.w	r8, [r7, #24]
 80044ae:	4648      	mov	r0, r9
 80044b0:	4641      	mov	r1, r8
 80044b2:	f7fc fd9f 	bl	8000ff4 <__aeabi_fcmplt>
 80044b6:	b198      	cbz	r0, 80044e0 <planner_recalculate+0x140>
      entry_speed_sqr = current->entry_speed_sqr + 2*current->acceleration*current->millimeters;
 80044b8:	6a71      	ldr	r1, [r6, #36]	; 0x24
 80044ba:	6a30      	ldr	r0, [r6, #32]
 80044bc:	f7fc fbfc 	bl	8000cb8 <__aeabi_fmul>
 80044c0:	4601      	mov	r1, r0
 80044c2:	f7fc faf1 	bl	8000aa8 <__addsf3>
 80044c6:	4649      	mov	r1, r9
 80044c8:	f7fc faee 	bl	8000aa8 <__addsf3>
 80044cc:	4681      	mov	r9, r0
      // If true, current block is full-acceleration and we can move the planned pointer forward.
      if (entry_speed_sqr < next->entry_speed_sqr) {
 80044ce:	4601      	mov	r1, r0
 80044d0:	4640      	mov	r0, r8
 80044d2:	f7fc fdad 	bl	8001030 <__aeabi_fcmpgt>
 80044d6:	b118      	cbz	r0, 80044e0 <planner_recalculate+0x140>
        next->entry_speed_sqr = entry_speed_sqr; // Always <= max_entry_speed_sqr. Backward pass sets this.
 80044d8:	46c8      	mov	r8, r9
 80044da:	46a2      	mov	sl, r4
 80044dc:	f8c7 9018 	str.w	r9, [r7, #24]

    // Any block set at its maximum entry speed also creates an optimal plan up to this
    // point in the buffer. When the plan is bracketed by either the beginning of the
    // buffer and a maximum entry speed or two maximum entry speeds, every block in between
    // cannot logically be further improved. Hence, we don't have to recompute them anymore.
    if (next->entry_speed_sqr == next->max_entry_speed_sqr) { block_buffer_planned = block_index; }
 80044e0:	ebab 0b04 	sub.w	fp, fp, r4
 80044e4:	eb05 0bcb 	add.w	fp, r5, fp, lsl #3
 80044e8:	f8db 001c 	ldr.w	r0, [fp, #28]
 80044ec:	4641      	mov	r1, r8
 80044ee:	f7fc fd77 	bl	8000fe0 <__aeabi_fcmpeq>
  block_index++;
 80044f2:	1c62      	adds	r2, r4, #1
 80044f4:	2800      	cmp	r0, #0
 80044f6:	bf18      	it	ne
 80044f8:	46a2      	movne	sl, r4
 80044fa:	b2d4      	uxtb	r4, r2
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 80044fc:	2c24      	cmp	r4, #36	; 0x24
 80044fe:	bf08      	it	eq
 8004500:	2400      	moveq	r4, #0
 8004502:	463e      	mov	r6, r7
  while (block_index != block_buffer_head) {
 8004504:	9b01      	ldr	r3, [sp, #4]
    next = &block_buffer[block_index];
 8004506:	ea4f 0bc4 	mov.w	fp, r4, lsl #3
 800450a:	ebab 0704 	sub.w	r7, fp, r4
  while (block_index != block_buffer_head) {
 800450e:	429c      	cmp	r4, r3
    next = &block_buffer[block_index];
 8004510:	eb05 07c7 	add.w	r7, r5, r7, lsl #3
  while (block_index != block_buffer_head) {
 8004514:	d1c7      	bne.n	80044a6 <planner_recalculate+0x106>
 8004516:	4b21      	ldr	r3, [pc, #132]	; (800459c <planner_recalculate+0x1fc>)
 8004518:	f883 a000 	strb.w	sl, [r3]
    block_index = plan_next_block_index( block_index );
  }
}
 800451c:	b003      	add	sp, #12
 800451e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (block_index == block_buffer_planned) { return; }
 8004522:	f1b8 0f23 	cmp.w	r8, #35	; 0x23
 8004526:	d0f9      	beq.n	800451c <planner_recalculate+0x17c>
  current->entry_speed_sqr = min( current->max_entry_speed_sqr, 2*current->acceleration*current->millimeters);
 8004528:	4d1d      	ldr	r5, [pc, #116]	; (80045a0 <planner_recalculate+0x200>)
 800452a:	f8d5 17c8 	ldr.w	r1, [r5, #1992]	; 0x7c8
 800452e:	f8d5 07cc 	ldr.w	r0, [r5, #1996]	; 0x7cc
 8004532:	f7fc fbc1 	bl	8000cb8 <__aeabi_fmul>
 8004536:	4601      	mov	r1, r0
 8004538:	f7fc fab6 	bl	8000aa8 <__addsf3>
 800453c:	f8d5 77c4 	ldr.w	r7, [r5, #1988]	; 0x7c4
 8004540:	4604      	mov	r4, r0
 8004542:	4639      	mov	r1, r7
 8004544:	f7fc fd60 	bl	8001008 <__aeabi_fcmple>
 8004548:	b1d0      	cbz	r0, 8004580 <planner_recalculate+0x1e0>
 800454a:	f04f 0a22 	mov.w	sl, #34	; 0x22
  plan_block_t *current = &block_buffer[block_index];
 800454e:	4f15      	ldr	r7, [pc, #84]	; (80045a4 <planner_recalculate+0x204>)
  current->entry_speed_sqr = min( current->max_entry_speed_sqr, 2*current->acceleration*current->millimeters);
 8004550:	f8c5 47c0 	str.w	r4, [r5, #1984]	; 0x7c0
 8004554:	f8df 9050 	ldr.w	r9, [pc, #80]	; 80045a8 <planner_recalculate+0x208>
  if (block_index == block_buffer_planned) { // Only two plannable blocks in buffer. Reverse pass complete.
 8004558:	45d0      	cmp	r8, sl
 800455a:	f899 2000 	ldrb.w	r2, [r9]
 800455e:	d182      	bne.n	8004466 <planner_recalculate+0xc6>
    if (block_index == block_buffer_tail) { st_update_plan_block_parameters(); }
 8004560:	4592      	cmp	sl, r2
 8004562:	d195      	bne.n	8004490 <planner_recalculate+0xf0>
 8004564:	f004 faba 	bl	8008adc <st_update_plan_block_parameters>
 8004568:	4b0b      	ldr	r3, [pc, #44]	; (8004598 <planner_recalculate+0x1f8>)
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	9301      	str	r3, [sp, #4]
 800456e:	4b0b      	ldr	r3, [pc, #44]	; (800459c <planner_recalculate+0x1fc>)
 8004570:	f893 a000 	ldrb.w	sl, [r3]
 8004574:	e78c      	b.n	8004490 <planner_recalculate+0xf0>
          current->entry_speed_sqr = current->max_entry_speed_sqr;
 8004576:	f8cb 6018 	str.w	r6, [fp, #24]
 800457a:	e76f      	b.n	800445c <planner_recalculate+0xbc>
  current->entry_speed_sqr = min( current->max_entry_speed_sqr, 2*current->acceleration*current->millimeters);
 800457c:	46d1      	mov	r9, sl
 800457e:	e737      	b.n	80043f0 <planner_recalculate+0x50>
 8004580:	463c      	mov	r4, r7
 8004582:	f04f 0a22 	mov.w	sl, #34	; 0x22
 8004586:	f8c5 47c0 	str.w	r4, [r5, #1984]	; 0x7c0
  plan_block_t *current = &block_buffer[block_index];
 800458a:	4f06      	ldr	r7, [pc, #24]	; (80045a4 <planner_recalculate+0x204>)
 800458c:	e7e2      	b.n	8004554 <planner_recalculate+0x1b4>
 800458e:	9b01      	ldr	r3, [sp, #4]
 8004590:	3b02      	subs	r3, #2
 8004592:	fa5f fa83 	uxtb.w	sl, r3
 8004596:	e732      	b.n	80043fe <planner_recalculate+0x5e>
 8004598:	20000d34 	.word	0x20000d34
 800459c:	20000d35 	.word	0x20000d35
 80045a0:	20000554 	.word	0x20000554
 80045a4:	20000cfc 	.word	0x20000cfc
 80045a8:	20000d36 	.word	0x20000d36

080045ac <plan_reset>:


void plan_reset()
{
 80045ac:	b538      	push	{r3, r4, r5, lr}
  memset(&pl, 0, sizeof(planner_t)); // Clear planner struct
 80045ae:	2224      	movs	r2, #36	; 0x24
 80045b0:	2100      	movs	r1, #0
 80045b2:	4807      	ldr	r0, [pc, #28]	; (80045d0 <plan_reset+0x24>)
 80045b4:	f007 f835 	bl	800b622 <memset>
}


void plan_reset_buffer()
{
  block_buffer_tail = 0;
 80045b8:	2300      	movs	r3, #0
  block_buffer_head = 0; // Empty = tail
  next_buffer_head = 1; // plan_next_block_index(block_buffer_head)
 80045ba:	2101      	movs	r1, #1
  block_buffer_planned = 0; // = block_buffer_tail;
 80045bc:	4805      	ldr	r0, [pc, #20]	; (80045d4 <plan_reset+0x28>)
  next_buffer_head = 1; // plan_next_block_index(block_buffer_head)
 80045be:	4a06      	ldr	r2, [pc, #24]	; (80045d8 <plan_reset+0x2c>)
  block_buffer_tail = 0;
 80045c0:	4d06      	ldr	r5, [pc, #24]	; (80045dc <plan_reset+0x30>)
  block_buffer_head = 0; // Empty = tail
 80045c2:	4c07      	ldr	r4, [pc, #28]	; (80045e0 <plan_reset+0x34>)
  block_buffer_planned = 0; // = block_buffer_tail;
 80045c4:	7003      	strb	r3, [r0, #0]
  next_buffer_head = 1; // plan_next_block_index(block_buffer_head)
 80045c6:	7011      	strb	r1, [r2, #0]
  block_buffer_tail = 0;
 80045c8:	702b      	strb	r3, [r5, #0]
  block_buffer_head = 0; // Empty = tail
 80045ca:	7023      	strb	r3, [r4, #0]
}
 80045cc:	bd38      	pop	{r3, r4, r5, pc}
 80045ce:	bf00      	nop
 80045d0:	20000d38 	.word	0x20000d38
 80045d4:	20000d35 	.word	0x20000d35
 80045d8:	20000d37 	.word	0x20000d37
 80045dc:	20000d36 	.word	0x20000d36
 80045e0:	20000d34 	.word	0x20000d34

080045e4 <plan_discard_current_block>:
}


void plan_discard_current_block()
{
  if (block_buffer_head != block_buffer_tail) { // Discard non-empty buffer.
 80045e4:	490a      	ldr	r1, [pc, #40]	; (8004610 <plan_discard_current_block+0x2c>)
 80045e6:	4b0b      	ldr	r3, [pc, #44]	; (8004614 <plan_discard_current_block+0x30>)
 80045e8:	780a      	ldrb	r2, [r1, #0]
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d00d      	beq.n	800460c <plan_discard_current_block+0x28>
  block_index++;
 80045f0:	1c53      	adds	r3, r2, #1
 80045f2:	b2db      	uxtb	r3, r3
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 80045f4:	2b24      	cmp	r3, #36	; 0x24
 80045f6:	bf08      	it	eq
 80045f8:	2300      	moveq	r3, #0
{
 80045fa:	b410      	push	{r4}
    uint8_t block_index = plan_next_block_index( block_buffer_tail );
    // Push block_buffer_planned pointer, if encountered.
    if (block_buffer_tail == block_buffer_planned) { block_buffer_planned = block_index; }
 80045fc:	4806      	ldr	r0, [pc, #24]	; (8004618 <plan_discard_current_block+0x34>)
    block_buffer_tail = block_index;
 80045fe:	700b      	strb	r3, [r1, #0]
    if (block_buffer_tail == block_buffer_planned) { block_buffer_planned = block_index; }
 8004600:	7804      	ldrb	r4, [r0, #0]
 8004602:	4294      	cmp	r4, r2
 8004604:	bf08      	it	eq
 8004606:	7003      	strbeq	r3, [r0, #0]
  }
}
 8004608:	bc10      	pop	{r4}
 800460a:	4770      	bx	lr
 800460c:	4770      	bx	lr
 800460e:	bf00      	nop
 8004610:	20000d36 	.word	0x20000d36
 8004614:	20000d34 	.word	0x20000d34
 8004618:	20000d35 	.word	0x20000d35

0800461c <plan_get_system_motion_block>:


// Returns address of planner buffer block used by system motions. Called by segment generator.
plan_block_t *plan_get_system_motion_block()
{
  return(&block_buffer[block_buffer_head]);
 800461c:	4b03      	ldr	r3, [pc, #12]	; (800462c <plan_get_system_motion_block+0x10>)
 800461e:	4804      	ldr	r0, [pc, #16]	; (8004630 <plan_get_system_motion_block+0x14>)
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
}
 8004626:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 800462a:	4770      	bx	lr
 800462c:	20000d34 	.word	0x20000d34
 8004630:	20000554 	.word	0x20000554

08004634 <plan_get_current_block>:


// Returns address of first planner block, if available. Called by various main program functions.
plan_block_t *plan_get_current_block()
{
  if (block_buffer_head == block_buffer_tail) { return(NULL); } // Buffer empty
 8004634:	4b06      	ldr	r3, [pc, #24]	; (8004650 <plan_get_current_block+0x1c>)
 8004636:	4a07      	ldr	r2, [pc, #28]	; (8004654 <plan_get_current_block+0x20>)
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	7812      	ldrb	r2, [r2, #0]
 800463c:	429a      	cmp	r2, r3
  return(&block_buffer[block_buffer_tail]);
 800463e:	bf1d      	ittte	ne
 8004640:	4805      	ldrne	r0, [pc, #20]	; (8004658 <plan_get_current_block+0x24>)
 8004642:	ebc3 03c3 	rsbne	r3, r3, r3, lsl #3
 8004646:	eb00 00c3 	addne.w	r0, r0, r3, lsl #3
  if (block_buffer_head == block_buffer_tail) { return(NULL); } // Buffer empty
 800464a:	2000      	moveq	r0, #0
}
 800464c:	4770      	bx	lr
 800464e:	bf00      	nop
 8004650:	20000d36 	.word	0x20000d36
 8004654:	20000d34 	.word	0x20000d34
 8004658:	20000554 	.word	0x20000554

0800465c <plan_get_exec_block_exit_speed_sqr>:


float plan_get_exec_block_exit_speed_sqr()
{
  uint8_t block_index = plan_next_block_index(block_buffer_tail);
 800465c:	4b09      	ldr	r3, [pc, #36]	; (8004684 <plan_get_exec_block_exit_speed_sqr+0x28>)
  if (block_index == block_buffer_head) { return( 0.0 ); }
 800465e:	4a0a      	ldr	r2, [pc, #40]	; (8004688 <plan_get_exec_block_exit_speed_sqr+0x2c>)
  block_index++;
 8004660:	781b      	ldrb	r3, [r3, #0]
  if (block_index == block_buffer_head) { return( 0.0 ); }
 8004662:	7812      	ldrb	r2, [r2, #0]
  block_index++;
 8004664:	3301      	adds	r3, #1
 8004666:	b2db      	uxtb	r3, r3
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 8004668:	2b24      	cmp	r3, #36	; 0x24
 800466a:	bf08      	it	eq
 800466c:	2300      	moveq	r3, #0
  if (block_index == block_buffer_head) { return( 0.0 ); }
 800466e:	429a      	cmp	r2, r3
 8004670:	d006      	beq.n	8004680 <plan_get_exec_block_exit_speed_sqr+0x24>
  return( block_buffer[block_index].entry_speed_sqr );
 8004672:	4a06      	ldr	r2, [pc, #24]	; (800468c <plan_get_exec_block_exit_speed_sqr+0x30>)
 8004674:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8004678:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800467c:	6998      	ldr	r0, [r3, #24]
 800467e:	4770      	bx	lr
  if (block_index == block_buffer_head) { return( 0.0 ); }
 8004680:	2000      	movs	r0, #0
}
 8004682:	4770      	bx	lr
 8004684:	20000d36 	.word	0x20000d36
 8004688:	20000d34 	.word	0x20000d34
 800468c:	20000554 	.word	0x20000554

08004690 <plan_check_full_buffer>:


// Returns the availability status of the block ring buffer. True, if full.
uint8_t plan_check_full_buffer()
{
  if (block_buffer_tail == next_buffer_head) { return(true); }
 8004690:	4a04      	ldr	r2, [pc, #16]	; (80046a4 <plan_check_full_buffer+0x14>)
 8004692:	4b05      	ldr	r3, [pc, #20]	; (80046a8 <plan_check_full_buffer+0x18>)
 8004694:	7810      	ldrb	r0, [r2, #0]
 8004696:	781b      	ldrb	r3, [r3, #0]
  return(false);
}
 8004698:	1ac0      	subs	r0, r0, r3
 800469a:	fab0 f080 	clz	r0, r0
 800469e:	0940      	lsrs	r0, r0, #5
 80046a0:	4770      	bx	lr
 80046a2:	bf00      	nop
 80046a4:	20000d36 	.word	0x20000d36
 80046a8:	20000d37 	.word	0x20000d37

080046ac <plan_compute_profile_nominal_speed>:


// Computes and returns block nominal speed based on running condition and override values.
// NOTE: All system motion commands, such as homing/parking, are not subject to overrides.
float plan_compute_profile_nominal_speed(plan_block_t *block)
{
 80046ac:	b538      	push	{r3, r4, r5, lr}
  float nominal_speed = block->programmed_rate;
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01f*sys.r_override); }
 80046ae:	7d83      	ldrb	r3, [r0, #22]
  float nominal_speed = block->programmed_rate;
 80046b0:	6b05      	ldr	r5, [r0, #48]	; 0x30
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01f*sys.r_override); }
 80046b2:	07da      	lsls	r2, r3, #31
 80046b4:	d514      	bpl.n	80046e0 <plan_compute_profile_nominal_speed+0x34>
 80046b6:	4b16      	ldr	r3, [pc, #88]	; (8004710 <plan_compute_profile_nominal_speed+0x64>)
 80046b8:	7a58      	ldrb	r0, [r3, #9]
 80046ba:	f7fc faa9 	bl	8000c10 <__aeabi_i2f>
 80046be:	4915      	ldr	r1, [pc, #84]	; (8004714 <plan_compute_profile_nominal_speed+0x68>)
 80046c0:	f7fc fafa 	bl	8000cb8 <__aeabi_fmul>
 80046c4:	4629      	mov	r1, r5
 80046c6:	f7fc faf7 	bl	8000cb8 <__aeabi_fmul>
 80046ca:	4604      	mov	r4, r0
 80046cc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80046d0:	4620      	mov	r0, r4
 80046d2:	f7fc fca3 	bl	800101c <__aeabi_fcmpge>
 80046d6:	b908      	cbnz	r0, 80046dc <plan_compute_profile_nominal_speed+0x30>
 80046d8:	f04f 547e 	mov.w	r4, #1065353216	; 0x3f800000
    if (!(block->condition & PL_COND_FLAG_NO_FEED_OVERRIDE)) { nominal_speed *= (0.01f*sys.f_override); }
    if (nominal_speed > block->rapid_rate) { nominal_speed = block->rapid_rate; }
  }
  if (nominal_speed > MINIMUM_FEED_RATE) { return(nominal_speed); }
  return(MINIMUM_FEED_RATE);
}
 80046dc:	4620      	mov	r0, r4
 80046de:	bd38      	pop	{r3, r4, r5, pc}
    if (!(block->condition & PL_COND_FLAG_NO_FEED_OVERRIDE)) { nominal_speed *= (0.01f*sys.f_override); }
 80046e0:	075b      	lsls	r3, r3, #29
 80046e2:	4604      	mov	r4, r0
 80046e4:	d40b      	bmi.n	80046fe <plan_compute_profile_nominal_speed+0x52>
 80046e6:	4b0a      	ldr	r3, [pc, #40]	; (8004710 <plan_compute_profile_nominal_speed+0x64>)
 80046e8:	7a18      	ldrb	r0, [r3, #8]
 80046ea:	f7fc fa91 	bl	8000c10 <__aeabi_i2f>
 80046ee:	4909      	ldr	r1, [pc, #36]	; (8004714 <plan_compute_profile_nominal_speed+0x68>)
 80046f0:	f7fc fae2 	bl	8000cb8 <__aeabi_fmul>
 80046f4:	4601      	mov	r1, r0
 80046f6:	4628      	mov	r0, r5
 80046f8:	f7fc fade 	bl	8000cb8 <__aeabi_fmul>
 80046fc:	4605      	mov	r5, r0
 80046fe:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 8004700:	4629      	mov	r1, r5
 8004702:	4620      	mov	r0, r4
 8004704:	f7fc fc80 	bl	8001008 <__aeabi_fcmple>
 8004708:	2800      	cmp	r0, #0
 800470a:	d1df      	bne.n	80046cc <plan_compute_profile_nominal_speed+0x20>
 800470c:	462c      	mov	r4, r5
 800470e:	e7dd      	b.n	80046cc <plan_compute_profile_nominal_speed+0x20>
 8004710:	20001408 	.word	0x20001408
 8004714:	3c23d70a 	.word	0x3c23d70a

08004718 <plan_update_velocity_profile_parameters>:
}


// Re-calculates buffered motions profile parameters upon a motion-based override change.
void plan_update_velocity_profile_parameters()
{
 8004718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (!(block->condition & PL_COND_FLAG_NO_FEED_OVERRIDE)) { nominal_speed *= (0.01f*sys.f_override); }
 800471c:	4d35      	ldr	r5, [pc, #212]	; (80047f4 <plan_update_velocity_profile_parameters+0xdc>)
  uint8_t block_index = block_buffer_tail;
 800471e:	4a36      	ldr	r2, [pc, #216]	; (80047f8 <plan_update_velocity_profile_parameters+0xe0>)
  plan_block_t *block;
  float nominal_speed;
  float prev_nominal_speed = SOME_LARGE_VALUE; // Set high for first block nominal speed calculation.
  while (block_index != block_buffer_head) {
 8004720:	4b36      	ldr	r3, [pc, #216]	; (80047fc <plan_update_velocity_profile_parameters+0xe4>)
{
 8004722:	b083      	sub	sp, #12
    if (!(block->condition & PL_COND_FLAG_NO_FEED_OVERRIDE)) { nominal_speed *= (0.01f*sys.f_override); }
 8004724:	7a28      	ldrb	r0, [r5, #8]
  uint8_t block_index = block_buffer_tail;
 8004726:	7814      	ldrb	r4, [r2, #0]
  while (block_index != block_buffer_head) {
 8004728:	f893 b000 	ldrb.w	fp, [r3]
    if (!(block->condition & PL_COND_FLAG_NO_FEED_OVERRIDE)) { nominal_speed *= (0.01f*sys.f_override); }
 800472c:	f7fc fa70 	bl	8000c10 <__aeabi_i2f>
 8004730:	4933      	ldr	r1, [pc, #204]	; (8004800 <plan_update_velocity_profile_parameters+0xe8>)
 8004732:	f7fc fac1 	bl	8000cb8 <__aeabi_fmul>
 8004736:	9001      	str	r0, [sp, #4]
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01f*sys.r_override); }
 8004738:	7a68      	ldrb	r0, [r5, #9]
 800473a:	f7fc fa69 	bl	8000c10 <__aeabi_i2f>
 800473e:	4930      	ldr	r1, [pc, #192]	; (8004800 <plan_update_velocity_profile_parameters+0xe8>)
 8004740:	f7fc faba 	bl	8000cb8 <__aeabi_fmul>
  float prev_nominal_speed = SOME_LARGE_VALUE; // Set high for first block nominal speed calculation.
 8004744:	4f2f      	ldr	r7, [pc, #188]	; (8004804 <plan_update_velocity_profile_parameters+0xec>)
 8004746:	9000      	str	r0, [sp, #0]
    block = &block_buffer[block_index];
 8004748:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 800480c <plan_update_velocity_profile_parameters+0xf4>
 800474c:	f04f 597e 	mov.w	r9, #1065353216	; 0x3f800000
  while (block_index != block_buffer_head) {
 8004750:	e023      	b.n	800479a <plan_update_velocity_profile_parameters+0x82>
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01f*sys.r_override); }
 8004752:	4641      	mov	r1, r8
 8004754:	9800      	ldr	r0, [sp, #0]
 8004756:	f7fc faaf 	bl	8000cb8 <__aeabi_fmul>
 800475a:	4605      	mov	r5, r0
 800475c:	4649      	mov	r1, r9
 800475e:	4628      	mov	r0, r5
 8004760:	f7fc fc5c 	bl	800101c <__aeabi_fcmpge>
 8004764:	b900      	cbnz	r0, 8004768 <plan_update_velocity_profile_parameters+0x50>
 8004766:	464d      	mov	r5, r9
  if (nominal_speed > prev_nominal_speed) { block->max_entry_speed_sqr = prev_nominal_speed*prev_nominal_speed; }
 8004768:	4629      	mov	r1, r5
 800476a:	4638      	mov	r0, r7
    nominal_speed = plan_compute_profile_nominal_speed(block);
    plan_compute_profile_parameters(block, nominal_speed, prev_nominal_speed);
 800476c:	f8d6 8028 	ldr.w	r8, [r6, #40]	; 0x28
  if (nominal_speed > prev_nominal_speed) { block->max_entry_speed_sqr = prev_nominal_speed*prev_nominal_speed; }
 8004770:	f7fc fc40 	bl	8000ff4 <__aeabi_fcmplt>
 8004774:	2800      	cmp	r0, #0
 8004776:	d031      	beq.n	80047dc <plan_update_velocity_profile_parameters+0xc4>
 8004778:	4639      	mov	r1, r7
 800477a:	4638      	mov	r0, r7
 800477c:	f7fc fa9c 	bl	8000cb8 <__aeabi_fmul>
 8004780:	4607      	mov	r7, r0
  if (block->max_entry_speed_sqr > block->max_junction_speed_sqr) { block->max_entry_speed_sqr = block->max_junction_speed_sqr; }
 8004782:	4639      	mov	r1, r7
 8004784:	4640      	mov	r0, r8
 8004786:	f7fc fc35 	bl	8000ff4 <__aeabi_fcmplt>
 800478a:	bb20      	cbnz	r0, 80047d6 <plan_update_velocity_profile_parameters+0xbe>
 800478c:	61f7      	str	r7, [r6, #28]
  block_index++;
 800478e:	3401      	adds	r4, #1
 8004790:	b2e4      	uxtb	r4, r4
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 8004792:	2c24      	cmp	r4, #36	; 0x24
 8004794:	bf08      	it	eq
 8004796:	2400      	moveq	r4, #0
 8004798:	462f      	mov	r7, r5
  while (block_index != block_buffer_head) {
 800479a:	45a3      	cmp	fp, r4
 800479c:	d024      	beq.n	80047e8 <plan_update_velocity_profile_parameters+0xd0>
    block = &block_buffer[block_index];
 800479e:	00e5      	lsls	r5, r4, #3
 80047a0:	1b2e      	subs	r6, r5, r4
 80047a2:	eb0a 06c6 	add.w	r6, sl, r6, lsl #3
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01f*sys.r_override); }
 80047a6:	7db3      	ldrb	r3, [r6, #22]
  float nominal_speed = block->programmed_rate;
 80047a8:	f8d6 8030 	ldr.w	r8, [r6, #48]	; 0x30
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01f*sys.r_override); }
 80047ac:	07da      	lsls	r2, r3, #31
 80047ae:	d4d0      	bmi.n	8004752 <plan_update_velocity_profile_parameters+0x3a>
    if (!(block->condition & PL_COND_FLAG_NO_FEED_OVERRIDE)) { nominal_speed *= (0.01f*sys.f_override); }
 80047b0:	075b      	lsls	r3, r3, #29
 80047b2:	d404      	bmi.n	80047be <plan_update_velocity_profile_parameters+0xa6>
 80047b4:	4640      	mov	r0, r8
 80047b6:	9901      	ldr	r1, [sp, #4]
 80047b8:	f7fc fa7e 	bl	8000cb8 <__aeabi_fmul>
 80047bc:	4680      	mov	r8, r0
    if (nominal_speed > block->rapid_rate) { nominal_speed = block->rapid_rate; }
 80047be:	1b2d      	subs	r5, r5, r4
 80047c0:	eb0a 05c5 	add.w	r5, sl, r5, lsl #3
 80047c4:	6aed      	ldr	r5, [r5, #44]	; 0x2c
 80047c6:	4641      	mov	r1, r8
 80047c8:	4628      	mov	r0, r5
 80047ca:	f7fc fc1d 	bl	8001008 <__aeabi_fcmple>
 80047ce:	2800      	cmp	r0, #0
 80047d0:	d1c4      	bne.n	800475c <plan_update_velocity_profile_parameters+0x44>
 80047d2:	4645      	mov	r5, r8
 80047d4:	e7c2      	b.n	800475c <plan_update_velocity_profile_parameters+0x44>
  if (block->max_entry_speed_sqr > block->max_junction_speed_sqr) { block->max_entry_speed_sqr = block->max_junction_speed_sqr; }
 80047d6:	f8c6 801c 	str.w	r8, [r6, #28]
 80047da:	e7d8      	b.n	800478e <plan_update_velocity_profile_parameters+0x76>
  else { block->max_entry_speed_sqr = nominal_speed*nominal_speed; }
 80047dc:	4629      	mov	r1, r5
 80047de:	4628      	mov	r0, r5
 80047e0:	f7fc fa6a 	bl	8000cb8 <__aeabi_fmul>
 80047e4:	4607      	mov	r7, r0
 80047e6:	e7cc      	b.n	8004782 <plan_update_velocity_profile_parameters+0x6a>
    prev_nominal_speed = nominal_speed;
    block_index = plan_next_block_index(block_index);
  }
  pl.previous_nominal_speed = prev_nominal_speed; // Update prev nominal speed for next incoming block.
 80047e8:	4b07      	ldr	r3, [pc, #28]	; (8004808 <plan_update_velocity_profile_parameters+0xf0>)
 80047ea:	621f      	str	r7, [r3, #32]
}
 80047ec:	b003      	add	sp, #12
 80047ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047f2:	bf00      	nop
 80047f4:	20001408 	.word	0x20001408
 80047f8:	20000d36 	.word	0x20000d36
 80047fc:	20000d34 	.word	0x20000d34
 8004800:	3c23d70a 	.word	0x3c23d70a
 8004804:	7f7fffff 	.word	0x7f7fffff
 8004808:	20000d38 	.word	0x20000d38
 800480c:	20000554 	.word	0x20000554

08004810 <plan_buffer_line>:
   The system motion condition tells the planner to plan a motion in the always unused block buffer
   head. It avoids changing the planner state and preserves the buffer to ensure subsequent gcode
   motions are still planned correctly, while the stepper module only points to the block buffer head
   to execute the special system motion. */
uint8_t plan_buffer_line(float *target, plan_line_data_t *pl_data)
{
 8004810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004814:	468b      	mov	fp, r1
 8004816:	4682      	mov	sl, r0
  // Prepare and initialize new block. Copy relevant pl_data for block execution.
  plan_block_t *block = &block_buffer[block_buffer_head];
 8004818:	4b69      	ldr	r3, [pc, #420]	; (80049c0 <plan_buffer_line+0x1b0>)
 800481a:	4d6a      	ldr	r5, [pc, #424]	; (80049c4 <plan_buffer_line+0x1b4>)
 800481c:	781e      	ldrb	r6, [r3, #0]
{
 800481e:	b093      	sub	sp, #76	; 0x4c
  plan_block_t *block = &block_buffer[block_buffer_head];
 8004820:	00f7      	lsls	r7, r6, #3
 8004822:	eba7 0806 	sub.w	r8, r7, r6
 8004826:	eb05 08c8 	add.w	r8, r5, r8, lsl #3
  memset(block,0,sizeof(plan_block_t)); // Zero all block values.
 800482a:	2238      	movs	r2, #56	; 0x38
 800482c:	2100      	movs	r1, #0
 800482e:	4640      	mov	r0, r8
 8004830:	f006 fef7 	bl	800b622 <memset>
  block->condition = pl_data->condition;
 8004834:	f89b 3008 	ldrb.w	r3, [fp, #8]
  #ifdef VARIABLE_SPINDLE
    block->spindle_speed = pl_data->spindle_speed;
 8004838:	f8db 2004 	ldr.w	r2, [fp, #4]
  int32_t target_steps[N_AXIS], position_steps[N_AXIS];
  float unit_vec[N_AXIS], delta_mm;
  uint8_t idx;

  // Copy position data based on type of motion being planned.
  if (block->condition & PL_COND_FLAG_SYSTEM_MOTION) {
 800483c:	0798      	lsls	r0, r3, #30
  block->condition = pl_data->condition;
 800483e:	f888 3016 	strb.w	r3, [r8, #22]
        delta_mm = (target_steps[X_AXIS]-position_steps[X_AXIS] - target_steps[Y_AXIS]+position_steps[Y_AXIS])/settings.steps_per_mm[idx];
      } else {
        delta_mm = (target_steps[idx] - position_steps[idx])/settings.steps_per_mm[idx];
      }
    #else
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 8004842:	f8df 9190 	ldr.w	r9, [pc, #400]	; 80049d4 <plan_buffer_line+0x1c4>
    memcpy(position_steps, sys_position, sizeof(sys_position));
 8004846:	bf4c      	ite	mi
 8004848:	4b5f      	ldrmi	r3, [pc, #380]	; (80049c8 <plan_buffer_line+0x1b8>)
  else { memcpy(position_steps, pl.position, sizeof(pl.position)); }
 800484a:	4b60      	ldrpl	r3, [pc, #384]	; (80049cc <plan_buffer_line+0x1bc>)
    block->spindle_speed = pl_data->spindle_speed;
 800484c:	f8c8 2034 	str.w	r2, [r8, #52]	; 0x34
  else { memcpy(position_steps, pl.position, sizeof(pl.position)); }
 8004850:	ac06      	add	r4, sp, #24
 8004852:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004854:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 8004858:	f8d9 2000 	ldr.w	r2, [r9]
 800485c:	f8da 1000 	ldr.w	r1, [sl]
 8004860:	4610      	mov	r0, r2
 8004862:	9201      	str	r2, [sp, #4]
 8004864:	f7fc fa28 	bl	8000cb8 <__aeabi_fmul>
 8004868:	f007 f852 	bl	800b910 <lroundf>
 800486c:	4684      	mov	ip, r0
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 800486e:	1bb9      	subs	r1, r7, r6
 8004870:	9806      	ldr	r0, [sp, #24]
 8004872:	00c9      	lsls	r1, r1, #3
 8004874:	186b      	adds	r3, r5, r1
 8004876:	ebac 0000 	sub.w	r0, ip, r0
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 800487a:	691a      	ldr	r2, [r3, #16]
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 800487c:	ea80 74e0 	eor.w	r4, r0, r0, asr #31
 8004880:	eba4 74e0 	sub.w	r4, r4, r0, asr #31
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 8004884:	4294      	cmp	r4, r2
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 8004886:	506c      	str	r4, [r5, r1]
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 8004888:	bf38      	it	cc
 800488a:	4614      	movcc	r4, r2
 800488c:	611c      	str	r4, [r3, #16]
 800488e:	9300      	str	r3, [sp, #0]
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 8004890:	f8cd c008 	str.w	ip, [sp, #8]
      delta_mm = (target_steps[idx] - position_steps[idx])/settings.steps_per_mm[idx];
 8004894:	f7fc f9bc 	bl	8000c10 <__aeabi_i2f>
 8004898:	9a01      	ldr	r2, [sp, #4]
 800489a:	4611      	mov	r1, r2
 800489c:	f7fc fac0 	bl	8000e20 <__aeabi_fdiv>
	  #endif
    unit_vec[idx] = delta_mm; // Store unit vector numerator

    // Set direction bits. Bit enabled always means direction is negative.
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 80048a0:	2100      	movs	r1, #0
    unit_vec[idx] = delta_mm; // Store unit vector numerator
 80048a2:	900a      	str	r0, [sp, #40]	; 0x28
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 80048a4:	f7fc fba6 	bl	8000ff4 <__aeabi_fcmplt>
 80048a8:	9b00      	ldr	r3, [sp, #0]
 80048aa:	b120      	cbz	r0, 80048b6 <plan_buffer_line+0xa6>
 80048ac:	4a48      	ldr	r2, [pc, #288]	; (80049d0 <plan_buffer_line+0x1c0>)
 80048ae:	8a99      	ldrh	r1, [r3, #20]
 80048b0:	8812      	ldrh	r2, [r2, #0]
 80048b2:	430a      	orrs	r2, r1
 80048b4:	829a      	strh	r2, [r3, #20]
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 80048b6:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80048ba:	f8da 1004 	ldr.w	r1, [sl, #4]
 80048be:	4610      	mov	r0, r2
 80048c0:	9201      	str	r2, [sp, #4]
 80048c2:	f7fc f9f9 	bl	8000cb8 <__aeabi_fmul>
 80048c6:	f007 f823 	bl	800b910 <lroundf>
 80048ca:	4601      	mov	r1, r0
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 80048cc:	9807      	ldr	r0, [sp, #28]
 80048ce:	1bbb      	subs	r3, r7, r6
 80048d0:	1a08      	subs	r0, r1, r0
 80048d2:	ea80 7ce0 	eor.w	ip, r0, r0, asr #31
 80048d6:	ebac 7ce0 	sub.w	ip, ip, r0, asr #31
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 80048da:	4564      	cmp	r4, ip
 80048dc:	bf38      	it	cc
 80048de:	4664      	movcc	r4, ip
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 80048e0:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80048e4:	f8c3 c004 	str.w	ip, [r3, #4]
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 80048e8:	611c      	str	r4, [r3, #16]
 80048ea:	9300      	str	r3, [sp, #0]
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 80048ec:	9103      	str	r1, [sp, #12]
      delta_mm = (target_steps[idx] - position_steps[idx])/settings.steps_per_mm[idx];
 80048ee:	f7fc f98f 	bl	8000c10 <__aeabi_i2f>
 80048f2:	9a01      	ldr	r2, [sp, #4]
 80048f4:	4611      	mov	r1, r2
 80048f6:	f7fc fa93 	bl	8000e20 <__aeabi_fdiv>
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 80048fa:	2100      	movs	r1, #0
    unit_vec[idx] = delta_mm; // Store unit vector numerator
 80048fc:	900b      	str	r0, [sp, #44]	; 0x2c
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 80048fe:	f7fc fb79 	bl	8000ff4 <__aeabi_fcmplt>
 8004902:	9b00      	ldr	r3, [sp, #0]
 8004904:	b120      	cbz	r0, 8004910 <plan_buffer_line+0x100>
 8004906:	4a32      	ldr	r2, [pc, #200]	; (80049d0 <plan_buffer_line+0x1c0>)
 8004908:	8a99      	ldrh	r1, [r3, #20]
 800490a:	8852      	ldrh	r2, [r2, #2]
 800490c:	430a      	orrs	r2, r1
 800490e:	829a      	strh	r2, [r3, #20]
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 8004910:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8004914:	f8da 1008 	ldr.w	r1, [sl, #8]
 8004918:	4610      	mov	r0, r2
 800491a:	9201      	str	r2, [sp, #4]
 800491c:	f7fc f9cc 	bl	8000cb8 <__aeabi_fmul>
 8004920:	f006 fff6 	bl	800b910 <lroundf>
 8004924:	4601      	mov	r1, r0
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 8004926:	9808      	ldr	r0, [sp, #32]
 8004928:	1bbb      	subs	r3, r7, r6
 800492a:	1a08      	subs	r0, r1, r0
 800492c:	ea80 7ce0 	eor.w	ip, r0, r0, asr #31
 8004930:	ebac 7ce0 	sub.w	ip, ip, r0, asr #31
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 8004934:	4564      	cmp	r4, ip
 8004936:	bf38      	it	cc
 8004938:	4664      	movcc	r4, ip
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 800493a:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800493e:	f8c3 c008 	str.w	ip, [r3, #8]
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 8004942:	611c      	str	r4, [r3, #16]
 8004944:	9300      	str	r3, [sp, #0]
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 8004946:	9104      	str	r1, [sp, #16]
      delta_mm = (target_steps[idx] - position_steps[idx])/settings.steps_per_mm[idx];
 8004948:	f7fc f962 	bl	8000c10 <__aeabi_i2f>
 800494c:	9a01      	ldr	r2, [sp, #4]
 800494e:	4611      	mov	r1, r2
 8004950:	f7fc fa66 	bl	8000e20 <__aeabi_fdiv>
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 8004954:	2100      	movs	r1, #0
    unit_vec[idx] = delta_mm; // Store unit vector numerator
 8004956:	900c      	str	r0, [sp, #48]	; 0x30
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 8004958:	f7fc fb4c 	bl	8000ff4 <__aeabi_fcmplt>
 800495c:	9b00      	ldr	r3, [sp, #0]
 800495e:	b120      	cbz	r0, 800496a <plan_buffer_line+0x15a>
 8004960:	491b      	ldr	r1, [pc, #108]	; (80049d0 <plan_buffer_line+0x1c0>)
 8004962:	8a9a      	ldrh	r2, [r3, #20]
 8004964:	8889      	ldrh	r1, [r1, #4]
 8004966:	430a      	orrs	r2, r1
 8004968:	829a      	strh	r2, [r3, #20]
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 800496a:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800496e:	f8da 100c 	ldr.w	r1, [sl, #12]
 8004972:	4618      	mov	r0, r3
 8004974:	9300      	str	r3, [sp, #0]
 8004976:	f7fc f99f 	bl	8000cb8 <__aeabi_fmul>
 800497a:	f006 ffc9 	bl	800b910 <lroundf>
 800497e:	4602      	mov	r2, r0
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 8004980:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004982:	eba7 0a06 	sub.w	sl, r7, r6
 8004986:	1a10      	subs	r0, r2, r0
 8004988:	ea80 71e0 	eor.w	r1, r0, r0, asr #31
 800498c:	eba1 71e0 	sub.w	r1, r1, r0, asr #31
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 8004990:	428c      	cmp	r4, r1
 8004992:	bf38      	it	cc
 8004994:	460c      	movcc	r4, r1
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 8004996:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 800499a:	e9ca 1403 	strd	r1, r4, [sl, #12]
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 800499e:	9205      	str	r2, [sp, #20]
      delta_mm = (target_steps[idx] - position_steps[idx])/settings.steps_per_mm[idx];
 80049a0:	f7fc f936 	bl	8000c10 <__aeabi_i2f>
 80049a4:	9b00      	ldr	r3, [sp, #0]
 80049a6:	4619      	mov	r1, r3
 80049a8:	f7fc fa3a 	bl	8000e20 <__aeabi_fdiv>
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 80049ac:	2100      	movs	r1, #0
    unit_vec[idx] = delta_mm; // Store unit vector numerator
 80049ae:	900d      	str	r0, [sp, #52]	; 0x34
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 80049b0:	f7fc fb20 	bl	8000ff4 <__aeabi_fcmplt>
 80049b4:	b980      	cbnz	r0, 80049d8 <plan_buffer_line+0x1c8>
  }

  // Bail if this is a zero-length block. Highly unlikely to occur.
  if (block->step_event_count == 0) { return(PLAN_EMPTY_BLOCK); }
 80049b6:	b9c4      	cbnz	r4, 80049ea <plan_buffer_line+0x1da>
 80049b8:	4620      	mov	r0, r4

    // Finish up by recalculating the plan with the new block.
    planner_recalculate();
  }
  return(PLAN_OK);
}
 80049ba:	b013      	add	sp, #76	; 0x4c
 80049bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049c0:	20000d34 	.word	0x20000d34
 80049c4:	20000554 	.word	0x20000554
 80049c8:	20001430 	.word	0x20001430
 80049cc:	20000d38 	.word	0x20000d38
 80049d0:	0800cb1c 	.word	0x0800cb1c
 80049d4:	20001744 	.word	0x20001744
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 80049d8:	4baa      	ldr	r3, [pc, #680]	; (8004c84 <plan_buffer_line+0x474>)
 80049da:	f8ba 2014 	ldrh.w	r2, [sl, #20]
 80049de:	88db      	ldrh	r3, [r3, #6]
 80049e0:	4313      	orrs	r3, r2
 80049e2:	f8aa 3014 	strh.w	r3, [sl, #20]
  if (block->step_event_count == 0) { return(PLAN_EMPTY_BLOCK); }
 80049e6:	2c00      	cmp	r4, #0
 80049e8:	d0e6      	beq.n	80049b8 <plan_buffer_line+0x1a8>
  block->millimeters = convert_delta_vector_to_unit_vector(unit_vec);
 80049ea:	ac0a      	add	r4, sp, #40	; 0x28
 80049ec:	4620      	mov	r0, r4
 80049ee:	f7ff fc25 	bl	800423c <convert_delta_vector_to_unit_vector>
 80049f2:	eba7 0a06 	sub.w	sl, r7, r6
 80049f6:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 80049fa:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
  block->acceleration = limit_value_by_axis_maximum(settings.acceleration, unit_vec);
 80049fe:	4621      	mov	r1, r4
 8004a00:	48a1      	ldr	r0, [pc, #644]	; (8004c88 <plan_buffer_line+0x478>)
 8004a02:	f7ff fc77 	bl	80042f4 <limit_value_by_axis_maximum>
  block->rapid_rate = limit_value_by_axis_maximum(settings.max_rate, unit_vec);
 8004a06:	4621      	mov	r1, r4
  block->acceleration = limit_value_by_axis_maximum(settings.acceleration, unit_vec);
 8004a08:	f8ca 0020 	str.w	r0, [sl, #32]
  block->rapid_rate = limit_value_by_axis_maximum(settings.max_rate, unit_vec);
 8004a0c:	489f      	ldr	r0, [pc, #636]	; (8004c8c <plan_buffer_line+0x47c>)
 8004a0e:	f7ff fc71 	bl	80042f4 <limit_value_by_axis_maximum>
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { block->programmed_rate = block->rapid_rate; }
 8004a12:	f89a 3016 	ldrb.w	r3, [sl, #22]
  block->rapid_rate = limit_value_by_axis_maximum(settings.max_rate, unit_vec);
 8004a16:	f8ca 002c 	str.w	r0, [sl, #44]	; 0x2c
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { block->programmed_rate = block->rapid_rate; }
 8004a1a:	07d9      	lsls	r1, r3, #31
 8004a1c:	f100 80c2 	bmi.w	8004ba4 <plan_buffer_line+0x394>
    block->programmed_rate = pl_data->feed_rate;
 8004a20:	f8db 1000 	ldr.w	r1, [fp]
    if (block->condition & PL_COND_FLAG_INVERSE_TIME) { block->programmed_rate *= block->millimeters; }
 8004a24:	071a      	lsls	r2, r3, #28
    block->programmed_rate = pl_data->feed_rate;
 8004a26:	f8ca 1030 	str.w	r1, [sl, #48]	; 0x30
    if (block->condition & PL_COND_FLAG_INVERSE_TIME) { block->programmed_rate *= block->millimeters; }
 8004a2a:	d507      	bpl.n	8004a3c <plan_buffer_line+0x22c>
 8004a2c:	f8da 0024 	ldr.w	r0, [sl, #36]	; 0x24
 8004a30:	9300      	str	r3, [sp, #0]
 8004a32:	f7fc f941 	bl	8000cb8 <__aeabi_fmul>
 8004a36:	9b00      	ldr	r3, [sp, #0]
 8004a38:	f8ca 0030 	str.w	r0, [sl, #48]	; 0x30
  if ((block_buffer_head == block_buffer_tail) || (block->condition & PL_COND_FLAG_SYSTEM_MOTION)) {
 8004a3c:	4a94      	ldr	r2, [pc, #592]	; (8004c90 <plan_buffer_line+0x480>)
 8004a3e:	4995      	ldr	r1, [pc, #596]	; (8004c94 <plan_buffer_line+0x484>)
 8004a40:	7812      	ldrb	r2, [r2, #0]
 8004a42:	7809      	ldrb	r1, [r1, #0]
 8004a44:	4291      	cmp	r1, r2
 8004a46:	f000 80b0 	beq.w	8004baa <plan_buffer_line+0x39a>
 8004a4a:	079b      	lsls	r3, r3, #30
 8004a4c:	f100 80ad 	bmi.w	8004baa <plan_buffer_line+0x39a>
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 8004a50:	4b91      	ldr	r3, [pc, #580]	; (8004c98 <plan_buffer_line+0x488>)
 8004a52:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8004a56:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8004a5a:	4651      	mov	r1, sl
 8004a5c:	4658      	mov	r0, fp
 8004a5e:	f7fc f92b 	bl	8000cb8 <__aeabi_fmul>
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 8004a62:	4659      	mov	r1, fp
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 8004a64:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 8004a68:	4650      	mov	r0, sl
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 8004a6a:	9300      	str	r3, [sp, #0]
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 8004a6c:	f7fc f81a 	bl	8000aa4 <__aeabi_fsub>
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 8004a70:	4b89      	ldr	r3, [pc, #548]	; (8004c98 <plan_buffer_line+0x488>)
 8004a72:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8004a76:	f8d3 b014 	ldr.w	fp, [r3, #20]
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 8004a7a:	900e      	str	r0, [sp, #56]	; 0x38
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 8004a7c:	4659      	mov	r1, fp
 8004a7e:	4650      	mov	r0, sl
 8004a80:	f7fc f91a 	bl	8000cb8 <__aeabi_fmul>
 8004a84:	9b00      	ldr	r3, [sp, #0]
 8004a86:	4601      	mov	r1, r0
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f7fc f80b 	bl	8000aa4 <__aeabi_fsub>
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 8004a8e:	4659      	mov	r1, fp
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 8004a90:	9001      	str	r0, [sp, #4]
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 8004a92:	4650      	mov	r0, sl
 8004a94:	f7fc f806 	bl	8000aa4 <__aeabi_fsub>
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 8004a98:	4b7f      	ldr	r3, [pc, #508]	; (8004c98 <plan_buffer_line+0x488>)
 8004a9a:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 8004a9e:	699b      	ldr	r3, [r3, #24]
 8004aa0:	4659      	mov	r1, fp
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 8004aa2:	900f      	str	r0, [sp, #60]	; 0x3c
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	9300      	str	r3, [sp, #0]
 8004aa8:	f7fc f906 	bl	8000cb8 <__aeabi_fmul>
 8004aac:	9a01      	ldr	r2, [sp, #4]
 8004aae:	4601      	mov	r1, r0
 8004ab0:	4610      	mov	r0, r2
 8004ab2:	f7fb fff7 	bl	8000aa4 <__aeabi_fsub>
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 8004ab6:	9b00      	ldr	r3, [sp, #0]
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 8004ab8:	4682      	mov	sl, r0
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 8004aba:	4619      	mov	r1, r3
 8004abc:	4658      	mov	r0, fp
 8004abe:	f7fb fff1 	bl	8000aa4 <__aeabi_fsub>
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 8004ac2:	4b75      	ldr	r3, [pc, #468]	; (8004c98 <plan_buffer_line+0x488>)
 8004ac4:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8004ac8:	69db      	ldr	r3, [r3, #28]
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 8004aca:	9010      	str	r0, [sp, #64]	; 0x40
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 8004acc:	4659      	mov	r1, fp
 8004ace:	4618      	mov	r0, r3
 8004ad0:	9300      	str	r3, [sp, #0]
 8004ad2:	f7fc f8f1 	bl	8000cb8 <__aeabi_fmul>
 8004ad6:	4601      	mov	r1, r0
 8004ad8:	4650      	mov	r0, sl
 8004ada:	f7fb ffe3 	bl	8000aa4 <__aeabi_fsub>
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 8004ade:	9b00      	ldr	r3, [sp, #0]
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 8004ae0:	4682      	mov	sl, r0
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 8004ae2:	4619      	mov	r1, r3
 8004ae4:	4658      	mov	r0, fp
 8004ae6:	f7fb ffdd 	bl	8000aa4 <__aeabi_fsub>
    if (junction_cos_theta > 0.999999f) {
 8004aea:	496c      	ldr	r1, [pc, #432]	; (8004c9c <plan_buffer_line+0x48c>)
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 8004aec:	9011      	str	r0, [sp, #68]	; 0x44
    if (junction_cos_theta > 0.999999f) {
 8004aee:	4650      	mov	r0, sl
 8004af0:	f7fc fa9e 	bl	8001030 <__aeabi_fcmpgt>
 8004af4:	2800      	cmp	r0, #0
 8004af6:	f000 8085 	beq.w	8004c04 <plan_buffer_line+0x3f4>
      block->max_junction_speed_sqr = MINIMUM_JUNCTION_SPEED*MINIMUM_JUNCTION_SPEED;
 8004afa:	2200      	movs	r2, #0
 8004afc:	1bbb      	subs	r3, r7, r6
 8004afe:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8004b02:	629a      	str	r2, [r3, #40]	; 0x28
  if (!(block->condition & PL_COND_FLAG_SYSTEM_MOTION)) {
 8004b04:	1bbb      	subs	r3, r7, r6
 8004b06:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8004b0a:	7d9a      	ldrb	r2, [r3, #22]
 8004b0c:	0790      	lsls	r0, r2, #30
 8004b0e:	d453      	bmi.n	8004bb8 <plan_buffer_line+0x3a8>
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01f*sys.r_override); }
 8004b10:	07d1      	lsls	r1, r2, #31
  float nominal_speed = block->programmed_rate;
 8004b12:	f8d3 9030 	ldr.w	r9, [r3, #48]	; 0x30
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01f*sys.r_override); }
 8004b16:	d553      	bpl.n	8004bc0 <plan_buffer_line+0x3b0>
 8004b18:	4b61      	ldr	r3, [pc, #388]	; (8004ca0 <plan_buffer_line+0x490>)
 8004b1a:	7a58      	ldrb	r0, [r3, #9]
 8004b1c:	f7fc f878 	bl	8000c10 <__aeabi_i2f>
 8004b20:	4649      	mov	r1, r9
 8004b22:	f7fc f8c9 	bl	8000cb8 <__aeabi_fmul>
 8004b26:	495f      	ldr	r1, [pc, #380]	; (8004ca4 <plan_buffer_line+0x494>)
 8004b28:	f7fc f8c6 	bl	8000cb8 <__aeabi_fmul>
 8004b2c:	4605      	mov	r5, r0
 8004b2e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8004b32:	4628      	mov	r0, r5
 8004b34:	f7fc fa72 	bl	800101c <__aeabi_fcmpge>
 8004b38:	b908      	cbnz	r0, 8004b3e <plan_buffer_line+0x32e>
 8004b3a:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
    plan_compute_profile_parameters(block, nominal_speed, pl.previous_nominal_speed);
 8004b3e:	4e56      	ldr	r6, [pc, #344]	; (8004c98 <plan_buffer_line+0x488>)
  if (nominal_speed > prev_nominal_speed) { block->max_entry_speed_sqr = prev_nominal_speed*prev_nominal_speed; }
 8004b40:	4629      	mov	r1, r5
    plan_compute_profile_parameters(block, nominal_speed, pl.previous_nominal_speed);
 8004b42:	f8d6 9020 	ldr.w	r9, [r6, #32]
 8004b46:	f8d8 7028 	ldr.w	r7, [r8, #40]	; 0x28
  if (nominal_speed > prev_nominal_speed) { block->max_entry_speed_sqr = prev_nominal_speed*prev_nominal_speed; }
 8004b4a:	4648      	mov	r0, r9
 8004b4c:	f7fc fa52 	bl	8000ff4 <__aeabi_fcmplt>
 8004b50:	2800      	cmp	r0, #0
 8004b52:	d051      	beq.n	8004bf8 <plan_buffer_line+0x3e8>
 8004b54:	4649      	mov	r1, r9
 8004b56:	4648      	mov	r0, r9
 8004b58:	f7fc f8ae 	bl	8000cb8 <__aeabi_fmul>
 8004b5c:	4681      	mov	r9, r0
  if (block->max_entry_speed_sqr > block->max_junction_speed_sqr) { block->max_entry_speed_sqr = block->max_junction_speed_sqr; }
 8004b5e:	4639      	mov	r1, r7
 8004b60:	4648      	mov	r0, r9
 8004b62:	f7fc fa65 	bl	8001030 <__aeabi_fcmpgt>
 8004b66:	2800      	cmp	r0, #0
 8004b68:	d143      	bne.n	8004bf2 <plan_buffer_line+0x3e2>
 8004b6a:	f8c8 901c 	str.w	r9, [r8, #28]
    block_buffer_head = next_buffer_head;
 8004b6e:	4a4e      	ldr	r2, [pc, #312]	; (8004ca8 <plan_buffer_line+0x498>)
    memcpy(pl.previous_unit_vec, unit_vec, sizeof(unit_vec)); // pl.previous_unit_vec[] = unit_vec[]
 8004b70:	4f4e      	ldr	r7, [pc, #312]	; (8004cac <plan_buffer_line+0x49c>)
    block_buffer_head = next_buffer_head;
 8004b72:	7811      	ldrb	r1, [r2, #0]
 8004b74:	4847      	ldr	r0, [pc, #284]	; (8004c94 <plan_buffer_line+0x484>)
  block_index++;
 8004b76:	1c4b      	adds	r3, r1, #1
 8004b78:	b2db      	uxtb	r3, r3
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 8004b7a:	2b24      	cmp	r3, #36	; 0x24
 8004b7c:	bf08      	it	eq
 8004b7e:	2300      	moveq	r3, #0
    pl.previous_nominal_speed = nominal_speed;
 8004b80:	6235      	str	r5, [r6, #32]
    memcpy(pl.position, target_steps, sizeof(target_steps)); // pl.position[] = target_steps[]
 8004b82:	ad02      	add	r5, sp, #8
    block_buffer_head = next_buffer_head;
 8004b84:	7001      	strb	r1, [r0, #0]
    next_buffer_head = plan_next_block_index(block_buffer_head);
 8004b86:	7013      	strb	r3, [r2, #0]
    memcpy(pl.previous_unit_vec, unit_vec, sizeof(unit_vec)); // pl.previous_unit_vec[] = unit_vec[]
 8004b88:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004b8c:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
    memcpy(pl.position, target_steps, sizeof(target_steps)); // pl.position[] = target_steps[]
 8004b90:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004b94:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    planner_recalculate();
 8004b98:	f7ff fc02 	bl	80043a0 <planner_recalculate>
  return(PLAN_OK);
 8004b9c:	2001      	movs	r0, #1
}
 8004b9e:	b013      	add	sp, #76	; 0x4c
 8004ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { block->programmed_rate = block->rapid_rate; }
 8004ba4:	f8ca 0030 	str.w	r0, [sl, #48]	; 0x30
 8004ba8:	e748      	b.n	8004a3c <plan_buffer_line+0x22c>
    block->entry_speed_sqr = 0.0f;
 8004baa:	2200      	movs	r2, #0
 8004bac:	1bbb      	subs	r3, r7, r6
 8004bae:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8004bb2:	619a      	str	r2, [r3, #24]
    block->max_junction_speed_sqr = 0.0f; // Starting from rest. Enforce start from zero velocity.
 8004bb4:	629a      	str	r2, [r3, #40]	; 0x28
 8004bb6:	e7a5      	b.n	8004b04 <plan_buffer_line+0x2f4>
  return(PLAN_OK);
 8004bb8:	2001      	movs	r0, #1
}
 8004bba:	b013      	add	sp, #76	; 0x4c
 8004bbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (!(block->condition & PL_COND_FLAG_NO_FEED_OVERRIDE)) { nominal_speed *= (0.01f*sys.f_override); }
 8004bc0:	0753      	lsls	r3, r2, #29
 8004bc2:	d40a      	bmi.n	8004bda <plan_buffer_line+0x3ca>
 8004bc4:	4b36      	ldr	r3, [pc, #216]	; (8004ca0 <plan_buffer_line+0x490>)
 8004bc6:	7a18      	ldrb	r0, [r3, #8]
 8004bc8:	f7fc f822 	bl	8000c10 <__aeabi_i2f>
 8004bcc:	4649      	mov	r1, r9
 8004bce:	f7fc f873 	bl	8000cb8 <__aeabi_fmul>
 8004bd2:	4934      	ldr	r1, [pc, #208]	; (8004ca4 <plan_buffer_line+0x494>)
 8004bd4:	f7fc f870 	bl	8000cb8 <__aeabi_fmul>
 8004bd8:	4681      	mov	r9, r0
    if (nominal_speed > block->rapid_rate) { nominal_speed = block->rapid_rate; }
 8004bda:	1bbe      	subs	r6, r7, r6
 8004bdc:	eb05 05c6 	add.w	r5, r5, r6, lsl #3
 8004be0:	6aed      	ldr	r5, [r5, #44]	; 0x2c
 8004be2:	4649      	mov	r1, r9
 8004be4:	4628      	mov	r0, r5
 8004be6:	f7fc fa0f 	bl	8001008 <__aeabi_fcmple>
 8004bea:	2800      	cmp	r0, #0
 8004bec:	d19f      	bne.n	8004b2e <plan_buffer_line+0x31e>
 8004bee:	464d      	mov	r5, r9
 8004bf0:	e79d      	b.n	8004b2e <plan_buffer_line+0x31e>
  if (block->max_entry_speed_sqr > block->max_junction_speed_sqr) { block->max_entry_speed_sqr = block->max_junction_speed_sqr; }
 8004bf2:	f8c8 701c 	str.w	r7, [r8, #28]
 8004bf6:	e7ba      	b.n	8004b6e <plan_buffer_line+0x35e>
  else { block->max_entry_speed_sqr = nominal_speed*nominal_speed; }
 8004bf8:	4629      	mov	r1, r5
 8004bfa:	4628      	mov	r0, r5
 8004bfc:	f7fc f85c 	bl	8000cb8 <__aeabi_fmul>
 8004c00:	4681      	mov	r9, r0
 8004c02:	e7ac      	b.n	8004b5e <plan_buffer_line+0x34e>
      if (junction_cos_theta < -0.999999f) {
 8004c04:	492a      	ldr	r1, [pc, #168]	; (8004cb0 <plan_buffer_line+0x4a0>)
 8004c06:	4650      	mov	r0, sl
 8004c08:	f7fc f9f4 	bl	8000ff4 <__aeabi_fcmplt>
 8004c0c:	b128      	cbz	r0, 8004c1a <plan_buffer_line+0x40a>
        block->max_junction_speed_sqr = SOME_LARGE_VALUE;
 8004c0e:	1bbb      	subs	r3, r7, r6
 8004c10:	4a28      	ldr	r2, [pc, #160]	; (8004cb4 <plan_buffer_line+0x4a4>)
 8004c12:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8004c16:	629a      	str	r2, [r3, #40]	; 0x28
 8004c18:	e774      	b.n	8004b04 <plan_buffer_line+0x2f4>
        convert_delta_vector_to_unit_vector(junction_unit_vec);
 8004c1a:	a80e      	add	r0, sp, #56	; 0x38
 8004c1c:	f7ff fb0e 	bl	800423c <convert_delta_vector_to_unit_vector>
        float junction_acceleration = limit_value_by_axis_maximum(settings.acceleration, junction_unit_vec);
 8004c20:	a90e      	add	r1, sp, #56	; 0x38
 8004c22:	4819      	ldr	r0, [pc, #100]	; (8004c88 <plan_buffer_line+0x478>)
 8004c24:	f7ff fb66 	bl	80042f4 <limit_value_by_axis_maximum>
        float sin_theta_d2 = sqrtf(0.5f*(1.0f-junction_cos_theta)); // Trig half angle identity. Always positive.
 8004c28:	4651      	mov	r1, sl
        float junction_acceleration = limit_value_by_axis_maximum(settings.acceleration, junction_unit_vec);
 8004c2a:	9000      	str	r0, [sp, #0]
        float sin_theta_d2 = sqrtf(0.5f*(1.0f-junction_cos_theta)); // Trig half angle identity. Always positive.
 8004c2c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8004c30:	f7fb ff38 	bl	8000aa4 <__aeabi_fsub>
 8004c34:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004c38:	f7fc f83e 	bl	8000cb8 <__aeabi_fmul>
 8004c3c:	f006 fecc 	bl	800b9d8 <sqrtf>
 8004c40:	4683      	mov	fp, r0
        block->max_junction_speed_sqr = max( MINIMUM_JUNCTION_SPEED*MINIMUM_JUNCTION_SPEED,
 8004c42:	9b00      	ldr	r3, [sp, #0]
 8004c44:	4659      	mov	r1, fp
 8004c46:	4618      	mov	r0, r3
 8004c48:	f7fc f836 	bl	8000cb8 <__aeabi_fmul>
 8004c4c:	f8d9 1048 	ldr.w	r1, [r9, #72]	; 0x48
 8004c50:	f7fc f832 	bl	8000cb8 <__aeabi_fmul>
 8004c54:	4659      	mov	r1, fp
 8004c56:	4681      	mov	r9, r0
 8004c58:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8004c5c:	f7fb ff22 	bl	8000aa4 <__aeabi_fsub>
 8004c60:	4601      	mov	r1, r0
 8004c62:	4648      	mov	r0, r9
 8004c64:	f7fc f8dc 	bl	8000e20 <__aeabi_fdiv>
 8004c68:	eba7 0a06 	sub.w	sl, r7, r6
 8004c6c:	2100      	movs	r1, #0
 8004c6e:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 8004c72:	4681      	mov	r9, r0
 8004c74:	f7fc f9d2 	bl	800101c <__aeabi_fcmpge>
 8004c78:	b908      	cbnz	r0, 8004c7e <plan_buffer_line+0x46e>
 8004c7a:	f04f 0900 	mov.w	r9, #0
 8004c7e:	f8ca 9028 	str.w	r9, [sl, #40]	; 0x28
 8004c82:	e73f      	b.n	8004b04 <plan_buffer_line+0x2f4>
 8004c84:	0800cb1c 	.word	0x0800cb1c
 8004c88:	20001764 	.word	0x20001764
 8004c8c:	20001754 	.word	0x20001754
 8004c90:	20000d36 	.word	0x20000d36
 8004c94:	20000d34 	.word	0x20000d34
 8004c98:	20000d38 	.word	0x20000d38
 8004c9c:	3f7fffef 	.word	0x3f7fffef
 8004ca0:	20001408 	.word	0x20001408
 8004ca4:	3c23d70a 	.word	0x3c23d70a
 8004ca8:	20000d37 	.word	0x20000d37
 8004cac:	20000d48 	.word	0x20000d48
 8004cb0:	bf7fffef 	.word	0xbf7fffef
 8004cb4:	7f7fffff 	.word	0x7f7fffff

08004cb8 <plan_sync_position>:
        pl.position[Y_AXIS] = system_convert_corexy_to_y_axis_steps(sys_position);
      } else {
        pl.position[idx] = sys_position[idx];
      }
    #else
      pl.position[idx] = sys_position[idx];
 8004cb8:	4a06      	ldr	r2, [pc, #24]	; (8004cd4 <plan_sync_position+0x1c>)
 8004cba:	4b07      	ldr	r3, [pc, #28]	; (8004cd8 <plan_sync_position+0x20>)
{
 8004cbc:	b410      	push	{r4}
      pl.position[idx] = sys_position[idx];
 8004cbe:	e9d2 4000 	ldrd	r4, r0, [r2]
 8004cc2:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
 8004cc6:	e9c3 4000 	strd	r4, r0, [r3]
 8004cca:	e9c3 1202 	strd	r1, r2, [r3, #8]
    #endif
  }
}
 8004cce:	bc10      	pop	{r4}
 8004cd0:	4770      	bx	lr
 8004cd2:	bf00      	nop
 8004cd4:	20001430 	.word	0x20001430
 8004cd8:	20000d38 	.word	0x20000d38

08004cdc <plan_get_block_buffer_available>:


// Returns the number of available blocks are in the planner buffer.
uint8_t plan_get_block_buffer_available()
{
  if (block_buffer_head >= block_buffer_tail) { return((BLOCK_BUFFER_SIZE-1)-(block_buffer_head-block_buffer_tail)); }
 8004cdc:	4a06      	ldr	r2, [pc, #24]	; (8004cf8 <plan_get_block_buffer_available+0x1c>)
 8004cde:	4b07      	ldr	r3, [pc, #28]	; (8004cfc <plan_get_block_buffer_available+0x20>)
 8004ce0:	7812      	ldrb	r2, [r2, #0]
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	bf2c      	ite	cs
 8004ce8:	f103 0023 	addcs.w	r0, r3, #35	; 0x23
  return((block_buffer_tail-block_buffer_head-1));
 8004cec:	f103 30ff 	addcc.w	r0, r3, #4294967295
 8004cf0:	1a80      	subs	r0, r0, r2
 8004cf2:	b2c0      	uxtb	r0, r0
}
 8004cf4:	4770      	bx	lr
 8004cf6:	bf00      	nop
 8004cf8:	20000d34 	.word	0x20000d34
 8004cfc:	20000d36 	.word	0x20000d36

08004d00 <plan_cycle_reinitialize>:


// Re-initialize buffer plan with a partially completed block, assumed to exist at the buffer tail.
// Called after a steppers have come to a complete stop for a feed hold and the cycle is stopped.
void plan_cycle_reinitialize()
{
 8004d00:	b508      	push	{r3, lr}
  // Re-plan from a complete stop. Reset planner entry speeds and buffer planned pointer.
  st_update_plan_block_parameters();
 8004d02:	f003 feeb 	bl	8008adc <st_update_plan_block_parameters>
  block_buffer_planned = block_buffer_tail;
 8004d06:	4a04      	ldr	r2, [pc, #16]	; (8004d18 <plan_cycle_reinitialize+0x18>)
 8004d08:	4b04      	ldr	r3, [pc, #16]	; (8004d1c <plan_cycle_reinitialize+0x1c>)
 8004d0a:	7812      	ldrb	r2, [r2, #0]
 8004d0c:	701a      	strb	r2, [r3, #0]
  planner_recalculate();
}
 8004d0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  planner_recalculate();
 8004d12:	f7ff bb45 	b.w	80043a0 <planner_recalculate>
 8004d16:	bf00      	nop
 8004d18:	20000d36 	.word	0x20000d36
 8004d1c:	20000d35 	.word	0x20000d35

08004d20 <printString>:

#include "grbl.h"


void printString(const char *s)
{
 8004d20:	b510      	push	{r4, lr}
 8004d22:	4604      	mov	r4, r0
  while (*s)
 8004d24:	7800      	ldrb	r0, [r0, #0]
 8004d26:	b128      	cbz	r0, 8004d34 <printString+0x14>
    serial_write(*s++);
 8004d28:	f002 fcaa 	bl	8007680 <serial_write>
  while (*s)
 8004d2c:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8004d30:	2800      	cmp	r0, #0
 8004d32:	d1f9      	bne.n	8004d28 <printString+0x8>
}
 8004d34:	bd10      	pop	{r4, pc}
 8004d36:	bf00      	nop

08004d38 <print_uint8_base10>:
// Prints an uint8 variable in base 10.
void print_uint8_base10(uint8_t n)
{
  uint8_t digit_a = 0;
  uint8_t digit_b = 0;
  if (n >= 100) { // 100-255
 8004d38:	2863      	cmp	r0, #99	; 0x63
{
 8004d3a:	b570      	push	{r4, r5, r6, lr}
 8004d3c:	4605      	mov	r5, r0
  if (n >= 100) { // 100-255
 8004d3e:	d920      	bls.n	8004d82 <print_uint8_base10+0x4a>
    digit_a = '0' + n % 10;
    n /= 10;
  }
  if (n >= 10) { // 10-99
    digit_b = '0' + n % 10;
    n /= 10;
 8004d40:	481c      	ldr	r0, [pc, #112]	; (8004db4 <print_uint8_base10+0x7c>)
 8004d42:	fba0 3005 	umull	r3, r0, r0, r5
 8004d46:	0940      	lsrs	r0, r0, #5
  }
  serial_write('0' + n);
 8004d48:	3030      	adds	r0, #48	; 0x30
 8004d4a:	f002 fc99 	bl	8007680 <serial_write>
    n /= 10;
 8004d4e:	481a      	ldr	r0, [pc, #104]	; (8004db8 <print_uint8_base10+0x80>)
 8004d50:	fba0 3405 	umull	r3, r4, r0, r5
 8004d54:	08e4      	lsrs	r4, r4, #3
    digit_b = '0' + n % 10;
 8004d56:	b2e3      	uxtb	r3, r4
 8004d58:	fba0 2003 	umull	r2, r0, r0, r3
 8004d5c:	08c0      	lsrs	r0, r0, #3
 8004d5e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004d62:	eba3 0040 	sub.w	r0, r3, r0, lsl #1
 8004d66:	3030      	adds	r0, #48	; 0x30
  if (digit_b) { serial_write(digit_b); }
 8004d68:	b2c0      	uxtb	r0, r0
 8004d6a:	f002 fc89 	bl	8007680 <serial_write>
    digit_a = '0' + n % 10;
 8004d6e:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 8004d72:	eba5 0040 	sub.w	r0, r5, r0, lsl #1
 8004d76:	3030      	adds	r0, #48	; 0x30
  if (digit_a) { serial_write(digit_a); }
 8004d78:	b2c0      	uxtb	r0, r0
}
 8004d7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  if (digit_a) { serial_write(digit_a); }
 8004d7e:	f002 bc7f 	b.w	8007680 <serial_write>
  if (n >= 10) { // 10-99
 8004d82:	2809      	cmp	r0, #9
 8004d84:	d805      	bhi.n	8004d92 <print_uint8_base10+0x5a>
}
 8004d86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  serial_write('0' + n);
 8004d8a:	3030      	adds	r0, #48	; 0x30
 8004d8c:	b2c0      	uxtb	r0, r0
 8004d8e:	f002 bc77 	b.w	8007680 <serial_write>
    n /= 10;
 8004d92:	260a      	movs	r6, #10
 8004d94:	fbb0 f4f6 	udiv	r4, r0, r6
  serial_write('0' + n);
 8004d98:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8004d9c:	b2c0      	uxtb	r0, r0
 8004d9e:	f002 fc6f 	bl	8007680 <serial_write>
    digit_b = '0' + n % 10;
 8004da2:	fb06 5014 	mls	r0, r6, r4, r5
}
 8004da6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    digit_b = '0' + n % 10;
 8004daa:	3030      	adds	r0, #48	; 0x30
  if (digit_b) { serial_write(digit_b); }
 8004dac:	b2c0      	uxtb	r0, r0
 8004dae:	f002 bc67 	b.w	8007680 <serial_write>
 8004db2:	bf00      	nop
 8004db4:	51eb851f 	.word	0x51eb851f
 8004db8:	cccccccd 	.word	0xcccccccd

08004dbc <printFloat>:
// more digits than a float. Number of decimal places, which are tracked by a counter,
// may be set by the user. The integer is then efficiently converted to a string.
// NOTE: AVR '%' and '/' integer operations are very efficient. Bitshifting speed-up
// techniques are actually just slightly slower. Found this out the hard way.
void printFloat(float n, uint8_t decimal_places)
{
 8004dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dbe:	460d      	mov	r5, r1
 8004dc0:	b085      	sub	sp, #20
  if (n < 0) {
 8004dc2:	2100      	movs	r1, #0
{
 8004dc4:	4606      	mov	r6, r0
  if (n < 0) {
 8004dc6:	f7fc f915 	bl	8000ff4 <__aeabi_fcmplt>
 8004dca:	2800      	cmp	r0, #0
 8004dcc:	f040 80c2 	bne.w	8004f54 <printFloat+0x198>
    serial_write('-');
    n = -n;
  }

  uint8_t decimals = decimal_places;
  while (decimals >= 2) { // Quickly convert values expected to be E0 to E-4.
 8004dd0:	2d01      	cmp	r5, #1
 8004dd2:	f240 80c7 	bls.w	8004f64 <printFloat+0x1a8>
 8004dd6:	462c      	mov	r4, r5
    n *= 100;
 8004dd8:	4f6d      	ldr	r7, [pc, #436]	; (8004f90 <printFloat+0x1d4>)
 8004dda:	4630      	mov	r0, r6
 8004ddc:	4639      	mov	r1, r7
 8004dde:	f7fb ff6b 	bl	8000cb8 <__aeabi_fmul>
    decimals -= 2;
 8004de2:	3c02      	subs	r4, #2
 8004de4:	b2e4      	uxtb	r4, r4
  while (decimals >= 2) { // Quickly convert values expected to be E0 to E-4.
 8004de6:	2c01      	cmp	r4, #1
    n *= 100;
 8004de8:	4606      	mov	r6, r0
  while (decimals >= 2) { // Quickly convert values expected to be E0 to E-4.
 8004dea:	d8f6      	bhi.n	8004dda <printFloat+0x1e>
 8004dec:	f005 0301 	and.w	r3, r5, #1
  }
  if (decimals) { n *= 10; }
 8004df0:	b123      	cbz	r3, 8004dfc <printFloat+0x40>
 8004df2:	4630      	mov	r0, r6
 8004df4:	4967      	ldr	r1, [pc, #412]	; (8004f94 <printFloat+0x1d8>)
 8004df6:	f7fb ff5f 	bl	8000cb8 <__aeabi_fmul>
 8004dfa:	4606      	mov	r6, r0
  n += 0.5; // Add rounding factor. Ensures carryover through entire value.
 8004dfc:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004e00:	4630      	mov	r0, r6
 8004e02:	f7fb fe51 	bl	8000aa8 <__addsf3>

  // Generate digits backwards and store in string.
  unsigned char buf[13];
  uint8_t i = 0;
  uint32_t a = (long)n;
 8004e06:	f7fc f933 	bl	8001070 <__aeabi_f2iz>
  while(a > 0) {
 8004e0a:	2800      	cmp	r0, #0
 8004e0c:	f000 80ac 	beq.w	8004f68 <printFloat+0x1ac>
  uint8_t i = 0;
 8004e10:	2200      	movs	r2, #0
    buf[i++] = (a % 10) + '0'; // Get digit
 8004e12:	4e61      	ldr	r6, [pc, #388]	; (8004f98 <printFloat+0x1dc>)
 8004e14:	fba6 1300 	umull	r1, r3, r6, r0
 8004e18:	08db      	lsrs	r3, r3, #3
 8004e1a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8004e1e:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
 8004e22:	1c54      	adds	r4, r2, #1
 8004e24:	a904      	add	r1, sp, #16
 8004e26:	3030      	adds	r0, #48	; 0x30
 8004e28:	440a      	add	r2, r1
 8004e2a:	b2e4      	uxtb	r4, r4
 8004e2c:	f802 0c10 	strb.w	r0, [r2, #-16]
 8004e30:	4622      	mov	r2, r4
  while(a > 0) {
 8004e32:	4618      	mov	r0, r3
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d1ed      	bne.n	8004e14 <printFloat+0x58>
    a /= 10;
  }
  while (i < decimal_places) {
 8004e38:	42a5      	cmp	r5, r4
 8004e3a:	d968      	bls.n	8004f0e <printFloat+0x152>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004e3c:	2130      	movs	r1, #48	; 0x30
 8004e3e:	1c63      	adds	r3, r4, #1
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	aa04      	add	r2, sp, #16
 8004e44:	4422      	add	r2, r4
  while (i < decimal_places) {
 8004e46:	429d      	cmp	r5, r3
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004e48:	f802 1c10 	strb.w	r1, [r2, #-16]
  while (i < decimal_places) {
 8004e4c:	d97e      	bls.n	8004f4c <printFloat+0x190>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004e4e:	1ca2      	adds	r2, r4, #2
 8004e50:	a804      	add	r0, sp, #16
 8004e52:	b2d2      	uxtb	r2, r2
 8004e54:	4403      	add	r3, r0
  while (i < decimal_places) {
 8004e56:	4295      	cmp	r5, r2
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004e58:	f803 1c10 	strb.w	r1, [r3, #-16]
  while (i < decimal_places) {
 8004e5c:	d972      	bls.n	8004f44 <printFloat+0x188>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004e5e:	1ce3      	adds	r3, r4, #3
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	4402      	add	r2, r0
  while (i < decimal_places) {
 8004e64:	429d      	cmp	r5, r3
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004e66:	f802 1c10 	strb.w	r1, [r2, #-16]
  while (i < decimal_places) {
 8004e6a:	d96f      	bls.n	8004f4c <printFloat+0x190>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004e6c:	1d22      	adds	r2, r4, #4
 8004e6e:	b2d2      	uxtb	r2, r2
 8004e70:	4403      	add	r3, r0
  while (i < decimal_places) {
 8004e72:	4295      	cmp	r5, r2
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004e74:	f803 1c10 	strb.w	r1, [r3, #-16]
  while (i < decimal_places) {
 8004e78:	d964      	bls.n	8004f44 <printFloat+0x188>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004e7a:	1d63      	adds	r3, r4, #5
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	4402      	add	r2, r0
  while (i < decimal_places) {
 8004e80:	42ab      	cmp	r3, r5
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004e82:	f802 1c10 	strb.w	r1, [r2, #-16]
  while (i < decimal_places) {
 8004e86:	d261      	bcs.n	8004f4c <printFloat+0x190>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004e88:	1da2      	adds	r2, r4, #6
 8004e8a:	b2d2      	uxtb	r2, r2
 8004e8c:	4403      	add	r3, r0
  while (i < decimal_places) {
 8004e8e:	4295      	cmp	r5, r2
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004e90:	f803 1c10 	strb.w	r1, [r3, #-16]
  while (i < decimal_places) {
 8004e94:	d956      	bls.n	8004f44 <printFloat+0x188>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004e96:	1de3      	adds	r3, r4, #7
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	4402      	add	r2, r0
  while (i < decimal_places) {
 8004e9c:	429d      	cmp	r5, r3
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004e9e:	f802 1c10 	strb.w	r1, [r2, #-16]
  while (i < decimal_places) {
 8004ea2:	d953      	bls.n	8004f4c <printFloat+0x190>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004ea4:	f104 0208 	add.w	r2, r4, #8
 8004ea8:	b2d2      	uxtb	r2, r2
 8004eaa:	4403      	add	r3, r0
  while (i < decimal_places) {
 8004eac:	4295      	cmp	r5, r2
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004eae:	f803 1c10 	strb.w	r1, [r3, #-16]
  while (i < decimal_places) {
 8004eb2:	d947      	bls.n	8004f44 <printFloat+0x188>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004eb4:	f104 0309 	add.w	r3, r4, #9
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	4402      	add	r2, r0
  while (i < decimal_places) {
 8004ebc:	429d      	cmp	r5, r3
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004ebe:	f802 1c10 	strb.w	r1, [r2, #-16]
  while (i < decimal_places) {
 8004ec2:	d943      	bls.n	8004f4c <printFloat+0x190>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004ec4:	f104 020a 	add.w	r2, r4, #10
 8004ec8:	b2d2      	uxtb	r2, r2
 8004eca:	4403      	add	r3, r0
  while (i < decimal_places) {
 8004ecc:	4295      	cmp	r5, r2
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004ece:	f803 1c10 	strb.w	r1, [r3, #-16]
  while (i < decimal_places) {
 8004ed2:	d937      	bls.n	8004f44 <printFloat+0x188>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004ed4:	f104 030b 	add.w	r3, r4, #11
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	4402      	add	r2, r0
  while (i < decimal_places) {
 8004edc:	429d      	cmp	r5, r3
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004ede:	f802 1c10 	strb.w	r1, [r2, #-16]
  while (i < decimal_places) {
 8004ee2:	d933      	bls.n	8004f4c <printFloat+0x190>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004ee4:	f104 020c 	add.w	r2, r4, #12
 8004ee8:	b2d2      	uxtb	r2, r2
 8004eea:	4403      	add	r3, r0
  while (i < decimal_places) {
 8004eec:	4295      	cmp	r5, r2
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004eee:	f803 1c10 	strb.w	r1, [r3, #-16]
  while (i < decimal_places) {
 8004ef2:	d927      	bls.n	8004f44 <printFloat+0x188>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004ef4:	f104 030d 	add.w	r3, r4, #13
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	4402      	add	r2, r0
  while (i < decimal_places) {
 8004efc:	429d      	cmp	r5, r3
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004efe:	f802 1c10 	strb.w	r1, [r2, #-16]
  while (i < decimal_places) {
 8004f02:	d923      	bls.n	8004f4c <printFloat+0x190>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004f04:	340e      	adds	r4, #14
 8004f06:	4403      	add	r3, r0
 8004f08:	b2e4      	uxtb	r4, r4
 8004f0a:	f803 1c10 	strb.w	r1, [r3, #-16]
  }
  if (i == decimal_places) { // Fill in leading zero, if needed.
 8004f0e:	42a5      	cmp	r5, r4
 8004f10:	d010      	beq.n	8004f34 <printFloat+0x178>
    buf[i++] = '0';
  }

  // Print the generated string.
  for (; i > 0; i--) {
 8004f12:	b16c      	cbz	r4, 8004f30 <printFloat+0x174>
 8004f14:	1e6b      	subs	r3, r5, #1
 8004f16:	eb0d 0604 	add.w	r6, sp, r4
 8004f1a:	b2df      	uxtb	r7, r3
    if (i == decimal_places) { serial_write('.'); } // Insert decimal point in right place.
 8004f1c:	42a5      	cmp	r5, r4
 8004f1e:	d026      	beq.n	8004f6e <printFloat+0x1b2>
    serial_write(buf[i-1]);
 8004f20:	f816 0d01 	ldrb.w	r0, [r6, #-1]!
  for (; i > 0; i--) {
 8004f24:	3c01      	subs	r4, #1
    serial_write(buf[i-1]);
 8004f26:	f002 fbab 	bl	8007680 <serial_write>
  for (; i > 0; i--) {
 8004f2a:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8004f2e:	d1f5      	bne.n	8004f1c <printFloat+0x160>
  }
}
 8004f30:	b005      	add	sp, #20
 8004f32:	bdf0      	pop	{r4, r5, r6, r7, pc}
    buf[i++] = '0';
 8004f34:	2230      	movs	r2, #48	; 0x30
 8004f36:	ab04      	add	r3, sp, #16
 8004f38:	1c6c      	adds	r4, r5, #1
 8004f3a:	442b      	add	r3, r5
 8004f3c:	f803 2c10 	strb.w	r2, [r3, #-16]
 8004f40:	b2e4      	uxtb	r4, r4
 8004f42:	e7e6      	b.n	8004f12 <printFloat+0x156>
  while (i < decimal_places) {
 8004f44:	4614      	mov	r4, r2
  if (i == decimal_places) { // Fill in leading zero, if needed.
 8004f46:	42a5      	cmp	r5, r4
 8004f48:	d1e3      	bne.n	8004f12 <printFloat+0x156>
 8004f4a:	e7f3      	b.n	8004f34 <printFloat+0x178>
  while (i < decimal_places) {
 8004f4c:	461c      	mov	r4, r3
  if (i == decimal_places) { // Fill in leading zero, if needed.
 8004f4e:	42a5      	cmp	r5, r4
 8004f50:	d1df      	bne.n	8004f12 <printFloat+0x156>
 8004f52:	e7ef      	b.n	8004f34 <printFloat+0x178>
    serial_write('-');
 8004f54:	202d      	movs	r0, #45	; 0x2d
 8004f56:	f002 fb93 	bl	8007680 <serial_write>
  while (decimals >= 2) { // Quickly convert values expected to be E0 to E-4.
 8004f5a:	2d01      	cmp	r5, #1
    n = -n;
 8004f5c:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
  while (decimals >= 2) { // Quickly convert values expected to be E0 to E-4.
 8004f60:	f63f af39 	bhi.w	8004dd6 <printFloat+0x1a>
 8004f64:	462b      	mov	r3, r5
 8004f66:	e743      	b.n	8004df0 <printFloat+0x34>
  while (i < decimal_places) {
 8004f68:	b165      	cbz	r5, 8004f84 <printFloat+0x1c8>
  uint8_t i = 0;
 8004f6a:	4604      	mov	r4, r0
 8004f6c:	e766      	b.n	8004e3c <printFloat+0x80>
    if (i == decimal_places) { serial_write('.'); } // Insert decimal point in right place.
 8004f6e:	202e      	movs	r0, #46	; 0x2e
 8004f70:	f002 fb86 	bl	8007680 <serial_write>
    serial_write(buf[i-1]);
 8004f74:	f816 0d01 	ldrb.w	r0, [r6, #-1]!
 8004f78:	f002 fb82 	bl	8007680 <serial_write>
  for (; i > 0; i--) {
 8004f7c:	463c      	mov	r4, r7
 8004f7e:	2f00      	cmp	r7, #0
 8004f80:	d1cc      	bne.n	8004f1c <printFloat+0x160>
 8004f82:	e7d5      	b.n	8004f30 <printFloat+0x174>
    buf[i++] = '0';
 8004f84:	2330      	movs	r3, #48	; 0x30
 8004f86:	2401      	movs	r4, #1
 8004f88:	f88d 3000 	strb.w	r3, [sp]
 8004f8c:	e7c2      	b.n	8004f14 <printFloat+0x158>
 8004f8e:	bf00      	nop
 8004f90:	42c80000 	.word	0x42c80000
 8004f94:	41200000 	.word	0x41200000
 8004f98:	cccccccd 	.word	0xcccccccd

08004f9c <printFloat_CoordValue>:

// Floating value printing handlers for special variables types used in Grbl and are defined
// in the config.h.
//  - CoordValue: Handles all position or coordinate values in inches or mm reporting.
//  - RateValue: Handles feed rate and current velocity in inches or mm reporting.
void printFloat_CoordValue(float n) {
 8004f9c:	b530      	push	{r4, r5, lr}
  if (bit_istrue(settings.flags,BITFLAG_REPORT_INCHES)) {
 8004f9e:	4b72      	ldr	r3, [pc, #456]	; (8005168 <printFloat_CoordValue+0x1cc>)
void printFloat_CoordValue(float n) {
 8004fa0:	b085      	sub	sp, #20
  if (bit_istrue(settings.flags,BITFLAG_REPORT_INCHES)) {
 8004fa2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004fa6:	07db      	lsls	r3, r3, #31
 8004fa8:	d457      	bmi.n	800505a <printFloat_CoordValue+0xbe>
  if (n < 0) {
 8004faa:	2100      	movs	r1, #0
 8004fac:	4604      	mov	r4, r0
 8004fae:	f7fc f821 	bl	8000ff4 <__aeabi_fcmplt>
 8004fb2:	2800      	cmp	r0, #0
 8004fb4:	f040 80b1 	bne.w	800511a <printFloat_CoordValue+0x17e>
  if (decimals) { n *= 10; }
 8004fb8:	496c      	ldr	r1, [pc, #432]	; (800516c <printFloat_CoordValue+0x1d0>)
 8004fba:	4620      	mov	r0, r4
 8004fbc:	f7fb fe7c 	bl	8000cb8 <__aeabi_fmul>
  n += 0.5; // Add rounding factor. Ensures carryover through entire value.
 8004fc0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004fc4:	f7fb fd70 	bl	8000aa8 <__addsf3>
  uint32_t a = (long)n;
 8004fc8:	f7fc f852 	bl	8001070 <__aeabi_f2iz>
  while(a > 0) {
 8004fcc:	2800      	cmp	r0, #0
 8004fce:	f000 80aa 	beq.w	8005126 <printFloat_CoordValue+0x18a>
  uint8_t i = 0;
 8004fd2:	2400      	movs	r4, #0
    buf[i++] = (a % 10) + '0'; // Get digit
 8004fd4:	4d66      	ldr	r5, [pc, #408]	; (8005170 <printFloat_CoordValue+0x1d4>)
 8004fd6:	e000      	b.n	8004fda <printFloat_CoordValue+0x3e>
 8004fd8:	461c      	mov	r4, r3
 8004fda:	fba5 3200 	umull	r3, r2, r5, r0
 8004fde:	08d2      	lsrs	r2, r2, #3
 8004fe0:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8004fe4:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
 8004fe8:	a904      	add	r1, sp, #16
 8004fea:	3030      	adds	r0, #48	; 0x30
 8004fec:	1c63      	adds	r3, r4, #1
 8004fee:	4421      	add	r1, r4
 8004ff0:	f801 0c10 	strb.w	r0, [r1, #-16]
 8004ff4:	b2db      	uxtb	r3, r3
  while(a > 0) {
 8004ff6:	4610      	mov	r0, r2
 8004ff8:	2a00      	cmp	r2, #0
 8004ffa:	d1ed      	bne.n	8004fd8 <printFloat_CoordValue+0x3c>
  while (i < decimal_places) {
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	f200 80aa 	bhi.w	8005156 <printFloat_CoordValue+0x1ba>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8005002:	2130      	movs	r1, #48	; 0x30
 8005004:	1ca2      	adds	r2, r4, #2
 8005006:	a804      	add	r0, sp, #16
 8005008:	b2d2      	uxtb	r2, r2
 800500a:	4403      	add	r3, r0
  while (i < decimal_places) {
 800500c:	2a03      	cmp	r2, #3
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 800500e:	f803 1c10 	strb.w	r1, [r3, #-16]
  while (i < decimal_places) {
 8005012:	d007      	beq.n	8005024 <printFloat_CoordValue+0x88>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8005014:	4402      	add	r2, r0
  while (i < decimal_places) {
 8005016:	2cff      	cmp	r4, #255	; 0xff
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8005018:	f802 1c10 	strb.w	r1, [r2, #-16]
  while (i < decimal_places) {
 800501c:	d102      	bne.n	8005024 <printFloat_CoordValue+0x88>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 800501e:	2330      	movs	r3, #48	; 0x30
 8005020:	f88d 3002 	strb.w	r3, [sp, #2]
    buf[i++] = '0';
 8005024:	2530      	movs	r5, #48	; 0x30
 8005026:	2304      	movs	r3, #4
 8005028:	f88d 5003 	strb.w	r5, [sp, #3]
 800502c:	e00a      	b.n	8005044 <printFloat_CoordValue+0xa8>
    if (i == decimal_places) { serial_write('.'); } // Insert decimal point in right place.
 800502e:	202e      	movs	r0, #46	; 0x2e
 8005030:	f002 fb26 	bl	8007680 <serial_write>
    serial_write(buf[i-1]);
 8005034:	4628      	mov	r0, r5
 8005036:	f002 fb23 	bl	8007680 <serial_write>
 800503a:	aa04      	add	r2, sp, #16
    buf[i++] = '0';
 800503c:	4623      	mov	r3, r4
 800503e:	4414      	add	r4, r2
 8005040:	f814 5c11 	ldrb.w	r5, [r4, #-17]
 8005044:	1e5c      	subs	r4, r3, #1
    if (i == decimal_places) { serial_write('.'); } // Insert decimal point in right place.
 8005046:	2b03      	cmp	r3, #3
 8005048:	b2e4      	uxtb	r4, r4
 800504a:	d0f0      	beq.n	800502e <printFloat_CoordValue+0x92>
    serial_write(buf[i-1]);
 800504c:	4628      	mov	r0, r5
 800504e:	f002 fb17 	bl	8007680 <serial_write>
  for (; i > 0; i--) {
 8005052:	2c00      	cmp	r4, #0
 8005054:	d1f1      	bne.n	800503a <printFloat_CoordValue+0x9e>
    printFloat(n*INCH_PER_MM,N_DECIMAL_COORDVALUE_INCH);
  } else {
    printFloat(n,N_DECIMAL_COORDVALUE_MM);
  }
}
 8005056:	b005      	add	sp, #20
 8005058:	bd30      	pop	{r4, r5, pc}
    printFloat(n*INCH_PER_MM,N_DECIMAL_COORDVALUE_INCH);
 800505a:	4946      	ldr	r1, [pc, #280]	; (8005174 <printFloat_CoordValue+0x1d8>)
 800505c:	f7fb fe2c 	bl	8000cb8 <__aeabi_fmul>
  if (n < 0) {
 8005060:	2100      	movs	r1, #0
    printFloat(n*INCH_PER_MM,N_DECIMAL_COORDVALUE_INCH);
 8005062:	4604      	mov	r4, r0
  if (n < 0) {
 8005064:	f7fb ffc6 	bl	8000ff4 <__aeabi_fcmplt>
 8005068:	2800      	cmp	r0, #0
 800506a:	d161      	bne.n	8005130 <printFloat_CoordValue+0x194>
    n *= 100;
 800506c:	4942      	ldr	r1, [pc, #264]	; (8005178 <printFloat_CoordValue+0x1dc>)
 800506e:	4620      	mov	r0, r4
 8005070:	f7fb fe22 	bl	8000cb8 <__aeabi_fmul>
  n += 0.5; // Add rounding factor. Ensures carryover through entire value.
 8005074:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8005078:	f7fb fd16 	bl	8000aa8 <__addsf3>
  uint32_t a = (long)n;
 800507c:	f7fb fff8 	bl	8001070 <__aeabi_f2iz>
  while(a > 0) {
 8005080:	2800      	cmp	r0, #0
 8005082:	d05b      	beq.n	800513c <printFloat_CoordValue+0x1a0>
  uint8_t i = 0;
 8005084:	2400      	movs	r4, #0
    buf[i++] = (a % 10) + '0'; // Get digit
 8005086:	4d3a      	ldr	r5, [pc, #232]	; (8005170 <printFloat_CoordValue+0x1d4>)
 8005088:	e000      	b.n	800508c <printFloat_CoordValue+0xf0>
 800508a:	461c      	mov	r4, r3
 800508c:	fba5 3200 	umull	r3, r2, r5, r0
 8005090:	08d2      	lsrs	r2, r2, #3
 8005092:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8005096:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
 800509a:	a904      	add	r1, sp, #16
 800509c:	3030      	adds	r0, #48	; 0x30
 800509e:	1c63      	adds	r3, r4, #1
 80050a0:	4421      	add	r1, r4
 80050a2:	f801 0c10 	strb.w	r0, [r1, #-16]
 80050a6:	b2db      	uxtb	r3, r3
  while(a > 0) {
 80050a8:	4610      	mov	r0, r2
 80050aa:	2a00      	cmp	r2, #0
 80050ac:	d1ed      	bne.n	800508a <printFloat_CoordValue+0xee>
  while (i < decimal_places) {
 80050ae:	2b03      	cmp	r3, #3
 80050b0:	d84a      	bhi.n	8005148 <printFloat_CoordValue+0x1ac>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 80050b2:	2130      	movs	r1, #48	; 0x30
 80050b4:	1ca2      	adds	r2, r4, #2
 80050b6:	a804      	add	r0, sp, #16
 80050b8:	b2d2      	uxtb	r2, r2
 80050ba:	4403      	add	r3, r0
  while (i < decimal_places) {
 80050bc:	2a04      	cmp	r2, #4
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 80050be:	f803 1c10 	strb.w	r1, [r3, #-16]
  while (i < decimal_places) {
 80050c2:	d00f      	beq.n	80050e4 <printFloat_CoordValue+0x148>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 80050c4:	3403      	adds	r4, #3
 80050c6:	b2e4      	uxtb	r4, r4
 80050c8:	4402      	add	r2, r0
  while (i < decimal_places) {
 80050ca:	2c04      	cmp	r4, #4
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 80050cc:	f802 1c10 	strb.w	r1, [r2, #-16]
  while (i < decimal_places) {
 80050d0:	d008      	beq.n	80050e4 <printFloat_CoordValue+0x148>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 80050d2:	2330      	movs	r3, #48	; 0x30
 80050d4:	aa04      	add	r2, sp, #16
 80050d6:	4422      	add	r2, r4
  while (i < decimal_places) {
 80050d8:	2c02      	cmp	r4, #2
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 80050da:	f802 3c10 	strb.w	r3, [r2, #-16]
  while (i < decimal_places) {
 80050de:	d101      	bne.n	80050e4 <printFloat_CoordValue+0x148>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 80050e0:	f88d 3003 	strb.w	r3, [sp, #3]
    buf[i++] = '0';
 80050e4:	2530      	movs	r5, #48	; 0x30
 80050e6:	2305      	movs	r3, #5
 80050e8:	f88d 5004 	strb.w	r5, [sp, #4]
 80050ec:	e00a      	b.n	8005104 <printFloat_CoordValue+0x168>
    if (i == decimal_places) { serial_write('.'); } // Insert decimal point in right place.
 80050ee:	202e      	movs	r0, #46	; 0x2e
 80050f0:	f002 fac6 	bl	8007680 <serial_write>
    serial_write(buf[i-1]);
 80050f4:	4628      	mov	r0, r5
 80050f6:	f002 fac3 	bl	8007680 <serial_write>
 80050fa:	aa04      	add	r2, sp, #16
    buf[i++] = '0';
 80050fc:	4623      	mov	r3, r4
 80050fe:	4414      	add	r4, r2
 8005100:	f814 5c11 	ldrb.w	r5, [r4, #-17]
 8005104:	1e5c      	subs	r4, r3, #1
    if (i == decimal_places) { serial_write('.'); } // Insert decimal point in right place.
 8005106:	2b04      	cmp	r3, #4
 8005108:	b2e4      	uxtb	r4, r4
 800510a:	d0f0      	beq.n	80050ee <printFloat_CoordValue+0x152>
    serial_write(buf[i-1]);
 800510c:	4628      	mov	r0, r5
 800510e:	f002 fab7 	bl	8007680 <serial_write>
  for (; i > 0; i--) {
 8005112:	2c00      	cmp	r4, #0
 8005114:	d1f1      	bne.n	80050fa <printFloat_CoordValue+0x15e>
}
 8005116:	b005      	add	sp, #20
 8005118:	bd30      	pop	{r4, r5, pc}
    serial_write('-');
 800511a:	202d      	movs	r0, #45	; 0x2d
 800511c:	f002 fab0 	bl	8007680 <serial_write>
    n = -n;
 8005120:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
 8005124:	e748      	b.n	8004fb8 <printFloat_CoordValue+0x1c>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8005126:	f243 0330 	movw	r3, #12336	; 0x3030
 800512a:	f8ad 3000 	strh.w	r3, [sp]
 800512e:	e776      	b.n	800501e <printFloat_CoordValue+0x82>
    serial_write('-');
 8005130:	202d      	movs	r0, #45	; 0x2d
 8005132:	f002 faa5 	bl	8007680 <serial_write>
    n = -n;
 8005136:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
 800513a:	e797      	b.n	800506c <printFloat_CoordValue+0xd0>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 800513c:	f243 0330 	movw	r3, #12336	; 0x3030
 8005140:	2402      	movs	r4, #2
 8005142:	f8ad 3000 	strh.w	r3, [sp]
 8005146:	e7c4      	b.n	80050d2 <printFloat_CoordValue+0x136>
  if (i == decimal_places) { // Fill in leading zero, if needed.
 8005148:	2b04      	cmp	r3, #4
 800514a:	d0cb      	beq.n	80050e4 <printFloat_CoordValue+0x148>
 800514c:	aa04      	add	r2, sp, #16
 800514e:	441a      	add	r2, r3
 8005150:	f812 5c11 	ldrb.w	r5, [r2, #-17]
 8005154:	e7d6      	b.n	8005104 <printFloat_CoordValue+0x168>
 8005156:	2b03      	cmp	r3, #3
 8005158:	f43f af64 	beq.w	8005024 <printFloat_CoordValue+0x88>
 800515c:	aa04      	add	r2, sp, #16
 800515e:	441a      	add	r2, r3
 8005160:	f812 5c11 	ldrb.w	r5, [r2, #-17]
 8005164:	e76e      	b.n	8005044 <printFloat_CoordValue+0xa8>
 8005166:	bf00      	nop
 8005168:	20001744 	.word	0x20001744
 800516c:	447a0000 	.word	0x447a0000
 8005170:	cccccccd 	.word	0xcccccccd
 8005174:	3d21428b 	.word	0x3d21428b
 8005178:	461c4000 	.word	0x461c4000

0800517c <printFloat_RateValue>:

void printFloat_RateValue(float n) {
 800517c:	b570      	push	{r4, r5, r6, lr}
  if (bit_istrue(settings.flags,BITFLAG_REPORT_INCHES)) {
 800517e:	4b4c      	ldr	r3, [pc, #304]	; (80052b0 <printFloat_RateValue+0x134>)
void printFloat_RateValue(float n) {
 8005180:	b084      	sub	sp, #16
  if (bit_istrue(settings.flags,BITFLAG_REPORT_INCHES)) {
 8005182:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005186:	07db      	lsls	r3, r3, #31
 8005188:	d433      	bmi.n	80051f2 <printFloat_RateValue+0x76>
  if (n < 0) {
 800518a:	2100      	movs	r1, #0
 800518c:	4604      	mov	r4, r0
 800518e:	f7fb ff31 	bl	8000ff4 <__aeabi_fcmplt>
 8005192:	2800      	cmp	r0, #0
 8005194:	d174      	bne.n	8005280 <printFloat_RateValue+0x104>
  n += 0.5; // Add rounding factor. Ensures carryover through entire value.
 8005196:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800519a:	4620      	mov	r0, r4
 800519c:	f7fb fc84 	bl	8000aa8 <__addsf3>
  uint32_t a = (long)n;
 80051a0:	f7fb ff66 	bl	8001070 <__aeabi_f2iz>
  while(a > 0) {
 80051a4:	2800      	cmp	r0, #0
 80051a6:	d071      	beq.n	800528c <printFloat_RateValue+0x110>
  uint8_t i = 0;
 80051a8:	2400      	movs	r4, #0
    buf[i++] = (a % 10) + '0'; // Get digit
 80051aa:	4d42      	ldr	r5, [pc, #264]	; (80052b4 <printFloat_RateValue+0x138>)
 80051ac:	e000      	b.n	80051b0 <printFloat_RateValue+0x34>
 80051ae:	461c      	mov	r4, r3
 80051b0:	fba5 3200 	umull	r3, r2, r5, r0
 80051b4:	08d2      	lsrs	r2, r2, #3
 80051b6:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 80051ba:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
 80051be:	a904      	add	r1, sp, #16
 80051c0:	3030      	adds	r0, #48	; 0x30
 80051c2:	1c63      	adds	r3, r4, #1
 80051c4:	4421      	add	r1, r4
 80051c6:	f801 0c10 	strb.w	r0, [r1, #-16]
 80051ca:	b2db      	uxtb	r3, r3
  while(a > 0) {
 80051cc:	4610      	mov	r0, r2
 80051ce:	2a00      	cmp	r2, #0
 80051d0:	d1ed      	bne.n	80051ae <printFloat_RateValue+0x32>
  if (i == decimal_places) { // Fill in leading zero, if needed.
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d05a      	beq.n	800528c <printFloat_RateValue+0x110>
 80051d6:	f10d 32ff 	add.w	r2, sp, #4294967295
 80051da:	18d5      	adds	r5, r2, r3
 80051dc:	1b2d      	subs	r5, r5, r4
 80051de:	eb0d 0403 	add.w	r4, sp, r3
    serial_write(buf[i-1]);
 80051e2:	f814 0d01 	ldrb.w	r0, [r4, #-1]!
 80051e6:	f002 fa4b 	bl	8007680 <serial_write>
  for (; i > 0; i--) {
 80051ea:	42a5      	cmp	r5, r4
 80051ec:	d1f9      	bne.n	80051e2 <printFloat_RateValue+0x66>
    printFloat(n*INCH_PER_MM,N_DECIMAL_RATEVALUE_INCH);
  } else {
    printFloat(n,N_DECIMAL_RATEVALUE_MM);
  }
}
 80051ee:	b004      	add	sp, #16
 80051f0:	bd70      	pop	{r4, r5, r6, pc}
    printFloat(n*INCH_PER_MM,N_DECIMAL_RATEVALUE_INCH);
 80051f2:	4931      	ldr	r1, [pc, #196]	; (80052b8 <printFloat_RateValue+0x13c>)
 80051f4:	f7fb fd60 	bl	8000cb8 <__aeabi_fmul>
  if (n < 0) {
 80051f8:	2100      	movs	r1, #0
    printFloat(n*INCH_PER_MM,N_DECIMAL_RATEVALUE_INCH);
 80051fa:	4604      	mov	r4, r0
  if (n < 0) {
 80051fc:	f7fb fefa 	bl	8000ff4 <__aeabi_fcmplt>
 8005200:	2800      	cmp	r0, #0
 8005202:	d149      	bne.n	8005298 <printFloat_RateValue+0x11c>
  if (decimals) { n *= 10; }
 8005204:	492d      	ldr	r1, [pc, #180]	; (80052bc <printFloat_RateValue+0x140>)
 8005206:	4620      	mov	r0, r4
 8005208:	f7fb fd56 	bl	8000cb8 <__aeabi_fmul>
  n += 0.5; // Add rounding factor. Ensures carryover through entire value.
 800520c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8005210:	f7fb fc4a 	bl	8000aa8 <__addsf3>
  uint32_t a = (long)n;
 8005214:	f7fb ff2c 	bl	8001070 <__aeabi_f2iz>
  while(a > 0) {
 8005218:	b1a0      	cbz	r0, 8005244 <printFloat_RateValue+0xc8>
  uint8_t i = 0;
 800521a:	2100      	movs	r1, #0
    buf[i++] = (a % 10) + '0'; // Get digit
 800521c:	4c25      	ldr	r4, [pc, #148]	; (80052b4 <printFloat_RateValue+0x138>)
 800521e:	fba4 3200 	umull	r3, r2, r4, r0
 8005222:	08d2      	lsrs	r2, r2, #3
 8005224:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8005228:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
 800522c:	ad04      	add	r5, sp, #16
 800522e:	1c4b      	adds	r3, r1, #1
 8005230:	3030      	adds	r0, #48	; 0x30
 8005232:	4429      	add	r1, r5
 8005234:	b2db      	uxtb	r3, r3
 8005236:	f801 0c10 	strb.w	r0, [r1, #-16]
 800523a:	4619      	mov	r1, r3
  while(a > 0) {
 800523c:	4610      	mov	r0, r2
 800523e:	2a00      	cmp	r2, #0
 8005240:	d1ed      	bne.n	800521e <printFloat_RateValue+0xa2>
  while (i < decimal_places) {
 8005242:	bb7b      	cbnz	r3, 80052a4 <printFloat_RateValue+0x128>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8005244:	2330      	movs	r3, #48	; 0x30
 8005246:	f88d 3000 	strb.w	r3, [sp]
    buf[i++] = '0';
 800524a:	2230      	movs	r2, #48	; 0x30
 800524c:	2302      	movs	r3, #2
 800524e:	4616      	mov	r6, r2
 8005250:	f88d 2001 	strb.w	r2, [sp, #1]
 8005254:	1e5c      	subs	r4, r3, #1
 8005256:	b2e5      	uxtb	r5, r4
 8005258:	446d      	add	r5, sp
 800525a:	e000      	b.n	800525e <printFloat_RateValue+0xe2>
 800525c:	1e5c      	subs	r4, r3, #1
    serial_write(buf[i-1]);
 800525e:	4630      	mov	r0, r6
 8005260:	f002 fa0e 	bl	8007680 <serial_write>
  for (; i > 0; i--) {
 8005264:	b2e3      	uxtb	r3, r4
    if (i == decimal_places) { serial_write('.'); } // Insert decimal point in right place.
 8005266:	2b01      	cmp	r3, #1
 8005268:	f815 6d01 	ldrb.w	r6, [r5, #-1]!
 800526c:	d1f6      	bne.n	800525c <printFloat_RateValue+0xe0>
 800526e:	202e      	movs	r0, #46	; 0x2e
 8005270:	f002 fa06 	bl	8007680 <serial_write>
    serial_write(buf[i-1]);
 8005274:	4630      	mov	r0, r6
}
 8005276:	b004      	add	sp, #16
 8005278:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    serial_write(buf[i-1]);
 800527c:	f002 ba00 	b.w	8007680 <serial_write>
    serial_write('-');
 8005280:	202d      	movs	r0, #45	; 0x2d
 8005282:	f002 f9fd 	bl	8007680 <serial_write>
    n = -n;
 8005286:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
 800528a:	e784      	b.n	8005196 <printFloat_RateValue+0x1a>
    serial_write(buf[i-1]);
 800528c:	2030      	movs	r0, #48	; 0x30
}
 800528e:	b004      	add	sp, #16
 8005290:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    serial_write(buf[i-1]);
 8005294:	f002 b9f4 	b.w	8007680 <serial_write>
    serial_write('-');
 8005298:	202d      	movs	r0, #45	; 0x2d
 800529a:	f002 f9f1 	bl	8007680 <serial_write>
    n = -n;
 800529e:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
 80052a2:	e7af      	b.n	8005204 <printFloat_RateValue+0x88>
  if (i == decimal_places) { // Fill in leading zero, if needed.
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d0d0      	beq.n	800524a <printFloat_RateValue+0xce>
 80052a8:	4429      	add	r1, r5
 80052aa:	f811 6c11 	ldrb.w	r6, [r1, #-17]
 80052ae:	e7d1      	b.n	8005254 <printFloat_RateValue+0xd8>
 80052b0:	20001744 	.word	0x20001744
 80052b4:	cccccccd 	.word	0xcccccccd
 80052b8:	3d21428b 	.word	0x3d21428b
 80052bc:	41200000 	.word	0x41200000

080052c0 <probe_init>:
uint16_t probe_invert_mask;


// Probe pin initialization routine.
void probe_init()
{
 80052c0:	b510      	push	{r4, lr}
    PROBE_PORT |= PROBE_MASK;    // Enable internal pull-up resistors. Normal high operation.
  #endif
#endif
#ifdef STM32F103C8
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_APB2PeriphClockCmd(RCC_PROBE_PORT, ENABLE);
 80052c2:	2101      	movs	r1, #1
{
 80052c4:	b082      	sub	sp, #8
#ifdef DISABLE_PROBE_PIN_PULL_UP
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
#else
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
#endif
	GPIO_InitStructure.GPIO_Pin = PROBE_MASK;
 80052c6:	f44f 7400 	mov.w	r4, #512	; 0x200
	RCC_APB2PeriphClockCmd(RCC_PROBE_PORT, ENABLE);
 80052ca:	2008      	movs	r0, #8
 80052cc:	f7fc fab4 	bl	8001838 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80052d0:	2203      	movs	r2, #3
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 80052d2:	2348      	movs	r3, #72	; 0x48
	GPIO_InitStructure.GPIO_Pin = PROBE_MASK;
 80052d4:	a902      	add	r1, sp, #8
 80052d6:	f821 4d04 	strh.w	r4, [r1, #-4]!
	GPIO_Init(PROBE_PORT, &GPIO_InitStructure);
 80052da:	4809      	ldr	r0, [pc, #36]	; (8005300 <probe_init+0x40>)
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80052dc:	f88d 2006 	strb.w	r2, [sp, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 80052e0:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_Init(PROBE_PORT, &GPIO_InitStructure);
 80052e4:	f7fc f86a 	bl	80013bc <GPIO_Init>
// Called by probe_init() and the mc_probe() routines. Sets up the probe pin invert mask to
// appropriately set the pin logic according to setting for normal-high/normal-low operation
// and the probing cycle modes for toward-workpiece/away-from-workpiece.
void probe_configure_invert_mask(uint8_t is_probe_away)
{
  probe_invert_mask = 0; // Initialize as zero.
 80052e8:	2100      	movs	r1, #0
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_PROBE_PIN)) { probe_invert_mask ^= PROBE_MASK; }
 80052ea:	4a06      	ldr	r2, [pc, #24]	; (8005304 <probe_init+0x44>)
  probe_invert_mask = 0; // Initialize as zero.
 80052ec:	4b06      	ldr	r3, [pc, #24]	; (8005308 <probe_init+0x48>)
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_PROBE_PIN)) { probe_invert_mask ^= PROBE_MASK; }
 80052ee:	f992 2058 	ldrsb.w	r2, [r2, #88]	; 0x58
  probe_invert_mask = 0; // Initialize as zero.
 80052f2:	8019      	strh	r1, [r3, #0]
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_PROBE_PIN)) { probe_invert_mask ^= PROBE_MASK; }
 80052f4:	428a      	cmp	r2, r1
 80052f6:	bfa8      	it	ge
 80052f8:	801c      	strhge	r4, [r3, #0]
}
 80052fa:	b002      	add	sp, #8
 80052fc:	bd10      	pop	{r4, pc}
 80052fe:	bf00      	nop
 8005300:	40010c00 	.word	0x40010c00
 8005304:	20001744 	.word	0x20001744
 8005308:	20001442 	.word	0x20001442

0800530c <probe_configure_invert_mask>:
  probe_invert_mask = 0; // Initialize as zero.
 800530c:	2300      	movs	r3, #0
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_PROBE_PIN)) { probe_invert_mask ^= PROBE_MASK; }
 800530e:	4907      	ldr	r1, [pc, #28]	; (800532c <probe_configure_invert_mask+0x20>)
  probe_invert_mask = 0; // Initialize as zero.
 8005310:	4a07      	ldr	r2, [pc, #28]	; (8005330 <probe_configure_invert_mask+0x24>)
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_PROBE_PIN)) { probe_invert_mask ^= PROBE_MASK; }
 8005312:	f991 1058 	ldrsb.w	r1, [r1, #88]	; 0x58
  probe_invert_mask = 0; // Initialize as zero.
 8005316:	8013      	strh	r3, [r2, #0]
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_PROBE_PIN)) { probe_invert_mask ^= PROBE_MASK; }
 8005318:	4299      	cmp	r1, r3
 800531a:	bfaa      	itet	ge
 800531c:	f44f 7100 	movge.w	r1, #512	; 0x200
 8005320:	f44f 7300 	movlt.w	r3, #512	; 0x200
 8005324:	8011      	strhge	r1, [r2, #0]
  if (is_probe_away) { probe_invert_mask ^= PROBE_MASK; }
 8005326:	b100      	cbz	r0, 800532a <probe_configure_invert_mask+0x1e>
 8005328:	8013      	strh	r3, [r2, #0]
}
 800532a:	4770      	bx	lr
 800532c:	20001744 	.word	0x20001744
 8005330:	20001442 	.word	0x20001442

08005334 <probe_get_state>:


// Returns the probe pin state. Triggered = true. Called by gcode parser and probe state monitor.
uint8_t probe_get_state() 
{ 
 8005334:	b508      	push	{r3, lr}
#endif
#ifdef WIN32
	return 0;
#endif
#ifdef STM32F103C8
	return ((GPIO_ReadInputData(PROBE_PORT) & PROBE_MASK) ^ probe_invert_mask) != 0;
 8005336:	4805      	ldr	r0, [pc, #20]	; (800534c <probe_get_state+0x18>)
 8005338:	f7fc f9c6 	bl	80016c8 <GPIO_ReadInputData>
 800533c:	4b04      	ldr	r3, [pc, #16]	; (8005350 <probe_get_state+0x1c>)
 800533e:	f400 7000 	and.w	r0, r0, #512	; 0x200
 8005342:	881b      	ldrh	r3, [r3, #0]
#endif
}
 8005344:	1a18      	subs	r0, r3, r0
 8005346:	bf18      	it	ne
 8005348:	2001      	movne	r0, #1
 800534a:	bd08      	pop	{r3, pc}
 800534c:	40010c00 	.word	0x40010c00
 8005350:	20001442 	.word	0x20001442

08005354 <probe_state_monitor>:

// Monitors probe pin state and records the system position when detected. Called by the
// stepper ISR per ISR tick.
// NOTE: This function must be extremely efficient as to not bog down the stepper ISR.
void probe_state_monitor()
{
 8005354:	b538      	push	{r3, r4, r5, lr}
	return ((GPIO_ReadInputData(PROBE_PORT) & PROBE_MASK) ^ probe_invert_mask) != 0;
 8005356:	480b      	ldr	r0, [pc, #44]	; (8005384 <probe_state_monitor+0x30>)
 8005358:	f7fc f9b6 	bl	80016c8 <GPIO_ReadInputData>
 800535c:	4b0a      	ldr	r3, [pc, #40]	; (8005388 <probe_state_monitor+0x34>)
  if (probe_get_state()) {
 800535e:	f400 7000 	and.w	r0, r0, #512	; 0x200
 8005362:	881b      	ldrh	r3, [r3, #0]
 8005364:	4283      	cmp	r3, r0
 8005366:	d00c      	beq.n	8005382 <probe_state_monitor+0x2e>
    sys_probe_state = PROBE_OFF;
 8005368:	2100      	movs	r1, #0
 800536a:	4a08      	ldr	r2, [pc, #32]	; (800538c <probe_state_monitor+0x38>)
    memcpy(sys_probe_position, sys_position, sizeof(sys_position));
    bit_true(sys_rt_exec_state, EXEC_MOTION_CANCEL);
 800536c:	4d08      	ldr	r5, [pc, #32]	; (8005390 <probe_state_monitor+0x3c>)
    memcpy(sys_probe_position, sys_position, sizeof(sys_position));
 800536e:	4b09      	ldr	r3, [pc, #36]	; (8005394 <probe_state_monitor+0x40>)
 8005370:	4c09      	ldr	r4, [pc, #36]	; (8005398 <probe_state_monitor+0x44>)
    sys_probe_state = PROBE_OFF;
 8005372:	7011      	strb	r1, [r2, #0]
    memcpy(sys_probe_position, sys_position, sizeof(sys_position));
 8005374:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005376:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    bit_true(sys_rt_exec_state, EXEC_MOTION_CANCEL);
 800537a:	782b      	ldrb	r3, [r5, #0]
 800537c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005380:	702b      	strb	r3, [r5, #0]
  }
}
 8005382:	bd38      	pop	{r3, r4, r5, pc}
 8005384:	40010c00 	.word	0x40010c00
 8005388:	20001442 	.word	0x20001442
 800538c:	2000141e 	.word	0x2000141e
 8005390:	2000141d 	.word	0x2000141d
 8005394:	20001430 	.word	0x20001430
 8005398:	20001420 	.word	0x20001420

0800539c <protocol_auto_cycle_start>:
// NOTE: This function is called from the main loop, buffer sync, and mc_line() only and executes
// when one of these conditions exist respectively: There are no more blocks sent (i.e. streaming
// is finished, single commands), a command that needs to wait for the motions in the buffer to
// execute calls a buffer sync, or the planner buffer is full and ready to go.
void protocol_auto_cycle_start()
{
 800539c:	b508      	push	{r3, lr}
  if (plan_get_current_block() != NULL) { // Check if there are any blocks in the buffer.
 800539e:	f7ff f949 	bl	8004634 <plan_get_current_block>
 80053a2:	b120      	cbz	r0, 80053ae <protocol_auto_cycle_start+0x12>
    system_set_exec_state_flag(EXEC_CYCLE_START); // If so, execute them!
  }
}
 80053a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    system_set_exec_state_flag(EXEC_CYCLE_START); // If so, execute them!
 80053a8:	2002      	movs	r0, #2
 80053aa:	f004 bcd9 	b.w	8009d60 <system_set_exec_state_flag>
}
 80053ae:	bd08      	pop	{r3, pc}

080053b0 <protocol_exec_rt_system>:

// Executes run-time commands, when required. This function primarily operates as Grbl's state
// machine and controls the various real-time features Grbl has to offer.
// NOTE: Do not alter this unless you know exactly what you are doing!
void protocol_exec_rt_system()
{
 80053b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t rt_exec; // Temp variable to avoid calling volatile multiple times.
  rt_exec = sys_rt_exec_alarm; // Copy volatile sys_rt_exec_alarm.
 80053b2:	4bae      	ldr	r3, [pc, #696]	; (800566c <protocol_exec_rt_system+0x2bc>)
 80053b4:	781b      	ldrb	r3, [r3, #0]
  if (rt_exec) { // Enter only if any bit flag is true
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	f040 80b2 	bne.w	8005520 <protocol_exec_rt_system+0x170>
 80053bc:	4cac      	ldr	r4, [pc, #688]	; (8005670 <protocol_exec_rt_system+0x2c0>)
 80053be:	4dad      	ldr	r5, [pc, #692]	; (8005674 <protocol_exec_rt_system+0x2c4>)
      } while (bit_isfalse(sys_rt_exec_state,EXEC_RESET));
    }
    system_clear_exec_alarm(); // Clear alarm
  }

  rt_exec = sys_rt_exec_state; // Copy volatile sys_rt_exec_state.
 80053c0:	782b      	ldrb	r3, [r5, #0]
  if (rt_exec) {
 80053c2:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d05b      	beq.n	8005482 <protocol_exec_rt_system+0xd2>

    // Execute system abort.
    if (rt_exec & EXEC_RESET) {
 80053ca:	06e8      	lsls	r0, r5, #27
 80053cc:	f100 80a5 	bmi.w	800551a <protocol_exec_rt_system+0x16a>
      sys.abort = true;  // Only place this is set true.
      return; // Nothing else to do but exit.
    }

    // Execute and serial print status
    if (rt_exec & EXEC_STATUS_REPORT) {
 80053d0:	07e9      	lsls	r1, r5, #31
 80053d2:	f100 8123 	bmi.w	800561c <protocol_exec_rt_system+0x26c>
      system_clear_exec_state_flag(EXEC_STATUS_REPORT);
    }

    // NOTE: Once hold is initiated, the system immediately enters a suspend state to block all
    // main program processes until either reset or resumed. This ensures a hold completes safely.
    if (rt_exec & (EXEC_MOTION_CANCEL | EXEC_FEED_HOLD | EXEC_SAFETY_DOOR | EXEC_SLEEP)) {
 80053d6:	f015 0fe8 	tst.w	r5, #232	; 0xe8
 80053da:	d033      	beq.n	8005444 <protocol_exec_rt_system+0x94>

      // State check for allowable states for hold methods.
      if (!(sys.state & (STATE_ALARM | STATE_CHECK_MODE))) {
 80053dc:	7823      	ldrb	r3, [r4, #0]
 80053de:	b26e      	sxtb	r6, r5
 80053e0:	079a      	lsls	r2, r3, #30
 80053e2:	d129      	bne.n	8005438 <protocol_exec_rt_system+0x88>
      
        // If in CYCLE or JOG states, immediately initiate a motion HOLD.
        if (sys.state & (STATE_CYCLE | STATE_JOG)) {
 80053e4:	f013 0f28 	tst.w	r3, #40	; 0x28
 80053e8:	f040 814c 	bne.w	8005684 <protocol_exec_rt_system+0x2d4>
 80053ec:	f005 0140 	and.w	r1, r5, #64	; 0x40
 80053f0:	f005 0208 	and.w	r2, r5, #8
              if (!(rt_exec & EXEC_SLEEP)) { sys.suspend |= SUSPEND_JOG_CANCEL; } 
            }
          }
        }
        // If IDLE, Grbl is not in motion. Simply indicate suspend state and hold is complete.
        if (sys.state == STATE_IDLE) { sys.suspend = SUSPEND_HOLD_COMPLETE; }
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	f040 814d 	bne.w	8005694 <protocol_exec_rt_system+0x2e4>
 80053fa:	2001      	movs	r0, #1
 80053fc:	70a0      	strb	r0, [r4, #2]

        // Execute and flag a motion cancel with deceleration and return to idle. Used primarily by probing cycle
        // to halt and cancel the remainder of the motion.
        if (rt_exec & EXEC_MOTION_CANCEL) {
 80053fe:	2900      	cmp	r1, #0
 8005400:	f000 816f 	beq.w	80056e2 <protocol_exec_rt_system+0x332>
 8005404:	2141      	movs	r1, #65	; 0x41
          // MOTION_CANCEL only occurs during a CYCLE, but a HOLD and SAFETY_DOOR may been initiated beforehand
          // to hold the CYCLE. Motion cancel is valid for a single planner block motion only, while jog cancel
          // will handle and clear multiple planner block motions.
          if (!(sys.state & STATE_JOG)) { sys.suspend |= SUSPEND_MOTION_CANCEL; } // NOTE: State is STATE_CYCLE.
 8005406:	70a1      	strb	r1, [r4, #2]
        }

        // Execute a feed hold with deceleration, if required. Then, suspend system.
        if (rt_exec & EXEC_FEED_HOLD) {
 8005408:	b11a      	cbz	r2, 8005412 <protocol_exec_rt_system+0x62>
          // Block SAFETY_DOOR, JOG, and SLEEP states from changing to HOLD state.
          if (!(sys.state & (STATE_SAFETY_DOOR | STATE_JOG | STATE_SLEEP))) { sys.state = STATE_HOLD; }
 800540a:	f013 0fe0 	tst.w	r3, #224	; 0xe0
 800540e:	f000 816b 	beq.w	80056e8 <protocol_exec_rt_system+0x338>
        }

        // Execute a safety door stop with a feed hold and disable spindle/coolant.
        // NOTE: Safety door differs from feed holds by stopping everything no matter state, disables powered
        // devices (spindle/coolant), and blocks resuming until switch is re-engaged.
        if (rt_exec & EXEC_SAFETY_DOOR) {
 8005412:	06a8      	lsls	r0, r5, #26
 8005414:	d510      	bpl.n	8005438 <protocol_exec_rt_system+0x88>
          report_feedback_message(MESSAGE_SAFETY_DOOR_AJAR);
 8005416:	2006      	movs	r0, #6
 8005418:	f001 f9c4 	bl	80067a4 <report_feedback_message>
          // If jogging, block safety door methods until jog cancel is complete. Just flag that it happened.
          if (!(sys.suspend & SUSPEND_JOG_CANCEL)) {
 800541c:	78a3      	ldrb	r3, [r4, #2]
 800541e:	0619      	lsls	r1, r3, #24
 8005420:	d407      	bmi.n	8005432 <protocol_exec_rt_system+0x82>
            // Check if the safety re-opened during a restore parking motion only. Ignore if
            // already retracting, parked or in sleep state.
            if (sys.state == STATE_SAFETY_DOOR) {
 8005422:	7822      	ldrb	r2, [r4, #0]
 8005424:	2a40      	cmp	r2, #64	; 0x40
 8005426:	f000 81a0 	beq.w	800576a <protocol_exec_rt_system+0x3ba>
                #endif
                sys.suspend &= ~(SUSPEND_RETRACT_COMPLETE | SUSPEND_INITIATE_RESTORE | SUSPEND_RESTORE_COMPLETE);
                sys.suspend |= SUSPEND_RESTART_RETRACT;
              }
            }
            if (sys.state != STATE_SLEEP) { sys.state = STATE_SAFETY_DOOR; }
 800542a:	2a80      	cmp	r2, #128	; 0x80
 800542c:	d001      	beq.n	8005432 <protocol_exec_rt_system+0x82>
 800542e:	2240      	movs	r2, #64	; 0x40
 8005430:	7022      	strb	r2, [r4, #0]
          }
          // NOTE: This flag doesn't change when the door closes, unlike sys.state. Ensures any parking motions
          // are executed if the door switch closes and the state returns to HOLD.
          sys.suspend |= SUSPEND_SAFETY_DOOR_AJAR;
 8005432:	f043 0320 	orr.w	r3, r3, #32
 8005436:	70a3      	strb	r3, [r4, #2]
        }
        
      }

      if (rt_exec & EXEC_SLEEP) {
 8005438:	2e00      	cmp	r6, #0
 800543a:	f2c0 813f 	blt.w	80056bc <protocol_exec_rt_system+0x30c>
        if (sys.state == STATE_ALARM) { sys.suspend |= (SUSPEND_RETRACT_COMPLETE|SUSPEND_HOLD_COMPLETE); }
        sys.state = STATE_SLEEP; 
      }

      system_clear_exec_state_flag((EXEC_MOTION_CANCEL | EXEC_FEED_HOLD | EXEC_SAFETY_DOOR | EXEC_SLEEP));
 800543e:	20e8      	movs	r0, #232	; 0xe8
 8005440:	f004 fc98 	bl	8009d74 <system_clear_exec_state_flag>
    }

    // Execute a cycle start by starting the stepper interrupt to begin executing the blocks in queue.
    if (rt_exec & EXEC_CYCLE_START) {
 8005444:	07ab      	lsls	r3, r5, #30
 8005446:	d519      	bpl.n	800547c <protocol_exec_rt_system+0xcc>
      // Block if called at same time as the hold commands: feed hold, motion cancel, and safety door.
      // Ensures auto-cycle-start doesn't resume a hold without an explicit user-input.
      if (!(rt_exec & (EXEC_FEED_HOLD | EXEC_MOTION_CANCEL | EXEC_SAFETY_DOOR))) {
 8005448:	f015 0f68 	tst.w	r5, #104	; 0x68
 800544c:	d113      	bne.n	8005476 <protocol_exec_rt_system+0xc6>
        // Resume door state when parking motion has retracted and door has been closed.
        if ((sys.state == STATE_SAFETY_DOOR) && !(sys.suspend & SUSPEND_SAFETY_DOOR_AJAR)) {
 800544e:	7823      	ldrb	r3, [r4, #0]
 8005450:	2b40      	cmp	r3, #64	; 0x40
 8005452:	f000 812a 	beq.w	80056aa <protocol_exec_rt_system+0x2fa>
            // they are complete, it will call CYCLE_START automatically to resume and exit the suspend.
            sys.suspend |= SUSPEND_INITIATE_RESTORE;
          }
        }
        // Cycle start only when IDLE or when a hold is complete and ready to resume.
        if ((sys.state == STATE_IDLE) || ((sys.state & STATE_HOLD) && (sys.suspend & SUSPEND_HOLD_COMPLETE))) {
 8005456:	2b00      	cmp	r3, #0
 8005458:	f040 8149 	bne.w	80056ee <protocol_exec_rt_system+0x33e>
          if (sys.state == STATE_HOLD && sys.spindle_stop_ovr) {
            sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE_CYCLE; // Set to restore in suspend routine and cycle start after.
          } else {
            // Start cycle only if queued motions exist in planner buffer and the motion is not canceled.
            sys.step_control = STEP_CONTROL_NORMAL_OP; // Restore step control to normal operation
 800545c:	2300      	movs	r3, #0
 800545e:	7123      	strb	r3, [r4, #4]
            if (plan_get_current_block() && bit_isfalse(sys.suspend,SUSPEND_MOTION_CANCEL)) {
 8005460:	f7ff f8e8 	bl	8004634 <plan_get_current_block>
 8005464:	b120      	cbz	r0, 8005470 <protocol_exec_rt_system+0xc0>
 8005466:	78a3      	ldrb	r3, [r4, #2]
 8005468:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 800546c:	f000 816e 	beq.w	800574c <protocol_exec_rt_system+0x39c>
              sys.suspend = SUSPEND_DISABLE; // Break suspend state.
              sys.state = STATE_CYCLE;
              st_prep_buffer(); // Initialize step segment buffer before beginning cycle.
              st_wake_up();
            } else { // Otherwise, do nothing. Set and resume IDLE state.
              sys.suspend = SUSPEND_DISABLE; // Break suspend state.
 8005470:	2300      	movs	r3, #0
 8005472:	70a3      	strb	r3, [r4, #2]
              sys.state = STATE_IDLE;
 8005474:	7023      	strb	r3, [r4, #0]
            }
          }
        }
      }
      system_clear_exec_state_flag(EXEC_CYCLE_START);
 8005476:	2002      	movs	r0, #2
 8005478:	f004 fc7c 	bl	8009d74 <system_clear_exec_state_flag>
    }

    if (rt_exec & EXEC_CYCLE_STOP) {
 800547c:	0769      	lsls	r1, r5, #29
 800547e:	f100 80b5 	bmi.w	80055ec <protocol_exec_rt_system+0x23c>
      system_clear_exec_state_flag(EXEC_CYCLE_STOP);
    }
  }

  // Execute overrides.
  rt_exec = sys_rt_exec_motion_override; // Copy volatile sys_rt_exec_motion_override
 8005482:	4b7d      	ldr	r3, [pc, #500]	; (8005678 <protocol_exec_rt_system+0x2c8>)
 8005484:	781b      	ldrb	r3, [r3, #0]
  if (rt_exec) {
 8005486:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 800548a:	2b00      	cmp	r3, #0
 800548c:	d173      	bne.n	8005576 <protocol_exec_rt_system+0x1c6>
      plan_update_velocity_profile_parameters();
      plan_cycle_reinitialize();
    }
  }

  rt_exec = sys_rt_exec_accessory_override;
 800548e:	4b7b      	ldr	r3, [pc, #492]	; (800567c <protocol_exec_rt_system+0x2cc>)
 8005490:	781b      	ldrb	r3, [r3, #0]
  if (rt_exec) {
 8005492:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8005496:	b923      	cbnz	r3, 80054a2 <protocol_exec_rt_system+0xf2>
 8005498:	7823      	ldrb	r3, [r4, #0]
      sys_rt_exec_debug = 0;
    }
  #endif

  // Reload step segment buffer
  if (sys.state & (STATE_CYCLE | STATE_HOLD | STATE_SAFETY_DOOR | STATE_HOMING | STATE_SLEEP| STATE_JOG)) {
 800549a:	f013 0ffc 	tst.w	r3, #252	; 0xfc
 800549e:	d138      	bne.n	8005512 <protocol_exec_rt_system+0x162>
    st_prep_buffer();
  }

}
 80054a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    system_clear_exec_accessory_overrides(); // Clear all accessory override flags.
 80054a2:	f004 fc9d 	bl	8009de0 <system_clear_exec_accessory_overrides>
    uint8_t last_s_override =  sys.spindle_speed_ovr;
 80054a6:	7aa2      	ldrb	r2, [r4, #10]
 80054a8:	f015 0f01 	tst.w	r5, #1
 80054ac:	bf0c      	ite	eq
 80054ae:	4613      	moveq	r3, r2
 80054b0:	2364      	movne	r3, #100	; 0x64
    if (rt_exec & EXEC_SPINDLE_OVR_COARSE_PLUS) { last_s_override += SPINDLE_OVERRIDE_COARSE_INCREMENT; }
 80054b2:	07ae      	lsls	r6, r5, #30
 80054b4:	bf44      	itt	mi
 80054b6:	330a      	addmi	r3, #10
 80054b8:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_COARSE_MINUS) { last_s_override -= SPINDLE_OVERRIDE_COARSE_INCREMENT; }
 80054ba:	0768      	lsls	r0, r5, #29
 80054bc:	bf44      	itt	mi
 80054be:	3b0a      	submi	r3, #10
 80054c0:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_FINE_PLUS) { last_s_override += SPINDLE_OVERRIDE_FINE_INCREMENT; }
 80054c2:	0729      	lsls	r1, r5, #28
 80054c4:	bf44      	itt	mi
 80054c6:	3301      	addmi	r3, #1
 80054c8:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_FINE_MINUS) { last_s_override -= SPINDLE_OVERRIDE_FINE_INCREMENT; }
 80054ca:	06ef      	lsls	r7, r5, #27
 80054cc:	bf44      	itt	mi
 80054ce:	f103 33ff 	addmi.w	r3, r3, #4294967295
 80054d2:	b2db      	uxtbmi	r3, r3
    last_s_override = max(last_s_override,MIN_SPINDLE_SPEED_OVERRIDE);
 80054d4:	2bc8      	cmp	r3, #200	; 0xc8
 80054d6:	bf28      	it	cs
 80054d8:	23c8      	movcs	r3, #200	; 0xc8
 80054da:	2b0a      	cmp	r3, #10
 80054dc:	bf38      	it	cc
 80054de:	230a      	movcc	r3, #10
    if (last_s_override != sys.spindle_speed_ovr) {
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d006      	beq.n	80054f2 <protocol_exec_rt_system+0x142>
      sys.report_ovr_counter = 0; // Set to report change immediately
 80054e4:	2100      	movs	r1, #0
      bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 80054e6:	7922      	ldrb	r2, [r4, #4]
      sys.spindle_speed_ovr = last_s_override;
 80054e8:	72a3      	strb	r3, [r4, #10]
      bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 80054ea:	f042 0308 	orr.w	r3, r2, #8
 80054ee:	7123      	strb	r3, [r4, #4]
      sys.report_ovr_counter = 0; // Set to report change immediately
 80054f0:	7321      	strb	r1, [r4, #12]
    if (rt_exec & EXEC_SPINDLE_OVR_STOP) {
 80054f2:	06ae      	lsls	r6, r5, #26
 80054f4:	7823      	ldrb	r3, [r4, #0]
 80054f6:	f005 02c0 	and.w	r2, r5, #192	; 0xc0
 80054fa:	d520      	bpl.n	800553e <protocol_exec_rt_system+0x18e>
      if (sys.state == STATE_HOLD) {
 80054fc:	2b10      	cmp	r3, #16
 80054fe:	d11e      	bne.n	800553e <protocol_exec_rt_system+0x18e>
        if (!(sys.spindle_stop_ovr)) { sys.spindle_stop_ovr = SPINDLE_STOP_OVR_INITIATE; }
 8005500:	7ae1      	ldrb	r1, [r4, #11]
 8005502:	2900      	cmp	r1, #0
 8005504:	f040 80e4 	bne.w	80056d0 <protocol_exec_rt_system+0x320>
 8005508:	2102      	movs	r1, #2
 800550a:	72e1      	strb	r1, [r4, #11]
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 800550c:	2a00      	cmp	r2, #0
 800550e:	f040 8099 	bne.w	8005644 <protocol_exec_rt_system+0x294>
}
 8005512:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    st_prep_buffer();
 8005516:	f003 baf7 	b.w	8008b08 <st_prep_buffer>
      sys.abort = true;  // Only place this is set true.
 800551a:	2301      	movs	r3, #1
 800551c:	7063      	strb	r3, [r4, #1]
}
 800551e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    sys.state = STATE_ALARM; // Set system alarm state
 8005520:	2601      	movs	r6, #1
 8005522:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8005526:	4c52      	ldr	r4, [pc, #328]	; (8005670 <protocol_exec_rt_system+0x2c0>)
    report_alarm_message(rt_exec);
 8005528:	4628      	mov	r0, r5
    if ((rt_exec == EXEC_ALARM_HARD_LIMIT) || (rt_exec == EXEC_ALARM_SOFT_LIMIT)) {
 800552a:	3d01      	subs	r5, #1
    sys.state = STATE_ALARM; // Set system alarm state
 800552c:	7026      	strb	r6, [r4, #0]
    report_alarm_message(rt_exec);
 800552e:	f001 f923 	bl	8006778 <report_alarm_message>
    if ((rt_exec == EXEC_ALARM_HARD_LIMIT) || (rt_exec == EXEC_ALARM_SOFT_LIMIT)) {
 8005532:	42b5      	cmp	r5, r6
 8005534:	d978      	bls.n	8005628 <protocol_exec_rt_system+0x278>
 8005536:	4d4f      	ldr	r5, [pc, #316]	; (8005674 <protocol_exec_rt_system+0x2c4>)
    system_clear_exec_alarm(); // Clear alarm
 8005538:	f004 fc2e 	bl	8009d98 <system_clear_exec_alarm>
 800553c:	e740      	b.n	80053c0 <protocol_exec_rt_system+0x10>
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 800553e:	2a00      	cmp	r2, #0
 8005540:	d0ab      	beq.n	800549a <protocol_exec_rt_system+0xea>
      if ((sys.state == STATE_IDLE) || (sys.state & (STATE_CYCLE | STATE_HOLD))) {
 8005542:	2b00      	cmp	r3, #0
 8005544:	d17e      	bne.n	8005644 <protocol_exec_rt_system+0x294>
        uint8_t coolant_state = gc_state.modal.coolant;
 8005546:	4f4e      	ldr	r7, [pc, #312]	; (8005680 <protocol_exec_rt_system+0x2d0>)
          if (rt_exec & EXEC_COOLANT_MIST_OVR_TOGGLE) {
 8005548:	062a      	lsls	r2, r5, #24
        uint8_t coolant_state = gc_state.modal.coolant;
 800554a:	7a3e      	ldrb	r6, [r7, #8]
          if (rt_exec & EXEC_COOLANT_MIST_OVR_TOGGLE) {
 800554c:	d505      	bpl.n	800555a <protocol_exec_rt_system+0x1aa>
            if (coolant_state & COOLANT_MIST_ENABLE) { bit_false(coolant_state,COOLANT_MIST_ENABLE); }
 800554e:	0633      	lsls	r3, r6, #24
 8005550:	bf4c      	ite	mi
 8005552:	f006 067f 	andmi.w	r6, r6, #127	; 0x7f
            else { coolant_state |= COOLANT_MIST_ENABLE; }
 8005556:	f046 0680 	orrpl.w	r6, r6, #128	; 0x80
          if (rt_exec & EXEC_COOLANT_FLOOD_OVR_TOGGLE) {
 800555a:	0668      	lsls	r0, r5, #25
 800555c:	d505      	bpl.n	800556a <protocol_exec_rt_system+0x1ba>
            if (coolant_state & COOLANT_FLOOD_ENABLE) { bit_false(coolant_state,COOLANT_FLOOD_ENABLE); }
 800555e:	0671      	lsls	r1, r6, #25
 8005560:	bf4c      	ite	mi
 8005562:	f006 06bf 	andmi.w	r6, r6, #191	; 0xbf
            else { coolant_state |= COOLANT_FLOOD_ENABLE; }
 8005566:	f046 0640 	orrpl.w	r6, r6, #64	; 0x40
        coolant_set_state(coolant_state); // Report counter set in coolant_set_state().
 800556a:	4630      	mov	r0, r6
 800556c:	f7fc fb26 	bl	8001bbc <coolant_set_state>
 8005570:	7823      	ldrb	r3, [r4, #0]
        gc_state.modal.coolant = coolant_state;
 8005572:	723e      	strb	r6, [r7, #8]
 8005574:	e791      	b.n	800549a <protocol_exec_rt_system+0xea>
    system_clear_exec_motion_overrides(); // Clear all motion override flags.
 8005576:	f004 fc2b 	bl	8009dd0 <system_clear_exec_motion_overrides>
    uint8_t new_f_override =  sys.f_override;
 800557a:	7a21      	ldrb	r1, [r4, #8]
 800557c:	f015 0f01 	tst.w	r5, #1
 8005580:	bf0c      	ite	eq
 8005582:	460b      	moveq	r3, r1
 8005584:	2364      	movne	r3, #100	; 0x64
    if (rt_exec & EXEC_FEED_OVR_COARSE_PLUS) { new_f_override += FEED_OVERRIDE_COARSE_INCREMENT; }
 8005586:	07af      	lsls	r7, r5, #30
 8005588:	bf44      	itt	mi
 800558a:	330a      	addmi	r3, #10
 800558c:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_FEED_OVR_COARSE_MINUS) { new_f_override -= FEED_OVERRIDE_COARSE_INCREMENT; }
 800558e:	076e      	lsls	r6, r5, #29
 8005590:	bf44      	itt	mi
 8005592:	3b0a      	submi	r3, #10
 8005594:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_FEED_OVR_FINE_PLUS) { new_f_override += FEED_OVERRIDE_FINE_INCREMENT; }
 8005596:	0728      	lsls	r0, r5, #28
 8005598:	bf44      	itt	mi
 800559a:	3301      	addmi	r3, #1
 800559c:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_FEED_OVR_FINE_MINUS) { new_f_override -= FEED_OVERRIDE_FINE_INCREMENT; }
 800559e:	06ef      	lsls	r7, r5, #27
 80055a0:	bf44      	itt	mi
 80055a2:	f103 33ff 	addmi.w	r3, r3, #4294967295
 80055a6:	b2db      	uxtbmi	r3, r3
    new_f_override = max(new_f_override,MIN_FEED_RATE_OVERRIDE);
 80055a8:	2bc8      	cmp	r3, #200	; 0xc8
 80055aa:	bf28      	it	cs
 80055ac:	23c8      	movcs	r3, #200	; 0xc8
 80055ae:	2b0a      	cmp	r3, #10
 80055b0:	bf38      	it	cc
 80055b2:	230a      	movcc	r3, #10
    uint8_t new_r_override = sys.r_override;
 80055b4:	7a60      	ldrb	r0, [r4, #9]
 80055b6:	f015 0f20 	tst.w	r5, #32
 80055ba:	bf14      	ite	ne
 80055bc:	2264      	movne	r2, #100	; 0x64
 80055be:	4602      	moveq	r2, r0
    if (rt_exec & EXEC_RAPID_OVR_MEDIUM) { new_r_override = RAPID_OVERRIDE_MEDIUM; }
 80055c0:	f015 0f40 	tst.w	r5, #64	; 0x40
 80055c4:	bf18      	it	ne
 80055c6:	2232      	movne	r2, #50	; 0x32
    if (rt_exec & EXEC_RAPID_OVR_LOW) { new_r_override = RAPID_OVERRIDE_LOW; }
 80055c8:	f015 0f80 	tst.w	r5, #128	; 0x80
 80055cc:	bf18      	it	ne
 80055ce:	2219      	movne	r2, #25
    if ((new_f_override != sys.f_override) || (new_r_override != sys.r_override)) {
 80055d0:	4299      	cmp	r1, r3
 80055d2:	d102      	bne.n	80055da <protocol_exec_rt_system+0x22a>
 80055d4:	4282      	cmp	r2, r0
 80055d6:	f43f af5a 	beq.w	800548e <protocol_exec_rt_system+0xde>
      sys.report_ovr_counter = 0; // Set to report change immediately
 80055da:	2100      	movs	r1, #0
      sys.f_override = new_f_override;
 80055dc:	7223      	strb	r3, [r4, #8]
      sys.r_override = new_r_override;
 80055de:	7262      	strb	r2, [r4, #9]
      sys.report_ovr_counter = 0; // Set to report change immediately
 80055e0:	7321      	strb	r1, [r4, #12]
      plan_update_velocity_profile_parameters();
 80055e2:	f7ff f899 	bl	8004718 <plan_update_velocity_profile_parameters>
      plan_cycle_reinitialize();
 80055e6:	f7ff fb8b 	bl	8004d00 <plan_cycle_reinitialize>
 80055ea:	e750      	b.n	800548e <protocol_exec_rt_system+0xde>
      if ((sys.state & (STATE_HOLD|STATE_SAFETY_DOOR|STATE_SLEEP)) && !(sys.soft_limit) && !(sys.suspend & SUSPEND_JOG_CANCEL)) {
 80055ec:	7822      	ldrb	r2, [r4, #0]
 80055ee:	78a3      	ldrb	r3, [r4, #2]
 80055f0:	f012 0fd0 	tst.w	r2, #208	; 0xd0
 80055f4:	b259      	sxtb	r1, r3
 80055f6:	d001      	beq.n	80055fc <protocol_exec_rt_system+0x24c>
 80055f8:	78e2      	ldrb	r2, [r4, #3]
 80055fa:	b342      	cbz	r2, 800564e <protocol_exec_rt_system+0x29e>
        if (sys.suspend & SUSPEND_JOG_CANCEL) {   // For jog cancel, flush buffers and sync positions.
 80055fc:	2900      	cmp	r1, #0
 80055fe:	db28      	blt.n	8005652 <protocol_exec_rt_system+0x2a2>
        if (sys.suspend & SUSPEND_SAFETY_DOOR_AJAR) { // Only occurs when safety door opens during jog.
 8005600:	f013 0220 	ands.w	r2, r3, #32
 8005604:	d01b      	beq.n	800563e <protocol_exec_rt_system+0x28e>
          sys.state = STATE_SAFETY_DOOR;
 8005606:	2240      	movs	r2, #64	; 0x40
          sys.suspend &= ~(SUSPEND_JOG_CANCEL);
 8005608:	f003 037f 	and.w	r3, r3, #127	; 0x7f
          sys.suspend |= SUSPEND_HOLD_COMPLETE;
 800560c:	f043 0301 	orr.w	r3, r3, #1
 8005610:	70a3      	strb	r3, [r4, #2]
          sys.state = STATE_SAFETY_DOOR;
 8005612:	7022      	strb	r2, [r4, #0]
      system_clear_exec_state_flag(EXEC_CYCLE_STOP);
 8005614:	2004      	movs	r0, #4
 8005616:	f004 fbad 	bl	8009d74 <system_clear_exec_state_flag>
 800561a:	e732      	b.n	8005482 <protocol_exec_rt_system+0xd2>
      report_realtime_status();
 800561c:	f001 fe1c 	bl	8007258 <report_realtime_status>
      system_clear_exec_state_flag(EXEC_STATUS_REPORT);
 8005620:	2001      	movs	r0, #1
 8005622:	f004 fba7 	bl	8009d74 <system_clear_exec_state_flag>
 8005626:	e6d6      	b.n	80053d6 <protocol_exec_rt_system+0x26>
      report_feedback_message(MESSAGE_CRITICAL_EVENT);
 8005628:	4630      	mov	r0, r6
 800562a:	f001 f8bb 	bl	80067a4 <report_feedback_message>
      system_clear_exec_state_flag(EXEC_RESET); // Disable any existing reset
 800562e:	2010      	movs	r0, #16
 8005630:	f004 fba0 	bl	8009d74 <system_clear_exec_state_flag>
 8005634:	4d0f      	ldr	r5, [pc, #60]	; (8005674 <protocol_exec_rt_system+0x2c4>)
      } while (bit_isfalse(sys_rt_exec_state,EXEC_RESET));
 8005636:	782b      	ldrb	r3, [r5, #0]
 8005638:	06de      	lsls	r6, r3, #27
 800563a:	d5fc      	bpl.n	8005636 <protocol_exec_rt_system+0x286>
 800563c:	e77c      	b.n	8005538 <protocol_exec_rt_system+0x188>
          sys.suspend = SUSPEND_DISABLE;
 800563e:	70a2      	strb	r2, [r4, #2]
          sys.state = STATE_IDLE;
 8005640:	7022      	strb	r2, [r4, #0]
 8005642:	e7e7      	b.n	8005614 <protocol_exec_rt_system+0x264>
      if ((sys.state == STATE_IDLE) || (sys.state & (STATE_CYCLE | STATE_HOLD))) {
 8005644:	f013 0f18 	tst.w	r3, #24
 8005648:	f43f af27 	beq.w	800549a <protocol_exec_rt_system+0xea>
 800564c:	e77b      	b.n	8005546 <protocol_exec_rt_system+0x196>
      if ((sys.state & (STATE_HOLD|STATE_SAFETY_DOOR|STATE_SLEEP)) && !(sys.soft_limit) && !(sys.suspend & SUSPEND_JOG_CANCEL)) {
 800564e:	2900      	cmp	r1, #0
 8005650:	da5f      	bge.n	8005712 <protocol_exec_rt_system+0x362>
          sys.step_control = STEP_CONTROL_NORMAL_OP;
 8005652:	2300      	movs	r3, #0
 8005654:	7123      	strb	r3, [r4, #4]
          plan_reset();
 8005656:	f7fe ffa9 	bl	80045ac <plan_reset>
          st_reset();
 800565a:	f003 f8ed 	bl	8008838 <st_reset>
          gc_sync_position();
 800565e:	f7fc fbaf 	bl	8001dc0 <gc_sync_position>
          plan_sync_position();
 8005662:	f7ff fb29 	bl	8004cb8 <plan_sync_position>
 8005666:	78a3      	ldrb	r3, [r4, #2]
 8005668:	e7ca      	b.n	8005600 <protocol_exec_rt_system+0x250>
 800566a:	bf00      	nop
 800566c:	20001440 	.word	0x20001440
 8005670:	20001408 	.word	0x20001408
 8005674:	2000141d 	.word	0x2000141d
 8005678:	20001404 	.word	0x20001404
 800567c:	2000141c 	.word	0x2000141c
 8005680:	2000136c 	.word	0x2000136c
          if (!(sys.suspend & (SUSPEND_MOTION_CANCEL | SUSPEND_JOG_CANCEL))) { // Block, if already holding.
 8005684:	78a2      	ldrb	r2, [r4, #2]
 8005686:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 800568a:	d04f      	beq.n	800572c <protocol_exec_rt_system+0x37c>
 800568c:	f005 0140 	and.w	r1, r5, #64	; 0x40
 8005690:	f005 0208 	and.w	r2, r5, #8
        if (rt_exec & EXEC_MOTION_CANCEL) {
 8005694:	2900      	cmp	r1, #0
 8005696:	f43f aeb7 	beq.w	8005408 <protocol_exec_rt_system+0x58>
          if (!(sys.state & STATE_JOG)) { sys.suspend |= SUSPEND_MOTION_CANCEL; } // NOTE: State is STATE_CYCLE.
 800569a:	069f      	lsls	r7, r3, #26
 800569c:	f53f aeb4 	bmi.w	8005408 <protocol_exec_rt_system+0x58>
 80056a0:	78a1      	ldrb	r1, [r4, #2]
 80056a2:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80056a6:	70a1      	strb	r1, [r4, #2]
 80056a8:	e6ae      	b.n	8005408 <protocol_exec_rt_system+0x58>
        if ((sys.state == STATE_SAFETY_DOOR) && !(sys.suspend & SUSPEND_SAFETY_DOOR_AJAR)) {
 80056aa:	78a3      	ldrb	r3, [r4, #2]
 80056ac:	f013 0220 	ands.w	r2, r3, #32
 80056b0:	f47f aee1 	bne.w	8005476 <protocol_exec_rt_system+0xc6>
          if (sys.suspend & SUSPEND_RESTORE_COMPLETE) {
 80056b4:	06df      	lsls	r7, r3, #27
 80056b6:	d551      	bpl.n	800575c <protocol_exec_rt_system+0x3ac>
            sys.state = STATE_IDLE; // Set to IDLE to immediately resume the cycle.
 80056b8:	7022      	strb	r2, [r4, #0]
 80056ba:	e6cf      	b.n	800545c <protocol_exec_rt_system+0xac>
        if (sys.state == STATE_ALARM) { sys.suspend |= (SUSPEND_RETRACT_COMPLETE|SUSPEND_HOLD_COMPLETE); }
 80056bc:	7823      	ldrb	r3, [r4, #0]
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d103      	bne.n	80056ca <protocol_exec_rt_system+0x31a>
 80056c2:	78a3      	ldrb	r3, [r4, #2]
 80056c4:	f043 0305 	orr.w	r3, r3, #5
 80056c8:	70a3      	strb	r3, [r4, #2]
        sys.state = STATE_SLEEP; 
 80056ca:	2380      	movs	r3, #128	; 0x80
 80056cc:	7023      	strb	r3, [r4, #0]
 80056ce:	e6b6      	b.n	800543e <protocol_exec_rt_system+0x8e>
        else if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_ENABLED) { sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE; }
 80056d0:	07c8      	lsls	r0, r1, #31
 80056d2:	d502      	bpl.n	80056da <protocol_exec_rt_system+0x32a>
 80056d4:	f041 0104 	orr.w	r1, r1, #4
 80056d8:	72e1      	strb	r1, [r4, #11]
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 80056da:	2a00      	cmp	r2, #0
 80056dc:	f47f af33 	bne.w	8005546 <protocol_exec_rt_system+0x196>
 80056e0:	e717      	b.n	8005512 <protocol_exec_rt_system+0x162>
        if (rt_exec & EXEC_FEED_HOLD) {
 80056e2:	2a00      	cmp	r2, #0
 80056e4:	f43f ae95 	beq.w	8005412 <protocol_exec_rt_system+0x62>
          if (!(sys.state & (STATE_SAFETY_DOOR | STATE_JOG | STATE_SLEEP))) { sys.state = STATE_HOLD; }
 80056e8:	2310      	movs	r3, #16
 80056ea:	7023      	strb	r3, [r4, #0]
 80056ec:	e691      	b.n	8005412 <protocol_exec_rt_system+0x62>
        if ((sys.state == STATE_IDLE) || ((sys.state & STATE_HOLD) && (sys.suspend & SUSPEND_HOLD_COMPLETE))) {
 80056ee:	06da      	lsls	r2, r3, #27
 80056f0:	f57f aec1 	bpl.w	8005476 <protocol_exec_rt_system+0xc6>
 80056f4:	78a2      	ldrb	r2, [r4, #2]
 80056f6:	07d0      	lsls	r0, r2, #31
 80056f8:	f57f aebd 	bpl.w	8005476 <protocol_exec_rt_system+0xc6>
          if (sys.state == STATE_HOLD && sys.spindle_stop_ovr) {
 80056fc:	2b10      	cmp	r3, #16
 80056fe:	f47f aead 	bne.w	800545c <protocol_exec_rt_system+0xac>
 8005702:	7ae3      	ldrb	r3, [r4, #11]
 8005704:	2b00      	cmp	r3, #0
 8005706:	f43f aea9 	beq.w	800545c <protocol_exec_rt_system+0xac>
            sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE_CYCLE; // Set to restore in suspend routine and cycle start after.
 800570a:	f043 0308 	orr.w	r3, r3, #8
 800570e:	72e3      	strb	r3, [r4, #11]
 8005710:	e6b1      	b.n	8005476 <protocol_exec_rt_system+0xc6>
        plan_cycle_reinitialize();
 8005712:	f7ff faf5 	bl	8004d00 <plan_cycle_reinitialize>
        if (sys.step_control & STEP_CONTROL_EXECUTE_HOLD) { sys.suspend |= SUSPEND_HOLD_COMPLETE; }
 8005716:	7923      	ldrb	r3, [r4, #4]
 8005718:	079a      	lsls	r2, r3, #30
 800571a:	d503      	bpl.n	8005724 <protocol_exec_rt_system+0x374>
 800571c:	78a2      	ldrb	r2, [r4, #2]
 800571e:	f042 0201 	orr.w	r2, r2, #1
 8005722:	70a2      	strb	r2, [r4, #2]
        bit_false(sys.step_control,(STEP_CONTROL_EXECUTE_HOLD | STEP_CONTROL_EXECUTE_SYS_MOTION));
 8005724:	f023 0306 	bic.w	r3, r3, #6
 8005728:	7123      	strb	r3, [r4, #4]
 800572a:	e773      	b.n	8005614 <protocol_exec_rt_system+0x264>
            st_update_plan_block_parameters(); // Notify stepper module to recompute for hold deceleration.
 800572c:	f003 f9d6 	bl	8008adc <st_update_plan_block_parameters>
            sys.step_control = STEP_CONTROL_EXECUTE_HOLD; // Initiate suspend state with active flag.
 8005730:	2202      	movs	r2, #2
            if (sys.state == STATE_JOG) { // Jog cancelled upon any hold event, except for sleeping.
 8005732:	7823      	ldrb	r3, [r4, #0]
            sys.step_control = STEP_CONTROL_EXECUTE_HOLD; // Initiate suspend state with active flag.
 8005734:	7122      	strb	r2, [r4, #4]
            if (sys.state == STATE_JOG) { // Jog cancelled upon any hold event, except for sleeping.
 8005736:	2b20      	cmp	r3, #32
 8005738:	f47f ae58 	bne.w	80053ec <protocol_exec_rt_system+0x3c>
              if (!(rt_exec & EXEC_SLEEP)) { sys.suspend |= SUSPEND_JOG_CANCEL; } 
 800573c:	2e00      	cmp	r6, #0
 800573e:	f6ff ae68 	blt.w	8005412 <protocol_exec_rt_system+0x62>
 8005742:	78a3      	ldrb	r3, [r4, #2]
 8005744:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005748:	70a3      	strb	r3, [r4, #2]
 800574a:	e662      	b.n	8005412 <protocol_exec_rt_system+0x62>
              sys.state = STATE_CYCLE;
 800574c:	2208      	movs	r2, #8
              sys.suspend = SUSPEND_DISABLE; // Break suspend state.
 800574e:	70a3      	strb	r3, [r4, #2]
              sys.state = STATE_CYCLE;
 8005750:	7022      	strb	r2, [r4, #0]
              st_prep_buffer(); // Initialize step segment buffer before beginning cycle.
 8005752:	f003 f9d9 	bl	8008b08 <st_prep_buffer>
              st_wake_up();
 8005756:	f002 fe55 	bl	8008404 <st_wake_up>
 800575a:	e68c      	b.n	8005476 <protocol_exec_rt_system+0xc6>
          } else if (sys.suspend & SUSPEND_RETRACT_COMPLETE) {
 800575c:	075e      	lsls	r6, r3, #29
 800575e:	f57f ae8a 	bpl.w	8005476 <protocol_exec_rt_system+0xc6>
            sys.suspend |= SUSPEND_INITIATE_RESTORE;
 8005762:	f043 0308 	orr.w	r3, r3, #8
 8005766:	70a3      	strb	r3, [r4, #2]
 8005768:	e685      	b.n	8005476 <protocol_exec_rt_system+0xc6>
              if (sys.suspend & SUSPEND_INITIATE_RESTORE) { // Actively restoring
 800576a:	071a      	lsls	r2, r3, #28
 800576c:	f57f ae5f 	bpl.w	800542e <protocol_exec_rt_system+0x7e>
                sys.suspend &= ~(SUSPEND_RETRACT_COMPLETE | SUSPEND_INITIATE_RESTORE | SUSPEND_RESTORE_COMPLETE);
 8005770:	f023 031c 	bic.w	r3, r3, #28
                sys.suspend |= SUSPEND_RESTART_RETRACT;
 8005774:	f043 0302 	orr.w	r3, r3, #2
 8005778:	e659      	b.n	800542e <protocol_exec_rt_system+0x7e>
 800577a:	bf00      	nop

0800577c <protocol_exec_rt_suspend>:
// The system will enter this loop, create local variables for suspend tasks, and return to
// whatever function that invoked the suspend, such that Grbl resumes normal operation.
// This function is written in a way to promote custom parking motions. Simply use this as a
// template
static void protocol_exec_rt_suspend()
{
 800577c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005780:	b083      	sub	sp, #12
    #ifdef USE_LINE_NUMBERS
      pl_data->line_number = PARKING_MOTION_LINE_NUMBER;
    #endif
  #endif

  plan_block_t *block = plan_get_current_block();
 8005782:	f7fe ff57 	bl	8004634 <plan_get_current_block>
  uint8_t restore_condition;
  #ifdef VARIABLE_SPINDLE
    float restore_spindle_speed;
    if (block == NULL) {
 8005786:	2800      	cmp	r0, #0
 8005788:	f000 8278 	beq.w	8005c7c <protocol_exec_rt_suspend+0x500>
      restore_condition = (gc_state.modal.spindle | gc_state.modal.coolant);
      restore_spindle_speed = gc_state.spindle_speed;
    } else {
      restore_condition = block->condition;
 800578c:	7d86      	ldrb	r6, [r0, #22]
      restore_spindle_speed = block->spindle_speed;
 800578e:	f8d0 8034 	ldr.w	r8, [r0, #52]	; 0x34
    }
    #ifdef DISABLE_LASER_DURING_HOLD
      if (bit_istrue(settings.flags, BITFLAG_LASER_MODE)) {
 8005792:	4dbe      	ldr	r5, [pc, #760]	; (8005a8c <protocol_exec_rt_suspend+0x310>)
 8005794:	f895 3058 	ldrb.w	r3, [r5, #88]	; 0x58
 8005798:	0798      	lsls	r0, r3, #30
 800579a:	f100 826b 	bmi.w	8005c74 <protocol_exec_rt_suspend+0x4f8>
        // NOTE: Hold ensured as completed by condition check at the beginning of suspend routine.
        if (sys.spindle_stop_ovr) {
          // Handles beginning of spindle stop
          if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_INITIATE) {
            if (gc_state.modal.spindle != SPINDLE_DISABLE) {
              spindle_set_state(SPINDLE_DISABLE,0.0f); // De-energize
 800579e:	2700      	movs	r7, #0
 80057a0:	4cbb      	ldr	r4, [pc, #748]	; (8005a90 <protocol_exec_rt_suspend+0x314>)
  while (sys.suspend) {
 80057a2:	78a3      	ldrb	r3, [r4, #2]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	f000 80d7 	beq.w	8005958 <protocol_exec_rt_suspend+0x1dc>
    if (sys.abort) { return; }
 80057aa:	7862      	ldrb	r2, [r4, #1]
 80057ac:	2a00      	cmp	r2, #0
 80057ae:	f040 80d3 	bne.w	8005958 <protocol_exec_rt_suspend+0x1dc>
    if (sys.suspend & SUSPEND_HOLD_COMPLETE) {
 80057b2:	07d9      	lsls	r1, r3, #31
 80057b4:	d539      	bpl.n	800582a <protocol_exec_rt_suspend+0xae>
      if (sys.state & (STATE_SAFETY_DOOR | STATE_SLEEP)) {
 80057b6:	7821      	ldrb	r1, [r4, #0]
 80057b8:	f011 00c0 	ands.w	r0, r1, #192	; 0xc0
 80057bc:	f000 80fc 	beq.w	80059b8 <protocol_exec_rt_suspend+0x23c>
        if (bit_isfalse(sys.suspend,SUSPEND_RETRACT_COMPLETE)) {
 80057c0:	f013 0b04 	ands.w	fp, r3, #4
 80057c4:	f000 81c1 	beq.w	8005b4a <protocol_exec_rt_suspend+0x3ce>
          if (sys.state == STATE_SLEEP) {
 80057c8:	2980      	cmp	r1, #128	; 0x80
 80057ca:	f000 82c9 	beq.w	8005d60 <protocol_exec_rt_suspend+0x5e4>
          if (sys.state == STATE_SAFETY_DOOR) {
 80057ce:	2940      	cmp	r1, #64	; 0x40
 80057d0:	f000 8246 	beq.w	8005c60 <protocol_exec_rt_suspend+0x4e4>
          if (sys.suspend & SUSPEND_INITIATE_RESTORE) {
 80057d4:	0718      	lsls	r0, r3, #28
 80057d6:	d528      	bpl.n	800582a <protocol_exec_rt_suspend+0xae>
            if (gc_state.modal.spindle != SPINDLE_DISABLE) {
 80057d8:	f8df a2c4 	ldr.w	sl, [pc, #708]	; 8005aa0 <protocol_exec_rt_suspend+0x324>
 80057dc:	f003 0102 	and.w	r1, r3, #2
 80057e0:	f89a 0009 	ldrb.w	r0, [sl, #9]
 80057e4:	2800      	cmp	r0, #0
 80057e6:	f000 80c7 	beq.w	8005978 <protocol_exec_rt_suspend+0x1fc>
              if (bit_isfalse(sys.suspend,SUSPEND_RESTART_RETRACT)) {
 80057ea:	b9f1      	cbnz	r1, 800582a <protocol_exec_rt_suspend+0xae>
                if (bit_istrue(settings.flags,BITFLAG_LASER_MODE)) {
 80057ec:	f895 1058 	ldrb.w	r1, [r5, #88]	; 0x58
 80057f0:	0789      	lsls	r1, r1, #30
 80057f2:	f140 80b4 	bpl.w	800595e <protocol_exec_rt_suspend+0x1e2>
                  bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 80057f6:	7921      	ldrb	r1, [r4, #4]
            if (gc_state.modal.coolant != COOLANT_DISABLE) {
 80057f8:	f89a 0008 	ldrb.w	r0, [sl, #8]
                  bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 80057fc:	f041 0208 	orr.w	r2, r1, #8
 8005800:	7122      	strb	r2, [r4, #4]
            if (gc_state.modal.coolant != COOLANT_DISABLE) {
 8005802:	b160      	cbz	r0, 800581e <protocol_exec_rt_suspend+0xa2>
                coolant_set_state((restore_condition & (PL_COND_FLAG_COOLANT_FLOOD | PL_COND_FLAG_COOLANT_FLOOD)));
 8005804:	f006 0040 	and.w	r0, r6, #64	; 0x40
 8005808:	f7fc f9d8 	bl	8001bbc <coolant_set_state>
                delay_sec(SAFETY_DOOR_COOLANT_DELAY, DELAY_MODE_SYS_SUSPEND);
 800580c:	2101      	movs	r1, #1
 800580e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8005812:	f7fe fcb9 	bl	8004188 <delay_sec>
 8005816:	78a3      	ldrb	r3, [r4, #2]
 8005818:	f003 0102 	and.w	r1, r3, #2
            if (bit_isfalse(sys.suspend,SUSPEND_RESTART_RETRACT)) {
 800581c:	b929      	cbnz	r1, 800582a <protocol_exec_rt_suspend+0xae>
              sys.suspend |= SUSPEND_RESTORE_COMPLETE;
 800581e:	f043 0310 	orr.w	r3, r3, #16
              system_set_exec_state_flag(EXEC_CYCLE_START); // Set to resume program.
 8005822:	2002      	movs	r0, #2
              sys.suspend |= SUSPEND_RESTORE_COMPLETE;
 8005824:	70a3      	strb	r3, [r4, #2]
              system_set_exec_state_flag(EXEC_CYCLE_START); // Set to resume program.
 8005826:	f004 fa9b 	bl	8009d60 <system_set_exec_state_flag>
  rt_exec = sys_rt_exec_alarm; // Copy volatile sys_rt_exec_alarm.
 800582a:	4b9a      	ldr	r3, [pc, #616]	; (8005a94 <protocol_exec_rt_suspend+0x318>)
 800582c:	781b      	ldrb	r3, [r3, #0]
  if (rt_exec) { // Enter only if any bit flag is true
 800582e:	f003 0bff 	and.w	fp, r3, #255	; 0xff
 8005832:	2b00      	cmp	r3, #0
 8005834:	f040 80af 	bne.w	8005996 <protocol_exec_rt_suspend+0x21a>
 8005838:	f8df b268 	ldr.w	fp, [pc, #616]	; 8005aa4 <protocol_exec_rt_suspend+0x328>
  rt_exec = sys_rt_exec_state; // Copy volatile sys_rt_exec_state.
 800583c:	f89b 3000 	ldrb.w	r3, [fp]
  if (rt_exec) {
 8005840:	f003 0bff 	and.w	fp, r3, #255	; 0xff
 8005844:	2b00      	cmp	r3, #0
 8005846:	d06f      	beq.n	8005928 <protocol_exec_rt_suspend+0x1ac>
    if (rt_exec & EXEC_RESET) {
 8005848:	f01b 0f10 	tst.w	fp, #16
 800584c:	f040 816c 	bne.w	8005b28 <protocol_exec_rt_suspend+0x3ac>
    if (rt_exec & EXEC_STATUS_REPORT) {
 8005850:	f01b 0f01 	tst.w	fp, #1
 8005854:	f040 8189 	bne.w	8005b6a <protocol_exec_rt_suspend+0x3ee>
    if (rt_exec & (EXEC_MOTION_CANCEL | EXEC_FEED_HOLD | EXEC_SAFETY_DOOR | EXEC_SLEEP)) {
 8005858:	f01b 0fe8 	tst.w	fp, #232	; 0xe8
 800585c:	d028      	beq.n	80058b0 <protocol_exec_rt_suspend+0x134>
      if (!(sys.state & (STATE_ALARM | STATE_CHECK_MODE))) {
 800585e:	7823      	ldrb	r3, [r4, #0]
 8005860:	fa4f f28b 	sxtb.w	r2, fp
 8005864:	0799      	lsls	r1, r3, #30
 8005866:	d11d      	bne.n	80058a4 <protocol_exec_rt_suspend+0x128>
        if (sys.state & (STATE_CYCLE | STATE_JOG)) {
 8005868:	f013 0f28 	tst.w	r3, #40	; 0x28
 800586c:	f040 81b5 	bne.w	8005bda <protocol_exec_rt_suspend+0x45e>
 8005870:	f00b 0040 	and.w	r0, fp, #64	; 0x40
 8005874:	f00b 0108 	and.w	r1, fp, #8
        if (sys.state == STATE_IDLE) { sys.suspend = SUSPEND_HOLD_COMPLETE; }
 8005878:	2b00      	cmp	r3, #0
 800587a:	f040 81b7 	bne.w	8005bec <protocol_exec_rt_suspend+0x470>
 800587e:	f04f 0c01 	mov.w	ip, #1
 8005882:	f884 c002 	strb.w	ip, [r4, #2]
        if (rt_exec & EXEC_MOTION_CANCEL) {
 8005886:	2800      	cmp	r0, #0
 8005888:	f000 821f 	beq.w	8005cca <protocol_exec_rt_suspend+0x54e>
 800588c:	2041      	movs	r0, #65	; 0x41
          if (!(sys.state & STATE_JOG)) { sys.suspend |= SUSPEND_MOTION_CANCEL; } // NOTE: State is STATE_CYCLE.
 800588e:	70a0      	strb	r0, [r4, #2]
        if (rt_exec & EXEC_FEED_HOLD) {
 8005890:	b121      	cbz	r1, 800589c <protocol_exec_rt_suspend+0x120>
          if (!(sys.state & (STATE_SAFETY_DOOR | STATE_JOG | STATE_SLEEP))) { sys.state = STATE_HOLD; }
 8005892:	f013 0fe0 	tst.w	r3, #224	; 0xe0
 8005896:	d101      	bne.n	800589c <protocol_exec_rt_suspend+0x120>
 8005898:	2310      	movs	r3, #16
 800589a:	7023      	strb	r3, [r4, #0]
        if (rt_exec & EXEC_SAFETY_DOOR) {
 800589c:	f01b 0f20 	tst.w	fp, #32
 80058a0:	f040 8201 	bne.w	8005ca6 <protocol_exec_rt_suspend+0x52a>
      if (rt_exec & EXEC_SLEEP) {
 80058a4:	2a00      	cmp	r2, #0
 80058a6:	f2c0 81d1 	blt.w	8005c4c <protocol_exec_rt_suspend+0x4d0>
      system_clear_exec_state_flag((EXEC_MOTION_CANCEL | EXEC_FEED_HOLD | EXEC_SAFETY_DOOR | EXEC_SLEEP));
 80058aa:	20e8      	movs	r0, #232	; 0xe8
 80058ac:	f004 fa62 	bl	8009d74 <system_clear_exec_state_flag>
    if (rt_exec & EXEC_CYCLE_START) {
 80058b0:	f01b 0f02 	tst.w	fp, #2
 80058b4:	d01f      	beq.n	80058f6 <protocol_exec_rt_suspend+0x17a>
      if (!(rt_exec & (EXEC_FEED_HOLD | EXEC_MOTION_CANCEL | EXEC_SAFETY_DOOR))) {
 80058b6:	f01b 0f68 	tst.w	fp, #104	; 0x68
 80058ba:	d119      	bne.n	80058f0 <protocol_exec_rt_suspend+0x174>
        if ((sys.state == STATE_SAFETY_DOOR) && !(sys.suspend & SUSPEND_SAFETY_DOOR_AJAR)) {
 80058bc:	7823      	ldrb	r3, [r4, #0]
 80058be:	2b40      	cmp	r3, #64	; 0x40
 80058c0:	f000 81e3 	beq.w	8005c8a <protocol_exec_rt_suspend+0x50e>
        if ((sys.state == STATE_IDLE) || ((sys.state & STATE_HOLD) && (sys.suspend & SUSPEND_HOLD_COMPLETE))) {
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	f040 822c 	bne.w	8005d22 <protocol_exec_rt_suspend+0x5a6>
            sys.step_control = STEP_CONTROL_NORMAL_OP; // Restore step control to normal operation
 80058ca:	2300      	movs	r3, #0
 80058cc:	7123      	strb	r3, [r4, #4]
            if (plan_get_current_block() && bit_isfalse(sys.suspend,SUSPEND_MOTION_CANCEL)) {
 80058ce:	f7fe feb1 	bl	8004634 <plan_get_current_block>
 80058d2:	2800      	cmp	r0, #0
 80058d4:	f000 81a9 	beq.w	8005c2a <protocol_exec_rt_suspend+0x4ae>
 80058d8:	78a3      	ldrb	r3, [r4, #2]
 80058da:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 80058de:	f040 81a4 	bne.w	8005c2a <protocol_exec_rt_suspend+0x4ae>
              sys.state = STATE_CYCLE;
 80058e2:	2208      	movs	r2, #8
              sys.suspend = SUSPEND_DISABLE; // Break suspend state.
 80058e4:	70a3      	strb	r3, [r4, #2]
              sys.state = STATE_CYCLE;
 80058e6:	7022      	strb	r2, [r4, #0]
              st_prep_buffer(); // Initialize step segment buffer before beginning cycle.
 80058e8:	f003 f90e 	bl	8008b08 <st_prep_buffer>
              st_wake_up();
 80058ec:	f002 fd8a 	bl	8008404 <st_wake_up>
      system_clear_exec_state_flag(EXEC_CYCLE_START);
 80058f0:	2002      	movs	r0, #2
 80058f2:	f004 fa3f 	bl	8009d74 <system_clear_exec_state_flag>
    if (rt_exec & EXEC_CYCLE_STOP) {
 80058f6:	f01b 0f04 	tst.w	fp, #4
 80058fa:	d015      	beq.n	8005928 <protocol_exec_rt_suspend+0x1ac>
      if ((sys.state & (STATE_HOLD|STATE_SAFETY_DOOR|STATE_SLEEP)) && !(sys.soft_limit) && !(sys.suspend & SUSPEND_JOG_CANCEL)) {
 80058fc:	7821      	ldrb	r1, [r4, #0]
 80058fe:	78a3      	ldrb	r3, [r4, #2]
 8005900:	f011 0fd0 	tst.w	r1, #208	; 0xd0
 8005904:	b25a      	sxtb	r2, r3
 8005906:	d003      	beq.n	8005910 <protocol_exec_rt_suspend+0x194>
 8005908:	78e1      	ldrb	r1, [r4, #3]
 800590a:	2900      	cmp	r1, #0
 800590c:	f000 8179 	beq.w	8005c02 <protocol_exec_rt_suspend+0x486>
        if (sys.suspend & SUSPEND_JOG_CANCEL) {   // For jog cancel, flush buffers and sync positions.
 8005910:	2a00      	cmp	r2, #0
 8005912:	f2c0 8178 	blt.w	8005c06 <protocol_exec_rt_suspend+0x48a>
        if (sys.suspend & SUSPEND_SAFETY_DOOR_AJAR) { // Only occurs when safety door opens during jog.
 8005916:	f013 0220 	ands.w	r2, r3, #32
 800591a:	f040 814b 	bne.w	8005bb4 <protocol_exec_rt_suspend+0x438>
          sys.suspend = SUSPEND_DISABLE;
 800591e:	70a2      	strb	r2, [r4, #2]
          sys.state = STATE_IDLE;
 8005920:	7022      	strb	r2, [r4, #0]
      system_clear_exec_state_flag(EXEC_CYCLE_STOP);
 8005922:	2004      	movs	r0, #4
 8005924:	f004 fa26 	bl	8009d74 <system_clear_exec_state_flag>
  rt_exec = sys_rt_exec_motion_override; // Copy volatile sys_rt_exec_motion_override
 8005928:	4b5b      	ldr	r3, [pc, #364]	; (8005a98 <protocol_exec_rt_suspend+0x31c>)
 800592a:	781b      	ldrb	r3, [r3, #0]
  if (rt_exec) {
 800592c:	f003 0bff 	and.w	fp, r3, #255	; 0xff
 8005930:	2b00      	cmp	r3, #0
 8005932:	f040 80b9 	bne.w	8005aa8 <protocol_exec_rt_suspend+0x32c>
  rt_exec = sys_rt_exec_accessory_override;
 8005936:	4b59      	ldr	r3, [pc, #356]	; (8005a9c <protocol_exec_rt_suspend+0x320>)
 8005938:	781b      	ldrb	r3, [r3, #0]
  if (rt_exec) {
 800593a:	f003 0bff 	and.w	fp, r3, #255	; 0xff
 800593e:	2b00      	cmp	r3, #0
 8005940:	d149      	bne.n	80059d6 <protocol_exec_rt_suspend+0x25a>
 8005942:	7823      	ldrb	r3, [r4, #0]
  if (sys.state & (STATE_CYCLE | STATE_HOLD | STATE_SAFETY_DOOR | STATE_HOMING | STATE_SLEEP| STATE_JOG)) {
 8005944:	f013 0ffc 	tst.w	r3, #252	; 0xfc
 8005948:	f43f af2b 	beq.w	80057a2 <protocol_exec_rt_suspend+0x26>
    st_prep_buffer();
 800594c:	f003 f8dc 	bl	8008b08 <st_prep_buffer>
  while (sys.suspend) {
 8005950:	78a3      	ldrb	r3, [r4, #2]
 8005952:	2b00      	cmp	r3, #0
 8005954:	f47f af29 	bne.w	80057aa <protocol_exec_rt_suspend+0x2e>
    }

    protocol_exec_rt_system();

  }
}
 8005958:	b003      	add	sp, #12
 800595a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                  spindle_set_state((restore_condition & (PL_COND_FLAG_SPINDLE_CW | PL_COND_FLAG_SPINDLE_CCW)), restore_spindle_speed);
 800595e:	4641      	mov	r1, r8
 8005960:	f006 0030 	and.w	r0, r6, #48	; 0x30
 8005964:	f002 fc08 	bl	8008178 <spindle_set_state>
                  delay_sec(SAFETY_DOOR_SPINDLE_DELAY, DELAY_MODE_SYS_SUSPEND);
 8005968:	2101      	movs	r1, #1
 800596a:	f04f 4081 	mov.w	r0, #1082130432	; 0x40800000
 800596e:	f7fe fc0b 	bl	8004188 <delay_sec>
 8005972:	78a3      	ldrb	r3, [r4, #2]
 8005974:	f003 0102 	and.w	r1, r3, #2
            if (gc_state.modal.coolant != COOLANT_DISABLE) {
 8005978:	f89a 2008 	ldrb.w	r2, [sl, #8]
 800597c:	2a00      	cmp	r2, #0
 800597e:	f43f af4d 	beq.w	800581c <protocol_exec_rt_suspend+0xa0>
              if (bit_isfalse(sys.suspend,SUSPEND_RESTART_RETRACT)) {
 8005982:	2900      	cmp	r1, #0
 8005984:	f43f af3e 	beq.w	8005804 <protocol_exec_rt_suspend+0x88>
  rt_exec = sys_rt_exec_alarm; // Copy volatile sys_rt_exec_alarm.
 8005988:	4b42      	ldr	r3, [pc, #264]	; (8005a94 <protocol_exec_rt_suspend+0x318>)
 800598a:	781b      	ldrb	r3, [r3, #0]
  if (rt_exec) { // Enter only if any bit flag is true
 800598c:	f003 0bff 	and.w	fp, r3, #255	; 0xff
 8005990:	2b00      	cmp	r3, #0
 8005992:	f43f af51 	beq.w	8005838 <protocol_exec_rt_suspend+0xbc>
    sys.state = STATE_ALARM; // Set system alarm state
 8005996:	f04f 0901 	mov.w	r9, #1
    report_alarm_message(rt_exec);
 800599a:	4658      	mov	r0, fp
    if ((rt_exec == EXEC_ALARM_HARD_LIMIT) || (rt_exec == EXEC_ALARM_SOFT_LIMIT)) {
 800599c:	f10b 3bff 	add.w	fp, fp, #4294967295
    sys.state = STATE_ALARM; // Set system alarm state
 80059a0:	f884 9000 	strb.w	r9, [r4]
    report_alarm_message(rt_exec);
 80059a4:	f000 fee8 	bl	8006778 <report_alarm_message>
    if ((rt_exec == EXEC_ALARM_HARD_LIMIT) || (rt_exec == EXEC_ALARM_SOFT_LIMIT)) {
 80059a8:	45cb      	cmp	fp, r9
 80059aa:	f240 80f6 	bls.w	8005b9a <protocol_exec_rt_suspend+0x41e>
 80059ae:	f8df b0f4 	ldr.w	fp, [pc, #244]	; 8005aa4 <protocol_exec_rt_suspend+0x328>
    system_clear_exec_alarm(); // Clear alarm
 80059b2:	f004 f9f1 	bl	8009d98 <system_clear_exec_alarm>
 80059b6:	e741      	b.n	800583c <protocol_exec_rt_suspend+0xc0>
        if (sys.spindle_stop_ovr) {
 80059b8:	7ae3      	ldrb	r3, [r4, #11]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	f000 80b7 	beq.w	8005b2e <protocol_exec_rt_suspend+0x3b2>
          if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_INITIATE) {
 80059c0:	079a      	lsls	r2, r3, #30
 80059c2:	f140 80d8 	bpl.w	8005b76 <protocol_exec_rt_suspend+0x3fa>
            if (gc_state.modal.spindle != SPINDLE_DISABLE) {
 80059c6:	4b36      	ldr	r3, [pc, #216]	; (8005aa0 <protocol_exec_rt_suspend+0x324>)
 80059c8:	7a5b      	ldrb	r3, [r3, #9]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	f040 8127 	bne.w	8005c1e <protocol_exec_rt_suspend+0x4a2>
              sys.spindle_stop_ovr = SPINDLE_STOP_OVR_DISABLED; // Clear stop override state
 80059d0:	2300      	movs	r3, #0
 80059d2:	72e3      	strb	r3, [r4, #11]
 80059d4:	e729      	b.n	800582a <protocol_exec_rt_suspend+0xae>
    system_clear_exec_accessory_overrides(); // Clear all accessory override flags.
 80059d6:	f004 fa03 	bl	8009de0 <system_clear_exec_accessory_overrides>
    uint8_t last_s_override =  sys.spindle_speed_ovr;
 80059da:	f01b 0f01 	tst.w	fp, #1
 80059de:	bf18      	it	ne
 80059e0:	2364      	movne	r3, #100	; 0x64
 80059e2:	7aa2      	ldrb	r2, [r4, #10]
 80059e4:	bf08      	it	eq
 80059e6:	4613      	moveq	r3, r2
    if (rt_exec & EXEC_SPINDLE_OVR_COARSE_PLUS) { last_s_override += SPINDLE_OVERRIDE_COARSE_INCREMENT; }
 80059e8:	f01b 0f02 	tst.w	fp, #2
 80059ec:	bf1c      	itt	ne
 80059ee:	330a      	addne	r3, #10
 80059f0:	b2db      	uxtbne	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_COARSE_MINUS) { last_s_override -= SPINDLE_OVERRIDE_COARSE_INCREMENT; }
 80059f2:	f01b 0f04 	tst.w	fp, #4
 80059f6:	bf1c      	itt	ne
 80059f8:	3b0a      	subne	r3, #10
 80059fa:	b2db      	uxtbne	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_FINE_PLUS) { last_s_override += SPINDLE_OVERRIDE_FINE_INCREMENT; }
 80059fc:	f01b 0f08 	tst.w	fp, #8
 8005a00:	bf1c      	itt	ne
 8005a02:	3301      	addne	r3, #1
 8005a04:	b2db      	uxtbne	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_FINE_MINUS) { last_s_override -= SPINDLE_OVERRIDE_FINE_INCREMENT; }
 8005a06:	f01b 0f10 	tst.w	fp, #16
 8005a0a:	bf1c      	itt	ne
 8005a0c:	f103 33ff 	addne.w	r3, r3, #4294967295
 8005a10:	b2db      	uxtbne	r3, r3
    last_s_override = max(last_s_override,MIN_SPINDLE_SPEED_OVERRIDE);
 8005a12:	2bc8      	cmp	r3, #200	; 0xc8
 8005a14:	bf28      	it	cs
 8005a16:	23c8      	movcs	r3, #200	; 0xc8
 8005a18:	2b0a      	cmp	r3, #10
 8005a1a:	bf38      	it	cc
 8005a1c:	230a      	movcc	r3, #10
    if (last_s_override != sys.spindle_speed_ovr) {
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d006      	beq.n	8005a30 <protocol_exec_rt_suspend+0x2b4>
      sys.report_ovr_counter = 0; // Set to report change immediately
 8005a22:	2100      	movs	r1, #0
      bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 8005a24:	7922      	ldrb	r2, [r4, #4]
      sys.spindle_speed_ovr = last_s_override;
 8005a26:	72a3      	strb	r3, [r4, #10]
      bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 8005a28:	f042 0308 	orr.w	r3, r2, #8
 8005a2c:	7123      	strb	r3, [r4, #4]
      sys.report_ovr_counter = 0; // Set to report change immediately
 8005a2e:	7321      	strb	r1, [r4, #12]
    if (rt_exec & EXEC_SPINDLE_OVR_STOP) {
 8005a30:	f01b 0f20 	tst.w	fp, #32
 8005a34:	7823      	ldrb	r3, [r4, #0]
 8005a36:	f00b 02c0 	and.w	r2, fp, #192	; 0xc0
 8005a3a:	d002      	beq.n	8005a42 <protocol_exec_rt_suspend+0x2c6>
      if (sys.state == STATE_HOLD) {
 8005a3c:	2b10      	cmp	r3, #16
 8005a3e:	f000 80c1 	beq.w	8005bc4 <protocol_exec_rt_suspend+0x448>
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 8005a42:	2a00      	cmp	r2, #0
 8005a44:	f43f af7e 	beq.w	8005944 <protocol_exec_rt_suspend+0x1c8>
      if ((sys.state == STATE_IDLE) || (sys.state & (STATE_CYCLE | STATE_HOLD))) {
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	f040 80fa 	bne.w	8005c42 <protocol_exec_rt_suspend+0x4c6>
        uint8_t coolant_state = gc_state.modal.coolant;
 8005a4e:	f8df a050 	ldr.w	sl, [pc, #80]	; 8005aa0 <protocol_exec_rt_suspend+0x324>
          if (rt_exec & EXEC_COOLANT_MIST_OVR_TOGGLE) {
 8005a52:	f01b 0f80 	tst.w	fp, #128	; 0x80
        uint8_t coolant_state = gc_state.modal.coolant;
 8005a56:	f89a 9008 	ldrb.w	r9, [sl, #8]
          if (rt_exec & EXEC_COOLANT_MIST_OVR_TOGGLE) {
 8005a5a:	d006      	beq.n	8005a6a <protocol_exec_rt_suspend+0x2ee>
            if (coolant_state & COOLANT_MIST_ENABLE) { bit_false(coolant_state,COOLANT_MIST_ENABLE); }
 8005a5c:	f019 0f80 	tst.w	r9, #128	; 0x80
 8005a60:	bf14      	ite	ne
 8005a62:	f009 097f 	andne.w	r9, r9, #127	; 0x7f
            else { coolant_state |= COOLANT_MIST_ENABLE; }
 8005a66:	f049 0980 	orreq.w	r9, r9, #128	; 0x80
          if (rt_exec & EXEC_COOLANT_FLOOD_OVR_TOGGLE) {
 8005a6a:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8005a6e:	d006      	beq.n	8005a7e <protocol_exec_rt_suspend+0x302>
            if (coolant_state & COOLANT_FLOOD_ENABLE) { bit_false(coolant_state,COOLANT_FLOOD_ENABLE); }
 8005a70:	f019 0f40 	tst.w	r9, #64	; 0x40
 8005a74:	bf14      	ite	ne
 8005a76:	f009 09bf 	andne.w	r9, r9, #191	; 0xbf
            else { coolant_state |= COOLANT_FLOOD_ENABLE; }
 8005a7a:	f049 0940 	orreq.w	r9, r9, #64	; 0x40
        coolant_set_state(coolant_state); // Report counter set in coolant_set_state().
 8005a7e:	4648      	mov	r0, r9
 8005a80:	f7fc f89c 	bl	8001bbc <coolant_set_state>
 8005a84:	7823      	ldrb	r3, [r4, #0]
        gc_state.modal.coolant = coolant_state;
 8005a86:	f88a 9008 	strb.w	r9, [sl, #8]
 8005a8a:	e75b      	b.n	8005944 <protocol_exec_rt_suspend+0x1c8>
 8005a8c:	20001744 	.word	0x20001744
 8005a90:	20001408 	.word	0x20001408
 8005a94:	20001440 	.word	0x20001440
 8005a98:	20001404 	.word	0x20001404
 8005a9c:	2000141c 	.word	0x2000141c
 8005aa0:	2000136c 	.word	0x2000136c
 8005aa4:	2000141d 	.word	0x2000141d
    system_clear_exec_motion_overrides(); // Clear all motion override flags.
 8005aa8:	f004 f992 	bl	8009dd0 <system_clear_exec_motion_overrides>
    uint8_t new_f_override =  sys.f_override;
 8005aac:	f01b 0f01 	tst.w	fp, #1
 8005ab0:	bf18      	it	ne
 8005ab2:	2364      	movne	r3, #100	; 0x64
 8005ab4:	7a22      	ldrb	r2, [r4, #8]
    uint8_t new_r_override = sys.r_override;
 8005ab6:	7a60      	ldrb	r0, [r4, #9]
    uint8_t new_f_override =  sys.f_override;
 8005ab8:	bf08      	it	eq
 8005aba:	4613      	moveq	r3, r2
    if (rt_exec & EXEC_FEED_OVR_COARSE_PLUS) { new_f_override += FEED_OVERRIDE_COARSE_INCREMENT; }
 8005abc:	f01b 0f02 	tst.w	fp, #2
 8005ac0:	bf1c      	itt	ne
 8005ac2:	330a      	addne	r3, #10
 8005ac4:	b2db      	uxtbne	r3, r3
    if (rt_exec & EXEC_FEED_OVR_COARSE_MINUS) { new_f_override -= FEED_OVERRIDE_COARSE_INCREMENT; }
 8005ac6:	f01b 0f04 	tst.w	fp, #4
 8005aca:	bf1c      	itt	ne
 8005acc:	3b0a      	subne	r3, #10
 8005ace:	b2db      	uxtbne	r3, r3
    if (rt_exec & EXEC_FEED_OVR_FINE_PLUS) { new_f_override += FEED_OVERRIDE_FINE_INCREMENT; }
 8005ad0:	f01b 0f08 	tst.w	fp, #8
 8005ad4:	bf1c      	itt	ne
 8005ad6:	3301      	addne	r3, #1
 8005ad8:	b2db      	uxtbne	r3, r3
    if (rt_exec & EXEC_FEED_OVR_FINE_MINUS) { new_f_override -= FEED_OVERRIDE_FINE_INCREMENT; }
 8005ada:	f01b 0f10 	tst.w	fp, #16
 8005ade:	bf1c      	itt	ne
 8005ae0:	f103 33ff 	addne.w	r3, r3, #4294967295
 8005ae4:	b2db      	uxtbne	r3, r3
    new_f_override = max(new_f_override,MIN_FEED_RATE_OVERRIDE);
 8005ae6:	2bc8      	cmp	r3, #200	; 0xc8
 8005ae8:	bf28      	it	cs
 8005aea:	23c8      	movcs	r3, #200	; 0xc8
 8005aec:	2b0a      	cmp	r3, #10
 8005aee:	bf38      	it	cc
 8005af0:	230a      	movcc	r3, #10
    uint8_t new_r_override = sys.r_override;
 8005af2:	f01b 0f20 	tst.w	fp, #32
 8005af6:	bf14      	ite	ne
 8005af8:	2164      	movne	r1, #100	; 0x64
 8005afa:	4601      	moveq	r1, r0
    if (rt_exec & EXEC_RAPID_OVR_MEDIUM) { new_r_override = RAPID_OVERRIDE_MEDIUM; }
 8005afc:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8005b00:	bf18      	it	ne
 8005b02:	2132      	movne	r1, #50	; 0x32
    if (rt_exec & EXEC_RAPID_OVR_LOW) { new_r_override = RAPID_OVERRIDE_LOW; }
 8005b04:	f01b 0f80 	tst.w	fp, #128	; 0x80
 8005b08:	bf18      	it	ne
 8005b0a:	2119      	movne	r1, #25
    if ((new_f_override != sys.f_override) || (new_r_override != sys.r_override)) {
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d102      	bne.n	8005b16 <protocol_exec_rt_suspend+0x39a>
 8005b10:	4288      	cmp	r0, r1
 8005b12:	f43f af10 	beq.w	8005936 <protocol_exec_rt_suspend+0x1ba>
      sys.report_ovr_counter = 0; // Set to report change immediately
 8005b16:	2200      	movs	r2, #0
      sys.f_override = new_f_override;
 8005b18:	7223      	strb	r3, [r4, #8]
      sys.r_override = new_r_override;
 8005b1a:	7261      	strb	r1, [r4, #9]
      sys.report_ovr_counter = 0; // Set to report change immediately
 8005b1c:	7322      	strb	r2, [r4, #12]
      plan_update_velocity_profile_parameters();
 8005b1e:	f7fe fdfb 	bl	8004718 <plan_update_velocity_profile_parameters>
      plan_cycle_reinitialize();
 8005b22:	f7ff f8ed 	bl	8004d00 <plan_cycle_reinitialize>
 8005b26:	e706      	b.n	8005936 <protocol_exec_rt_suspend+0x1ba>
      sys.abort = true;  // Only place this is set true.
 8005b28:	2301      	movs	r3, #1
 8005b2a:	7063      	strb	r3, [r4, #1]
 8005b2c:	e639      	b.n	80057a2 <protocol_exec_rt_suspend+0x26>
          if (bit_istrue(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM)) {
 8005b2e:	7923      	ldrb	r3, [r4, #4]
 8005b30:	071b      	lsls	r3, r3, #28
 8005b32:	f57f ae7a 	bpl.w	800582a <protocol_exec_rt_suspend+0xae>
            spindle_set_state((restore_condition & (PL_COND_FLAG_SPINDLE_CW | PL_COND_FLAG_SPINDLE_CCW)), restore_spindle_speed);
 8005b36:	4641      	mov	r1, r8
 8005b38:	f006 0030 	and.w	r0, r6, #48	; 0x30
 8005b3c:	f002 fb1c 	bl	8008178 <spindle_set_state>
            bit_false(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 8005b40:	7923      	ldrb	r3, [r4, #4]
 8005b42:	f023 0308 	bic.w	r3, r3, #8
 8005b46:	7123      	strb	r3, [r4, #4]
 8005b48:	e66f      	b.n	800582a <protocol_exec_rt_suspend+0xae>
            spindle_set_state(SPINDLE_DISABLE,0.0f); // De-energize
 8005b4a:	4639      	mov	r1, r7
 8005b4c:	4658      	mov	r0, fp
          sys.spindle_stop_ovr = SPINDLE_STOP_OVR_DISABLED;
 8005b4e:	f884 b00b 	strb.w	fp, [r4, #11]
            spindle_set_state(SPINDLE_DISABLE,0.0f); // De-energize
 8005b52:	f002 fb11 	bl	8008178 <spindle_set_state>
            coolant_set_state(COOLANT_DISABLE);     // De-energize
 8005b56:	4658      	mov	r0, fp
 8005b58:	f7fc f830 	bl	8001bbc <coolant_set_state>
          sys.suspend &= ~(SUSPEND_RESTART_RETRACT);
 8005b5c:	78a3      	ldrb	r3, [r4, #2]
 8005b5e:	f023 0302 	bic.w	r3, r3, #2
          sys.suspend |= SUSPEND_RETRACT_COMPLETE;
 8005b62:	f043 0304 	orr.w	r3, r3, #4
 8005b66:	70a3      	strb	r3, [r4, #2]
 8005b68:	e65f      	b.n	800582a <protocol_exec_rt_suspend+0xae>
      report_realtime_status();
 8005b6a:	f001 fb75 	bl	8007258 <report_realtime_status>
      system_clear_exec_state_flag(EXEC_STATUS_REPORT);
 8005b6e:	2001      	movs	r0, #1
 8005b70:	f004 f900 	bl	8009d74 <system_clear_exec_state_flag>
 8005b74:	e670      	b.n	8005858 <protocol_exec_rt_suspend+0xdc>
          } else if (sys.spindle_stop_ovr & (SPINDLE_STOP_OVR_RESTORE | SPINDLE_STOP_OVR_RESTORE_CYCLE)) {
 8005b76:	f013 0f0c 	tst.w	r3, #12
 8005b7a:	f43f ae56 	beq.w	800582a <protocol_exec_rt_suspend+0xae>
            if (gc_state.modal.spindle != SPINDLE_DISABLE) {
 8005b7e:	4a89      	ldr	r2, [pc, #548]	; (8005da4 <protocol_exec_rt_suspend+0x628>)
 8005b80:	7a52      	ldrb	r2, [r2, #9]
 8005b82:	2a00      	cmp	r2, #0
 8005b84:	f040 80df 	bne.w	8005d46 <protocol_exec_rt_suspend+0x5ca>
            if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_RESTORE_CYCLE) {
 8005b88:	071a      	lsls	r2, r3, #28
 8005b8a:	f57f af21 	bpl.w	80059d0 <protocol_exec_rt_suspend+0x254>
              system_set_exec_state_flag(EXEC_CYCLE_START);  // Set to resume program.
 8005b8e:	2002      	movs	r0, #2
 8005b90:	f004 f8e6 	bl	8009d60 <system_set_exec_state_flag>
              sys.spindle_stop_ovr = SPINDLE_STOP_OVR_DISABLED; // Clear stop override state
 8005b94:	2300      	movs	r3, #0
 8005b96:	72e3      	strb	r3, [r4, #11]
 8005b98:	e647      	b.n	800582a <protocol_exec_rt_suspend+0xae>
      report_feedback_message(MESSAGE_CRITICAL_EVENT);
 8005b9a:	4648      	mov	r0, r9
 8005b9c:	f000 fe02 	bl	80067a4 <report_feedback_message>
      system_clear_exec_state_flag(EXEC_RESET); // Disable any existing reset
 8005ba0:	2010      	movs	r0, #16
 8005ba2:	f004 f8e7 	bl	8009d74 <system_clear_exec_state_flag>
 8005ba6:	f8df b200 	ldr.w	fp, [pc, #512]	; 8005da8 <protocol_exec_rt_suspend+0x62c>
      } while (bit_isfalse(sys_rt_exec_state,EXEC_RESET));
 8005baa:	f89b 3000 	ldrb.w	r3, [fp]
 8005bae:	06d8      	lsls	r0, r3, #27
 8005bb0:	d5fb      	bpl.n	8005baa <protocol_exec_rt_suspend+0x42e>
 8005bb2:	e6fe      	b.n	80059b2 <protocol_exec_rt_suspend+0x236>
          sys.state = STATE_SAFETY_DOOR;
 8005bb4:	2240      	movs	r2, #64	; 0x40
          sys.suspend &= ~(SUSPEND_JOG_CANCEL);
 8005bb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
          sys.suspend |= SUSPEND_HOLD_COMPLETE;
 8005bba:	f043 0301 	orr.w	r3, r3, #1
 8005bbe:	70a3      	strb	r3, [r4, #2]
          sys.state = STATE_SAFETY_DOOR;
 8005bc0:	7022      	strb	r2, [r4, #0]
 8005bc2:	e6ae      	b.n	8005922 <protocol_exec_rt_suspend+0x1a6>
        if (!(sys.spindle_stop_ovr)) { sys.spindle_stop_ovr = SPINDLE_STOP_OVR_INITIATE; }
 8005bc4:	7ae1      	ldrb	r1, [r4, #11]
 8005bc6:	b3b9      	cbz	r1, 8005c38 <protocol_exec_rt_suspend+0x4bc>
        else if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_ENABLED) { sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE; }
 8005bc8:	07c8      	lsls	r0, r1, #31
 8005bca:	d537      	bpl.n	8005c3c <protocol_exec_rt_suspend+0x4c0>
 8005bcc:	f041 0104 	orr.w	r1, r1, #4
 8005bd0:	72e1      	strb	r1, [r4, #11]
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 8005bd2:	2a00      	cmp	r2, #0
 8005bd4:	f47f af3b 	bne.w	8005a4e <protocol_exec_rt_suspend+0x2d2>
 8005bd8:	e6b8      	b.n	800594c <protocol_exec_rt_suspend+0x1d0>
          if (!(sys.suspend & (SUSPEND_MOTION_CANCEL | SUSPEND_JOG_CANCEL))) { // Block, if already holding.
 8005bda:	78a1      	ldrb	r1, [r4, #2]
 8005bdc:	f011 0fc0 	tst.w	r1, #192	; 0xc0
 8005be0:	f000 8084 	beq.w	8005cec <protocol_exec_rt_suspend+0x570>
 8005be4:	f00b 0040 	and.w	r0, fp, #64	; 0x40
 8005be8:	f00b 0108 	and.w	r1, fp, #8
        if (rt_exec & EXEC_MOTION_CANCEL) {
 8005bec:	2800      	cmp	r0, #0
 8005bee:	f43f ae4f 	beq.w	8005890 <protocol_exec_rt_suspend+0x114>
          if (!(sys.state & STATE_JOG)) { sys.suspend |= SUSPEND_MOTION_CANCEL; } // NOTE: State is STATE_CYCLE.
 8005bf2:	0698      	lsls	r0, r3, #26
 8005bf4:	f53f ae4c 	bmi.w	8005890 <protocol_exec_rt_suspend+0x114>
 8005bf8:	78a0      	ldrb	r0, [r4, #2]
 8005bfa:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8005bfe:	70a0      	strb	r0, [r4, #2]
 8005c00:	e646      	b.n	8005890 <protocol_exec_rt_suspend+0x114>
      if ((sys.state & (STATE_HOLD|STATE_SAFETY_DOOR|STATE_SLEEP)) && !(sys.soft_limit) && !(sys.suspend & SUSPEND_JOG_CANCEL)) {
 8005c02:	2a00      	cmp	r2, #0
 8005c04:	da65      	bge.n	8005cd2 <protocol_exec_rt_suspend+0x556>
          sys.step_control = STEP_CONTROL_NORMAL_OP;
 8005c06:	2300      	movs	r3, #0
 8005c08:	7123      	strb	r3, [r4, #4]
          plan_reset();
 8005c0a:	f7fe fccf 	bl	80045ac <plan_reset>
          st_reset();
 8005c0e:	f002 fe13 	bl	8008838 <st_reset>
          gc_sync_position();
 8005c12:	f7fc f8d5 	bl	8001dc0 <gc_sync_position>
          plan_sync_position();
 8005c16:	f7ff f84f 	bl	8004cb8 <plan_sync_position>
 8005c1a:	78a3      	ldrb	r3, [r4, #2]
 8005c1c:	e67b      	b.n	8005916 <protocol_exec_rt_suspend+0x19a>
              spindle_set_state(SPINDLE_DISABLE,0.0f); // De-energize
 8005c1e:	4639      	mov	r1, r7
 8005c20:	f002 faaa 	bl	8008178 <spindle_set_state>
              sys.spindle_stop_ovr = SPINDLE_STOP_OVR_ENABLED; // Set stop override state to enabled, if de-energized.
 8005c24:	2301      	movs	r3, #1
 8005c26:	72e3      	strb	r3, [r4, #11]
 8005c28:	e5ff      	b.n	800582a <protocol_exec_rt_suspend+0xae>
              sys.suspend = SUSPEND_DISABLE; // Break suspend state.
 8005c2a:	2300      	movs	r3, #0
      system_clear_exec_state_flag(EXEC_CYCLE_START);
 8005c2c:	2002      	movs	r0, #2
              sys.suspend = SUSPEND_DISABLE; // Break suspend state.
 8005c2e:	70a3      	strb	r3, [r4, #2]
              sys.state = STATE_IDLE;
 8005c30:	7023      	strb	r3, [r4, #0]
      system_clear_exec_state_flag(EXEC_CYCLE_START);
 8005c32:	f004 f89f 	bl	8009d74 <system_clear_exec_state_flag>
 8005c36:	e65e      	b.n	80058f6 <protocol_exec_rt_suspend+0x17a>
        if (!(sys.spindle_stop_ovr)) { sys.spindle_stop_ovr = SPINDLE_STOP_OVR_INITIATE; }
 8005c38:	2102      	movs	r1, #2
 8005c3a:	72e1      	strb	r1, [r4, #11]
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 8005c3c:	2a00      	cmp	r2, #0
 8005c3e:	f43f ae85 	beq.w	800594c <protocol_exec_rt_suspend+0x1d0>
      if ((sys.state == STATE_IDLE) || (sys.state & (STATE_CYCLE | STATE_HOLD))) {
 8005c42:	f013 0f18 	tst.w	r3, #24
 8005c46:	f43f ae7d 	beq.w	8005944 <protocol_exec_rt_suspend+0x1c8>
 8005c4a:	e700      	b.n	8005a4e <protocol_exec_rt_suspend+0x2d2>
        if (sys.state == STATE_ALARM) { sys.suspend |= (SUSPEND_RETRACT_COMPLETE|SUSPEND_HOLD_COMPLETE); }
 8005c4c:	7823      	ldrb	r3, [r4, #0]
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	d103      	bne.n	8005c5a <protocol_exec_rt_suspend+0x4de>
 8005c52:	78a3      	ldrb	r3, [r4, #2]
 8005c54:	f043 0305 	orr.w	r3, r3, #5
 8005c58:	70a3      	strb	r3, [r4, #2]
        sys.state = STATE_SLEEP; 
 8005c5a:	2380      	movs	r3, #128	; 0x80
 8005c5c:	7023      	strb	r3, [r4, #0]
 8005c5e:	e624      	b.n	80058aa <protocol_exec_rt_suspend+0x12e>
            if (!(system_check_safety_door_ajar())) {
 8005c60:	f003 fdba 	bl	80097d8 <system_check_safety_door_ajar>
              sys.suspend &= ~(SUSPEND_SAFETY_DOOR_AJAR); // Reset door ajar flag to denote ready to resume.
 8005c64:	78a3      	ldrb	r3, [r4, #2]
            if (!(system_check_safety_door_ajar())) {
 8005c66:	2800      	cmp	r0, #0
 8005c68:	f47f adb4 	bne.w	80057d4 <protocol_exec_rt_suspend+0x58>
              sys.suspend &= ~(SUSPEND_SAFETY_DOOR_AJAR); // Reset door ajar flag to denote ready to resume.
 8005c6c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005c70:	70a3      	strb	r3, [r4, #2]
 8005c72:	e5af      	b.n	80057d4 <protocol_exec_rt_suspend+0x58>
        system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_STOP);
 8005c74:	2020      	movs	r0, #32
 8005c76:	f004 f8a1 	bl	8009dbc <system_set_exec_accessory_override_flag>
 8005c7a:	e590      	b.n	800579e <protocol_exec_rt_suspend+0x22>
      restore_condition = (gc_state.modal.spindle | gc_state.modal.coolant);
 8005c7c:	4b49      	ldr	r3, [pc, #292]	; (8005da4 <protocol_exec_rt_suspend+0x628>)
 8005c7e:	7a5e      	ldrb	r6, [r3, #9]
 8005c80:	7a1a      	ldrb	r2, [r3, #8]
      restore_spindle_speed = gc_state.spindle_speed;
 8005c82:	f8d3 800c 	ldr.w	r8, [r3, #12]
      restore_condition = (gc_state.modal.spindle | gc_state.modal.coolant);
 8005c86:	4316      	orrs	r6, r2
 8005c88:	e583      	b.n	8005792 <protocol_exec_rt_suspend+0x16>
        if ((sys.state == STATE_SAFETY_DOOR) && !(sys.suspend & SUSPEND_SAFETY_DOOR_AJAR)) {
 8005c8a:	78a3      	ldrb	r3, [r4, #2]
 8005c8c:	f013 0220 	ands.w	r2, r3, #32
 8005c90:	f47f ae2e 	bne.w	80058f0 <protocol_exec_rt_suspend+0x174>
          if (sys.suspend & SUSPEND_RESTORE_COMPLETE) {
 8005c94:	06d9      	lsls	r1, r3, #27
 8005c96:	d47c      	bmi.n	8005d92 <protocol_exec_rt_suspend+0x616>
          } else if (sys.suspend & SUSPEND_RETRACT_COMPLETE) {
 8005c98:	0758      	lsls	r0, r3, #29
 8005c9a:	f57f ae29 	bpl.w	80058f0 <protocol_exec_rt_suspend+0x174>
            sys.suspend |= SUSPEND_INITIATE_RESTORE;
 8005c9e:	f043 0308 	orr.w	r3, r3, #8
 8005ca2:	70a3      	strb	r3, [r4, #2]
 8005ca4:	e624      	b.n	80058f0 <protocol_exec_rt_suspend+0x174>
          report_feedback_message(MESSAGE_SAFETY_DOOR_AJAR);
 8005ca6:	2006      	movs	r0, #6
 8005ca8:	9201      	str	r2, [sp, #4]
 8005caa:	f000 fd7b 	bl	80067a4 <report_feedback_message>
          if (!(sys.suspend & SUSPEND_JOG_CANCEL)) {
 8005cae:	78a3      	ldrb	r3, [r4, #2]
 8005cb0:	9a01      	ldr	r2, [sp, #4]
 8005cb2:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005cb6:	d104      	bne.n	8005cc2 <protocol_exec_rt_suspend+0x546>
            if (sys.state == STATE_SAFETY_DOOR) {
 8005cb8:	7821      	ldrb	r1, [r4, #0]
 8005cba:	2940      	cmp	r1, #64	; 0x40
 8005cbc:	d028      	beq.n	8005d10 <protocol_exec_rt_suspend+0x594>
            if (sys.state != STATE_SLEEP) { sys.state = STATE_SAFETY_DOOR; }
 8005cbe:	2980      	cmp	r1, #128	; 0x80
 8005cc0:	d12c      	bne.n	8005d1c <protocol_exec_rt_suspend+0x5a0>
          sys.suspend |= SUSPEND_SAFETY_DOOR_AJAR;
 8005cc2:	f043 0320 	orr.w	r3, r3, #32
 8005cc6:	70a3      	strb	r3, [r4, #2]
 8005cc8:	e5ec      	b.n	80058a4 <protocol_exec_rt_suspend+0x128>
        if (rt_exec & EXEC_FEED_HOLD) {
 8005cca:	2900      	cmp	r1, #0
 8005ccc:	f47f ade4 	bne.w	8005898 <protocol_exec_rt_suspend+0x11c>
 8005cd0:	e5e4      	b.n	800589c <protocol_exec_rt_suspend+0x120>
        plan_cycle_reinitialize();
 8005cd2:	f7ff f815 	bl	8004d00 <plan_cycle_reinitialize>
        if (sys.step_control & STEP_CONTROL_EXECUTE_HOLD) { sys.suspend |= SUSPEND_HOLD_COMPLETE; }
 8005cd6:	7923      	ldrb	r3, [r4, #4]
 8005cd8:	079a      	lsls	r2, r3, #30
 8005cda:	d503      	bpl.n	8005ce4 <protocol_exec_rt_suspend+0x568>
 8005cdc:	78a2      	ldrb	r2, [r4, #2]
 8005cde:	f042 0201 	orr.w	r2, r2, #1
 8005ce2:	70a2      	strb	r2, [r4, #2]
        bit_false(sys.step_control,(STEP_CONTROL_EXECUTE_HOLD | STEP_CONTROL_EXECUTE_SYS_MOTION));
 8005ce4:	f023 0306 	bic.w	r3, r3, #6
 8005ce8:	7123      	strb	r3, [r4, #4]
 8005cea:	e61a      	b.n	8005922 <protocol_exec_rt_suspend+0x1a6>
 8005cec:	9201      	str	r2, [sp, #4]
            st_update_plan_block_parameters(); // Notify stepper module to recompute for hold deceleration.
 8005cee:	f002 fef5 	bl	8008adc <st_update_plan_block_parameters>
            sys.step_control = STEP_CONTROL_EXECUTE_HOLD; // Initiate suspend state with active flag.
 8005cf2:	2102      	movs	r1, #2
            if (sys.state == STATE_JOG) { // Jog cancelled upon any hold event, except for sleeping.
 8005cf4:	7823      	ldrb	r3, [r4, #0]
            sys.step_control = STEP_CONTROL_EXECUTE_HOLD; // Initiate suspend state with active flag.
 8005cf6:	7121      	strb	r1, [r4, #4]
            if (sys.state == STATE_JOG) { // Jog cancelled upon any hold event, except for sleeping.
 8005cf8:	2b20      	cmp	r3, #32
 8005cfa:	9a01      	ldr	r2, [sp, #4]
 8005cfc:	f47f adb8 	bne.w	8005870 <protocol_exec_rt_suspend+0xf4>
              if (!(rt_exec & EXEC_SLEEP)) { sys.suspend |= SUSPEND_JOG_CANCEL; } 
 8005d00:	2a00      	cmp	r2, #0
 8005d02:	f6ff adcb 	blt.w	800589c <protocol_exec_rt_suspend+0x120>
 8005d06:	78a3      	ldrb	r3, [r4, #2]
 8005d08:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005d0c:	70a3      	strb	r3, [r4, #2]
 8005d0e:	e5c5      	b.n	800589c <protocol_exec_rt_suspend+0x120>
              if (sys.suspend & SUSPEND_INITIATE_RESTORE) { // Actively restoring
 8005d10:	0718      	lsls	r0, r3, #28
 8005d12:	d503      	bpl.n	8005d1c <protocol_exec_rt_suspend+0x5a0>
                sys.suspend &= ~(SUSPEND_RETRACT_COMPLETE | SUSPEND_INITIATE_RESTORE | SUSPEND_RESTORE_COMPLETE);
 8005d14:	f023 031c 	bic.w	r3, r3, #28
                sys.suspend |= SUSPEND_RESTART_RETRACT;
 8005d18:	f043 0302 	orr.w	r3, r3, #2
            if (sys.state != STATE_SLEEP) { sys.state = STATE_SAFETY_DOOR; }
 8005d1c:	2140      	movs	r1, #64	; 0x40
 8005d1e:	7021      	strb	r1, [r4, #0]
 8005d20:	e7cf      	b.n	8005cc2 <protocol_exec_rt_suspend+0x546>
        if ((sys.state == STATE_IDLE) || ((sys.state & STATE_HOLD) && (sys.suspend & SUSPEND_HOLD_COMPLETE))) {
 8005d22:	06da      	lsls	r2, r3, #27
 8005d24:	f57f ade4 	bpl.w	80058f0 <protocol_exec_rt_suspend+0x174>
 8005d28:	78a2      	ldrb	r2, [r4, #2]
 8005d2a:	07d1      	lsls	r1, r2, #31
 8005d2c:	f57f ade0 	bpl.w	80058f0 <protocol_exec_rt_suspend+0x174>
          if (sys.state == STATE_HOLD && sys.spindle_stop_ovr) {
 8005d30:	2b10      	cmp	r3, #16
 8005d32:	f47f adca 	bne.w	80058ca <protocol_exec_rt_suspend+0x14e>
 8005d36:	7ae3      	ldrb	r3, [r4, #11]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	f43f adc6 	beq.w	80058ca <protocol_exec_rt_suspend+0x14e>
            sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE_CYCLE; // Set to restore in suspend routine and cycle start after.
 8005d3e:	f043 0308 	orr.w	r3, r3, #8
 8005d42:	72e3      	strb	r3, [r4, #11]
 8005d44:	e5d4      	b.n	80058f0 <protocol_exec_rt_suspend+0x174>
              report_feedback_message(MESSAGE_SPINDLE_RESTORE);
 8005d46:	200a      	movs	r0, #10
 8005d48:	f000 fd2c 	bl	80067a4 <report_feedback_message>
              if (bit_istrue(settings.flags,BITFLAG_LASER_MODE)) {
 8005d4c:	f895 3058 	ldrb.w	r3, [r5, #88]	; 0x58
 8005d50:	0799      	lsls	r1, r3, #30
 8005d52:	d520      	bpl.n	8005d96 <protocol_exec_rt_suspend+0x61a>
                bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 8005d54:	7922      	ldrb	r2, [r4, #4]
 8005d56:	7ae3      	ldrb	r3, [r4, #11]
 8005d58:	f042 0208 	orr.w	r2, r2, #8
 8005d5c:	7122      	strb	r2, [r4, #4]
 8005d5e:	e713      	b.n	8005b88 <protocol_exec_rt_suspend+0x40c>
            report_feedback_message(MESSAGE_SLEEP_MODE);
 8005d60:	200b      	movs	r0, #11
 8005d62:	9201      	str	r2, [sp, #4]
 8005d64:	f000 fd1e 	bl	80067a4 <report_feedback_message>
            spindle_set_state(SPINDLE_DISABLE,0.0f); // De-energize
 8005d68:	9a01      	ldr	r2, [sp, #4]
 8005d6a:	2100      	movs	r1, #0
 8005d6c:	4610      	mov	r0, r2
 8005d6e:	f002 fa03 	bl	8008178 <spindle_set_state>
            coolant_set_state(COOLANT_DISABLE); // De-energize
 8005d72:	9a01      	ldr	r2, [sp, #4]
 8005d74:	4610      	mov	r0, r2
 8005d76:	f7fb ff21 	bl	8001bbc <coolant_set_state>
            st_go_idle(); // Disable steppers
 8005d7a:	f002 fb83 	bl	8008484 <st_go_idle>
            while (!(sys.abort)) { protocol_exec_rt_system(); } // Do nothing until reset.
 8005d7e:	7863      	ldrb	r3, [r4, #1]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	f47f ade9 	bne.w	8005958 <protocol_exec_rt_suspend+0x1dc>
 8005d86:	f7ff fb13 	bl	80053b0 <protocol_exec_rt_system>
 8005d8a:	7863      	ldrb	r3, [r4, #1]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d0fa      	beq.n	8005d86 <protocol_exec_rt_suspend+0x60a>
 8005d90:	e5e2      	b.n	8005958 <protocol_exec_rt_suspend+0x1dc>
            sys.state = STATE_IDLE; // Set to IDLE to immediately resume the cycle.
 8005d92:	7022      	strb	r2, [r4, #0]
 8005d94:	e599      	b.n	80058ca <protocol_exec_rt_suspend+0x14e>
                spindle_set_state((restore_condition & (PL_COND_FLAG_SPINDLE_CW | PL_COND_FLAG_SPINDLE_CCW)), restore_spindle_speed);
 8005d96:	4641      	mov	r1, r8
 8005d98:	f006 0030 	and.w	r0, r6, #48	; 0x30
 8005d9c:	f002 f9ec 	bl	8008178 <spindle_set_state>
 8005da0:	7ae3      	ldrb	r3, [r4, #11]
 8005da2:	e6f1      	b.n	8005b88 <protocol_exec_rt_suspend+0x40c>
 8005da4:	2000136c 	.word	0x2000136c
 8005da8:	2000141d 	.word	0x2000141d

08005dac <protocol_execute_realtime>:
{
 8005dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  rt_exec = sys_rt_exec_alarm; // Copy volatile sys_rt_exec_alarm.
 8005dae:	4bab      	ldr	r3, [pc, #684]	; (800605c <protocol_execute_realtime+0x2b0>)
 8005db0:	781b      	ldrb	r3, [r3, #0]
  if (rt_exec) { // Enter only if any bit flag is true
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	f040 80ba 	bne.w	8005f2c <protocol_execute_realtime+0x180>
 8005db8:	4ca9      	ldr	r4, [pc, #676]	; (8006060 <protocol_execute_realtime+0x2b4>)
 8005dba:	4daa      	ldr	r5, [pc, #680]	; (8006064 <protocol_execute_realtime+0x2b8>)
  rt_exec = sys_rt_exec_state; // Copy volatile sys_rt_exec_state.
 8005dbc:	782b      	ldrb	r3, [r5, #0]
  if (rt_exec) {
 8005dbe:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d05b      	beq.n	8005e7e <protocol_execute_realtime+0xd2>
    if (rt_exec & EXEC_RESET) {
 8005dc6:	06e8      	lsls	r0, r5, #27
 8005dc8:	f100 80ad 	bmi.w	8005f26 <protocol_execute_realtime+0x17a>
    if (rt_exec & EXEC_STATUS_REPORT) {
 8005dcc:	07e9      	lsls	r1, r5, #31
 8005dce:	f100 812b 	bmi.w	8006028 <protocol_execute_realtime+0x27c>
    if (rt_exec & (EXEC_MOTION_CANCEL | EXEC_FEED_HOLD | EXEC_SAFETY_DOOR | EXEC_SLEEP)) {
 8005dd2:	f015 0fe8 	tst.w	r5, #232	; 0xe8
 8005dd6:	d033      	beq.n	8005e40 <protocol_execute_realtime+0x94>
      if (!(sys.state & (STATE_ALARM | STATE_CHECK_MODE))) {
 8005dd8:	7823      	ldrb	r3, [r4, #0]
 8005dda:	b26e      	sxtb	r6, r5
 8005ddc:	079a      	lsls	r2, r3, #30
 8005dde:	d129      	bne.n	8005e34 <protocol_execute_realtime+0x88>
        if (sys.state & (STATE_CYCLE | STATE_JOG)) {
 8005de0:	f013 0f28 	tst.w	r3, #40	; 0x28
 8005de4:	f040 8154 	bne.w	8006090 <protocol_execute_realtime+0x2e4>
 8005de8:	f005 0140 	and.w	r1, r5, #64	; 0x40
 8005dec:	f005 0208 	and.w	r2, r5, #8
        if (sys.state == STATE_IDLE) { sys.suspend = SUSPEND_HOLD_COMPLETE; }
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	f040 8155 	bne.w	80060a0 <protocol_execute_realtime+0x2f4>
 8005df6:	2001      	movs	r0, #1
 8005df8:	70a0      	strb	r0, [r4, #2]
        if (rt_exec & EXEC_MOTION_CANCEL) {
 8005dfa:	2900      	cmp	r1, #0
 8005dfc:	f000 8177 	beq.w	80060ee <protocol_execute_realtime+0x342>
 8005e00:	2141      	movs	r1, #65	; 0x41
          if (!(sys.state & STATE_JOG)) { sys.suspend |= SUSPEND_MOTION_CANCEL; } // NOTE: State is STATE_CYCLE.
 8005e02:	70a1      	strb	r1, [r4, #2]
        if (rt_exec & EXEC_FEED_HOLD) {
 8005e04:	b11a      	cbz	r2, 8005e0e <protocol_execute_realtime+0x62>
          if (!(sys.state & (STATE_SAFETY_DOOR | STATE_JOG | STATE_SLEEP))) { sys.state = STATE_HOLD; }
 8005e06:	f013 0fe0 	tst.w	r3, #224	; 0xe0
 8005e0a:	f000 8173 	beq.w	80060f4 <protocol_execute_realtime+0x348>
        if (rt_exec & EXEC_SAFETY_DOOR) {
 8005e0e:	06a8      	lsls	r0, r5, #26
 8005e10:	d510      	bpl.n	8005e34 <protocol_execute_realtime+0x88>
          report_feedback_message(MESSAGE_SAFETY_DOOR_AJAR);
 8005e12:	2006      	movs	r0, #6
 8005e14:	f000 fcc6 	bl	80067a4 <report_feedback_message>
          if (!(sys.suspend & SUSPEND_JOG_CANCEL)) {
 8005e18:	78a3      	ldrb	r3, [r4, #2]
 8005e1a:	0619      	lsls	r1, r3, #24
 8005e1c:	d407      	bmi.n	8005e2e <protocol_execute_realtime+0x82>
            if (sys.state == STATE_SAFETY_DOOR) {
 8005e1e:	7822      	ldrb	r2, [r4, #0]
 8005e20:	2a40      	cmp	r2, #64	; 0x40
 8005e22:	f000 81a8 	beq.w	8006176 <protocol_execute_realtime+0x3ca>
            if (sys.state != STATE_SLEEP) { sys.state = STATE_SAFETY_DOOR; }
 8005e26:	2a80      	cmp	r2, #128	; 0x80
 8005e28:	d001      	beq.n	8005e2e <protocol_execute_realtime+0x82>
 8005e2a:	2240      	movs	r2, #64	; 0x40
 8005e2c:	7022      	strb	r2, [r4, #0]
          sys.suspend |= SUSPEND_SAFETY_DOOR_AJAR;
 8005e2e:	f043 0320 	orr.w	r3, r3, #32
 8005e32:	70a3      	strb	r3, [r4, #2]
      if (rt_exec & EXEC_SLEEP) {
 8005e34:	2e00      	cmp	r6, #0
 8005e36:	f2c0 8147 	blt.w	80060c8 <protocol_execute_realtime+0x31c>
      system_clear_exec_state_flag((EXEC_MOTION_CANCEL | EXEC_FEED_HOLD | EXEC_SAFETY_DOOR | EXEC_SLEEP));
 8005e3a:	20e8      	movs	r0, #232	; 0xe8
 8005e3c:	f003 ff9a 	bl	8009d74 <system_clear_exec_state_flag>
    if (rt_exec & EXEC_CYCLE_START) {
 8005e40:	07ab      	lsls	r3, r5, #30
 8005e42:	d519      	bpl.n	8005e78 <protocol_execute_realtime+0xcc>
      if (!(rt_exec & (EXEC_FEED_HOLD | EXEC_MOTION_CANCEL | EXEC_SAFETY_DOOR))) {
 8005e44:	f015 0f68 	tst.w	r5, #104	; 0x68
 8005e48:	d113      	bne.n	8005e72 <protocol_execute_realtime+0xc6>
        if ((sys.state == STATE_SAFETY_DOOR) && !(sys.suspend & SUSPEND_SAFETY_DOOR_AJAR)) {
 8005e4a:	7823      	ldrb	r3, [r4, #0]
 8005e4c:	2b40      	cmp	r3, #64	; 0x40
 8005e4e:	f000 8132 	beq.w	80060b6 <protocol_execute_realtime+0x30a>
        if ((sys.state == STATE_IDLE) || ((sys.state & STATE_HOLD) && (sys.suspend & SUSPEND_HOLD_COMPLETE))) {
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	f040 8151 	bne.w	80060fa <protocol_execute_realtime+0x34e>
            sys.step_control = STEP_CONTROL_NORMAL_OP; // Restore step control to normal operation
 8005e58:	2300      	movs	r3, #0
 8005e5a:	7123      	strb	r3, [r4, #4]
            if (plan_get_current_block() && bit_isfalse(sys.suspend,SUSPEND_MOTION_CANCEL)) {
 8005e5c:	f7fe fbea 	bl	8004634 <plan_get_current_block>
 8005e60:	b120      	cbz	r0, 8005e6c <protocol_execute_realtime+0xc0>
 8005e62:	78a3      	ldrb	r3, [r4, #2]
 8005e64:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8005e68:	f000 8176 	beq.w	8006158 <protocol_execute_realtime+0x3ac>
              sys.suspend = SUSPEND_DISABLE; // Break suspend state.
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	70a3      	strb	r3, [r4, #2]
              sys.state = STATE_IDLE;
 8005e70:	7023      	strb	r3, [r4, #0]
      system_clear_exec_state_flag(EXEC_CYCLE_START);
 8005e72:	2002      	movs	r0, #2
 8005e74:	f003 ff7e 	bl	8009d74 <system_clear_exec_state_flag>
    if (rt_exec & EXEC_CYCLE_STOP) {
 8005e78:	0769      	lsls	r1, r5, #29
 8005e7a:	f100 80bd 	bmi.w	8005ff8 <protocol_execute_realtime+0x24c>
  rt_exec = sys_rt_exec_motion_override; // Copy volatile sys_rt_exec_motion_override
 8005e7e:	4b7a      	ldr	r3, [pc, #488]	; (8006068 <protocol_execute_realtime+0x2bc>)
 8005e80:	781b      	ldrb	r3, [r3, #0]
  if (rt_exec) {
 8005e82:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d17b      	bne.n	8005f82 <protocol_execute_realtime+0x1d6>
  rt_exec = sys_rt_exec_accessory_override;
 8005e8a:	4b78      	ldr	r3, [pc, #480]	; (800606c <protocol_execute_realtime+0x2c0>)
 8005e8c:	781b      	ldrb	r3, [r3, #0]
  if (rt_exec) {
 8005e8e:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8005e92:	b93b      	cbnz	r3, 8005ea4 <protocol_execute_realtime+0xf8>
 8005e94:	7823      	ldrb	r3, [r4, #0]
  if (sys.state & (STATE_CYCLE | STATE_HOLD | STATE_SAFETY_DOOR | STATE_HOMING | STATE_SLEEP| STATE_JOG)) {
 8005e96:	f013 0ffc 	tst.w	r3, #252	; 0xfc
 8005e9a:	d13b      	bne.n	8005f14 <protocol_execute_realtime+0x168>
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 8005e9c:	78a3      	ldrb	r3, [r4, #2]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d13d      	bne.n	8005f1e <protocol_execute_realtime+0x172>
}
 8005ea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    system_clear_exec_accessory_overrides(); // Clear all accessory override flags.
 8005ea4:	f003 ff9c 	bl	8009de0 <system_clear_exec_accessory_overrides>
    uint8_t last_s_override =  sys.spindle_speed_ovr;
 8005ea8:	7aa2      	ldrb	r2, [r4, #10]
 8005eaa:	f015 0f01 	tst.w	r5, #1
 8005eae:	bf0c      	ite	eq
 8005eb0:	4613      	moveq	r3, r2
 8005eb2:	2364      	movne	r3, #100	; 0x64
    if (rt_exec & EXEC_SPINDLE_OVR_COARSE_PLUS) { last_s_override += SPINDLE_OVERRIDE_COARSE_INCREMENT; }
 8005eb4:	07ae      	lsls	r6, r5, #30
 8005eb6:	bf44      	itt	mi
 8005eb8:	330a      	addmi	r3, #10
 8005eba:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_COARSE_MINUS) { last_s_override -= SPINDLE_OVERRIDE_COARSE_INCREMENT; }
 8005ebc:	0768      	lsls	r0, r5, #29
 8005ebe:	bf44      	itt	mi
 8005ec0:	3b0a      	submi	r3, #10
 8005ec2:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_FINE_PLUS) { last_s_override += SPINDLE_OVERRIDE_FINE_INCREMENT; }
 8005ec4:	0729      	lsls	r1, r5, #28
 8005ec6:	bf44      	itt	mi
 8005ec8:	3301      	addmi	r3, #1
 8005eca:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_FINE_MINUS) { last_s_override -= SPINDLE_OVERRIDE_FINE_INCREMENT; }
 8005ecc:	06ef      	lsls	r7, r5, #27
 8005ece:	bf44      	itt	mi
 8005ed0:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8005ed4:	b2db      	uxtbmi	r3, r3
    last_s_override = max(last_s_override,MIN_SPINDLE_SPEED_OVERRIDE);
 8005ed6:	2bc8      	cmp	r3, #200	; 0xc8
 8005ed8:	bf28      	it	cs
 8005eda:	23c8      	movcs	r3, #200	; 0xc8
 8005edc:	2b0a      	cmp	r3, #10
 8005ede:	bf38      	it	cc
 8005ee0:	230a      	movcc	r3, #10
    if (last_s_override != sys.spindle_speed_ovr) {
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	d006      	beq.n	8005ef4 <protocol_execute_realtime+0x148>
      sys.report_ovr_counter = 0; // Set to report change immediately
 8005ee6:	2100      	movs	r1, #0
      bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 8005ee8:	7922      	ldrb	r2, [r4, #4]
      sys.spindle_speed_ovr = last_s_override;
 8005eea:	72a3      	strb	r3, [r4, #10]
      bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 8005eec:	f042 0308 	orr.w	r3, r2, #8
 8005ef0:	7123      	strb	r3, [r4, #4]
      sys.report_ovr_counter = 0; // Set to report change immediately
 8005ef2:	7321      	strb	r1, [r4, #12]
    if (rt_exec & EXEC_SPINDLE_OVR_STOP) {
 8005ef4:	06ae      	lsls	r6, r5, #26
 8005ef6:	7823      	ldrb	r3, [r4, #0]
 8005ef8:	f005 02c0 	and.w	r2, r5, #192	; 0xc0
 8005efc:	d525      	bpl.n	8005f4a <protocol_execute_realtime+0x19e>
      if (sys.state == STATE_HOLD) {
 8005efe:	2b10      	cmp	r3, #16
 8005f00:	d123      	bne.n	8005f4a <protocol_execute_realtime+0x19e>
        if (!(sys.spindle_stop_ovr)) { sys.spindle_stop_ovr = SPINDLE_STOP_OVR_INITIATE; }
 8005f02:	7ae1      	ldrb	r1, [r4, #11]
 8005f04:	2900      	cmp	r1, #0
 8005f06:	f040 80e9 	bne.w	80060dc <protocol_execute_realtime+0x330>
 8005f0a:	2102      	movs	r1, #2
 8005f0c:	72e1      	strb	r1, [r4, #11]
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 8005f0e:	2a00      	cmp	r2, #0
 8005f10:	f040 809e 	bne.w	8006050 <protocol_execute_realtime+0x2a4>
    st_prep_buffer();
 8005f14:	f002 fdf8 	bl	8008b08 <st_prep_buffer>
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 8005f18:	78a3      	ldrb	r3, [r4, #2]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d0c1      	beq.n	8005ea2 <protocol_execute_realtime+0xf6>
}
 8005f1e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 8005f22:	f7ff bc2b 	b.w	800577c <protocol_exec_rt_suspend>
      sys.abort = true;  // Only place this is set true.
 8005f26:	2301      	movs	r3, #1
 8005f28:	7063      	strb	r3, [r4, #1]
 8005f2a:	e7b7      	b.n	8005e9c <protocol_execute_realtime+0xf0>
    sys.state = STATE_ALARM; // Set system alarm state
 8005f2c:	2601      	movs	r6, #1
 8005f2e:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8005f32:	4c4b      	ldr	r4, [pc, #300]	; (8006060 <protocol_execute_realtime+0x2b4>)
    report_alarm_message(rt_exec);
 8005f34:	4628      	mov	r0, r5
    if ((rt_exec == EXEC_ALARM_HARD_LIMIT) || (rt_exec == EXEC_ALARM_SOFT_LIMIT)) {
 8005f36:	3d01      	subs	r5, #1
    sys.state = STATE_ALARM; // Set system alarm state
 8005f38:	7026      	strb	r6, [r4, #0]
    report_alarm_message(rt_exec);
 8005f3a:	f000 fc1d 	bl	8006778 <report_alarm_message>
    if ((rt_exec == EXEC_ALARM_HARD_LIMIT) || (rt_exec == EXEC_ALARM_SOFT_LIMIT)) {
 8005f3e:	42b5      	cmp	r5, r6
 8005f40:	d978      	bls.n	8006034 <protocol_execute_realtime+0x288>
 8005f42:	4d48      	ldr	r5, [pc, #288]	; (8006064 <protocol_execute_realtime+0x2b8>)
    system_clear_exec_alarm(); // Clear alarm
 8005f44:	f003 ff28 	bl	8009d98 <system_clear_exec_alarm>
 8005f48:	e738      	b.n	8005dbc <protocol_execute_realtime+0x10>
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 8005f4a:	2a00      	cmp	r2, #0
 8005f4c:	d0a3      	beq.n	8005e96 <protocol_execute_realtime+0xea>
      if ((sys.state == STATE_IDLE) || (sys.state & (STATE_CYCLE | STATE_HOLD))) {
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d17e      	bne.n	8006050 <protocol_execute_realtime+0x2a4>
        uint8_t coolant_state = gc_state.modal.coolant;
 8005f52:	4f47      	ldr	r7, [pc, #284]	; (8006070 <protocol_execute_realtime+0x2c4>)
          if (rt_exec & EXEC_COOLANT_MIST_OVR_TOGGLE) {
 8005f54:	062a      	lsls	r2, r5, #24
        uint8_t coolant_state = gc_state.modal.coolant;
 8005f56:	7a3e      	ldrb	r6, [r7, #8]
          if (rt_exec & EXEC_COOLANT_MIST_OVR_TOGGLE) {
 8005f58:	d505      	bpl.n	8005f66 <protocol_execute_realtime+0x1ba>
            if (coolant_state & COOLANT_MIST_ENABLE) { bit_false(coolant_state,COOLANT_MIST_ENABLE); }
 8005f5a:	0633      	lsls	r3, r6, #24
 8005f5c:	bf4c      	ite	mi
 8005f5e:	f006 067f 	andmi.w	r6, r6, #127	; 0x7f
            else { coolant_state |= COOLANT_MIST_ENABLE; }
 8005f62:	f046 0680 	orrpl.w	r6, r6, #128	; 0x80
          if (rt_exec & EXEC_COOLANT_FLOOD_OVR_TOGGLE) {
 8005f66:	0668      	lsls	r0, r5, #25
 8005f68:	d505      	bpl.n	8005f76 <protocol_execute_realtime+0x1ca>
            if (coolant_state & COOLANT_FLOOD_ENABLE) { bit_false(coolant_state,COOLANT_FLOOD_ENABLE); }
 8005f6a:	0671      	lsls	r1, r6, #25
 8005f6c:	bf4c      	ite	mi
 8005f6e:	f006 06bf 	andmi.w	r6, r6, #191	; 0xbf
            else { coolant_state |= COOLANT_FLOOD_ENABLE; }
 8005f72:	f046 0640 	orrpl.w	r6, r6, #64	; 0x40
        coolant_set_state(coolant_state); // Report counter set in coolant_set_state().
 8005f76:	4630      	mov	r0, r6
 8005f78:	f7fb fe20 	bl	8001bbc <coolant_set_state>
 8005f7c:	7823      	ldrb	r3, [r4, #0]
        gc_state.modal.coolant = coolant_state;
 8005f7e:	723e      	strb	r6, [r7, #8]
 8005f80:	e789      	b.n	8005e96 <protocol_execute_realtime+0xea>
    system_clear_exec_motion_overrides(); // Clear all motion override flags.
 8005f82:	f003 ff25 	bl	8009dd0 <system_clear_exec_motion_overrides>
    uint8_t new_f_override =  sys.f_override;
 8005f86:	7a21      	ldrb	r1, [r4, #8]
 8005f88:	f015 0f01 	tst.w	r5, #1
 8005f8c:	bf0c      	ite	eq
 8005f8e:	460b      	moveq	r3, r1
 8005f90:	2364      	movne	r3, #100	; 0x64
    if (rt_exec & EXEC_FEED_OVR_COARSE_PLUS) { new_f_override += FEED_OVERRIDE_COARSE_INCREMENT; }
 8005f92:	07af      	lsls	r7, r5, #30
 8005f94:	bf44      	itt	mi
 8005f96:	330a      	addmi	r3, #10
 8005f98:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_FEED_OVR_COARSE_MINUS) { new_f_override -= FEED_OVERRIDE_COARSE_INCREMENT; }
 8005f9a:	076e      	lsls	r6, r5, #29
 8005f9c:	bf44      	itt	mi
 8005f9e:	3b0a      	submi	r3, #10
 8005fa0:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_FEED_OVR_FINE_PLUS) { new_f_override += FEED_OVERRIDE_FINE_INCREMENT; }
 8005fa2:	0728      	lsls	r0, r5, #28
 8005fa4:	bf44      	itt	mi
 8005fa6:	3301      	addmi	r3, #1
 8005fa8:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_FEED_OVR_FINE_MINUS) { new_f_override -= FEED_OVERRIDE_FINE_INCREMENT; }
 8005faa:	06ef      	lsls	r7, r5, #27
 8005fac:	bf44      	itt	mi
 8005fae:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8005fb2:	b2db      	uxtbmi	r3, r3
    new_f_override = max(new_f_override,MIN_FEED_RATE_OVERRIDE);
 8005fb4:	2bc8      	cmp	r3, #200	; 0xc8
 8005fb6:	bf28      	it	cs
 8005fb8:	23c8      	movcs	r3, #200	; 0xc8
 8005fba:	2b0a      	cmp	r3, #10
 8005fbc:	bf38      	it	cc
 8005fbe:	230a      	movcc	r3, #10
    uint8_t new_r_override = sys.r_override;
 8005fc0:	7a60      	ldrb	r0, [r4, #9]
 8005fc2:	f015 0f20 	tst.w	r5, #32
 8005fc6:	bf14      	ite	ne
 8005fc8:	2264      	movne	r2, #100	; 0x64
 8005fca:	4602      	moveq	r2, r0
    if (rt_exec & EXEC_RAPID_OVR_MEDIUM) { new_r_override = RAPID_OVERRIDE_MEDIUM; }
 8005fcc:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005fd0:	bf18      	it	ne
 8005fd2:	2232      	movne	r2, #50	; 0x32
    if (rt_exec & EXEC_RAPID_OVR_LOW) { new_r_override = RAPID_OVERRIDE_LOW; }
 8005fd4:	f015 0f80 	tst.w	r5, #128	; 0x80
 8005fd8:	bf18      	it	ne
 8005fda:	2219      	movne	r2, #25
    if ((new_f_override != sys.f_override) || (new_r_override != sys.r_override)) {
 8005fdc:	4299      	cmp	r1, r3
 8005fde:	d102      	bne.n	8005fe6 <protocol_execute_realtime+0x23a>
 8005fe0:	4290      	cmp	r0, r2
 8005fe2:	f43f af52 	beq.w	8005e8a <protocol_execute_realtime+0xde>
      sys.report_ovr_counter = 0; // Set to report change immediately
 8005fe6:	2100      	movs	r1, #0
      sys.f_override = new_f_override;
 8005fe8:	7223      	strb	r3, [r4, #8]
      sys.r_override = new_r_override;
 8005fea:	7262      	strb	r2, [r4, #9]
      sys.report_ovr_counter = 0; // Set to report change immediately
 8005fec:	7321      	strb	r1, [r4, #12]
      plan_update_velocity_profile_parameters();
 8005fee:	f7fe fb93 	bl	8004718 <plan_update_velocity_profile_parameters>
      plan_cycle_reinitialize();
 8005ff2:	f7fe fe85 	bl	8004d00 <plan_cycle_reinitialize>
 8005ff6:	e748      	b.n	8005e8a <protocol_execute_realtime+0xde>
      if ((sys.state & (STATE_HOLD|STATE_SAFETY_DOOR|STATE_SLEEP)) && !(sys.soft_limit) && !(sys.suspend & SUSPEND_JOG_CANCEL)) {
 8005ff8:	7822      	ldrb	r2, [r4, #0]
 8005ffa:	78a3      	ldrb	r3, [r4, #2]
 8005ffc:	f012 0fd0 	tst.w	r2, #208	; 0xd0
 8006000:	b259      	sxtb	r1, r3
 8006002:	d001      	beq.n	8006008 <protocol_execute_realtime+0x25c>
 8006004:	78e2      	ldrb	r2, [r4, #3]
 8006006:	b3aa      	cbz	r2, 8006074 <protocol_execute_realtime+0x2c8>
        if (sys.suspend & SUSPEND_JOG_CANCEL) {   // For jog cancel, flush buffers and sync positions.
 8006008:	2900      	cmp	r1, #0
 800600a:	db35      	blt.n	8006078 <protocol_execute_realtime+0x2cc>
        if (sys.suspend & SUSPEND_SAFETY_DOOR_AJAR) { // Only occurs when safety door opens during jog.
 800600c:	f013 0220 	ands.w	r2, r3, #32
 8006010:	d01b      	beq.n	800604a <protocol_execute_realtime+0x29e>
          sys.state = STATE_SAFETY_DOOR;
 8006012:	2240      	movs	r2, #64	; 0x40
          sys.suspend &= ~(SUSPEND_JOG_CANCEL);
 8006014:	f003 037f 	and.w	r3, r3, #127	; 0x7f
          sys.suspend |= SUSPEND_HOLD_COMPLETE;
 8006018:	f043 0301 	orr.w	r3, r3, #1
 800601c:	70a3      	strb	r3, [r4, #2]
          sys.state = STATE_SAFETY_DOOR;
 800601e:	7022      	strb	r2, [r4, #0]
      system_clear_exec_state_flag(EXEC_CYCLE_STOP);
 8006020:	2004      	movs	r0, #4
 8006022:	f003 fea7 	bl	8009d74 <system_clear_exec_state_flag>
 8006026:	e72a      	b.n	8005e7e <protocol_execute_realtime+0xd2>
      report_realtime_status();
 8006028:	f001 f916 	bl	8007258 <report_realtime_status>
      system_clear_exec_state_flag(EXEC_STATUS_REPORT);
 800602c:	2001      	movs	r0, #1
 800602e:	f003 fea1 	bl	8009d74 <system_clear_exec_state_flag>
 8006032:	e6ce      	b.n	8005dd2 <protocol_execute_realtime+0x26>
      report_feedback_message(MESSAGE_CRITICAL_EVENT);
 8006034:	4630      	mov	r0, r6
 8006036:	f000 fbb5 	bl	80067a4 <report_feedback_message>
      system_clear_exec_state_flag(EXEC_RESET); // Disable any existing reset
 800603a:	2010      	movs	r0, #16
 800603c:	f003 fe9a 	bl	8009d74 <system_clear_exec_state_flag>
 8006040:	4d08      	ldr	r5, [pc, #32]	; (8006064 <protocol_execute_realtime+0x2b8>)
      } while (bit_isfalse(sys_rt_exec_state,EXEC_RESET));
 8006042:	782b      	ldrb	r3, [r5, #0]
 8006044:	06de      	lsls	r6, r3, #27
 8006046:	d5fc      	bpl.n	8006042 <protocol_execute_realtime+0x296>
 8006048:	e77c      	b.n	8005f44 <protocol_execute_realtime+0x198>
          sys.suspend = SUSPEND_DISABLE;
 800604a:	70a2      	strb	r2, [r4, #2]
          sys.state = STATE_IDLE;
 800604c:	7022      	strb	r2, [r4, #0]
 800604e:	e7e7      	b.n	8006020 <protocol_execute_realtime+0x274>
      if ((sys.state == STATE_IDLE) || (sys.state & (STATE_CYCLE | STATE_HOLD))) {
 8006050:	f013 0f18 	tst.w	r3, #24
 8006054:	f43f af1f 	beq.w	8005e96 <protocol_execute_realtime+0xea>
 8006058:	e77b      	b.n	8005f52 <protocol_execute_realtime+0x1a6>
 800605a:	bf00      	nop
 800605c:	20001440 	.word	0x20001440
 8006060:	20001408 	.word	0x20001408
 8006064:	2000141d 	.word	0x2000141d
 8006068:	20001404 	.word	0x20001404
 800606c:	2000141c 	.word	0x2000141c
 8006070:	2000136c 	.word	0x2000136c
      if ((sys.state & (STATE_HOLD|STATE_SAFETY_DOOR|STATE_SLEEP)) && !(sys.soft_limit) && !(sys.suspend & SUSPEND_JOG_CANCEL)) {
 8006074:	2900      	cmp	r1, #0
 8006076:	da52      	bge.n	800611e <protocol_execute_realtime+0x372>
          sys.step_control = STEP_CONTROL_NORMAL_OP;
 8006078:	2300      	movs	r3, #0
 800607a:	7123      	strb	r3, [r4, #4]
          plan_reset();
 800607c:	f7fe fa96 	bl	80045ac <plan_reset>
          st_reset();
 8006080:	f002 fbda 	bl	8008838 <st_reset>
          gc_sync_position();
 8006084:	f7fb fe9c 	bl	8001dc0 <gc_sync_position>
          plan_sync_position();
 8006088:	f7fe fe16 	bl	8004cb8 <plan_sync_position>
 800608c:	78a3      	ldrb	r3, [r4, #2]
 800608e:	e7bd      	b.n	800600c <protocol_execute_realtime+0x260>
          if (!(sys.suspend & (SUSPEND_MOTION_CANCEL | SUSPEND_JOG_CANCEL))) { // Block, if already holding.
 8006090:	78a2      	ldrb	r2, [r4, #2]
 8006092:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 8006096:	d04f      	beq.n	8006138 <protocol_execute_realtime+0x38c>
 8006098:	f005 0140 	and.w	r1, r5, #64	; 0x40
 800609c:	f005 0208 	and.w	r2, r5, #8
        if (rt_exec & EXEC_MOTION_CANCEL) {
 80060a0:	2900      	cmp	r1, #0
 80060a2:	f43f aeaf 	beq.w	8005e04 <protocol_execute_realtime+0x58>
          if (!(sys.state & STATE_JOG)) { sys.suspend |= SUSPEND_MOTION_CANCEL; } // NOTE: State is STATE_CYCLE.
 80060a6:	069f      	lsls	r7, r3, #26
 80060a8:	f53f aeac 	bmi.w	8005e04 <protocol_execute_realtime+0x58>
 80060ac:	78a1      	ldrb	r1, [r4, #2]
 80060ae:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80060b2:	70a1      	strb	r1, [r4, #2]
 80060b4:	e6a6      	b.n	8005e04 <protocol_execute_realtime+0x58>
        if ((sys.state == STATE_SAFETY_DOOR) && !(sys.suspend & SUSPEND_SAFETY_DOOR_AJAR)) {
 80060b6:	78a3      	ldrb	r3, [r4, #2]
 80060b8:	f013 0220 	ands.w	r2, r3, #32
 80060bc:	f47f aed9 	bne.w	8005e72 <protocol_execute_realtime+0xc6>
          if (sys.suspend & SUSPEND_RESTORE_COMPLETE) {
 80060c0:	06df      	lsls	r7, r3, #27
 80060c2:	d551      	bpl.n	8006168 <protocol_execute_realtime+0x3bc>
            sys.state = STATE_IDLE; // Set to IDLE to immediately resume the cycle.
 80060c4:	7022      	strb	r2, [r4, #0]
 80060c6:	e6c7      	b.n	8005e58 <protocol_execute_realtime+0xac>
        if (sys.state == STATE_ALARM) { sys.suspend |= (SUSPEND_RETRACT_COMPLETE|SUSPEND_HOLD_COMPLETE); }
 80060c8:	7823      	ldrb	r3, [r4, #0]
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	d103      	bne.n	80060d6 <protocol_execute_realtime+0x32a>
 80060ce:	78a3      	ldrb	r3, [r4, #2]
 80060d0:	f043 0305 	orr.w	r3, r3, #5
 80060d4:	70a3      	strb	r3, [r4, #2]
        sys.state = STATE_SLEEP; 
 80060d6:	2380      	movs	r3, #128	; 0x80
 80060d8:	7023      	strb	r3, [r4, #0]
 80060da:	e6ae      	b.n	8005e3a <protocol_execute_realtime+0x8e>
        else if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_ENABLED) { sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE; }
 80060dc:	07c8      	lsls	r0, r1, #31
 80060de:	d502      	bpl.n	80060e6 <protocol_execute_realtime+0x33a>
 80060e0:	f041 0104 	orr.w	r1, r1, #4
 80060e4:	72e1      	strb	r1, [r4, #11]
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 80060e6:	2a00      	cmp	r2, #0
 80060e8:	f47f af33 	bne.w	8005f52 <protocol_execute_realtime+0x1a6>
 80060ec:	e712      	b.n	8005f14 <protocol_execute_realtime+0x168>
        if (rt_exec & EXEC_FEED_HOLD) {
 80060ee:	2a00      	cmp	r2, #0
 80060f0:	f43f ae8d 	beq.w	8005e0e <protocol_execute_realtime+0x62>
          if (!(sys.state & (STATE_SAFETY_DOOR | STATE_JOG | STATE_SLEEP))) { sys.state = STATE_HOLD; }
 80060f4:	2310      	movs	r3, #16
 80060f6:	7023      	strb	r3, [r4, #0]
 80060f8:	e689      	b.n	8005e0e <protocol_execute_realtime+0x62>
        if ((sys.state == STATE_IDLE) || ((sys.state & STATE_HOLD) && (sys.suspend & SUSPEND_HOLD_COMPLETE))) {
 80060fa:	06da      	lsls	r2, r3, #27
 80060fc:	f57f aeb9 	bpl.w	8005e72 <protocol_execute_realtime+0xc6>
 8006100:	78a2      	ldrb	r2, [r4, #2]
 8006102:	07d0      	lsls	r0, r2, #31
 8006104:	f57f aeb5 	bpl.w	8005e72 <protocol_execute_realtime+0xc6>
          if (sys.state == STATE_HOLD && sys.spindle_stop_ovr) {
 8006108:	2b10      	cmp	r3, #16
 800610a:	f47f aea5 	bne.w	8005e58 <protocol_execute_realtime+0xac>
 800610e:	7ae3      	ldrb	r3, [r4, #11]
 8006110:	2b00      	cmp	r3, #0
 8006112:	f43f aea1 	beq.w	8005e58 <protocol_execute_realtime+0xac>
            sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE_CYCLE; // Set to restore in suspend routine and cycle start after.
 8006116:	f043 0308 	orr.w	r3, r3, #8
 800611a:	72e3      	strb	r3, [r4, #11]
 800611c:	e6a9      	b.n	8005e72 <protocol_execute_realtime+0xc6>
        plan_cycle_reinitialize();
 800611e:	f7fe fdef 	bl	8004d00 <plan_cycle_reinitialize>
        if (sys.step_control & STEP_CONTROL_EXECUTE_HOLD) { sys.suspend |= SUSPEND_HOLD_COMPLETE; }
 8006122:	7923      	ldrb	r3, [r4, #4]
 8006124:	079a      	lsls	r2, r3, #30
 8006126:	d503      	bpl.n	8006130 <protocol_execute_realtime+0x384>
 8006128:	78a2      	ldrb	r2, [r4, #2]
 800612a:	f042 0201 	orr.w	r2, r2, #1
 800612e:	70a2      	strb	r2, [r4, #2]
        bit_false(sys.step_control,(STEP_CONTROL_EXECUTE_HOLD | STEP_CONTROL_EXECUTE_SYS_MOTION));
 8006130:	f023 0306 	bic.w	r3, r3, #6
 8006134:	7123      	strb	r3, [r4, #4]
 8006136:	e773      	b.n	8006020 <protocol_execute_realtime+0x274>
            st_update_plan_block_parameters(); // Notify stepper module to recompute for hold deceleration.
 8006138:	f002 fcd0 	bl	8008adc <st_update_plan_block_parameters>
            sys.step_control = STEP_CONTROL_EXECUTE_HOLD; // Initiate suspend state with active flag.
 800613c:	2202      	movs	r2, #2
            if (sys.state == STATE_JOG) { // Jog cancelled upon any hold event, except for sleeping.
 800613e:	7823      	ldrb	r3, [r4, #0]
            sys.step_control = STEP_CONTROL_EXECUTE_HOLD; // Initiate suspend state with active flag.
 8006140:	7122      	strb	r2, [r4, #4]
            if (sys.state == STATE_JOG) { // Jog cancelled upon any hold event, except for sleeping.
 8006142:	2b20      	cmp	r3, #32
 8006144:	f47f ae50 	bne.w	8005de8 <protocol_execute_realtime+0x3c>
              if (!(rt_exec & EXEC_SLEEP)) { sys.suspend |= SUSPEND_JOG_CANCEL; } 
 8006148:	2e00      	cmp	r6, #0
 800614a:	f6ff ae60 	blt.w	8005e0e <protocol_execute_realtime+0x62>
 800614e:	78a3      	ldrb	r3, [r4, #2]
 8006150:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006154:	70a3      	strb	r3, [r4, #2]
 8006156:	e65a      	b.n	8005e0e <protocol_execute_realtime+0x62>
              sys.state = STATE_CYCLE;
 8006158:	2208      	movs	r2, #8
              sys.suspend = SUSPEND_DISABLE; // Break suspend state.
 800615a:	70a3      	strb	r3, [r4, #2]
              sys.state = STATE_CYCLE;
 800615c:	7022      	strb	r2, [r4, #0]
              st_prep_buffer(); // Initialize step segment buffer before beginning cycle.
 800615e:	f002 fcd3 	bl	8008b08 <st_prep_buffer>
              st_wake_up();
 8006162:	f002 f94f 	bl	8008404 <st_wake_up>
 8006166:	e684      	b.n	8005e72 <protocol_execute_realtime+0xc6>
          } else if (sys.suspend & SUSPEND_RETRACT_COMPLETE) {
 8006168:	075e      	lsls	r6, r3, #29
 800616a:	f57f ae82 	bpl.w	8005e72 <protocol_execute_realtime+0xc6>
            sys.suspend |= SUSPEND_INITIATE_RESTORE;
 800616e:	f043 0308 	orr.w	r3, r3, #8
 8006172:	70a3      	strb	r3, [r4, #2]
 8006174:	e67d      	b.n	8005e72 <protocol_execute_realtime+0xc6>
              if (sys.suspend & SUSPEND_INITIATE_RESTORE) { // Actively restoring
 8006176:	071a      	lsls	r2, r3, #28
 8006178:	f57f ae57 	bpl.w	8005e2a <protocol_execute_realtime+0x7e>
                sys.suspend &= ~(SUSPEND_RETRACT_COMPLETE | SUSPEND_INITIATE_RESTORE | SUSPEND_RESTORE_COMPLETE);
 800617c:	f023 031c 	bic.w	r3, r3, #28
                sys.suspend |= SUSPEND_RESTART_RETRACT;
 8006180:	f043 0302 	orr.w	r3, r3, #2
 8006184:	e651      	b.n	8005e2a <protocol_execute_realtime+0x7e>
 8006186:	bf00      	nop

08006188 <protocol_buffer_synchronize>:
{
 8006188:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (plan_get_current_block() != NULL) { // Check if there are any blocks in the buffer.
 800618c:	f7fe fa52 	bl	8004634 <plan_get_current_block>
 8006190:	b110      	cbz	r0, 8006198 <protocol_buffer_synchronize+0x10>
    system_set_exec_state_flag(EXEC_CYCLE_START); // If so, execute them!
 8006192:	2002      	movs	r0, #2
 8006194:	f003 fde4 	bl	8009d60 <system_set_exec_state_flag>
 8006198:	4ebd      	ldr	r6, [pc, #756]	; (8006490 <protocol_buffer_synchronize+0x308>)
 800619a:	4cbe      	ldr	r4, [pc, #760]	; (8006494 <protocol_buffer_synchronize+0x30c>)
 800619c:	4dbe      	ldr	r5, [pc, #760]	; (8006498 <protocol_buffer_synchronize+0x310>)
  rt_exec = sys_rt_exec_motion_override; // Copy volatile sys_rt_exec_motion_override
 800619e:	f8df 8300 	ldr.w	r8, [pc, #768]	; 80064a0 <protocol_buffer_synchronize+0x318>
  rt_exec = sys_rt_exec_accessory_override;
 80061a2:	4fbe      	ldr	r7, [pc, #760]	; (800649c <protocol_buffer_synchronize+0x314>)
        uint8_t coolant_state = gc_state.modal.coolant;
 80061a4:	f8df 92fc 	ldr.w	r9, [pc, #764]	; 80064a4 <protocol_buffer_synchronize+0x31c>
  rt_exec = sys_rt_exec_alarm; // Copy volatile sys_rt_exec_alarm.
 80061a8:	7833      	ldrb	r3, [r6, #0]
  if (rt_exec) { // Enter only if any bit flag is true
 80061aa:	f003 0aff 	and.w	sl, r3, #255	; 0xff
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	f040 80a5 	bne.w	80062fe <protocol_buffer_synchronize+0x176>
  rt_exec = sys_rt_exec_state; // Copy volatile sys_rt_exec_state.
 80061b4:	782b      	ldrb	r3, [r5, #0]
  if (rt_exec) {
 80061b6:	f003 0aff 	and.w	sl, r3, #255	; 0xff
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d079      	beq.n	80062b2 <protocol_buffer_synchronize+0x12a>
    if (rt_exec & EXEC_RESET) {
 80061be:	f01a 0f10 	tst.w	sl, #16
 80061c2:	f040 8094 	bne.w	80062ee <protocol_buffer_synchronize+0x166>
    if (rt_exec & EXEC_STATUS_REPORT) {
 80061c6:	f01a 0f01 	tst.w	sl, #1
 80061ca:	f040 8148 	bne.w	800645e <protocol_buffer_synchronize+0x2d6>
    if (rt_exec & (EXEC_MOTION_CANCEL | EXEC_FEED_HOLD | EXEC_SAFETY_DOOR | EXEC_SLEEP)) {
 80061ce:	f01a 0fe8 	tst.w	sl, #232	; 0xe8
 80061d2:	d033      	beq.n	800623c <protocol_buffer_synchronize+0xb4>
      if (!(sys.state & (STATE_ALARM | STATE_CHECK_MODE))) {
 80061d4:	7823      	ldrb	r3, [r4, #0]
 80061d6:	fa4f fb8a 	sxtb.w	fp, sl
 80061da:	079a      	lsls	r2, r3, #30
 80061dc:	d127      	bne.n	800622e <protocol_buffer_synchronize+0xa6>
        if (sys.state & (STATE_CYCLE | STATE_JOG)) {
 80061de:	f013 0f28 	tst.w	r3, #40	; 0x28
 80061e2:	f000 816e 	beq.w	80064c2 <protocol_buffer_synchronize+0x33a>
          if (!(sys.suspend & (SUSPEND_MOTION_CANCEL | SUSPEND_JOG_CANCEL))) { // Block, if already holding.
 80061e6:	78a2      	ldrb	r2, [r4, #2]
 80061e8:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 80061ec:	f000 8162 	beq.w	80064b4 <protocol_buffer_synchronize+0x32c>
 80061f0:	f00a 0240 	and.w	r2, sl, #64	; 0x40
 80061f4:	f00a 0108 	and.w	r1, sl, #8
        if (rt_exec & EXEC_MOTION_CANCEL) {
 80061f8:	2a00      	cmp	r2, #0
 80061fa:	f040 81ab 	bne.w	8006554 <protocol_buffer_synchronize+0x3cc>
        if (rt_exec & EXEC_FEED_HOLD) {
 80061fe:	b119      	cbz	r1, 8006208 <protocol_buffer_synchronize+0x80>
          if (!(sys.state & (STATE_SAFETY_DOOR | STATE_JOG | STATE_SLEEP))) { sys.state = STATE_HOLD; }
 8006200:	f013 0fe0 	tst.w	r3, #224	; 0xe0
 8006204:	f000 816a 	beq.w	80064dc <protocol_buffer_synchronize+0x354>
        if (rt_exec & EXEC_SAFETY_DOOR) {
 8006208:	f01a 0f20 	tst.w	sl, #32
 800620c:	d00f      	beq.n	800622e <protocol_buffer_synchronize+0xa6>
          report_feedback_message(MESSAGE_SAFETY_DOOR_AJAR);
 800620e:	2006      	movs	r0, #6
 8006210:	f000 fac8 	bl	80067a4 <report_feedback_message>
          if (!(sys.suspend & SUSPEND_JOG_CANCEL)) {
 8006214:	78a3      	ldrb	r3, [r4, #2]
 8006216:	061a      	lsls	r2, r3, #24
 8006218:	d406      	bmi.n	8006228 <protocol_buffer_synchronize+0xa0>
            if (sys.state == STATE_SAFETY_DOOR) {
 800621a:	7822      	ldrb	r2, [r4, #0]
 800621c:	2a40      	cmp	r2, #64	; 0x40
 800621e:	f000 81a9 	beq.w	8006574 <protocol_buffer_synchronize+0x3ec>
            if (sys.state != STATE_SLEEP) { sys.state = STATE_SAFETY_DOOR; }
 8006222:	2a80      	cmp	r2, #128	; 0x80
 8006224:	f040 81ac 	bne.w	8006580 <protocol_buffer_synchronize+0x3f8>
          sys.suspend |= SUSPEND_SAFETY_DOOR_AJAR;
 8006228:	f043 0320 	orr.w	r3, r3, #32
 800622c:	70a3      	strb	r3, [r4, #2]
      if (rt_exec & EXEC_SLEEP) {
 800622e:	f1bb 0f00 	cmp.w	fp, #0
 8006232:	f2c0 8139 	blt.w	80064a8 <protocol_buffer_synchronize+0x320>
      system_clear_exec_state_flag((EXEC_MOTION_CANCEL | EXEC_FEED_HOLD | EXEC_SAFETY_DOOR | EXEC_SLEEP));
 8006236:	20e8      	movs	r0, #232	; 0xe8
 8006238:	f003 fd9c 	bl	8009d74 <system_clear_exec_state_flag>
    if (rt_exec & EXEC_CYCLE_START) {
 800623c:	f01a 0f02 	tst.w	sl, #2
 8006240:	d019      	beq.n	8006276 <protocol_buffer_synchronize+0xee>
      if (!(rt_exec & (EXEC_FEED_HOLD | EXEC_MOTION_CANCEL | EXEC_SAFETY_DOOR))) {
 8006242:	f01a 0f68 	tst.w	sl, #104	; 0x68
 8006246:	d113      	bne.n	8006270 <protocol_buffer_synchronize+0xe8>
        if ((sys.state == STATE_SAFETY_DOOR) && !(sys.suspend & SUSPEND_SAFETY_DOOR_AJAR)) {
 8006248:	7823      	ldrb	r3, [r4, #0]
 800624a:	2b40      	cmp	r3, #64	; 0x40
 800624c:	f000 8157 	beq.w	80064fe <protocol_buffer_synchronize+0x376>
        if ((sys.state == STATE_IDLE) || ((sys.state & STATE_HOLD) && (sys.suspend & SUSPEND_HOLD_COMPLETE))) {
 8006250:	2b00      	cmp	r3, #0
 8006252:	f040 8198 	bne.w	8006586 <protocol_buffer_synchronize+0x3fe>
            sys.step_control = STEP_CONTROL_NORMAL_OP; // Restore step control to normal operation
 8006256:	2300      	movs	r3, #0
 8006258:	7123      	strb	r3, [r4, #4]
            if (plan_get_current_block() && bit_isfalse(sys.suspend,SUSPEND_MOTION_CANCEL)) {
 800625a:	f7fe f9eb 	bl	8004634 <plan_get_current_block>
 800625e:	b120      	cbz	r0, 800626a <protocol_buffer_synchronize+0xe2>
 8006260:	78a3      	ldrb	r3, [r4, #2]
 8006262:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8006266:	f000 817d 	beq.w	8006564 <protocol_buffer_synchronize+0x3dc>
              sys.suspend = SUSPEND_DISABLE; // Break suspend state.
 800626a:	2300      	movs	r3, #0
 800626c:	70a3      	strb	r3, [r4, #2]
              sys.state = STATE_IDLE;
 800626e:	7023      	strb	r3, [r4, #0]
      system_clear_exec_state_flag(EXEC_CYCLE_START);
 8006270:	2002      	movs	r0, #2
 8006272:	f003 fd7f 	bl	8009d74 <system_clear_exec_state_flag>
    if (rt_exec & EXEC_CYCLE_STOP) {
 8006276:	f01a 0f04 	tst.w	sl, #4
 800627a:	d01a      	beq.n	80062b2 <protocol_buffer_synchronize+0x12a>
      if ((sys.state & (STATE_HOLD|STATE_SAFETY_DOOR|STATE_SLEEP)) && !(sys.soft_limit) && !(sys.suspend & SUSPEND_JOG_CANCEL)) {
 800627c:	7822      	ldrb	r2, [r4, #0]
 800627e:	78a3      	ldrb	r3, [r4, #2]
 8006280:	f012 0fd0 	tst.w	r2, #208	; 0xd0
 8006284:	b259      	sxtb	r1, r3
 8006286:	d003      	beq.n	8006290 <protocol_buffer_synchronize+0x108>
 8006288:	78e2      	ldrb	r2, [r4, #3]
 800628a:	2a00      	cmp	r2, #0
 800628c:	f000 8129 	beq.w	80064e2 <protocol_buffer_synchronize+0x35a>
        if (sys.suspend & SUSPEND_JOG_CANCEL) {   // For jog cancel, flush buffers and sync positions.
 8006290:	2900      	cmp	r1, #0
 8006292:	f2c0 8128 	blt.w	80064e6 <protocol_buffer_synchronize+0x35e>
        if (sys.suspend & SUSPEND_SAFETY_DOOR_AJAR) { // Only occurs when safety door opens during jog.
 8006296:	f013 0220 	ands.w	r2, r3, #32
 800629a:	f000 80f0 	beq.w	800647e <protocol_buffer_synchronize+0x2f6>
          sys.state = STATE_SAFETY_DOOR;
 800629e:	2240      	movs	r2, #64	; 0x40
          sys.suspend &= ~(SUSPEND_JOG_CANCEL);
 80062a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
          sys.suspend |= SUSPEND_HOLD_COMPLETE;
 80062a4:	f043 0301 	orr.w	r3, r3, #1
 80062a8:	70a3      	strb	r3, [r4, #2]
          sys.state = STATE_SAFETY_DOOR;
 80062aa:	7022      	strb	r2, [r4, #0]
      system_clear_exec_state_flag(EXEC_CYCLE_STOP);
 80062ac:	2004      	movs	r0, #4
 80062ae:	f003 fd61 	bl	8009d74 <system_clear_exec_state_flag>
  rt_exec = sys_rt_exec_motion_override; // Copy volatile sys_rt_exec_motion_override
 80062b2:	f898 3000 	ldrb.w	r3, [r8]
  if (rt_exec) {
 80062b6:	f003 0aff 	and.w	sl, r3, #255	; 0xff
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	f040 808f 	bne.w	80063de <protocol_buffer_synchronize+0x256>
  rt_exec = sys_rt_exec_accessory_override;
 80062c0:	783b      	ldrb	r3, [r7, #0]
  if (rt_exec) {
 80062c2:	f003 0aff 	and.w	sl, r3, #255	; 0xff
 80062c6:	bb4b      	cbnz	r3, 800631c <protocol_buffer_synchronize+0x194>
 80062c8:	7823      	ldrb	r3, [r4, #0]
  if (sys.state & (STATE_CYCLE | STATE_HOLD | STATE_SAFETY_DOOR | STATE_HOMING | STATE_SLEEP| STATE_JOG)) {
 80062ca:	f013 0ffc 	tst.w	r3, #252	; 0xfc
 80062ce:	d162      	bne.n	8006396 <protocol_buffer_synchronize+0x20e>
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 80062d0:	78a3      	ldrb	r3, [r4, #2]
 80062d2:	b98b      	cbnz	r3, 80062f8 <protocol_buffer_synchronize+0x170>
    if (sys.abort) { return; } // Check for system abort
 80062d4:	7863      	ldrb	r3, [r4, #1]
 80062d6:	b943      	cbnz	r3, 80062ea <protocol_buffer_synchronize+0x162>
  } while (plan_get_current_block() || (sys.state == STATE_CYCLE));
 80062d8:	f7fe f9ac 	bl	8004634 <plan_get_current_block>
 80062dc:	2800      	cmp	r0, #0
 80062de:	f47f af63 	bne.w	80061a8 <protocol_buffer_synchronize+0x20>
 80062e2:	7823      	ldrb	r3, [r4, #0]
 80062e4:	2b08      	cmp	r3, #8
 80062e6:	f43f af5f 	beq.w	80061a8 <protocol_buffer_synchronize+0x20>
}
 80062ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      sys.abort = true;  // Only place this is set true.
 80062ee:	2201      	movs	r2, #1
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 80062f0:	78a3      	ldrb	r3, [r4, #2]
      sys.abort = true;  // Only place this is set true.
 80062f2:	7062      	strb	r2, [r4, #1]
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d0f8      	beq.n	80062ea <protocol_buffer_synchronize+0x162>
 80062f8:	f7ff fa40 	bl	800577c <protocol_exec_rt_suspend>
 80062fc:	e7ea      	b.n	80062d4 <protocol_buffer_synchronize+0x14c>
    sys.state = STATE_ALARM; // Set system alarm state
 80062fe:	f04f 0b01 	mov.w	fp, #1
    report_alarm_message(rt_exec);
 8006302:	4650      	mov	r0, sl
    if ((rt_exec == EXEC_ALARM_HARD_LIMIT) || (rt_exec == EXEC_ALARM_SOFT_LIMIT)) {
 8006304:	f10a 3aff 	add.w	sl, sl, #4294967295
    sys.state = STATE_ALARM; // Set system alarm state
 8006308:	f884 b000 	strb.w	fp, [r4]
    report_alarm_message(rt_exec);
 800630c:	f000 fa34 	bl	8006778 <report_alarm_message>
    if ((rt_exec == EXEC_ALARM_HARD_LIMIT) || (rt_exec == EXEC_ALARM_SOFT_LIMIT)) {
 8006310:	45da      	cmp	sl, fp
 8006312:	f240 80aa 	bls.w	800646a <protocol_buffer_synchronize+0x2e2>
    system_clear_exec_alarm(); // Clear alarm
 8006316:	f003 fd3f 	bl	8009d98 <system_clear_exec_alarm>
 800631a:	e74b      	b.n	80061b4 <protocol_buffer_synchronize+0x2c>
    system_clear_exec_accessory_overrides(); // Clear all accessory override flags.
 800631c:	f003 fd60 	bl	8009de0 <system_clear_exec_accessory_overrides>
    uint8_t last_s_override =  sys.spindle_speed_ovr;
 8006320:	f01a 0f01 	tst.w	sl, #1
 8006324:	bf18      	it	ne
 8006326:	2364      	movne	r3, #100	; 0x64
 8006328:	7aa2      	ldrb	r2, [r4, #10]
 800632a:	bf08      	it	eq
 800632c:	4613      	moveq	r3, r2
    if (rt_exec & EXEC_SPINDLE_OVR_COARSE_PLUS) { last_s_override += SPINDLE_OVERRIDE_COARSE_INCREMENT; }
 800632e:	f01a 0f02 	tst.w	sl, #2
 8006332:	bf1c      	itt	ne
 8006334:	330a      	addne	r3, #10
 8006336:	b2db      	uxtbne	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_COARSE_MINUS) { last_s_override -= SPINDLE_OVERRIDE_COARSE_INCREMENT; }
 8006338:	f01a 0f04 	tst.w	sl, #4
 800633c:	bf1c      	itt	ne
 800633e:	3b0a      	subne	r3, #10
 8006340:	b2db      	uxtbne	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_FINE_PLUS) { last_s_override += SPINDLE_OVERRIDE_FINE_INCREMENT; }
 8006342:	f01a 0f08 	tst.w	sl, #8
 8006346:	bf1c      	itt	ne
 8006348:	3301      	addne	r3, #1
 800634a:	b2db      	uxtbne	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_FINE_MINUS) { last_s_override -= SPINDLE_OVERRIDE_FINE_INCREMENT; }
 800634c:	f01a 0f10 	tst.w	sl, #16
 8006350:	bf1c      	itt	ne
 8006352:	f103 33ff 	addne.w	r3, r3, #4294967295
 8006356:	b2db      	uxtbne	r3, r3
    last_s_override = max(last_s_override,MIN_SPINDLE_SPEED_OVERRIDE);
 8006358:	2bc8      	cmp	r3, #200	; 0xc8
 800635a:	bf28      	it	cs
 800635c:	23c8      	movcs	r3, #200	; 0xc8
 800635e:	2b0a      	cmp	r3, #10
 8006360:	bf38      	it	cc
 8006362:	230a      	movcc	r3, #10
    if (last_s_override != sys.spindle_speed_ovr) {
 8006364:	429a      	cmp	r2, r3
 8006366:	d006      	beq.n	8006376 <protocol_buffer_synchronize+0x1ee>
      sys.report_ovr_counter = 0; // Set to report change immediately
 8006368:	2100      	movs	r1, #0
      bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 800636a:	7922      	ldrb	r2, [r4, #4]
      sys.spindle_speed_ovr = last_s_override;
 800636c:	72a3      	strb	r3, [r4, #10]
      bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 800636e:	f042 0308 	orr.w	r3, r2, #8
 8006372:	7123      	strb	r3, [r4, #4]
      sys.report_ovr_counter = 0; // Set to report change immediately
 8006374:	7321      	strb	r1, [r4, #12]
    if (rt_exec & EXEC_SPINDLE_OVR_STOP) {
 8006376:	f01a 0f20 	tst.w	sl, #32
 800637a:	7823      	ldrb	r3, [r4, #0]
 800637c:	f00a 02c0 	and.w	r2, sl, #192	; 0xc0
 8006380:	d00c      	beq.n	800639c <protocol_buffer_synchronize+0x214>
      if (sys.state == STATE_HOLD) {
 8006382:	2b10      	cmp	r3, #16
 8006384:	d10a      	bne.n	800639c <protocol_buffer_synchronize+0x214>
        if (!(sys.spindle_stop_ovr)) { sys.spindle_stop_ovr = SPINDLE_STOP_OVR_INITIATE; }
 8006386:	7ae1      	ldrb	r1, [r4, #11]
 8006388:	2900      	cmp	r1, #0
 800638a:	f040 80c1 	bne.w	8006510 <protocol_buffer_synchronize+0x388>
 800638e:	2102      	movs	r1, #2
 8006390:	72e1      	strb	r1, [r4, #11]
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 8006392:	2a00      	cmp	r2, #0
 8006394:	d176      	bne.n	8006484 <protocol_buffer_synchronize+0x2fc>
    st_prep_buffer();
 8006396:	f002 fbb7 	bl	8008b08 <st_prep_buffer>
 800639a:	e799      	b.n	80062d0 <protocol_buffer_synchronize+0x148>
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 800639c:	2a00      	cmp	r2, #0
 800639e:	d094      	beq.n	80062ca <protocol_buffer_synchronize+0x142>
      if ((sys.state == STATE_IDLE) || (sys.state & (STATE_CYCLE | STATE_HOLD))) {
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d16f      	bne.n	8006484 <protocol_buffer_synchronize+0x2fc>
          if (rt_exec & EXEC_COOLANT_MIST_OVR_TOGGLE) {
 80063a4:	f01a 0f80 	tst.w	sl, #128	; 0x80
        uint8_t coolant_state = gc_state.modal.coolant;
 80063a8:	f899 b008 	ldrb.w	fp, [r9, #8]
          if (rt_exec & EXEC_COOLANT_MIST_OVR_TOGGLE) {
 80063ac:	d006      	beq.n	80063bc <protocol_buffer_synchronize+0x234>
            if (coolant_state & COOLANT_MIST_ENABLE) { bit_false(coolant_state,COOLANT_MIST_ENABLE); }
 80063ae:	f01b 0f80 	tst.w	fp, #128	; 0x80
 80063b2:	bf14      	ite	ne
 80063b4:	f00b 0b7f 	andne.w	fp, fp, #127	; 0x7f
            else { coolant_state |= COOLANT_MIST_ENABLE; }
 80063b8:	f04b 0b80 	orreq.w	fp, fp, #128	; 0x80
          if (rt_exec & EXEC_COOLANT_FLOOD_OVR_TOGGLE) {
 80063bc:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80063c0:	d006      	beq.n	80063d0 <protocol_buffer_synchronize+0x248>
            if (coolant_state & COOLANT_FLOOD_ENABLE) { bit_false(coolant_state,COOLANT_FLOOD_ENABLE); }
 80063c2:	f01b 0f40 	tst.w	fp, #64	; 0x40
 80063c6:	bf14      	ite	ne
 80063c8:	f00b 0bbf 	andne.w	fp, fp, #191	; 0xbf
            else { coolant_state |= COOLANT_FLOOD_ENABLE; }
 80063cc:	f04b 0b40 	orreq.w	fp, fp, #64	; 0x40
        coolant_set_state(coolant_state); // Report counter set in coolant_set_state().
 80063d0:	4658      	mov	r0, fp
 80063d2:	f7fb fbf3 	bl	8001bbc <coolant_set_state>
 80063d6:	7823      	ldrb	r3, [r4, #0]
        gc_state.modal.coolant = coolant_state;
 80063d8:	f889 b008 	strb.w	fp, [r9, #8]
 80063dc:	e775      	b.n	80062ca <protocol_buffer_synchronize+0x142>
    system_clear_exec_motion_overrides(); // Clear all motion override flags.
 80063de:	f003 fcf7 	bl	8009dd0 <system_clear_exec_motion_overrides>
    uint8_t new_f_override =  sys.f_override;
 80063e2:	f01a 0f01 	tst.w	sl, #1
 80063e6:	bf18      	it	ne
 80063e8:	2364      	movne	r3, #100	; 0x64
 80063ea:	7a22      	ldrb	r2, [r4, #8]
    uint8_t new_r_override = sys.r_override;
 80063ec:	7a60      	ldrb	r0, [r4, #9]
    uint8_t new_f_override =  sys.f_override;
 80063ee:	bf08      	it	eq
 80063f0:	4613      	moveq	r3, r2
    if (rt_exec & EXEC_FEED_OVR_COARSE_PLUS) { new_f_override += FEED_OVERRIDE_COARSE_INCREMENT; }
 80063f2:	f01a 0f02 	tst.w	sl, #2
 80063f6:	bf1c      	itt	ne
 80063f8:	330a      	addne	r3, #10
 80063fa:	b2db      	uxtbne	r3, r3
    if (rt_exec & EXEC_FEED_OVR_COARSE_MINUS) { new_f_override -= FEED_OVERRIDE_COARSE_INCREMENT; }
 80063fc:	f01a 0f04 	tst.w	sl, #4
 8006400:	bf1c      	itt	ne
 8006402:	3b0a      	subne	r3, #10
 8006404:	b2db      	uxtbne	r3, r3
    if (rt_exec & EXEC_FEED_OVR_FINE_PLUS) { new_f_override += FEED_OVERRIDE_FINE_INCREMENT; }
 8006406:	f01a 0f08 	tst.w	sl, #8
 800640a:	bf1c      	itt	ne
 800640c:	3301      	addne	r3, #1
 800640e:	b2db      	uxtbne	r3, r3
    if (rt_exec & EXEC_FEED_OVR_FINE_MINUS) { new_f_override -= FEED_OVERRIDE_FINE_INCREMENT; }
 8006410:	f01a 0f10 	tst.w	sl, #16
 8006414:	bf1c      	itt	ne
 8006416:	f103 33ff 	addne.w	r3, r3, #4294967295
 800641a:	b2db      	uxtbne	r3, r3
    new_f_override = max(new_f_override,MIN_FEED_RATE_OVERRIDE);
 800641c:	2bc8      	cmp	r3, #200	; 0xc8
 800641e:	bf28      	it	cs
 8006420:	23c8      	movcs	r3, #200	; 0xc8
 8006422:	2b0a      	cmp	r3, #10
 8006424:	bf38      	it	cc
 8006426:	230a      	movcc	r3, #10
    uint8_t new_r_override = sys.r_override;
 8006428:	f01a 0f20 	tst.w	sl, #32
 800642c:	bf14      	ite	ne
 800642e:	2164      	movne	r1, #100	; 0x64
 8006430:	4601      	moveq	r1, r0
    if (rt_exec & EXEC_RAPID_OVR_MEDIUM) { new_r_override = RAPID_OVERRIDE_MEDIUM; }
 8006432:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8006436:	bf18      	it	ne
 8006438:	2132      	movne	r1, #50	; 0x32
    if (rt_exec & EXEC_RAPID_OVR_LOW) { new_r_override = RAPID_OVERRIDE_LOW; }
 800643a:	f01a 0f80 	tst.w	sl, #128	; 0x80
 800643e:	bf18      	it	ne
 8006440:	2119      	movne	r1, #25
    if ((new_f_override != sys.f_override) || (new_r_override != sys.r_override)) {
 8006442:	429a      	cmp	r2, r3
 8006444:	d102      	bne.n	800644c <protocol_buffer_synchronize+0x2c4>
 8006446:	4288      	cmp	r0, r1
 8006448:	f43f af3a 	beq.w	80062c0 <protocol_buffer_synchronize+0x138>
      sys.report_ovr_counter = 0; // Set to report change immediately
 800644c:	2200      	movs	r2, #0
      sys.f_override = new_f_override;
 800644e:	7223      	strb	r3, [r4, #8]
      sys.r_override = new_r_override;
 8006450:	7261      	strb	r1, [r4, #9]
      sys.report_ovr_counter = 0; // Set to report change immediately
 8006452:	7322      	strb	r2, [r4, #12]
      plan_update_velocity_profile_parameters();
 8006454:	f7fe f960 	bl	8004718 <plan_update_velocity_profile_parameters>
      plan_cycle_reinitialize();
 8006458:	f7fe fc52 	bl	8004d00 <plan_cycle_reinitialize>
 800645c:	e730      	b.n	80062c0 <protocol_buffer_synchronize+0x138>
      report_realtime_status();
 800645e:	f000 fefb 	bl	8007258 <report_realtime_status>
      system_clear_exec_state_flag(EXEC_STATUS_REPORT);
 8006462:	2001      	movs	r0, #1
 8006464:	f003 fc86 	bl	8009d74 <system_clear_exec_state_flag>
 8006468:	e6b1      	b.n	80061ce <protocol_buffer_synchronize+0x46>
      report_feedback_message(MESSAGE_CRITICAL_EVENT);
 800646a:	4658      	mov	r0, fp
 800646c:	f000 f99a 	bl	80067a4 <report_feedback_message>
      system_clear_exec_state_flag(EXEC_RESET); // Disable any existing reset
 8006470:	2010      	movs	r0, #16
 8006472:	f003 fc7f 	bl	8009d74 <system_clear_exec_state_flag>
      } while (bit_isfalse(sys_rt_exec_state,EXEC_RESET));
 8006476:	782b      	ldrb	r3, [r5, #0]
 8006478:	06d9      	lsls	r1, r3, #27
 800647a:	d5fc      	bpl.n	8006476 <protocol_buffer_synchronize+0x2ee>
 800647c:	e74b      	b.n	8006316 <protocol_buffer_synchronize+0x18e>
          sys.suspend = SUSPEND_DISABLE;
 800647e:	70a2      	strb	r2, [r4, #2]
          sys.state = STATE_IDLE;
 8006480:	7022      	strb	r2, [r4, #0]
 8006482:	e713      	b.n	80062ac <protocol_buffer_synchronize+0x124>
      if ((sys.state == STATE_IDLE) || (sys.state & (STATE_CYCLE | STATE_HOLD))) {
 8006484:	f013 0f18 	tst.w	r3, #24
 8006488:	f43f af1f 	beq.w	80062ca <protocol_buffer_synchronize+0x142>
 800648c:	e78a      	b.n	80063a4 <protocol_buffer_synchronize+0x21c>
 800648e:	bf00      	nop
 8006490:	20001440 	.word	0x20001440
 8006494:	20001408 	.word	0x20001408
 8006498:	2000141d 	.word	0x2000141d
 800649c:	2000141c 	.word	0x2000141c
 80064a0:	20001404 	.word	0x20001404
 80064a4:	2000136c 	.word	0x2000136c
        if (sys.state == STATE_ALARM) { sys.suspend |= (SUSPEND_RETRACT_COMPLETE|SUSPEND_HOLD_COMPLETE); }
 80064a8:	7823      	ldrb	r3, [r4, #0]
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	d03e      	beq.n	800652c <protocol_buffer_synchronize+0x3a4>
        sys.state = STATE_SLEEP; 
 80064ae:	2380      	movs	r3, #128	; 0x80
 80064b0:	7023      	strb	r3, [r4, #0]
 80064b2:	e6c0      	b.n	8006236 <protocol_buffer_synchronize+0xae>
            st_update_plan_block_parameters(); // Notify stepper module to recompute for hold deceleration.
 80064b4:	f002 fb12 	bl	8008adc <st_update_plan_block_parameters>
            sys.step_control = STEP_CONTROL_EXECUTE_HOLD; // Initiate suspend state with active flag.
 80064b8:	2202      	movs	r2, #2
            if (sys.state == STATE_JOG) { // Jog cancelled upon any hold event, except for sleeping.
 80064ba:	7823      	ldrb	r3, [r4, #0]
            sys.step_control = STEP_CONTROL_EXECUTE_HOLD; // Initiate suspend state with active flag.
 80064bc:	7122      	strb	r2, [r4, #4]
            if (sys.state == STATE_JOG) { // Jog cancelled upon any hold event, except for sleeping.
 80064be:	2b20      	cmp	r3, #32
 80064c0:	d07d      	beq.n	80065be <protocol_buffer_synchronize+0x436>
 80064c2:	f00a 0240 	and.w	r2, sl, #64	; 0x40
 80064c6:	f00a 0108 	and.w	r1, sl, #8
        if (sys.state == STATE_IDLE) { sys.suspend = SUSPEND_HOLD_COMPLETE; }
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	f47f ae94 	bne.w	80061f8 <protocol_buffer_synchronize+0x70>
 80064d0:	2001      	movs	r0, #1
 80064d2:	70a0      	strb	r0, [r4, #2]
        if (rt_exec & EXEC_MOTION_CANCEL) {
 80064d4:	bb3a      	cbnz	r2, 8006526 <protocol_buffer_synchronize+0x39e>
        if (rt_exec & EXEC_FEED_HOLD) {
 80064d6:	2900      	cmp	r1, #0
 80064d8:	f43f ae96 	beq.w	8006208 <protocol_buffer_synchronize+0x80>
          if (!(sys.state & (STATE_SAFETY_DOOR | STATE_JOG | STATE_SLEEP))) { sys.state = STATE_HOLD; }
 80064dc:	2310      	movs	r3, #16
 80064de:	7023      	strb	r3, [r4, #0]
 80064e0:	e692      	b.n	8006208 <protocol_buffer_synchronize+0x80>
      if ((sys.state & (STATE_HOLD|STATE_SAFETY_DOOR|STATE_SLEEP)) && !(sys.soft_limit) && !(sys.suspend & SUSPEND_JOG_CANCEL)) {
 80064e2:	2900      	cmp	r1, #0
 80064e4:	da29      	bge.n	800653a <protocol_buffer_synchronize+0x3b2>
          sys.step_control = STEP_CONTROL_NORMAL_OP;
 80064e6:	2300      	movs	r3, #0
 80064e8:	7123      	strb	r3, [r4, #4]
          plan_reset();
 80064ea:	f7fe f85f 	bl	80045ac <plan_reset>
          st_reset();
 80064ee:	f002 f9a3 	bl	8008838 <st_reset>
          gc_sync_position();
 80064f2:	f7fb fc65 	bl	8001dc0 <gc_sync_position>
          plan_sync_position();
 80064f6:	f7fe fbdf 	bl	8004cb8 <plan_sync_position>
 80064fa:	78a3      	ldrb	r3, [r4, #2]
 80064fc:	e6cb      	b.n	8006296 <protocol_buffer_synchronize+0x10e>
        if ((sys.state == STATE_SAFETY_DOOR) && !(sys.suspend & SUSPEND_SAFETY_DOOR_AJAR)) {
 80064fe:	78a3      	ldrb	r3, [r4, #2]
 8006500:	f013 0220 	ands.w	r2, r3, #32
 8006504:	f47f aeb4 	bne.w	8006270 <protocol_buffer_synchronize+0xe8>
          if (sys.suspend & SUSPEND_RESTORE_COMPLETE) {
 8006508:	06d9      	lsls	r1, r3, #27
 800650a:	d551      	bpl.n	80065b0 <protocol_buffer_synchronize+0x428>
            sys.state = STATE_IDLE; // Set to IDLE to immediately resume the cycle.
 800650c:	7022      	strb	r2, [r4, #0]
 800650e:	e6a2      	b.n	8006256 <protocol_buffer_synchronize+0xce>
        else if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_ENABLED) { sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE; }
 8006510:	07c8      	lsls	r0, r1, #31
 8006512:	d502      	bpl.n	800651a <protocol_buffer_synchronize+0x392>
 8006514:	f041 0104 	orr.w	r1, r1, #4
 8006518:	72e1      	strb	r1, [r4, #11]
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 800651a:	2a00      	cmp	r2, #0
 800651c:	f47f af42 	bne.w	80063a4 <protocol_buffer_synchronize+0x21c>
    st_prep_buffer();
 8006520:	f002 faf2 	bl	8008b08 <st_prep_buffer>
 8006524:	e6d4      	b.n	80062d0 <protocol_buffer_synchronize+0x148>
        if (rt_exec & EXEC_MOTION_CANCEL) {
 8006526:	2241      	movs	r2, #65	; 0x41
          if (!(sys.state & STATE_JOG)) { sys.suspend |= SUSPEND_MOTION_CANCEL; } // NOTE: State is STATE_CYCLE.
 8006528:	70a2      	strb	r2, [r4, #2]
 800652a:	e668      	b.n	80061fe <protocol_buffer_synchronize+0x76>
        if (sys.state == STATE_ALARM) { sys.suspend |= (SUSPEND_RETRACT_COMPLETE|SUSPEND_HOLD_COMPLETE); }
 800652c:	78a3      	ldrb	r3, [r4, #2]
 800652e:	f043 0305 	orr.w	r3, r3, #5
 8006532:	70a3      	strb	r3, [r4, #2]
        sys.state = STATE_SLEEP; 
 8006534:	2380      	movs	r3, #128	; 0x80
 8006536:	7023      	strb	r3, [r4, #0]
 8006538:	e67d      	b.n	8006236 <protocol_buffer_synchronize+0xae>
        plan_cycle_reinitialize();
 800653a:	f7fe fbe1 	bl	8004d00 <plan_cycle_reinitialize>
        if (sys.step_control & STEP_CONTROL_EXECUTE_HOLD) { sys.suspend |= SUSPEND_HOLD_COMPLETE; }
 800653e:	7923      	ldrb	r3, [r4, #4]
 8006540:	079a      	lsls	r2, r3, #30
 8006542:	d503      	bpl.n	800654c <protocol_buffer_synchronize+0x3c4>
 8006544:	78a2      	ldrb	r2, [r4, #2]
 8006546:	f042 0201 	orr.w	r2, r2, #1
 800654a:	70a2      	strb	r2, [r4, #2]
        bit_false(sys.step_control,(STEP_CONTROL_EXECUTE_HOLD | STEP_CONTROL_EXECUTE_SYS_MOTION));
 800654c:	f023 0306 	bic.w	r3, r3, #6
 8006550:	7123      	strb	r3, [r4, #4]
 8006552:	e6ab      	b.n	80062ac <protocol_buffer_synchronize+0x124>
          if (!(sys.state & STATE_JOG)) { sys.suspend |= SUSPEND_MOTION_CANCEL; } // NOTE: State is STATE_CYCLE.
 8006554:	0698      	lsls	r0, r3, #26
 8006556:	f53f ae52 	bmi.w	80061fe <protocol_buffer_synchronize+0x76>
 800655a:	78a2      	ldrb	r2, [r4, #2]
 800655c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006560:	70a2      	strb	r2, [r4, #2]
 8006562:	e64c      	b.n	80061fe <protocol_buffer_synchronize+0x76>
              sys.state = STATE_CYCLE;
 8006564:	2208      	movs	r2, #8
              sys.suspend = SUSPEND_DISABLE; // Break suspend state.
 8006566:	70a3      	strb	r3, [r4, #2]
              sys.state = STATE_CYCLE;
 8006568:	7022      	strb	r2, [r4, #0]
              st_prep_buffer(); // Initialize step segment buffer before beginning cycle.
 800656a:	f002 facd 	bl	8008b08 <st_prep_buffer>
              st_wake_up();
 800656e:	f001 ff49 	bl	8008404 <st_wake_up>
 8006572:	e67d      	b.n	8006270 <protocol_buffer_synchronize+0xe8>
              if (sys.suspend & SUSPEND_INITIATE_RESTORE) { // Actively restoring
 8006574:	0718      	lsls	r0, r3, #28
 8006576:	d503      	bpl.n	8006580 <protocol_buffer_synchronize+0x3f8>
                sys.suspend &= ~(SUSPEND_RETRACT_COMPLETE | SUSPEND_INITIATE_RESTORE | SUSPEND_RESTORE_COMPLETE);
 8006578:	f023 031c 	bic.w	r3, r3, #28
                sys.suspend |= SUSPEND_RESTART_RETRACT;
 800657c:	f043 0302 	orr.w	r3, r3, #2
            if (sys.state != STATE_SLEEP) { sys.state = STATE_SAFETY_DOOR; }
 8006580:	2240      	movs	r2, #64	; 0x40
 8006582:	7022      	strb	r2, [r4, #0]
 8006584:	e650      	b.n	8006228 <protocol_buffer_synchronize+0xa0>
        if ((sys.state == STATE_IDLE) || ((sys.state & STATE_HOLD) && (sys.suspend & SUSPEND_HOLD_COMPLETE))) {
 8006586:	06da      	lsls	r2, r3, #27
 8006588:	f57f ae72 	bpl.w	8006270 <protocol_buffer_synchronize+0xe8>
 800658c:	78a2      	ldrb	r2, [r4, #2]
 800658e:	07d1      	lsls	r1, r2, #31
 8006590:	f57f ae6e 	bpl.w	8006270 <protocol_buffer_synchronize+0xe8>
          if (sys.state == STATE_HOLD && sys.spindle_stop_ovr) {
 8006594:	2b10      	cmp	r3, #16
 8006596:	f47f ae5e 	bne.w	8006256 <protocol_buffer_synchronize+0xce>
 800659a:	7ae3      	ldrb	r3, [r4, #11]
 800659c:	2b00      	cmp	r3, #0
 800659e:	f43f ae5a 	beq.w	8006256 <protocol_buffer_synchronize+0xce>
            sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE_CYCLE; // Set to restore in suspend routine and cycle start after.
 80065a2:	f043 0308 	orr.w	r3, r3, #8
      system_clear_exec_state_flag(EXEC_CYCLE_START);
 80065a6:	2002      	movs	r0, #2
            sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE_CYCLE; // Set to restore in suspend routine and cycle start after.
 80065a8:	72e3      	strb	r3, [r4, #11]
      system_clear_exec_state_flag(EXEC_CYCLE_START);
 80065aa:	f003 fbe3 	bl	8009d74 <system_clear_exec_state_flag>
 80065ae:	e662      	b.n	8006276 <protocol_buffer_synchronize+0xee>
          } else if (sys.suspend & SUSPEND_RETRACT_COMPLETE) {
 80065b0:	0758      	lsls	r0, r3, #29
 80065b2:	f57f ae5d 	bpl.w	8006270 <protocol_buffer_synchronize+0xe8>
            sys.suspend |= SUSPEND_INITIATE_RESTORE;
 80065b6:	f043 0308 	orr.w	r3, r3, #8
 80065ba:	70a3      	strb	r3, [r4, #2]
 80065bc:	e658      	b.n	8006270 <protocol_buffer_synchronize+0xe8>
              if (!(rt_exec & EXEC_SLEEP)) { sys.suspend |= SUSPEND_JOG_CANCEL; } 
 80065be:	f1bb 0f00 	cmp.w	fp, #0
 80065c2:	f6ff ae21 	blt.w	8006208 <protocol_buffer_synchronize+0x80>
 80065c6:	78a3      	ldrb	r3, [r4, #2]
 80065c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80065cc:	70a3      	strb	r3, [r4, #2]
 80065ce:	e61b      	b.n	8006208 <protocol_buffer_synchronize+0x80>

080065d0 <protocol_main_loop>:
{
 80065d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (bit_istrue(settings.flags, BITFLAG_HARD_LIMIT_ENABLE)) {
 80065d4:	4b58      	ldr	r3, [pc, #352]	; (8006738 <protocol_main_loop+0x168>)
 80065d6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80065da:	071a      	lsls	r2, r3, #28
 80065dc:	f100 8092 	bmi.w	8006704 <protocol_main_loop+0x134>
 80065e0:	4e56      	ldr	r6, [pc, #344]	; (800673c <protocol_main_loop+0x16c>)
  if (sys.state & (STATE_ALARM | STATE_SLEEP)) {
 80065e2:	7833      	ldrb	r3, [r6, #0]
 80065e4:	f013 0381 	ands.w	r3, r3, #129	; 0x81
 80065e8:	d075      	beq.n	80066d6 <protocol_main_loop+0x106>
    report_feedback_message(MESSAGE_ALARM_LOCK);
 80065ea:	2002      	movs	r0, #2
 80065ec:	f000 f8da 	bl	80067a4 <report_feedback_message>
    sys.state = STATE_ALARM; // Ensure alarm state is set.
 80065f0:	2301      	movs	r3, #1
 80065f2:	7033      	strb	r3, [r6, #0]
        line_flags = 0;
 80065f4:	2500      	movs	r5, #0
 80065f6:	462c      	mov	r4, r5
        line[char_counter] = 0; // Set string termination character.
 80065f8:	f8df 8144 	ldr.w	r8, [pc, #324]	; 8006740 <protocol_main_loop+0x170>
    while((c = serial_read()) != SERIAL_NO_DATA) {
 80065fc:	f001 f86a 	bl	80076d4 <serial_read>
 8006600:	28ff      	cmp	r0, #255	; 0xff
 8006602:	d00f      	beq.n	8006624 <protocol_main_loop+0x54>
      if ((c == '\n') || (c == '\r')) { // End of line reached
 8006604:	280a      	cmp	r0, #10
 8006606:	d01d      	beq.n	8006644 <protocol_main_loop+0x74>
 8006608:	280d      	cmp	r0, #13
 800660a:	d01b      	beq.n	8006644 <protocol_main_loop+0x74>
        if (line_flags) {
 800660c:	2c00      	cmp	r4, #0
 800660e:	d035      	beq.n	800667c <protocol_main_loop+0xac>
          if (c == ')') {
 8006610:	2829      	cmp	r0, #41	; 0x29
 8006612:	d1f3      	bne.n	80065fc <protocol_main_loop+0x2c>
            if (line_flags & LINE_FLAG_COMMENT_PARENTHESES) { line_flags &= ~(LINE_FLAG_COMMENT_PARENTHESES); }
 8006614:	07a3      	lsls	r3, r4, #30
 8006616:	d5f1      	bpl.n	80065fc <protocol_main_loop+0x2c>
    while((c = serial_read()) != SERIAL_NO_DATA) {
 8006618:	f001 f85c 	bl	80076d4 <serial_read>
 800661c:	28ff      	cmp	r0, #255	; 0xff
            if (line_flags & LINE_FLAG_COMMENT_PARENTHESES) { line_flags &= ~(LINE_FLAG_COMMENT_PARENTHESES); }
 800661e:	f004 04fd 	and.w	r4, r4, #253	; 0xfd
    while((c = serial_read()) != SERIAL_NO_DATA) {
 8006622:	d1ef      	bne.n	8006604 <protocol_main_loop+0x34>
  if (plan_get_current_block() != NULL) { // Check if there are any blocks in the buffer.
 8006624:	f7fe f806 	bl	8004634 <plan_get_current_block>
 8006628:	b110      	cbz	r0, 8006630 <protocol_main_loop+0x60>
    system_set_exec_state_flag(EXEC_CYCLE_START); // If so, execute them!
 800662a:	2002      	movs	r0, #2
 800662c:	f003 fb98 	bl	8009d60 <system_set_exec_state_flag>
  protocol_exec_rt_system();
 8006630:	f7fe febe 	bl	80053b0 <protocol_exec_rt_system>
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 8006634:	78b3      	ldrb	r3, [r6, #2]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d13a      	bne.n	80066b0 <protocol_main_loop+0xe0>
    if (sys.abort) { return; } // Bail to main() program loop to reset system.
 800663a:	7873      	ldrb	r3, [r6, #1]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d0dd      	beq.n	80065fc <protocol_main_loop+0x2c>
}
 8006640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  protocol_exec_rt_system();
 8006644:	f7fe feb4 	bl	80053b0 <protocol_exec_rt_system>
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 8006648:	78b3      	ldrb	r3, [r6, #2]
 800664a:	bb1b      	cbnz	r3, 8006694 <protocol_main_loop+0xc4>
        if (sys.abort) { return; } // Bail to calling function upon system abort
 800664c:	7877      	ldrb	r7, [r6, #1]
 800664e:	2f00      	cmp	r7, #0
 8006650:	d1f6      	bne.n	8006640 <protocol_main_loop+0x70>
        line[char_counter] = 0; // Set string termination character.
 8006652:	f808 7005 	strb.w	r7, [r8, r5]
				LedBlink();
 8006656:	f7fd f9c1 	bl	80039dc <LedBlink>
        if (line_flags & LINE_FLAG_OVERFLOW) {
 800665a:	f014 0401 	ands.w	r4, r4, #1
 800665e:	d11c      	bne.n	800669a <protocol_main_loop+0xca>
        } else if (line[0] == 0) {
 8006660:	f898 0000 	ldrb.w	r0, [r8]
 8006664:	b1f8      	cbz	r0, 80066a6 <protocol_main_loop+0xd6>
        } else if (line[0] == '$') {
 8006666:	2824      	cmp	r0, #36	; 0x24
 8006668:	d02c      	beq.n	80066c4 <protocol_main_loop+0xf4>
        } else if (sys.state & (STATE_ALARM | STATE_JOG)) {
 800666a:	7833      	ldrb	r3, [r6, #0]
 800666c:	f013 0521 	ands.w	r5, r3, #33	; 0x21
 8006670:	d021      	beq.n	80066b6 <protocol_main_loop+0xe6>
          report_status_message(STATUS_SYSTEM_GC_LOCK);
 8006672:	2009      	movs	r0, #9
        char_counter = 0;
 8006674:	4625      	mov	r5, r4
          report_status_message(STATUS_SYSTEM_GC_LOCK);
 8006676:	f000 f867 	bl	8006748 <report_status_message>
 800667a:	e7bf      	b.n	80065fc <protocol_main_loop+0x2c>
          if (c <= ' ') {
 800667c:	2820      	cmp	r0, #32
 800667e:	d9bd      	bls.n	80065fc <protocol_main_loop+0x2c>
          } else if (c == '/') {
 8006680:	282f      	cmp	r0, #47	; 0x2f
 8006682:	d0bb      	beq.n	80065fc <protocol_main_loop+0x2c>
          } else if (c == '(') {
 8006684:	2828      	cmp	r0, #40	; 0x28
 8006686:	d024      	beq.n	80066d2 <protocol_main_loop+0x102>
          } else if (c == ';') {
 8006688:	283b      	cmp	r0, #59	; 0x3b
 800668a:	d039      	beq.n	8006700 <protocol_main_loop+0x130>
          } else if (char_counter >= (LINE_BUFFER_SIZE-1)) {
 800668c:	2d4e      	cmp	r5, #78	; 0x4e
 800668e:	d92a      	bls.n	80066e6 <protocol_main_loop+0x116>
            line_flags |= LINE_FLAG_OVERFLOW;
 8006690:	2401      	movs	r4, #1
 8006692:	e7b3      	b.n	80065fc <protocol_main_loop+0x2c>
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 8006694:	f7ff f872 	bl	800577c <protocol_exec_rt_suspend>
 8006698:	e7d8      	b.n	800664c <protocol_main_loop+0x7c>
          report_status_message(STATUS_OVERFLOW);
 800669a:	200b      	movs	r0, #11
        char_counter = 0;
 800669c:	463d      	mov	r5, r7
        line_flags = 0;
 800669e:	463c      	mov	r4, r7
          report_status_message(STATUS_OVERFLOW);
 80066a0:	f000 f852 	bl	8006748 <report_status_message>
 80066a4:	e7aa      	b.n	80065fc <protocol_main_loop+0x2c>
        char_counter = 0;
 80066a6:	4605      	mov	r5, r0
          report_status_message(STATUS_OK);
 80066a8:	f000 f84e 	bl	8006748 <report_status_message>
        line_flags = 0;
 80066ac:	462c      	mov	r4, r5
 80066ae:	e7a5      	b.n	80065fc <protocol_main_loop+0x2c>
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 80066b0:	f7ff f864 	bl	800577c <protocol_exec_rt_suspend>
 80066b4:	e7c1      	b.n	800663a <protocol_main_loop+0x6a>
          report_status_message(gc_execute_line(line));
 80066b6:	4640      	mov	r0, r8
 80066b8:	f7fb fb8a 	bl	8001dd0 <gc_execute_line>
 80066bc:	f000 f844 	bl	8006748 <report_status_message>
        line_flags = 0;
 80066c0:	462c      	mov	r4, r5
 80066c2:	e79b      	b.n	80065fc <protocol_main_loop+0x2c>
          report_status_message(system_execute_line(line));
 80066c4:	4640      	mov	r0, r8
        char_counter = 0;
 80066c6:	4625      	mov	r5, r4
          report_status_message(system_execute_line(line));
 80066c8:	f003 f8aa 	bl	8009820 <system_execute_line>
 80066cc:	f000 f83c 	bl	8006748 <report_status_message>
 80066d0:	e794      	b.n	80065fc <protocol_main_loop+0x2c>
            line_flags |= LINE_FLAG_COMMENT_PARENTHESES;
 80066d2:	2402      	movs	r4, #2
 80066d4:	e792      	b.n	80065fc <protocol_main_loop+0x2c>
    sys.state = STATE_IDLE;
 80066d6:	7033      	strb	r3, [r6, #0]
    if (system_check_safety_door_ajar()) {
 80066d8:	f003 f87e 	bl	80097d8 <system_check_safety_door_ajar>
 80066dc:	b9f0      	cbnz	r0, 800671c <protocol_main_loop+0x14c>
    system_execute_startup(line); // Execute startup script.
 80066de:	4818      	ldr	r0, [pc, #96]	; (8006740 <protocol_main_loop+0x170>)
 80066e0:	f003 f87c 	bl	80097dc <system_execute_startup>
 80066e4:	e786      	b.n	80065f4 <protocol_main_loop+0x24>
 80066e6:	4629      	mov	r1, r5
          } else if (c >= 'a' && c <= 'z') { // Upcase lowercase
 80066e8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80066ec:	b2db      	uxtb	r3, r3
 80066ee:	2b19      	cmp	r3, #25
 80066f0:	f105 0201 	add.w	r2, r5, #1
            line[char_counter++] = c-'a'+'A';
 80066f4:	bf98      	it	ls
 80066f6:	3820      	subls	r0, #32
 80066f8:	b2d5      	uxtb	r5, r2
            line[char_counter++] = c;
 80066fa:	f808 0001 	strb.w	r0, [r8, r1]
 80066fe:	e77d      	b.n	80065fc <protocol_main_loop+0x2c>
            line_flags |= LINE_FLAG_COMMENT_SEMICOLON;
 8006700:	2404      	movs	r4, #4
 8006702:	e77b      	b.n	80065fc <protocol_main_loop+0x2c>
      if (limits_get_state()) {
 8006704:	f7fc fdc8 	bl	8003298 <limits_get_state>
 8006708:	2800      	cmp	r0, #0
 800670a:	f43f af69 	beq.w	80065e0 <protocol_main_loop+0x10>
        sys.state = STATE_ALARM; // Ensure alarm state is active.
 800670e:	2301      	movs	r3, #1
 8006710:	4e0a      	ldr	r6, [pc, #40]	; (800673c <protocol_main_loop+0x16c>)
        report_feedback_message(MESSAGE_CHECK_LIMITS);
 8006712:	2007      	movs	r0, #7
        sys.state = STATE_ALARM; // Ensure alarm state is active.
 8006714:	7033      	strb	r3, [r6, #0]
        report_feedback_message(MESSAGE_CHECK_LIMITS);
 8006716:	f000 f845 	bl	80067a4 <report_feedback_message>
 800671a:	e762      	b.n	80065e2 <protocol_main_loop+0x12>
      bit_true(sys_rt_exec_state, EXEC_SAFETY_DOOR);
 800671c:	4a09      	ldr	r2, [pc, #36]	; (8006744 <protocol_main_loop+0x174>)
 800671e:	7813      	ldrb	r3, [r2, #0]
 8006720:	f043 0320 	orr.w	r3, r3, #32
 8006724:	7013      	strb	r3, [r2, #0]
  protocol_exec_rt_system();
 8006726:	f7fe fe43 	bl	80053b0 <protocol_exec_rt_system>
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 800672a:	78b3      	ldrb	r3, [r6, #2]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d0d6      	beq.n	80066de <protocol_main_loop+0x10e>
 8006730:	f7ff f824 	bl	800577c <protocol_exec_rt_suspend>
 8006734:	e7d3      	b.n	80066de <protocol_main_loop+0x10e>
 8006736:	bf00      	nop
 8006738:	20001744 	.word	0x20001744
 800673c:	20001408 	.word	0x20001408
 8006740:	20000d5c 	.word	0x20000d5c
 8006744:	2000141d 	.word	0x2000141d

08006748 <report_status_message>:
// operation. Errors events can originate from the g-code parser, settings module, or asynchronously
// from a critical error, such as a triggered hard limit. Interface should always monitor for these
// responses.
void report_status_message(uint8_t status_code)
{
  switch(status_code) {
 8006748:	b160      	cbz	r0, 8006764 <report_status_message+0x1c>
{
 800674a:	b510      	push	{r4, lr}
 800674c:	4604      	mov	r4, r0
    case STATUS_OK: // STATUS_OK
      printPgmString(PSTR("ok\r\n")); break;
    default:
      printPgmString(PSTR("error:"));
 800674e:	4807      	ldr	r0, [pc, #28]	; (800676c <report_status_message+0x24>)
 8006750:	f7fe fae6 	bl	8004d20 <printString>
      print_uint8_base10(status_code);
 8006754:	4620      	mov	r0, r4
 8006756:	f7fe faef 	bl	8004d38 <print_uint8_base10>
      report_util_line_feed();
  }
}
 800675a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 800675e:	4804      	ldr	r0, [pc, #16]	; (8006770 <report_status_message+0x28>)
 8006760:	f7fe bade 	b.w	8004d20 <printString>
      printPgmString(PSTR("ok\r\n")); break;
 8006764:	4803      	ldr	r0, [pc, #12]	; (8006774 <report_status_message+0x2c>)
 8006766:	f7fe badb 	b.w	8004d20 <printString>
 800676a:	bf00      	nop
 800676c:	0800cb10 	.word	0x0800cb10
 8006770:	0800cb18 	.word	0x0800cb18
 8006774:	0800cb08 	.word	0x0800cb08

08006778 <report_alarm_message>:

// Prints alarm messages.
void report_alarm_message(uint8_t alarm_code)
{
 8006778:	b510      	push	{r4, lr}
 800677a:	4604      	mov	r4, r0
  printPgmString(PSTR("ALARM:"));
 800677c:	4807      	ldr	r0, [pc, #28]	; (800679c <report_alarm_message+0x24>)
 800677e:	f7fe facf 	bl	8004d20 <printString>
  print_uint8_base10(alarm_code);
 8006782:	4620      	mov	r0, r4
 8006784:	f7fe fad8 	bl	8004d38 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006788:	4805      	ldr	r0, [pc, #20]	; (80067a0 <report_alarm_message+0x28>)
 800678a:	f7fe fac9 	bl	8004d20 <printString>
  report_util_line_feed();
  delay_ms(500); // Force delay to ensure message clears serial write buffer.
}
 800678e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  delay_ms(500); // Force delay to ensure message clears serial write buffer.
 8006792:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006796:	f7fd bd2f 	b.w	80041f8 <delay_ms>
 800679a:	bf00      	nop
 800679c:	0800c8f8 	.word	0x0800c8f8
 80067a0:	0800cb18 	.word	0x0800cb18

080067a4 <report_feedback_message>:
// user feedback for things that are not of the status/alarm message protocol. These are
// messages such as setup warnings, switch toggling, and how to exit alarms.
// NOTE: For interfaces, messages are always placed within brackets. And if silent mode
// is installed, the message number codes are less than zero.
void report_feedback_message(uint8_t message_code)
{
 80067a4:	b510      	push	{r4, lr}
 80067a6:	4604      	mov	r4, r0
  printPgmString(PSTR("[MSG:"));
 80067a8:	4820      	ldr	r0, [pc, #128]	; (800682c <report_feedback_message+0x88>)
 80067aa:	f7fe fab9 	bl	8004d20 <printString>
  switch(message_code) {
 80067ae:	1e60      	subs	r0, r4, #1
 80067b0:	280a      	cmp	r0, #10
 80067b2:	d80a      	bhi.n	80067ca <report_feedback_message+0x26>
 80067b4:	e8df f000 	tbb	[pc, r0]
 80067b8:	1d191511 	.word	0x1d191511
 80067bc:	2d292521 	.word	0x2d292521
 80067c0:	3531      	.short	0x3531
 80067c2:	06          	.byte	0x06
 80067c3:	00          	.byte	0x00
    case MESSAGE_RESTORE_DEFAULTS:
      printPgmString(PSTR("Restoring defaults")); break;
    case MESSAGE_SPINDLE_RESTORE:
      printPgmString(PSTR("Restoring spindle")); break;
    case MESSAGE_SLEEP_MODE:
      printPgmString(PSTR("Sleeping")); break;
 80067c4:	481a      	ldr	r0, [pc, #104]	; (8006830 <report_feedback_message+0x8c>)
 80067c6:	f7fe faab 	bl	8004d20 <printString>
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 80067ca:	205d      	movs	r0, #93	; 0x5d
 80067cc:	f000 ff58 	bl	8007680 <serial_write>
  }
  report_util_feedback_line_feed();
}
 80067d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80067d4:	4817      	ldr	r0, [pc, #92]	; (8006834 <report_feedback_message+0x90>)
 80067d6:	f7fe baa3 	b.w	8004d20 <printString>
      printPgmString(PSTR("Reset to continue")); break;
 80067da:	4817      	ldr	r0, [pc, #92]	; (8006838 <report_feedback_message+0x94>)
 80067dc:	f7fe faa0 	bl	8004d20 <printString>
 80067e0:	e7f3      	b.n	80067ca <report_feedback_message+0x26>
      printPgmString(PSTR("'$H'|'$X' to unlock")); break;
 80067e2:	4816      	ldr	r0, [pc, #88]	; (800683c <report_feedback_message+0x98>)
 80067e4:	f7fe fa9c 	bl	8004d20 <printString>
 80067e8:	e7ef      	b.n	80067ca <report_feedback_message+0x26>
      printPgmString(PSTR("Caution: Unlocked")); break;
 80067ea:	4815      	ldr	r0, [pc, #84]	; (8006840 <report_feedback_message+0x9c>)
 80067ec:	f7fe fa98 	bl	8004d20 <printString>
 80067f0:	e7eb      	b.n	80067ca <report_feedback_message+0x26>
      printPgmString(PSTR("Enabled")); break;
 80067f2:	4814      	ldr	r0, [pc, #80]	; (8006844 <report_feedback_message+0xa0>)
 80067f4:	f7fe fa94 	bl	8004d20 <printString>
 80067f8:	e7e7      	b.n	80067ca <report_feedback_message+0x26>
      printPgmString(PSTR("Disabled")); break;
 80067fa:	4813      	ldr	r0, [pc, #76]	; (8006848 <report_feedback_message+0xa4>)
 80067fc:	f7fe fa90 	bl	8004d20 <printString>
 8006800:	e7e3      	b.n	80067ca <report_feedback_message+0x26>
      printPgmString(PSTR("Check Door")); break;
 8006802:	4812      	ldr	r0, [pc, #72]	; (800684c <report_feedback_message+0xa8>)
 8006804:	f7fe fa8c 	bl	8004d20 <printString>
 8006808:	e7df      	b.n	80067ca <report_feedback_message+0x26>
      printPgmString(PSTR("Check Limits")); break;
 800680a:	4811      	ldr	r0, [pc, #68]	; (8006850 <report_feedback_message+0xac>)
 800680c:	f7fe fa88 	bl	8004d20 <printString>
 8006810:	e7db      	b.n	80067ca <report_feedback_message+0x26>
      printPgmString(PSTR("Pgm End")); break;
 8006812:	4810      	ldr	r0, [pc, #64]	; (8006854 <report_feedback_message+0xb0>)
 8006814:	f7fe fa84 	bl	8004d20 <printString>
 8006818:	e7d7      	b.n	80067ca <report_feedback_message+0x26>
      printPgmString(PSTR("Restoring defaults")); break;
 800681a:	480f      	ldr	r0, [pc, #60]	; (8006858 <report_feedback_message+0xb4>)
 800681c:	f7fe fa80 	bl	8004d20 <printString>
 8006820:	e7d3      	b.n	80067ca <report_feedback_message+0x26>
      printPgmString(PSTR("Restoring spindle")); break;
 8006822:	480e      	ldr	r0, [pc, #56]	; (800685c <report_feedback_message+0xb8>)
 8006824:	f7fe fa7c 	bl	8004d20 <printString>
 8006828:	e7cf      	b.n	80067ca <report_feedback_message+0x26>
 800682a:	bf00      	nop
 800682c:	0800c924 	.word	0x0800c924
 8006830:	0800c9c8 	.word	0x0800c9c8
 8006834:	0800cb18 	.word	0x0800cb18
 8006838:	0800c92c 	.word	0x0800c92c
 800683c:	0800c940 	.word	0x0800c940
 8006840:	0800c954 	.word	0x0800c954
 8006844:	0800c968 	.word	0x0800c968
 8006848:	0800c970 	.word	0x0800c970
 800684c:	0800c97c 	.word	0x0800c97c
 8006850:	0800c988 	.word	0x0800c988
 8006854:	0800c998 	.word	0x0800c998
 8006858:	0800c9a0 	.word	0x0800c9a0
 800685c:	0800c9b4 	.word	0x0800c9b4

08006860 <report_init_message>:


// Welcome message
void report_init_message()
{
  printPgmString(PSTR("\r\nGrbl " GRBL_VERSION " ['$' for help]\r\n"));
 8006860:	4801      	ldr	r0, [pc, #4]	; (8006868 <report_init_message+0x8>)
 8006862:	f7fe ba5d 	b.w	8004d20 <printString>
 8006866:	bf00      	nop
 8006868:	0800ca40 	.word	0x0800ca40

0800686c <report_grbl_help>:
}

// Grbl help message
void report_grbl_help() {
  printPgmString(PSTR("[HLP:$$ $# $G $I $N $x=val $Nx=line $J=line $SLP $C $X $H ~ ! ? ctrl-x]\r\n"));    
 800686c:	4801      	ldr	r0, [pc, #4]	; (8006874 <report_grbl_help+0x8>)
 800686e:	f7fe ba57 	b.w	8004d20 <printString>
 8006872:	bf00      	nop
 8006874:	0800c9f4 	.word	0x0800c9f4

08006878 <report_grbl_settings>:
}


// Grbl global settings print out.
// NOTE: The numbering scheme here must correlate to storing in settings.c
void report_grbl_settings() {
 8006878:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  // Print Grbl settings.
  report_util_uint8_setting(0,settings.pulse_microseconds);
 800687c:	4cc5      	ldr	r4, [pc, #788]	; (8006b94 <report_grbl_settings+0x31c>)
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 800687e:	2024      	movs	r0, #36	; 0x24
  report_util_uint8_setting(0,settings.pulse_microseconds);
 8006880:	f894 5040 	ldrb.w	r5, [r4, #64]	; 0x40
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006884:	f000 fefc 	bl	8007680 <serial_write>
 8006888:	2000      	movs	r0, #0
 800688a:	f7fe fa55 	bl	8004d38 <print_uint8_base10>
 800688e:	203d      	movs	r0, #61	; 0x3d
 8006890:	f000 fef6 	bl	8007680 <serial_write>
  print_uint8_base10(val);
 8006894:	4628      	mov	r0, r5
 8006896:	f7fe fa4f 	bl	8004d38 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 800689a:	48bf      	ldr	r0, [pc, #764]	; (8006b98 <report_grbl_settings+0x320>)
 800689c:	f7fe fa40 	bl	8004d20 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80068a0:	2024      	movs	r0, #36	; 0x24
  report_util_uint8_setting(1,settings.stepper_idle_lock_time);
 80068a2:	f894 5046 	ldrb.w	r5, [r4, #70]	; 0x46
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80068a6:	f000 feeb 	bl	8007680 <serial_write>
 80068aa:	2001      	movs	r0, #1
 80068ac:	f7fe fa44 	bl	8004d38 <print_uint8_base10>
 80068b0:	203d      	movs	r0, #61	; 0x3d
 80068b2:	f000 fee5 	bl	8007680 <serial_write>
  print_uint8_base10(val);
 80068b6:	4628      	mov	r0, r5
 80068b8:	f7fe fa3e 	bl	8004d38 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80068bc:	48b6      	ldr	r0, [pc, #728]	; (8006b98 <report_grbl_settings+0x320>)
 80068be:	f7fe fa2f 	bl	8004d20 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80068c2:	2024      	movs	r0, #36	; 0x24
  report_util_uint8_setting(2,settings.step_invert_mask);
 80068c4:	f8b4 5042 	ldrh.w	r5, [r4, #66]	; 0x42
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80068c8:	f000 feda 	bl	8007680 <serial_write>
 80068cc:	2002      	movs	r0, #2
 80068ce:	f7fe fa33 	bl	8004d38 <print_uint8_base10>
 80068d2:	203d      	movs	r0, #61	; 0x3d
 80068d4:	f000 fed4 	bl	8007680 <serial_write>
  print_uint8_base10(val);
 80068d8:	b2e8      	uxtb	r0, r5
 80068da:	f7fe fa2d 	bl	8004d38 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80068de:	48ae      	ldr	r0, [pc, #696]	; (8006b98 <report_grbl_settings+0x320>)
 80068e0:	f7fe fa1e 	bl	8004d20 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80068e4:	2024      	movs	r0, #36	; 0x24
  report_util_uint8_setting(3,settings.dir_invert_mask);
 80068e6:	f8b4 5044 	ldrh.w	r5, [r4, #68]	; 0x44
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80068ea:	f000 fec9 	bl	8007680 <serial_write>
 80068ee:	2003      	movs	r0, #3
 80068f0:	f7fe fa22 	bl	8004d38 <print_uint8_base10>
 80068f4:	203d      	movs	r0, #61	; 0x3d
 80068f6:	f000 fec3 	bl	8007680 <serial_write>
  print_uint8_base10(val);
 80068fa:	b2e8      	uxtb	r0, r5
 80068fc:	f7fe fa1c 	bl	8004d38 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006900:	48a5      	ldr	r0, [pc, #660]	; (8006b98 <report_grbl_settings+0x320>)
 8006902:	f7fe fa0d 	bl	8004d20 <printString>
  report_util_uint8_setting(4,bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE));
 8006906:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 800690a:	2024      	movs	r0, #36	; 0x24
 800690c:	f000 feb8 	bl	8007680 <serial_write>
 8006910:	2004      	movs	r0, #4
 8006912:	f7fe fa11 	bl	8004d38 <print_uint8_base10>
  report_util_uint8_setting(4,bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE));
 8006916:	f3c5 0580 	ubfx	r5, r5, #2, #1
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 800691a:	203d      	movs	r0, #61	; 0x3d
 800691c:	f000 feb0 	bl	8007680 <serial_write>
  print_uint8_base10(val);
 8006920:	4628      	mov	r0, r5
 8006922:	f7fe fa09 	bl	8004d38 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006926:	489c      	ldr	r0, [pc, #624]	; (8006b98 <report_grbl_settings+0x320>)
 8006928:	f7fe f9fa 	bl	8004d20 <printString>
  report_util_uint8_setting(5,bit_istrue(settings.flags,BITFLAG_INVERT_LIMIT_PINS));
 800692c:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006930:	2024      	movs	r0, #36	; 0x24
 8006932:	f000 fea5 	bl	8007680 <serial_write>
 8006936:	2005      	movs	r0, #5
 8006938:	f7fe f9fe 	bl	8004d38 <print_uint8_base10>
  report_util_uint8_setting(5,bit_istrue(settings.flags,BITFLAG_INVERT_LIMIT_PINS));
 800693c:	f3c5 1580 	ubfx	r5, r5, #6, #1
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006940:	203d      	movs	r0, #61	; 0x3d
 8006942:	f000 fe9d 	bl	8007680 <serial_write>
  print_uint8_base10(val);
 8006946:	4628      	mov	r0, r5
 8006948:	f7fe f9f6 	bl	8004d38 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 800694c:	4892      	ldr	r0, [pc, #584]	; (8006b98 <report_grbl_settings+0x320>)
 800694e:	f7fe f9e7 	bl	8004d20 <printString>
  report_util_uint8_setting(6,bit_istrue(settings.flags,BITFLAG_INVERT_PROBE_PIN));
 8006952:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006956:	2024      	movs	r0, #36	; 0x24
 8006958:	f000 fe92 	bl	8007680 <serial_write>
 800695c:	2006      	movs	r0, #6
  report_util_uint8_setting(6,bit_istrue(settings.flags,BITFLAG_INVERT_PROBE_PIN));
 800695e:	09ed      	lsrs	r5, r5, #7
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006960:	f7fe f9ea 	bl	8004d38 <print_uint8_base10>
 8006964:	203d      	movs	r0, #61	; 0x3d
 8006966:	f000 fe8b 	bl	8007680 <serial_write>
  print_uint8_base10(val);
 800696a:	4628      	mov	r0, r5
 800696c:	f7fe f9e4 	bl	8004d38 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006970:	4889      	ldr	r0, [pc, #548]	; (8006b98 <report_grbl_settings+0x320>)
 8006972:	f7fe f9d5 	bl	8004d20 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006976:	2024      	movs	r0, #36	; 0x24
  report_util_uint8_setting(10,settings.status_report_mask);
 8006978:	f894 5047 	ldrb.w	r5, [r4, #71]	; 0x47
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 800697c:	f000 fe80 	bl	8007680 <serial_write>
 8006980:	200a      	movs	r0, #10
 8006982:	f7fe f9d9 	bl	8004d38 <print_uint8_base10>
 8006986:	203d      	movs	r0, #61	; 0x3d
 8006988:	f000 fe7a 	bl	8007680 <serial_write>
  print_uint8_base10(val);
 800698c:	4628      	mov	r0, r5
 800698e:	f7fe f9d3 	bl	8004d38 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006992:	4881      	ldr	r0, [pc, #516]	; (8006b98 <report_grbl_settings+0x320>)
 8006994:	f7fe f9c4 	bl	8004d20 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006998:	2024      	movs	r0, #36	; 0x24
  report_util_float_setting(11,settings.junction_deviation,N_DECIMAL_SETTINGVALUE);
 800699a:	6ca5      	ldr	r5, [r4, #72]	; 0x48
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 800699c:	f000 fe70 	bl	8007680 <serial_write>
 80069a0:	200b      	movs	r0, #11
 80069a2:	f7fe f9c9 	bl	8004d38 <print_uint8_base10>
 80069a6:	203d      	movs	r0, #61	; 0x3d
 80069a8:	f000 fe6a 	bl	8007680 <serial_write>
  printFloat(val, n_decimal);
 80069ac:	2103      	movs	r1, #3
 80069ae:	4628      	mov	r0, r5
 80069b0:	f7fe fa04 	bl	8004dbc <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80069b4:	4878      	ldr	r0, [pc, #480]	; (8006b98 <report_grbl_settings+0x320>)
 80069b6:	f7fe f9b3 	bl	8004d20 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80069ba:	2024      	movs	r0, #36	; 0x24
  report_util_float_setting(12,settings.arc_tolerance,N_DECIMAL_SETTINGVALUE);
 80069bc:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80069be:	f000 fe5f 	bl	8007680 <serial_write>
 80069c2:	200c      	movs	r0, #12
 80069c4:	f7fe f9b8 	bl	8004d38 <print_uint8_base10>
 80069c8:	203d      	movs	r0, #61	; 0x3d
 80069ca:	f000 fe59 	bl	8007680 <serial_write>
  printFloat(val, n_decimal);
 80069ce:	2103      	movs	r1, #3
 80069d0:	4628      	mov	r0, r5
 80069d2:	f7fe f9f3 	bl	8004dbc <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80069d6:	4870      	ldr	r0, [pc, #448]	; (8006b98 <report_grbl_settings+0x320>)
 80069d8:	f7fe f9a2 	bl	8004d20 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80069dc:	2024      	movs	r0, #36	; 0x24
  report_util_uint8_setting(13,bit_istrue(settings.flags,BITFLAG_REPORT_INCHES));
 80069de:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80069e2:	f000 fe4d 	bl	8007680 <serial_write>
 80069e6:	200d      	movs	r0, #13
 80069e8:	f7fe f9a6 	bl	8004d38 <print_uint8_base10>
 80069ec:	203d      	movs	r0, #61	; 0x3d
 80069ee:	f000 fe47 	bl	8007680 <serial_write>
  print_uint8_base10(val);
 80069f2:	f005 0001 	and.w	r0, r5, #1
 80069f6:	f7fe f99f 	bl	8004d38 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80069fa:	4867      	ldr	r0, [pc, #412]	; (8006b98 <report_grbl_settings+0x320>)
 80069fc:	f7fe f990 	bl	8004d20 <printString>
  report_util_uint8_setting(20,bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE));
 8006a00:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006a04:	2024      	movs	r0, #36	; 0x24
 8006a06:	f000 fe3b 	bl	8007680 <serial_write>
 8006a0a:	2014      	movs	r0, #20
 8006a0c:	f7fe f994 	bl	8004d38 <print_uint8_base10>
  report_util_uint8_setting(20,bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE));
 8006a10:	f3c5 1540 	ubfx	r5, r5, #5, #1
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006a14:	203d      	movs	r0, #61	; 0x3d
 8006a16:	f000 fe33 	bl	8007680 <serial_write>
  print_uint8_base10(val);
 8006a1a:	4628      	mov	r0, r5
 8006a1c:	f7fe f98c 	bl	8004d38 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006a20:	485d      	ldr	r0, [pc, #372]	; (8006b98 <report_grbl_settings+0x320>)
 8006a22:	f7fe f97d 	bl	8004d20 <printString>
  report_util_uint8_setting(21,bit_istrue(settings.flags,BITFLAG_HARD_LIMIT_ENABLE));
 8006a26:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006a2a:	2024      	movs	r0, #36	; 0x24
 8006a2c:	f000 fe28 	bl	8007680 <serial_write>
 8006a30:	2015      	movs	r0, #21
 8006a32:	f7fe f981 	bl	8004d38 <print_uint8_base10>
  report_util_uint8_setting(21,bit_istrue(settings.flags,BITFLAG_HARD_LIMIT_ENABLE));
 8006a36:	f3c5 05c0 	ubfx	r5, r5, #3, #1
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006a3a:	203d      	movs	r0, #61	; 0x3d
 8006a3c:	f000 fe20 	bl	8007680 <serial_write>
  print_uint8_base10(val);
 8006a40:	4628      	mov	r0, r5
 8006a42:	f7fe f979 	bl	8004d38 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006a46:	4854      	ldr	r0, [pc, #336]	; (8006b98 <report_grbl_settings+0x320>)
 8006a48:	f7fe f96a 	bl	8004d20 <printString>
  report_util_uint8_setting(22,bit_istrue(settings.flags,BITFLAG_HOMING_ENABLE));
 8006a4c:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006a50:	2024      	movs	r0, #36	; 0x24
 8006a52:	f000 fe15 	bl	8007680 <serial_write>
 8006a56:	2016      	movs	r0, #22
 8006a58:	f7fe f96e 	bl	8004d38 <print_uint8_base10>
  report_util_uint8_setting(22,bit_istrue(settings.flags,BITFLAG_HOMING_ENABLE));
 8006a5c:	f3c5 1500 	ubfx	r5, r5, #4, #1
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006a60:	203d      	movs	r0, #61	; 0x3d
 8006a62:	f000 fe0d 	bl	8007680 <serial_write>
  print_uint8_base10(val);
 8006a66:	4628      	mov	r0, r5
 8006a68:	f7fe f966 	bl	8004d38 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006a6c:	484a      	ldr	r0, [pc, #296]	; (8006b98 <report_grbl_settings+0x320>)
 8006a6e:	f7fe f957 	bl	8004d20 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006a72:	2024      	movs	r0, #36	; 0x24
  report_util_uint8_setting(23,settings.homing_dir_mask);
 8006a74:	f8b4 505a 	ldrh.w	r5, [r4, #90]	; 0x5a
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006a78:	f000 fe02 	bl	8007680 <serial_write>
 8006a7c:	2017      	movs	r0, #23
 8006a7e:	f7fe f95b 	bl	8004d38 <print_uint8_base10>
 8006a82:	203d      	movs	r0, #61	; 0x3d
 8006a84:	f000 fdfc 	bl	8007680 <serial_write>
  print_uint8_base10(val);
 8006a88:	b2e8      	uxtb	r0, r5
 8006a8a:	f7fe f955 	bl	8004d38 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006a8e:	4842      	ldr	r0, [pc, #264]	; (8006b98 <report_grbl_settings+0x320>)
 8006a90:	f7fe f946 	bl	8004d20 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006a94:	2024      	movs	r0, #36	; 0x24
  report_util_float_setting(24,settings.homing_feed_rate,N_DECIMAL_SETTINGVALUE);
 8006a96:	6de5      	ldr	r5, [r4, #92]	; 0x5c
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006a98:	f000 fdf2 	bl	8007680 <serial_write>
 8006a9c:	2018      	movs	r0, #24
 8006a9e:	f7fe f94b 	bl	8004d38 <print_uint8_base10>
 8006aa2:	203d      	movs	r0, #61	; 0x3d
 8006aa4:	f000 fdec 	bl	8007680 <serial_write>
  printFloat(val, n_decimal);
 8006aa8:	2103      	movs	r1, #3
 8006aaa:	4628      	mov	r0, r5
 8006aac:	f7fe f986 	bl	8004dbc <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006ab0:	4839      	ldr	r0, [pc, #228]	; (8006b98 <report_grbl_settings+0x320>)
 8006ab2:	f7fe f935 	bl	8004d20 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006ab6:	2024      	movs	r0, #36	; 0x24
  report_util_float_setting(25,settings.homing_seek_rate,N_DECIMAL_SETTINGVALUE);
 8006ab8:	6e25      	ldr	r5, [r4, #96]	; 0x60
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006aba:	f000 fde1 	bl	8007680 <serial_write>
 8006abe:	2019      	movs	r0, #25
 8006ac0:	f7fe f93a 	bl	8004d38 <print_uint8_base10>
 8006ac4:	203d      	movs	r0, #61	; 0x3d
 8006ac6:	f000 fddb 	bl	8007680 <serial_write>
  printFloat(val, n_decimal);
 8006aca:	2103      	movs	r1, #3
 8006acc:	4628      	mov	r0, r5
 8006ace:	f7fe f975 	bl	8004dbc <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006ad2:	4831      	ldr	r0, [pc, #196]	; (8006b98 <report_grbl_settings+0x320>)
 8006ad4:	f7fe f924 	bl	8004d20 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006ad8:	2024      	movs	r0, #36	; 0x24
  report_util_uint8_setting(26,settings.homing_debounce_delay);
 8006ada:	f8b4 5064 	ldrh.w	r5, [r4, #100]	; 0x64
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006ade:	f000 fdcf 	bl	8007680 <serial_write>
 8006ae2:	201a      	movs	r0, #26
 8006ae4:	f7fe f928 	bl	8004d38 <print_uint8_base10>
 8006ae8:	203d      	movs	r0, #61	; 0x3d
 8006aea:	f000 fdc9 	bl	8007680 <serial_write>
  print_uint8_base10(val);
 8006aee:	b2e8      	uxtb	r0, r5
 8006af0:	f7fe f922 	bl	8004d38 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006af4:	4828      	ldr	r0, [pc, #160]	; (8006b98 <report_grbl_settings+0x320>)
 8006af6:	f7fe f913 	bl	8004d20 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006afa:	2024      	movs	r0, #36	; 0x24
  report_util_float_setting(27,settings.homing_pulloff,N_DECIMAL_SETTINGVALUE);
 8006afc:	6ea5      	ldr	r5, [r4, #104]	; 0x68
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006afe:	f000 fdbf 	bl	8007680 <serial_write>
 8006b02:	201b      	movs	r0, #27
 8006b04:	f7fe f918 	bl	8004d38 <print_uint8_base10>
 8006b08:	203d      	movs	r0, #61	; 0x3d
 8006b0a:	f000 fdb9 	bl	8007680 <serial_write>
  printFloat(val, n_decimal);
 8006b0e:	2103      	movs	r1, #3
 8006b10:	4628      	mov	r0, r5
 8006b12:	f7fe f953 	bl	8004dbc <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006b16:	4820      	ldr	r0, [pc, #128]	; (8006b98 <report_grbl_settings+0x320>)
 8006b18:	f7fe f902 	bl	8004d20 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006b1c:	2024      	movs	r0, #36	; 0x24
  report_util_float_setting(30,settings.rpm_max,N_DECIMAL_RPMVALUE);
 8006b1e:	6d25      	ldr	r5, [r4, #80]	; 0x50
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006b20:	f000 fdae 	bl	8007680 <serial_write>
 8006b24:	201e      	movs	r0, #30
 8006b26:	f7fe f907 	bl	8004d38 <print_uint8_base10>
 8006b2a:	203d      	movs	r0, #61	; 0x3d
 8006b2c:	f000 fda8 	bl	8007680 <serial_write>
  printFloat(val, n_decimal);
 8006b30:	2100      	movs	r1, #0
 8006b32:	4628      	mov	r0, r5
 8006b34:	f7fe f942 	bl	8004dbc <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006b38:	4817      	ldr	r0, [pc, #92]	; (8006b98 <report_grbl_settings+0x320>)
 8006b3a:	f7fe f8f1 	bl	8004d20 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006b3e:	2024      	movs	r0, #36	; 0x24
  report_util_float_setting(31,settings.rpm_min,N_DECIMAL_RPMVALUE);
 8006b40:	6d65      	ldr	r5, [r4, #84]	; 0x54
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006b42:	f000 fd9d 	bl	8007680 <serial_write>
 8006b46:	201f      	movs	r0, #31
 8006b48:	f7fe f8f6 	bl	8004d38 <print_uint8_base10>
 8006b4c:	203d      	movs	r0, #61	; 0x3d
 8006b4e:	f000 fd97 	bl	8007680 <serial_write>
  printFloat(val, n_decimal);
 8006b52:	2100      	movs	r1, #0
 8006b54:	4628      	mov	r0, r5
 8006b56:	f7fe f931 	bl	8004dbc <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006b5a:	480f      	ldr	r0, [pc, #60]	; (8006b98 <report_grbl_settings+0x320>)
 8006b5c:	f7fe f8e0 	bl	8004d20 <printString>
  #ifdef VARIABLE_SPINDLE
    report_util_uint8_setting(32,bit_istrue(settings.flags,BITFLAG_LASER_MODE));
 8006b60:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006b64:	2024      	movs	r0, #36	; 0x24
 8006b66:	f000 fd8b 	bl	8007680 <serial_write>
 8006b6a:	2020      	movs	r0, #32
    report_util_uint8_setting(32,bit_istrue(settings.flags,BITFLAG_LASER_MODE));
 8006b6c:	f3c5 0540 	ubfx	r5, r5, #1, #1
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006b70:	f7fe f8e2 	bl	8004d38 <print_uint8_base10>
 8006b74:	203d      	movs	r0, #61	; 0x3d
 8006b76:	f000 fd83 	bl	8007680 <serial_write>
  print_uint8_base10(val);
 8006b7a:	4628      	mov	r0, r5
 8006b7c:	f7fe f8dc 	bl	8004d38 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006b80:	4805      	ldr	r0, [pc, #20]	; (8006b98 <report_grbl_settings+0x320>)
 8006b82:	f7fe f8cd 	bl	8004d20 <printString>
 8006b86:	f04f 0a00 	mov.w	sl, #0
  #else
    report_util_uint8_setting(32,0);
  #endif
  // Print axis settings
  uint8_t idx, set_idx;
  uint8_t val = AXIS_SETTINGS_START_VAL;
 8006b8a:	2564      	movs	r5, #100	; 0x64
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006b8c:	f8df 9008 	ldr.w	r9, [pc, #8]	; 8006b98 <report_grbl_settings+0x320>
 8006b90:	e004      	b.n	8006b9c <report_grbl_settings+0x324>
 8006b92:	bf00      	nop
 8006b94:	20001744 	.word	0x20001744
 8006b98:	0800cb18 	.word	0x0800cb18
  for (set_idx=0; set_idx<AXIS_N_SETTINGS; set_idx++) {
    for (idx=0; idx<N_AXIS; idx++) {
      switch (set_idx) {
 8006b9c:	fa5f fb8a 	uxtb.w	fp, sl
 8006ba0:	f105 0801 	add.w	r8, r5, #1
 8006ba4:	1caf      	adds	r7, r5, #2
 8006ba6:	1cee      	adds	r6, r5, #3
 8006ba8:	f1bb 0f02 	cmp.w	fp, #2
 8006bac:	fa5f f888 	uxtb.w	r8, r8
 8006bb0:	b2ff      	uxtb	r7, r7
 8006bb2:	b2f6      	uxtb	r6, r6
 8006bb4:	f000 80a5 	beq.w	8006d02 <report_grbl_settings+0x48a>
 8006bb8:	f1bb 0f03 	cmp.w	fp, #3
 8006bbc:	d053      	beq.n	8006c66 <report_grbl_settings+0x3ee>
 8006bbe:	f1bb 0f01 	cmp.w	fp, #1
 8006bc2:	f000 80e4 	beq.w	8006d8e <report_grbl_settings+0x516>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006bc6:	2024      	movs	r0, #36	; 0x24
        case 0: report_util_float_setting(val+idx,settings.steps_per_mm[idx],N_DECIMAL_SETTINGVALUE); break;
 8006bc8:	f8d4 b000 	ldr.w	fp, [r4]
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006bcc:	f000 fd58 	bl	8007680 <serial_write>
 8006bd0:	4628      	mov	r0, r5
 8006bd2:	f7fe f8b1 	bl	8004d38 <print_uint8_base10>
 8006bd6:	203d      	movs	r0, #61	; 0x3d
 8006bd8:	f000 fd52 	bl	8007680 <serial_write>
  printFloat(val, n_decimal);
 8006bdc:	2103      	movs	r1, #3
 8006bde:	4658      	mov	r0, fp
 8006be0:	f7fe f8ec 	bl	8004dbc <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006be4:	4648      	mov	r0, r9
 8006be6:	f7fe f89b 	bl	8004d20 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006bea:	2024      	movs	r0, #36	; 0x24
        case 0: report_util_float_setting(val+idx,settings.steps_per_mm[idx],N_DECIMAL_SETTINGVALUE); break;
 8006bec:	f8d4 b004 	ldr.w	fp, [r4, #4]
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006bf0:	f000 fd46 	bl	8007680 <serial_write>
 8006bf4:	4640      	mov	r0, r8
 8006bf6:	f7fe f89f 	bl	8004d38 <print_uint8_base10>
 8006bfa:	203d      	movs	r0, #61	; 0x3d
 8006bfc:	f000 fd40 	bl	8007680 <serial_write>
  printFloat(val, n_decimal);
 8006c00:	2103      	movs	r1, #3
 8006c02:	4658      	mov	r0, fp
 8006c04:	f7fe f8da 	bl	8004dbc <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006c08:	4648      	mov	r0, r9
 8006c0a:	f7fe f889 	bl	8004d20 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006c0e:	2024      	movs	r0, #36	; 0x24
        case 0: report_util_float_setting(val+idx,settings.steps_per_mm[idx],N_DECIMAL_SETTINGVALUE); break;
 8006c10:	f8d4 8008 	ldr.w	r8, [r4, #8]
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006c14:	f000 fd34 	bl	8007680 <serial_write>
 8006c18:	4638      	mov	r0, r7
 8006c1a:	f7fe f88d 	bl	8004d38 <print_uint8_base10>
 8006c1e:	203d      	movs	r0, #61	; 0x3d
 8006c20:	f000 fd2e 	bl	8007680 <serial_write>
  printFloat(val, n_decimal);
 8006c24:	4640      	mov	r0, r8
 8006c26:	2103      	movs	r1, #3
 8006c28:	f7fe f8c8 	bl	8004dbc <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006c2c:	4648      	mov	r0, r9
 8006c2e:	f7fe f877 	bl	8004d20 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006c32:	2024      	movs	r0, #36	; 0x24
        case 0: report_util_float_setting(val+idx,settings.steps_per_mm[idx],N_DECIMAL_SETTINGVALUE); break;
 8006c34:	68e7      	ldr	r7, [r4, #12]
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006c36:	f000 fd23 	bl	8007680 <serial_write>
 8006c3a:	4630      	mov	r0, r6
 8006c3c:	f7fe f87c 	bl	8004d38 <print_uint8_base10>
 8006c40:	203d      	movs	r0, #61	; 0x3d
 8006c42:	f000 fd1d 	bl	8007680 <serial_write>
  printFloat(val, n_decimal);
 8006c46:	4638      	mov	r0, r7
 8006c48:	2103      	movs	r1, #3
 8006c4a:	f7fe f8b7 	bl	8004dbc <printFloat>
 8006c4e:	f10a 0a01 	add.w	sl, sl, #1
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006c52:	4648      	mov	r0, r9
 8006c54:	f7fe f864 	bl	8004d20 <printString>
        case 1: report_util_float_setting(val+idx,settings.max_rate[idx],N_DECIMAL_SETTINGVALUE); break;
        case 2: report_util_float_setting(val+idx,settings.acceleration[idx]/(60*60),N_DECIMAL_SETTINGVALUE); break;
        case 3: report_util_float_setting(val+idx,-settings.max_travel[idx],N_DECIMAL_SETTINGVALUE); break;
      }
    }
    val += AXIS_SETTINGS_INCREMENT;
 8006c58:	350a      	adds	r5, #10
  for (set_idx=0; set_idx<AXIS_N_SETTINGS; set_idx++) {
 8006c5a:	f1ba 0f04 	cmp.w	sl, #4
    val += AXIS_SETTINGS_INCREMENT;
 8006c5e:	b2ed      	uxtb	r5, r5
  for (set_idx=0; set_idx<AXIS_N_SETTINGS; set_idx++) {
 8006c60:	d19c      	bne.n	8006b9c <report_grbl_settings+0x324>
  }
}
 8006c62:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        case 3: report_util_float_setting(val+idx,-settings.max_travel[idx],N_DECIMAL_SETTINGVALUE); break;
 8006c66:	6b23      	ldr	r3, [r4, #48]	; 0x30
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006c68:	2024      	movs	r0, #36	; 0x24
        case 3: report_util_float_setting(val+idx,-settings.max_travel[idx],N_DECIMAL_SETTINGVALUE); break;
 8006c6a:	f103 4900 	add.w	r9, r3, #2147483648	; 0x80000000
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006c6e:	f000 fd07 	bl	8007680 <serial_write>
 8006c72:	4628      	mov	r0, r5
 8006c74:	f7fe f860 	bl	8004d38 <print_uint8_base10>
 8006c78:	203d      	movs	r0, #61	; 0x3d
 8006c7a:	f000 fd01 	bl	8007680 <serial_write>
  printFloat(val, n_decimal);
 8006c7e:	4659      	mov	r1, fp
 8006c80:	4648      	mov	r0, r9
 8006c82:	f7fe f89b 	bl	8004dbc <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006c86:	485e      	ldr	r0, [pc, #376]	; (8006e00 <report_grbl_settings+0x588>)
 8006c88:	f7fe f84a 	bl	8004d20 <printString>
        case 3: report_util_float_setting(val+idx,-settings.max_travel[idx],N_DECIMAL_SETTINGVALUE); break;
 8006c8c:	6b63      	ldr	r3, [r4, #52]	; 0x34
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006c8e:	2024      	movs	r0, #36	; 0x24
        case 3: report_util_float_setting(val+idx,-settings.max_travel[idx],N_DECIMAL_SETTINGVALUE); break;
 8006c90:	f103 4500 	add.w	r5, r3, #2147483648	; 0x80000000
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006c94:	f000 fcf4 	bl	8007680 <serial_write>
 8006c98:	4640      	mov	r0, r8
 8006c9a:	f7fe f84d 	bl	8004d38 <print_uint8_base10>
 8006c9e:	203d      	movs	r0, #61	; 0x3d
 8006ca0:	f000 fcee 	bl	8007680 <serial_write>
  printFloat(val, n_decimal);
 8006ca4:	4659      	mov	r1, fp
 8006ca6:	4628      	mov	r0, r5
 8006ca8:	f7fe f888 	bl	8004dbc <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006cac:	4854      	ldr	r0, [pc, #336]	; (8006e00 <report_grbl_settings+0x588>)
 8006cae:	f7fe f837 	bl	8004d20 <printString>
        case 3: report_util_float_setting(val+idx,-settings.max_travel[idx],N_DECIMAL_SETTINGVALUE); break;
 8006cb2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006cb4:	2024      	movs	r0, #36	; 0x24
        case 3: report_util_float_setting(val+idx,-settings.max_travel[idx],N_DECIMAL_SETTINGVALUE); break;
 8006cb6:	f103 4500 	add.w	r5, r3, #2147483648	; 0x80000000
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006cba:	f000 fce1 	bl	8007680 <serial_write>
 8006cbe:	4638      	mov	r0, r7
 8006cc0:	f7fe f83a 	bl	8004d38 <print_uint8_base10>
 8006cc4:	203d      	movs	r0, #61	; 0x3d
 8006cc6:	f000 fcdb 	bl	8007680 <serial_write>
  printFloat(val, n_decimal);
 8006cca:	4659      	mov	r1, fp
 8006ccc:	4628      	mov	r0, r5
 8006cce:	f7fe f875 	bl	8004dbc <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006cd2:	484b      	ldr	r0, [pc, #300]	; (8006e00 <report_grbl_settings+0x588>)
 8006cd4:	f7fe f824 	bl	8004d20 <printString>
        case 3: report_util_float_setting(val+idx,-settings.max_travel[idx],N_DECIMAL_SETTINGVALUE); break;
 8006cd8:	6be4      	ldr	r4, [r4, #60]	; 0x3c
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006cda:	2024      	movs	r0, #36	; 0x24
 8006cdc:	f000 fcd0 	bl	8007680 <serial_write>
 8006ce0:	4630      	mov	r0, r6
 8006ce2:	f7fe f829 	bl	8004d38 <print_uint8_base10>
        case 3: report_util_float_setting(val+idx,-settings.max_travel[idx],N_DECIMAL_SETTINGVALUE); break;
 8006ce6:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006cea:	203d      	movs	r0, #61	; 0x3d
 8006cec:	f000 fcc8 	bl	8007680 <serial_write>
  printFloat(val, n_decimal);
 8006cf0:	4620      	mov	r0, r4
 8006cf2:	4659      	mov	r1, fp
 8006cf4:	f7fe f862 	bl	8004dbc <printFloat>
}
 8006cf8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006cfc:	4840      	ldr	r0, [pc, #256]	; (8006e00 <report_grbl_settings+0x588>)
 8006cfe:	f7fe b80f 	b.w	8004d20 <printString>
        case 2: report_util_float_setting(val+idx,settings.acceleration[idx]/(60*60),N_DECIMAL_SETTINGVALUE); break;
 8006d02:	4940      	ldr	r1, [pc, #256]	; (8006e04 <report_grbl_settings+0x58c>)
 8006d04:	6a20      	ldr	r0, [r4, #32]
 8006d06:	f7f9 ffd7 	bl	8000cb8 <__aeabi_fmul>
 8006d0a:	4683      	mov	fp, r0
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006d0c:	2024      	movs	r0, #36	; 0x24
 8006d0e:	f000 fcb7 	bl	8007680 <serial_write>
 8006d12:	4628      	mov	r0, r5
 8006d14:	f7fe f810 	bl	8004d38 <print_uint8_base10>
 8006d18:	203d      	movs	r0, #61	; 0x3d
 8006d1a:	f000 fcb1 	bl	8007680 <serial_write>
  printFloat(val, n_decimal);
 8006d1e:	4658      	mov	r0, fp
 8006d20:	2103      	movs	r1, #3
 8006d22:	f7fe f84b 	bl	8004dbc <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006d26:	4648      	mov	r0, r9
 8006d28:	f7fd fffa 	bl	8004d20 <printString>
        case 2: report_util_float_setting(val+idx,settings.acceleration[idx]/(60*60),N_DECIMAL_SETTINGVALUE); break;
 8006d2c:	4935      	ldr	r1, [pc, #212]	; (8006e04 <report_grbl_settings+0x58c>)
 8006d2e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006d30:	f7f9 ffc2 	bl	8000cb8 <__aeabi_fmul>
 8006d34:	4683      	mov	fp, r0
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006d36:	2024      	movs	r0, #36	; 0x24
 8006d38:	f000 fca2 	bl	8007680 <serial_write>
 8006d3c:	4640      	mov	r0, r8
 8006d3e:	f7fd fffb 	bl	8004d38 <print_uint8_base10>
 8006d42:	203d      	movs	r0, #61	; 0x3d
 8006d44:	f000 fc9c 	bl	8007680 <serial_write>
  printFloat(val, n_decimal);
 8006d48:	2103      	movs	r1, #3
 8006d4a:	4658      	mov	r0, fp
 8006d4c:	f7fe f836 	bl	8004dbc <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006d50:	4648      	mov	r0, r9
 8006d52:	f7fd ffe5 	bl	8004d20 <printString>
        case 2: report_util_float_setting(val+idx,settings.acceleration[idx]/(60*60),N_DECIMAL_SETTINGVALUE); break;
 8006d56:	492b      	ldr	r1, [pc, #172]	; (8006e04 <report_grbl_settings+0x58c>)
 8006d58:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8006d5a:	f7f9 ffad 	bl	8000cb8 <__aeabi_fmul>
 8006d5e:	4680      	mov	r8, r0
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006d60:	2024      	movs	r0, #36	; 0x24
 8006d62:	f000 fc8d 	bl	8007680 <serial_write>
 8006d66:	4638      	mov	r0, r7
 8006d68:	f7fd ffe6 	bl	8004d38 <print_uint8_base10>
 8006d6c:	203d      	movs	r0, #61	; 0x3d
 8006d6e:	f000 fc87 	bl	8007680 <serial_write>
  printFloat(val, n_decimal);
 8006d72:	2103      	movs	r1, #3
 8006d74:	4640      	mov	r0, r8
 8006d76:	f7fe f821 	bl	8004dbc <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006d7a:	4648      	mov	r0, r9
 8006d7c:	f7fd ffd0 	bl	8004d20 <printString>
        case 2: report_util_float_setting(val+idx,settings.acceleration[idx]/(60*60),N_DECIMAL_SETTINGVALUE); break;
 8006d80:	4920      	ldr	r1, [pc, #128]	; (8006e04 <report_grbl_settings+0x58c>)
 8006d82:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8006d84:	f7f9 ff98 	bl	8000cb8 <__aeabi_fmul>
 8006d88:	4607      	mov	r7, r0
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006d8a:	2024      	movs	r0, #36	; 0x24
 8006d8c:	e753      	b.n	8006c36 <report_grbl_settings+0x3be>
 8006d8e:	2024      	movs	r0, #36	; 0x24
        case 1: report_util_float_setting(val+idx,settings.max_rate[idx],N_DECIMAL_SETTINGVALUE); break;
 8006d90:	f8d4 b010 	ldr.w	fp, [r4, #16]
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006d94:	f000 fc74 	bl	8007680 <serial_write>
 8006d98:	4628      	mov	r0, r5
 8006d9a:	f7fd ffcd 	bl	8004d38 <print_uint8_base10>
 8006d9e:	203d      	movs	r0, #61	; 0x3d
 8006da0:	f000 fc6e 	bl	8007680 <serial_write>
  printFloat(val, n_decimal);
 8006da4:	2103      	movs	r1, #3
 8006da6:	4658      	mov	r0, fp
 8006da8:	f7fe f808 	bl	8004dbc <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006dac:	4648      	mov	r0, r9
 8006dae:	f7fd ffb7 	bl	8004d20 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006db2:	2024      	movs	r0, #36	; 0x24
        case 1: report_util_float_setting(val+idx,settings.max_rate[idx],N_DECIMAL_SETTINGVALUE); break;
 8006db4:	f8d4 b014 	ldr.w	fp, [r4, #20]
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006db8:	f000 fc62 	bl	8007680 <serial_write>
 8006dbc:	4640      	mov	r0, r8
 8006dbe:	f7fd ffbb 	bl	8004d38 <print_uint8_base10>
 8006dc2:	203d      	movs	r0, #61	; 0x3d
 8006dc4:	f000 fc5c 	bl	8007680 <serial_write>
  printFloat(val, n_decimal);
 8006dc8:	2103      	movs	r1, #3
 8006dca:	4658      	mov	r0, fp
 8006dcc:	f7fd fff6 	bl	8004dbc <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006dd0:	4648      	mov	r0, r9
 8006dd2:	f7fd ffa5 	bl	8004d20 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006dd6:	2024      	movs	r0, #36	; 0x24
        case 1: report_util_float_setting(val+idx,settings.max_rate[idx],N_DECIMAL_SETTINGVALUE); break;
 8006dd8:	f8d4 8018 	ldr.w	r8, [r4, #24]
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006ddc:	f000 fc50 	bl	8007680 <serial_write>
 8006de0:	4638      	mov	r0, r7
 8006de2:	f7fd ffa9 	bl	8004d38 <print_uint8_base10>
 8006de6:	203d      	movs	r0, #61	; 0x3d
 8006de8:	f000 fc4a 	bl	8007680 <serial_write>
  printFloat(val, n_decimal);
 8006dec:	4640      	mov	r0, r8
 8006dee:	2103      	movs	r1, #3
 8006df0:	f7fd ffe4 	bl	8004dbc <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006df4:	4648      	mov	r0, r9
 8006df6:	f7fd ff93 	bl	8004d20 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006dfa:	2024      	movs	r0, #36	; 0x24
        case 1: report_util_float_setting(val+idx,settings.max_rate[idx],N_DECIMAL_SETTINGVALUE); break;
 8006dfc:	69e7      	ldr	r7, [r4, #28]
 8006dfe:	e71a      	b.n	8006c36 <report_grbl_settings+0x3be>
 8006e00:	0800cb18 	.word	0x0800cb18
 8006e04:	3991a2b4 	.word	0x3991a2b4

08006e08 <report_probe_parameters>:

// Prints current probe parameters. Upon a probe command, these parameters are updated upon a
// successful probe or upon a failed probe with the G38.3 without errors command (if supported).
// These values are retained until Grbl is power-cycled, whereby they will be re-zeroed.
void report_probe_parameters()
{
 8006e08:	b500      	push	{lr}
  // Report in terms of machine position.
  printPgmString(PSTR("[PRB:"));
 8006e0a:	4816      	ldr	r0, [pc, #88]	; (8006e64 <report_probe_parameters+0x5c>)
{
 8006e0c:	b085      	sub	sp, #20
  printPgmString(PSTR("[PRB:"));
 8006e0e:	f7fd ff87 	bl	8004d20 <printString>
  float print_position[N_AXIS];
  system_convert_array_steps_to_mpos(print_position,sys_probe_position);
 8006e12:	4915      	ldr	r1, [pc, #84]	; (8006e68 <report_probe_parameters+0x60>)
 8006e14:	4668      	mov	r0, sp
 8006e16:	f002 ff01 	bl	8009c1c <system_convert_array_steps_to_mpos>
    printFloat_CoordValue(axis_value[idx]);
 8006e1a:	9800      	ldr	r0, [sp, #0]
 8006e1c:	f7fe f8be 	bl	8004f9c <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8006e20:	202c      	movs	r0, #44	; 0x2c
 8006e22:	f000 fc2d 	bl	8007680 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8006e26:	9801      	ldr	r0, [sp, #4]
 8006e28:	f7fe f8b8 	bl	8004f9c <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8006e2c:	202c      	movs	r0, #44	; 0x2c
 8006e2e:	f000 fc27 	bl	8007680 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8006e32:	9802      	ldr	r0, [sp, #8]
 8006e34:	f7fe f8b2 	bl	8004f9c <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8006e38:	202c      	movs	r0, #44	; 0x2c
 8006e3a:	f000 fc21 	bl	8007680 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8006e3e:	9803      	ldr	r0, [sp, #12]
 8006e40:	f7fe f8ac 	bl	8004f9c <printFloat_CoordValue>
  report_util_axis_values(print_position);
  serial_write(':');
 8006e44:	203a      	movs	r0, #58	; 0x3a
 8006e46:	f000 fc1b 	bl	8007680 <serial_write>
  print_uint8_base10(sys.probe_succeeded);
 8006e4a:	4b08      	ldr	r3, [pc, #32]	; (8006e6c <report_probe_parameters+0x64>)
 8006e4c:	7958      	ldrb	r0, [r3, #5]
 8006e4e:	f7fd ff73 	bl	8004d38 <print_uint8_base10>
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 8006e52:	205d      	movs	r0, #93	; 0x5d
 8006e54:	f000 fc14 	bl	8007680 <serial_write>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006e58:	4805      	ldr	r0, [pc, #20]	; (8006e70 <report_probe_parameters+0x68>)
 8006e5a:	f7fd ff61 	bl	8004d20 <printString>
  report_util_feedback_line_feed();
}
 8006e5e:	b005      	add	sp, #20
 8006e60:	f85d fb04 	ldr.w	pc, [sp], #4
 8006e64:	0800ca80 	.word	0x0800ca80
 8006e68:	20001420 	.word	0x20001420
 8006e6c:	20001408 	.word	0x20001408
 8006e70:	0800cb18 	.word	0x0800cb18

08006e74 <report_ngc_parameters>:


// Prints Grbl NGC parameters (coordinate offsets, probing)
void report_ngc_parameters()
{
 8006e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e78:	2500      	movs	r5, #0
 8006e7a:	b088      	sub	sp, #32
  for (coord_select = 0; coord_select <= SETTING_INDEX_NCOORD; coord_select++) {
    if (!(settings_read_coord_data(coord_select,coord_data))) {
      report_status_message(STATUS_SETTING_READ_FAIL);
      return;
    }
    printPgmString(PSTR("[G"));
 8006e7c:	4e51      	ldr	r6, [pc, #324]	; (8006fc4 <report_ngc_parameters+0x150>)
    switch (coord_select) {
      case 6: printPgmString(PSTR("28")); break;
 8006e7e:	f8df 816c 	ldr.w	r8, [pc, #364]	; 8006fec <report_ngc_parameters+0x178>
      case 7: printPgmString(PSTR("30")); break;
 8006e82:	4f51      	ldr	r7, [pc, #324]	; (8006fc8 <report_ngc_parameters+0x154>)
 8006e84:	e025      	b.n	8006ed2 <report_ngc_parameters+0x5e>
    switch (coord_select) {
 8006e86:	2c07      	cmp	r4, #7
 8006e88:	d133      	bne.n	8006ef2 <report_ngc_parameters+0x7e>
      case 7: printPgmString(PSTR("30")); break;
 8006e8a:	4638      	mov	r0, r7
 8006e8c:	f7fd ff48 	bl	8004d20 <printString>
      default: print_uint8_base10(coord_select+54); break; // G54-G59
    }
    serial_write(':');
 8006e90:	203a      	movs	r0, #58	; 0x3a
 8006e92:	f000 fbf5 	bl	8007680 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8006e96:	9800      	ldr	r0, [sp, #0]
 8006e98:	f7fe f880 	bl	8004f9c <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8006e9c:	202c      	movs	r0, #44	; 0x2c
 8006e9e:	f000 fbef 	bl	8007680 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8006ea2:	9801      	ldr	r0, [sp, #4]
 8006ea4:	f7fe f87a 	bl	8004f9c <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8006ea8:	202c      	movs	r0, #44	; 0x2c
 8006eaa:	f000 fbe9 	bl	8007680 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8006eae:	9802      	ldr	r0, [sp, #8]
 8006eb0:	f7fe f874 	bl	8004f9c <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8006eb4:	202c      	movs	r0, #44	; 0x2c
 8006eb6:	f000 fbe3 	bl	8007680 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8006eba:	9803      	ldr	r0, [sp, #12]
 8006ebc:	f7fe f86e 	bl	8004f9c <printFloat_CoordValue>
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 8006ec0:	205d      	movs	r0, #93	; 0x5d
 8006ec2:	f000 fbdd 	bl	8007680 <serial_write>
 8006ec6:	3501      	adds	r5, #1
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006ec8:	4840      	ldr	r0, [pc, #256]	; (8006fcc <report_ngc_parameters+0x158>)
 8006eca:	f7fd ff29 	bl	8004d20 <printString>
  for (coord_select = 0; coord_select <= SETTING_INDEX_NCOORD; coord_select++) {
 8006ece:	2d08      	cmp	r5, #8
 8006ed0:	d015      	beq.n	8006efe <report_ngc_parameters+0x8a>
 8006ed2:	b2ec      	uxtb	r4, r5
    if (!(settings_read_coord_data(coord_select,coord_data))) {
 8006ed4:	4620      	mov	r0, r4
 8006ed6:	4669      	mov	r1, sp
 8006ed8:	f000 fe30 	bl	8007b3c <settings_read_coord_data>
 8006edc:	2800      	cmp	r0, #0
 8006ede:	d065      	beq.n	8006fac <report_ngc_parameters+0x138>
    printPgmString(PSTR("[G"));
 8006ee0:	4630      	mov	r0, r6
 8006ee2:	f7fd ff1d 	bl	8004d20 <printString>
    switch (coord_select) {
 8006ee6:	2c06      	cmp	r4, #6
 8006ee8:	d1cd      	bne.n	8006e86 <report_ngc_parameters+0x12>
      case 6: printPgmString(PSTR("28")); break;
 8006eea:	4640      	mov	r0, r8
 8006eec:	f7fd ff18 	bl	8004d20 <printString>
 8006ef0:	e7ce      	b.n	8006e90 <report_ngc_parameters+0x1c>
      default: print_uint8_base10(coord_select+54); break; // G54-G59
 8006ef2:	f104 0036 	add.w	r0, r4, #54	; 0x36
 8006ef6:	b2c0      	uxtb	r0, r0
 8006ef8:	f7fd ff1e 	bl	8004d38 <print_uint8_base10>
 8006efc:	e7c8      	b.n	8006e90 <report_ngc_parameters+0x1c>
    printFloat_CoordValue(axis_value[idx]);
 8006efe:	4c34      	ldr	r4, [pc, #208]	; (8006fd0 <report_ngc_parameters+0x15c>)
    report_util_axis_values(coord_data);
    report_util_feedback_line_feed();
  }
  printPgmString(PSTR("[G92:")); // Print G92,G92.1 which are not persistent in memory
 8006f00:	4834      	ldr	r0, [pc, #208]	; (8006fd4 <report_ngc_parameters+0x160>)
 8006f02:	f7fd ff0d 	bl	8004d20 <printString>
    printFloat_CoordValue(axis_value[idx]);
 8006f06:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8006f08:	f7fe f848 	bl	8004f9c <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8006f0c:	202c      	movs	r0, #44	; 0x2c
 8006f0e:	f000 fbb7 	bl	8007680 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8006f12:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8006f14:	f7fe f842 	bl	8004f9c <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8006f18:	202c      	movs	r0, #44	; 0x2c
 8006f1a:	f000 fbb1 	bl	8007680 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8006f1e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8006f20:	f7fe f83c 	bl	8004f9c <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8006f24:	202c      	movs	r0, #44	; 0x2c
 8006f26:	f000 fbab 	bl	8007680 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8006f2a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006f2c:	f7fe f836 	bl	8004f9c <printFloat_CoordValue>
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 8006f30:	205d      	movs	r0, #93	; 0x5d
 8006f32:	f000 fba5 	bl	8007680 <serial_write>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006f36:	4825      	ldr	r0, [pc, #148]	; (8006fcc <report_ngc_parameters+0x158>)
 8006f38:	f7fd fef2 	bl	8004d20 <printString>
  report_util_axis_values(gc_state.coord_offset);
  report_util_feedback_line_feed();
  printPgmString(PSTR("[TLO:")); // Print tool length offset value
 8006f3c:	4826      	ldr	r0, [pc, #152]	; (8006fd8 <report_ngc_parameters+0x164>)
 8006f3e:	f7fd feef 	bl	8004d20 <printString>
  printFloat_CoordValue(gc_state.tool_length_offset);
 8006f42:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8006f44:	f7fe f82a 	bl	8004f9c <printFloat_CoordValue>
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 8006f48:	205d      	movs	r0, #93	; 0x5d
 8006f4a:	f000 fb99 	bl	8007680 <serial_write>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006f4e:	481f      	ldr	r0, [pc, #124]	; (8006fcc <report_ngc_parameters+0x158>)
 8006f50:	f7fd fee6 	bl	8004d20 <printString>
  printPgmString(PSTR("[PRB:"));
 8006f54:	4821      	ldr	r0, [pc, #132]	; (8006fdc <report_ngc_parameters+0x168>)
 8006f56:	f7fd fee3 	bl	8004d20 <printString>
  system_convert_array_steps_to_mpos(print_position,sys_probe_position);
 8006f5a:	4921      	ldr	r1, [pc, #132]	; (8006fe0 <report_ngc_parameters+0x16c>)
 8006f5c:	a804      	add	r0, sp, #16
 8006f5e:	f002 fe5d 	bl	8009c1c <system_convert_array_steps_to_mpos>
    printFloat_CoordValue(axis_value[idx]);
 8006f62:	9804      	ldr	r0, [sp, #16]
 8006f64:	f7fe f81a 	bl	8004f9c <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8006f68:	202c      	movs	r0, #44	; 0x2c
 8006f6a:	f000 fb89 	bl	8007680 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8006f6e:	9805      	ldr	r0, [sp, #20]
 8006f70:	f7fe f814 	bl	8004f9c <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8006f74:	202c      	movs	r0, #44	; 0x2c
 8006f76:	f000 fb83 	bl	8007680 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8006f7a:	9806      	ldr	r0, [sp, #24]
 8006f7c:	f7fe f80e 	bl	8004f9c <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8006f80:	202c      	movs	r0, #44	; 0x2c
 8006f82:	f000 fb7d 	bl	8007680 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8006f86:	9807      	ldr	r0, [sp, #28]
 8006f88:	f7fe f808 	bl	8004f9c <printFloat_CoordValue>
  serial_write(':');
 8006f8c:	203a      	movs	r0, #58	; 0x3a
 8006f8e:	f000 fb77 	bl	8007680 <serial_write>
  print_uint8_base10(sys.probe_succeeded);
 8006f92:	4b14      	ldr	r3, [pc, #80]	; (8006fe4 <report_ngc_parameters+0x170>)
 8006f94:	7958      	ldrb	r0, [r3, #5]
 8006f96:	f7fd fecf 	bl	8004d38 <print_uint8_base10>
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 8006f9a:	205d      	movs	r0, #93	; 0x5d
 8006f9c:	f000 fb70 	bl	8007680 <serial_write>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006fa0:	480a      	ldr	r0, [pc, #40]	; (8006fcc <report_ngc_parameters+0x158>)
 8006fa2:	f7fd febd 	bl	8004d20 <printString>
  report_util_feedback_line_feed();
  report_probe_parameters(); // Print probe parameters. Not persistent in memory.
}
 8006fa6:	b008      	add	sp, #32
 8006fa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      printPgmString(PSTR("error:"));
 8006fac:	480e      	ldr	r0, [pc, #56]	; (8006fe8 <report_ngc_parameters+0x174>)
 8006fae:	f7fd feb7 	bl	8004d20 <printString>
      print_uint8_base10(status_code);
 8006fb2:	2007      	movs	r0, #7
 8006fb4:	f7fd fec0 	bl	8004d38 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006fb8:	4804      	ldr	r0, [pc, #16]	; (8006fcc <report_ngc_parameters+0x158>)
 8006fba:	f7fd feb1 	bl	8004d20 <printString>
}
 8006fbe:	b008      	add	sp, #32
 8006fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fc4:	0800ca64 	.word	0x0800ca64
 8006fc8:	0800ca6c 	.word	0x0800ca6c
 8006fcc:	0800cb18 	.word	0x0800cb18
 8006fd0:	2000136c 	.word	0x2000136c
 8006fd4:	0800ca70 	.word	0x0800ca70
 8006fd8:	0800ca78 	.word	0x0800ca78
 8006fdc:	0800ca80 	.word	0x0800ca80
 8006fe0:	20001420 	.word	0x20001420
 8006fe4:	20001408 	.word	0x20001408
 8006fe8:	0800cb10 	.word	0x0800cb10
 8006fec:	0800ca68 	.word	0x0800ca68

08006ff0 <report_gcode_modes>:


// Print current gcode parser mode state
void report_gcode_modes()
{
 8006ff0:	b510      	push	{r4, lr}
  printPgmString(PSTR("[GC:G"));
  if (gc_state.modal.motion >= MOTION_MODE_PROBE_TOWARD) {
 8006ff2:	4c54      	ldr	r4, [pc, #336]	; (8007144 <report_gcode_modes+0x154>)
  printPgmString(PSTR("[GC:G"));
 8006ff4:	4854      	ldr	r0, [pc, #336]	; (8007148 <report_gcode_modes+0x158>)
 8006ff6:	f7fd fe93 	bl	8004d20 <printString>
  if (gc_state.modal.motion >= MOTION_MODE_PROBE_TOWARD) {
 8006ffa:	7820      	ldrb	r0, [r4, #0]
 8006ffc:	288b      	cmp	r0, #139	; 0x8b
 8006ffe:	d961      	bls.n	80070c4 <report_gcode_modes+0xd4>
    printPgmString(PSTR("38."));
 8007000:	4852      	ldr	r0, [pc, #328]	; (800714c <report_gcode_modes+0x15c>)
 8007002:	f7fd fe8d 	bl	8004d20 <printString>
    print_uint8_base10(gc_state.modal.motion - (MOTION_MODE_PROBE_TOWARD-2));
 8007006:	7820      	ldrb	r0, [r4, #0]
 8007008:	3076      	adds	r0, #118	; 0x76
 800700a:	b2c0      	uxtb	r0, r0
 800700c:	f7fd fe94 	bl	8004d38 <print_uint8_base10>
static void report_util_gcode_modes_G() { printPgmString(PSTR(" G")); }
 8007010:	484f      	ldr	r0, [pc, #316]	; (8007150 <report_gcode_modes+0x160>)
 8007012:	f7fd fe85 	bl	8004d20 <printString>
  } else {
    print_uint8_base10(gc_state.modal.motion);
  }

  report_util_gcode_modes_G();
  print_uint8_base10(gc_state.modal.coord_select+54);
 8007016:	79a0      	ldrb	r0, [r4, #6]
 8007018:	3036      	adds	r0, #54	; 0x36
 800701a:	b2c0      	uxtb	r0, r0
 800701c:	f7fd fe8c 	bl	8004d38 <print_uint8_base10>
static void report_util_gcode_modes_G() { printPgmString(PSTR(" G")); }
 8007020:	484b      	ldr	r0, [pc, #300]	; (8007150 <report_gcode_modes+0x160>)
 8007022:	f7fd fe7d 	bl	8004d20 <printString>

  report_util_gcode_modes_G();
  print_uint8_base10(gc_state.modal.plane_select+17);
 8007026:	7920      	ldrb	r0, [r4, #4]
 8007028:	3011      	adds	r0, #17
 800702a:	b2c0      	uxtb	r0, r0
 800702c:	f7fd fe84 	bl	8004d38 <print_uint8_base10>
static void report_util_gcode_modes_G() { printPgmString(PSTR(" G")); }
 8007030:	4847      	ldr	r0, [pc, #284]	; (8007150 <report_gcode_modes+0x160>)
 8007032:	f7fd fe75 	bl	8004d20 <printString>

  report_util_gcode_modes_G();
  print_uint8_base10(21-gc_state.modal.units);
 8007036:	78a0      	ldrb	r0, [r4, #2]
 8007038:	f1c0 0015 	rsb	r0, r0, #21
 800703c:	b2c0      	uxtb	r0, r0
 800703e:	f7fd fe7b 	bl	8004d38 <print_uint8_base10>
static void report_util_gcode_modes_G() { printPgmString(PSTR(" G")); }
 8007042:	4843      	ldr	r0, [pc, #268]	; (8007150 <report_gcode_modes+0x160>)
 8007044:	f7fd fe6c 	bl	8004d20 <printString>

  report_util_gcode_modes_G();
  print_uint8_base10(gc_state.modal.distance+90);
 8007048:	78e0      	ldrb	r0, [r4, #3]
 800704a:	305a      	adds	r0, #90	; 0x5a
 800704c:	b2c0      	uxtb	r0, r0
 800704e:	f7fd fe73 	bl	8004d38 <print_uint8_base10>
static void report_util_gcode_modes_G() { printPgmString(PSTR(" G")); }
 8007052:	483f      	ldr	r0, [pc, #252]	; (8007150 <report_gcode_modes+0x160>)
 8007054:	f7fd fe64 	bl	8004d20 <printString>

  report_util_gcode_modes_G();
  print_uint8_base10(94-gc_state.modal.feed_rate);
 8007058:	7860      	ldrb	r0, [r4, #1]
 800705a:	f1c0 005e 	rsb	r0, r0, #94	; 0x5e
 800705e:	b2c0      	uxtb	r0, r0
 8007060:	f7fd fe6a 	bl	8004d38 <print_uint8_base10>

  if (gc_state.modal.program_flow) {
 8007064:	79e3      	ldrb	r3, [r4, #7]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d146      	bne.n	80070f8 <report_gcode_modes+0x108>
static void report_util_gcode_modes_M() { printPgmString(PSTR(" M")); }
 800706a:	483a      	ldr	r0, [pc, #232]	; (8007154 <report_gcode_modes+0x164>)
 800706c:	f7fd fe58 	bl	8004d20 <printString>
        break;
    }
  }

  report_util_gcode_modes_M();
  switch (gc_state.modal.spindle) {
 8007070:	7a63      	ldrb	r3, [r4, #9]
 8007072:	2b10      	cmp	r3, #16
 8007074:	d052      	beq.n	800711c <report_gcode_modes+0x12c>
 8007076:	2b20      	cmp	r3, #32
 8007078:	d054      	beq.n	8007124 <report_gcode_modes+0x134>
 800707a:	b36b      	cbz	r3, 80070d8 <report_gcode_modes+0xe8>
static void report_util_gcode_modes_M() { printPgmString(PSTR(" M")); }
 800707c:	4835      	ldr	r0, [pc, #212]	; (8007154 <report_gcode_modes+0x164>)
 800707e:	f7fd fe4f 	bl	8004d20 <printString>
    case SPINDLE_DISABLE : serial_write('5'); break;
  }

  report_util_gcode_modes_M();
  #ifdef ENABLE_M7
    if (gc_state.modal.coolant) { // Note: Multiple coolant states may be active at the same time.
 8007082:	7a23      	ldrb	r3, [r4, #8]
 8007084:	b38b      	cbz	r3, 80070ea <report_gcode_modes+0xfa>
      if (gc_state.modal.coolant & PL_COND_FLAG_COOLANT_MIST) { report_util_gcode_modes_M(); serial_write('7'); }
 8007086:	061a      	lsls	r2, r3, #24
 8007088:	d450      	bmi.n	800712c <report_gcode_modes+0x13c>
      if (gc_state.modal.coolant & PL_COND_FLAG_COOLANT_FLOOD) { report_util_gcode_modes_M(); serial_write('8'); }
 800708a:	065b      	lsls	r3, r3, #25
 800708c:	d41d      	bmi.n	80070ca <report_gcode_modes+0xda>
			report_util_gcode_modes_M();
			print_uint8_base10(56);
		}
	#endif

  printPgmString(PSTR(" T"));
 800708e:	4832      	ldr	r0, [pc, #200]	; (8007158 <report_gcode_modes+0x168>)
 8007090:	f7fd fe46 	bl	8004d20 <printString>
  print_uint8_base10(gc_state.tool);
 8007094:	7d20      	ldrb	r0, [r4, #20]
 8007096:	f7fd fe4f 	bl	8004d38 <print_uint8_base10>

  printPgmString(PSTR(" F"));
 800709a:	4830      	ldr	r0, [pc, #192]	; (800715c <report_gcode_modes+0x16c>)
 800709c:	f7fd fe40 	bl	8004d20 <printString>
  printFloat_RateValue(gc_state.feed_rate);
 80070a0:	6920      	ldr	r0, [r4, #16]
 80070a2:	f7fe f86b 	bl	800517c <printFloat_RateValue>

  #ifdef VARIABLE_SPINDLE
    printPgmString(PSTR(" S"));
 80070a6:	482e      	ldr	r0, [pc, #184]	; (8007160 <report_gcode_modes+0x170>)
 80070a8:	f7fd fe3a 	bl	8004d20 <printString>
    printFloat(gc_state.spindle_speed,N_DECIMAL_RPMVALUE);
 80070ac:	68e0      	ldr	r0, [r4, #12]
 80070ae:	2100      	movs	r1, #0
 80070b0:	f7fd fe84 	bl	8004dbc <printFloat>
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 80070b4:	205d      	movs	r0, #93	; 0x5d
 80070b6:	f000 fae3 	bl	8007680 <serial_write>
  #endif

  report_util_feedback_line_feed();
}
 80070ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80070be:	4829      	ldr	r0, [pc, #164]	; (8007164 <report_gcode_modes+0x174>)
 80070c0:	f7fd be2e 	b.w	8004d20 <printString>
    print_uint8_base10(gc_state.modal.motion);
 80070c4:	f7fd fe38 	bl	8004d38 <print_uint8_base10>
 80070c8:	e7a2      	b.n	8007010 <report_gcode_modes+0x20>
static void report_util_gcode_modes_M() { printPgmString(PSTR(" M")); }
 80070ca:	4822      	ldr	r0, [pc, #136]	; (8007154 <report_gcode_modes+0x164>)
 80070cc:	f7fd fe28 	bl	8004d20 <printString>
      if (gc_state.modal.coolant & PL_COND_FLAG_COOLANT_FLOOD) { report_util_gcode_modes_M(); serial_write('8'); }
 80070d0:	2038      	movs	r0, #56	; 0x38
 80070d2:	f000 fad5 	bl	8007680 <serial_write>
 80070d6:	e7da      	b.n	800708e <report_gcode_modes+0x9e>
    case SPINDLE_DISABLE : serial_write('5'); break;
 80070d8:	2035      	movs	r0, #53	; 0x35
 80070da:	f000 fad1 	bl	8007680 <serial_write>
static void report_util_gcode_modes_M() { printPgmString(PSTR(" M")); }
 80070de:	481d      	ldr	r0, [pc, #116]	; (8007154 <report_gcode_modes+0x164>)
 80070e0:	f7fd fe1e 	bl	8004d20 <printString>
    if (gc_state.modal.coolant) { // Note: Multiple coolant states may be active at the same time.
 80070e4:	7a23      	ldrb	r3, [r4, #8]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d1cd      	bne.n	8007086 <report_gcode_modes+0x96>
static void report_util_gcode_modes_M() { printPgmString(PSTR(" M")); }
 80070ea:	481a      	ldr	r0, [pc, #104]	; (8007154 <report_gcode_modes+0x164>)
 80070ec:	f7fd fe18 	bl	8004d20 <printString>
    } else { report_util_gcode_modes_M(); serial_write('9'); }
 80070f0:	2039      	movs	r0, #57	; 0x39
 80070f2:	f000 fac5 	bl	8007680 <serial_write>
 80070f6:	e7ca      	b.n	800708e <report_gcode_modes+0x9e>
static void report_util_gcode_modes_M() { printPgmString(PSTR(" M")); }
 80070f8:	4816      	ldr	r0, [pc, #88]	; (8007154 <report_gcode_modes+0x164>)
 80070fa:	f7fd fe11 	bl	8004d20 <printString>
    switch (gc_state.modal.program_flow) {
 80070fe:	79e0      	ldrb	r0, [r4, #7]
 8007100:	2803      	cmp	r0, #3
 8007102:	d01b      	beq.n	800713c <report_gcode_modes+0x14c>
 8007104:	281e      	cmp	r0, #30
 8007106:	d001      	beq.n	800710c <report_gcode_modes+0x11c>
 8007108:	2802      	cmp	r0, #2
 800710a:	d1ae      	bne.n	800706a <report_gcode_modes+0x7a>
        print_uint8_base10(gc_state.modal.program_flow);
 800710c:	f7fd fe14 	bl	8004d38 <print_uint8_base10>
static void report_util_gcode_modes_M() { printPgmString(PSTR(" M")); }
 8007110:	4810      	ldr	r0, [pc, #64]	; (8007154 <report_gcode_modes+0x164>)
 8007112:	f7fd fe05 	bl	8004d20 <printString>
  switch (gc_state.modal.spindle) {
 8007116:	7a63      	ldrb	r3, [r4, #9]
 8007118:	2b10      	cmp	r3, #16
 800711a:	d1ac      	bne.n	8007076 <report_gcode_modes+0x86>
    case SPINDLE_ENABLE_CW : serial_write('3'); break;
 800711c:	2033      	movs	r0, #51	; 0x33
 800711e:	f000 faaf 	bl	8007680 <serial_write>
 8007122:	e7ab      	b.n	800707c <report_gcode_modes+0x8c>
    case SPINDLE_ENABLE_CCW : serial_write('4'); break;
 8007124:	2034      	movs	r0, #52	; 0x34
 8007126:	f000 faab 	bl	8007680 <serial_write>
 800712a:	e7a7      	b.n	800707c <report_gcode_modes+0x8c>
static void report_util_gcode_modes_M() { printPgmString(PSTR(" M")); }
 800712c:	4809      	ldr	r0, [pc, #36]	; (8007154 <report_gcode_modes+0x164>)
 800712e:	f7fd fdf7 	bl	8004d20 <printString>
      if (gc_state.modal.coolant & PL_COND_FLAG_COOLANT_MIST) { report_util_gcode_modes_M(); serial_write('7'); }
 8007132:	2037      	movs	r0, #55	; 0x37
 8007134:	f000 faa4 	bl	8007680 <serial_write>
 8007138:	7a23      	ldrb	r3, [r4, #8]
 800713a:	e7a6      	b.n	800708a <report_gcode_modes+0x9a>
      case PROGRAM_FLOW_PAUSED : serial_write('0'); break;
 800713c:	2030      	movs	r0, #48	; 0x30
 800713e:	f000 fa9f 	bl	8007680 <serial_write>
 8007142:	e792      	b.n	800706a <report_gcode_modes+0x7a>
 8007144:	2000136c 	.word	0x2000136c
 8007148:	0800c9d4 	.word	0x0800c9d4
 800714c:	0800c9dc 	.word	0x0800c9dc
 8007150:	0800c9e0 	.word	0x0800c9e0
 8007154:	0800c9e4 	.word	0x0800c9e4
 8007158:	0800c9e8 	.word	0x0800c9e8
 800715c:	0800c9ec 	.word	0x0800c9ec
 8007160:	0800c9f0 	.word	0x0800c9f0
 8007164:	0800cb18 	.word	0x0800cb18

08007168 <report_startup_line>:

// Prints specified startup line
void report_startup_line(uint8_t n, char *line)
{
 8007168:	b538      	push	{r3, r4, r5, lr}
 800716a:	4605      	mov	r5, r0
 800716c:	460c      	mov	r4, r1
  printPgmString(PSTR("$N"));
 800716e:	4808      	ldr	r0, [pc, #32]	; (8007190 <report_startup_line+0x28>)
 8007170:	f7fd fdd6 	bl	8004d20 <printString>
  print_uint8_base10(n);
 8007174:	4628      	mov	r0, r5
 8007176:	f7fd fddf 	bl	8004d38 <print_uint8_base10>
  serial_write('=');
 800717a:	203d      	movs	r0, #61	; 0x3d
 800717c:	f000 fa80 	bl	8007680 <serial_write>
  printString(line);
 8007180:	4620      	mov	r0, r4
 8007182:	f7fd fdcd 	bl	8004d20 <printString>
  report_util_line_feed();
}
 8007186:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 800718a:	4802      	ldr	r0, [pc, #8]	; (8007194 <report_startup_line+0x2c>)
 800718c:	f7fd bdc8 	b.w	8004d20 <printString>
 8007190:	0800cb04 	.word	0x0800cb04
 8007194:	0800cb18 	.word	0x0800cb18

08007198 <report_execute_startup_message>:

void report_execute_startup_message(char *line, uint8_t status_code)
{
 8007198:	b538      	push	{r3, r4, r5, lr}
 800719a:	4605      	mov	r5, r0
 800719c:	460c      	mov	r4, r1
  serial_write('>');
 800719e:	203e      	movs	r0, #62	; 0x3e
 80071a0:	f000 fa6e 	bl	8007680 <serial_write>
  printString(line);
 80071a4:	4628      	mov	r0, r5
 80071a6:	f7fd fdbb 	bl	8004d20 <printString>
  serial_write(':');
 80071aa:	203a      	movs	r0, #58	; 0x3a
 80071ac:	f000 fa68 	bl	8007680 <serial_write>
  switch(status_code) {
 80071b0:	b154      	cbz	r4, 80071c8 <report_execute_startup_message+0x30>
      printPgmString(PSTR("error:"));
 80071b2:	4808      	ldr	r0, [pc, #32]	; (80071d4 <report_execute_startup_message+0x3c>)
 80071b4:	f7fd fdb4 	bl	8004d20 <printString>
      print_uint8_base10(status_code);
 80071b8:	4620      	mov	r0, r4
 80071ba:	f7fd fdbd 	bl	8004d38 <print_uint8_base10>
  report_status_message(status_code);
}
 80071be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80071c2:	4805      	ldr	r0, [pc, #20]	; (80071d8 <report_execute_startup_message+0x40>)
 80071c4:	f7fd bdac 	b.w	8004d20 <printString>
      printPgmString(PSTR("ok\r\n")); break;
 80071c8:	4804      	ldr	r0, [pc, #16]	; (80071dc <report_execute_startup_message+0x44>)
}
 80071ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      printPgmString(PSTR("ok\r\n")); break;
 80071ce:	f7fd bda7 	b.w	8004d20 <printString>
 80071d2:	bf00      	nop
 80071d4:	0800cb10 	.word	0x0800cb10
 80071d8:	0800cb18 	.word	0x0800cb18
 80071dc:	0800cb08 	.word	0x0800cb08

080071e0 <report_build_info>:

// Prints build info line
void report_build_info(char *line)
{
 80071e0:	b510      	push	{r4, lr}
 80071e2:	4604      	mov	r4, r0
  printPgmString(PSTR("[VER:" GRBL_VERSION "." GRBL_VERSION_BUILD ":"));
 80071e4:	4819      	ldr	r0, [pc, #100]	; (800724c <report_build_info+0x6c>)
 80071e6:	f7fd fd9b 	bl	8004d20 <printString>
  printString(line);
 80071ea:	4620      	mov	r0, r4
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80071ec:	4c18      	ldr	r4, [pc, #96]	; (8007250 <report_build_info+0x70>)
  printString(line);
 80071ee:	f7fd fd97 	bl	8004d20 <printString>
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 80071f2:	205d      	movs	r0, #93	; 0x5d
 80071f4:	f000 fa44 	bl	8007680 <serial_write>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80071f8:	4620      	mov	r0, r4
 80071fa:	f7fd fd91 	bl	8004d20 <printString>
  report_util_feedback_line_feed();
  printPgmString(PSTR("[OPT:")); // Generate compile-time build option list
 80071fe:	4815      	ldr	r0, [pc, #84]	; (8007254 <report_build_info+0x74>)
 8007200:	f7fd fd8e 	bl	8004d20 <printString>
  #ifdef VARIABLE_SPINDLE
    serial_write('V');
 8007204:	2056      	movs	r0, #86	; 0x56
 8007206:	f000 fa3b 	bl	8007680 <serial_write>
  #endif
  #ifdef USE_LINE_NUMBERS
    serial_write('N');
  #endif
  #ifdef ENABLE_M7
    serial_write('M');
 800720a:	204d      	movs	r0, #77	; 0x4d
 800720c:	f000 fa38 	bl	8007680 <serial_write>
  #endif
  #ifdef PARKING_ENABLE
    serial_write('P');
  #endif
  #ifdef HOMING_FORCE_SET_ORIGIN
    serial_write('Z');
 8007210:	205a      	movs	r0, #90	; 0x5a
 8007212:	f000 fa35 	bl	8007680 <serial_write>
  #endif
  #ifdef HOMING_SINGLE_AXIS_COMMANDS
    serial_write('H');
 8007216:	2048      	movs	r0, #72	; 0x48
 8007218:	f000 fa32 	bl	8007680 <serial_write>
  #endif
  #ifndef FORCE_BUFFER_SYNC_DURING_WCO_CHANGE // NOTE: Shown when disabled.
    serial_write('W');
  #endif
	#ifndef HOMING_INIT_LOCK
		serial_write('L');
 800721c:	204c      	movs	r0, #76	; 0x4c
 800721e:	f000 fa2f 	bl	8007680 <serial_write>
	#endif

  // NOTE: Compiled values, like override increments/max/min values, may be added at some point later.
	serial_write(',');
 8007222:	202c      	movs	r0, #44	; 0x2c
 8007224:	f000 fa2c 	bl	8007680 <serial_write>
	print_uint8_base10(BLOCK_BUFFER_SIZE - 1);
 8007228:	2023      	movs	r0, #35	; 0x23
 800722a:	f7fd fd85 	bl	8004d38 <print_uint8_base10>
	serial_write(',');
 800722e:	202c      	movs	r0, #44	; 0x2c
 8007230:	f000 fa26 	bl	8007680 <serial_write>
	print_uint8_base10(RX_BUFFER_SIZE);
 8007234:	20fe      	movs	r0, #254	; 0xfe
 8007236:	f7fd fd7f 	bl	8004d38 <print_uint8_base10>
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 800723a:	205d      	movs	r0, #93	; 0x5d
 800723c:	f000 fa20 	bl	8007680 <serial_write>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8007240:	4620      	mov	r0, r4

	report_util_feedback_line_feed();
}
 8007242:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8007246:	f7fd bd6b 	b.w	8004d20 <printString>
 800724a:	bf00      	nop
 800724c:	0800c900 	.word	0x0800c900
 8007250:	0800cb18 	.word	0x0800cb18
 8007254:	0800c91c 	.word	0x0800c91c

08007258 <report_realtime_status>:
 // and the actual location of the CNC machine. Users may change the following function to their
 // specific needs, but the desired real-time data report must be as short as possible. This is
 // requires as it minimizes the computational overhead and allows grbl to keep running smoothly,
 // especially during g-code programs with fast, short line segments and high frequency reports (5-20Hz).
void report_realtime_status()
{
 8007258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800725a:	b08d      	sub	sp, #52	; 0x34
  uint8_t idx;
  int32_t current_position[N_AXIS]; // Copy current state of the system position variable
  memcpy(current_position, sys_position, sizeof(sys_position));
 800725c:	466d      	mov	r5, sp
 800725e:	4baf      	ldr	r3, [pc, #700]	; (800751c <report_realtime_status+0x2c4>)
  float print_position[N_AXIS];
  system_convert_array_steps_to_mpos(print_position, current_position);

  // Report current machine state and sub-states
  serial_write('<');
  switch (sys.state) {
 8007260:	4caf      	ldr	r4, [pc, #700]	; (8007520 <report_realtime_status+0x2c8>)
  memcpy(current_position, sys_position, sizeof(sys_position));
 8007262:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007264:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  system_convert_array_steps_to_mpos(print_position, current_position);
 8007268:	4629      	mov	r1, r5
 800726a:	a804      	add	r0, sp, #16
 800726c:	f002 fcd6 	bl	8009c1c <system_convert_array_steps_to_mpos>
  serial_write('<');
 8007270:	203c      	movs	r0, #60	; 0x3c
 8007272:	f000 fa05 	bl	8007680 <serial_write>
  switch (sys.state) {
 8007276:	7823      	ldrb	r3, [r4, #0]
 8007278:	2b08      	cmp	r3, #8
 800727a:	f000 81a0 	beq.w	80075be <report_realtime_status+0x366>
 800727e:	d946      	bls.n	800730e <report_realtime_status+0xb6>
 8007280:	2b20      	cmp	r3, #32
 8007282:	f000 8190 	beq.w	80075a6 <report_realtime_status+0x34e>
 8007286:	f240 8187 	bls.w	8007598 <report_realtime_status+0x340>
 800728a:	2b40      	cmp	r3, #64	; 0x40
 800728c:	f000 80e4 	beq.w	8007458 <report_realtime_status+0x200>
 8007290:	2b80      	cmp	r3, #128	; 0x80
 8007292:	d149      	bne.n	8007328 <report_realtime_status+0xd0>
    break;
  case STATE_SLEEP: printPgmString(PSTR("Sleep")); break;
  }

  float wco[N_AXIS];
  if (bit_isfalse(settings.status_report_mask, BITFLAG_RT_STATUS_POSITION_TYPE) ||
 8007294:	4ea3      	ldr	r6, [pc, #652]	; (8007524 <report_realtime_status+0x2cc>)
  case STATE_SLEEP: printPgmString(PSTR("Sleep")); break;
 8007296:	48a4      	ldr	r0, [pc, #656]	; (8007528 <report_realtime_status+0x2d0>)
 8007298:	f7fd fd42 	bl	8004d20 <printString>
  if (bit_isfalse(settings.status_report_mask, BITFLAG_RT_STATUS_POSITION_TYPE) ||
 800729c:	f896 3047 	ldrb.w	r3, [r6, #71]	; 0x47
 80072a0:	07dd      	lsls	r5, r3, #31
 80072a2:	d446      	bmi.n	8007332 <report_realtime_status+0xda>
    (sys.report_wco_counter == 0)) {
    for (idx = 0; idx< N_AXIS; idx++) {
      // Apply work coordinate offsets and tool length offset to current position.
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 80072a4:	4da1      	ldr	r5, [pc, #644]	; (800752c <report_realtime_status+0x2d4>)
 80072a6:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 80072a8:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80072aa:	f7f9 fbfd 	bl	8000aa8 <__addsf3>
 80072ae:	4603      	mov	r3, r0
      if (idx == TOOL_LENGTH_OFFSET_AXIS) { wco[idx] += gc_state.tool_length_offset; }
      if (bit_isfalse(settings.status_report_mask, BITFLAG_RT_STATUS_POSITION_TYPE)) {
        print_position[idx] -= wco[idx];
 80072b0:	9804      	ldr	r0, [sp, #16]
 80072b2:	4619      	mov	r1, r3
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 80072b4:	9308      	str	r3, [sp, #32]
        print_position[idx] -= wco[idx];
 80072b6:	f7f9 fbf5 	bl	8000aa4 <__aeabi_fsub>
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 80072ba:	6c29      	ldr	r1, [r5, #64]	; 0x40
        print_position[idx] -= wco[idx];
 80072bc:	9004      	str	r0, [sp, #16]
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 80072be:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80072c0:	f7f9 fbf2 	bl	8000aa8 <__addsf3>
 80072c4:	4603      	mov	r3, r0
        print_position[idx] -= wco[idx];
 80072c6:	9805      	ldr	r0, [sp, #20]
 80072c8:	4619      	mov	r1, r3
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 80072ca:	9309      	str	r3, [sp, #36]	; 0x24
        print_position[idx] -= wco[idx];
 80072cc:	f7f9 fbea 	bl	8000aa4 <__aeabi_fsub>
      if (idx == TOOL_LENGTH_OFFSET_AXIS) { wco[idx] += gc_state.tool_length_offset; }
 80072d0:	6cef      	ldr	r7, [r5, #76]	; 0x4c
        print_position[idx] -= wco[idx];
 80072d2:	9005      	str	r0, [sp, #20]
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 80072d4:	6c69      	ldr	r1, [r5, #68]	; 0x44
 80072d6:	6b68      	ldr	r0, [r5, #52]	; 0x34
 80072d8:	f7f9 fbe6 	bl	8000aa8 <__addsf3>
      if (idx == TOOL_LENGTH_OFFSET_AXIS) { wco[idx] += gc_state.tool_length_offset; }
 80072dc:	4639      	mov	r1, r7
 80072de:	f7f9 fbe3 	bl	8000aa8 <__addsf3>
 80072e2:	4603      	mov	r3, r0
        print_position[idx] -= wco[idx];
 80072e4:	9806      	ldr	r0, [sp, #24]
 80072e6:	4619      	mov	r1, r3
      if (idx == TOOL_LENGTH_OFFSET_AXIS) { wco[idx] += gc_state.tool_length_offset; }
 80072e8:	930a      	str	r3, [sp, #40]	; 0x28
        print_position[idx] -= wco[idx];
 80072ea:	f7f9 fbdb 	bl	8000aa4 <__aeabi_fsub>
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 80072ee:	6ca9      	ldr	r1, [r5, #72]	; 0x48
        print_position[idx] -= wco[idx];
 80072f0:	9006      	str	r0, [sp, #24]
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 80072f2:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 80072f4:	f7f9 fbd8 	bl	8000aa8 <__addsf3>
 80072f8:	4603      	mov	r3, r0
        print_position[idx] -= wco[idx];
 80072fa:	9807      	ldr	r0, [sp, #28]
 80072fc:	4619      	mov	r1, r3
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 80072fe:	930b      	str	r3, [sp, #44]	; 0x2c
        print_position[idx] -= wco[idx];
 8007300:	f7f9 fbd0 	bl	8000aa4 <__aeabi_fsub>
 8007304:	9007      	str	r0, [sp, #28]
  // Report machine position
  if (bit_istrue(settings.status_report_mask, BITFLAG_RT_STATUS_POSITION_TYPE)) {
    printPgmString(PSTR("|MPos:"));
  }
  else {
    printPgmString(PSTR("|WPos:"));
 8007306:	488a      	ldr	r0, [pc, #552]	; (8007530 <report_realtime_status+0x2d8>)
 8007308:	f7fd fd0a 	bl	8004d20 <printString>
 800730c:	e02f      	b.n	800736e <report_realtime_status+0x116>
  switch (sys.state) {
 800730e:	2b01      	cmp	r3, #1
 8007310:	f000 8151 	beq.w	80075b6 <report_realtime_status+0x35e>
 8007314:	f0c0 814b 	bcc.w	80075ae <report_realtime_status+0x356>
 8007318:	2b02      	cmp	r3, #2
 800731a:	f000 80ae 	beq.w	800747a <report_realtime_status+0x222>
 800731e:	2b04      	cmp	r3, #4
 8007320:	d102      	bne.n	8007328 <report_realtime_status+0xd0>
  case STATE_HOMING: printPgmString(PSTR("Home")); break;
 8007322:	4884      	ldr	r0, [pc, #528]	; (8007534 <report_realtime_status+0x2dc>)
 8007324:	f7fd fcfc 	bl	8004d20 <printString>
  if (bit_isfalse(settings.status_report_mask, BITFLAG_RT_STATUS_POSITION_TYPE) ||
 8007328:	4e7e      	ldr	r6, [pc, #504]	; (8007524 <report_realtime_status+0x2cc>)
 800732a:	f896 3047 	ldrb.w	r3, [r6, #71]	; 0x47
 800732e:	07dd      	lsls	r5, r3, #31
 8007330:	d5b8      	bpl.n	80072a4 <report_realtime_status+0x4c>
 8007332:	7b63      	ldrb	r3, [r4, #13]
 8007334:	b9c3      	cbnz	r3, 8007368 <report_realtime_status+0x110>
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 8007336:	4d7d      	ldr	r5, [pc, #500]	; (800752c <report_realtime_status+0x2d4>)
 8007338:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 800733a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800733c:	f7f9 fbb4 	bl	8000aa8 <__addsf3>
 8007340:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8007342:	9008      	str	r0, [sp, #32]
 8007344:	6c28      	ldr	r0, [r5, #64]	; 0x40
 8007346:	f7f9 fbaf 	bl	8000aa8 <__addsf3>
      if (idx == TOOL_LENGTH_OFFSET_AXIS) { wco[idx] += gc_state.tool_length_offset; }
 800734a:	6cef      	ldr	r7, [r5, #76]	; 0x4c
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 800734c:	9009      	str	r0, [sp, #36]	; 0x24
 800734e:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8007350:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8007352:	f7f9 fba9 	bl	8000aa8 <__addsf3>
      if (idx == TOOL_LENGTH_OFFSET_AXIS) { wco[idx] += gc_state.tool_length_offset; }
 8007356:	4639      	mov	r1, r7
 8007358:	f7f9 fba6 	bl	8000aa8 <__addsf3>
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 800735c:	6ca9      	ldr	r1, [r5, #72]	; 0x48
      if (idx == TOOL_LENGTH_OFFSET_AXIS) { wco[idx] += gc_state.tool_length_offset; }
 800735e:	900a      	str	r0, [sp, #40]	; 0x28
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 8007360:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8007362:	f7f9 fba1 	bl	8000aa8 <__addsf3>
 8007366:	900b      	str	r0, [sp, #44]	; 0x2c
    printPgmString(PSTR("|MPos:"));
 8007368:	4873      	ldr	r0, [pc, #460]	; (8007538 <report_realtime_status+0x2e0>)
 800736a:	f7fd fcd9 	bl	8004d20 <printString>
    printFloat_CoordValue(axis_value[idx]);
 800736e:	9804      	ldr	r0, [sp, #16]
 8007370:	f7fd fe14 	bl	8004f9c <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8007374:	202c      	movs	r0, #44	; 0x2c
 8007376:	f000 f983 	bl	8007680 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 800737a:	9805      	ldr	r0, [sp, #20]
 800737c:	f7fd fe0e 	bl	8004f9c <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8007380:	202c      	movs	r0, #44	; 0x2c
 8007382:	f000 f97d 	bl	8007680 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8007386:	9806      	ldr	r0, [sp, #24]
 8007388:	f7fd fe08 	bl	8004f9c <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 800738c:	202c      	movs	r0, #44	; 0x2c
 800738e:	f000 f977 	bl	8007680 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8007392:	9807      	ldr	r0, [sp, #28]
 8007394:	f7fd fe02 	bl	8004f9c <printFloat_CoordValue>
  }
  report_util_axis_values(print_position);

  // Returns planner and serial read buffer states.
#ifdef REPORT_FIELD_BUFFER_STATE
  if (bit_istrue(settings.status_report_mask, BITFLAG_RT_STATUS_BUFFER_STATE)) {
 8007398:	f896 3047 	ldrb.w	r3, [r6, #71]	; 0x47
 800739c:	0798      	lsls	r0, r3, #30
 800739e:	f100 80dd 	bmi.w	800755c <report_realtime_status+0x304>
#endif

  // Report realtime feed speed
#ifdef REPORT_FIELD_CURRENT_FEED_SPEED
#ifdef VARIABLE_SPINDLE
  printPgmString(PSTR("|FS:"));
 80073a2:	4866      	ldr	r0, [pc, #408]	; (800753c <report_realtime_status+0x2e4>)
 80073a4:	f7fd fcbc 	bl	8004d20 <printString>
  printFloat_RateValue(st_get_realtime_rate());
 80073a8:	f002 f97e 	bl	80096a8 <st_get_realtime_rate>
 80073ac:	f7fd fee6 	bl	800517c <printFloat_RateValue>
  serial_write(',');
 80073b0:	202c      	movs	r0, #44	; 0x2c
 80073b2:	f000 f965 	bl	8007680 <serial_write>
  printFloat(sys.spindle_speed, N_DECIMAL_RPMVALUE);
 80073b6:	2100      	movs	r1, #0
 80073b8:	6920      	ldr	r0, [r4, #16]
 80073ba:	f7fd fcff 	bl	8004dbc <printFloat>
  printFloat_RateValue(st_get_realtime_rate());
#endif      
#endif

#ifdef REPORT_FIELD_PIN_STATE
  uint8_t lim_pin_state = limits_get_state();
 80073be:	f7fb ff6b 	bl	8003298 <limits_get_state>
 80073c2:	4605      	mov	r5, r0
  uint8_t ctrl_pin_state = system_control_get_state();
 80073c4:	f002 f9c2 	bl	800974c <system_control_get_state>
 80073c8:	4606      	mov	r6, r0
  uint8_t prb_pin_state = probe_get_state();
 80073ca:	f7fd ffb3 	bl	8005334 <probe_get_state>
  if (lim_pin_state | ctrl_pin_state | prb_pin_state) {
 80073ce:	ea45 0306 	orr.w	r3, r5, r6
 80073d2:	4303      	orrs	r3, r0
 80073d4:	f013 0fff 	tst.w	r3, #255	; 0xff
  uint8_t prb_pin_state = probe_get_state();
 80073d8:	4607      	mov	r7, r0
  if (lim_pin_state | ctrl_pin_state | prb_pin_state) {
 80073da:	d17b      	bne.n	80074d4 <report_realtime_status+0x27c>
    }
  }
#endif

#ifdef REPORT_FIELD_WORK_COORD_OFFSET
  if (sys.report_wco_counter > 0) { sys.report_wco_counter--; }
 80073dc:	7b63      	ldrb	r3, [r4, #13]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d04f      	beq.n	8007482 <report_realtime_status+0x22a>
 80073e2:	3b01      	subs	r3, #1
 80073e4:	7363      	strb	r3, [r4, #13]
    report_util_axis_values(wco);
  }
#endif

  #ifdef REPORT_FIELD_OVERRIDES
    if (sys.report_ovr_counter > 0) { sys.report_ovr_counter--; }
 80073e6:	7b23      	ldrb	r3, [r4, #12]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d170      	bne.n	80074ce <report_realtime_status+0x276>
    else {
      if (sys.state & (STATE_HOMING | STATE_CYCLE | STATE_HOLD | STATE_JOG | STATE_SAFETY_DOOR)) {
 80073ec:	7823      	ldrb	r3, [r4, #0]
        sys.report_ovr_counter = (REPORT_OVR_REFRESH_BUSY_COUNT - 1); // Reset counter for slow refresh
      }
      else { sys.report_ovr_counter = (REPORT_OVR_REFRESH_IDLE_COUNT - 1); }
      printPgmString(PSTR("|Ov:"));
 80073ee:	4854      	ldr	r0, [pc, #336]	; (8007540 <report_realtime_status+0x2e8>)
      else { sys.report_ovr_counter = (REPORT_OVR_REFRESH_IDLE_COUNT - 1); }
 80073f0:	f013 0f7c 	tst.w	r3, #124	; 0x7c
 80073f4:	bf14      	ite	ne
 80073f6:	2313      	movne	r3, #19
 80073f8:	2309      	moveq	r3, #9
 80073fa:	7323      	strb	r3, [r4, #12]
      printPgmString(PSTR("|Ov:"));
 80073fc:	f7fd fc90 	bl	8004d20 <printString>
      print_uint8_base10(sys.f_override);
 8007400:	7a20      	ldrb	r0, [r4, #8]
 8007402:	f7fd fc99 	bl	8004d38 <print_uint8_base10>
      serial_write(',');
 8007406:	202c      	movs	r0, #44	; 0x2c
 8007408:	f000 f93a 	bl	8007680 <serial_write>
      print_uint8_base10(sys.r_override);
 800740c:	7a60      	ldrb	r0, [r4, #9]
 800740e:	f7fd fc93 	bl	8004d38 <print_uint8_base10>
      serial_write(',');
 8007412:	202c      	movs	r0, #44	; 0x2c
 8007414:	f000 f934 	bl	8007680 <serial_write>
      print_uint8_base10(sys.spindle_speed_ovr);
 8007418:	7aa0      	ldrb	r0, [r4, #10]
 800741a:	f7fd fc8d 	bl	8004d38 <print_uint8_base10>

      uint8_t sp_state = spindle_get_state();
 800741e:	f000 fe3b 	bl	8008098 <spindle_get_state>
 8007422:	4605      	mov	r5, r0
      uint8_t cl_state = coolant_get_state();
 8007424:	f7fa fbaa 	bl	8001b7c <coolant_get_state>
 8007428:	4604      	mov	r4, r0
      if (sp_state || cl_state) {
 800742a:	2d00      	cmp	r5, #0
 800742c:	f040 80a5 	bne.w	800757a <report_realtime_status+0x322>
 8007430:	b150      	cbz	r0, 8007448 <report_realtime_status+0x1f0>
        printPgmString(PSTR("|A:"));
 8007432:	4844      	ldr	r0, [pc, #272]	; (8007544 <report_realtime_status+0x2ec>)
 8007434:	f7fd fc74 	bl	8004d20 <printString>
          #else
            if (sp_state & SPINDLE_STATE_CW) { serial_write('S'); } // CW
            else { serial_write('C'); } // CCW
          #endif
        }
        if (cl_state & COOLANT_STATE_FLOOD) { serial_write('F'); }
 8007438:	07e2      	lsls	r2, r4, #31
 800743a:	f100 80a9 	bmi.w	8007590 <report_realtime_status+0x338>
        #ifdef ENABLE_M7
          if (cl_state & COOLANT_STATE_MIST) { serial_write('M'); }
 800743e:	07a3      	lsls	r3, r4, #30
 8007440:	d502      	bpl.n	8007448 <report_realtime_status+0x1f0>
 8007442:	204d      	movs	r0, #77	; 0x4d
 8007444:	f000 f91c 	bl	8007680 <serial_write>
        #endif
      }
    }
  #endif

  serial_write('>');
 8007448:	203e      	movs	r0, #62	; 0x3e
 800744a:	f000 f919 	bl	8007680 <serial_write>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 800744e:	483e      	ldr	r0, [pc, #248]	; (8007548 <report_realtime_status+0x2f0>)
 8007450:	f7fd fc66 	bl	8004d20 <printString>
  report_util_line_feed();
}
 8007454:	b00d      	add	sp, #52	; 0x34
 8007456:	bdf0      	pop	{r4, r5, r6, r7, pc}
    printPgmString(PSTR("Door:"));
 8007458:	483c      	ldr	r0, [pc, #240]	; (800754c <report_realtime_status+0x2f4>)
 800745a:	f7fd fc61 	bl	8004d20 <printString>
    if (sys.suspend & SUSPEND_INITIATE_RESTORE) {
 800745e:	78a3      	ldrb	r3, [r4, #2]
 8007460:	071a      	lsls	r2, r3, #28
 8007462:	f100 80d7 	bmi.w	8007614 <report_realtime_status+0x3bc>
      if (sys.suspend & SUSPEND_RETRACT_COMPLETE) {
 8007466:	075f      	lsls	r7, r3, #29
 8007468:	f140 80d0 	bpl.w	800760c <report_realtime_status+0x3b4>
        if (sys.suspend & SUSPEND_SAFETY_DOOR_AJAR) {
 800746c:	069e      	lsls	r6, r3, #26
 800746e:	f140 80c9 	bpl.w	8007604 <report_realtime_status+0x3ac>
      else { serial_write('1'); } // Actively holding
 8007472:	2031      	movs	r0, #49	; 0x31
 8007474:	f000 f904 	bl	8007680 <serial_write>
 8007478:	e756      	b.n	8007328 <report_realtime_status+0xd0>
  case STATE_CHECK_MODE: printPgmString(PSTR("Check")); break;
 800747a:	4835      	ldr	r0, [pc, #212]	; (8007550 <report_realtime_status+0x2f8>)
 800747c:	f7fd fc50 	bl	8004d20 <printString>
 8007480:	e752      	b.n	8007328 <report_realtime_status+0xd0>
    if (sys.state & (STATE_HOMING | STATE_CYCLE | STATE_HOLD | STATE_JOG | STATE_SAFETY_DOOR)) {
 8007482:	7822      	ldrb	r2, [r4, #0]
    if (sys.report_ovr_counter == 0) { sys.report_ovr_counter = 1; } // Set override on next report.
 8007484:	7b23      	ldrb	r3, [r4, #12]
    else { sys.report_wco_counter = (REPORT_WCO_REFRESH_IDLE_COUNT - 1); }
 8007486:	f012 0f7c 	tst.w	r2, #124	; 0x7c
 800748a:	bf14      	ite	ne
 800748c:	221d      	movne	r2, #29
 800748e:	2209      	moveq	r2, #9
 8007490:	7362      	strb	r2, [r4, #13]
    if (sys.report_ovr_counter == 0) { sys.report_ovr_counter = 1; } // Set override on next report.
 8007492:	b90b      	cbnz	r3, 8007498 <report_realtime_status+0x240>
 8007494:	2301      	movs	r3, #1
 8007496:	7323      	strb	r3, [r4, #12]
    printPgmString(PSTR("|WCO:"));
 8007498:	482e      	ldr	r0, [pc, #184]	; (8007554 <report_realtime_status+0x2fc>)
 800749a:	f7fd fc41 	bl	8004d20 <printString>
    printFloat_CoordValue(axis_value[idx]);
 800749e:	9808      	ldr	r0, [sp, #32]
 80074a0:	f7fd fd7c 	bl	8004f9c <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 80074a4:	202c      	movs	r0, #44	; 0x2c
 80074a6:	f000 f8eb 	bl	8007680 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 80074aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80074ac:	f7fd fd76 	bl	8004f9c <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 80074b0:	202c      	movs	r0, #44	; 0x2c
 80074b2:	f000 f8e5 	bl	8007680 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 80074b6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80074b8:	f7fd fd70 	bl	8004f9c <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 80074bc:	202c      	movs	r0, #44	; 0x2c
 80074be:	f000 f8df 	bl	8007680 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 80074c2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80074c4:	f7fd fd6a 	bl	8004f9c <printFloat_CoordValue>
    if (sys.report_ovr_counter > 0) { sys.report_ovr_counter--; }
 80074c8:	7b23      	ldrb	r3, [r4, #12]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d08e      	beq.n	80073ec <report_realtime_status+0x194>
 80074ce:	3b01      	subs	r3, #1
 80074d0:	7323      	strb	r3, [r4, #12]
 80074d2:	e7b9      	b.n	8007448 <report_realtime_status+0x1f0>
    printPgmString(PSTR("|Pn:"));
 80074d4:	4820      	ldr	r0, [pc, #128]	; (8007558 <report_realtime_status+0x300>)
 80074d6:	f7fd fc23 	bl	8004d20 <printString>
    if (prb_pin_state) { serial_write('P'); }
 80074da:	b9bf      	cbnz	r7, 800750c <report_realtime_status+0x2b4>
    if (lim_pin_state) {
 80074dc:	b145      	cbz	r5, 80074f0 <report_realtime_status+0x298>
      if (bit_istrue(lim_pin_state, bit(X_AXIS))) { serial_write('X'); }
 80074de:	07e9      	lsls	r1, r5, #31
 80074e0:	f100 8085 	bmi.w	80075ee <report_realtime_status+0x396>
      if (bit_istrue(lim_pin_state, bit(Y_AXIS))) { serial_write('Y'); }
 80074e4:	07aa      	lsls	r2, r5, #30
 80074e6:	d47e      	bmi.n	80075e6 <report_realtime_status+0x38e>
      if (bit_istrue(lim_pin_state, bit(Z_AXIS))) { serial_write('Z'); }
 80074e8:	076b      	lsls	r3, r5, #29
 80074ea:	d470      	bmi.n	80075ce <report_realtime_status+0x376>
	  if (bit_istrue(lim_pin_state, bit(A_AXIS))) { serial_write('A'); }
 80074ec:	072f      	lsls	r7, r5, #28
 80074ee:	d411      	bmi.n	8007514 <report_realtime_status+0x2bc>
    if (ctrl_pin_state) {
 80074f0:	2e00      	cmp	r6, #0
 80074f2:	f43f af73 	beq.w	80073dc <report_realtime_status+0x184>
      if (bit_istrue(ctrl_pin_state, CONTROL_PIN_INDEX_RESET)) { serial_write('R'); }
 80074f6:	07f5      	lsls	r5, r6, #31
 80074f8:	d471      	bmi.n	80075de <report_realtime_status+0x386>
      if (bit_istrue(ctrl_pin_state, CONTROL_PIN_INDEX_FEED_HOLD)) { serial_write('H'); }
 80074fa:	07b0      	lsls	r0, r6, #30
 80074fc:	d46b      	bmi.n	80075d6 <report_realtime_status+0x37e>
      if (bit_istrue(ctrl_pin_state, CONTROL_PIN_INDEX_CYCLE_START)) { serial_write('S'); }
 80074fe:	0771      	lsls	r1, r6, #29
 8007500:	f57f af6c 	bpl.w	80073dc <report_realtime_status+0x184>
 8007504:	2053      	movs	r0, #83	; 0x53
 8007506:	f000 f8bb 	bl	8007680 <serial_write>
 800750a:	e767      	b.n	80073dc <report_realtime_status+0x184>
    if (prb_pin_state) { serial_write('P'); }
 800750c:	2050      	movs	r0, #80	; 0x50
 800750e:	f000 f8b7 	bl	8007680 <serial_write>
 8007512:	e7e3      	b.n	80074dc <report_realtime_status+0x284>
	  if (bit_istrue(lim_pin_state, bit(A_AXIS))) { serial_write('A'); }
 8007514:	2041      	movs	r0, #65	; 0x41
 8007516:	f000 f8b3 	bl	8007680 <serial_write>
 800751a:	e7e9      	b.n	80074f0 <report_realtime_status+0x298>
 800751c:	20001430 	.word	0x20001430
 8007520:	20001408 	.word	0x20001408
 8007524:	20001744 	.word	0x20001744
 8007528:	0800cac0 	.word	0x0800cac0
 800752c:	2000136c 	.word	0x2000136c
 8007530:	0800cafc 	.word	0x0800cafc
 8007534:	0800caa0 	.word	0x0800caa0
 8007538:	0800cac8 	.word	0x0800cac8
 800753c:	0800cad8 	.word	0x0800cad8
 8007540:	0800caf0 	.word	0x0800caf0
 8007544:	0800caf8 	.word	0x0800caf8
 8007548:	0800cb18 	.word	0x0800cb18
 800754c:	0800cab8 	.word	0x0800cab8
 8007550:	0800cab0 	.word	0x0800cab0
 8007554:	0800cae8 	.word	0x0800cae8
 8007558:	0800cae0 	.word	0x0800cae0
    printPgmString(PSTR("|Bf:"));
 800755c:	482f      	ldr	r0, [pc, #188]	; (800761c <report_realtime_status+0x3c4>)
 800755e:	f7fd fbdf 	bl	8004d20 <printString>
    print_uint8_base10(plan_get_block_buffer_available());
 8007562:	f7fd fbbb 	bl	8004cdc <plan_get_block_buffer_available>
 8007566:	f7fd fbe7 	bl	8004d38 <print_uint8_base10>
    serial_write(',');
 800756a:	202c      	movs	r0, #44	; 0x2c
 800756c:	f000 f888 	bl	8007680 <serial_write>
    print_uint8_base10(serial_get_rx_buffer_available());
 8007570:	f000 f862 	bl	8007638 <serial_get_rx_buffer_available>
 8007574:	f7fd fbe0 	bl	8004d38 <print_uint8_base10>
 8007578:	e713      	b.n	80073a2 <report_realtime_status+0x14a>
        printPgmString(PSTR("|A:"));
 800757a:	4829      	ldr	r0, [pc, #164]	; (8007620 <report_realtime_status+0x3c8>)
 800757c:	f7fd fbd0 	bl	8004d20 <printString>
              if (sp_state == SPINDLE_STATE_CW) { serial_write('S'); } // CW
 8007580:	2d01      	cmp	r5, #1
 8007582:	d020      	beq.n	80075c6 <report_realtime_status+0x36e>
              else { serial_write('C'); } // CCW
 8007584:	2043      	movs	r0, #67	; 0x43
 8007586:	f000 f87b 	bl	8007680 <serial_write>
        if (cl_state & COOLANT_STATE_FLOOD) { serial_write('F'); }
 800758a:	07e2      	lsls	r2, r4, #31
 800758c:	f57f af57 	bpl.w	800743e <report_realtime_status+0x1e6>
 8007590:	2046      	movs	r0, #70	; 0x46
 8007592:	f000 f875 	bl	8007680 <serial_write>
 8007596:	e752      	b.n	800743e <report_realtime_status+0x1e6>
  switch (sys.state) {
 8007598:	2b10      	cmp	r3, #16
 800759a:	f47f aec5 	bne.w	8007328 <report_realtime_status+0xd0>
    if (!(sys.suspend & SUSPEND_JOG_CANCEL)) {
 800759e:	f994 3002 	ldrsb.w	r3, [r4, #2]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	da27      	bge.n	80075f6 <report_realtime_status+0x39e>
  case STATE_JOG: printPgmString(PSTR("Jog")); break;
 80075a6:	481f      	ldr	r0, [pc, #124]	; (8007624 <report_realtime_status+0x3cc>)
 80075a8:	f7fd fbba 	bl	8004d20 <printString>
 80075ac:	e6bc      	b.n	8007328 <report_realtime_status+0xd0>
  case STATE_IDLE: printPgmString(PSTR("Idle")); break;
 80075ae:	481e      	ldr	r0, [pc, #120]	; (8007628 <report_realtime_status+0x3d0>)
 80075b0:	f7fd fbb6 	bl	8004d20 <printString>
 80075b4:	e6b8      	b.n	8007328 <report_realtime_status+0xd0>
  case STATE_ALARM: printPgmString(PSTR("Alarm")); break;
 80075b6:	481d      	ldr	r0, [pc, #116]	; (800762c <report_realtime_status+0x3d4>)
 80075b8:	f7fd fbb2 	bl	8004d20 <printString>
 80075bc:	e6b4      	b.n	8007328 <report_realtime_status+0xd0>
  case STATE_CYCLE: printPgmString(PSTR("Run")); break;
 80075be:	481c      	ldr	r0, [pc, #112]	; (8007630 <report_realtime_status+0x3d8>)
 80075c0:	f7fd fbae 	bl	8004d20 <printString>
 80075c4:	e6b0      	b.n	8007328 <report_realtime_status+0xd0>
              if (sp_state == SPINDLE_STATE_CW) { serial_write('S'); } // CW
 80075c6:	2053      	movs	r0, #83	; 0x53
 80075c8:	f000 f85a 	bl	8007680 <serial_write>
 80075cc:	e734      	b.n	8007438 <report_realtime_status+0x1e0>
      if (bit_istrue(lim_pin_state, bit(Z_AXIS))) { serial_write('Z'); }
 80075ce:	205a      	movs	r0, #90	; 0x5a
 80075d0:	f000 f856 	bl	8007680 <serial_write>
 80075d4:	e78a      	b.n	80074ec <report_realtime_status+0x294>
      if (bit_istrue(ctrl_pin_state, CONTROL_PIN_INDEX_FEED_HOLD)) { serial_write('H'); }
 80075d6:	2048      	movs	r0, #72	; 0x48
 80075d8:	f000 f852 	bl	8007680 <serial_write>
 80075dc:	e78f      	b.n	80074fe <report_realtime_status+0x2a6>
      if (bit_istrue(ctrl_pin_state, CONTROL_PIN_INDEX_RESET)) { serial_write('R'); }
 80075de:	2052      	movs	r0, #82	; 0x52
 80075e0:	f000 f84e 	bl	8007680 <serial_write>
 80075e4:	e789      	b.n	80074fa <report_realtime_status+0x2a2>
      if (bit_istrue(lim_pin_state, bit(Y_AXIS))) { serial_write('Y'); }
 80075e6:	2059      	movs	r0, #89	; 0x59
 80075e8:	f000 f84a 	bl	8007680 <serial_write>
 80075ec:	e77c      	b.n	80074e8 <report_realtime_status+0x290>
      if (bit_istrue(lim_pin_state, bit(X_AXIS))) { serial_write('X'); }
 80075ee:	2058      	movs	r0, #88	; 0x58
 80075f0:	f000 f846 	bl	8007680 <serial_write>
 80075f4:	e776      	b.n	80074e4 <report_realtime_status+0x28c>
      printPgmString(PSTR("Hold:"));
 80075f6:	480f      	ldr	r0, [pc, #60]	; (8007634 <report_realtime_status+0x3dc>)
 80075f8:	f7fd fb92 	bl	8004d20 <printString>
      if (sys.suspend & SUSPEND_HOLD_COMPLETE) { serial_write('0'); } // Ready to resume
 80075fc:	78a3      	ldrb	r3, [r4, #2]
 80075fe:	07d9      	lsls	r1, r3, #31
 8007600:	f57f af37 	bpl.w	8007472 <report_realtime_status+0x21a>
 8007604:	2030      	movs	r0, #48	; 0x30
 8007606:	f000 f83b 	bl	8007680 <serial_write>
 800760a:	e68d      	b.n	8007328 <report_realtime_status+0xd0>
        serial_write('2'); // Retracting
 800760c:	2032      	movs	r0, #50	; 0x32
 800760e:	f000 f837 	bl	8007680 <serial_write>
 8007612:	e689      	b.n	8007328 <report_realtime_status+0xd0>
      serial_write('3'); // Restoring
 8007614:	2033      	movs	r0, #51	; 0x33
 8007616:	f000 f833 	bl	8007680 <serial_write>
 800761a:	e685      	b.n	8007328 <report_realtime_status+0xd0>
 800761c:	0800cad0 	.word	0x0800cad0
 8007620:	0800caf8 	.word	0x0800caf8
 8007624:	0800ca9c 	.word	0x0800ca9c
 8007628:	0800ca88 	.word	0x0800ca88
 800762c:	0800caa8 	.word	0x0800caa8
 8007630:	0800ca90 	.word	0x0800ca90
 8007634:	0800ca94 	.word	0x0800ca94

08007638 <serial_get_rx_buffer_available>:


// Returns the number of bytes available in the RX serial buffer.
uint8_t serial_get_rx_buffer_available()
{
  uint8_t rtail = serial_rx_buffer_tail; // Copy to limit multiple calls to volatile
 8007638:	4b06      	ldr	r3, [pc, #24]	; (8007654 <serial_get_rx_buffer_available+0x1c>)
  if (serial_rx_buffer_head >= rtail) { return(RX_BUFFER_SIZE - (serial_rx_buffer_head-rtail)); }
 800763a:	4a07      	ldr	r2, [pc, #28]	; (8007658 <serial_get_rx_buffer_available+0x20>)
  uint8_t rtail = serial_rx_buffer_tail; // Copy to limit multiple calls to volatile
 800763c:	781b      	ldrb	r3, [r3, #0]
  if (serial_rx_buffer_head >= rtail) { return(RX_BUFFER_SIZE - (serial_rx_buffer_head-rtail)); }
 800763e:	7812      	ldrb	r2, [r2, #0]
  uint8_t rtail = serial_rx_buffer_tail; // Copy to limit multiple calls to volatile
 8007640:	b2db      	uxtb	r3, r3
  if (serial_rx_buffer_head >= rtail) { return(RX_BUFFER_SIZE - (serial_rx_buffer_head-rtail)); }
 8007642:	429a      	cmp	r2, r3
 8007644:	bf2c      	ite	cs
 8007646:	1e98      	subcs	r0, r3, #2
  return((rtail-serial_rx_buffer_head-1));
 8007648:	f103 30ff 	addcc.w	r0, r3, #4294967295
 800764c:	1a80      	subs	r0, r0, r2
 800764e:	b2c0      	uxtb	r0, r0
}
 8007650:	4770      	bx	lr
 8007652:	bf00      	nop
 8007654:	20000daf 	.word	0x20000daf
 8007658:	20000dae 	.word	0x20000dae

0800765c <serial3_get_rx_buffer_count>:
  return (RX_BUFFER_SIZE - (rtail-serial_rx_buffer_head));
}

uint8_t serial3_get_rx_buffer_count()
{
  uint8_t rtail = serial3_rx_buffer_tail; // Copy to limit multiple calls to volatile
 800765c:	4b05      	ldr	r3, [pc, #20]	; (8007674 <serial3_get_rx_buffer_count+0x18>)
  if (serial3_rx_buffer_head >= rtail) { return(serial3_rx_buffer_head-rtail); }
 800765e:	4a06      	ldr	r2, [pc, #24]	; (8007678 <serial3_get_rx_buffer_count+0x1c>)
  uint8_t rtail = serial3_rx_buffer_tail; // Copy to limit multiple calls to volatile
 8007660:	781b      	ldrb	r3, [r3, #0]
  if (serial3_rx_buffer_head >= rtail) { return(serial3_rx_buffer_head-rtail); }
 8007662:	7810      	ldrb	r0, [r2, #0]
  uint8_t rtail = serial3_rx_buffer_tail; // Copy to limit multiple calls to volatile
 8007664:	b2db      	uxtb	r3, r3
  if (serial3_rx_buffer_head >= rtail) { return(serial3_rx_buffer_head-rtail); }
 8007666:	4298      	cmp	r0, r3
  return (RX_BUFFER_SIZE - (rtail-serial3_rx_buffer_head));
 8007668:	bf38      	it	cc
 800766a:	3802      	subcc	r0, #2
 800766c:	1ac0      	subs	r0, r0, r3
 800766e:	b2c0      	uxtb	r0, r0
}
 8007670:	4770      	bx	lr
 8007672:	bf00      	nop
 8007674:	20000dad 	.word	0x20000dad
 8007678:	20000dac 	.word	0x20000dac

0800767c <serial_init>:
  // defaults to 8-bit, no parity, 1 stop bit
#endif
#ifdef WIN32
  InitializeCriticalSectionAndSpinCount(&CriticalSection,0x00000400);
#endif
}
 800767c:	4770      	bx	lr
 800767e:	bf00      	nop

08007680 <serial_write>:
}
#endif


// Writes one byte to the TX serial buffer. Called by main program.
void serial_write(uint8_t data) {
 8007680:	b470      	push	{r4, r5, r6}
  // Calculate next head
  uint8_t next_head = serial_tx_buffer_head + 1;
 8007682:	4e0f      	ldr	r6, [pc, #60]	; (80076c0 <serial_write+0x40>)
 8007684:	490f      	ldr	r1, [pc, #60]	; (80076c4 <serial_write+0x44>)
 8007686:	7835      	ldrb	r5, [r6, #0]
  if (next_head == TX_RING_BUFFER) { next_head = 0; }

  // Wait until there is space in the buffer
  while (next_head == serial_tx_buffer_tail) {
    // TODO: Restructure st_prep_buffer() calls to be executed here during a long print.
    if (sys_rt_exec_state & EXEC_RESET) { return; } // Only check for abort to avoid an endless loop.
 8007688:	4c0f      	ldr	r4, [pc, #60]	; (80076c8 <serial_write+0x48>)
  uint8_t next_head = serial_tx_buffer_head + 1;
 800768a:	1c6a      	adds	r2, r5, #1
 800768c:	b2d2      	uxtb	r2, r2
  if (next_head == TX_RING_BUFFER) { next_head = 0; }
 800768e:	2a80      	cmp	r2, #128	; 0x80
 8007690:	bf08      	it	eq
 8007692:	2200      	moveq	r2, #0
 8007694:	e002      	b.n	800769c <serial_write+0x1c>
    if (sys_rt_exec_state & EXEC_RESET) { return; } // Only check for abort to avoid an endless loop.
 8007696:	7823      	ldrb	r3, [r4, #0]
 8007698:	06db      	lsls	r3, r3, #27
 800769a:	d40e      	bmi.n	80076ba <serial_write+0x3a>
  while (next_head == serial_tx_buffer_tail) {
 800769c:	780b      	ldrb	r3, [r1, #0]
 800769e:	4293      	cmp	r3, r2
 80076a0:	d0f9      	beq.n	8007696 <serial_write+0x16>
     Sleep(1);
#endif
  }

  // Store data and advance head
  serial_tx_buffer[serial_tx_buffer_head] = data;
 80076a2:	4b0a      	ldr	r3, [pc, #40]	; (80076cc <serial_write+0x4c>)
 80076a4:	490a      	ldr	r1, [pc, #40]	; (80076d0 <serial_write+0x50>)
 80076a6:	5558      	strb	r0, [r3, r5]
#ifdef USB_CHANGED_DEBUG
  while(txUsbLock) { // lock until txUsbLock to 0 on EP1_callback and change serial_tx_buffer_head variable
	  if (sys_rt_exec_state & EXEC_RESET) { return; } // Only check for abort to avoid an endless loop. }
 80076a8:	4807      	ldr	r0, [pc, #28]	; (80076c8 <serial_write+0x48>)
  while(txUsbLock) { // lock until txUsbLock to 0 on EP1_callback and change serial_tx_buffer_head variable
 80076aa:	e002      	b.n	80076b2 <serial_write+0x32>
	  if (sys_rt_exec_state & EXEC_RESET) { return; } // Only check for abort to avoid an endless loop. }
 80076ac:	7803      	ldrb	r3, [r0, #0]
 80076ae:	06db      	lsls	r3, r3, #27
 80076b0:	d403      	bmi.n	80076ba <serial_write+0x3a>
  while(txUsbLock) { // lock until txUsbLock to 0 on EP1_callback and change serial_tx_buffer_head variable
 80076b2:	780b      	ldrb	r3, [r1, #0]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d1f9      	bne.n	80076ac <serial_write+0x2c>
  }
#endif
  serial_tx_buffer_head = next_head;
 80076b8:	7032      	strb	r2, [r6, #0]

#ifdef AVRTARGET
  // Enable Data Register Empty Interrupt to make sure tx-streaming is running
  UCSR0B |=  (1 << UDRIE0);
#endif
}
 80076ba:	bc70      	pop	{r4, r5, r6}
 80076bc:	4770      	bx	lr
 80076be:	bf00      	nop
 80076c0:	20000db0 	.word	0x20000db0
 80076c4:	20000db1 	.word	0x20000db1
 80076c8:	2000141d 	.word	0x2000141d
 80076cc:	20001544 	.word	0x20001544
 80076d0:	20000f64 	.word	0x20000f64

080076d4 <serial_read>:
#endif

// Fetches the first byte in the serial read buffer. Called by main program.
uint8_t serial_read()
{
  uint8_t tail = serial_rx_buffer_tail; // Temporary serial_rx_buffer_tail (to optimize for volatile)
 80076d4:	4908      	ldr	r1, [pc, #32]	; (80076f8 <serial_read+0x24>)
  if (serial_rx_buffer_head == tail) {
 80076d6:	4b09      	ldr	r3, [pc, #36]	; (80076fc <serial_read+0x28>)
  uint8_t tail = serial_rx_buffer_tail; // Temporary serial_rx_buffer_tail (to optimize for volatile)
 80076d8:	780a      	ldrb	r2, [r1, #0]
  if (serial_rx_buffer_head == tail) {
 80076da:	781b      	ldrb	r3, [r3, #0]
  uint8_t tail = serial_rx_buffer_tail; // Temporary serial_rx_buffer_tail (to optimize for volatile)
 80076dc:	b2d2      	uxtb	r2, r2
  if (serial_rx_buffer_head == tail) {
 80076de:	4293      	cmp	r3, r2
 80076e0:	d008      	beq.n	80076f4 <serial_read+0x20>
    return SERIAL_NO_DATA;
  } else {
    uint8_t data = serial_rx_buffer[tail];

    tail++;
 80076e2:	1c53      	adds	r3, r2, #1
 80076e4:	b2db      	uxtb	r3, r3
    if (tail == RX_RING_BUFFER) { tail = 0; }
 80076e6:	2bfe      	cmp	r3, #254	; 0xfe
 80076e8:	bf08      	it	eq
 80076ea:	2300      	moveq	r3, #0
    uint8_t data = serial_rx_buffer[tail];
 80076ec:	4804      	ldr	r0, [pc, #16]	; (8007700 <serial_read+0x2c>)
    serial_rx_buffer_tail = tail;
 80076ee:	700b      	strb	r3, [r1, #0]
    uint8_t data = serial_rx_buffer[tail];
 80076f0:	5c80      	ldrb	r0, [r0, r2]

    return data;
 80076f2:	4770      	bx	lr
    return SERIAL_NO_DATA;
 80076f4:	20ff      	movs	r0, #255	; 0xff
  }
}
 80076f6:	4770      	bx	lr
 80076f8:	20000daf 	.word	0x20000daf
 80076fc:	20000dae 	.word	0x20000dae
 8007700:	200015c4 	.word	0x200015c4

08007704 <serial3_read>:

// Fetches the first byte in the serial read buffer. Called by main program.
uint8_t serial3_read()
{
  uint8_t tail = serial3_rx_buffer_tail; // Temporary serial_rx_buffer_tail (to optimize for volatile)
 8007704:	4908      	ldr	r1, [pc, #32]	; (8007728 <serial3_read+0x24>)
  if (serial3_rx_buffer_head == tail) {
 8007706:	4b09      	ldr	r3, [pc, #36]	; (800772c <serial3_read+0x28>)
  uint8_t tail = serial3_rx_buffer_tail; // Temporary serial_rx_buffer_tail (to optimize for volatile)
 8007708:	780a      	ldrb	r2, [r1, #0]
  if (serial3_rx_buffer_head == tail) {
 800770a:	781b      	ldrb	r3, [r3, #0]
  uint8_t tail = serial3_rx_buffer_tail; // Temporary serial_rx_buffer_tail (to optimize for volatile)
 800770c:	b2d2      	uxtb	r2, r2
  if (serial3_rx_buffer_head == tail) {
 800770e:	4293      	cmp	r3, r2
 8007710:	d008      	beq.n	8007724 <serial3_read+0x20>
    return SERIAL_NO_DATA;
  } else {
    uint8_t data = serial3_rx_buffer[tail];

    tail++;
 8007712:	1c53      	adds	r3, r2, #1
 8007714:	b2db      	uxtb	r3, r3
    if (tail == RX_RING_BUFFER) { tail = 0; }
 8007716:	2bfe      	cmp	r3, #254	; 0xfe
 8007718:	bf08      	it	eq
 800771a:	2300      	moveq	r3, #0
    uint8_t data = serial3_rx_buffer[tail];
 800771c:	4804      	ldr	r0, [pc, #16]	; (8007730 <serial3_read+0x2c>)
    serial3_rx_buffer_tail = tail;
 800771e:	700b      	strb	r3, [r1, #0]
    uint8_t data = serial3_rx_buffer[tail];
 8007720:	5c80      	ldrb	r0, [r0, r2]

    return data;
 8007722:	4770      	bx	lr
    return SERIAL_NO_DATA;
 8007724:	20ff      	movs	r0, #255	; 0xff
  }
}
 8007726:	4770      	bx	lr
 8007728:	20000dad 	.word	0x20000dad
 800772c:	20000dac 	.word	0x20000dac
 8007730:	20001444 	.word	0x20001444

08007734 <OnUsbDataRx>:
	//lcd_write_char(*dataIn);
	uint8_t next_head;
    uint8_t data;

	// Write data to buffer unless it is full.
	while (length != 0)
 8007734:	2900      	cmp	r1, #0
 8007736:	d07b      	beq.n	8007830 <OnUsbDataRx+0xfc>
{
 8007738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800773c:	1e4d      	subs	r5, r1, #1
 800773e:	b2ed      	uxtb	r5, r5
 8007740:	3501      	adds	r5, #1
 8007742:	4604      	mov	r4, r0
            case CMD_COOLANT_MIST_OVR_TOGGLE: system_set_exec_accessory_override_flag(EXEC_COOLANT_MIST_OVR_TOGGLE); break;
          #endif
        }
        // Throw away any unfound extended-ASCII character by not passing it to the serial buffer.
      } else { // Write character to buffer
        next_head = serial_rx_buffer_head + 1;
 8007744:	4e61      	ldr	r6, [pc, #388]	; (80078cc <OnUsbDataRx+0x198>)
        if (next_head == RX_RING_BUFFER) { next_head = 0; }

        // Write data to buffer unless it is full.
        if (next_head != serial_rx_buffer_tail) {
 8007746:	4f62      	ldr	r7, [pc, #392]	; (80078d0 <OnUsbDataRx+0x19c>)
          serial_rx_buffer[serial_rx_buffer_head] = data;
 8007748:	f8df 818c 	ldr.w	r8, [pc, #396]	; 80078d8 <OnUsbDataRx+0x1a4>
 800774c:	4405      	add	r5, r0
 800774e:	e008      	b.n	8007762 <OnUsbDataRx+0x2e>
  switch (data) {
 8007750:	2b3f      	cmp	r3, #63	; 0x3f
 8007752:	d026      	beq.n	80077a2 <OnUsbDataRx+0x6e>
 8007754:	2b7e      	cmp	r3, #126	; 0x7e
 8007756:	d115      	bne.n	8007784 <OnUsbDataRx+0x50>
    case CMD_CYCLE_START:   system_set_exec_state_flag(EXEC_CYCLE_START); break; // Set as true
 8007758:	2002      	movs	r0, #2
 800775a:	f002 fb01 	bl	8009d60 <system_set_exec_state_flag>
	while (length != 0)
 800775e:	42ac      	cmp	r4, r5
 8007760:	d00a      	beq.n	8007778 <OnUsbDataRx+0x44>
        data = *dataIn ++;
 8007762:	f814 3b01 	ldrb.w	r3, [r4], #1
  switch (data) {
 8007766:	2b21      	cmp	r3, #33	; 0x21
 8007768:	d008      	beq.n	800777c <OnUsbDataRx+0x48>
 800776a:	d8f1      	bhi.n	8007750 <OnUsbDataRx+0x1c>
 800776c:	2b18      	cmp	r3, #24
 800776e:	d109      	bne.n	8007784 <OnUsbDataRx+0x50>
    case CMD_RESET:         mc_reset(); break; // Call motion control reset routine.
 8007770:	f7fc fc54 	bl	800401c <mc_reset>
	while (length != 0)
 8007774:	42ac      	cmp	r4, r5
 8007776:	d1f4      	bne.n	8007762 <OnUsbDataRx+0x2e>
#else
    length--;
#endif
   }
#endif
}
 8007778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    case CMD_FEED_HOLD:     system_set_exec_state_flag(EXEC_FEED_HOLD); break; // Set as true
 800777c:	2008      	movs	r0, #8
 800777e:	f002 faef 	bl	8009d60 <system_set_exec_state_flag>
 8007782:	e7ec      	b.n	800775e <OnUsbDataRx+0x2a>
      if (data > 0x7F) { // Real-time control characters are extended ACSII only.
 8007784:	061a      	lsls	r2, r3, #24
 8007786:	d410      	bmi.n	80077aa <OnUsbDataRx+0x76>
        next_head = serial_rx_buffer_head + 1;
 8007788:	7831      	ldrb	r1, [r6, #0]
        if (next_head != serial_rx_buffer_tail) {
 800778a:	7838      	ldrb	r0, [r7, #0]
        next_head = serial_rx_buffer_head + 1;
 800778c:	1c4a      	adds	r2, r1, #1
 800778e:	b2d2      	uxtb	r2, r2
        if (next_head == RX_RING_BUFFER) { next_head = 0; }
 8007790:	2afe      	cmp	r2, #254	; 0xfe
 8007792:	bf08      	it	eq
 8007794:	2200      	moveq	r2, #0
        if (next_head != serial_rx_buffer_tail) {
 8007796:	4290      	cmp	r0, r2
          serial_rx_buffer[serial_rx_buffer_head] = data;
 8007798:	bf1c      	itt	ne
 800779a:	f808 3001 	strbne.w	r3, [r8, r1]
          serial_rx_buffer_head = next_head;
 800779e:	7032      	strbne	r2, [r6, #0]
 80077a0:	e7dd      	b.n	800775e <OnUsbDataRx+0x2a>
    case CMD_STATUS_REPORT: system_set_exec_state_flag(EXEC_STATUS_REPORT); break; // Set as true
 80077a2:	2001      	movs	r0, #1
 80077a4:	f002 fadc 	bl	8009d60 <system_set_exec_state_flag>
 80077a8:	e7d9      	b.n	800775e <OnUsbDataRx+0x2a>
        switch(data) {
 80077aa:	3b84      	subs	r3, #132	; 0x84
 80077ac:	2b1d      	cmp	r3, #29
 80077ae:	d8d6      	bhi.n	800775e <OnUsbDataRx+0x2a>
 80077b0:	a201      	add	r2, pc, #4	; (adr r2, 80077b8 <OnUsbDataRx+0x84>)
 80077b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077b6:	bf00      	nop
 80077b8:	0800783b 	.word	0x0800783b
 80077bc:	08007843 	.word	0x08007843
 80077c0:	0800775f 	.word	0x0800775f
 80077c4:	0800775f 	.word	0x0800775f
 80077c8:	0800775f 	.word	0x0800775f
 80077cc:	0800775f 	.word	0x0800775f
 80077d0:	0800775f 	.word	0x0800775f
 80077d4:	0800775f 	.word	0x0800775f
 80077d8:	0800775f 	.word	0x0800775f
 80077dc:	0800775f 	.word	0x0800775f
 80077e0:	0800775f 	.word	0x0800775f
 80077e4:	0800775f 	.word	0x0800775f
 80077e8:	08007853 	.word	0x08007853
 80077ec:	0800785b 	.word	0x0800785b
 80077f0:	08007863 	.word	0x08007863
 80077f4:	0800786b 	.word	0x0800786b
 80077f8:	08007873 	.word	0x08007873
 80077fc:	0800787b 	.word	0x0800787b
 8007800:	08007883 	.word	0x08007883
 8007804:	0800788b 	.word	0x0800788b
 8007808:	0800775f 	.word	0x0800775f
 800780c:	08007893 	.word	0x08007893
 8007810:	0800789b 	.word	0x0800789b
 8007814:	080078a3 	.word	0x080078a3
 8007818:	080078ab 	.word	0x080078ab
 800781c:	080078b3 	.word	0x080078b3
 8007820:	080078bb 	.word	0x080078bb
 8007824:	0800775f 	.word	0x0800775f
 8007828:	080078c3 	.word	0x080078c3
 800782c:	08007833 	.word	0x08007833
 8007830:	4770      	bx	lr
            case CMD_COOLANT_MIST_OVR_TOGGLE: system_set_exec_accessory_override_flag(EXEC_COOLANT_MIST_OVR_TOGGLE); break;
 8007832:	2080      	movs	r0, #128	; 0x80
 8007834:	f002 fac2 	bl	8009dbc <system_set_exec_accessory_override_flag>
 8007838:	e791      	b.n	800775e <OnUsbDataRx+0x2a>
          case CMD_SAFETY_DOOR:   system_set_exec_state_flag(EXEC_SAFETY_DOOR); break; // Set as true
 800783a:	2020      	movs	r0, #32
 800783c:	f002 fa90 	bl	8009d60 <system_set_exec_state_flag>
 8007840:	e78d      	b.n	800775e <OnUsbDataRx+0x2a>
            if (sys.state & STATE_JOG) { // Block all other states from invoking motion cancel.
 8007842:	4b24      	ldr	r3, [pc, #144]	; (80078d4 <OnUsbDataRx+0x1a0>)
 8007844:	781b      	ldrb	r3, [r3, #0]
 8007846:	069b      	lsls	r3, r3, #26
 8007848:	d589      	bpl.n	800775e <OnUsbDataRx+0x2a>
              system_set_exec_state_flag(EXEC_MOTION_CANCEL); 
 800784a:	2040      	movs	r0, #64	; 0x40
 800784c:	f002 fa88 	bl	8009d60 <system_set_exec_state_flag>
 8007850:	e785      	b.n	800775e <OnUsbDataRx+0x2a>
          case CMD_FEED_OVR_RESET: system_set_exec_motion_override_flag(EXEC_FEED_OVR_RESET); break;
 8007852:	2001      	movs	r0, #1
 8007854:	f002 faa8 	bl	8009da8 <system_set_exec_motion_override_flag>
 8007858:	e781      	b.n	800775e <OnUsbDataRx+0x2a>
          case CMD_FEED_OVR_COARSE_PLUS: system_set_exec_motion_override_flag(EXEC_FEED_OVR_COARSE_PLUS); break;
 800785a:	2002      	movs	r0, #2
 800785c:	f002 faa4 	bl	8009da8 <system_set_exec_motion_override_flag>
 8007860:	e77d      	b.n	800775e <OnUsbDataRx+0x2a>
          case CMD_FEED_OVR_COARSE_MINUS: system_set_exec_motion_override_flag(EXEC_FEED_OVR_COARSE_MINUS); break;
 8007862:	2004      	movs	r0, #4
 8007864:	f002 faa0 	bl	8009da8 <system_set_exec_motion_override_flag>
 8007868:	e779      	b.n	800775e <OnUsbDataRx+0x2a>
          case CMD_FEED_OVR_FINE_PLUS: system_set_exec_motion_override_flag(EXEC_FEED_OVR_FINE_PLUS); break;
 800786a:	2008      	movs	r0, #8
 800786c:	f002 fa9c 	bl	8009da8 <system_set_exec_motion_override_flag>
 8007870:	e775      	b.n	800775e <OnUsbDataRx+0x2a>
          case CMD_FEED_OVR_FINE_MINUS: system_set_exec_motion_override_flag(EXEC_FEED_OVR_FINE_MINUS); break;
 8007872:	2010      	movs	r0, #16
 8007874:	f002 fa98 	bl	8009da8 <system_set_exec_motion_override_flag>
 8007878:	e771      	b.n	800775e <OnUsbDataRx+0x2a>
          case CMD_RAPID_OVR_RESET: system_set_exec_motion_override_flag(EXEC_RAPID_OVR_RESET); break;
 800787a:	2020      	movs	r0, #32
 800787c:	f002 fa94 	bl	8009da8 <system_set_exec_motion_override_flag>
 8007880:	e76d      	b.n	800775e <OnUsbDataRx+0x2a>
          case CMD_RAPID_OVR_MEDIUM: system_set_exec_motion_override_flag(EXEC_RAPID_OVR_MEDIUM); break;
 8007882:	2040      	movs	r0, #64	; 0x40
 8007884:	f002 fa90 	bl	8009da8 <system_set_exec_motion_override_flag>
 8007888:	e769      	b.n	800775e <OnUsbDataRx+0x2a>
          case CMD_RAPID_OVR_LOW: system_set_exec_motion_override_flag(EXEC_RAPID_OVR_LOW); break;
 800788a:	2080      	movs	r0, #128	; 0x80
 800788c:	f002 fa8c 	bl	8009da8 <system_set_exec_motion_override_flag>
 8007890:	e765      	b.n	800775e <OnUsbDataRx+0x2a>
          case CMD_SPINDLE_OVR_RESET: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_RESET); break;
 8007892:	2001      	movs	r0, #1
 8007894:	f002 fa92 	bl	8009dbc <system_set_exec_accessory_override_flag>
 8007898:	e761      	b.n	800775e <OnUsbDataRx+0x2a>
          case CMD_SPINDLE_OVR_COARSE_PLUS: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_COARSE_PLUS); break;
 800789a:	2002      	movs	r0, #2
 800789c:	f002 fa8e 	bl	8009dbc <system_set_exec_accessory_override_flag>
 80078a0:	e75d      	b.n	800775e <OnUsbDataRx+0x2a>
          case CMD_SPINDLE_OVR_COARSE_MINUS: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_COARSE_MINUS); break;
 80078a2:	2004      	movs	r0, #4
 80078a4:	f002 fa8a 	bl	8009dbc <system_set_exec_accessory_override_flag>
 80078a8:	e759      	b.n	800775e <OnUsbDataRx+0x2a>
          case CMD_SPINDLE_OVR_FINE_PLUS: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_FINE_PLUS); break;
 80078aa:	2008      	movs	r0, #8
 80078ac:	f002 fa86 	bl	8009dbc <system_set_exec_accessory_override_flag>
 80078b0:	e755      	b.n	800775e <OnUsbDataRx+0x2a>
          case CMD_SPINDLE_OVR_FINE_MINUS: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_FINE_MINUS); break;
 80078b2:	2010      	movs	r0, #16
 80078b4:	f002 fa82 	bl	8009dbc <system_set_exec_accessory_override_flag>
 80078b8:	e751      	b.n	800775e <OnUsbDataRx+0x2a>
          case CMD_SPINDLE_OVR_STOP: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_STOP); break;
 80078ba:	2020      	movs	r0, #32
 80078bc:	f002 fa7e 	bl	8009dbc <system_set_exec_accessory_override_flag>
 80078c0:	e74d      	b.n	800775e <OnUsbDataRx+0x2a>
          case CMD_COOLANT_FLOOD_OVR_TOGGLE: system_set_exec_accessory_override_flag(EXEC_COOLANT_FLOOD_OVR_TOGGLE); break;
 80078c2:	2040      	movs	r0, #64	; 0x40
 80078c4:	f002 fa7a 	bl	8009dbc <system_set_exec_accessory_override_flag>
 80078c8:	e749      	b.n	800775e <OnUsbDataRx+0x2a>
 80078ca:	bf00      	nop
 80078cc:	20000dae 	.word	0x20000dae
 80078d0:	20000daf 	.word	0x20000daf
 80078d4:	20001408 	.word	0x20001408
 80078d8:	200015c4 	.word	0x200015c4

080078dc <USART3_IRQHandler>:
/*----------------------------------------------------------------------------
  USART3_IRQHandler
  Handles USART3 global interrupt request.
 *----------------------------------------------------------------------------*/
void USART3_IRQHandler (void)
{
 80078dc:	b410      	push	{r4}
    volatile unsigned int IIR;
    uint8_t data;
    uint8_t next_head;

    IIR = USART3->SR;
 80078de:	4a11      	ldr	r2, [pc, #68]	; (8007924 <USART3_IRQHandler+0x48>)
{
 80078e0:	b083      	sub	sp, #12
    IIR = USART3->SR;
 80078e2:	8813      	ldrh	r3, [r2, #0]
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	9301      	str	r3, [sp, #4]
    if (IIR & USART_FLAG_RXNE)
 80078e8:	9b01      	ldr	r3, [sp, #4]
 80078ea:	069b      	lsls	r3, r3, #26
 80078ec:	d516      	bpl.n	800791c <USART3_IRQHandler+0x40>
    {                  // read interrupt
        data = USART3->DR & 0x1FF;

        next_head = serial3_rx_buffer_head + 1;
 80078ee:	480e      	ldr	r0, [pc, #56]	; (8007928 <USART3_IRQHandler+0x4c>)
        if (next_head == RX_RING_BUFFER) { next_head = 0; }

        // Write data to buffer unless it is full.
        if (next_head != serial3_rx_buffer_tail)
 80078f0:	4c0e      	ldr	r4, [pc, #56]	; (800792c <USART3_IRQHandler+0x50>)
        next_head = serial3_rx_buffer_head + 1;
 80078f2:	7801      	ldrb	r1, [r0, #0]
        data = USART3->DR & 0x1FF;
 80078f4:	8892      	ldrh	r2, [r2, #4]
        next_head = serial3_rx_buffer_head + 1;
 80078f6:	1c4b      	adds	r3, r1, #1
 80078f8:	b2db      	uxtb	r3, r3
        if (next_head == RX_RING_BUFFER) { next_head = 0; }
 80078fa:	2bfe      	cmp	r3, #254	; 0xfe
 80078fc:	bf08      	it	eq
 80078fe:	2300      	moveq	r3, #0
        if (next_head != serial3_rx_buffer_tail)
 8007900:	7824      	ldrb	r4, [r4, #0]
        data = USART3->DR & 0x1FF;
 8007902:	b292      	uxth	r2, r2
        if (next_head != serial3_rx_buffer_tail)
 8007904:	429c      	cmp	r4, r3
 8007906:	d002      	beq.n	800790e <USART3_IRQHandler+0x32>
        {
          serial3_rx_buffer[serial3_rx_buffer_head] = data;
 8007908:	4c09      	ldr	r4, [pc, #36]	; (8007930 <USART3_IRQHandler+0x54>)
          serial3_rx_buffer_head = next_head;
 800790a:	7003      	strb	r3, [r0, #0]
        data = USART3->DR & 0x1FF;
 800790c:	5462      	strb	r2, [r4, r1]
        }
        USART3->SR &= ~USART_FLAG_RXNE;	          // clear interrupt
 800790e:	4a05      	ldr	r2, [pc, #20]	; (8007924 <USART3_IRQHandler+0x48>)
 8007910:	8813      	ldrh	r3, [r2, #0]
 8007912:	f023 0320 	bic.w	r3, r3, #32
 8007916:	041b      	lsls	r3, r3, #16
 8007918:	0c1b      	lsrs	r3, r3, #16
 800791a:	8013      	strh	r3, [r2, #0]
   }

}
 800791c:	b003      	add	sp, #12
 800791e:	bc10      	pop	{r4}
 8007920:	4770      	bx	lr
 8007922:	bf00      	nop
 8007924:	40004800 	.word	0x40004800
 8007928:	20000dac 	.word	0x20000dac
 800792c:	20000dad 	.word	0x20000dad
 8007930:	20001444 	.word	0x20001444

08007934 <serial_reset_read_buffer>:



void serial_reset_read_buffer()
{
  serial_rx_buffer_tail = serial_rx_buffer_head;
 8007934:	4a02      	ldr	r2, [pc, #8]	; (8007940 <serial_reset_read_buffer+0xc>)
 8007936:	4b03      	ldr	r3, [pc, #12]	; (8007944 <serial_reset_read_buffer+0x10>)
 8007938:	7812      	ldrb	r2, [r2, #0]
 800793a:	701a      	strb	r2, [r3, #0]
}
 800793c:	4770      	bx	lr
 800793e:	bf00      	nop
 8007940:	20000dae 	.word	0x20000dae
 8007944:	20000daf 	.word	0x20000daf

08007948 <serial3_reset_read_buffer>:

void serial3_reset_read_buffer()
{
  serial3_rx_buffer_tail = serial3_rx_buffer_head;
 8007948:	4a02      	ldr	r2, [pc, #8]	; (8007954 <serial3_reset_read_buffer+0xc>)
 800794a:	4b03      	ldr	r3, [pc, #12]	; (8007958 <serial3_reset_read_buffer+0x10>)
 800794c:	7812      	ldrb	r2, [r2, #0]
 800794e:	701a      	strb	r2, [r3, #0]
}
 8007950:	4770      	bx	lr
 8007952:	bf00      	nop
 8007954:	20000dac 	.word	0x20000dac
 8007958:	20000dad 	.word	0x20000dad

0800795c <settings_store_startup_line>:
settings_t settings;


// Method to store startup lines into EEPROM
void settings_store_startup_line(uint8_t n, char *line)
{
 800795c:	b538      	push	{r3, r4, r5, lr}
 800795e:	4604      	mov	r4, r0
 8007960:	460d      	mov	r5, r1
  #ifdef FORCE_BUFFER_SYNC_DURING_EEPROM_WRITE
    protocol_buffer_synchronize(); // A startup line may contain a motion and be executing. 
  #endif
  uint32_t addr = n*(LINE_BUFFER_SIZE+1)+EEPROM_ADDR_STARTUP_BLOCK;
 8007962:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
 8007966:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
    protocol_buffer_synchronize(); // A startup line may contain a motion and be executing. 
 800796a:	f7fe fc0d 	bl	8006188 <protocol_buffer_synchronize>
  memcpy_to_eeprom_with_checksum(addr,(char*)line, LINE_BUFFER_SIZE);
 800796e:	f504 7040 	add.w	r0, r4, #768	; 0x300
 8007972:	4629      	mov	r1, r5
}
 8007974:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memcpy_to_eeprom_with_checksum(addr,(char*)line, LINE_BUFFER_SIZE);
 8007978:	2250      	movs	r2, #80	; 0x50
 800797a:	f7fa b997 	b.w	8001cac <memcpy_to_eeprom_with_checksum>
 800797e:	bf00      	nop

08007980 <settings_store_build_info>:
// Method to store build info into EEPROM
// NOTE: This function can only be called in IDLE state.
void settings_store_build_info(char *line)
{
  // Build info can only be stored when state is IDLE.
  memcpy_to_eeprom_with_checksum(EEPROM_ADDR_BUILD_INFO,(char*)line, LINE_BUFFER_SIZE);
 8007980:	4601      	mov	r1, r0
 8007982:	2250      	movs	r2, #80	; 0x50
 8007984:	f44f 7070 	mov.w	r0, #960	; 0x3c0
 8007988:	f7fa b990 	b.w	8001cac <memcpy_to_eeprom_with_checksum>

0800798c <settings_write_coord_data>:
}


// Method to store coord data parameters into EEPROM
void settings_write_coord_data(uint8_t coord_select, float *coord_data)
{
 800798c:	b538      	push	{r3, r4, r5, lr}
 800798e:	4604      	mov	r4, r0
 8007990:	460d      	mov	r5, r1
  #ifdef FORCE_BUFFER_SYNC_DURING_EEPROM_WRITE
    protocol_buffer_synchronize();
  #endif
  uint32_t addr = coord_select*(sizeof(float)*N_AXIS+1) + EEPROM_ADDR_PARAMETERS;
 8007992:	eb04 1404 	add.w	r4, r4, r4, lsl #4
    protocol_buffer_synchronize();
 8007996:	f7fe fbf7 	bl	8006188 <protocol_buffer_synchronize>
  memcpy_to_eeprom_with_checksum(addr,(char*)coord_data, sizeof(float)*N_AXIS);
 800799a:	f504 7000 	add.w	r0, r4, #512	; 0x200
 800799e:	4629      	mov	r1, r5
}
 80079a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memcpy_to_eeprom_with_checksum(addr,(char*)coord_data, sizeof(float)*N_AXIS);
 80079a4:	2210      	movs	r2, #16
 80079a6:	f7fa b981 	b.w	8001cac <memcpy_to_eeprom_with_checksum>
 80079aa:	bf00      	nop

080079ac <settings_restore>:
  memcpy_to_eeprom_with_checksum(EEPROM_ADDR_GLOBAL, (char*)&settings, sizeof(settings_t));
}


// Method to restore EEPROM-saved Grbl global settings back to defaults.
void settings_restore(uint8_t restore_flag) {
 80079ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079ae:	4605      	mov	r5, r0
  if (restore_flag & SETTINGS_RESTORE_DEFAULTS) {
 80079b0:	07c0      	lsls	r0, r0, #31
void settings_restore(uint8_t restore_flag) {
 80079b2:	b085      	sub	sp, #20
  if (restore_flag & SETTINGS_RESTORE_DEFAULTS) {
 80079b4:	d439      	bmi.n	8007a2a <settings_restore+0x7e>
	#endif
// ---
    write_global_settings();
  }

  if (restore_flag & SETTINGS_RESTORE_PARAMETERS) {
 80079b6:	07a9      	lsls	r1, r5, #30
 80079b8:	d424      	bmi.n	8007a04 <settings_restore+0x58>
    float coord_data[N_AXIS];
    memset(&coord_data, 0, sizeof(coord_data));
    for (idx=0; idx <= SETTING_INDEX_NCOORD; idx++) { settings_write_coord_data(idx, coord_data); }
  }

  if (restore_flag & SETTINGS_RESTORE_STARTUP_LINES) {
 80079ba:	076a      	lsls	r2, r5, #29
 80079bc:	d40d      	bmi.n	80079da <settings_restore+0x2e>
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK+(LINE_BUFFER_SIZE+1), 0);
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK+(LINE_BUFFER_SIZE+2), 0); // Checksum
    #endif
  }

  if (restore_flag & SETTINGS_RESTORE_BUILD_INFO) {
 80079be:	072b      	lsls	r3, r5, #28
 80079c0:	d509      	bpl.n	80079d6 <settings_restore+0x2a>
    eeprom_put_char(EEPROM_ADDR_BUILD_INFO , 0);
 80079c2:	2100      	movs	r1, #0
 80079c4:	f44f 7070 	mov.w	r0, #960	; 0x3c0
 80079c8:	f7fa f96a 	bl	8001ca0 <eeprom_put_char>
    eeprom_put_char(EEPROM_ADDR_BUILD_INFO+1 , 0); // Checksum
 80079cc:	2100      	movs	r1, #0
 80079ce:	f240 30c1 	movw	r0, #961	; 0x3c1
 80079d2:	f7fa f965 	bl	8001ca0 <eeprom_put_char>
  }
}
 80079d6:	b005      	add	sp, #20
 80079d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK, 0);
 80079da:	2100      	movs	r1, #0
 80079dc:	f44f 7040 	mov.w	r0, #768	; 0x300
 80079e0:	f7fa f95e 	bl	8001ca0 <eeprom_put_char>
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK+1, 0); // Checksum
 80079e4:	2100      	movs	r1, #0
 80079e6:	f240 3001 	movw	r0, #769	; 0x301
 80079ea:	f7fa f959 	bl	8001ca0 <eeprom_put_char>
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK+(LINE_BUFFER_SIZE+1), 0);
 80079ee:	2100      	movs	r1, #0
 80079f0:	f240 3051 	movw	r0, #849	; 0x351
 80079f4:	f7fa f954 	bl	8001ca0 <eeprom_put_char>
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK+(LINE_BUFFER_SIZE+2), 0); // Checksum
 80079f8:	2100      	movs	r1, #0
 80079fa:	f240 3052 	movw	r0, #850	; 0x352
 80079fe:	f7fa f94f 	bl	8001ca0 <eeprom_put_char>
 8007a02:	e7dc      	b.n	80079be <settings_restore+0x12>
    memset(&coord_data, 0, sizeof(coord_data));
 8007a04:	2300      	movs	r3, #0
 8007a06:	f44f 7400 	mov.w	r4, #512	; 0x200
 8007a0a:	e9cd 3300 	strd	r3, r3, [sp]
 8007a0e:	e9cd 3302 	strd	r3, r3, [sp, #8]
    protocol_buffer_synchronize();
 8007a12:	f7fe fbb9 	bl	8006188 <protocol_buffer_synchronize>
  memcpy_to_eeprom_with_checksum(addr,(char*)coord_data, sizeof(float)*N_AXIS);
 8007a16:	4620      	mov	r0, r4
 8007a18:	2210      	movs	r2, #16
 8007a1a:	4669      	mov	r1, sp
 8007a1c:	3411      	adds	r4, #17
 8007a1e:	f7fa f945 	bl	8001cac <memcpy_to_eeprom_with_checksum>
    for (idx=0; idx <= SETTING_INDEX_NCOORD; idx++) { settings_write_coord_data(idx, coord_data); }
 8007a22:	f5b4 7f22 	cmp.w	r4, #648	; 0x288
 8007a26:	d1f4      	bne.n	8007a12 <settings_restore+0x66>
 8007a28:	e7c7      	b.n	80079ba <settings_restore+0xe>
    settings.stepper_idle_lock_time = DEFAULT_STEPPER_IDLE_LOCK_TIME;
 8007a2a:	2300      	movs	r3, #0
    settings.homing_dir_mask = DEFAULT_HOMING_DIR_MASK;
 8007a2c:	211f      	movs	r1, #31
    settings.pulse_microseconds = DEFAULT_STEP_PULSE_MICROSECONDS;
 8007a2e:	4c21      	ldr	r4, [pc, #132]	; (8007ab4 <settings_restore+0x108>)
  eeprom_put_char(0, SETTINGS_VERSION);
 8007a30:	4618      	mov	r0, r3
    settings.stepper_idle_lock_time = DEFAULT_STEPPER_IDLE_LOCK_TIME;
 8007a32:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
    settings.status_report_mask = DEFAULT_STATUS_REPORT_MASK;
 8007a36:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
    settings.junction_deviation = DEFAULT_JUNCTION_DEVIATION;
 8007a3a:	4b1f      	ldr	r3, [pc, #124]	; (8007ab8 <settings_restore+0x10c>)
    settings.homing_dir_mask = DEFAULT_HOMING_DIR_MASK;
 8007a3c:	f8a4 105a 	strh.w	r1, [r4, #90]	; 0x5a
    settings.arc_tolerance = DEFAULT_ARC_TOLERANCE;
 8007a40:	491e      	ldr	r1, [pc, #120]	; (8007abc <settings_restore+0x110>)
    settings.junction_deviation = DEFAULT_JUNCTION_DEVIATION;
 8007a42:	64a3      	str	r3, [r4, #72]	; 0x48
    settings.rpm_max = DEFAULT_SPINDLE_RPM_MAX;
 8007a44:	4b1e      	ldr	r3, [pc, #120]	; (8007ac0 <settings_restore+0x114>)
    settings.arc_tolerance = DEFAULT_ARC_TOLERANCE;
 8007a46:	64e1      	str	r1, [r4, #76]	; 0x4c
    settings.rpm_min = DEFAULT_SPINDLE_RPM_MIN;
 8007a48:	2100      	movs	r1, #0
    settings.rpm_max = DEFAULT_SPINDLE_RPM_MAX;
 8007a4a:	6523      	str	r3, [r4, #80]	; 0x50
    settings.homing_feed_rate = DEFAULT_HOMING_FEED_RATE;
 8007a4c:	4b1d      	ldr	r3, [pc, #116]	; (8007ac4 <settings_restore+0x118>)
    settings.homing_debounce_delay = DEFAULT_HOMING_DEBOUNCE_DELAY;
 8007a4e:	26fa      	movs	r6, #250	; 0xfa
    settings.homing_feed_rate = DEFAULT_HOMING_FEED_RATE;
 8007a50:	65e3      	str	r3, [r4, #92]	; 0x5c
    if (DEFAULT_INVERT_LIMIT_PINS) { settings.flags |= BITFLAG_INVERT_LIMIT_PINS; }
 8007a52:	2244      	movs	r2, #68	; 0x44
    settings.homing_pulloff = DEFAULT_HOMING_PULLOFF;
 8007a54:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
    settings.step_invert_mask = DEFAULT_STEPPING_INVERT_MASK;
 8007a58:	f44f 17f8 	mov.w	r7, #2031616	; 0x1f0000
    settings.pulse_microseconds = DEFAULT_STEP_PULSE_MICROSECONDS;
 8007a5c:	f04f 0c06 	mov.w	ip, #6
    settings.rpm_min = DEFAULT_SPINDLE_RPM_MIN;
 8007a60:	6561      	str	r1, [r4, #84]	; 0x54
    settings.homing_seek_rate = DEFAULT_HOMING_SEEK_RATE;
 8007a62:	4919      	ldr	r1, [pc, #100]	; (8007ac8 <settings_restore+0x11c>)
    settings.homing_debounce_delay = DEFAULT_HOMING_DEBOUNCE_DELAY;
 8007a64:	f8a4 6064 	strh.w	r6, [r4, #100]	; 0x64
    settings.homing_seek_rate = DEFAULT_HOMING_SEEK_RATE;
 8007a68:	6621      	str	r1, [r4, #96]	; 0x60
    settings.max_rate[X_AXIS] = DEFAULT_X_MAX_RATE;
 8007a6a:	4918      	ldr	r1, [pc, #96]	; (8007acc <settings_restore+0x120>)
    settings.steps_per_mm[X_AXIS] = DEFAULT_X_STEPS_PER_MM;
 8007a6c:	4e18      	ldr	r6, [pc, #96]	; (8007ad0 <settings_restore+0x124>)
    settings.homing_pulloff = DEFAULT_HOMING_PULLOFF;
 8007a6e:	66a3      	str	r3, [r4, #104]	; 0x68
    if (DEFAULT_INVERT_LIMIT_PINS) { settings.flags |= BITFLAG_INVERT_LIMIT_PINS; }
 8007a70:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
    settings.max_travel[X_AXIS] = (-DEFAULT_X_MAX_TRAVEL);
 8007a74:	4b17      	ldr	r3, [pc, #92]	; (8007ad4 <settings_restore+0x128>)
    settings.acceleration[X_AXIS] = DEFAULT_X_ACCELERATION;
 8007a76:	4a18      	ldr	r2, [pc, #96]	; (8007ad8 <settings_restore+0x12c>)
    settings.max_rate[X_AXIS] = DEFAULT_X_MAX_RATE;
 8007a78:	6121      	str	r1, [r4, #16]
    settings.max_rate[Y_AXIS] = DEFAULT_Y_MAX_RATE;
 8007a7a:	6161      	str	r1, [r4, #20]
    settings.max_rate[Z_AXIS] = DEFAULT_Z_MAX_RATE;
 8007a7c:	61a1      	str	r1, [r4, #24]
    settings.max_rate[A_AXIS] = DEFAULT_A_MAX_RATE;
 8007a7e:	61e1      	str	r1, [r4, #28]
    settings.step_invert_mask = DEFAULT_STEPPING_INVERT_MASK;
 8007a80:	f8c4 7042 	str.w	r7, [r4, #66]	; 0x42
  eeprom_put_char(0, SETTINGS_VERSION);
 8007a84:	210a      	movs	r1, #10
    settings.acceleration[X_AXIS] = DEFAULT_X_ACCELERATION;
 8007a86:	6222      	str	r2, [r4, #32]
    settings.acceleration[Y_AXIS] = DEFAULT_Y_ACCELERATION;
 8007a88:	6262      	str	r2, [r4, #36]	; 0x24
    settings.acceleration[Z_AXIS] = DEFAULT_Z_ACCELERATION;
 8007a8a:	62a2      	str	r2, [r4, #40]	; 0x28
    settings.acceleration[A_AXIS] = DEFAULT_A_ACCELERATION;
 8007a8c:	62e2      	str	r2, [r4, #44]	; 0x2c
    settings.pulse_microseconds = DEFAULT_STEP_PULSE_MICROSECONDS;
 8007a8e:	f884 c040 	strb.w	ip, [r4, #64]	; 0x40
    settings.steps_per_mm[X_AXIS] = DEFAULT_X_STEPS_PER_MM;
 8007a92:	6026      	str	r6, [r4, #0]
    settings.steps_per_mm[Y_AXIS] = DEFAULT_Y_STEPS_PER_MM;
 8007a94:	6066      	str	r6, [r4, #4]
    settings.steps_per_mm[Z_AXIS] = DEFAULT_Z_STEPS_PER_MM;
 8007a96:	60a6      	str	r6, [r4, #8]
    settings.steps_per_mm[A_AXIS] = DEFAULT_A_STEPS_PER_MM;
 8007a98:	60e6      	str	r6, [r4, #12]
    settings.max_travel[X_AXIS] = (-DEFAULT_X_MAX_TRAVEL);
 8007a9a:	6323      	str	r3, [r4, #48]	; 0x30
    settings.max_travel[Y_AXIS] = (-DEFAULT_Y_MAX_TRAVEL);
 8007a9c:	6363      	str	r3, [r4, #52]	; 0x34
    settings.max_travel[Z_AXIS] = (-DEFAULT_Z_MAX_TRAVEL);
 8007a9e:	63a3      	str	r3, [r4, #56]	; 0x38
    settings.max_travel[A_AXIS] = (-DEFAULT_A_MAX_TRAVEL);
 8007aa0:	63e3      	str	r3, [r4, #60]	; 0x3c
  eeprom_put_char(0, SETTINGS_VERSION);
 8007aa2:	f7fa f8fd 	bl	8001ca0 <eeprom_put_char>
  memcpy_to_eeprom_with_checksum(EEPROM_ADDR_GLOBAL, (char*)&settings, sizeof(settings_t));
 8007aa6:	4621      	mov	r1, r4
 8007aa8:	226c      	movs	r2, #108	; 0x6c
 8007aaa:	2001      	movs	r0, #1
 8007aac:	f7fa f8fe 	bl	8001cac <memcpy_to_eeprom_with_checksum>
 8007ab0:	e781      	b.n	80079b6 <settings_restore+0xa>
 8007ab2:	bf00      	nop
 8007ab4:	20001744 	.word	0x20001744
 8007ab8:	3c23d70a 	.word	0x3c23d70a
 8007abc:	3b03126f 	.word	0x3b03126f
 8007ac0:	447a0000 	.word	0x447a0000
 8007ac4:	41200000 	.word	0x41200000
 8007ac8:	42c80000 	.word	0x42c80000
 8007acc:	44fa0000 	.word	0x44fa0000
 8007ad0:	45a00000 	.word	0x45a00000
 8007ad4:	c38c0000 	.word	0xc38c0000
 8007ad8:	4bdbba00 	.word	0x4bdbba00

08007adc <settings_read_startup_line>:


// Reads startup line from EEPROM. Updated pointed line string data.
uint8_t settings_read_startup_line(uint8_t n, char *line)
{
 8007adc:	b570      	push	{r4, r5, r6, lr}
 8007ade:	460e      	mov	r6, r1
  uint32_t addr = n*(LINE_BUFFER_SIZE+1)+EEPROM_ADDR_STARTUP_BLOCK;
 8007ae0:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8007ae4:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8007ae8:	f500 7440 	add.w	r4, r0, #768	; 0x300
  if (!(memcpy_from_eeprom_with_checksum((char*)line, addr, LINE_BUFFER_SIZE))) {
 8007aec:	4621      	mov	r1, r4
 8007aee:	4630      	mov	r0, r6
 8007af0:	2250      	movs	r2, #80	; 0x50
 8007af2:	f7fa f929 	bl	8001d48 <memcpy_from_eeprom_with_checksum>
 8007af6:	b108      	cbz	r0, 8007afc <settings_read_startup_line+0x20>
    // Reset line with default value
    line[0] = 0; // Empty line
    settings_store_startup_line(n, line);
    return(false);
  }
  return(true);
 8007af8:	2001      	movs	r0, #1
}
 8007afa:	bd70      	pop	{r4, r5, r6, pc}
 8007afc:	4605      	mov	r5, r0
    line[0] = 0; // Empty line
 8007afe:	7030      	strb	r0, [r6, #0]
    protocol_buffer_synchronize(); // A startup line may contain a motion and be executing. 
 8007b00:	f7fe fb42 	bl	8006188 <protocol_buffer_synchronize>
  memcpy_to_eeprom_with_checksum(addr,(char*)line, LINE_BUFFER_SIZE);
 8007b04:	4620      	mov	r0, r4
 8007b06:	4631      	mov	r1, r6
 8007b08:	2250      	movs	r2, #80	; 0x50
 8007b0a:	f7fa f8cf 	bl	8001cac <memcpy_to_eeprom_with_checksum>
    return(false);
 8007b0e:	4628      	mov	r0, r5
}
 8007b10:	bd70      	pop	{r4, r5, r6, pc}
 8007b12:	bf00      	nop

08007b14 <settings_read_build_info>:


// Reads startup line from EEPROM. Updated pointed line string data.
uint8_t settings_read_build_info(char *line)
{
 8007b14:	b538      	push	{r3, r4, r5, lr}
  if (!(memcpy_from_eeprom_with_checksum((char*)line, EEPROM_ADDR_BUILD_INFO, LINE_BUFFER_SIZE))) {
 8007b16:	2250      	movs	r2, #80	; 0x50
 8007b18:	f44f 7170 	mov.w	r1, #960	; 0x3c0
{
 8007b1c:	4605      	mov	r5, r0
  if (!(memcpy_from_eeprom_with_checksum((char*)line, EEPROM_ADDR_BUILD_INFO, LINE_BUFFER_SIZE))) {
 8007b1e:	f7fa f913 	bl	8001d48 <memcpy_from_eeprom_with_checksum>
 8007b22:	b108      	cbz	r0, 8007b28 <settings_read_build_info+0x14>
    // Reset line with default value
    line[0] = 0; // Empty line
    settings_store_build_info(line);
    return(false);
  }
  return(true);
 8007b24:	2001      	movs	r0, #1
}
 8007b26:	bd38      	pop	{r3, r4, r5, pc}
 8007b28:	4604      	mov	r4, r0
    line[0] = 0; // Empty line
 8007b2a:	7028      	strb	r0, [r5, #0]
  memcpy_to_eeprom_with_checksum(EEPROM_ADDR_BUILD_INFO,(char*)line, LINE_BUFFER_SIZE);
 8007b2c:	4629      	mov	r1, r5
 8007b2e:	2250      	movs	r2, #80	; 0x50
 8007b30:	f44f 7070 	mov.w	r0, #960	; 0x3c0
 8007b34:	f7fa f8ba 	bl	8001cac <memcpy_to_eeprom_with_checksum>
    return(false);
 8007b38:	4620      	mov	r0, r4
}
 8007b3a:	bd38      	pop	{r3, r4, r5, pc}

08007b3c <settings_read_coord_data>:


// Read selected coordinate data from EEPROM. Updates pointed coord_data value.
uint8_t settings_read_coord_data(uint8_t coord_select, float *coord_data)
{
 8007b3c:	b570      	push	{r4, r5, r6, lr}
 8007b3e:	460e      	mov	r6, r1
  uint32_t addr = coord_select*(sizeof(float)*N_AXIS+1) + EEPROM_ADDR_PARAMETERS;
 8007b40:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8007b44:	f500 7400 	add.w	r4, r0, #512	; 0x200
  if (!(memcpy_from_eeprom_with_checksum((char*)coord_data, addr, sizeof(float)*N_AXIS))) {
 8007b48:	4621      	mov	r1, r4
 8007b4a:	4630      	mov	r0, r6
 8007b4c:	2210      	movs	r2, #16
 8007b4e:	f7fa f8fb 	bl	8001d48 <memcpy_from_eeprom_with_checksum>
 8007b52:	b108      	cbz	r0, 8007b58 <settings_read_coord_data+0x1c>
		#endif
// ---
		settings_write_coord_data(coord_select,coord_data);
    return(false);
  }
  return(true);
 8007b54:	2001      	movs	r0, #1
}
 8007b56:	bd70      	pop	{r4, r5, r6, pc}
		coord_data[X_AXIS] = 0.0f;
 8007b58:	2300      	movs	r3, #0
 8007b5a:	4605      	mov	r5, r0
 8007b5c:	6033      	str	r3, [r6, #0]
		coord_data[Y_AXIS] = 0.0f;
 8007b5e:	6073      	str	r3, [r6, #4]
		coord_data[Z_AXIS] = 0.0f;
 8007b60:	60b3      	str	r3, [r6, #8]
		coord_data[A_AXIS] = 0.0f;
 8007b62:	60f3      	str	r3, [r6, #12]
    protocol_buffer_synchronize();
 8007b64:	f7fe fb10 	bl	8006188 <protocol_buffer_synchronize>
  memcpy_to_eeprom_with_checksum(addr,(char*)coord_data, sizeof(float)*N_AXIS);
 8007b68:	4620      	mov	r0, r4
 8007b6a:	4631      	mov	r1, r6
 8007b6c:	2210      	movs	r2, #16
 8007b6e:	f7fa f89d 	bl	8001cac <memcpy_to_eeprom_with_checksum>
    return(false);
 8007b72:	4628      	mov	r0, r5
}
 8007b74:	bd70      	pop	{r4, r5, r6, pc}
 8007b76:	bf00      	nop

08007b78 <settings_store_global_setting>:
  return(true);
}


// A helper method to set settings from command line
uint8_t settings_store_global_setting(uint8_t parameter, float value) {
 8007b78:	b538      	push	{r3, r4, r5, lr}
 8007b7a:	460d      	mov	r5, r1
 8007b7c:	4604      	mov	r4, r0
  if (value < 0.0f) { return(STATUS_NEGATIVE_VALUE); }
 8007b7e:	2100      	movs	r1, #0
 8007b80:	4628      	mov	r0, r5
 8007b82:	f7f9 fa37 	bl	8000ff4 <__aeabi_fcmplt>
 8007b86:	2800      	cmp	r0, #0
 8007b88:	d16c      	bne.n	8007c64 <settings_store_global_setting+0xec>
  if (parameter >= AXIS_SETTINGS_START_VAL) {
 8007b8a:	2c63      	cmp	r4, #99	; 0x63
 8007b8c:	d91e      	bls.n	8007bcc <settings_store_global_setting+0x54>
    // Store axis configuration. Axis numbering sequence set by AXIS_SETTING defines.
    // NOTE: Ensure the setting index corresponds to the report.c settings printout.
    parameter -= AXIS_SETTINGS_START_VAL;
 8007b8e:	f1a4 0364 	sub.w	r3, r4, #100	; 0x64
 8007b92:	b2db      	uxtb	r3, r3
    uint8_t set_idx = 0;
    while (set_idx < AXIS_N_SETTINGS) {
      if (parameter < N_AXIS) {
 8007b94:	2b03      	cmp	r3, #3
 8007b96:	f240 8109 	bls.w	8007dac <settings_store_global_setting+0x234>
        }
        break; // Exit while-loop after setting has been configured and proceed to the EEPROM write call.
      } else {
        set_idx++;
        // If axis index greater than N_AXIS or setting index greater than number of axis settings, error out.
        if ((parameter < AXIS_SETTINGS_INCREMENT) || (set_idx == AXIS_N_SETTINGS)) { return(STATUS_INVALID_STATEMENT); }
 8007b9a:	2b09      	cmp	r3, #9
 8007b9c:	d914      	bls.n	8007bc8 <settings_store_global_setting+0x50>
        parameter -= AXIS_SETTINGS_INCREMENT;
 8007b9e:	f1a4 036e 	sub.w	r3, r4, #110	; 0x6e
 8007ba2:	b2db      	uxtb	r3, r3
      if (parameter < N_AXIS) {
 8007ba4:	2b03      	cmp	r3, #3
 8007ba6:	f240 8105 	bls.w	8007db4 <settings_store_global_setting+0x23c>
        if ((parameter < AXIS_SETTINGS_INCREMENT) || (set_idx == AXIS_N_SETTINGS)) { return(STATUS_INVALID_STATEMENT); }
 8007baa:	2b09      	cmp	r3, #9
 8007bac:	d90c      	bls.n	8007bc8 <settings_store_global_setting+0x50>
        parameter -= AXIS_SETTINGS_INCREMENT;
 8007bae:	f1a4 0378 	sub.w	r3, r4, #120	; 0x78
 8007bb2:	b2db      	uxtb	r3, r3
      if (parameter < N_AXIS) {
 8007bb4:	2b03      	cmp	r3, #3
 8007bb6:	f240 8102 	bls.w	8007dbe <settings_store_global_setting+0x246>
        if ((parameter < AXIS_SETTINGS_INCREMENT) || (set_idx == AXIS_N_SETTINGS)) { return(STATUS_INVALID_STATEMENT); }
 8007bba:	2b09      	cmp	r3, #9
 8007bbc:	d904      	bls.n	8007bc8 <settings_store_global_setting+0x50>
        parameter -= AXIS_SETTINGS_INCREMENT;
 8007bbe:	347e      	adds	r4, #126	; 0x7e
 8007bc0:	b2e4      	uxtb	r4, r4
      if (parameter < N_AXIS) {
 8007bc2:	2c03      	cmp	r4, #3
 8007bc4:	f240 8105 	bls.w	8007dd2 <settings_store_global_setting+0x25a>
        #else
				return(STATUS_SETTING_DISABLED_LASER);
        #endif
        break;
      default:
        return(STATUS_INVALID_STATEMENT);
 8007bc8:	2003      	movs	r0, #3
    }
  }
  write_global_settings();
  return(STATUS_OK);
}
 8007bca:	bd38      	pop	{r3, r4, r5, pc}
    uint8_t int_value = truncf(value);
 8007bcc:	4628      	mov	r0, r5
 8007bce:	f7f9 fa75 	bl	80010bc <__aeabi_f2uiz>
 8007bd2:	b2c0      	uxtb	r0, r0
    switch(parameter) {
 8007bd4:	2c20      	cmp	r4, #32
 8007bd6:	d8f7      	bhi.n	8007bc8 <settings_store_global_setting+0x50>
 8007bd8:	a301      	add	r3, pc, #4	; (adr r3, 8007be0 <settings_store_global_setting+0x68>)
 8007bda:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
 8007bde:	bf00      	nop
 8007be0:	08007c93 	.word	0x08007c93
 8007be4:	08007ca1 	.word	0x08007ca1
 8007be8:	08007ccb 	.word	0x08007ccb
 8007bec:	08007ca9 	.word	0x08007ca9
 8007bf0:	08007cb5 	.word	0x08007cb5
 8007bf4:	08007cd7 	.word	0x08007cd7
 8007bf8:	08007ced 	.word	0x08007ced
 8007bfc:	08007bc9 	.word	0x08007bc9
 8007c00:	08007bc9 	.word	0x08007bc9
 8007c04:	08007bc9 	.word	0x08007bc9
 8007c08:	08007d59 	.word	0x08007d59
 8007c0c:	08007d61 	.word	0x08007d61
 8007c10:	08007d1d 	.word	0x08007d1d
 8007c14:	08007d97 	.word	0x08007d97
 8007c18:	08007bc9 	.word	0x08007bc9
 8007c1c:	08007bc9 	.word	0x08007bc9
 8007c20:	08007bc9 	.word	0x08007bc9
 8007c24:	08007bc9 	.word	0x08007bc9
 8007c28:	08007bc9 	.word	0x08007bc9
 8007c2c:	08007bc9 	.word	0x08007bc9
 8007c30:	08007d67 	.word	0x08007d67
 8007c34:	08007d7f 	.word	0x08007d7f
 8007c38:	08007d07 	.word	0x08007d07
 8007c3c:	08007d51 	.word	0x08007d51
 8007c40:	08007d45 	.word	0x08007d45
 8007c44:	08007d4b 	.word	0x08007d4b
 8007c48:	08007d23 	.word	0x08007d23
 8007c4c:	08007d2b 	.word	0x08007d2b
 8007c50:	08007bc9 	.word	0x08007bc9
 8007c54:	08007bc9 	.word	0x08007bc9
 8007c58:	08007d31 	.word	0x08007d31
 8007c5c:	08007d3b 	.word	0x08007d3b
 8007c60:	08007c69 	.word	0x08007c69
  if (value < 0.0f) { return(STATUS_NEGATIVE_VALUE); }
 8007c64:	2004      	movs	r0, #4
}
 8007c66:	bd38      	pop	{r3, r4, r5, pc}
 8007c68:	4a70      	ldr	r2, [pc, #448]	; (8007e2c <settings_store_global_setting+0x2b4>)
 8007c6a:	f892 3058 	ldrb.w	r3, [r2, #88]	; 0x58
          if (int_value) { settings.flags |= BITFLAG_LASER_MODE; }
 8007c6e:	2800      	cmp	r0, #0
 8007c70:	f000 80b6 	beq.w	8007de0 <settings_store_global_setting+0x268>
 8007c74:	f043 0302 	orr.w	r3, r3, #2
 8007c78:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
  eeprom_put_char(0, SETTINGS_VERSION);
 8007c7c:	210a      	movs	r1, #10
 8007c7e:	2000      	movs	r0, #0
 8007c80:	f7fa f80e 	bl	8001ca0 <eeprom_put_char>
  memcpy_to_eeprom_with_checksum(EEPROM_ADDR_GLOBAL, (char*)&settings, sizeof(settings_t));
 8007c84:	226c      	movs	r2, #108	; 0x6c
 8007c86:	4969      	ldr	r1, [pc, #420]	; (8007e2c <settings_store_global_setting+0x2b4>)
 8007c88:	2001      	movs	r0, #1
 8007c8a:	f7fa f80f 	bl	8001cac <memcpy_to_eeprom_with_checksum>
  return(STATUS_OK);
 8007c8e:	2000      	movs	r0, #0
}
 8007c90:	bd38      	pop	{r3, r4, r5, pc}
        if (int_value < 3) { return(STATUS_SETTING_STEP_PULSE_MIN); }
 8007c92:	2802      	cmp	r0, #2
 8007c94:	f240 80c6 	bls.w	8007e24 <settings_store_global_setting+0x2ac>
        settings.pulse_microseconds = int_value; break;
 8007c98:	4b64      	ldr	r3, [pc, #400]	; (8007e2c <settings_store_global_setting+0x2b4>)
 8007c9a:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
 8007c9e:	e7ed      	b.n	8007c7c <settings_store_global_setting+0x104>
      case 1: settings.stepper_idle_lock_time = int_value; break;
 8007ca0:	4b62      	ldr	r3, [pc, #392]	; (8007e2c <settings_store_global_setting+0x2b4>)
 8007ca2:	f883 0046 	strb.w	r0, [r3, #70]	; 0x46
 8007ca6:	e7e9      	b.n	8007c7c <settings_store_global_setting+0x104>
        settings.dir_invert_mask = int_value;
 8007ca8:	4b60      	ldr	r3, [pc, #384]	; (8007e2c <settings_store_global_setting+0x2b4>)
 8007caa:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
        st_generate_step_dir_invert_masks(); // Regenerate step and direction port invert masks.
 8007cae:	f000 fd8f 	bl	80087d0 <st_generate_step_dir_invert_masks>
        break;
 8007cb2:	e7e3      	b.n	8007c7c <settings_store_global_setting+0x104>
 8007cb4:	4a5d      	ldr	r2, [pc, #372]	; (8007e2c <settings_store_global_setting+0x2b4>)
 8007cb6:	f892 3058 	ldrb.w	r3, [r2, #88]	; 0x58
        if (int_value) { settings.flags |= BITFLAG_INVERT_ST_ENABLE; }
 8007cba:	2800      	cmp	r0, #0
 8007cbc:	f000 80a0 	beq.w	8007e00 <settings_store_global_setting+0x288>
 8007cc0:	f043 0304 	orr.w	r3, r3, #4
 8007cc4:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
 8007cc8:	e7d8      	b.n	8007c7c <settings_store_global_setting+0x104>
        settings.step_invert_mask = int_value;
 8007cca:	4b58      	ldr	r3, [pc, #352]	; (8007e2c <settings_store_global_setting+0x2b4>)
 8007ccc:	f8a3 0042 	strh.w	r0, [r3, #66]	; 0x42
        st_generate_step_dir_invert_masks(); // Regenerate step and direction port invert masks.
 8007cd0:	f000 fd7e 	bl	80087d0 <st_generate_step_dir_invert_masks>
        break;
 8007cd4:	e7d2      	b.n	8007c7c <settings_store_global_setting+0x104>
 8007cd6:	4a55      	ldr	r2, [pc, #340]	; (8007e2c <settings_store_global_setting+0x2b4>)
 8007cd8:	f892 3058 	ldrb.w	r3, [r2, #88]	; 0x58
        if (int_value) { settings.flags |= BITFLAG_INVERT_LIMIT_PINS; }
 8007cdc:	2800      	cmp	r0, #0
 8007cde:	f000 808a 	beq.w	8007df6 <settings_store_global_setting+0x27e>
 8007ce2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ce6:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
 8007cea:	e7c7      	b.n	8007c7c <settings_store_global_setting+0x104>
 8007cec:	4b4f      	ldr	r3, [pc, #316]	; (8007e2c <settings_store_global_setting+0x2b4>)
 8007cee:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
        if (int_value) { settings.flags |= BITFLAG_INVERT_PROBE_PIN; }
 8007cf2:	2800      	cmp	r0, #0
 8007cf4:	d07c      	beq.n	8007df0 <settings_store_global_setting+0x278>
 8007cf6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
        probe_configure_invert_mask(false);
 8007cfa:	2000      	movs	r0, #0
 8007cfc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8007d00:	f7fd fb04 	bl	800530c <probe_configure_invert_mask>
        break;
 8007d04:	e7ba      	b.n	8007c7c <settings_store_global_setting+0x104>
 8007d06:	4a49      	ldr	r2, [pc, #292]	; (8007e2c <settings_store_global_setting+0x2b4>)
 8007d08:	f892 3058 	ldrb.w	r3, [r2, #88]	; 0x58
        if (int_value) { settings.flags |= BITFLAG_HOMING_ENABLE; }
 8007d0c:	2800      	cmp	r0, #0
 8007d0e:	f000 8081 	beq.w	8007e14 <settings_store_global_setting+0x29c>
 8007d12:	f043 0310 	orr.w	r3, r3, #16
 8007d16:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
 8007d1a:	e7af      	b.n	8007c7c <settings_store_global_setting+0x104>
      case 12: settings.arc_tolerance = value; break;
 8007d1c:	4b43      	ldr	r3, [pc, #268]	; (8007e2c <settings_store_global_setting+0x2b4>)
 8007d1e:	64dd      	str	r5, [r3, #76]	; 0x4c
 8007d20:	e7ac      	b.n	8007c7c <settings_store_global_setting+0x104>
      case 26: settings.homing_debounce_delay = int_value; break;
 8007d22:	4b42      	ldr	r3, [pc, #264]	; (8007e2c <settings_store_global_setting+0x2b4>)
 8007d24:	f8a3 0064 	strh.w	r0, [r3, #100]	; 0x64
 8007d28:	e7a8      	b.n	8007c7c <settings_store_global_setting+0x104>
      case 27: settings.homing_pulloff = value; break;
 8007d2a:	4b40      	ldr	r3, [pc, #256]	; (8007e2c <settings_store_global_setting+0x2b4>)
 8007d2c:	669d      	str	r5, [r3, #104]	; 0x68
 8007d2e:	e7a5      	b.n	8007c7c <settings_store_global_setting+0x104>
      case 30: settings.rpm_max = value; spindle_init(); break; // Re-initialize spindle rpm calibration
 8007d30:	4b3e      	ldr	r3, [pc, #248]	; (8007e2c <settings_store_global_setting+0x2b4>)
 8007d32:	651d      	str	r5, [r3, #80]	; 0x50
 8007d34:	f000 f91a 	bl	8007f6c <spindle_init>
 8007d38:	e7a0      	b.n	8007c7c <settings_store_global_setting+0x104>
      case 31: settings.rpm_min = value; spindle_init(); break; // Re-initialize spindle rpm calibration
 8007d3a:	4b3c      	ldr	r3, [pc, #240]	; (8007e2c <settings_store_global_setting+0x2b4>)
 8007d3c:	655d      	str	r5, [r3, #84]	; 0x54
 8007d3e:	f000 f915 	bl	8007f6c <spindle_init>
 8007d42:	e79b      	b.n	8007c7c <settings_store_global_setting+0x104>
      case 24: settings.homing_feed_rate = value; break;
 8007d44:	4b39      	ldr	r3, [pc, #228]	; (8007e2c <settings_store_global_setting+0x2b4>)
 8007d46:	65dd      	str	r5, [r3, #92]	; 0x5c
 8007d48:	e798      	b.n	8007c7c <settings_store_global_setting+0x104>
      case 25: settings.homing_seek_rate = value; break;
 8007d4a:	4b38      	ldr	r3, [pc, #224]	; (8007e2c <settings_store_global_setting+0x2b4>)
 8007d4c:	661d      	str	r5, [r3, #96]	; 0x60
 8007d4e:	e795      	b.n	8007c7c <settings_store_global_setting+0x104>
      case 23: settings.homing_dir_mask = int_value; break;
 8007d50:	4b36      	ldr	r3, [pc, #216]	; (8007e2c <settings_store_global_setting+0x2b4>)
 8007d52:	f8a3 005a 	strh.w	r0, [r3, #90]	; 0x5a
 8007d56:	e791      	b.n	8007c7c <settings_store_global_setting+0x104>
      case 10: settings.status_report_mask = int_value; break;
 8007d58:	4b34      	ldr	r3, [pc, #208]	; (8007e2c <settings_store_global_setting+0x2b4>)
 8007d5a:	f883 0047 	strb.w	r0, [r3, #71]	; 0x47
 8007d5e:	e78d      	b.n	8007c7c <settings_store_global_setting+0x104>
      case 11: settings.junction_deviation = value; break;
 8007d60:	4b32      	ldr	r3, [pc, #200]	; (8007e2c <settings_store_global_setting+0x2b4>)
 8007d62:	649d      	str	r5, [r3, #72]	; 0x48
 8007d64:	e78a      	b.n	8007c7c <settings_store_global_setting+0x104>
 8007d66:	4a31      	ldr	r2, [pc, #196]	; (8007e2c <settings_store_global_setting+0x2b4>)
 8007d68:	f892 3058 	ldrb.w	r3, [r2, #88]	; 0x58
        if (int_value) {
 8007d6c:	2800      	cmp	r0, #0
 8007d6e:	d04c      	beq.n	8007e0a <settings_store_global_setting+0x292>
          if (bit_isfalse(settings.flags, BITFLAG_HOMING_ENABLE)) { return(STATUS_SOFT_LIMIT_ERROR); }
 8007d70:	06d9      	lsls	r1, r3, #27
 8007d72:	d559      	bpl.n	8007e28 <settings_store_global_setting+0x2b0>
          settings.flags |= BITFLAG_SOFT_LIMIT_ENABLE;
 8007d74:	f043 0320 	orr.w	r3, r3, #32
 8007d78:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
 8007d7c:	e77e      	b.n	8007c7c <settings_store_global_setting+0x104>
 8007d7e:	4b2b      	ldr	r3, [pc, #172]	; (8007e2c <settings_store_global_setting+0x2b4>)
 8007d80:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
        if (int_value) { settings.flags |= BITFLAG_HARD_LIMIT_ENABLE; }
 8007d84:	2800      	cmp	r0, #0
 8007d86:	d04a      	beq.n	8007e1e <settings_store_global_setting+0x2a6>
 8007d88:	f042 0208 	orr.w	r2, r2, #8
 8007d8c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
        limits_init(); // Re-init to immediately change. NOTE: Nice to have but could be problematic later.
 8007d90:	f7fb fa24 	bl	80031dc <limits_init>
        break;
 8007d94:	e772      	b.n	8007c7c <settings_store_global_setting+0x104>
 8007d96:	4b25      	ldr	r3, [pc, #148]	; (8007e2c <settings_store_global_setting+0x2b4>)
 8007d98:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
        if (int_value) { settings.flags |= BITFLAG_REPORT_INCHES; }
 8007d9c:	b328      	cbz	r0, 8007dea <settings_store_global_setting+0x272>
 8007d9e:	f042 0201 	orr.w	r2, r2, #1
 8007da2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
        system_flag_wco_change(); // Make sure WCO is immediately updated.
 8007da6:	f001 ff2f 	bl	8009c08 <system_flag_wco_change>
        break;
 8007daa:	e767      	b.n	8007c7c <settings_store_global_setting+0x104>
            settings.steps_per_mm[parameter] = value;
 8007dac:	4a1f      	ldr	r2, [pc, #124]	; (8007e2c <settings_store_global_setting+0x2b4>)
 8007dae:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
            break;
 8007db2:	e763      	b.n	8007c7c <settings_store_global_setting+0x104>
            settings.max_rate[parameter] = value;
 8007db4:	4a1d      	ldr	r2, [pc, #116]	; (8007e2c <settings_store_global_setting+0x2b4>)
 8007db6:	3304      	adds	r3, #4
 8007db8:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
            break;
 8007dbc:	e75e      	b.n	8007c7c <settings_store_global_setting+0x104>
          case 2: settings.acceleration[parameter] = value*60*60; break; // Convert to mm/min^2 for grbl internal use.
 8007dbe:	4628      	mov	r0, r5
 8007dc0:	491b      	ldr	r1, [pc, #108]	; (8007e30 <settings_store_global_setting+0x2b8>)
 8007dc2:	f103 0408 	add.w	r4, r3, #8
 8007dc6:	f7f8 ff77 	bl	8000cb8 <__aeabi_fmul>
 8007dca:	4b18      	ldr	r3, [pc, #96]	; (8007e2c <settings_store_global_setting+0x2b4>)
 8007dcc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007dd0:	e754      	b.n	8007c7c <settings_store_global_setting+0x104>
          case 3: settings.max_travel[parameter] = -value; break;  // Store as negative for grbl internal use.
 8007dd2:	4b16      	ldr	r3, [pc, #88]	; (8007e2c <settings_store_global_setting+0x2b4>)
 8007dd4:	340c      	adds	r4, #12
 8007dd6:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8007dda:	f843 5024 	str.w	r5, [r3, r4, lsl #2]
 8007dde:	e74d      	b.n	8007c7c <settings_store_global_setting+0x104>
          else { settings.flags &= ~BITFLAG_LASER_MODE; }
 8007de0:	f023 0302 	bic.w	r3, r3, #2
 8007de4:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
 8007de8:	e748      	b.n	8007c7c <settings_store_global_setting+0x104>
        else { settings.flags &= ~BITFLAG_REPORT_INCHES; }
 8007dea:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007dee:	e7d8      	b.n	8007da2 <settings_store_global_setting+0x22a>
        else { settings.flags &= ~BITFLAG_INVERT_PROBE_PIN; }
 8007df0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007df4:	e781      	b.n	8007cfa <settings_store_global_setting+0x182>
        else { settings.flags &= ~BITFLAG_INVERT_LIMIT_PINS; }
 8007df6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007dfa:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
 8007dfe:	e73d      	b.n	8007c7c <settings_store_global_setting+0x104>
        else { settings.flags &= ~BITFLAG_INVERT_ST_ENABLE; }
 8007e00:	f023 0304 	bic.w	r3, r3, #4
 8007e04:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
 8007e08:	e738      	b.n	8007c7c <settings_store_global_setting+0x104>
        } else { settings.flags &= ~BITFLAG_SOFT_LIMIT_ENABLE; }
 8007e0a:	f023 0320 	bic.w	r3, r3, #32
 8007e0e:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
 8007e12:	e733      	b.n	8007c7c <settings_store_global_setting+0x104>
          settings.flags &= ~BITFLAG_SOFT_LIMIT_ENABLE; // Force disable soft-limits.
 8007e14:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8007e18:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
 8007e1c:	e72e      	b.n	8007c7c <settings_store_global_setting+0x104>
        else { settings.flags &= ~BITFLAG_HARD_LIMIT_ENABLE; }
 8007e1e:	f002 02f7 	and.w	r2, r2, #247	; 0xf7
 8007e22:	e7b3      	b.n	8007d8c <settings_store_global_setting+0x214>
        if (int_value < 3) { return(STATUS_SETTING_STEP_PULSE_MIN); }
 8007e24:	2006      	movs	r0, #6
}
 8007e26:	bd38      	pop	{r3, r4, r5, pc}
          if (bit_isfalse(settings.flags, BITFLAG_HOMING_ENABLE)) { return(STATUS_SOFT_LIMIT_ERROR); }
 8007e28:	200a      	movs	r0, #10
}
 8007e2a:	bd38      	pop	{r3, r4, r5, pc}
 8007e2c:	20001744 	.word	0x20001744
 8007e30:	45610000 	.word	0x45610000

08007e34 <settings_init>:


// Initialize the config subsystem
void settings_init() {
 8007e34:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t version = eeprom_get_char(0);
 8007e36:	2000      	movs	r0, #0
void settings_init() {
 8007e38:	b085      	sub	sp, #20
  uint8_t version = eeprom_get_char(0);
 8007e3a:	f7f9 ff2b 	bl	8001c94 <eeprom_get_char>
  if (version == SETTINGS_VERSION) {
 8007e3e:	280a      	cmp	r0, #10
 8007e40:	d077      	beq.n	8007f32 <settings_init+0xfe>
  if(!read_global_settings()) {
    report_status_message(STATUS_SETTING_READ_FAIL);
 8007e42:	2007      	movs	r0, #7
 8007e44:	f7fe fc80 	bl	8006748 <report_status_message>
    settings.step_invert_mask = DEFAULT_STEPPING_INVERT_MASK;
 8007e48:	f44f 11f8 	mov.w	r1, #2031616	; 0x1f0000
    settings.homing_debounce_delay = DEFAULT_HOMING_DEBOUNCE_DELAY;
 8007e4c:	22fa      	movs	r2, #250	; 0xfa
    settings.pulse_microseconds = DEFAULT_STEP_PULSE_MICROSECONDS;
 8007e4e:	4c3d      	ldr	r4, [pc, #244]	; (8007f44 <settings_init+0x110>)
    settings.homing_dir_mask = DEFAULT_HOMING_DIR_MASK;
 8007e50:	261f      	movs	r6, #31
    settings.step_invert_mask = DEFAULT_STEPPING_INVERT_MASK;
 8007e52:	f8c4 1042 	str.w	r1, [r4, #66]	; 0x42
    settings.junction_deviation = DEFAULT_JUNCTION_DEVIATION;
 8007e56:	493c      	ldr	r1, [pc, #240]	; (8007f48 <settings_init+0x114>)
    settings.homing_debounce_delay = DEFAULT_HOMING_DEBOUNCE_DELAY;
 8007e58:	f8a4 2064 	strh.w	r2, [r4, #100]	; 0x64
    settings.junction_deviation = DEFAULT_JUNCTION_DEVIATION;
 8007e5c:	64a1      	str	r1, [r4, #72]	; 0x48
    settings.arc_tolerance = DEFAULT_ARC_TOLERANCE;
 8007e5e:	493b      	ldr	r1, [pc, #236]	; (8007f4c <settings_init+0x118>)
    settings.rpm_max = DEFAULT_SPINDLE_RPM_MAX;
 8007e60:	4a3b      	ldr	r2, [pc, #236]	; (8007f50 <settings_init+0x11c>)
    settings.arc_tolerance = DEFAULT_ARC_TOLERANCE;
 8007e62:	64e1      	str	r1, [r4, #76]	; 0x4c
    settings.rpm_min = DEFAULT_SPINDLE_RPM_MIN;
 8007e64:	2100      	movs	r1, #0
    settings.rpm_max = DEFAULT_SPINDLE_RPM_MAX;
 8007e66:	6522      	str	r2, [r4, #80]	; 0x50
    settings.homing_feed_rate = DEFAULT_HOMING_FEED_RATE;
 8007e68:	4a3a      	ldr	r2, [pc, #232]	; (8007f54 <settings_init+0x120>)
    if (DEFAULT_INVERT_LIMIT_PINS) { settings.flags |= BITFLAG_INVERT_LIMIT_PINS; }
 8007e6a:	2344      	movs	r3, #68	; 0x44
    settings.homing_feed_rate = DEFAULT_HOMING_FEED_RATE;
 8007e6c:	65e2      	str	r2, [r4, #92]	; 0x5c
    settings.homing_pulloff = DEFAULT_HOMING_PULLOFF;
 8007e6e:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
    settings.stepper_idle_lock_time = DEFAULT_STEPPER_IDLE_LOCK_TIME;
 8007e72:	2500      	movs	r5, #0
    settings.pulse_microseconds = DEFAULT_STEP_PULSE_MICROSECONDS;
 8007e74:	2706      	movs	r7, #6
    settings.rpm_min = DEFAULT_SPINDLE_RPM_MIN;
 8007e76:	6561      	str	r1, [r4, #84]	; 0x54
    settings.homing_seek_rate = DEFAULT_HOMING_SEEK_RATE;
 8007e78:	4937      	ldr	r1, [pc, #220]	; (8007f58 <settings_init+0x124>)
    settings.homing_dir_mask = DEFAULT_HOMING_DIR_MASK;
 8007e7a:	f8a4 605a 	strh.w	r6, [r4, #90]	; 0x5a
    settings.homing_seek_rate = DEFAULT_HOMING_SEEK_RATE;
 8007e7e:	6621      	str	r1, [r4, #96]	; 0x60
    settings.max_rate[X_AXIS] = DEFAULT_X_MAX_RATE;
 8007e80:	4936      	ldr	r1, [pc, #216]	; (8007f5c <settings_init+0x128>)
    settings.steps_per_mm[X_AXIS] = DEFAULT_X_STEPS_PER_MM;
 8007e82:	4e37      	ldr	r6, [pc, #220]	; (8007f60 <settings_init+0x12c>)
    settings.homing_pulloff = DEFAULT_HOMING_PULLOFF;
 8007e84:	66a2      	str	r2, [r4, #104]	; 0x68
    if (DEFAULT_INVERT_LIMIT_PINS) { settings.flags |= BITFLAG_INVERT_LIMIT_PINS; }
 8007e86:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    settings.acceleration[X_AXIS] = DEFAULT_X_ACCELERATION;
 8007e8a:	4a36      	ldr	r2, [pc, #216]	; (8007f64 <settings_init+0x130>)
    settings.max_travel[X_AXIS] = (-DEFAULT_X_MAX_TRAVEL);
 8007e8c:	4b36      	ldr	r3, [pc, #216]	; (8007f68 <settings_init+0x134>)
    settings.max_rate[X_AXIS] = DEFAULT_X_MAX_RATE;
 8007e8e:	6121      	str	r1, [r4, #16]
    settings.max_rate[Y_AXIS] = DEFAULT_Y_MAX_RATE;
 8007e90:	6161      	str	r1, [r4, #20]
    settings.max_rate[Z_AXIS] = DEFAULT_Z_MAX_RATE;
 8007e92:	61a1      	str	r1, [r4, #24]
    settings.max_rate[A_AXIS] = DEFAULT_A_MAX_RATE;
 8007e94:	61e1      	str	r1, [r4, #28]
  eeprom_put_char(0, SETTINGS_VERSION);
 8007e96:	4628      	mov	r0, r5
 8007e98:	210a      	movs	r1, #10
    settings.acceleration[X_AXIS] = DEFAULT_X_ACCELERATION;
 8007e9a:	6222      	str	r2, [r4, #32]
    settings.acceleration[Y_AXIS] = DEFAULT_Y_ACCELERATION;
 8007e9c:	6262      	str	r2, [r4, #36]	; 0x24
    settings.acceleration[Z_AXIS] = DEFAULT_Z_ACCELERATION;
 8007e9e:	62a2      	str	r2, [r4, #40]	; 0x28
    settings.acceleration[A_AXIS] = DEFAULT_A_ACCELERATION;
 8007ea0:	62e2      	str	r2, [r4, #44]	; 0x2c
    settings.max_travel[X_AXIS] = (-DEFAULT_X_MAX_TRAVEL);
 8007ea2:	6323      	str	r3, [r4, #48]	; 0x30
    settings.max_travel[Y_AXIS] = (-DEFAULT_Y_MAX_TRAVEL);
 8007ea4:	6363      	str	r3, [r4, #52]	; 0x34
    settings.max_travel[Z_AXIS] = (-DEFAULT_Z_MAX_TRAVEL);
 8007ea6:	63a3      	str	r3, [r4, #56]	; 0x38
    settings.max_travel[A_AXIS] = (-DEFAULT_A_MAX_TRAVEL);
 8007ea8:	63e3      	str	r3, [r4, #60]	; 0x3c
    settings.stepper_idle_lock_time = DEFAULT_STEPPER_IDLE_LOCK_TIME;
 8007eaa:	f884 5046 	strb.w	r5, [r4, #70]	; 0x46
    settings.status_report_mask = DEFAULT_STATUS_REPORT_MASK;
 8007eae:	f884 5047 	strb.w	r5, [r4, #71]	; 0x47
    settings.pulse_microseconds = DEFAULT_STEP_PULSE_MICROSECONDS;
 8007eb2:	f884 7040 	strb.w	r7, [r4, #64]	; 0x40
    settings.steps_per_mm[X_AXIS] = DEFAULT_X_STEPS_PER_MM;
 8007eb6:	6026      	str	r6, [r4, #0]
    settings.steps_per_mm[Y_AXIS] = DEFAULT_Y_STEPS_PER_MM;
 8007eb8:	6066      	str	r6, [r4, #4]
    settings.steps_per_mm[Z_AXIS] = DEFAULT_Z_STEPS_PER_MM;
 8007eba:	60a6      	str	r6, [r4, #8]
    settings.steps_per_mm[A_AXIS] = DEFAULT_A_STEPS_PER_MM;
 8007ebc:	60e6      	str	r6, [r4, #12]
  eeprom_put_char(0, SETTINGS_VERSION);
 8007ebe:	f7f9 feef 	bl	8001ca0 <eeprom_put_char>
  memcpy_to_eeprom_with_checksum(EEPROM_ADDR_GLOBAL, (char*)&settings, sizeof(settings_t));
 8007ec2:	4621      	mov	r1, r4
    memset(&coord_data, 0, sizeof(coord_data));
 8007ec4:	f44f 7400 	mov.w	r4, #512	; 0x200
  memcpy_to_eeprom_with_checksum(EEPROM_ADDR_GLOBAL, (char*)&settings, sizeof(settings_t));
 8007ec8:	226c      	movs	r2, #108	; 0x6c
 8007eca:	2001      	movs	r0, #1
 8007ecc:	f7f9 feee 	bl	8001cac <memcpy_to_eeprom_with_checksum>
    memset(&coord_data, 0, sizeof(coord_data));
 8007ed0:	e9cd 5500 	strd	r5, r5, [sp]
 8007ed4:	e9cd 5502 	strd	r5, r5, [sp, #8]
    protocol_buffer_synchronize();
 8007ed8:	f7fe f956 	bl	8006188 <protocol_buffer_synchronize>
  memcpy_to_eeprom_with_checksum(addr,(char*)coord_data, sizeof(float)*N_AXIS);
 8007edc:	4620      	mov	r0, r4
 8007ede:	2210      	movs	r2, #16
 8007ee0:	4669      	mov	r1, sp
 8007ee2:	3411      	adds	r4, #17
 8007ee4:	f7f9 fee2 	bl	8001cac <memcpy_to_eeprom_with_checksum>
    for (idx=0; idx <= SETTING_INDEX_NCOORD; idx++) { settings_write_coord_data(idx, coord_data); }
 8007ee8:	f5b4 7f22 	cmp.w	r4, #648	; 0x288
 8007eec:	d1f4      	bne.n	8007ed8 <settings_init+0xa4>
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK, 0);
 8007eee:	2100      	movs	r1, #0
 8007ef0:	f44f 7040 	mov.w	r0, #768	; 0x300
 8007ef4:	f7f9 fed4 	bl	8001ca0 <eeprom_put_char>
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK+1, 0); // Checksum
 8007ef8:	2100      	movs	r1, #0
 8007efa:	f240 3001 	movw	r0, #769	; 0x301
 8007efe:	f7f9 fecf 	bl	8001ca0 <eeprom_put_char>
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK+(LINE_BUFFER_SIZE+1), 0);
 8007f02:	2100      	movs	r1, #0
 8007f04:	f240 3051 	movw	r0, #849	; 0x351
 8007f08:	f7f9 feca 	bl	8001ca0 <eeprom_put_char>
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK+(LINE_BUFFER_SIZE+2), 0); // Checksum
 8007f0c:	2100      	movs	r1, #0
 8007f0e:	f240 3052 	movw	r0, #850	; 0x352
 8007f12:	f7f9 fec5 	bl	8001ca0 <eeprom_put_char>
    eeprom_put_char(EEPROM_ADDR_BUILD_INFO , 0);
 8007f16:	2100      	movs	r1, #0
 8007f18:	f44f 7070 	mov.w	r0, #960	; 0x3c0
 8007f1c:	f7f9 fec0 	bl	8001ca0 <eeprom_put_char>
    eeprom_put_char(EEPROM_ADDR_BUILD_INFO+1 , 0); // Checksum
 8007f20:	2100      	movs	r1, #0
 8007f22:	f240 30c1 	movw	r0, #961	; 0x3c1
 8007f26:	f7f9 febb 	bl	8001ca0 <eeprom_put_char>
    settings_restore(SETTINGS_RESTORE_ALL); // Force restore all EEPROM data.
    report_grbl_settings();
 8007f2a:	f7fe fca5 	bl	8006878 <report_grbl_settings>
  }
}
 8007f2e:	b005      	add	sp, #20
 8007f30:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!(memcpy_from_eeprom_with_checksum((char*)&settings, EEPROM_ADDR_GLOBAL, sizeof(settings_t)))) {
 8007f32:	226c      	movs	r2, #108	; 0x6c
 8007f34:	2101      	movs	r1, #1
 8007f36:	4803      	ldr	r0, [pc, #12]	; (8007f44 <settings_init+0x110>)
 8007f38:	f7f9 ff06 	bl	8001d48 <memcpy_from_eeprom_with_checksum>
 8007f3c:	2800      	cmp	r0, #0
 8007f3e:	d080      	beq.n	8007e42 <settings_init+0xe>
}
 8007f40:	b005      	add	sp, #20
 8007f42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f44:	20001744 	.word	0x20001744
 8007f48:	3c23d70a 	.word	0x3c23d70a
 8007f4c:	3b03126f 	.word	0x3b03126f
 8007f50:	447a0000 	.word	0x447a0000
 8007f54:	41200000 	.word	0x41200000
 8007f58:	42c80000 	.word	0x42c80000
 8007f5c:	44fa0000 	.word	0x44fa0000
 8007f60:	45a00000 	.word	0x45a00000
 8007f64:	4bdbba00 	.word	0x4bdbba00
 8007f68:	c38c0000 	.word	0xc38c0000

08007f6c <spindle_init>:
  static float pwm_gradient; // Precalulated value to speed up rpm to PWM conversions.
#endif


void spindle_init()
{
 8007f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
#ifdef VARIABLE_SPINDLE
  pwm_gradient = SPINDLE_PWM_RANGE / (settings.rpm_max - settings.rpm_min);
 8007f70:	4b40      	ldr	r3, [pc, #256]	; (8008074 <spindle_init+0x108>)
{
 8007f72:	b088      	sub	sp, #32
  pwm_gradient = SPINDLE_PWM_RANGE / (settings.rpm_max - settings.rpm_min);
 8007f74:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007f76:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8007f78:	f7f8 fd94 	bl	8000aa4 <__aeabi_fsub>
 8007f7c:	4601      	mov	r1, r0
 8007f7e:	483e      	ldr	r0, [pc, #248]	; (8008078 <spindle_init+0x10c>)
 8007f80:	f7f8 ff4e 	bl	8000e20 <__aeabi_fdiv>
#if defined (STM32F103C8)
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_APB2PeriphClockCmd(RCC_SPINDLE_ENABLE_PORT, ENABLE); // there is no RCC_SPINDLE_DIRECTION_PORT defined!
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Pin = 1 << SPINDLE_DIRECTION_BIT;
 8007f84:	2601      	movs	r6, #1
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8007f86:	f04f 0803 	mov.w	r8, #3
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8007f8a:	2510      	movs	r5, #16
	GPIO_Init(SPINDLE_DIRECTION_PORT, &GPIO_InitStructure);

#ifdef USE_SPINDLE_ENABLE_PIN
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Pin = 1 << SPINDLE_ENABLE_BIT;
 8007f8c:	f04f 0902 	mov.w	r9, #2
#endif

#ifdef VARIABLE_SPINDLE
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
  TIM_TimeBaseInitTypeDef timerInitStructure;
  TIM_OCInitTypeDef outputChannelInit = { 0 };
 8007f90:	2400      	movs	r4, #0
  pwm_gradient = SPINDLE_PWM_RANGE / (settings.rpm_max - settings.rpm_min);
 8007f92:	4b3a      	ldr	r3, [pc, #232]	; (800807c <spindle_init+0x110>)
	GPIO_InitStructure.GPIO_Pin = 1 << SPINDLE_DIRECTION_BIT;
 8007f94:	f10d 0a20 	add.w	sl, sp, #32
  pwm_gradient = SPINDLE_PWM_RANGE / (settings.rpm_max - settings.rpm_min);
 8007f98:	6018      	str	r0, [r3, #0]
	GPIO_Init(SPINDLE_DIRECTION_PORT, &GPIO_InitStructure);
 8007f9a:	4f39      	ldr	r7, [pc, #228]	; (8008080 <spindle_init+0x114>)
	RCC_APB2PeriphClockCmd(RCC_SPINDLE_ENABLE_PORT, ENABLE); // there is no RCC_SPINDLE_DIRECTION_PORT defined!
 8007f9c:	4631      	mov	r1, r6
 8007f9e:	2008      	movs	r0, #8
 8007fa0:	f7f9 fc4a 	bl	8001838 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Pin = 1 << SPINDLE_DIRECTION_BIT;
 8007fa4:	f82a 6d20 	strh.w	r6, [sl, #-32]!
	GPIO_Init(SPINDLE_DIRECTION_PORT, &GPIO_InitStructure);
 8007fa8:	4651      	mov	r1, sl
 8007faa:	4638      	mov	r0, r7
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8007fac:	f88d 5003 	strb.w	r5, [sp, #3]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8007fb0:	f88d 8002 	strb.w	r8, [sp, #2]
	GPIO_Init(SPINDLE_DIRECTION_PORT, &GPIO_InitStructure);
 8007fb4:	f7f9 fa02 	bl	80013bc <GPIO_Init>
	GPIO_Init(SPINDLE_ENABLE_PORT, &GPIO_InitStructure);
 8007fb8:	4651      	mov	r1, sl
 8007fba:	4638      	mov	r0, r7
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8007fbc:	f88d 5003 	strb.w	r5, [sp, #3]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8007fc0:	f88d 8002 	strb.w	r8, [sp, #2]
	GPIO_InitStructure.GPIO_Pin = 1 << SPINDLE_ENABLE_BIT;
 8007fc4:	f8ad 9000 	strh.w	r9, [sp]
	GPIO_Init(SPINDLE_ENABLE_PORT, &GPIO_InitStructure);
 8007fc8:	f7f9 f9f8 	bl	80013bc <GPIO_Init>
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 8007fcc:	4631      	mov	r1, r6
 8007fce:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007fd2:	f7f9 fc31 	bl	8001838 <RCC_APB2PeriphClockCmd>
  TIM_TimeBaseStructInit(&timerInitStructure);
 8007fd6:	a801      	add	r0, sp, #4
  TIM_OCInitTypeDef outputChannelInit = { 0 };
 8007fd8:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8007fdc:	e9cd 4406 	strd	r4, r4, [sp, #24]
  TIM_TimeBaseStructInit(&timerInitStructure);
 8007fe0:	f7f9 fcdc 	bl	800199c <TIM_TimeBaseStructInit>

  timerInitStructure.TIM_Prescaler = F_CPU / 1000000 - 1; // 1000
  timerInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
  timerInitStructure.TIM_Period = SPINDLE_PWM_MAX_VALUE - 1;
 8007fe4:	2263      	movs	r2, #99	; 0x63
  timerInitStructure.TIM_Prescaler = F_CPU / 1000000 - 1; // 1000
 8007fe6:	4b27      	ldr	r3, [pc, #156]	; (8008084 <spindle_init+0x118>)
 8007fe8:	4827      	ldr	r0, [pc, #156]	; (8008088 <spindle_init+0x11c>)
 8007fea:	681b      	ldr	r3, [r3, #0]
  timerInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
  timerInitStructure.TIM_RepetitionCounter = 0;
  TIM_TimeBaseInit(TIM1, &timerInitStructure);
 8007fec:	4d27      	ldr	r5, [pc, #156]	; (800808c <spindle_init+0x120>)
  timerInitStructure.TIM_Prescaler = F_CPU / 1000000 - 1; // 1000
 8007fee:	fba0 0303 	umull	r0, r3, r0, r3
 8007ff2:	0c9b      	lsrs	r3, r3, #18
  TIM_TimeBaseInit(TIM1, &timerInitStructure);
 8007ff4:	a901      	add	r1, sp, #4
  timerInitStructure.TIM_Prescaler = F_CPU / 1000000 - 1; // 1000
 8007ff6:	3b01      	subs	r3, #1
  TIM_TimeBaseInit(TIM1, &timerInitStructure);
 8007ff8:	4628      	mov	r0, r5
  timerInitStructure.TIM_Period = SPINDLE_PWM_MAX_VALUE - 1;
 8007ffa:	f8ad 2008 	strh.w	r2, [sp, #8]
  timerInitStructure.TIM_Prescaler = F_CPU / 1000000 - 1; // 1000
 8007ffe:	f8ad 3004 	strh.w	r3, [sp, #4]
  timerInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8008002:	f8ad 4006 	strh.w	r4, [sp, #6]
  timerInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 8008006:	f8ad 400a 	strh.w	r4, [sp, #10]
  timerInitStructure.TIM_RepetitionCounter = 0;
 800800a:	f88d 400c 	strb.w	r4, [sp, #12]
  TIM_TimeBaseInit(TIM1, &timerInitStructure);
 800800e:	f7f9 fc2b 	bl	8001868 <TIM_TimeBaseInit>

  outputChannelInit.TIM_OCMode = TIM_OCMode_PWM1;
 8008012:	4b1f      	ldr	r3, [pc, #124]	; (8008090 <spindle_init+0x124>)
  outputChannelInit.TIM_Pulse = 0;     // initi speed is 0
  outputChannelInit.TIM_OutputState = TIM_OutputState_Enable;
  outputChannelInit.TIM_OCPolarity = TIM_OCPolarity_High;

  TIM_OC1Init(TIM1, &outputChannelInit);
 8008014:	a904      	add	r1, sp, #16
 8008016:	4628      	mov	r0, r5
  outputChannelInit.TIM_OCMode = TIM_OCMode_PWM1;
 8008018:	9304      	str	r3, [sp, #16]
  outputChannelInit.TIM_Pulse = 0;     // initi speed is 0
 800801a:	f8cd 4016 	str.w	r4, [sp, #22]
  TIM_OC1Init(TIM1, &outputChannelInit);
 800801e:	f7f9 fc79 	bl	8001914 <TIM_OC1Init>
  TIM_OC1PreloadConfig(TIM1, TIM_OCPreload_Enable);
 8008022:	4628      	mov	r0, r5
 8008024:	2108      	movs	r1, #8
 8008026:	f7f9 fce5 	bl	80019f4 <TIM_OC1PreloadConfig>
  TIM_CtrlPWMOutputs(TIM1, DISABLE);
 800802a:	4621      	mov	r1, r4
 800802c:	4628      	mov	r0, r5
 800802e:	f7f9 fcc9 	bl	80019c4 <TIM_CtrlPWMOutputs>
  TIM_Cmd(TIM1, ENABLE);
 8008032:	4631      	mov	r1, r6
 8008034:	4628      	mov	r0, r5
 8008036:	f7f9 fcb9 	bl	80019ac <TIM_Cmd>

  RCC_APB2PeriphClockCmd(RCC_SPINDLE_PWM_PORT, ENABLE);
 800803a:	4631      	mov	r1, r6
 800803c:	2004      	movs	r0, #4
 800803e:	f7f9 fbfb 	bl	8001838 <RCC_APB2PeriphClockCmd>
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
  GPIO_InitStructure.GPIO_Pin = 1 << SPINDLE_PWM_BIT;
 8008042:	f44f 7380 	mov.w	r3, #256	; 0x100
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8008046:	2218      	movs	r2, #24
  GPIO_Init(SPINDLE_PWM_PORT, &GPIO_InitStructure);
 8008048:	4651      	mov	r1, sl
 800804a:	4812      	ldr	r0, [pc, #72]	; (8008094 <spindle_init+0x128>)
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 800804c:	f88d 2003 	strb.w	r2, [sp, #3]
  GPIO_InitStructure.GPIO_Pin = 1 << SPINDLE_PWM_BIT;
 8008050:	f8ad 3000 	strh.w	r3, [sp]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8008054:	f88d 8002 	strb.w	r8, [sp, #2]
  GPIO_Init(SPINDLE_PWM_PORT, &GPIO_InitStructure);
 8008058:	f7f9 f9b0 	bl	80013bc <GPIO_Init>
#endif
#endif

#if defined (STM32F103C8)
	#ifdef VARIABLE_SPINDLE
    TIM_CtrlPWMOutputs(TIM1, DISABLE);
 800805c:	4621      	mov	r1, r4
 800805e:	4628      	mov	r0, r5
 8008060:	f7f9 fcb0 	bl	80019c4 <TIM_CtrlPWMOutputs>
	#endif
    #ifdef USE_SPINDLE_ENABLE_PIN
      #ifdef INVERT_SPINDLE_ENABLE_PIN
        SetSpindleEnablebit();
      #else
        ResetSpindleEnablebit();
 8008064:	4622      	mov	r2, r4
 8008066:	4649      	mov	r1, r9
 8008068:	4638      	mov	r0, r7
 800806a:	f7f9 fb39 	bl	80016e0 <GPIO_WriteBit>
}
 800806e:	b008      	add	sp, #32
 8008070:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008074:	20001744 	.word	0x20001744
 8008078:	42c60000 	.word	0x42c60000
 800807c:	20000db4 	.word	0x20000db4
 8008080:	40010c00 	.word	0x40010c00
 8008084:	20000018 	.word	0x20000018
 8008088:	431bde83 	.word	0x431bde83
 800808c:	40012c00 	.word	0x40012c00
 8008090:	00010060 	.word	0x00010060
 8008094:	40010800 	.word	0x40010800

08008098 <spindle_get_state>:
{
 8008098:	b508      	push	{r3, lr}
  pin = GPIO_ReadInputData(SPINDLE_ENABLE_PORT);
 800809a:	4806      	ldr	r0, [pc, #24]	; (80080b4 <spindle_get_state+0x1c>)
 800809c:	f7f9 fb14 	bl	80016c8 <GPIO_ReadInputData>
 80080a0:	b2c3      	uxtb	r3, r0
		  if (bit_istrue(pin,(1<<SPINDLE_ENABLE_BIT)))
 80080a2:	f013 0002 	ands.w	r0, r3, #2
 80080a6:	d004      	beq.n	80080b2 <spindle_get_state+0x1a>
		  if (pin & (1 << SPINDLE_DIRECTION_BIT)) { return(SPINDLE_STATE_CCW); }
 80080a8:	f013 0f01 	tst.w	r3, #1
		  else { return(SPINDLE_STATE_CW); }
 80080ac:	bf14      	ite	ne
 80080ae:	2002      	movne	r0, #2
 80080b0:	2001      	moveq	r0, #1
}
 80080b2:	bd08      	pop	{r3, pc}
 80080b4:	40010c00 	.word	0x40010c00

080080b8 <spindle_stop>:
{
 80080b8:	b508      	push	{r3, lr}
    TIM_CtrlPWMOutputs(TIM1, DISABLE);
 80080ba:	2100      	movs	r1, #0
 80080bc:	4804      	ldr	r0, [pc, #16]	; (80080d0 <spindle_stop+0x18>)
 80080be:	f7f9 fc81 	bl	80019c4 <TIM_CtrlPWMOutputs>
      #endif
    #endif
#endif
}
 80080c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        ResetSpindleEnablebit();
 80080c6:	2200      	movs	r2, #0
 80080c8:	2102      	movs	r1, #2
 80080ca:	4802      	ldr	r0, [pc, #8]	; (80080d4 <spindle_stop+0x1c>)
 80080cc:	f7f9 bb08 	b.w	80016e0 <GPIO_WriteBit>
 80080d0:	40012c00 	.word	0x40012c00
 80080d4:	40010c00 	.word	0x40010c00

080080d8 <spindle_set_speed>:

#ifdef VARIABLE_SPINDLE
  // Sets spindle speed PWM output and enable pin, if configured. Called by spindle_set_state()
  // and stepper ISR. Keep routine small and efficient.
  void spindle_set_speed(SPINDLE_PWM_TYPE pwm_value)
  {
 80080d8:	4601      	mov	r1, r0
#ifdef AVRTARGET
		SPINDLE_OCR_REGISTER = pwm_value; // Set PWM output level.
#endif
#if defined (STM32F103C8)
		TIM1->CCR1 = pwm_value;
 80080da:	4803      	ldr	r0, [pc, #12]	; (80080e8 <spindle_set_speed+0x10>)
 80080dc:	8681      	strh	r1, [r0, #52]	; 0x34
					SetSpindleEnablebit();
				  #endif
				#endif
		 }
		#else
			if (pwm_value == SPINDLE_PWM_OFF_VALUE) {
 80080de:	b101      	cbz	r1, 80080e2 <spindle_set_speed+0xa>
			} else {
			#ifdef AVRTARGET
      SPINDLE_TCCRA_REGISTER |= (1<<SPINDLE_COMB_BIT); // Ensure PWM output is enabled.
			#endif
			#if defined (STM32F103C8)
      TIM_CtrlPWMOutputs(TIM1, ENABLE);
 80080e0:	2101      	movs	r1, #1
 80080e2:	f7f9 bc6f 	b.w	80019c4 <TIM_CtrlPWMOutputs>
 80080e6:	bf00      	nop
 80080e8:	40012c00 	.word	0x40012c00

080080ec <spindle_compute_pwm_value>:
		return(pwm_value);
	}
  #else
	// Called by spindle_set_state() and step segment generator. Keep routine small and efficient.
	SPINDLE_PWM_TYPE spindle_compute_pwm_value(float rpm) // 328p PWM register is 8-bit.
	{
 80080ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		SPINDLE_PWM_TYPE pwm_value;
		rpm *= (0.010f*sys.spindle_speed_ovr); // Scale by spindle speed override value.
																					 // Calculate PWM register value based on rpm max/min settings and programmed rpm.
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 80080ee:	4b1e      	ldr	r3, [pc, #120]	; (8008168 <spindle_compute_pwm_value+0x7c>)
	{
 80080f0:	4607      	mov	r7, r0
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 80080f2:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 80080f4:	6d1c      	ldr	r4, [r3, #80]	; 0x50
 80080f6:	4628      	mov	r0, r5
 80080f8:	4621      	mov	r1, r4
 80080fa:	f7f8 ff8f 	bl	800101c <__aeabi_fcmpge>
 80080fe:	4e1b      	ldr	r6, [pc, #108]	; (800816c <spindle_compute_pwm_value+0x80>)
 8008100:	b9e0      	cbnz	r0, 800813c <spindle_compute_pwm_value+0x50>
		rpm *= (0.010f*sys.spindle_speed_ovr); // Scale by spindle speed override value.
 8008102:	7ab0      	ldrb	r0, [r6, #10]
 8008104:	f7f8 fd84 	bl	8000c10 <__aeabi_i2f>
 8008108:	4639      	mov	r1, r7
 800810a:	f7f8 fdd5 	bl	8000cb8 <__aeabi_fmul>
 800810e:	4918      	ldr	r1, [pc, #96]	; (8008170 <spindle_compute_pwm_value+0x84>)
 8008110:	f7f8 fdd2 	bl	8000cb8 <__aeabi_fmul>
 8008114:	4607      	mov	r7, r0
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 8008116:	4601      	mov	r1, r0
 8008118:	4620      	mov	r0, r4
 800811a:	f7f8 ff75 	bl	8001008 <__aeabi_fcmple>
 800811e:	b968      	cbnz	r0, 800813c <spindle_compute_pwm_value+0x50>
			// No PWM range possible. Set simple on/off spindle control pin state.
			sys.spindle_speed = settings.rpm_max;
			pwm_value = SPINDLE_PWM_MAX_VALUE;
		}
		else if (rpm <= settings.rpm_min) {
 8008120:	4639      	mov	r1, r7
 8008122:	4628      	mov	r0, r5
 8008124:	f7f8 ff7a 	bl	800101c <__aeabi_fcmpge>
 8008128:	b158      	cbz	r0, 8008142 <spindle_compute_pwm_value+0x56>
			if (rpm == 0.0f) { // S0 disables spindle
 800812a:	2400      	movs	r4, #0
 800812c:	4638      	mov	r0, r7
 800812e:	4621      	mov	r1, r4
 8008130:	f7f8 ff56 	bl	8000fe0 <__aeabi_fcmpeq>
 8008134:	b1a8      	cbz	r0, 8008162 <spindle_compute_pwm_value+0x76>
				sys.spindle_speed = 0.0f;
 8008136:	6134      	str	r4, [r6, #16]
				pwm_value = SPINDLE_PWM_OFF_VALUE;
 8008138:	2000      	movs	r0, #0
			// NOTE: A nonlinear model could be installed here, if required, but keep it VERY light-weight.
			sys.spindle_speed = rpm;
			pwm_value = (SPINDLE_PWM_TYPE)floorf((rpm - settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
		}
		return(pwm_value);
	}
 800813a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			sys.spindle_speed = settings.rpm_max;
 800813c:	6134      	str	r4, [r6, #16]
			pwm_value = SPINDLE_PWM_MAX_VALUE;
 800813e:	2064      	movs	r0, #100	; 0x64
	}
 8008140:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pwm_value = (SPINDLE_PWM_TYPE)floorf((rpm - settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
 8008142:	4629      	mov	r1, r5
			sys.spindle_speed = rpm;
 8008144:	6137      	str	r7, [r6, #16]
			pwm_value = (SPINDLE_PWM_TYPE)floorf((rpm - settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
 8008146:	4638      	mov	r0, r7
 8008148:	f7f8 fcac 	bl	8000aa4 <__aeabi_fsub>
 800814c:	4b09      	ldr	r3, [pc, #36]	; (8008174 <spindle_compute_pwm_value+0x88>)
 800814e:	6819      	ldr	r1, [r3, #0]
 8008150:	f7f8 fdb2 	bl	8000cb8 <__aeabi_fmul>
 8008154:	f003 fb9c 	bl	800b890 <floorf>
 8008158:	f7f8 ffb0 	bl	80010bc <__aeabi_f2uiz>
 800815c:	3001      	adds	r0, #1
 800815e:	b280      	uxth	r0, r0
	}
 8008160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				sys.spindle_speed = settings.rpm_min;
 8008162:	6135      	str	r5, [r6, #16]
				pwm_value = SPINDLE_PWM_MIN_VALUE;
 8008164:	2001      	movs	r0, #1
	}
 8008166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008168:	20001744 	.word	0x20001744
 800816c:	20001408 	.word	0x20001408
 8008170:	3c23d70a 	.word	0x3c23d70a
 8008174:	20000db4 	.word	0x20000db4

08008178 <spindle_set_state>:
#ifdef VARIABLE_SPINDLE
  void spindle_set_state(uint8_t state, float rpm)
#else
  void _spindle_set_state(uint8_t state)
#endif
{
 8008178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (sys.abort) { return; } // Block during abort.
 800817a:	4c3f      	ldr	r4, [pc, #252]	; (8008278 <spindle_set_state+0x100>)
 800817c:	7862      	ldrb	r2, [r4, #1]
 800817e:	2a00      	cmp	r2, #0
 8008180:	d144      	bne.n	800820c <spindle_set_state+0x94>
 8008182:	4605      	mov	r5, r0
  if (state == SPINDLE_DISABLE) { // Halt or set spindle direction and rpm.
 8008184:	2800      	cmp	r0, #0
 8008186:	d034      	beq.n	80081f2 <spindle_set_state+0x7a>
    #endif
    spindle_stop();
  
  } else {
    #if !(defined(AVRTARGET) && defined(USE_SPINDLE_DIR_AS_ENABLE_PIN))
      if (state == SPINDLE_ENABLE_CW) {
 8008188:	2810      	cmp	r0, #16
 800818a:	460e      	mov	r6, r1
 800818c:	d051      	beq.n	8008232 <spindle_set_state+0xba>
        ResetSpindleDirectionBit();
	  }
	  else {
      SetSpindleDirectionBit();
 800818e:	2201      	movs	r2, #1
 8008190:	483a      	ldr	r0, [pc, #232]	; (800827c <spindle_set_state+0x104>)
 8008192:	4611      	mov	r1, r2
 8008194:	f7f9 faa4 	bl	80016e0 <GPIO_WriteBit>
      }
    #endif
  
    #ifdef VARIABLE_SPINDLE
      // NOTE: Assumes all calls to this function is when Grbl is not moving or must remain off.
      if (settings.flags & BITFLAG_LASER_MODE) {
 8008198:	4b39      	ldr	r3, [pc, #228]	; (8008280 <spindle_set_state+0x108>)
 800819a:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800819e:	0792      	lsls	r2, r2, #30
 80081a0:	d435      	bmi.n	800820e <spindle_set_state+0x96>
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 80081a2:	6d5f      	ldr	r7, [r3, #84]	; 0x54
 80081a4:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 80081a6:	4638      	mov	r0, r7
 80081a8:	4629      	mov	r1, r5
 80081aa:	f7f8 ff37 	bl	800101c <__aeabi_fcmpge>
 80081ae:	2800      	cmp	r0, #0
 80081b0:	d131      	bne.n	8008216 <spindle_set_state+0x9e>
		rpm *= (0.010f*sys.spindle_speed_ovr); // Scale by spindle speed override value.
 80081b2:	7aa0      	ldrb	r0, [r4, #10]
 80081b4:	f7f8 fd2c 	bl	8000c10 <__aeabi_i2f>
 80081b8:	4932      	ldr	r1, [pc, #200]	; (8008284 <spindle_set_state+0x10c>)
 80081ba:	f7f8 fd7d 	bl	8000cb8 <__aeabi_fmul>
 80081be:	4631      	mov	r1, r6
 80081c0:	f7f8 fd7a 	bl	8000cb8 <__aeabi_fmul>
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 80081c4:	4629      	mov	r1, r5
		rpm *= (0.010f*sys.spindle_speed_ovr); // Scale by spindle speed override value.
 80081c6:	4606      	mov	r6, r0
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 80081c8:	f7f8 ff28 	bl	800101c <__aeabi_fcmpge>
 80081cc:	bb18      	cbnz	r0, 8008216 <spindle_set_state+0x9e>
		else if (rpm <= settings.rpm_min) {
 80081ce:	4639      	mov	r1, r7
 80081d0:	4630      	mov	r0, r6
 80081d2:	f7f8 ff19 	bl	8001008 <__aeabi_fcmple>
 80081d6:	2800      	cmp	r0, #0
 80081d8:	d031      	beq.n	800823e <spindle_set_state+0xc6>
			if (rpm == 0.0f) { // S0 disables spindle
 80081da:	2500      	movs	r5, #0
 80081dc:	4630      	mov	r0, r6
 80081de:	4629      	mov	r1, r5
 80081e0:	f7f8 fefe 	bl	8000fe0 <__aeabi_fcmpeq>
 80081e4:	2800      	cmp	r0, #0
 80081e6:	d042      	beq.n	800826e <spindle_set_state+0xf6>
		TIM1->CCR1 = pwm_value;
 80081e8:	2200      	movs	r2, #0
 80081ea:	4b27      	ldr	r3, [pc, #156]	; (8008288 <spindle_set_state+0x110>)
				sys.spindle_speed = 0.0f;
 80081ec:	6125      	str	r5, [r4, #16]
		TIM1->CCR1 = pwm_value;
 80081ee:	869a      	strh	r2, [r3, #52]	; 0x34
 80081f0:	e038      	b.n	8008264 <spindle_set_state+0xec>
      sys.spindle_speed = 0.0f;
 80081f2:	2300      	movs	r3, #0
    TIM_CtrlPWMOutputs(TIM1, DISABLE);
 80081f4:	4601      	mov	r1, r0
 80081f6:	4824      	ldr	r0, [pc, #144]	; (8008288 <spindle_set_state+0x110>)
      sys.spindle_speed = 0.0f;
 80081f8:	6123      	str	r3, [r4, #16]
    TIM_CtrlPWMOutputs(TIM1, DISABLE);
 80081fa:	f7f9 fbe3 	bl	80019c4 <TIM_CtrlPWMOutputs>
        ResetSpindleEnablebit();
 80081fe:	462a      	mov	r2, r5
 8008200:	2102      	movs	r1, #2
 8008202:	481e      	ldr	r0, [pc, #120]	; (800827c <spindle_set_state+0x104>)
 8008204:	f7f9 fa6c 	bl	80016e0 <GPIO_WriteBit>
	  #endif
	#endif
	#endif
  }
  
  sys.report_ovr_counter = 0; // Set to report change immediately
 8008208:	2300      	movs	r3, #0
 800820a:	7323      	strb	r3, [r4, #12]
}
 800820c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (state == SPINDLE_ENABLE_CCW) { rpm = 0.0f; } // TODO: May need to be rpm_min*(100/MAX_SPINDLE_SPEED_OVERRIDE);
 800820e:	2d20      	cmp	r5, #32
 8008210:	bf08      	it	eq
 8008212:	2600      	moveq	r6, #0
 8008214:	e7c5      	b.n	80081a2 <spindle_set_state+0x2a>
		TIM1->CCR1 = pwm_value;
 8008216:	2264      	movs	r2, #100	; 0x64
 8008218:	4b1b      	ldr	r3, [pc, #108]	; (8008288 <spindle_set_state+0x110>)
			sys.spindle_speed = settings.rpm_max;
 800821a:	6125      	str	r5, [r4, #16]
		TIM1->CCR1 = pwm_value;
 800821c:	869a      	strh	r2, [r3, #52]	; 0x34
      TIM_CtrlPWMOutputs(TIM1, ENABLE);
 800821e:	2101      	movs	r1, #1
 8008220:	4819      	ldr	r0, [pc, #100]	; (8008288 <spindle_set_state+0x110>)
 8008222:	f7f9 fbcf 	bl	80019c4 <TIM_CtrlPWMOutputs>
		SetSpindleEnablebit();
 8008226:	2201      	movs	r2, #1
 8008228:	2102      	movs	r1, #2
 800822a:	4814      	ldr	r0, [pc, #80]	; (800827c <spindle_set_state+0x104>)
 800822c:	f7f9 fa58 	bl	80016e0 <GPIO_WriteBit>
 8008230:	e7ea      	b.n	8008208 <spindle_set_state+0x90>
        ResetSpindleDirectionBit();
 8008232:	2101      	movs	r1, #1
 8008234:	4811      	ldr	r0, [pc, #68]	; (800827c <spindle_set_state+0x104>)
 8008236:	f7f9 fa53 	bl	80016e0 <GPIO_WriteBit>
 800823a:	4b11      	ldr	r3, [pc, #68]	; (8008280 <spindle_set_state+0x108>)
 800823c:	e7b1      	b.n	80081a2 <spindle_set_state+0x2a>
			pwm_value = (SPINDLE_PWM_TYPE)floorf((rpm - settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
 800823e:	4639      	mov	r1, r7
 8008240:	4630      	mov	r0, r6
			sys.spindle_speed = rpm;
 8008242:	6126      	str	r6, [r4, #16]
			pwm_value = (SPINDLE_PWM_TYPE)floorf((rpm - settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
 8008244:	f7f8 fc2e 	bl	8000aa4 <__aeabi_fsub>
 8008248:	4b10      	ldr	r3, [pc, #64]	; (800828c <spindle_set_state+0x114>)
 800824a:	6819      	ldr	r1, [r3, #0]
 800824c:	f7f8 fd34 	bl	8000cb8 <__aeabi_fmul>
 8008250:	f003 fb1e 	bl	800b890 <floorf>
 8008254:	f7f8 ff32 	bl	80010bc <__aeabi_f2uiz>
		TIM1->CCR1 = pwm_value;
 8008258:	4b0b      	ldr	r3, [pc, #44]	; (8008288 <spindle_set_state+0x110>)
			pwm_value = (SPINDLE_PWM_TYPE)floorf((rpm - settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
 800825a:	3001      	adds	r0, #1
 800825c:	b280      	uxth	r0, r0
		TIM1->CCR1 = pwm_value;
 800825e:	8698      	strh	r0, [r3, #52]	; 0x34
			if (pwm_value == SPINDLE_PWM_OFF_VALUE) {
 8008260:	2800      	cmp	r0, #0
 8008262:	d1dc      	bne.n	800821e <spindle_set_state+0xa6>
				TIM_CtrlPWMOutputs(TIM1, DISABLE);
 8008264:	2100      	movs	r1, #0
 8008266:	4808      	ldr	r0, [pc, #32]	; (8008288 <spindle_set_state+0x110>)
 8008268:	f7f9 fbac 	bl	80019c4 <TIM_CtrlPWMOutputs>
 800826c:	e7db      	b.n	8008226 <spindle_set_state+0xae>
		TIM1->CCR1 = pwm_value;
 800826e:	2201      	movs	r2, #1
 8008270:	4b05      	ldr	r3, [pc, #20]	; (8008288 <spindle_set_state+0x110>)
				sys.spindle_speed = settings.rpm_min;
 8008272:	6127      	str	r7, [r4, #16]
		TIM1->CCR1 = pwm_value;
 8008274:	869a      	strh	r2, [r3, #52]	; 0x34
 8008276:	e7d2      	b.n	800821e <spindle_set_state+0xa6>
 8008278:	20001408 	.word	0x20001408
 800827c:	40010c00 	.word	0x40010c00
 8008280:	20001744 	.word	0x20001744
 8008284:	3c23d70a 	.word	0x3c23d70a
 8008288:	40012c00 	.word	0x40012c00
 800828c:	20000db4 	.word	0x20000db4

08008290 <spindle_sync>:

// G-code parser entry-point for setting spindle state. Forces a planner buffer sync and bails 
// if an abort or check-mode is active.
#ifdef VARIABLE_SPINDLE
  void spindle_sync(uint8_t state, float rpm)
  {
 8008290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (sys.state == STATE_CHECK_MODE) { return; }
 8008292:	4c41      	ldr	r4, [pc, #260]	; (8008398 <spindle_sync+0x108>)
 8008294:	7823      	ldrb	r3, [r4, #0]
 8008296:	2b02      	cmp	r3, #2
 8008298:	d005      	beq.n	80082a6 <spindle_sync+0x16>
 800829a:	4605      	mov	r5, r0
 800829c:	460e      	mov	r6, r1
    protocol_buffer_synchronize(); // Empty planner buffer to ensure spindle is set when programmed.
 800829e:	f7fd ff73 	bl	8006188 <protocol_buffer_synchronize>
  if (sys.abort) { return; } // Block during abort.
 80082a2:	7862      	ldrb	r2, [r4, #1]
 80082a4:	b102      	cbz	r2, 80082a8 <spindle_sync+0x18>
    spindle_set_state(state,rpm);
  }
 80082a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (state == SPINDLE_DISABLE) { // Halt or set spindle direction and rpm.
 80082a8:	2d00      	cmp	r5, #0
 80082aa:	d041      	beq.n	8008330 <spindle_sync+0xa0>
      if (state == SPINDLE_ENABLE_CW) {
 80082ac:	2d10      	cmp	r5, #16
 80082ae:	d067      	beq.n	8008380 <spindle_sync+0xf0>
      SetSpindleDirectionBit();
 80082b0:	2201      	movs	r2, #1
 80082b2:	483a      	ldr	r0, [pc, #232]	; (800839c <spindle_sync+0x10c>)
 80082b4:	4611      	mov	r1, r2
 80082b6:	f7f9 fa13 	bl	80016e0 <GPIO_WriteBit>
      if (settings.flags & BITFLAG_LASER_MODE) {
 80082ba:	4b39      	ldr	r3, [pc, #228]	; (80083a0 <spindle_sync+0x110>)
 80082bc:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80082c0:	0792      	lsls	r2, r2, #30
 80082c2:	d441      	bmi.n	8008348 <spindle_sync+0xb8>
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 80082c4:	6d5f      	ldr	r7, [r3, #84]	; 0x54
 80082c6:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 80082c8:	4638      	mov	r0, r7
 80082ca:	4629      	mov	r1, r5
 80082cc:	f7f8 fea6 	bl	800101c <__aeabi_fcmpge>
 80082d0:	b9f0      	cbnz	r0, 8008310 <spindle_sync+0x80>
		rpm *= (0.010f*sys.spindle_speed_ovr); // Scale by spindle speed override value.
 80082d2:	7aa0      	ldrb	r0, [r4, #10]
 80082d4:	f7f8 fc9c 	bl	8000c10 <__aeabi_i2f>
 80082d8:	4932      	ldr	r1, [pc, #200]	; (80083a4 <spindle_sync+0x114>)
 80082da:	f7f8 fced 	bl	8000cb8 <__aeabi_fmul>
 80082de:	4631      	mov	r1, r6
 80082e0:	f7f8 fcea 	bl	8000cb8 <__aeabi_fmul>
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 80082e4:	4629      	mov	r1, r5
		rpm *= (0.010f*sys.spindle_speed_ovr); // Scale by spindle speed override value.
 80082e6:	4606      	mov	r6, r0
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 80082e8:	f7f8 fe98 	bl	800101c <__aeabi_fcmpge>
 80082ec:	b980      	cbnz	r0, 8008310 <spindle_sync+0x80>
		else if (rpm <= settings.rpm_min) {
 80082ee:	4639      	mov	r1, r7
 80082f0:	4630      	mov	r0, r6
 80082f2:	f7f8 fe89 	bl	8001008 <__aeabi_fcmple>
 80082f6:	b358      	cbz	r0, 8008350 <spindle_sync+0xc0>
			if (rpm == 0.0f) { // S0 disables spindle
 80082f8:	2500      	movs	r5, #0
 80082fa:	4630      	mov	r0, r6
 80082fc:	4629      	mov	r1, r5
 80082fe:	f7f8 fe6f 	bl	8000fe0 <__aeabi_fcmpeq>
 8008302:	2800      	cmp	r0, #0
 8008304:	d042      	beq.n	800838c <spindle_sync+0xfc>
		TIM1->CCR1 = pwm_value;
 8008306:	2200      	movs	r2, #0
 8008308:	4b27      	ldr	r3, [pc, #156]	; (80083a8 <spindle_sync+0x118>)
				sys.spindle_speed = 0.0f;
 800830a:	6125      	str	r5, [r4, #16]
		TIM1->CCR1 = pwm_value;
 800830c:	869a      	strh	r2, [r3, #52]	; 0x34
 800830e:	e032      	b.n	8008376 <spindle_sync+0xe6>
 8008310:	2264      	movs	r2, #100	; 0x64
 8008312:	4b25      	ldr	r3, [pc, #148]	; (80083a8 <spindle_sync+0x118>)
			sys.spindle_speed = settings.rpm_max;
 8008314:	6125      	str	r5, [r4, #16]
		TIM1->CCR1 = pwm_value;
 8008316:	869a      	strh	r2, [r3, #52]	; 0x34
      TIM_CtrlPWMOutputs(TIM1, ENABLE);
 8008318:	2101      	movs	r1, #1
 800831a:	4823      	ldr	r0, [pc, #140]	; (80083a8 <spindle_sync+0x118>)
 800831c:	f7f9 fb52 	bl	80019c4 <TIM_CtrlPWMOutputs>
		SetSpindleEnablebit();
 8008320:	2201      	movs	r2, #1
 8008322:	2102      	movs	r1, #2
 8008324:	481d      	ldr	r0, [pc, #116]	; (800839c <spindle_sync+0x10c>)
 8008326:	f7f9 f9db 	bl	80016e0 <GPIO_WriteBit>
  sys.report_ovr_counter = 0; // Set to report change immediately
 800832a:	2300      	movs	r3, #0
 800832c:	7323      	strb	r3, [r4, #12]
  }
 800832e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      sys.spindle_speed = 0.0f;
 8008330:	2300      	movs	r3, #0
    TIM_CtrlPWMOutputs(TIM1, DISABLE);
 8008332:	4629      	mov	r1, r5
 8008334:	481c      	ldr	r0, [pc, #112]	; (80083a8 <spindle_sync+0x118>)
      sys.spindle_speed = 0.0f;
 8008336:	6123      	str	r3, [r4, #16]
    TIM_CtrlPWMOutputs(TIM1, DISABLE);
 8008338:	f7f9 fb44 	bl	80019c4 <TIM_CtrlPWMOutputs>
        ResetSpindleEnablebit();
 800833c:	462a      	mov	r2, r5
 800833e:	2102      	movs	r1, #2
 8008340:	4816      	ldr	r0, [pc, #88]	; (800839c <spindle_sync+0x10c>)
 8008342:	f7f9 f9cd 	bl	80016e0 <GPIO_WriteBit>
 8008346:	e7f0      	b.n	800832a <spindle_sync+0x9a>
        if (state == SPINDLE_ENABLE_CCW) { rpm = 0.0f; } // TODO: May need to be rpm_min*(100/MAX_SPINDLE_SPEED_OVERRIDE);
 8008348:	2d20      	cmp	r5, #32
 800834a:	bf08      	it	eq
 800834c:	2600      	moveq	r6, #0
 800834e:	e7b9      	b.n	80082c4 <spindle_sync+0x34>
			pwm_value = (SPINDLE_PWM_TYPE)floorf((rpm - settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
 8008350:	4639      	mov	r1, r7
 8008352:	4630      	mov	r0, r6
			sys.spindle_speed = rpm;
 8008354:	6126      	str	r6, [r4, #16]
			pwm_value = (SPINDLE_PWM_TYPE)floorf((rpm - settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
 8008356:	f7f8 fba5 	bl	8000aa4 <__aeabi_fsub>
 800835a:	4b14      	ldr	r3, [pc, #80]	; (80083ac <spindle_sync+0x11c>)
 800835c:	6819      	ldr	r1, [r3, #0]
 800835e:	f7f8 fcab 	bl	8000cb8 <__aeabi_fmul>
 8008362:	f003 fa95 	bl	800b890 <floorf>
 8008366:	f7f8 fea9 	bl	80010bc <__aeabi_f2uiz>
		TIM1->CCR1 = pwm_value;
 800836a:	4b0f      	ldr	r3, [pc, #60]	; (80083a8 <spindle_sync+0x118>)
			pwm_value = (SPINDLE_PWM_TYPE)floorf((rpm - settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
 800836c:	3001      	adds	r0, #1
 800836e:	b280      	uxth	r0, r0
		TIM1->CCR1 = pwm_value;
 8008370:	8698      	strh	r0, [r3, #52]	; 0x34
			if (pwm_value == SPINDLE_PWM_OFF_VALUE) {
 8008372:	2800      	cmp	r0, #0
 8008374:	d1d0      	bne.n	8008318 <spindle_sync+0x88>
				TIM_CtrlPWMOutputs(TIM1, DISABLE);
 8008376:	2100      	movs	r1, #0
 8008378:	480b      	ldr	r0, [pc, #44]	; (80083a8 <spindle_sync+0x118>)
 800837a:	f7f9 fb23 	bl	80019c4 <TIM_CtrlPWMOutputs>
 800837e:	e7cf      	b.n	8008320 <spindle_sync+0x90>
        ResetSpindleDirectionBit();
 8008380:	2101      	movs	r1, #1
 8008382:	4806      	ldr	r0, [pc, #24]	; (800839c <spindle_sync+0x10c>)
 8008384:	f7f9 f9ac 	bl	80016e0 <GPIO_WriteBit>
 8008388:	4b05      	ldr	r3, [pc, #20]	; (80083a0 <spindle_sync+0x110>)
 800838a:	e79b      	b.n	80082c4 <spindle_sync+0x34>
		TIM1->CCR1 = pwm_value;
 800838c:	2201      	movs	r2, #1
 800838e:	4b06      	ldr	r3, [pc, #24]	; (80083a8 <spindle_sync+0x118>)
				sys.spindle_speed = settings.rpm_min;
 8008390:	6127      	str	r7, [r4, #16]
		TIM1->CCR1 = pwm_value;
 8008392:	869a      	strh	r2, [r3, #52]	; 0x34
 8008394:	e7c0      	b.n	8008318 <spindle_sync+0x88>
 8008396:	bf00      	nop
 8008398:	20001408 	.word	0x20001408
 800839c:	40010c00 	.word	0x40010c00
 80083a0:	20001744 	.word	0x20001744
 80083a4:	3c23d70a 	.word	0x3c23d70a
 80083a8:	40012c00 	.word	0x40012c00
 80083ac:	20000db4 	.word	0x20000db4

080083b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80083b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80083e8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80083b4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80083b6:	e003      	b.n	80083c0 <LoopCopyDataInit>

080083b8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80083b8:	4b0c      	ldr	r3, [pc, #48]	; (80083ec <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 80083ba:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80083bc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80083be:	3104      	adds	r1, #4

080083c0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80083c0:	480b      	ldr	r0, [pc, #44]	; (80083f0 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 80083c2:	4b0c      	ldr	r3, [pc, #48]	; (80083f4 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 80083c4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80083c6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80083c8:	d3f6      	bcc.n	80083b8 <CopyDataInit>
	ldr	r2, =_sbss
 80083ca:	4a0b      	ldr	r2, [pc, #44]	; (80083f8 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 80083cc:	e002      	b.n	80083d4 <LoopFillZerobss>

080083ce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80083ce:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80083d0:	f842 3b04 	str.w	r3, [r2], #4

080083d4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80083d4:	4b09      	ldr	r3, [pc, #36]	; (80083fc <LoopFillZerobss+0x28>)
	cmp	r2, r3
 80083d6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80083d8:	d3f9      	bcc.n	80083ce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80083da:	f001 fd09 	bl	8009df0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80083de:	f003 f8d3 	bl	800b588 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80083e2:	f7fb fa59 	bl	8003898 <main>
	bx	lr
 80083e6:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80083e8:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 80083ec:	0800d000 	.word	0x0800d000
	ldr	r0, =_sdata
 80083f0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80083f4:	20000538 	.word	0x20000538
	ldr	r2, =_sbss
 80083f8:	20000538 	.word	0x20000538
	ldr	r3, = _ebss
 80083fc:	20001838 	.word	0x20001838

08008400 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8008400:	e7fe      	b.n	8008400 <ADC1_2_IRQHandler>
	...

08008404 <st_wake_up>:


// Stepper state initialization. Cycle should only start if the st.cycle_start flag is
// enabled. Startup init and limits call this function but shouldn't start the cycle.
void st_wake_up()
{
 8008404:	b570      	push	{r4, r5, r6, lr}
		mc_reset();
		return;
	}
#endif
  // Enable stepper drivers.
  if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE)) 
 8008406:	4d18      	ldr	r5, [pc, #96]	; (8008468 <st_wake_up+0x64>)
  {
	  SetStepperDisableBit();
 8008408:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE)) 
 800840c:	f895 3058 	ldrb.w	r3, [r5, #88]	; 0x58
	  SetStepperDisableBit();
 8008410:	4816      	ldr	r0, [pc, #88]	; (800846c <st_wake_up+0x68>)
  if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE)) 
 8008412:	075b      	lsls	r3, r3, #29
 8008414:	d424      	bmi.n	8008460 <st_wake_up+0x5c>
  }
  else 
  { 
	  ResetStepperDisableBit();
 8008416:	f7f9 f961 	bl	80016dc <GPIO_ResetBits>
#ifdef WIN32
  nTimer1Out = 1;
#endif
#if defined (STM32F103C8)
  TIM3->ARR = st.step_pulse_time; // don't subtract 1!
  TIM3->EGR = TIM_PSCReloadMode_Immediate;
 800841a:	2401      	movs	r4, #1
  TIM3->SR = ~TIM_SR_UIF;
 800841c:	f64f 76fe 	movw	r6, #65534	; 0xfffe

  TIM2->ARR = st.exec_segment->cycles_per_tick - 1;
 8008420:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  	st.step_pulse_time = (settings.pulse_microseconds)*TICKS_PER_MICROSECOND;
 8008424:	4b12      	ldr	r3, [pc, #72]	; (8008470 <st_wake_up+0x6c>)
 8008426:	4813      	ldr	r0, [pc, #76]	; (8008474 <st_wake_up+0x70>)
 8008428:	681a      	ldr	r2, [r3, #0]
 800842a:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
 800842e:	fba0 0202 	umull	r0, r2, r0, r2
 8008432:	0c92      	lsrs	r2, r2, #18
 8008434:	fb03 f302 	mul.w	r3, r3, r2
  TIM3->ARR = st.step_pulse_time; // don't subtract 1!
 8008438:	480f      	ldr	r0, [pc, #60]	; (8008478 <st_wake_up+0x74>)
  st.step_outbits = step_port_invert_mask;
 800843a:	4a10      	ldr	r2, [pc, #64]	; (800847c <st_wake_up+0x78>)
 800843c:	4d10      	ldr	r5, [pc, #64]	; (8008480 <st_wake_up+0x7c>)
  	st.step_pulse_time = (settings.pulse_microseconds)*TICKS_PER_MICROSECOND;
 800843e:	b29b      	uxth	r3, r3
  st.step_outbits = step_port_invert_mask;
 8008440:	882d      	ldrh	r5, [r5, #0]
  TIM3->ARR = st.step_pulse_time; // don't subtract 1!
 8008442:	8583      	strh	r3, [r0, #44]	; 0x2c
  TIM3->EGR = TIM_PSCReloadMode_Immediate;
 8008444:	8284      	strh	r4, [r0, #20]
  TIM3->SR = ~TIM_SR_UIF;
 8008446:	8206      	strh	r6, [r0, #16]
  TIM2->ARR = st.exec_segment->cycles_per_tick - 1;
 8008448:	6b10      	ldr	r0, [r2, #48]	; 0x30
  	st.step_pulse_time = (settings.pulse_microseconds)*TICKS_PER_MICROSECOND;
 800844a:	8253      	strh	r3, [r2, #18]
  TIM2->ARR = st.exec_segment->cycles_per_tick - 1;
 800844c:	8843      	ldrh	r3, [r0, #2]
  st.step_outbits = step_port_invert_mask;
 800844e:	8295      	strh	r5, [r2, #20]
  TIM2->ARR = st.exec_segment->cycles_per_tick - 1;
 8008450:	3b01      	subs	r3, #1
 8008452:	b29b      	uxth	r3, r3
 8008454:	858b      	strh	r3, [r1, #44]	; 0x2c
  /* Set the Autoreload value */
#ifndef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING        
  TIM2->PSC = st.exec_segment->prescaler;
#endif
  TIM2->EGR = TIM_PSCReloadMode_Immediate;
 8008456:	828c      	strh	r4, [r1, #20]
  TIM2->CR1 |= TIM_CR1_CEN;
 8008458:	880b      	ldrh	r3, [r1, #0]
 800845a:	4323      	orrs	r3, r4
 800845c:	800b      	strh	r3, [r1, #0]
#endif
}
 800845e:	bd70      	pop	{r4, r5, r6, pc}
	  SetStepperDisableBit();
 8008460:	f7f9 f93a 	bl	80016d8 <GPIO_SetBits>
 8008464:	e7d9      	b.n	800841a <st_wake_up+0x16>
 8008466:	bf00      	nop
 8008468:	20001744 	.word	0x20001744
 800846c:	40010800 	.word	0x40010800
 8008470:	20000018 	.word	0x20000018
 8008474:	431bde83 	.word	0x431bde83
 8008478:	40000400 	.word	0x40000400
 800847c:	20000e4c 	.word	0x20000e4c
 8008480:	20000f5c 	.word	0x20000f5c

08008484 <st_go_idle>:
#endif
#ifdef WIN32
  nTimer1Out = 0;
#endif
#ifdef STM32F103C8
  TIM2->CR1 &= ~TIM_CR1_CEN;
 8008484:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  TIM2->CNT = 0;
 8008488:	2100      	movs	r1, #0
  TIM2->CR1 &= ~TIM_CR1_CEN;
 800848a:	8813      	ldrh	r3, [r2, #0]
{
 800848c:	b570      	push	{r4, r5, r6, lr}
  TIM2->CR1 &= ~TIM_CR1_CEN;
 800848e:	f023 0301 	bic.w	r3, r3, #1
 8008492:	041b      	lsls	r3, r3, #16
 8008494:	0c1b      	lsrs	r3, r3, #16

  busy = false;

  // Set stepper driver idle state, disabled or enabled, depending on settings and circumstances.
  bool pin_state = false; // Keep enabled.
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 8008496:	4c15      	ldr	r4, [pc, #84]	; (80084ec <st_go_idle+0x68>)
  TIM2->CR1 &= ~TIM_CR1_CEN;
 8008498:	8013      	strh	r3, [r2, #0]
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 800849a:	f894 0046 	ldrb.w	r0, [r4, #70]	; 0x46
  busy = false;
 800849e:	4d14      	ldr	r5, [pc, #80]	; (80084f0 <st_go_idle+0x6c>)
 80084a0:	4e14      	ldr	r6, [pc, #80]	; (80084f4 <st_go_idle+0x70>)
  TIM2->CNT = 0;
 80084a2:	8491      	strh	r1, [r2, #36]	; 0x24
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 80084a4:	28ff      	cmp	r0, #255	; 0xff
 80084a6:	7833      	ldrb	r3, [r6, #0]
  busy = false;
 80084a8:	7029      	strb	r1, [r5, #0]
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 80084aa:	d00c      	beq.n	80084c6 <st_go_idle+0x42>
 80084ac:	2b04      	cmp	r3, #4
 80084ae:	d110      	bne.n	80084d2 <st_go_idle+0x4e>
    // Force stepper dwell to lock axes for a defined amount of time to ensure the axes come to a complete
    // stop and not drift from residual inertial forces at the end of the last movement.
    delay_ms(settings.stepper_idle_lock_time);
    pin_state = true; // Override. Disable steppers.
  }
  if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE)) { pin_state = !pin_state; } // Apply pin invert.
 80084b0:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 80084b4:	075a      	lsls	r2, r3, #29
 80084b6:	d412      	bmi.n	80084de <st_go_idle+0x5a>
  }
  else 
  { 
	  ResetStepperDisableBit();
  }
}
 80084b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  ResetStepperDisableBit();
 80084bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80084c0:	480d      	ldr	r0, [pc, #52]	; (80084f8 <st_go_idle+0x74>)
 80084c2:	f7f9 b90b 	b.w	80016dc <GPIO_ResetBits>
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 80084c6:	4a0d      	ldr	r2, [pc, #52]	; (80084fc <st_go_idle+0x78>)
 80084c8:	7812      	ldrb	r2, [r2, #0]
 80084ca:	2a00      	cmp	r2, #0
 80084cc:	d1ee      	bne.n	80084ac <st_go_idle+0x28>
 80084ce:	2b80      	cmp	r3, #128	; 0x80
 80084d0:	d1ee      	bne.n	80084b0 <st_go_idle+0x2c>
    delay_ms(settings.stepper_idle_lock_time);
 80084d2:	f7fb fe91 	bl	80041f8 <delay_ms>
  if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE)) { pin_state = !pin_state; } // Apply pin invert.
 80084d6:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 80084da:	075b      	lsls	r3, r3, #29
 80084dc:	d4ec      	bmi.n	80084b8 <st_go_idle+0x34>
}
 80084de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  SetStepperDisableBit();
 80084e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80084e6:	4804      	ldr	r0, [pc, #16]	; (80084f8 <st_go_idle+0x74>)
 80084e8:	f7f9 b8f6 	b.w	80016d8 <GPIO_SetBits>
 80084ec:	20001744 	.word	0x20001744
 80084f0:	20000db8 	.word	0x20000db8
 80084f4:	20001408 	.word	0x20001408
 80084f8:	40010800 	.word	0x40010800
 80084fc:	20001440 	.word	0x20001440

08008500 <TIM2_IRQHandler>:
ISR(TIMER1_COMPA_vect)
#endif
#ifdef WIN32
void Timer1Proc()
#endif
{
 8008500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifdef STM32F103C8
	if ((TIM2->SR & TIM_SR_UIF) != 0)                  // check interrupt source
 8008502:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008506:	8a1a      	ldrh	r2, [r3, #16]
 8008508:	07d1      	lsls	r1, r2, #31
 800850a:	f140 8090 	bpl.w	800862e <TIM2_IRQHandler+0x12e>
	{
		TIM2->SR = ~TIM_SR_UIF; // clear UIF flag
		TIM2->CNT = 0;
 800850e:	2200      	movs	r2, #0
		TIM2->SR = ~TIM_SR_UIF; // clear UIF flag
 8008510:	f64f 71fe 	movw	r1, #65534	; 0xfffe
	{
		return;
	}
#endif

  if (busy) {return; } // The busy-flag is used to avoid reentering this interrupt
 8008514:	4d8f      	ldr	r5, [pc, #572]	; (8008754 <TIM2_IRQHandler+0x254>)
		TIM2->SR = ~TIM_SR_UIF; // clear UIF flag
 8008516:	8219      	strh	r1, [r3, #16]
		TIM2->CNT = 0;
 8008518:	849a      	strh	r2, [r3, #36]	; 0x24
  if (busy) {return; } // The busy-flag is used to avoid reentering this interrupt
 800851a:	782a      	ldrb	r2, [r5, #0]
 800851c:	2a00      	cmp	r2, #0
 800851e:	f040 8086 	bne.w	800862e <TIM2_IRQHandler+0x12e>
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (st.dir_outbits & DIRECTION_MASK);
#endif
#ifdef STM32F103C8
  //GPIO_Write(DIRECTION_PORT, (GPIO_ReadOutputData(DIRECTION_PORT) & ~DIRECTION_MASK) | (st.dir_outbits & DIRECTION_MASK));
  DIRECTION_PORT->ODR = ((DIRECTION_PORT->ODR & ~DIRECTION_MASK) | (st.dir_outbits & DIRECTION_MASK));
  TIM3->SR = ~( TIM_SR_UIF | TIM_SR_CC1IF);
 8008522:	f64f 77fc 	movw	r7, #65532	; 0xfffc
  nTimer0Out = st.step_pulse_time;
#endif
#ifdef STM32F103C8
  TIM3->CR1 |= TIM_CR1_CEN;
#endif
  busy = true;
 8008526:	2601      	movs	r6, #1
  DIRECTION_PORT->ODR = ((DIRECTION_PORT->ODR & ~DIRECTION_MASK) | (st.dir_outbits & DIRECTION_MASK));
 8008528:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800852c:	4c8a      	ldr	r4, [pc, #552]	; (8008758 <TIM2_IRQHandler+0x258>)
 800852e:	f601 0102 	addw	r1, r1, #2050	; 0x802
 8008532:	68c8      	ldr	r0, [r1, #12]
 8008534:	8ae2      	ldrh	r2, [r4, #22]
 8008536:	f020 00f0 	bic.w	r0, r0, #240	; 0xf0
 800853a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800853e:	4302      	orrs	r2, r0
  TIM3->SR = ~( TIM_SR_UIF | TIM_SR_CC1IF);
 8008540:	4886      	ldr	r0, [pc, #536]	; (800875c <TIM2_IRQHandler+0x25c>)
  DIRECTION_PORT->ODR = ((DIRECTION_PORT->ODR & ~DIRECTION_MASK) | (st.dir_outbits & DIRECTION_MASK));
 8008542:	60ca      	str	r2, [r1, #12]
  TIM3->SR = ~( TIM_SR_UIF | TIM_SR_CC1IF);
 8008544:	8207      	strh	r7, [r0, #16]
      STEP_PORT->ODR = ((STEP_PORT->ODR & ~STEP_MASK) | st.step_outbits);
 8008546:	68ca      	ldr	r2, [r1, #12]
 8008548:	8aa7      	ldrh	r7, [r4, #20]
 800854a:	f022 020f 	bic.w	r2, r2, #15
 800854e:	433a      	orrs	r2, r7
 8008550:	60ca      	str	r2, [r1, #12]
  TIM3->CR1 |= TIM_CR1_CEN;
 8008552:	8802      	ldrh	r2, [r0, #0]
  sei(); // Re-enable interrupts to allow Stepper Port Reset Interrupt to fire on-time.
         // NOTE: The remaining code in this ISR will finish before returning to main program.
#endif

  // If there is no step segment, attempt to pop one from the stepper buffer
  if (st.exec_segment == NULL) {
 8008554:	6b21      	ldr	r1, [r4, #48]	; 0x30
  TIM3->CR1 |= TIM_CR1_CEN;
 8008556:	4332      	orrs	r2, r6
 8008558:	8002      	strh	r2, [r0, #0]
  busy = true;
 800855a:	702e      	strb	r6, [r5, #0]
  if (st.exec_segment == NULL) {
 800855c:	2900      	cmp	r1, #0
 800855e:	d076      	beq.n	800864e <TIM2_IRQHandler+0x14e>
    }
  }


  // Check probing state.
  if (sys_probe_state == PROBE_ACTIVE) { probe_state_monitor(); }
 8008560:	4b7f      	ldr	r3, [pc, #508]	; (8008760 <TIM2_IRQHandler+0x260>)
 8008562:	781b      	ldrb	r3, [r3, #0]
 8008564:	2b01      	cmp	r3, #1
 8008566:	f000 80b8 	beq.w	80086da <TIM2_IRQHandler+0x1da>

  // Reset step out bits.
  st.step_outbits = 0;
 800856a:	2300      	movs	r3, #0
  #ifdef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
    st.counter_x += st.steps[X_AXIS];
  #else
    st.counter_x += st.exec_block->steps[X_AXIS];
  #endif
  if (st.counter_x > st.exec_block->step_event_count) {
 800856c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    st.counter_x += st.steps[X_AXIS];
 800856e:	6821      	ldr	r1, [r4, #0]
 8008570:	69a6      	ldr	r6, [r4, #24]
  if (st.counter_x > st.exec_block->step_event_count) {
 8008572:	6902      	ldr	r2, [r0, #16]
    st.counter_x += st.steps[X_AXIS];
 8008574:	4431      	add	r1, r6
  if (st.counter_x > st.exec_block->step_event_count) {
 8008576:	4291      	cmp	r1, r2
    st.counter_x += st.steps[X_AXIS];
 8008578:	6021      	str	r1, [r4, #0]
  st.step_outbits = 0;
 800857a:	82a3      	strh	r3, [r4, #20]
  if (st.counter_x > st.exec_block->step_event_count) {
 800857c:	d858      	bhi.n	8008630 <TIM2_IRQHandler+0x130>
 800857e:	2702      	movs	r7, #2
    st.counter_x -= st.exec_block->step_event_count;
    if (st.exec_block->direction_bits & (1<<X_DIRECTION_BIT)) { sys_position[X_AXIS]--; }
    else { sys_position[X_AXIS]++; }
  }
  #ifdef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
    st.counter_y += st.steps[Y_AXIS];
 8008580:	6861      	ldr	r1, [r4, #4]
 8008582:	69e6      	ldr	r6, [r4, #28]
 8008584:	4431      	add	r1, r6
  #else
    st.counter_y += st.exec_block->steps[Y_AXIS];
  #endif
  if (st.counter_y > st.exec_block->step_event_count) {
 8008586:	428a      	cmp	r2, r1
    st.counter_y += st.steps[Y_AXIS];
 8008588:	6061      	str	r1, [r4, #4]
  if (st.counter_y > st.exec_block->step_event_count) {
 800858a:	d20b      	bcs.n	80085a4 <TIM2_IRQHandler+0xa4>
    st.step_outbits |= (1<<Y_STEP_BIT);
    st.counter_y -= st.exec_block->step_event_count;
    if (st.exec_block->direction_bits & (1<<Y_DIRECTION_BIT)) { sys_position[Y_AXIS]--; }
 800858c:	8a83      	ldrh	r3, [r0, #20]
 800858e:	4e75      	ldr	r6, [pc, #468]	; (8008764 <TIM2_IRQHandler+0x264>)
    st.counter_y -= st.exec_block->step_event_count;
 8008590:	1a89      	subs	r1, r1, r2
    if (st.exec_block->direction_bits & (1<<Y_DIRECTION_BIT)) { sys_position[Y_AXIS]--; }
 8008592:	069b      	lsls	r3, r3, #26
    st.counter_y -= st.exec_block->step_event_count;
 8008594:	6061      	str	r1, [r4, #4]
    st.step_outbits |= (1<<Y_STEP_BIT);
 8008596:	82a7      	strh	r7, [r4, #20]
 8008598:	6871      	ldr	r1, [r6, #4]
    if (st.exec_block->direction_bits & (1<<Y_DIRECTION_BIT)) { sys_position[Y_AXIS]--; }
 800859a:	f140 809a 	bpl.w	80086d2 <TIM2_IRQHandler+0x1d2>
 800859e:	463b      	mov	r3, r7
 80085a0:	3901      	subs	r1, #1
 80085a2:	6071      	str	r1, [r6, #4]
    else { sys_position[Y_AXIS]++; }
  }
  #ifdef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
    st.counter_z += st.steps[Z_AXIS];
 80085a4:	68a1      	ldr	r1, [r4, #8]
 80085a6:	6a26      	ldr	r6, [r4, #32]
 80085a8:	4431      	add	r1, r6
  #else
    st.counter_z += st.exec_block->steps[Z_AXIS];
  #endif
  if (st.counter_z > st.exec_block->step_event_count) {
 80085aa:	428a      	cmp	r2, r1
    st.counter_z += st.steps[Z_AXIS];
 80085ac:	60a1      	str	r1, [r4, #8]
  if (st.counter_z > st.exec_block->step_event_count) {
 80085ae:	d20e      	bcs.n	80085ce <TIM2_IRQHandler+0xce>
 80085b0:	4e6c      	ldr	r6, [pc, #432]	; (8008764 <TIM2_IRQHandler+0x264>)
    st.step_outbits |= (1<<Z_STEP_BIT);
    st.counter_z -= st.exec_block->step_event_count;
    if (st.exec_block->direction_bits & (1<<Z_DIRECTION_BIT)) { sys_position[Z_AXIS]--; }
 80085b2:	8a87      	ldrh	r7, [r0, #20]
    st.counter_z -= st.exec_block->step_event_count;
 80085b4:	1a89      	subs	r1, r1, r2
 80085b6:	60a1      	str	r1, [r4, #8]
 80085b8:	68b1      	ldr	r1, [r6, #8]
    if (st.exec_block->direction_bits & (1<<Z_DIRECTION_BIT)) { sys_position[Z_AXIS]--; }
 80085ba:	067f      	lsls	r7, r7, #25
    st.step_outbits |= (1<<Z_STEP_BIT);
 80085bc:	f043 0304 	orr.w	r3, r3, #4
 80085c0:	b29b      	uxth	r3, r3
    if (st.exec_block->direction_bits & (1<<Z_DIRECTION_BIT)) { sys_position[Z_AXIS]--; }
 80085c2:	bf4c      	ite	mi
 80085c4:	f101 31ff 	addmi.w	r1, r1, #4294967295
    else { sys_position[Z_AXIS]++; }
 80085c8:	3101      	addpl	r1, #1
    st.step_outbits |= (1<<Z_STEP_BIT);
 80085ca:	82a3      	strh	r3, [r4, #20]
    else { sys_position[Z_AXIS]++; }
 80085cc:	60b1      	str	r1, [r6, #8]
  }
// --- YSV 22-06-2018
  #if defined(AA_AXIS) || defined(AB_AXIS) || defined(ABC_AXIS)
  #ifdef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
    st.counter_a += st.steps[A_AXIS];
 80085ce:	68e1      	ldr	r1, [r4, #12]
 80085d0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80085d2:	4431      	add	r1, r6
  #else
    st.counter_a += st.exec_block->steps[A_AXIS];
  #endif
  if (st.counter_a > st.exec_block->step_event_count) {
 80085d4:	428a      	cmp	r2, r1
    st.counter_a += st.steps[A_AXIS];
 80085d6:	60e1      	str	r1, [r4, #12]
  if (st.counter_a > st.exec_block->step_event_count) {
 80085d8:	d20e      	bcs.n	80085f8 <TIM2_IRQHandler+0xf8>
    st.step_outbits |= (1<<A_STEP_BIT);
    st.counter_a -= st.exec_block->step_event_count;
    if (st.exec_block->direction_bits & (1<<A_DIRECTION_BIT)) { sys_position[A_AXIS]--; }
 80085da:	8a86      	ldrh	r6, [r0, #20]
 80085dc:	4861      	ldr	r0, [pc, #388]	; (8008764 <TIM2_IRQHandler+0x264>)
    st.counter_a -= st.exec_block->step_event_count;
 80085de:	1a8a      	subs	r2, r1, r2
 80085e0:	60e2      	str	r2, [r4, #12]
 80085e2:	68c2      	ldr	r2, [r0, #12]
    if (st.exec_block->direction_bits & (1<<A_DIRECTION_BIT)) { sys_position[A_AXIS]--; }
 80085e4:	0631      	lsls	r1, r6, #24
    st.step_outbits |= (1<<A_STEP_BIT);
 80085e6:	f043 0308 	orr.w	r3, r3, #8
 80085ea:	b29b      	uxth	r3, r3
    if (st.exec_block->direction_bits & (1<<A_DIRECTION_BIT)) { sys_position[A_AXIS]--; }
 80085ec:	bf4c      	ite	mi
 80085ee:	f102 32ff 	addmi.w	r2, r2, #4294967295
    else { sys_position[A_AXIS]++; }
 80085f2:	3201      	addpl	r2, #1
    st.step_outbits |= (1<<A_STEP_BIT);
 80085f4:	82a3      	strh	r3, [r4, #20]
    else { sys_position[A_AXIS]++; }
 80085f6:	60c2      	str	r2, [r0, #12]
    else { sys_position[C_AXIS]++; }
  }
  #endif
// ---
  // During a homing cycle, lock out and prevent desired axes from moving.
  if (sys.state == STATE_HOMING) { st.step_outbits &= sys.homing_axis_lock; }
 80085f8:	4a5b      	ldr	r2, [pc, #364]	; (8008768 <TIM2_IRQHandler+0x268>)
 80085fa:	7811      	ldrb	r1, [r2, #0]
 80085fc:	2904      	cmp	r1, #4
 80085fe:	d102      	bne.n	8008606 <TIM2_IRQHandler+0x106>
 8008600:	88d2      	ldrh	r2, [r2, #6]
 8008602:	4013      	ands	r3, r2
 8008604:	82a3      	strh	r3, [r4, #20]

  st.step_count--; // Decrement step events count
 8008606:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8008608:	3a01      	subs	r2, #1
 800860a:	b292      	uxth	r2, r2
 800860c:	8522      	strh	r2, [r4, #40]	; 0x28
  if (st.step_count == 0) {
 800860e:	b942      	cbnz	r2, 8008622 <TIM2_IRQHandler+0x122>
    // Segment is complete. Discard current segment and advance segment indexing.
    st.exec_segment = NULL;
#ifndef WIN32
	uint8_t segment_tail_next = segment_buffer_tail + 1;
 8008610:	4956      	ldr	r1, [pc, #344]	; (800876c <TIM2_IRQHandler+0x26c>)
    st.exec_segment = NULL;
 8008612:	6322      	str	r2, [r4, #48]	; 0x30
	uint8_t segment_tail_next = segment_buffer_tail + 1;
 8008614:	780a      	ldrb	r2, [r1, #0]
 8008616:	3201      	adds	r2, #1
 8008618:	b2d2      	uxtb	r2, r2
	if (segment_tail_next == SEGMENT_BUFFER_SIZE)
		segment_tail_next = 0;
 800861a:	2a0a      	cmp	r2, #10
 800861c:	bf08      	it	eq
 800861e:	2200      	moveq	r2, #0
	segment_buffer_tail = segment_tail_next;
 8008620:	700a      	strb	r2, [r1, #0]
	}
#endif
  }

  st.step_outbits ^= step_port_invert_mask;  // Apply step port invert mask
  busy = false;
 8008622:	2100      	movs	r1, #0
  st.step_outbits ^= step_port_invert_mask;  // Apply step port invert mask
 8008624:	4a52      	ldr	r2, [pc, #328]	; (8008770 <TIM2_IRQHandler+0x270>)
  busy = false;
 8008626:	7029      	strb	r1, [r5, #0]
  st.step_outbits ^= step_port_invert_mask;  // Apply step port invert mask
 8008628:	8812      	ldrh	r2, [r2, #0]
 800862a:	4053      	eors	r3, r2
 800862c:	82a3      	strh	r3, [r4, #20]
}
 800862e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    st.step_outbits |= (1<<X_STEP_BIT);
 8008630:	2301      	movs	r3, #1
 8008632:	4e4c      	ldr	r6, [pc, #304]	; (8008764 <TIM2_IRQHandler+0x264>)
    if (st.exec_block->direction_bits & (1<<X_DIRECTION_BIT)) { sys_position[X_AXIS]--; }
 8008634:	8a87      	ldrh	r7, [r0, #20]
    st.counter_x -= st.exec_block->step_event_count;
 8008636:	1a89      	subs	r1, r1, r2
 8008638:	6021      	str	r1, [r4, #0]
 800863a:	6831      	ldr	r1, [r6, #0]
    if (st.exec_block->direction_bits & (1<<X_DIRECTION_BIT)) { sys_position[X_AXIS]--; }
 800863c:	06ff      	lsls	r7, r7, #27
 800863e:	bf4c      	ite	mi
 8008640:	f101 31ff 	addmi.w	r1, r1, #4294967295
    else { sys_position[X_AXIS]++; }
 8008644:	3101      	addpl	r1, #1
    st.step_outbits |= (1<<X_STEP_BIT);
 8008646:	82a3      	strh	r3, [r4, #20]
    else { sys_position[X_AXIS]++; }
 8008648:	6031      	str	r1, [r6, #0]
 800864a:	2703      	movs	r7, #3
 800864c:	e798      	b.n	8008580 <TIM2_IRQHandler+0x80>
    if (segment_buffer_head != segment_buffer_tail) {
 800864e:	4a47      	ldr	r2, [pc, #284]	; (800876c <TIM2_IRQHandler+0x26c>)
 8008650:	4e48      	ldr	r6, [pc, #288]	; (8008774 <TIM2_IRQHandler+0x274>)
 8008652:	7810      	ldrb	r0, [r2, #0]
 8008654:	7836      	ldrb	r6, [r6, #0]
 8008656:	4286      	cmp	r6, r0
 8008658:	d044      	beq.n	80086e4 <TIM2_IRQHandler+0x1e4>
      st.exec_segment = &segment_buffer[segment_buffer_tail];
 800865a:	7810      	ldrb	r0, [r2, #0]
 800865c:	4a46      	ldr	r2, [pc, #280]	; (8008778 <TIM2_IRQHandler+0x278>)
 800865e:	b2c0      	uxtb	r0, r0
 8008660:	00c7      	lsls	r7, r0, #3
 8008662:	19d6      	adds	r6, r2, r7
	  TIM2->ARR = st.exec_segment->cycles_per_tick - 1;
 8008664:	8871      	ldrh	r1, [r6, #2]
      st.exec_segment = &segment_buffer[segment_buffer_tail];
 8008666:	6326      	str	r6, [r4, #48]	; 0x30
	  TIM2->ARR = st.exec_segment->cycles_per_tick - 1;
 8008668:	3901      	subs	r1, #1
 800866a:	b289      	uxth	r1, r1
 800866c:	8599      	strh	r1, [r3, #44]	; 0x2c
      st.step_count = st.exec_segment->n_step; // NOTE: Can sometimes be zero when moving slow.
 800866e:	f832 1030 	ldrh.w	r1, [r2, r0, lsl #3]
      if ( st.exec_block_index != st.exec_segment->st_block_index ) {
 8008672:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8008676:	7930      	ldrb	r0, [r6, #4]
      st.step_count = st.exec_segment->n_step; // NOTE: Can sometimes be zero when moving slow.
 8008678:	8521      	strh	r1, [r4, #40]	; 0x28
      if ( st.exec_block_index != st.exec_segment->st_block_index ) {
 800867a:	4283      	cmp	r3, r0
 800867c:	d030      	beq.n	80086e0 <TIM2_IRQHandler+0x1e0>
        st.exec_block = &st_block_buffer[st.exec_block_index];
 800867e:	4b3f      	ldr	r3, [pc, #252]	; (800877c <TIM2_IRQHandler+0x27c>)
 8008680:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 8008684:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
        st.counter_x = st.counter_y = st.counter_z = st.counter_a = (st.exec_block->step_event_count >> 1);
 8008688:	6919      	ldr	r1, [r3, #16]
        st.exec_block_index = st.exec_segment->st_block_index;
 800868a:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
        st.counter_x = st.counter_y = st.counter_z = st.counter_a = (st.exec_block->step_event_count >> 1);
 800868e:	0849      	lsrs	r1, r1, #1
 8008690:	e9c4 1102 	strd	r1, r1, [r4, #8]
 8008694:	e9c4 1100 	strd	r1, r1, [r4]
        st.exec_block = &st_block_buffer[st.exec_block_index];
 8008698:	62e3      	str	r3, [r4, #44]	; 0x2c
      st.dir_outbits = st.exec_block->direction_bits ^ dir_port_invert_mask;
 800869a:	4839      	ldr	r0, [pc, #228]	; (8008780 <TIM2_IRQHandler+0x280>)
        st.steps[X_AXIS] = st.exec_block->steps[X_AXIS] >> st.exec_segment->amass_level;
 800869c:	443a      	add	r2, r7
        st.steps[Y_AXIS] = st.exec_block->steps[Y_AXIS] >> st.exec_segment->amass_level;
 800869e:	685e      	ldr	r6, [r3, #4]
      st.dir_outbits = st.exec_block->direction_bits ^ dir_port_invert_mask;
 80086a0:	8a9f      	ldrh	r7, [r3, #20]
        st.steps[X_AXIS] = st.exec_block->steps[X_AXIS] >> st.exec_segment->amass_level;
 80086a2:	7951      	ldrb	r1, [r2, #5]
      st.dir_outbits = st.exec_block->direction_bits ^ dir_port_invert_mask;
 80086a4:	f8b0 e000 	ldrh.w	lr, [r0]
        spindle_set_speed(st.exec_segment->spindle_pwm);
 80086a8:	7990      	ldrb	r0, [r2, #6]
        st.steps[X_AXIS] = st.exec_block->steps[X_AXIS] >> st.exec_segment->amass_level;
 80086aa:	681a      	ldr	r2, [r3, #0]
        st.steps[Y_AXIS] = st.exec_block->steps[Y_AXIS] >> st.exec_segment->amass_level;
 80086ac:	40ce      	lsrs	r6, r1
        st.steps[X_AXIS] = st.exec_block->steps[X_AXIS] >> st.exec_segment->amass_level;
 80086ae:	fa22 fc01 	lsr.w	ip, r2, r1
      st.dir_outbits = st.exec_block->direction_bits ^ dir_port_invert_mask;
 80086b2:	ea87 070e 	eor.w	r7, r7, lr
		st.steps[A_AXIS] = st.exec_block->steps[A_AXIS] >> st.exec_segment->amass_level;
 80086b6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
        st.steps[Z_AXIS] = st.exec_block->steps[Z_AXIS] >> st.exec_segment->amass_level;
 80086ba:	40ca      	lsrs	r2, r1
		st.steps[A_AXIS] = st.exec_block->steps[A_AXIS] >> st.exec_segment->amass_level;
 80086bc:	fa23 f101 	lsr.w	r1, r3, r1
        st.steps[X_AXIS] = st.exec_block->steps[X_AXIS] >> st.exec_segment->amass_level;
 80086c0:	f8c4 c018 	str.w	ip, [r4, #24]
      st.dir_outbits = st.exec_block->direction_bits ^ dir_port_invert_mask;
 80086c4:	82e7      	strh	r7, [r4, #22]
        st.steps[Z_AXIS] = st.exec_block->steps[Z_AXIS] >> st.exec_segment->amass_level;
 80086c6:	e9c4 6207 	strd	r6, r2, [r4, #28]
		st.steps[A_AXIS] = st.exec_block->steps[A_AXIS] >> st.exec_segment->amass_level;
 80086ca:	6261      	str	r1, [r4, #36]	; 0x24
        spindle_set_speed(st.exec_segment->spindle_pwm);
 80086cc:	f7ff fd04 	bl	80080d8 <spindle_set_speed>
 80086d0:	e746      	b.n	8008560 <TIM2_IRQHandler+0x60>
    else { sys_position[Y_AXIS]++; }
 80086d2:	3101      	adds	r1, #1
 80086d4:	463b      	mov	r3, r7
 80086d6:	6071      	str	r1, [r6, #4]
 80086d8:	e764      	b.n	80085a4 <TIM2_IRQHandler+0xa4>
  if (sys_probe_state == PROBE_ACTIVE) { probe_state_monitor(); }
 80086da:	f7fc fe3b 	bl	8005354 <probe_state_monitor>
 80086de:	e744      	b.n	800856a <TIM2_IRQHandler+0x6a>
 80086e0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80086e2:	e7da      	b.n	800869a <TIM2_IRQHandler+0x19a>
  TIM2->CR1 &= ~TIM_CR1_CEN;
 80086e4:	881a      	ldrh	r2, [r3, #0]
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 80086e6:	4e27      	ldr	r6, [pc, #156]	; (8008784 <TIM2_IRQHandler+0x284>)
  TIM2->CR1 &= ~TIM_CR1_CEN;
 80086e8:	f022 0201 	bic.w	r2, r2, #1
 80086ec:	0412      	lsls	r2, r2, #16
 80086ee:	0c12      	lsrs	r2, r2, #16
 80086f0:	801a      	strh	r2, [r3, #0]
  TIM2->CNT = 0;
 80086f2:	8499      	strh	r1, [r3, #36]	; 0x24
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 80086f4:	f896 0046 	ldrb.w	r0, [r6, #70]	; 0x46
 80086f8:	4a1b      	ldr	r2, [pc, #108]	; (8008768 <TIM2_IRQHandler+0x268>)
 80086fa:	28ff      	cmp	r0, #255	; 0xff
  busy = false;
 80086fc:	7029      	strb	r1, [r5, #0]
 80086fe:	7813      	ldrb	r3, [r2, #0]
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 8008700:	d015      	beq.n	800872e <TIM2_IRQHandler+0x22e>
 8008702:	2b04      	cmp	r3, #4
 8008704:	d119      	bne.n	800873a <TIM2_IRQHandler+0x23a>
  if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE)) { pin_state = !pin_state; } // Apply pin invert.
 8008706:	f896 3058 	ldrb.w	r3, [r6, #88]	; 0x58
 800870a:	075a      	lsls	r2, r3, #29
 800870c:	d41b      	bmi.n	8008746 <TIM2_IRQHandler+0x246>
	  ResetStepperDisableBit();
 800870e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008712:	481d      	ldr	r0, [pc, #116]	; (8008788 <TIM2_IRQHandler+0x288>)
 8008714:	f7f8 ffe2 	bl	80016dc <GPIO_ResetBits>
      if (st.exec_block->is_pwm_rate_adjusted) { spindle_set_speed(SPINDLE_PWM_OFF_VALUE); }
 8008718:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800871a:	7d9b      	ldrb	r3, [r3, #22]
 800871c:	b113      	cbz	r3, 8008724 <TIM2_IRQHandler+0x224>
 800871e:	2000      	movs	r0, #0
 8008720:	f7ff fcda 	bl	80080d8 <spindle_set_speed>
}
 8008724:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      system_set_exec_state_flag(EXEC_CYCLE_STOP); // Flag main program for cycle end
 8008728:	2004      	movs	r0, #4
 800872a:	f001 bb19 	b.w	8009d60 <system_set_exec_state_flag>
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 800872e:	4a17      	ldr	r2, [pc, #92]	; (800878c <TIM2_IRQHandler+0x28c>)
 8008730:	7812      	ldrb	r2, [r2, #0]
 8008732:	2a00      	cmp	r2, #0
 8008734:	d1e5      	bne.n	8008702 <TIM2_IRQHandler+0x202>
 8008736:	2b80      	cmp	r3, #128	; 0x80
 8008738:	d1e5      	bne.n	8008706 <TIM2_IRQHandler+0x206>
    delay_ms(settings.stepper_idle_lock_time);
 800873a:	f7fb fd5d 	bl	80041f8 <delay_ms>
  if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE)) { pin_state = !pin_state; } // Apply pin invert.
 800873e:	f896 3058 	ldrb.w	r3, [r6, #88]	; 0x58
 8008742:	075b      	lsls	r3, r3, #29
 8008744:	d4e3      	bmi.n	800870e <TIM2_IRQHandler+0x20e>
	  SetStepperDisableBit();
 8008746:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800874a:	480f      	ldr	r0, [pc, #60]	; (8008788 <TIM2_IRQHandler+0x288>)
 800874c:	f7f8 ffc4 	bl	80016d8 <GPIO_SetBits>
 8008750:	e7e2      	b.n	8008718 <TIM2_IRQHandler+0x218>
 8008752:	bf00      	nop
 8008754:	20000db8 	.word	0x20000db8
 8008758:	20000e4c 	.word	0x20000e4c
 800875c:	40000400 	.word	0x40000400
 8008760:	2000141e 	.word	0x2000141e
 8008764:	20001430 	.word	0x20001430
 8008768:	20001408 	.word	0x20001408
 800876c:	20000e49 	.word	0x20000e49
 8008770:	20000f5c 	.word	0x20000f5c
 8008774:	20000e48 	.word	0x20000e48
 8008778:	20000df8 	.word	0x20000df8
 800877c:	20000e80 	.word	0x20000e80
 8008780:	20000dba 	.word	0x20000dba
 8008784:	20001744 	.word	0x20001744
 8008788:	40010800 	.word	0x40010800
 800878c:	20001440 	.word	0x20001440

08008790 <TIM3_IRQHandler>:
ISR(TIMER0_OVF_vect)
#endif
#ifdef WIN32
void Timer0Proc()
#endif
{
 8008790:	b410      	push	{r4}
#endif
	{
		STEP_PORT->ODR = ((STEP_PORT->ODR & ~STEP_MASK) | (step_port_invert_mask & STEP_MASK));
		TIM3->CR1 &= ~TIM_CR1_CEN;
		TIM3->SR = ~(TIM_SR_UIF | TIM_SR_CC1IF); // clear UIF flag
		TIM3->CNT = 0;
 8008792:	2000      	movs	r0, #0
		TIM3->SR = ~(TIM_SR_UIF | TIM_SR_CC1IF); // clear UIF flag
 8008794:	f64f 74fc 	movw	r4, #65532	; 0xfffc
		STEP_PORT->ODR = ((STEP_PORT->ODR & ~STEP_MASK) | (step_port_invert_mask & STEP_MASK));
 8008798:	490a      	ldr	r1, [pc, #40]	; (80087c4 <TIM3_IRQHandler+0x34>)
 800879a:	4b0b      	ldr	r3, [pc, #44]	; (80087c8 <TIM3_IRQHandler+0x38>)
 800879c:	68ca      	ldr	r2, [r1, #12]
 800879e:	881b      	ldrh	r3, [r3, #0]
 80087a0:	f022 020f 	bic.w	r2, r2, #15
 80087a4:	f003 030f 	and.w	r3, r3, #15
 80087a8:	4313      	orrs	r3, r2
		TIM3->CR1 &= ~TIM_CR1_CEN;
 80087aa:	4a08      	ldr	r2, [pc, #32]	; (80087cc <TIM3_IRQHandler+0x3c>)
		STEP_PORT->ODR = ((STEP_PORT->ODR & ~STEP_MASK) | (step_port_invert_mask & STEP_MASK));
 80087ac:	60cb      	str	r3, [r1, #12]
		TIM3->CR1 &= ~TIM_CR1_CEN;
 80087ae:	8813      	ldrh	r3, [r2, #0]
 80087b0:	f023 0301 	bic.w	r3, r3, #1
 80087b4:	041b      	lsls	r3, r3, #16
 80087b6:	0c1b      	lsrs	r3, r3, #16
 80087b8:	8013      	strh	r3, [r2, #0]
		TIM3->SR = ~(TIM_SR_UIF | TIM_SR_CC1IF); // clear UIF flag
 80087ba:	8214      	strh	r4, [r2, #16]
		TIM3->CNT = 0;
 80087bc:	8490      	strh	r0, [r2, #36]	; 0x24
  TCCR0B = 0; // Disable Timer0 to prevent re-entering this interrupt when it's not needed.
#endif
#ifdef WIN32
  nTimer0Out = 0;
#endif
}
 80087be:	bc10      	pop	{r4}
 80087c0:	4770      	bx	lr
 80087c2:	bf00      	nop
 80087c4:	40010800 	.word	0x40010800
 80087c8:	20000f5c 	.word	0x20000f5c
 80087cc:	40000400 	.word	0x40000400

080087d0 <st_generate_step_dir_invert_masks>:
{
  uint8_t idx;
  step_port_invert_mask = 0;
  dir_port_invert_mask = 0;
  for (idx=0; idx<N_AXIS; idx++) {
    if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 80087d0:	4b16      	ldr	r3, [pc, #88]	; (800882c <st_generate_step_dir_invert_masks+0x5c>)
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 80087d2:	f8b3 1044 	ldrh.w	r1, [r3, #68]	; 0x44
    if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 80087d6:	f8b3 0042 	ldrh.w	r0, [r3, #66]	; 0x42
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 80087da:	f011 0f01 	tst.w	r1, #1
 80087de:	bf14      	ite	ne
 80087e0:	2310      	movne	r3, #16
 80087e2:	2300      	moveq	r3, #0
    if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 80087e4:	f000 0201 	and.w	r2, r0, #1
 80087e8:	f010 0f02 	tst.w	r0, #2
 80087ec:	bf18      	it	ne
 80087ee:	f042 0202 	orrne.w	r2, r2, #2
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 80087f2:	f011 0f02 	tst.w	r1, #2
 80087f6:	bf18      	it	ne
 80087f8:	f043 0320 	orrne.w	r3, r3, #32
    if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 80087fc:	f010 0f04 	tst.w	r0, #4
 8008800:	bf18      	it	ne
 8008802:	f042 0204 	orrne.w	r2, r2, #4
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 8008806:	f011 0f04 	tst.w	r1, #4
 800880a:	bf18      	it	ne
 800880c:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
    if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 8008810:	0700      	lsls	r0, r0, #28
 8008812:	bf48      	it	mi
 8008814:	f042 0208 	orrmi.w	r2, r2, #8
 8008818:	4805      	ldr	r0, [pc, #20]	; (8008830 <st_generate_step_dir_invert_masks+0x60>)
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 800881a:	0709      	lsls	r1, r1, #28
 800881c:	4905      	ldr	r1, [pc, #20]	; (8008834 <st_generate_step_dir_invert_masks+0x64>)
 800881e:	bf48      	it	mi
 8008820:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 8008824:	8002      	strh	r2, [r0, #0]
 8008826:	800b      	strh	r3, [r1, #0]
  }
}
 8008828:	4770      	bx	lr
 800882a:	bf00      	nop
 800882c:	20001744 	.word	0x20001744
 8008830:	20000f5c 	.word	0x20000f5c
 8008834:	20000dba 	.word	0x20000dba

08008838 <st_reset>:
  TIM2->CR1 &= ~TIM_CR1_CEN;
 8008838:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  TIM2->CNT = 0;
 800883c:	2100      	movs	r1, #0


// Reset and clear stepper subsystem variables
void st_reset()
{
 800883e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  TIM2->CR1 &= ~TIM_CR1_CEN;
 8008840:	8813      	ldrh	r3, [r2, #0]
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 8008842:	4c3f      	ldr	r4, [pc, #252]	; (8008940 <st_reset+0x108>)
  TIM2->CR1 &= ~TIM_CR1_CEN;
 8008844:	f023 0301 	bic.w	r3, r3, #1
 8008848:	041b      	lsls	r3, r3, #16
 800884a:	0c1b      	lsrs	r3, r3, #16
 800884c:	8013      	strh	r3, [r2, #0]
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 800884e:	f894 0046 	ldrb.w	r0, [r4, #70]	; 0x46
  busy = false;
 8008852:	4d3c      	ldr	r5, [pc, #240]	; (8008944 <st_reset+0x10c>)
 8008854:	4e3c      	ldr	r6, [pc, #240]	; (8008948 <st_reset+0x110>)
  TIM2->CNT = 0;
 8008856:	8491      	strh	r1, [r2, #36]	; 0x24
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 8008858:	28ff      	cmp	r0, #255	; 0xff
 800885a:	7833      	ldrb	r3, [r6, #0]
  busy = false;
 800885c:	7029      	strb	r1, [r5, #0]
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 800885e:	d05c      	beq.n	800891a <st_reset+0xe2>
 8008860:	2b04      	cmp	r3, #4
 8008862:	d160      	bne.n	8008926 <st_reset+0xee>
  if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE)) { pin_state = !pin_state; } // Apply pin invert.
 8008864:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8008868:	075f      	lsls	r7, r3, #29
 800886a:	d462      	bmi.n	8008932 <st_reset+0xfa>
	  ResetStepperDisableBit();
 800886c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008870:	4836      	ldr	r0, [pc, #216]	; (800894c <st_reset+0x114>)
 8008872:	f7f8 ff33 	bl	80016dc <GPIO_ResetBits>
  // Initialize stepper driver idle state.
  st_go_idle();
  // Initialize stepper algorithm variables.
  memset(&prep, 0, sizeof(st_prep_t));
 8008876:	2238      	movs	r2, #56	; 0x38
 8008878:	2100      	movs	r1, #0
 800887a:	4835      	ldr	r0, [pc, #212]	; (8008950 <st_reset+0x118>)
 800887c:	f002 fed1 	bl	800b622 <memset>
  memset(&st, 0, sizeof(stepper_t));
 8008880:	2234      	movs	r2, #52	; 0x34
 8008882:	2100      	movs	r1, #0
 8008884:	4833      	ldr	r0, [pc, #204]	; (8008954 <st_reset+0x11c>)
 8008886:	f002 fecc 	bl	800b622 <memset>
  st.exec_segment = NULL;
  pl_block = NULL;  // Planner block pointer used by segment buffer
 800888a:	2200      	movs	r2, #0
  segment_buffer_tail = 0;
 800888c:	4832      	ldr	r0, [pc, #200]	; (8008958 <st_reset+0x120>)
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 800888e:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
  segment_buffer_tail = 0;
 8008892:	7002      	strb	r2, [r0, #0]
  segment_buffer_head = 0; // empty = tail
  segment_next_head = 1;
 8008894:	2601      	movs	r6, #1
  pl_block = NULL;  // Planner block pointer used by segment buffer
 8008896:	4f31      	ldr	r7, [pc, #196]	; (800895c <st_reset+0x124>)
  segment_buffer_head = 0; // empty = tail
 8008898:	4831      	ldr	r0, [pc, #196]	; (8008960 <st_reset+0x128>)
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 800889a:	f013 0f01 	tst.w	r3, #1
  busy = false;
 800889e:	702a      	strb	r2, [r5, #0]
  pl_block = NULL;  // Planner block pointer used by segment buffer
 80088a0:	603a      	str	r2, [r7, #0]
  segment_buffer_head = 0; // empty = tail
 80088a2:	7002      	strb	r2, [r0, #0]
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 80088a4:	bf18      	it	ne
 80088a6:	2210      	movne	r2, #16
    if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 80088a8:	f8b4 1042 	ldrh.w	r1, [r4, #66]	; 0x42
  segment_next_head = 1;
 80088ac:	4c2d      	ldr	r4, [pc, #180]	; (8008964 <st_reset+0x12c>)
    if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 80088ae:	ea01 0006 	and.w	r0, r1, r6
  segment_next_head = 1;
 80088b2:	7026      	strb	r6, [r4, #0]
    if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 80088b4:	078c      	lsls	r4, r1, #30
 80088b6:	bf48      	it	mi
 80088b8:	f040 0002 	orrmi.w	r0, r0, #2
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 80088bc:	079f      	lsls	r7, r3, #30
 80088be:	bf48      	it	mi
 80088c0:	f042 0220 	orrmi.w	r2, r2, #32
    if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 80088c4:	074e      	lsls	r6, r1, #29
 80088c6:	bf48      	it	mi
 80088c8:	f040 0004 	orrmi.w	r0, r0, #4
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 80088cc:	075d      	lsls	r5, r3, #29
 80088ce:	bf48      	it	mi
 80088d0:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
    if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 80088d4:	070c      	lsls	r4, r1, #28
 80088d6:	bf48      	it	mi
 80088d8:	f040 0008 	orrmi.w	r0, r0, #8
 80088dc:	4d22      	ldr	r5, [pc, #136]	; (8008968 <st_reset+0x130>)
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 80088de:	0719      	lsls	r1, r3, #28
 80088e0:	4c22      	ldr	r4, [pc, #136]	; (800896c <st_reset+0x134>)

  st_generate_step_dir_invert_masks();
  st.dir_outbits = dir_port_invert_mask; // Initialize direction bits to default.
 80088e2:	4b1c      	ldr	r3, [pc, #112]	; (8008954 <st_reset+0x11c>)
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 80088e4:	bf48      	it	mi
 80088e6:	f042 0280 	orrmi.w	r2, r2, #128	; 0x80
#ifdef AVRTARGET
  STEP_PORT = (STEP_PORT & ~STEP_MASK) | step_port_invert_mask;
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | dir_port_invert_mask;
#endif
#ifdef STM32F103C8
  while(TIM3->CR1 & TIM_CR1_CEN); // wait for end of tim3 work to prevent cutoff last step pulse
 80088ea:	4921      	ldr	r1, [pc, #132]	; (8008970 <st_reset+0x138>)
 80088ec:	802a      	strh	r2, [r5, #0]
 80088ee:	8020      	strh	r0, [r4, #0]
  st.dir_outbits = dir_port_invert_mask; // Initialize direction bits to default.
 80088f0:	82da      	strh	r2, [r3, #22]
  while(TIM3->CR1 & TIM_CR1_CEN); // wait for end of tim3 work to prevent cutoff last step pulse
 80088f2:	880b      	ldrh	r3, [r1, #0]
 80088f4:	07db      	lsls	r3, r3, #31
 80088f6:	d4fc      	bmi.n	80088f2 <st_reset+0xba>
//#ifdef STEP_PULSE_DELAY
//	TIM3->DIER &= ~TIM_DIER_CC1IE; //compare interrupt disable
//#endif
  TIM3->SR = ~(TIM_SR_UIF | TIM_SR_CC1IF); // clear UIF and CC1IF flags
 80088f8:	f64f 73fc 	movw	r3, #65532	; 0xfffc
  STEP_PORT->ODR = ((STEP_PORT->ODR & ~STEP_MASK) | (step_port_invert_mask & STEP_MASK));
 80088fc:	4c13      	ldr	r4, [pc, #76]	; (800894c <st_reset+0x114>)
  TIM3->SR = ~(TIM_SR_UIF | TIM_SR_CC1IF); // clear UIF and CC1IF flags
 80088fe:	820b      	strh	r3, [r1, #16]
  STEP_PORT->ODR = ((STEP_PORT->ODR & ~STEP_MASK) | (step_port_invert_mask & STEP_MASK));
 8008900:	68e3      	ldr	r3, [r4, #12]
  DIRECTION_PORT->ODR = ((DIRECTION_PORT->ODR & ~DIRECTION_MASK) | (dir_port_invert_mask & DIRECTION_MASK));
 8008902:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
  STEP_PORT->ODR = ((STEP_PORT->ODR & ~STEP_MASK) | (step_port_invert_mask & STEP_MASK));
 8008906:	f023 030f 	bic.w	r3, r3, #15
 800890a:	4303      	orrs	r3, r0
 800890c:	60e3      	str	r3, [r4, #12]
  DIRECTION_PORT->ODR = ((DIRECTION_PORT->ODR & ~DIRECTION_MASK) | (dir_port_invert_mask & DIRECTION_MASK));
 800890e:	68e3      	ldr	r3, [r4, #12]
 8008910:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008914:	431a      	orrs	r2, r3
 8008916:	60e2      	str	r2, [r4, #12]
  //GPIO_Write(DIRECTION_PORT, (GPIO_ReadOutputData(DIRECTION_PORT) & ~DIRECTION_MASK) | (dir_port_invert_mask & DIRECTION_MASK));
//#ifdef STEP_PULSE_DELAY
//	TIM3->DIER |= TIM_DIER_CC1IE; //compare interrupt enable
//#endif
#endif
}
 8008918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 800891a:	4a16      	ldr	r2, [pc, #88]	; (8008974 <st_reset+0x13c>)
 800891c:	7812      	ldrb	r2, [r2, #0]
 800891e:	2a00      	cmp	r2, #0
 8008920:	d19e      	bne.n	8008860 <st_reset+0x28>
 8008922:	2b80      	cmp	r3, #128	; 0x80
 8008924:	d19e      	bne.n	8008864 <st_reset+0x2c>
    delay_ms(settings.stepper_idle_lock_time);
 8008926:	f7fb fc67 	bl	80041f8 <delay_ms>
  if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE)) { pin_state = !pin_state; } // Apply pin invert.
 800892a:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 800892e:	075e      	lsls	r6, r3, #29
 8008930:	d49c      	bmi.n	800886c <st_reset+0x34>
	  SetStepperDisableBit();
 8008932:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008936:	4805      	ldr	r0, [pc, #20]	; (800894c <st_reset+0x114>)
 8008938:	f7f8 fece 	bl	80016d8 <GPIO_SetBits>
 800893c:	e79b      	b.n	8008876 <st_reset+0x3e>
 800893e:	bf00      	nop
 8008940:	20001744 	.word	0x20001744
 8008944:	20000db8 	.word	0x20000db8
 8008948:	20001408 	.word	0x20001408
 800894c:	40010800 	.word	0x40010800
 8008950:	20000dc0 	.word	0x20000dc0
 8008954:	20000e4c 	.word	0x20000e4c
 8008958:	20000e49 	.word	0x20000e49
 800895c:	20000dbc 	.word	0x20000dbc
 8008960:	20000e48 	.word	0x20000e48
 8008964:	20000e4a 	.word	0x20000e4a
 8008968:	20000dba 	.word	0x20000dba
 800896c:	20000f5c 	.word	0x20000f5c
 8008970:	40000400 	.word	0x40000400
 8008974:	20001440 	.word	0x20001440

08008978 <stepper_init>:

#endif

// Initialize and start the stepper motor subsystem
void stepper_init()
{
 8008978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // Configure step and direction interface pins
#ifdef STM32F103C8
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_APB2PeriphClockCmd(RCC_STEPPERS_DISABLE_PORT, ENABLE);
 800897c:	2101      	movs	r1, #1
{
 800897e:	b086      	sub	sp, #24
	RCC_APB2PeriphClockCmd(RCC_STEPPERS_DISABLE_PORT, ENABLE);
 8008980:	2004      	movs	r0, #4
 8008982:	f7f8 ff59 	bl	8001838 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Pin = STEPPERS_DISABLE_MASK;
 8008986:	f44f 4200 	mov.w	r2, #32768	; 0x8000
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 800898a:	2610      	movs	r6, #16
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800898c:	2303      	movs	r3, #3
	GPIO_InitStructure.GPIO_Pin = STEPPERS_DISABLE_MASK;
 800898e:	ac06      	add	r4, sp, #24
	GPIO_Init(STEPPERS_DISABLE_PORT, &GPIO_InitStructure);
 8008990:	4f4c      	ldr	r7, [pc, #304]	; (8008ac4 <stepper_init+0x14c>)
	GPIO_InitStructure.GPIO_Pin = STEPPERS_DISABLE_MASK;
 8008992:	f824 2d14 	strh.w	r2, [r4, #-20]!
	GPIO_Init(STEPPERS_DISABLE_PORT, &GPIO_InitStructure);
 8008996:	4621      	mov	r1, r4
 8008998:	4638      	mov	r0, r7
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800899a:	f88d 3006 	strb.w	r3, [sp, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 800899e:	f88d 6007 	strb.w	r6, [sp, #7]
	GPIO_Init(STEPPERS_DISABLE_PORT, &GPIO_InitStructure);
 80089a2:	f7f8 fd0b 	bl	80013bc <GPIO_Init>

	RCC_APB2PeriphClockCmd(RCC_STEP_PORT, ENABLE);
 80089a6:	2101      	movs	r1, #1
 80089a8:	2004      	movs	r0, #4
 80089aa:	f7f8 ff45 	bl	8001838 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Pin = STEP_MASK;
 80089ae:	230f      	movs	r3, #15
	GPIO_Init(STEP_PORT, &GPIO_InitStructure);
 80089b0:	4621      	mov	r1, r4
 80089b2:	4638      	mov	r0, r7
	GPIO_InitStructure.GPIO_Pin = STEP_MASK;
 80089b4:	f8ad 3004 	strh.w	r3, [sp, #4]
	GPIO_Init(STEP_PORT, &GPIO_InitStructure);
 80089b8:	f7f8 fd00 	bl	80013bc <GPIO_Init>

	RCC_APB2PeriphClockCmd(RCC_DIRECTION_PORT, ENABLE);
 80089bc:	2101      	movs	r1, #1
 80089be:	2004      	movs	r0, #4
 80089c0:	f7f8 ff3a 	bl	8001838 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Pin = DIRECTION_MASK;
 80089c4:	23f0      	movs	r3, #240	; 0xf0
{
	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
	NVIC_InitTypeDef NVIC_InitStructure;

	TIM_TimeBaseStructure.TIM_Period = Period - 1;
	TIM_TimeBaseStructure.TIM_Prescaler = Prescaler - 1;
 80089c6:	2500      	movs	r5, #0
	RCC->APB1ENR |= RCC_APB1Periph_TIM2;
 80089c8:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8008ad8 <stepper_init+0x160>
	GPIO_Init(DIRECTION_PORT, &GPIO_InitStructure);
 80089cc:	4621      	mov	r1, r4
 80089ce:	4638      	mov	r0, r7
	GPIO_InitStructure.GPIO_Pin = DIRECTION_MASK;
 80089d0:	f8ad 3004 	strh.w	r3, [sp, #4]
	GPIO_Init(DIRECTION_PORT, &GPIO_InitStructure);
 80089d4:	f7f8 fcf2 	bl	80013bc <GPIO_Init>
	RCC->APB1ENR |= RCC_APB1Periph_TIM2;
 80089d8:	f8d8 301c 	ldr.w	r3, [r8, #28]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
	TIM_TimeBaseInit(TIMER, &TIM_TimeBaseStructure);
 80089dc:	a903      	add	r1, sp, #12
	RCC->APB1ENR |= RCC_APB1Periph_TIM2;
 80089de:	f043 0301 	orr.w	r3, r3, #1
 80089e2:	f8c8 301c 	str.w	r3, [r8, #28]
	TIM_TimeBaseInit(TIMER, &TIM_TimeBaseStructure);
 80089e6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80089ea:	e9cd 5503 	strd	r5, r5, [sp, #12]
	TIM_TimeBaseInit(TIMER, &TIM_TimeBaseStructure);
 80089ee:	f7f8 ff3b 	bl	8001868 <TIM_TimeBaseInit>

	TIM_ClearITPendingBit(TIMER, TIM_IT_Update);
 80089f2:	2101      	movs	r1, #1
 80089f4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80089f8:	f7f9 f804 	bl	8001a04 <TIM_ClearITPendingBit>
	TIM_ITConfig(TIMER, TIM_IT_Update, ENABLE);
 80089fc:	2201      	movs	r2, #1
 80089fe:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8008a02:	4611      	mov	r1, r2
 8008a04:	f7f8 ffec 	bl	80019e0 <TIM_ITConfig>
	TIM_Cmd(TIMER, ENABLE);
 8008a08:	2101      	movs	r1, #1
 8008a0a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8008a0e:	f7f8 ffcd 	bl	80019ac <TIM_Cmd>

	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
 8008a12:	f44f 7040 	mov.w	r0, #768	; 0x300
 8008a16:	f7f8 fb71 	bl	80010fc <NVIC_PriorityGroupConfig>
	if (TIMER == TIM2) { NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn; }
 8008a1a:	4b2b      	ldr	r3, [pc, #172]	; (8008ac8 <stepper_init+0x150>)
 8008a1c:	af06      	add	r7, sp, #24
 8008a1e:	f847 3d10 	str.w	r3, [r7, #-16]!
	else if (TIMER == TIM4) { NVIC_InitStructure.NVIC_IRQChannel = TIM4_IRQn; }

	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = PP;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
 8008a22:	4638      	mov	r0, r7
 8008a24:	f7f8 fb74 	bl	8001110 <NVIC_Init>
	RCC->APB1ENR |= RCC_APB1Periph_TIM3;
 8008a28:	f8d8 301c 	ldr.w	r3, [r8, #28]
	TIM_TimeBaseInit(TIMER, &TIM_TimeBaseStructure);
 8008a2c:	4c27      	ldr	r4, [pc, #156]	; (8008acc <stepper_init+0x154>)
	RCC->APB1ENR |= RCC_APB1Periph_TIM3;
 8008a2e:	f043 0302 	orr.w	r3, r3, #2
 8008a32:	f8c8 301c 	str.w	r3, [r8, #28]
	TIM_TimeBaseInit(TIMER, &TIM_TimeBaseStructure);
 8008a36:	a903      	add	r1, sp, #12
 8008a38:	4620      	mov	r0, r4
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8008a3a:	e9cd 5503 	strd	r5, r5, [sp, #12]
	TIM_TimeBaseInit(TIMER, &TIM_TimeBaseStructure);
 8008a3e:	f7f8 ff13 	bl	8001868 <TIM_TimeBaseInit>
	TIM_ClearITPendingBit(TIMER, TIM_IT_Update);
 8008a42:	4620      	mov	r0, r4
 8008a44:	2101      	movs	r1, #1
 8008a46:	f7f8 ffdd 	bl	8001a04 <TIM_ClearITPendingBit>
	TIM_ITConfig(TIMER, TIM_IT_Update, ENABLE);
 8008a4a:	2201      	movs	r2, #1
 8008a4c:	4620      	mov	r0, r4
 8008a4e:	4611      	mov	r1, r2
 8008a50:	f7f8 ffc6 	bl	80019e0 <TIM_ITConfig>
	TIM_Cmd(TIMER, ENABLE);
 8008a54:	2101      	movs	r1, #1
 8008a56:	4620      	mov	r0, r4
 8008a58:	f7f8 ffa8 	bl	80019ac <TIM_Cmd>
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
 8008a5c:	f44f 7040 	mov.w	r0, #768	; 0x300
 8008a60:	f7f8 fb4c 	bl	80010fc <NVIC_PriorityGroupConfig>
	NVIC_Init(&NVIC_InitStructure);
 8008a64:	4638      	mov	r0, r7
	TIM2->CR1 &= ~TIM_CR1_CEN;
 8008a66:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
	else if (TIMER == TIM3) { NVIC_InitStructure.NVIC_IRQChannel = TIM3_IRQn; }
 8008a6a:	4b19      	ldr	r3, [pc, #100]	; (8008ad0 <stepper_init+0x158>)
 8008a6c:	9302      	str	r3, [sp, #8]
	NVIC_Init(&NVIC_InitStructure);
 8008a6e:	f7f8 fb4f 	bl	8001110 <NVIC_Init>
 8008a72:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8008a76:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
	TIM2->CR1 &= ~TIM_CR1_CEN;
 8008a7a:	883b      	ldrh	r3, [r7, #0]
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8008a7c:	4a15      	ldr	r2, [pc, #84]	; (8008ad4 <stepper_init+0x15c>)
 8008a7e:	f023 0301 	bic.w	r3, r3, #1
 8008a82:	40b3      	lsls	r3, r6
 8008a84:	40f3      	lsrs	r3, r6
 8008a86:	803b      	strh	r3, [r7, #0]
	TIM2->SR &= ~TIM_SR_UIF;
 8008a88:	8a3b      	ldrh	r3, [r7, #16]
 8008a8a:	f023 0301 	bic.w	r3, r3, #1
 8008a8e:	40b3      	lsls	r3, r6
 8008a90:	40f3      	lsrs	r3, r6
 8008a92:	823b      	strh	r3, [r7, #16]
	TIM2->CNT = 0;
 8008a94:	84bd      	strh	r5, [r7, #36]	; 0x24
	TIM3->CR1 &= ~TIM_CR1_CEN;
 8008a96:	8823      	ldrh	r3, [r4, #0]
 8008a98:	f023 0301 	bic.w	r3, r3, #1
 8008a9c:	40b3      	lsls	r3, r6
 8008a9e:	40f3      	lsrs	r3, r6
 8008aa0:	8023      	strh	r3, [r4, #0]
	TIM3->SR &= ~(TIM_SR_UIF | TIM_SR_CC1IF);
 8008aa2:	8a23      	ldrh	r3, [r4, #16]
 8008aa4:	f023 0303 	bic.w	r3, r3, #3
 8008aa8:	40b3      	lsls	r3, r6
 8008aaa:	40f3      	lsrs	r3, r6
 8008aac:	8223      	strh	r3, [r4, #16]
	TIM3->CNT = 0;
 8008aae:	84a5      	strh	r5, [r4, #36]	; 0x24
 8008ab0:	f882 531d 	strb.w	r5, [r2, #797]	; 0x31d
 8008ab4:	f882 631c 	strb.w	r6, [r2, #796]	; 0x31c
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 8008ab8:	6010      	str	r0, [r2, #0]
 8008aba:	6011      	str	r1, [r2, #0]
}
 8008abc:	b006      	add	sp, #24
 8008abe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ac2:	bf00      	nop
 8008ac4:	40010800 	.word	0x40010800
 8008ac8:	0101011c 	.word	0x0101011c
 8008acc:	40000400 	.word	0x40000400
 8008ad0:	0101011d 	.word	0x0101011d
 8008ad4:	e000e100 	.word	0xe000e100
 8008ad8:	40021000 	.word	0x40021000

08008adc <st_update_plan_block_parameters>:
{
 8008adc:	b538      	push	{r3, r4, r5, lr}
  if (pl_block != NULL) { // Ignore if at start of a new block.
 8008ade:	4c08      	ldr	r4, [pc, #32]	; (8008b00 <st_update_plan_block_parameters+0x24>)
 8008ae0:	6825      	ldr	r5, [r4, #0]
 8008ae2:	b15d      	cbz	r5, 8008afc <st_update_plan_block_parameters+0x20>
    prep.recalculate_flag |= PREP_FLAG_RECALCULATE;
 8008ae4:	4b07      	ldr	r3, [pc, #28]	; (8008b04 <st_update_plan_block_parameters+0x28>)
 8008ae6:	785a      	ldrb	r2, [r3, #1]
    pl_block->entry_speed_sqr = prep.current_speed*prep.current_speed; // Update entry speed.
 8008ae8:	69d9      	ldr	r1, [r3, #28]
    prep.recalculate_flag |= PREP_FLAG_RECALCULATE;
 8008aea:	f042 0201 	orr.w	r2, r2, #1
 8008aee:	705a      	strb	r2, [r3, #1]
    pl_block->entry_speed_sqr = prep.current_speed*prep.current_speed; // Update entry speed.
 8008af0:	4608      	mov	r0, r1
 8008af2:	f7f8 f8e1 	bl	8000cb8 <__aeabi_fmul>
    pl_block = NULL; // Flag st_prep_segment() to load and check active velocity profile.
 8008af6:	2300      	movs	r3, #0
    pl_block->entry_speed_sqr = prep.current_speed*prep.current_speed; // Update entry speed.
 8008af8:	61a8      	str	r0, [r5, #24]
    pl_block = NULL; // Flag st_prep_segment() to load and check active velocity profile.
 8008afa:	6023      	str	r3, [r4, #0]
}
 8008afc:	bd38      	pop	{r3, r4, r5, pc}
 8008afe:	bf00      	nop
 8008b00:	20000dbc 	.word	0x20000dbc
 8008b04:	20000dc0 	.word	0x20000dc0

08008b08 <st_prep_buffer>:
  if (bit_istrue(sys.step_control,STEP_CONTROL_END_MOTION)) { return; }
 8008b08:	4b63      	ldr	r3, [pc, #396]	; (8008c98 <st_prep_buffer+0x190>)
 8008b0a:	791b      	ldrb	r3, [r3, #4]
 8008b0c:	07db      	lsls	r3, r3, #31
 8008b0e:	f100 852c 	bmi.w	800956a <st_prep_buffer+0xa62>
{
 8008b12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b16:	b08f      	sub	sp, #60	; 0x3c
 8008b18:	4b60      	ldr	r3, [pc, #384]	; (8008c9c <st_prep_buffer+0x194>)
 8008b1a:	781f      	ldrb	r7, [r3, #0]
  while (segment_buffer_tail != segment_next_head) { // Check if we need to fill the buffer.
 8008b1c:	4b60      	ldr	r3, [pc, #384]	; (8008ca0 <st_prep_buffer+0x198>)
 8008b1e:	781b      	ldrb	r3, [r3, #0]
 8008b20:	42bb      	cmp	r3, r7
 8008b22:	f000 8325 	beq.w	8009170 <st_prep_buffer+0x668>
    if (pl_block == NULL) {
 8008b26:	4b5f      	ldr	r3, [pc, #380]	; (8008ca4 <st_prep_buffer+0x19c>)
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	9300      	str	r3, [sp, #0]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	f000 8322 	beq.w	8009176 <st_prep_buffer+0x66e>
 8008b32:	f8df 9184 	ldr.w	r9, [pc, #388]	; 8008cb8 <st_prep_buffer+0x1b0>
 8008b36:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
 8008b3a:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8008b3e:	f8d9 a018 	ldr.w	sl, [r9, #24]
 8008b42:	9301      	str	r3, [sp, #4]
 8008b44:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
 8008b48:	f899 8014 	ldrb.w	r8, [r9, #20]
 8008b4c:	9303      	str	r3, [sp, #12]
 8008b4e:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
 8008b52:	9307      	str	r3, [sp, #28]
 8008b54:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
 8008b58:	9302      	str	r3, [sp, #8]
 8008b5a:	4b53      	ldr	r3, [pc, #332]	; (8008ca8 <st_prep_buffer+0x1a0>)
 8008b5c:	930b      	str	r3, [sp, #44]	; 0x2c
    segment_t *prep_segment = &segment_buffer[segment_buffer_head];
 8008b5e:	4b53      	ldr	r3, [pc, #332]	; (8008cac <st_prep_buffer+0x1a4>)
    prep_segment->st_block_index = prep.st_block_index;
 8008b60:	4953      	ldr	r1, [pc, #332]	; (8008cb0 <st_prep_buffer+0x1a8>)
    segment_t *prep_segment = &segment_buffer[segment_buffer_head];
 8008b62:	781b      	ldrb	r3, [r3, #0]
    prep_segment->st_block_index = prep.st_block_index;
 8008b64:	f899 2000 	ldrb.w	r2, [r9]
    segment_t *prep_segment = &segment_buffer[segment_buffer_head];
 8008b68:	9308      	str	r3, [sp, #32]
    prep_segment->st_block_index = prep.st_block_index;
 8008b6a:	00db      	lsls	r3, r3, #3
 8008b6c:	9305      	str	r3, [sp, #20]
 8008b6e:	18cb      	adds	r3, r1, r3
 8008b70:	711a      	strb	r2, [r3, #4]
    float minimum_mm = mm_remaining-prep.req_mm_increment; // Guarantee at least one step.
 8008b72:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8008b76:	4658      	mov	r0, fp
 8008b78:	f7f7 ff94 	bl	8000aa4 <__aeabi_fsub>
 8008b7c:	2100      	movs	r1, #0
 8008b7e:	9004      	str	r0, [sp, #16]
 8008b80:	f7f8 fa4c 	bl	800101c <__aeabi_fcmpge>
 8008b84:	b908      	cbnz	r0, 8008b8a <st_prep_buffer+0x82>
 8008b86:	2300      	movs	r3, #0
 8008b88:	9304      	str	r3, [sp, #16]
            time_var = 2.0f*(pl_block->millimeters-mm_remaining)/(prep.current_speed+prep.maximum_speed);
 8008b8a:	9c02      	ldr	r4, [sp, #8]
 8008b8c:	4658      	mov	r0, fp
 8008b8e:	4621      	mov	r1, r4
 8008b90:	f7f7 ff88 	bl	8000aa4 <__aeabi_fsub>
 8008b94:	4601      	mov	r1, r0
 8008b96:	f7f7 ff87 	bl	8000aa8 <__addsf3>
 8008b9a:	9901      	ldr	r1, [sp, #4]
 8008b9c:	9006      	str	r0, [sp, #24]
 8008b9e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8008ba2:	f7f8 f93d 	bl	8000e20 <__aeabi_fdiv>
 8008ba6:	4621      	mov	r1, r4
 8008ba8:	900a      	str	r0, [sp, #40]	; 0x28
 8008baa:	9803      	ldr	r0, [sp, #12]
 8008bac:	f8d9 601c 	ldr.w	r6, [r9, #28]
 8008bb0:	f7f8 fa16 	bl	8000fe0 <__aeabi_fcmpeq>
 8008bb4:	2800      	cmp	r0, #0
 8008bb6:	f000 8290 	beq.w	80090da <st_prep_buffer+0x5d2>
 8008bba:	f04f 0302 	mov.w	r3, #2
 8008bbe:	4d3d      	ldr	r5, [pc, #244]	; (8008cb4 <st_prep_buffer+0x1ac>)
 8008bc0:	2400      	movs	r4, #0
 8008bc2:	462f      	mov	r7, r5
 8008bc4:	b2db      	uxtb	r3, r3
 8008bc6:	9309      	str	r3, [sp, #36]	; 0x24
 8008bc8:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
      switch (prep.ramp_type) {
 8008bcc:	f1b8 0f01 	cmp.w	r8, #1
 8008bd0:	d038      	beq.n	8008c44 <st_prep_buffer+0x13c>
 8008bd2:	f0c0 808e 	bcc.w	8008cf2 <st_prep_buffer+0x1ea>
 8008bd6:	f1b8 0f03 	cmp.w	r8, #3
 8008bda:	f040 81df 	bne.w	8008f9c <st_prep_buffer+0x494>
          speed_var = pl_block->acceleration*time_var;
 8008bde:	9b00      	ldr	r3, [sp, #0]
 8008be0:	4628      	mov	r0, r5
 8008be2:	6a19      	ldr	r1, [r3, #32]
 8008be4:	f7f8 f868 	bl	8000cb8 <__aeabi_fmul>
 8008be8:	4681      	mov	r9, r0
					if (prep.current_speed-prep.maximum_speed <= speed_var) {
 8008bea:	9901      	ldr	r1, [sp, #4]
 8008bec:	4630      	mov	r0, r6
 8008bee:	f7f7 ff59 	bl	8000aa4 <__aeabi_fsub>
 8008bf2:	4649      	mov	r1, r9
 8008bf4:	f7f8 fa08 	bl	8001008 <__aeabi_fcmple>
 8008bf8:	2800      	cmp	r0, #0
 8008bfa:	f000 8221 	beq.w	8009040 <st_prep_buffer+0x538>
            time_var = 2.0f*(pl_block->millimeters-mm_remaining)/(prep.current_speed+prep.maximum_speed);
 8008bfe:	9901      	ldr	r1, [sp, #4]
 8008c00:	4630      	mov	r0, r6
 8008c02:	f7f7 ff51 	bl	8000aa8 <__addsf3>
 8008c06:	4601      	mov	r1, r0
 8008c08:	9806      	ldr	r0, [sp, #24]
 8008c0a:	f7f8 f909 	bl	8000e20 <__aeabi_fdiv>
      dt += time_var; // Add computed ramp time to total segment time.
 8008c0e:	4601      	mov	r1, r0
 8008c10:	4620      	mov	r0, r4
 8008c12:	f7f7 ff49 	bl	8000aa8 <__addsf3>
 8008c16:	4604      	mov	r4, r0
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 8008c18:	4601      	mov	r1, r0
 8008c1a:	4638      	mov	r0, r7
 8008c1c:	f7f8 fa08 	bl	8001030 <__aeabi_fcmpgt>
 8008c20:	2800      	cmp	r0, #0
 8008c22:	f000 823b 	beq.w	800909c <st_prep_buffer+0x594>
 8008c26:	4621      	mov	r1, r4
 8008c28:	4638      	mov	r0, r7
 8008c2a:	f7f7 ff3b 	bl	8000aa4 <__aeabi_fsub>
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8008c2e:	9902      	ldr	r1, [sp, #8]
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 8008c30:	4605      	mov	r5, r0
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8008c32:	4650      	mov	r0, sl
 8008c34:	f7f8 f9de 	bl	8000ff4 <__aeabi_fcmplt>
 8008c38:	2800      	cmp	r0, #0
 8008c3a:	f000 84cd 	beq.w	80095d8 <st_prep_buffer+0xad0>
            prep.current_speed = prep.maximum_speed;
 8008c3e:	9e01      	ldr	r6, [sp, #4]
						mm_remaining = prep.accelerate_until;
 8008c40:	f8dd b008 	ldr.w	fp, [sp, #8]
          mm_var = mm_remaining - prep.maximum_speed*time_var;
 8008c44:	9901      	ldr	r1, [sp, #4]
 8008c46:	4628      	mov	r0, r5
 8008c48:	f7f8 f836 	bl	8000cb8 <__aeabi_fmul>
 8008c4c:	4601      	mov	r1, r0
 8008c4e:	4658      	mov	r0, fp
 8008c50:	f7f7 ff28 	bl	8000aa4 <__aeabi_fsub>
          if (mm_var < prep.decelerate_after) { // End of cruise.
 8008c54:	9903      	ldr	r1, [sp, #12]
          mm_var = mm_remaining - prep.maximum_speed*time_var;
 8008c56:	4680      	mov	r8, r0
          if (mm_var < prep.decelerate_after) { // End of cruise.
 8008c58:	f7f8 f9cc 	bl	8000ff4 <__aeabi_fcmplt>
 8008c5c:	2800      	cmp	r0, #0
 8008c5e:	f040 812b 	bne.w	8008eb8 <st_prep_buffer+0x3b0>
      dt += time_var; // Add computed ramp time to total segment time.
 8008c62:	4629      	mov	r1, r5
 8008c64:	4620      	mov	r0, r4
 8008c66:	f7f7 ff1f 	bl	8000aa8 <__addsf3>
 8008c6a:	4604      	mov	r4, r0
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 8008c6c:	4601      	mov	r1, r0
 8008c6e:	4638      	mov	r0, r7
 8008c70:	f7f8 f9de 	bl	8001030 <__aeabi_fcmpgt>
 8008c74:	2800      	cmp	r0, #0
 8008c76:	f000 822c 	beq.w	80090d2 <st_prep_buffer+0x5ca>
 8008c7a:	4621      	mov	r1, r4
 8008c7c:	4638      	mov	r0, r7
 8008c7e:	f7f7 ff11 	bl	8000aa4 <__aeabi_fsub>
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8008c82:	4651      	mov	r1, sl
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 8008c84:	4605      	mov	r5, r0
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8008c86:	4640      	mov	r0, r8
 8008c88:	f7f8 f9d2 	bl	8001030 <__aeabi_fcmpgt>
 8008c8c:	2800      	cmp	r0, #0
 8008c8e:	f000 84b3 	beq.w	80095f8 <st_prep_buffer+0xaf0>
            mm_remaining = mm_var;
 8008c92:	46c3      	mov	fp, r8
 8008c94:	e7d6      	b.n	8008c44 <st_prep_buffer+0x13c>
 8008c96:	bf00      	nop
 8008c98:	20001408 	.word	0x20001408
 8008c9c:	20000e4a 	.word	0x20000e4a
 8008ca0:	20000e49 	.word	0x20000e49
 8008ca4:	20000dbc 	.word	0x20000dbc
 8008ca8:	20000f58 	.word	0x20000f58
 8008cac:	20000e48 	.word	0x20000e48
 8008cb0:	20000df8 	.word	0x20000df8
 8008cb4:	392ec33e 	.word	0x392ec33e
 8008cb8:	20000dc0 	.word	0x20000dc0
            prep.current_speed += speed_var;
 8008cbc:	4649      	mov	r1, r9
 8008cbe:	4630      	mov	r0, r6
 8008cc0:	f7f7 fef2 	bl	8000aa8 <__addsf3>
      dt += time_var; // Add computed ramp time to total segment time.
 8008cc4:	4629      	mov	r1, r5
            prep.current_speed += speed_var;
 8008cc6:	4606      	mov	r6, r0
      dt += time_var; // Add computed ramp time to total segment time.
 8008cc8:	4620      	mov	r0, r4
 8008cca:	f7f7 feed 	bl	8000aa8 <__addsf3>
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 8008cce:	4639      	mov	r1, r7
      dt += time_var; // Add computed ramp time to total segment time.
 8008cd0:	4604      	mov	r4, r0
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 8008cd2:	f7f8 f98f 	bl	8000ff4 <__aeabi_fcmplt>
 8008cd6:	2800      	cmp	r0, #0
 8008cd8:	f000 8135 	beq.w	8008f46 <st_prep_buffer+0x43e>
 8008cdc:	4621      	mov	r1, r4
 8008cde:	4638      	mov	r0, r7
 8008ce0:	f7f7 fee0 	bl	8000aa4 <__aeabi_fsub>
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8008ce4:	4651      	mov	r1, sl
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 8008ce6:	4605      	mov	r5, r0
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8008ce8:	4658      	mov	r0, fp
 8008cea:	f7f8 f9a1 	bl	8001030 <__aeabi_fcmpgt>
 8008cee:	2800      	cmp	r0, #0
 8008cf0:	d03f      	beq.n	8008d72 <st_prep_buffer+0x26a>
          speed_var = pl_block->acceleration*time_var;
 8008cf2:	9b00      	ldr	r3, [sp, #0]
 8008cf4:	4628      	mov	r0, r5
 8008cf6:	6a19      	ldr	r1, [r3, #32]
 8008cf8:	f7f7 ffde 	bl	8000cb8 <__aeabi_fmul>
          mm_remaining -= time_var*(prep.current_speed + 0.5f*speed_var);
 8008cfc:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
          speed_var = pl_block->acceleration*time_var;
 8008d00:	4681      	mov	r9, r0
          mm_remaining -= time_var*(prep.current_speed + 0.5f*speed_var);
 8008d02:	f7f7 ffd9 	bl	8000cb8 <__aeabi_fmul>
 8008d06:	4631      	mov	r1, r6
 8008d08:	f7f7 fece 	bl	8000aa8 <__addsf3>
 8008d0c:	4629      	mov	r1, r5
 8008d0e:	f7f7 ffd3 	bl	8000cb8 <__aeabi_fmul>
 8008d12:	4601      	mov	r1, r0
 8008d14:	4658      	mov	r0, fp
 8008d16:	f7f7 fec5 	bl	8000aa4 <__aeabi_fsub>
          if (mm_remaining < prep.accelerate_until) { // End of acceleration ramp.
 8008d1a:	9902      	ldr	r1, [sp, #8]
          mm_remaining -= time_var*(prep.current_speed + 0.5f*speed_var);
 8008d1c:	4683      	mov	fp, r0
          if (mm_remaining < prep.accelerate_until) { // End of acceleration ramp.
 8008d1e:	f7f8 f969 	bl	8000ff4 <__aeabi_fcmplt>
 8008d22:	2800      	cmp	r0, #0
 8008d24:	d0ca      	beq.n	8008cbc <st_prep_buffer+0x1b4>
            time_var = 2.0f*(pl_block->millimeters-mm_remaining)/(prep.current_speed+prep.maximum_speed);
 8008d26:	4630      	mov	r0, r6
 8008d28:	9e01      	ldr	r6, [sp, #4]
 8008d2a:	4631      	mov	r1, r6
 8008d2c:	f7f7 febc 	bl	8000aa8 <__addsf3>
 8008d30:	4601      	mov	r1, r0
 8008d32:	9806      	ldr	r0, [sp, #24]
 8008d34:	f7f8 f874 	bl	8000e20 <__aeabi_fdiv>
 8008d38:	4605      	mov	r5, r0
 8008d3a:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
            mm_remaining = prep.accelerate_until; // NOTE: 0.0 at EOB
 8008d3e:	f8dd b008 	ldr.w	fp, [sp, #8]
      dt += time_var; // Add computed ramp time to total segment time.
 8008d42:	4629      	mov	r1, r5
 8008d44:	4620      	mov	r0, r4
 8008d46:	f7f7 feaf 	bl	8000aa8 <__addsf3>
 8008d4a:	4604      	mov	r4, r0
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 8008d4c:	4601      	mov	r1, r0
 8008d4e:	4638      	mov	r0, r7
 8008d50:	f7f8 f96e 	bl	8001030 <__aeabi_fcmpgt>
 8008d54:	2800      	cmp	r0, #0
 8008d56:	f000 80f6 	beq.w	8008f46 <st_prep_buffer+0x43e>
 8008d5a:	4621      	mov	r1, r4
 8008d5c:	4638      	mov	r0, r7
 8008d5e:	f7f7 fea1 	bl	8000aa4 <__aeabi_fsub>
 8008d62:	4605      	mov	r5, r0
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8008d64:	4651      	mov	r1, sl
 8008d66:	4658      	mov	r0, fp
 8008d68:	f7f8 f962 	bl	8001030 <__aeabi_fcmpgt>
 8008d6c:	2800      	cmp	r0, #0
 8008d6e:	f47f af2d 	bne.w	8008bcc <st_prep_buffer+0xc4>
 8008d72:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
      if (st_prep_block->is_pwm_rate_adjusted || (sys.step_control & STEP_CONTROL_UPDATE_SPINDLE_PWM)) {
 8008d76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d78:	f8c9 601c 	str.w	r6, [r9, #28]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f889 8014 	strb.w	r8, [r9, #20]
 8008d82:	7d9b      	ldrb	r3, [r3, #22]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	f040 81ab 	bne.w	80090e0 <st_prep_buffer+0x5d8>
 8008d8a:	4ba2      	ldr	r3, [pc, #648]	; (8009014 <st_prep_buffer+0x50c>)
 8008d8c:	f893 a004 	ldrb.w	sl, [r3, #4]
 8008d90:	f01a 0f08 	tst.w	sl, #8
 8008d94:	f040 8244 	bne.w	8009220 <st_prep_buffer+0x718>
 8008d98:	f899 0034 	ldrb.w	r0, [r9, #52]	; 0x34
      prep_segment->spindle_pwm = prep.current_spindle_pwm; // Reload segment PWM value
 8008d9c:	9a05      	ldr	r2, [sp, #20]
 8008d9e:	4b9e      	ldr	r3, [pc, #632]	; (8009018 <st_prep_buffer+0x510>)
    float step_dist_remaining = prep.step_per_mm*mm_remaining; // Convert mm_remaining to steps
 8008da0:	f8d9 100c 	ldr.w	r1, [r9, #12]
      prep_segment->spindle_pwm = prep.current_spindle_pwm; // Reload segment PWM value
 8008da4:	4413      	add	r3, r2
 8008da6:	7198      	strb	r0, [r3, #6]
    float step_dist_remaining = prep.step_per_mm*mm_remaining; // Convert mm_remaining to steps
 8008da8:	4658      	mov	r0, fp
 8008daa:	f7f7 ff85 	bl	8000cb8 <__aeabi_fmul>
 8008dae:	4606      	mov	r6, r0
    float n_steps_remaining = ceilf(step_dist_remaining); // Round-up current steps remaining
 8008db0:	f002 fcfa 	bl	800b7a8 <ceilf>
 8008db4:	4605      	mov	r5, r0
    float last_n_steps_remaining = ceilf(prep.steps_remaining); // Round-up last steps remaining
 8008db6:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8008dba:	f002 fcf5 	bl	800b7a8 <ceilf>
	prep_segment->n_step = (uint16_t)(last_n_steps_remaining - n_steps_remaining); // Compute number of steps to execute.
 8008dbe:	4629      	mov	r1, r5
    float last_n_steps_remaining = ceilf(prep.steps_remaining); // Round-up last steps remaining
 8008dc0:	4607      	mov	r7, r0
	prep_segment->n_step = (uint16_t)(last_n_steps_remaining - n_steps_remaining); // Compute number of steps to execute.
 8008dc2:	f7f7 fe6f 	bl	8000aa4 <__aeabi_fsub>
 8008dc6:	f7f8 f979 	bl	80010bc <__aeabi_f2uiz>
 8008dca:	4b93      	ldr	r3, [pc, #588]	; (8009018 <st_prep_buffer+0x510>)
 8008dcc:	9a08      	ldr	r2, [sp, #32]
 8008dce:	fa1f f880 	uxth.w	r8, r0
 8008dd2:	f823 8032 	strh.w	r8, [r3, r2, lsl #3]
    if (prep_segment->n_step == 0) {
 8008dd6:	f1b8 0f00 	cmp.w	r8, #0
 8008dda:	d103      	bne.n	8008de4 <st_prep_buffer+0x2dc>
      if (sys.step_control & STEP_CONTROL_EXECUTE_HOLD) {
 8008ddc:	f01a 0f02 	tst.w	sl, #2
 8008de0:	f040 8423 	bne.w	800962a <st_prep_buffer+0xb22>
    dt += prep.dt_remainder; // Apply previous segment partial step execute time
 8008de4:	4620      	mov	r0, r4
 8008de6:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008dea:	f7f7 fe5d 	bl	8000aa8 <__addsf3>
    float inv_rate = dt/(last_n_steps_remaining - step_dist_remaining); // Compute adjusted step rate inverse
 8008dee:	4631      	mov	r1, r6
    dt += prep.dt_remainder; // Apply previous segment partial step execute time
 8008df0:	4604      	mov	r4, r0
    float inv_rate = dt/(last_n_steps_remaining - step_dist_remaining); // Compute adjusted step rate inverse
 8008df2:	4638      	mov	r0, r7
 8008df4:	f7f7 fe56 	bl	8000aa4 <__aeabi_fsub>
 8008df8:	4601      	mov	r1, r0
 8008dfa:	4620      	mov	r0, r4
 8008dfc:	f7f8 f810 	bl	8000e20 <__aeabi_fdiv>
 8008e00:	4604      	mov	r4, r0
	uint32_t cycles = (uint32_t)ceilf((TICKS_PER_MICROSECOND * 1000000) *inv_rate * 60); // (cycles/step)
 8008e02:	4a86      	ldr	r2, [pc, #536]	; (800901c <st_prep_buffer+0x514>)
 8008e04:	4b86      	ldr	r3, [pc, #536]	; (8009020 <st_prep_buffer+0x518>)
 8008e06:	6817      	ldr	r7, [r2, #0]
 8008e08:	4886      	ldr	r0, [pc, #536]	; (8009024 <st_prep_buffer+0x51c>)
 8008e0a:	fba3 2307 	umull	r2, r3, r3, r7
 8008e0e:	0c9b      	lsrs	r3, r3, #18
 8008e10:	fb00 f003 	mul.w	r0, r0, r3
 8008e14:	f7f7 fef8 	bl	8000c08 <__aeabi_ui2f>
 8008e18:	4983      	ldr	r1, [pc, #524]	; (8009028 <st_prep_buffer+0x520>)
 8008e1a:	f7f7 ff4d 	bl	8000cb8 <__aeabi_fmul>
 8008e1e:	4621      	mov	r1, r4
 8008e20:	f7f7 ff4a 	bl	8000cb8 <__aeabi_fmul>
 8008e24:	f002 fcc0 	bl	800b7a8 <ceilf>
 8008e28:	f7f8 f948 	bl	80010bc <__aeabi_f2uiz>
      if (cycles < AMASS_LEVEL1) { prep_segment->amass_level = 0; }
 8008e2c:	4b7f      	ldr	r3, [pc, #508]	; (800902c <st_prep_buffer+0x524>)
 8008e2e:	fba3 3707 	umull	r3, r7, r3, r7
 8008e32:	ebb0 2f57 	cmp.w	r0, r7, lsr #9
 8008e36:	f080 8169 	bcs.w	800910c <st_prep_buffer+0x604>
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	9905      	ldr	r1, [sp, #20]
 8008e3e:	4b76      	ldr	r3, [pc, #472]	; (8009018 <st_prep_buffer+0x510>)
 8008e40:	440b      	add	r3, r1
 8008e42:	715a      	strb	r2, [r3, #5]
 8008e44:	460a      	mov	r2, r1
 8008e46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008e4a:	4298      	cmp	r0, r3
 8008e4c:	bf28      	it	cs
 8008e4e:	4618      	movcs	r0, r3
    segment_buffer_head = segment_next_head;
 8008e50:	4977      	ldr	r1, [pc, #476]	; (8009030 <st_prep_buffer+0x528>)
 8008e52:	4f71      	ldr	r7, [pc, #452]	; (8009018 <st_prep_buffer+0x510>)
 8008e54:	780b      	ldrb	r3, [r1, #0]
 8008e56:	443a      	add	r2, r7
    if ( ++segment_next_head == SEGMENT_BUFFER_SIZE ) { segment_next_head = 0; }
 8008e58:	1c5f      	adds	r7, r3, #1
 8008e5a:	b2ff      	uxtb	r7, r7
 8008e5c:	8050      	strh	r0, [r2, #2]
    segment_buffer_head = segment_next_head;
 8008e5e:	4a75      	ldr	r2, [pc, #468]	; (8009034 <st_prep_buffer+0x52c>)
    if ( ++segment_next_head == SEGMENT_BUFFER_SIZE ) { segment_next_head = 0; }
 8008e60:	2f0a      	cmp	r7, #10
    segment_buffer_head = segment_next_head;
 8008e62:	7013      	strb	r3, [r2, #0]
    if ( ++segment_next_head == SEGMENT_BUFFER_SIZE ) { segment_next_head = 0; }
 8008e64:	f000 8164 	beq.w	8009130 <st_prep_buffer+0x628>
    pl_block->millimeters = mm_remaining;
 8008e68:	4b73      	ldr	r3, [pc, #460]	; (8009038 <st_prep_buffer+0x530>)
    if ( ++segment_next_head == SEGMENT_BUFFER_SIZE ) { segment_next_head = 0; }
 8008e6a:	700f      	strb	r7, [r1, #0]
    pl_block->millimeters = mm_remaining;
 8008e6c:	681b      	ldr	r3, [r3, #0]
    prep.dt_remainder = (n_steps_remaining - step_dist_remaining)*inv_rate;
 8008e6e:	4631      	mov	r1, r6
    pl_block->millimeters = mm_remaining;
 8008e70:	f8c3 b024 	str.w	fp, [r3, #36]	; 0x24
    prep.steps_remaining = n_steps_remaining;
 8008e74:	f8c9 5008 	str.w	r5, [r9, #8]
    prep.dt_remainder = (n_steps_remaining - step_dist_remaining)*inv_rate;
 8008e78:	4628      	mov	r0, r5
 8008e7a:	f7f7 fe13 	bl	8000aa4 <__aeabi_fsub>
 8008e7e:	4621      	mov	r1, r4
 8008e80:	f7f7 ff1a 	bl	8000cb8 <__aeabi_fmul>
    if (mm_remaining == prep.mm_complete) {
 8008e84:	4659      	mov	r1, fp
    prep.dt_remainder = (n_steps_remaining - step_dist_remaining)*inv_rate;
 8008e86:	f8c9 0004 	str.w	r0, [r9, #4]
    if (mm_remaining == prep.mm_complete) {
 8008e8a:	f8d9 0018 	ldr.w	r0, [r9, #24]
 8008e8e:	f7f8 f8a7 	bl	8000fe0 <__aeabi_fcmpeq>
 8008e92:	2800      	cmp	r0, #0
 8008e94:	f43f ae42 	beq.w	8008b1c <st_prep_buffer+0x14>
      if (mm_remaining > 0.0f) { // At end of forced-termination.
 8008e98:	4658      	mov	r0, fp
 8008e9a:	2100      	movs	r1, #0
 8008e9c:	f7f8 f8c8 	bl	8001030 <__aeabi_fcmpgt>
 8008ea0:	2800      	cmp	r0, #0
 8008ea2:	f040 83c2 	bne.w	800962a <st_prep_buffer+0xb22>
        if (sys.step_control & STEP_CONTROL_EXECUTE_SYS_MOTION) {
 8008ea6:	f01a 0304 	ands.w	r3, sl, #4
 8008eaa:	f040 83be 	bne.w	800962a <st_prep_buffer+0xb22>
        pl_block = NULL; // Set pointer to indicate check and load next planner block.
 8008eae:	4a62      	ldr	r2, [pc, #392]	; (8009038 <st_prep_buffer+0x530>)
 8008eb0:	6013      	str	r3, [r2, #0]
        plan_discard_current_block();
 8008eb2:	f7fb fb97 	bl	80045e4 <plan_discard_current_block>
 8008eb6:	e62f      	b.n	8008b18 <st_prep_buffer+0x10>
            time_var = (mm_remaining - prep.decelerate_after)/prep.maximum_speed;
 8008eb8:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008ebc:	4658      	mov	r0, fp
 8008ebe:	4649      	mov	r1, r9
 8008ec0:	f7f7 fdf0 	bl	8000aa4 <__aeabi_fsub>
 8008ec4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008ec6:	f7f7 fef7 	bl	8000cb8 <__aeabi_fmul>
      dt += time_var; // Add computed ramp time to total segment time.
 8008eca:	4601      	mov	r1, r0
 8008ecc:	4620      	mov	r0, r4
 8008ece:	f7f7 fdeb 	bl	8000aa8 <__addsf3>
 8008ed2:	4604      	mov	r4, r0
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 8008ed4:	4601      	mov	r1, r0
 8008ed6:	4638      	mov	r0, r7
 8008ed8:	f7f8 f8aa 	bl	8001030 <__aeabi_fcmpgt>
 8008edc:	2800      	cmp	r0, #0
 8008ede:	d043      	beq.n	8008f68 <st_prep_buffer+0x460>
 8008ee0:	4621      	mov	r1, r4
 8008ee2:	4638      	mov	r0, r7
 8008ee4:	f7f7 fdde 	bl	8000aa4 <__aeabi_fsub>
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8008ee8:	4651      	mov	r1, sl
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 8008eea:	4680      	mov	r8, r0
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8008eec:	4648      	mov	r0, r9
 8008eee:	f7f8 f89f 	bl	8001030 <__aeabi_fcmpgt>
 8008ef2:	2800      	cmp	r0, #0
 8008ef4:	f000 8285 	beq.w	8009402 <st_prep_buffer+0x8fa>
          speed_var = pl_block->acceleration*time_var; // Used as delta speed (mm/min)
 8008ef8:	9b00      	ldr	r3, [sp, #0]
 8008efa:	4640      	mov	r0, r8
 8008efc:	6a19      	ldr	r1, [r3, #32]
 8008efe:	f7f7 fedb 	bl	8000cb8 <__aeabi_fmul>
          if (prep.current_speed > speed_var) { // Check if at or below zero speed.
 8008f02:	4631      	mov	r1, r6
          speed_var = pl_block->acceleration*time_var; // Used as delta speed (mm/min)
 8008f04:	4605      	mov	r5, r0
          if (prep.current_speed > speed_var) { // Check if at or below zero speed.
 8008f06:	f7f8 f875 	bl	8000ff4 <__aeabi_fcmplt>
 8008f0a:	2800      	cmp	r0, #0
 8008f0c:	d06b      	beq.n	8008fe6 <st_prep_buffer+0x4de>
            mm_var = mm_remaining - time_var*(prep.current_speed - 0.5f*speed_var); // (mm)
 8008f0e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8008f12:	4628      	mov	r0, r5
 8008f14:	f7f7 fed0 	bl	8000cb8 <__aeabi_fmul>
 8008f18:	4631      	mov	r1, r6
 8008f1a:	f7f7 fdc3 	bl	8000aa4 <__aeabi_fsub>
 8008f1e:	4641      	mov	r1, r8
 8008f20:	f7f7 feca 	bl	8000cb8 <__aeabi_fmul>
 8008f24:	4649      	mov	r1, r9
 8008f26:	f7f7 fdbf 	bl	8000aa8 <__addsf3>
            if (mm_var > prep.mm_complete) { // Typical case. In deceleration ramp.
 8008f2a:	4651      	mov	r1, sl
            mm_var = mm_remaining - time_var*(prep.current_speed - 0.5f*speed_var); // (mm)
 8008f2c:	4683      	mov	fp, r0
            if (mm_var > prep.mm_complete) { // Typical case. In deceleration ramp.
 8008f2e:	f7f8 f87f 	bl	8001030 <__aeabi_fcmpgt>
 8008f32:	2800      	cmp	r0, #0
 8008f34:	d057      	beq.n	8008fe6 <st_prep_buffer+0x4de>
              prep.current_speed -= speed_var;
 8008f36:	4630      	mov	r0, r6
 8008f38:	4629      	mov	r1, r5
 8008f3a:	f7f7 fdb3 	bl	8000aa4 <__aeabi_fsub>
      dt += time_var; // Add computed ramp time to total segment time.
 8008f3e:	463c      	mov	r4, r7
              prep.current_speed -= speed_var;
 8008f40:	4606      	mov	r6, r0
            prep.ramp_type = RAMP_DECEL;
 8008f42:	f04f 0802 	mov.w	r8, #2
        if (mm_remaining > minimum_mm) { // Check for very slow segments with zero steps.
 8008f46:	4659      	mov	r1, fp
 8008f48:	9804      	ldr	r0, [sp, #16]
 8008f4a:	f7f8 f853 	bl	8000ff4 <__aeabi_fcmplt>
 8008f4e:	2800      	cmp	r0, #0
 8008f50:	f43f af0f 	beq.w	8008d72 <st_prep_buffer+0x26a>
          dt_max += DT_SEGMENT;
 8008f54:	4638      	mov	r0, r7
 8008f56:	4939      	ldr	r1, [pc, #228]	; (800903c <st_prep_buffer+0x534>)
 8008f58:	f7f7 fda6 	bl	8000aa8 <__addsf3>
          time_var = dt_max - dt;
 8008f5c:	4621      	mov	r1, r4
          dt_max += DT_SEGMENT;
 8008f5e:	4607      	mov	r7, r0
          time_var = dt_max - dt;
 8008f60:	f7f7 fda0 	bl	8000aa4 <__aeabi_fsub>
 8008f64:	4605      	mov	r5, r0
 8008f66:	e6fd      	b.n	8008d64 <st_prep_buffer+0x25c>
        if (mm_remaining > minimum_mm) { // Check for very slow segments with zero steps.
 8008f68:	4649      	mov	r1, r9
 8008f6a:	9804      	ldr	r0, [sp, #16]
 8008f6c:	f7f8 f842 	bl	8000ff4 <__aeabi_fcmplt>
 8008f70:	2800      	cmp	r0, #0
 8008f72:	f000 833a 	beq.w	80095ea <st_prep_buffer+0xae2>
          dt_max += DT_SEGMENT;
 8008f76:	4638      	mov	r0, r7
 8008f78:	4930      	ldr	r1, [pc, #192]	; (800903c <st_prep_buffer+0x534>)
 8008f7a:	f7f7 fd95 	bl	8000aa8 <__addsf3>
          time_var = dt_max - dt;
 8008f7e:	4621      	mov	r1, r4
          dt_max += DT_SEGMENT;
 8008f80:	4607      	mov	r7, r0
          time_var = dt_max - dt;
 8008f82:	f7f7 fd8f 	bl	8000aa4 <__aeabi_fsub>
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8008f86:	4651      	mov	r1, sl
          time_var = dt_max - dt;
 8008f88:	4605      	mov	r5, r0
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8008f8a:	4648      	mov	r0, r9
 8008f8c:	f7f8 f850 	bl	8001030 <__aeabi_fcmpgt>
 8008f90:	46cb      	mov	fp, r9
 8008f92:	2800      	cmp	r0, #0
 8008f94:	f000 8236 	beq.w	8009404 <st_prep_buffer+0x8fc>
            prep.ramp_type = RAMP_DECEL;
 8008f98:	f04f 0802 	mov.w	r8, #2
          speed_var = pl_block->acceleration*time_var; // Used as delta speed (mm/min)
 8008f9c:	9b00      	ldr	r3, [sp, #0]
 8008f9e:	4628      	mov	r0, r5
 8008fa0:	6a19      	ldr	r1, [r3, #32]
 8008fa2:	f7f7 fe89 	bl	8000cb8 <__aeabi_fmul>
          if (prep.current_speed > speed_var) { // Check if at or below zero speed.
 8008fa6:	4631      	mov	r1, r6
          speed_var = pl_block->acceleration*time_var; // Used as delta speed (mm/min)
 8008fa8:	4681      	mov	r9, r0
          if (prep.current_speed > speed_var) { // Check if at or below zero speed.
 8008faa:	f7f8 f823 	bl	8000ff4 <__aeabi_fcmplt>
 8008fae:	b1e8      	cbz	r0, 8008fec <st_prep_buffer+0x4e4>
            mm_var = mm_remaining - time_var*(prep.current_speed - 0.5f*speed_var); // (mm)
 8008fb0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8008fb4:	4648      	mov	r0, r9
 8008fb6:	f7f7 fe7f 	bl	8000cb8 <__aeabi_fmul>
 8008fba:	4631      	mov	r1, r6
 8008fbc:	f7f7 fd72 	bl	8000aa4 <__aeabi_fsub>
 8008fc0:	4629      	mov	r1, r5
 8008fc2:	f7f7 fe79 	bl	8000cb8 <__aeabi_fmul>
 8008fc6:	4659      	mov	r1, fp
 8008fc8:	f7f7 fd6e 	bl	8000aa8 <__addsf3>
            if (mm_var > prep.mm_complete) { // Typical case. In deceleration ramp.
 8008fcc:	4651      	mov	r1, sl
            mm_var = mm_remaining - time_var*(prep.current_speed - 0.5f*speed_var); // (mm)
 8008fce:	900d      	str	r0, [sp, #52]	; 0x34
            if (mm_var > prep.mm_complete) { // Typical case. In deceleration ramp.
 8008fd0:	f7f8 f82e 	bl	8001030 <__aeabi_fcmpgt>
 8008fd4:	b150      	cbz	r0, 8008fec <st_prep_buffer+0x4e4>
              prep.current_speed -= speed_var;
 8008fd6:	4630      	mov	r0, r6
 8008fd8:	4649      	mov	r1, r9
 8008fda:	f7f7 fd63 	bl	8000aa4 <__aeabi_fsub>
            mm_var = mm_remaining - time_var*(prep.current_speed - 0.5f*speed_var); // (mm)
 8008fde:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
              prep.current_speed -= speed_var;
 8008fe2:	4606      	mov	r6, r0
              break; // Segment complete. Exit switch-case statement. Continue do-while loop.
 8008fe4:	e6ad      	b.n	8008d42 <st_prep_buffer+0x23a>
 8008fe6:	46cb      	mov	fp, r9
            prep.ramp_type = RAMP_DECEL;
 8008fe8:	f04f 0802 	mov.w	r8, #2
          time_var = 2.0f*(mm_remaining-prep.mm_complete)/(prep.current_speed+prep.exit_speed);
 8008fec:	4658      	mov	r0, fp
 8008fee:	4651      	mov	r1, sl
 8008ff0:	f7f7 fd58 	bl	8000aa4 <__aeabi_fsub>
 8008ff4:	4601      	mov	r1, r0
 8008ff6:	f7f7 fd57 	bl	8000aa8 <__addsf3>
 8008ffa:	4631      	mov	r1, r6
 8008ffc:	9e07      	ldr	r6, [sp, #28]
 8008ffe:	4605      	mov	r5, r0
 8009000:	4630      	mov	r0, r6
 8009002:	f7f7 fd51 	bl	8000aa8 <__addsf3>
 8009006:	4601      	mov	r1, r0
 8009008:	4628      	mov	r0, r5
 800900a:	f7f7 ff09 	bl	8000e20 <__aeabi_fdiv>
          mm_remaining = prep.mm_complete;
 800900e:	46d3      	mov	fp, sl
          time_var = 2.0f*(mm_remaining-prep.mm_complete)/(prep.current_speed+prep.exit_speed);
 8009010:	4605      	mov	r5, r0
 8009012:	e696      	b.n	8008d42 <st_prep_buffer+0x23a>
 8009014:	20001408 	.word	0x20001408
 8009018:	20000df8 	.word	0x20000df8
 800901c:	20000018 	.word	0x20000018
 8009020:	431bde83 	.word	0x431bde83
 8009024:	000f4240 	.word	0x000f4240
 8009028:	42700000 	.word	0x42700000
 800902c:	10624dd3 	.word	0x10624dd3
 8009030:	20000e4a 	.word	0x20000e4a
 8009034:	20000e48 	.word	0x20000e48
 8009038:	20000dbc 	.word	0x20000dbc
 800903c:	392ec33e 	.word	0x392ec33e
						mm_remaining -= time_var*(prep.current_speed - 0.5f*speed_var);
 8009040:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8009044:	4648      	mov	r0, r9
 8009046:	f7f7 fe37 	bl	8000cb8 <__aeabi_fmul>
 800904a:	4631      	mov	r1, r6
 800904c:	f7f7 fd2a 	bl	8000aa4 <__aeabi_fsub>
 8009050:	4629      	mov	r1, r5
 8009052:	f7f7 fe31 	bl	8000cb8 <__aeabi_fmul>
 8009056:	4601      	mov	r1, r0
 8009058:	4658      	mov	r0, fp
 800905a:	f7f7 fd25 	bl	8000aa8 <__addsf3>
            prep.current_speed -= speed_var;
 800905e:	4649      	mov	r1, r9
						mm_remaining -= time_var*(prep.current_speed - 0.5f*speed_var);
 8009060:	4683      	mov	fp, r0
            prep.current_speed -= speed_var;
 8009062:	4630      	mov	r0, r6
 8009064:	f7f7 fd1e 	bl	8000aa4 <__aeabi_fsub>
      dt += time_var; // Add computed ramp time to total segment time.
 8009068:	4629      	mov	r1, r5
            prep.current_speed -= speed_var;
 800906a:	4606      	mov	r6, r0
      dt += time_var; // Add computed ramp time to total segment time.
 800906c:	4620      	mov	r0, r4
 800906e:	f7f7 fd1b 	bl	8000aa8 <__addsf3>
 8009072:	4604      	mov	r4, r0
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 8009074:	4601      	mov	r1, r0
 8009076:	4638      	mov	r0, r7
 8009078:	f7f7 ffda 	bl	8001030 <__aeabi_fcmpgt>
 800907c:	2800      	cmp	r0, #0
 800907e:	f43f af62 	beq.w	8008f46 <st_prep_buffer+0x43e>
 8009082:	4621      	mov	r1, r4
 8009084:	4638      	mov	r0, r7
 8009086:	f7f7 fd0d 	bl	8000aa4 <__aeabi_fsub>
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 800908a:	4651      	mov	r1, sl
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 800908c:	4605      	mov	r5, r0
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 800908e:	4658      	mov	r0, fp
 8009090:	f7f7 ffce 	bl	8001030 <__aeabi_fcmpgt>
 8009094:	2800      	cmp	r0, #0
 8009096:	f47f ada2 	bne.w	8008bde <st_prep_buffer+0xd6>
 800909a:	e66a      	b.n	8008d72 <st_prep_buffer+0x26a>
        if (mm_remaining > minimum_mm) { // Check for very slow segments with zero steps.
 800909c:	f8dd b008 	ldr.w	fp, [sp, #8]
 80090a0:	9804      	ldr	r0, [sp, #16]
 80090a2:	4659      	mov	r1, fp
 80090a4:	f7f7 ffa6 	bl	8000ff4 <__aeabi_fcmplt>
 80090a8:	2800      	cmp	r0, #0
 80090aa:	f000 81a4 	beq.w	80093f6 <st_prep_buffer+0x8ee>
          dt_max += DT_SEGMENT;
 80090ae:	4638      	mov	r0, r7
 80090b0:	496f      	ldr	r1, [pc, #444]	; (8009270 <st_prep_buffer+0x768>)
 80090b2:	f7f7 fcf9 	bl	8000aa8 <__addsf3>
          time_var = dt_max - dt;
 80090b6:	4621      	mov	r1, r4
          dt_max += DT_SEGMENT;
 80090b8:	4607      	mov	r7, r0
          time_var = dt_max - dt;
 80090ba:	f7f7 fcf3 	bl	8000aa4 <__aeabi_fsub>
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 80090be:	4659      	mov	r1, fp
          time_var = dt_max - dt;
 80090c0:	4605      	mov	r5, r0
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 80090c2:	4650      	mov	r0, sl
 80090c4:	f7f7 ff96 	bl	8000ff4 <__aeabi_fcmplt>
 80090c8:	2800      	cmp	r0, #0
 80090ca:	f000 8194 	beq.w	80093f6 <st_prep_buffer+0x8ee>
            prep.current_speed = prep.maximum_speed;
 80090ce:	9e01      	ldr	r6, [sp, #4]
 80090d0:	e5b8      	b.n	8008c44 <st_prep_buffer+0x13c>
            mm_remaining = mm_var;
 80090d2:	46c3      	mov	fp, r8
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 80090d4:	f04f 0801 	mov.w	r8, #1
 80090d8:	e735      	b.n	8008f46 <st_prep_buffer+0x43e>
 80090da:	f04f 0301 	mov.w	r3, #1
 80090de:	e56e      	b.n	8008bbe <st_prep_buffer+0xb6>
        if (pl_block->condition & (PL_COND_FLAG_SPINDLE_CW | PL_COND_FLAG_SPINDLE_CCW)) {
 80090e0:	9b00      	ldr	r3, [sp, #0]
 80090e2:	7d9b      	ldrb	r3, [r3, #22]
 80090e4:	f013 0f30 	tst.w	r3, #48	; 0x30
 80090e8:	f040 80b5 	bne.w	8009256 <st_prep_buffer+0x74e>
 80090ec:	4b61      	ldr	r3, [pc, #388]	; (8009274 <st_prep_buffer+0x76c>)
 80090ee:	f893 a004 	ldrb.w	sl, [r3, #4]
          prep.current_spindle_pwm = SPINDLE_PWM_OFF_VALUE;
 80090f2:	2300      	movs	r3, #0
          sys.spindle_speed = 0.0;
 80090f4:	2100      	movs	r1, #0
          prep.current_spindle_pwm = SPINDLE_PWM_OFF_VALUE;
 80090f6:	4618      	mov	r0, r3
          sys.spindle_speed = 0.0;
 80090f8:	4a5e      	ldr	r2, [pc, #376]	; (8009274 <st_prep_buffer+0x76c>)
          prep.current_spindle_pwm = SPINDLE_PWM_OFF_VALUE;
 80090fa:	f889 3034 	strb.w	r3, [r9, #52]	; 0x34
          sys.spindle_speed = 0.0;
 80090fe:	6111      	str	r1, [r2, #16]
        bit_false(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 8009100:	4b5c      	ldr	r3, [pc, #368]	; (8009274 <st_prep_buffer+0x76c>)
 8009102:	f00a 0af7 	and.w	sl, sl, #247	; 0xf7
 8009106:	f883 a004 	strb.w	sl, [r3, #4]
 800910a:	e647      	b.n	8008d9c <st_prep_buffer+0x294>
        if (cycles < AMASS_LEVEL2) { prep_segment->amass_level = 1; }
 800910c:	ebb0 2f17 	cmp.w	r0, r7, lsr #8
 8009110:	f080 8097 	bcs.w	8009242 <st_prep_buffer+0x73a>
 8009114:	2301      	movs	r3, #1
 8009116:	4a58      	ldr	r2, [pc, #352]	; (8009278 <st_prep_buffer+0x770>)
 8009118:	9905      	ldr	r1, [sp, #20]
 800911a:	440a      	add	r2, r1
 800911c:	7153      	strb	r3, [r2, #5]
        prep_segment->n_step <<= prep_segment->amass_level;
 800911e:	4a56      	ldr	r2, [pc, #344]	; (8009278 <st_prep_buffer+0x770>)
 8009120:	9908      	ldr	r1, [sp, #32]
 8009122:	fa08 f803 	lsl.w	r8, r8, r3
 8009126:	f822 8031 	strh.w	r8, [r2, r1, lsl #3]
        cycles >>= prep_segment->amass_level;
 800912a:	40d8      	lsrs	r0, r3
 800912c:	9a05      	ldr	r2, [sp, #20]
 800912e:	e68a      	b.n	8008e46 <st_prep_buffer+0x33e>
    if ( ++segment_next_head == SEGMENT_BUFFER_SIZE ) { segment_next_head = 0; }
 8009130:	2200      	movs	r2, #0
    pl_block->millimeters = mm_remaining;
 8009132:	4b52      	ldr	r3, [pc, #328]	; (800927c <st_prep_buffer+0x774>)
    prep.steps_remaining = n_steps_remaining;
 8009134:	f8c9 5008 	str.w	r5, [r9, #8]
    pl_block->millimeters = mm_remaining;
 8009138:	681b      	ldr	r3, [r3, #0]
    prep.dt_remainder = (n_steps_remaining - step_dist_remaining)*inv_rate;
 800913a:	4628      	mov	r0, r5
    if ( ++segment_next_head == SEGMENT_BUFFER_SIZE ) { segment_next_head = 0; }
 800913c:	4d50      	ldr	r5, [pc, #320]	; (8009280 <st_prep_buffer+0x778>)
    prep.dt_remainder = (n_steps_remaining - step_dist_remaining)*inv_rate;
 800913e:	4631      	mov	r1, r6
    if ( ++segment_next_head == SEGMENT_BUFFER_SIZE ) { segment_next_head = 0; }
 8009140:	702a      	strb	r2, [r5, #0]
    pl_block->millimeters = mm_remaining;
 8009142:	f8c3 b024 	str.w	fp, [r3, #36]	; 0x24
    prep.dt_remainder = (n_steps_remaining - step_dist_remaining)*inv_rate;
 8009146:	f7f7 fcad 	bl	8000aa4 <__aeabi_fsub>
 800914a:	4621      	mov	r1, r4
 800914c:	f7f7 fdb4 	bl	8000cb8 <__aeabi_fmul>
    if (mm_remaining == prep.mm_complete) {
 8009150:	4659      	mov	r1, fp
    prep.dt_remainder = (n_steps_remaining - step_dist_remaining)*inv_rate;
 8009152:	f8c9 0004 	str.w	r0, [r9, #4]
    if (mm_remaining == prep.mm_complete) {
 8009156:	f8d9 0018 	ldr.w	r0, [r9, #24]
 800915a:	f7f7 ff41 	bl	8000fe0 <__aeabi_fcmpeq>
 800915e:	2800      	cmp	r0, #0
 8009160:	f47f ae9a 	bne.w	8008e98 <st_prep_buffer+0x390>
 8009164:	4607      	mov	r7, r0
  while (segment_buffer_tail != segment_next_head) { // Check if we need to fill the buffer.
 8009166:	4b47      	ldr	r3, [pc, #284]	; (8009284 <st_prep_buffer+0x77c>)
 8009168:	781b      	ldrb	r3, [r3, #0]
 800916a:	42bb      	cmp	r3, r7
 800916c:	f47f acdb 	bne.w	8008b26 <st_prep_buffer+0x1e>
}
 8009170:	b00f      	add	sp, #60	; 0x3c
 8009172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (sys.step_control & STEP_CONTROL_EXECUTE_SYS_MOTION) { pl_block = plan_get_system_motion_block(); }
 8009176:	4b3f      	ldr	r3, [pc, #252]	; (8009274 <st_prep_buffer+0x76c>)
 8009178:	791b      	ldrb	r3, [r3, #4]
 800917a:	075e      	lsls	r6, r3, #29
 800917c:	d575      	bpl.n	800926a <st_prep_buffer+0x762>
 800917e:	f7fb fa4d 	bl	800461c <plan_get_system_motion_block>
      else { pl_block = plan_get_current_block(); }
 8009182:	4b3e      	ldr	r3, [pc, #248]	; (800927c <st_prep_buffer+0x774>)
 8009184:	9000      	str	r0, [sp, #0]
 8009186:	6018      	str	r0, [r3, #0]
      if (pl_block == NULL) { return; } // No planner blocks. Exit.
 8009188:	2800      	cmp	r0, #0
 800918a:	d0f1      	beq.n	8009170 <st_prep_buffer+0x668>
      if (prep.recalculate_flag & PREP_FLAG_RECALCULATE) {
 800918c:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 800928c <st_prep_buffer+0x784>
 8009190:	4a38      	ldr	r2, [pc, #224]	; (8009274 <st_prep_buffer+0x76c>)
 8009192:	f899 6001 	ldrb.w	r6, [r9, #1]
 8009196:	7914      	ldrb	r4, [r2, #4]
 8009198:	f016 0301 	ands.w	r3, r6, #1
 800919c:	f004 0702 	and.w	r7, r4, #2
 80091a0:	f8d0 b024 	ldr.w	fp, [r0, #36]	; 0x24
 80091a4:	d074      	beq.n	8009290 <st_prep_buffer+0x788>
          prep.recalculate_flag = false;
 80091a6:	2300      	movs	r3, #0
 80091a8:	f889 3001 	strb.w	r3, [r9, #1]
 80091ac:	4b36      	ldr	r3, [pc, #216]	; (8009288 <st_prep_buffer+0x780>)
 80091ae:	930b      	str	r3, [sp, #44]	; 0x2c
			prep.mm_complete = 0.0f; // Default velocity profile complete at 0.0mm from end of block.
 80091b0:	2200      	movs	r2, #0
			float inv_2_accel = 0.5f/pl_block->acceleration;
 80091b2:	9b00      	ldr	r3, [sp, #0]
			prep.mm_complete = 0.0f; // Default velocity profile complete at 0.0mm from end of block.
 80091b4:	f8c9 2018 	str.w	r2, [r9, #24]
			float inv_2_accel = 0.5f/pl_block->acceleration;
 80091b8:	6a1d      	ldr	r5, [r3, #32]
 80091ba:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 80091be:	4629      	mov	r1, r5
 80091c0:	f7f7 fe2e 	bl	8000e20 <__aeabi_fdiv>
 80091c4:	4606      	mov	r6, r0
			if (sys.step_control & STEP_CONTROL_EXECUTE_HOLD) { // [Forced Deceleration to Zero Velocity]
 80091c6:	2f00      	cmp	r7, #0
 80091c8:	f000 80c3 	beq.w	8009352 <st_prep_buffer+0x84a>
				prep.ramp_type = RAMP_DECEL;
 80091cc:	f04f 0802 	mov.w	r8, #2
				float decel_dist = pl_block->millimeters - inv_2_accel*pl_block->entry_speed_sqr;
 80091d0:	9b00      	ldr	r3, [sp, #0]
 80091d2:	4601      	mov	r1, r0
 80091d4:	699e      	ldr	r6, [r3, #24]
				prep.ramp_type = RAMP_DECEL;
 80091d6:	f889 8014 	strb.w	r8, [r9, #20]
				float decel_dist = pl_block->millimeters - inv_2_accel*pl_block->entry_speed_sqr;
 80091da:	4630      	mov	r0, r6
 80091dc:	f7f7 fd6c 	bl	8000cb8 <__aeabi_fmul>
 80091e0:	4601      	mov	r1, r0
 80091e2:	4658      	mov	r0, fp
 80091e4:	f7f7 fc5e 	bl	8000aa4 <__aeabi_fsub>
				if (decel_dist < 0.0f) {
 80091e8:	2100      	movs	r1, #0
				float decel_dist = pl_block->millimeters - inv_2_accel*pl_block->entry_speed_sqr;
 80091ea:	4682      	mov	sl, r0
				if (decel_dist < 0.0f) {
 80091ec:	f7f7 ff02 	bl	8000ff4 <__aeabi_fcmplt>
 80091f0:	2800      	cmp	r0, #0
 80091f2:	f040 81c9 	bne.w	8009588 <st_prep_buffer+0xa80>
					prep.exit_speed = 0.0f;
 80091f6:	2300      	movs	r3, #0
 80091f8:	f8c9 3024 	str.w	r3, [r9, #36]	; 0x24
 80091fc:	f8d9 3020 	ldr.w	r3, [r9, #32]
					prep.mm_complete = decel_dist; // End of feed hold.
 8009200:	f8c9 a018 	str.w	sl, [r9, #24]
 8009204:	9301      	str	r3, [sp, #4]
 8009206:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
 800920a:	9302      	str	r3, [sp, #8]
 800920c:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
 8009210:	9303      	str	r3, [sp, #12]
					prep.exit_speed = 0.0f;
 8009212:	2300      	movs	r3, #0
 8009214:	9307      	str	r3, [sp, #28]
        bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM); // Force update whenever updating block.
 8009216:	4b17      	ldr	r3, [pc, #92]	; (8009274 <st_prep_buffer+0x76c>)
 8009218:	f044 0408 	orr.w	r4, r4, #8
 800921c:	711c      	strb	r4, [r3, #4]
 800921e:	e49e      	b.n	8008b5e <st_prep_buffer+0x56>
        if (pl_block->condition & (PL_COND_FLAG_SPINDLE_CW | PL_COND_FLAG_SPINDLE_CCW)) {
 8009220:	9b00      	ldr	r3, [sp, #0]
 8009222:	7d9b      	ldrb	r3, [r3, #22]
 8009224:	f013 0f30 	tst.w	r3, #48	; 0x30
 8009228:	f43f af63 	beq.w	80090f2 <st_prep_buffer+0x5ea>
          float rpm = pl_block->spindle_speed;
 800922c:	9b00      	ldr	r3, [sp, #0]
 800922e:	6b58      	ldr	r0, [r3, #52]	; 0x34
          prep.current_spindle_pwm = spindle_compute_pwm_value(rpm);
 8009230:	f7fe ff5c 	bl	80080ec <spindle_compute_pwm_value>
 8009234:	4b0f      	ldr	r3, [pc, #60]	; (8009274 <st_prep_buffer+0x76c>)
 8009236:	b2c0      	uxtb	r0, r0
 8009238:	f889 0034 	strb.w	r0, [r9, #52]	; 0x34
 800923c:	f893 a004 	ldrb.w	sl, [r3, #4]
 8009240:	e75e      	b.n	8009100 <st_prep_buffer+0x5f8>
        else if (cycles < AMASS_LEVEL3) { prep_segment->amass_level = 2; }
 8009242:	ebb0 1fd7 	cmp.w	r0, r7, lsr #7
 8009246:	f080 80cf 	bcs.w	80093e8 <st_prep_buffer+0x8e0>
 800924a:	2302      	movs	r3, #2
 800924c:	4a0a      	ldr	r2, [pc, #40]	; (8009278 <st_prep_buffer+0x770>)
 800924e:	9905      	ldr	r1, [sp, #20]
 8009250:	440a      	add	r2, r1
 8009252:	7153      	strb	r3, [r2, #5]
 8009254:	e763      	b.n	800911e <st_prep_buffer+0x616>
 8009256:	9b00      	ldr	r3, [sp, #0]
 8009258:	f8d9 0030 	ldr.w	r0, [r9, #48]	; 0x30
 800925c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800925e:	f7f7 fd2b 	bl	8000cb8 <__aeabi_fmul>
          if (st_prep_block->is_pwm_rate_adjusted) { rpm *= (prep.current_speed * prep.inv_rate); }
 8009262:	4631      	mov	r1, r6
 8009264:	f7f7 fd28 	bl	8000cb8 <__aeabi_fmul>
 8009268:	e7e2      	b.n	8009230 <st_prep_buffer+0x728>
      else { pl_block = plan_get_current_block(); }
 800926a:	f7fb f9e3 	bl	8004634 <plan_get_current_block>
 800926e:	e788      	b.n	8009182 <st_prep_buffer+0x67a>
 8009270:	392ec33e 	.word	0x392ec33e
 8009274:	20001408 	.word	0x20001408
 8009278:	20000df8 	.word	0x20000df8
 800927c:	20000dbc 	.word	0x20000dbc
 8009280:	20000e4a 	.word	0x20000e4a
 8009284:	20000e49 	.word	0x20000e49
 8009288:	20000f58 	.word	0x20000f58
 800928c:	20000dc0 	.word	0x20000dc0
  block_index++;
 8009290:	f899 2000 	ldrb.w	r2, [r9]
  if ( block_index == (SEGMENT_BUFFER_SIZE-1) ) { return(0); }
 8009294:	48b5      	ldr	r0, [pc, #724]	; (800956c <st_prep_buffer+0xa64>)
  block_index++;
 8009296:	3201      	adds	r2, #1
 8009298:	b2d2      	uxtb	r2, r2
  if ( block_index == (SEGMENT_BUFFER_SIZE-1) ) { return(0); }
 800929a:	2a09      	cmp	r2, #9
 800929c:	f000 80fc 	beq.w	8009498 <st_prep_buffer+0x990>
 80092a0:	4613      	mov	r3, r2
 80092a2:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 80092a6:	eb00 08c5 	add.w	r8, r0, r5, lsl #3
          for (idx=0; idx<N_AXIS; idx++) { st_prep_block->steps[idx] = pl_block->steps[idx] << MAX_AMASS_LEVEL; }
 80092aa:	9900      	ldr	r1, [sp, #0]
        prep.st_block_index = st_next_block_index(prep.st_block_index);
 80092ac:	f889 2000 	strb.w	r2, [r9]
          for (idx=0; idx<N_AXIS; idx++) { st_prep_block->steps[idx] = pl_block->steps[idx] << MAX_AMASS_LEVEL; }
 80092b0:	680a      	ldr	r2, [r1, #0]
 80092b2:	684d      	ldr	r5, [r1, #4]
        st_prep_block->direction_bits = pl_block->direction_bits;
 80092b4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
          for (idx=0; idx<N_AXIS; idx++) { st_prep_block->steps[idx] = pl_block->steps[idx] << MAX_AMASS_LEVEL; }
 80092b8:	00d2      	lsls	r2, r2, #3
        st_prep_block->direction_bits = pl_block->direction_bits;
 80092ba:	f8b1 c014 	ldrh.w	ip, [r1, #20]
          for (idx=0; idx<N_AXIS; idx++) { st_prep_block->steps[idx] = pl_block->steps[idx] << MAX_AMASS_LEVEL; }
 80092be:	9501      	str	r5, [sp, #4]
 80092c0:	6889      	ldr	r1, [r1, #8]
 80092c2:	f840 2033 	str.w	r2, [r0, r3, lsl #3]
        st_prep_block->direction_bits = pl_block->direction_bits;
 80092c6:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
          for (idx=0; idx<N_AXIS; idx++) { st_prep_block->steps[idx] = pl_block->steps[idx] << MAX_AMASS_LEVEL; }
 80092ca:	9800      	ldr	r0, [sp, #0]
 80092cc:	9d01      	ldr	r5, [sp, #4]
 80092ce:	68c2      	ldr	r2, [r0, #12]
          st_prep_block->step_event_count = pl_block->step_event_count << MAX_AMASS_LEVEL;
 80092d0:	6900      	ldr	r0, [r0, #16]
          for (idx=0; idx<N_AXIS; idx++) { st_prep_block->steps[idx] = pl_block->steps[idx] << MAX_AMASS_LEVEL; }
 80092d2:	ea4f 0ec5 	mov.w	lr, r5, lsl #3
 80092d6:	00c9      	lsls	r1, r1, #3
        st_prep_block = &st_block_buffer[prep.st_block_index];
 80092d8:	4da5      	ldr	r5, [pc, #660]	; (8009570 <st_prep_buffer+0xa68>)
          for (idx=0; idx<N_AXIS; idx++) { st_prep_block->steps[idx] = pl_block->steps[idx] << MAX_AMASS_LEVEL; }
 80092da:	6099      	str	r1, [r3, #8]
 80092dc:	00d2      	lsls	r2, r2, #3
          st_prep_block->step_event_count = pl_block->step_event_count << MAX_AMASS_LEVEL;
 80092de:	00c1      	lsls	r1, r0, #3
 80092e0:	e9c3 2103 	strd	r2, r1, [r3, #12]
        st_prep_block->direction_bits = pl_block->direction_bits;
 80092e4:	f8a3 c014 	strh.w	ip, [r3, #20]
          for (idx=0; idx<N_AXIS; idx++) { st_prep_block->steps[idx] = pl_block->steps[idx] << MAX_AMASS_LEVEL; }
 80092e8:	f8c3 e004 	str.w	lr, [r3, #4]
        st_prep_block = &st_block_buffer[prep.st_block_index];
 80092ec:	f8c5 8000 	str.w	r8, [r5]
 80092f0:	950b      	str	r5, [sp, #44]	; 0x2c
        prep.steps_remaining = (float)pl_block->step_event_count;
 80092f2:	f7f7 fc89 	bl	8000c08 <__aeabi_ui2f>
        prep.step_per_mm = prep.steps_remaining/pl_block->millimeters;
 80092f6:	4659      	mov	r1, fp
        prep.steps_remaining = (float)pl_block->step_event_count;
 80092f8:	f8c9 0008 	str.w	r0, [r9, #8]
        prep.step_per_mm = prep.steps_remaining/pl_block->millimeters;
 80092fc:	f7f7 fd90 	bl	8000e20 <__aeabi_fdiv>
 8009300:	4601      	mov	r1, r0
        prep.req_mm_increment = REQ_MM_INCREMENT_SCALAR/prep.step_per_mm;
 8009302:	489c      	ldr	r0, [pc, #624]	; (8009574 <st_prep_buffer+0xa6c>)
        prep.step_per_mm = prep.steps_remaining/pl_block->millimeters;
 8009304:	f8c9 100c 	str.w	r1, [r9, #12]
        prep.req_mm_increment = REQ_MM_INCREMENT_SCALAR/prep.step_per_mm;
 8009308:	f7f7 fd8a 	bl	8000e20 <__aeabi_fdiv>
        prep.dt_remainder = 0.0f; // Reset for new segment block
 800930c:	2300      	movs	r3, #0
        prep.req_mm_increment = REQ_MM_INCREMENT_SCALAR/prep.step_per_mm;
 800930e:	f8c9 0010 	str.w	r0, [r9, #16]
        prep.dt_remainder = 0.0f; // Reset for new segment block
 8009312:	f8c9 3004 	str.w	r3, [r9, #4]
        if ((sys.step_control & STEP_CONTROL_EXECUTE_HOLD) || (prep.recalculate_flag & PREP_FLAG_DECEL_OVERRIDE)) {
 8009316:	2f00      	cmp	r7, #0
 8009318:	f040 80fa 	bne.w	8009510 <st_prep_buffer+0xa08>
 800931c:	0735      	lsls	r5, r6, #28
 800931e:	f100 80f7 	bmi.w	8009510 <st_prep_buffer+0xa08>
          prep.current_speed = sqrtf(pl_block->entry_speed_sqr);
 8009322:	9b00      	ldr	r3, [sp, #0]
 8009324:	6998      	ldr	r0, [r3, #24]
 8009326:	f002 fb57 	bl	800b9d8 <sqrtf>
        if (settings.flags & BITFLAG_LASER_MODE) {
 800932a:	4b93      	ldr	r3, [pc, #588]	; (8009578 <st_prep_buffer+0xa70>)
          prep.current_speed = sqrtf(pl_block->entry_speed_sqr);
 800932c:	f8c9 001c 	str.w	r0, [r9, #28]
        if (settings.flags & BITFLAG_LASER_MODE) {
 8009330:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
        st_prep_block->is_pwm_rate_adjusted = false;
 8009334:	f888 7016 	strb.w	r7, [r8, #22]
        if (settings.flags & BITFLAG_LASER_MODE) {
 8009338:	0799      	lsls	r1, r3, #30
 800933a:	f100 80ff 	bmi.w	800953c <st_prep_buffer+0xa34>
			prep.mm_complete = 0.0f; // Default velocity profile complete at 0.0mm from end of block.
 800933e:	2300      	movs	r3, #0
 8009340:	f8c9 3018 	str.w	r3, [r9, #24]
			float inv_2_accel = 0.5f/pl_block->acceleration;
 8009344:	9b00      	ldr	r3, [sp, #0]
 8009346:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 800934a:	6a19      	ldr	r1, [r3, #32]
 800934c:	f7f7 fd68 	bl	8000e20 <__aeabi_fdiv>
 8009350:	4606      	mov	r6, r0
				prep.ramp_type = RAMP_ACCEL; // Initialize as acceleration ramp.
 8009352:	2300      	movs	r3, #0
 8009354:	f889 3014 	strb.w	r3, [r9, #20]
        if (sys.step_control & STEP_CONTROL_EXECUTE_SYS_MOTION) {
 8009358:	0763      	lsls	r3, r4, #29
				prep.accelerate_until = pl_block->millimeters;
 800935a:	f8c9 b028 	str.w	fp, [r9, #40]	; 0x28
        if (sys.step_control & STEP_CONTROL_EXECUTE_SYS_MOTION) {
 800935e:	f140 812f 	bpl.w	80095c0 <st_prep_buffer+0xab8>
          prep.exit_speed = exit_speed_sqr = 0.0f; // Enforce stop at end of system motion.
 8009362:	2300      	movs	r3, #0
 8009364:	461f      	mov	r7, r3
 8009366:	9800      	ldr	r0, [sp, #0]
 8009368:	f8c9 3024 	str.w	r3, [r9, #36]	; 0x24
        nominal_speed = plan_compute_profile_nominal_speed(pl_block);
 800936c:	f7fb f99e 	bl	80046ac <plan_compute_profile_nominal_speed>
 8009370:	4601      	mov	r1, r0
 8009372:	9001      	str	r0, [sp, #4]
				float nominal_speed_sqr = nominal_speed*nominal_speed;
 8009374:	f7f7 fca0 	bl	8000cb8 <__aeabi_fmul>
								0.5f*(pl_block->millimeters+inv_2_accel*(pl_block->entry_speed_sqr-exit_speed_sqr));
 8009378:	4b80      	ldr	r3, [pc, #512]	; (800957c <st_prep_buffer+0xa74>)
				float nominal_speed_sqr = nominal_speed*nominal_speed;
 800937a:	4604      	mov	r4, r0
								0.5f*(pl_block->millimeters+inv_2_accel*(pl_block->entry_speed_sqr-exit_speed_sqr));
 800937c:	681b      	ldr	r3, [r3, #0]
        if (pl_block->entry_speed_sqr > nominal_speed_sqr) { // Only occurs during override reductions.
 800937e:	4601      	mov	r1, r0
								0.5f*(pl_block->millimeters+inv_2_accel*(pl_block->entry_speed_sqr-exit_speed_sqr));
 8009380:	699d      	ldr	r5, [r3, #24]
 8009382:	9300      	str	r3, [sp, #0]
        if (pl_block->entry_speed_sqr > nominal_speed_sqr) { // Only occurs during override reductions.
 8009384:	4628      	mov	r0, r5
								0.5f*(pl_block->millimeters+inv_2_accel*(pl_block->entry_speed_sqr-exit_speed_sqr));
 8009386:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
        if (pl_block->entry_speed_sqr > nominal_speed_sqr) { // Only occurs during override reductions.
 800938a:	f7f7 fe51 	bl	8001030 <__aeabi_fcmpgt>
 800938e:	2800      	cmp	r0, #0
 8009390:	d03d      	beq.n	800940e <st_prep_buffer+0x906>
          prep.accelerate_until = pl_block->millimeters - inv_2_accel*(pl_block->entry_speed_sqr-nominal_speed_sqr);
 8009392:	4629      	mov	r1, r5
 8009394:	4620      	mov	r0, r4
 8009396:	f7f7 fb85 	bl	8000aa4 <__aeabi_fsub>
 800939a:	4631      	mov	r1, r6
 800939c:	f7f7 fc8c 	bl	8000cb8 <__aeabi_fmul>
 80093a0:	4659      	mov	r1, fp
 80093a2:	f7f7 fb81 	bl	8000aa8 <__addsf3>
          if (prep.accelerate_until <= 0.0f) { // Deceleration-only.
 80093a6:	2100      	movs	r1, #0
          prep.accelerate_until = pl_block->millimeters - inv_2_accel*(pl_block->entry_speed_sqr-nominal_speed_sqr);
 80093a8:	f8c9 0028 	str.w	r0, [r9, #40]	; 0x28
 80093ac:	9002      	str	r0, [sp, #8]
          if (prep.accelerate_until <= 0.0f) { // Deceleration-only.
 80093ae:	f7f7 fe2b 	bl	8001008 <__aeabi_fcmple>
 80093b2:	2800      	cmp	r0, #0
 80093b4:	d173      	bne.n	800949e <st_prep_buffer+0x996>
            prep.decelerate_after = inv_2_accel*(nominal_speed_sqr-exit_speed_sqr); // Should always be >= 0.0 due to planner reinit.
 80093b6:	4639      	mov	r1, r7
 80093b8:	4620      	mov	r0, r4
 80093ba:	f7f7 fb73 	bl	8000aa4 <__aeabi_fsub>
 80093be:	4631      	mov	r1, r6
 80093c0:	f7f7 fc7a 	bl	8000cb8 <__aeabi_fmul>
            prep.ramp_type = RAMP_DECEL_OVERRIDE;
 80093c4:	f04f 0803 	mov.w	r8, #3
						prep.maximum_speed = nominal_speed;
 80093c8:	9b01      	ldr	r3, [sp, #4]
            prep.decelerate_after = inv_2_accel*(nominal_speed_sqr-exit_speed_sqr); // Should always be >= 0.0 due to planner reinit.
 80093ca:	9003      	str	r0, [sp, #12]
						prep.maximum_speed = nominal_speed;
 80093cc:	f8c9 3020 	str.w	r3, [r9, #32]
 80093d0:	4b6b      	ldr	r3, [pc, #428]	; (8009580 <st_prep_buffer+0xa78>)
            prep.decelerate_after = inv_2_accel*(nominal_speed_sqr-exit_speed_sqr); // Should always be >= 0.0 due to planner reinit.
 80093d2:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
 80093d6:	791c      	ldrb	r4, [r3, #4]
 80093d8:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
            prep.ramp_type = RAMP_DECEL_OVERRIDE;
 80093dc:	f889 8014 	strb.w	r8, [r9, #20]
 80093e0:	f8d9 a018 	ldr.w	sl, [r9, #24]
 80093e4:	9307      	str	r3, [sp, #28]
 80093e6:	e716      	b.n	8009216 <st_prep_buffer+0x70e>
        else { prep_segment->amass_level = 3; }
 80093e8:	2203      	movs	r2, #3
 80093ea:	4966      	ldr	r1, [pc, #408]	; (8009584 <st_prep_buffer+0xa7c>)
 80093ec:	9f05      	ldr	r7, [sp, #20]
 80093ee:	4613      	mov	r3, r2
 80093f0:	4439      	add	r1, r7
 80093f2:	714a      	strb	r2, [r1, #5]
 80093f4:	e693      	b.n	800911e <st_prep_buffer+0x616>
 80093f6:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
            prep.current_speed = prep.maximum_speed;
 80093fa:	9e01      	ldr	r6, [sp, #4]
            prep.ramp_type = RAMP_CRUISE;
 80093fc:	f04f 0801 	mov.w	r8, #1
 8009400:	e4b9      	b.n	8008d76 <st_prep_buffer+0x26e>
 8009402:	46cb      	mov	fp, r9
 8009404:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
            prep.ramp_type = RAMP_DECEL;
 8009408:	f04f 0802 	mov.w	r8, #2
 800940c:	e4b3      	b.n	8008d76 <st_prep_buffer+0x26e>
								0.5f*(pl_block->millimeters+inv_2_accel*(pl_block->entry_speed_sqr-exit_speed_sqr));
 800940e:	4639      	mov	r1, r7
 8009410:	4628      	mov	r0, r5
 8009412:	f7f7 fb47 	bl	8000aa4 <__aeabi_fsub>
 8009416:	4631      	mov	r1, r6
 8009418:	f7f7 fc4e 	bl	8000cb8 <__aeabi_fmul>
 800941c:	4659      	mov	r1, fp
 800941e:	f7f7 fb43 	bl	8000aa8 <__addsf3>
				float intersect_distance =
 8009422:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8009426:	f7f7 fc47 	bl	8000cb8 <__aeabi_fmul>
 800942a:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
				} else if (intersect_distance > 0.0f) {
 800942e:	2100      	movs	r1, #0
				float intersect_distance =
 8009430:	4680      	mov	r8, r0
 8009432:	9002      	str	r0, [sp, #8]
 8009434:	9307      	str	r3, [sp, #28]
				} else if (intersect_distance > 0.0f) {
 8009436:	f7f7 fdfb 	bl	8001030 <__aeabi_fcmpgt>
 800943a:	2800      	cmp	r0, #0
 800943c:	d055      	beq.n	80094ea <st_prep_buffer+0x9e2>
					if (intersect_distance < pl_block->millimeters) { // Either trapezoid or triangle types
 800943e:	4641      	mov	r1, r8
 8009440:	4658      	mov	r0, fp
 8009442:	f7f7 fdf5 	bl	8001030 <__aeabi_fcmpgt>
 8009446:	2800      	cmp	r0, #0
 8009448:	f000 80dd 	beq.w	8009606 <st_prep_buffer+0xafe>
						prep.decelerate_after = inv_2_accel*(nominal_speed_sqr-exit_speed_sqr);
 800944c:	4639      	mov	r1, r7
 800944e:	4620      	mov	r0, r4
 8009450:	f7f7 fb28 	bl	8000aa4 <__aeabi_fsub>
 8009454:	4631      	mov	r1, r6
 8009456:	f7f7 fc2f 	bl	8000cb8 <__aeabi_fmul>
						if (prep.decelerate_after < intersect_distance) { // Trapezoid type
 800945a:	4641      	mov	r1, r8
						prep.decelerate_after = inv_2_accel*(nominal_speed_sqr-exit_speed_sqr);
 800945c:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
 8009460:	9003      	str	r0, [sp, #12]
						if (prep.decelerate_after < intersect_distance) { // Trapezoid type
 8009462:	f7f7 fdc7 	bl	8000ff4 <__aeabi_fcmplt>
 8009466:	2800      	cmp	r0, #0
 8009468:	f000 80e7 	beq.w	800963a <st_prep_buffer+0xb32>
							prep.maximum_speed = nominal_speed;
 800946c:	9b01      	ldr	r3, [sp, #4]
							if (pl_block->entry_speed_sqr == nominal_speed_sqr) {
 800946e:	4621      	mov	r1, r4
							prep.maximum_speed = nominal_speed;
 8009470:	f8c9 3020 	str.w	r3, [r9, #32]
 8009474:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
							if (pl_block->entry_speed_sqr == nominal_speed_sqr) {
 8009478:	4628      	mov	r0, r5
 800947a:	9302      	str	r3, [sp, #8]
 800947c:	f7f7 fdb0 	bl	8000fe0 <__aeabi_fcmpeq>
 8009480:	2800      	cmp	r0, #0
 8009482:	f000 80f7 	beq.w	8009674 <st_prep_buffer+0xb6c>
								prep.ramp_type = RAMP_CRUISE;
 8009486:	f04f 0801 	mov.w	r8, #1
 800948a:	4b3d      	ldr	r3, [pc, #244]	; (8009580 <st_prep_buffer+0xa78>)
 800948c:	f889 8014 	strb.w	r8, [r9, #20]
 8009490:	791c      	ldrb	r4, [r3, #4]
 8009492:	f8d9 a018 	ldr.w	sl, [r9, #24]
 8009496:	e6be      	b.n	8009216 <st_prep_buffer+0x70e>
  if ( block_index == (SEGMENT_BUFFER_SIZE-1) ) { return(0); }
 8009498:	461a      	mov	r2, r3
 800949a:	4680      	mov	r8, r0
 800949c:	e705      	b.n	80092aa <st_prep_buffer+0x7a2>
            prep.ramp_type = RAMP_DECEL;
 800949e:	f04f 0802 	mov.w	r8, #2
            prep.exit_speed = sqrtf(pl_block->entry_speed_sqr - 2*pl_block->acceleration*pl_block->millimeters);
 80094a2:	9b00      	ldr	r3, [sp, #0]
            prep.ramp_type = RAMP_DECEL;
 80094a4:	f889 8014 	strb.w	r8, [r9, #20]
            prep.exit_speed = sqrtf(pl_block->entry_speed_sqr - 2*pl_block->acceleration*pl_block->millimeters);
 80094a8:	6a19      	ldr	r1, [r3, #32]
 80094aa:	4658      	mov	r0, fp
 80094ac:	f7f7 fc04 	bl	8000cb8 <__aeabi_fmul>
 80094b0:	4601      	mov	r1, r0
 80094b2:	f7f7 faf9 	bl	8000aa8 <__addsf3>
 80094b6:	4601      	mov	r1, r0
 80094b8:	4628      	mov	r0, r5
 80094ba:	f7f7 faf3 	bl	8000aa4 <__aeabi_fsub>
 80094be:	f002 fa8b 	bl	800b9d8 <sqrtf>
            prep.recalculate_flag |= PREP_FLAG_DECEL_OVERRIDE; // Flag to load next block as deceleration override.
 80094c2:	f899 3001 	ldrb.w	r3, [r9, #1]
            prep.exit_speed = sqrtf(pl_block->entry_speed_sqr - 2*pl_block->acceleration*pl_block->millimeters);
 80094c6:	9007      	str	r0, [sp, #28]
            prep.recalculate_flag |= PREP_FLAG_DECEL_OVERRIDE; // Flag to load next block as deceleration override.
 80094c8:	f043 0308 	orr.w	r3, r3, #8
 80094cc:	f889 3001 	strb.w	r3, [r9, #1]
 80094d0:	4b2b      	ldr	r3, [pc, #172]	; (8009580 <st_prep_buffer+0xa78>)
            prep.exit_speed = sqrtf(pl_block->entry_speed_sqr - 2*pl_block->acceleration*pl_block->millimeters);
 80094d2:	f8c9 0024 	str.w	r0, [r9, #36]	; 0x24
 80094d6:	791c      	ldrb	r4, [r3, #4]
 80094d8:	f8d9 3020 	ldr.w	r3, [r9, #32]
 80094dc:	f8d9 a018 	ldr.w	sl, [r9, #24]
 80094e0:	9301      	str	r3, [sp, #4]
 80094e2:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
 80094e6:	9303      	str	r3, [sp, #12]
 80094e8:	e695      	b.n	8009216 <st_prep_buffer+0x70e>
					prep.maximum_speed = prep.exit_speed;
 80094ea:	2300      	movs	r3, #0
 80094ec:	9302      	str	r3, [sp, #8]
 80094ee:	4b24      	ldr	r3, [pc, #144]	; (8009580 <st_prep_buffer+0xa78>)
 80094f0:	9a07      	ldr	r2, [sp, #28]
 80094f2:	791c      	ldrb	r4, [r3, #4]
 80094f4:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
 80094f8:	9201      	str	r2, [sp, #4]
 80094fa:	9303      	str	r3, [sp, #12]
					prep.accelerate_until = 0.0f;
 80094fc:	2300      	movs	r3, #0
 80094fe:	f8d9 a018 	ldr.w	sl, [r9, #24]
 8009502:	f899 8014 	ldrb.w	r8, [r9, #20]
 8009506:	f8c9 3028 	str.w	r3, [r9, #40]	; 0x28
					prep.maximum_speed = prep.exit_speed;
 800950a:	f8c9 2020 	str.w	r2, [r9, #32]
 800950e:	e682      	b.n	8009216 <st_prep_buffer+0x70e>
          prep.current_speed = prep.exit_speed;
 8009510:	f8d9 1024 	ldr.w	r1, [r9, #36]	; 0x24
          prep.recalculate_flag &= ~(PREP_FLAG_DECEL_OVERRIDE);
 8009514:	f026 0608 	bic.w	r6, r6, #8
          prep.current_speed = prep.exit_speed;
 8009518:	f8c9 101c 	str.w	r1, [r9, #28]
          pl_block->entry_speed_sqr = prep.exit_speed*prep.exit_speed;
 800951c:	4608      	mov	r0, r1
 800951e:	f7f7 fbcb 	bl	8000cb8 <__aeabi_fmul>
        st_prep_block->is_pwm_rate_adjusted = false;
 8009522:	2200      	movs	r2, #0
          pl_block->entry_speed_sqr = prep.exit_speed*prep.exit_speed;
 8009524:	9900      	ldr	r1, [sp, #0]
        if (settings.flags & BITFLAG_LASER_MODE) {
 8009526:	4b14      	ldr	r3, [pc, #80]	; (8009578 <st_prep_buffer+0xa70>)
          pl_block->entry_speed_sqr = prep.exit_speed*prep.exit_speed;
 8009528:	6188      	str	r0, [r1, #24]
        if (settings.flags & BITFLAG_LASER_MODE) {
 800952a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
          prep.recalculate_flag &= ~(PREP_FLAG_DECEL_OVERRIDE);
 800952e:	f889 6001 	strb.w	r6, [r9, #1]
        if (settings.flags & BITFLAG_LASER_MODE) {
 8009532:	0798      	lsls	r0, r3, #30
        st_prep_block->is_pwm_rate_adjusted = false;
 8009534:	f888 2016 	strb.w	r2, [r8, #22]
        if (settings.flags & BITFLAG_LASER_MODE) {
 8009538:	f57f ae3a 	bpl.w	80091b0 <st_prep_buffer+0x6a8>
          if (pl_block->condition & PL_COND_FLAG_SPINDLE_CCW) {
 800953c:	9a00      	ldr	r2, [sp, #0]
 800953e:	7d93      	ldrb	r3, [r2, #22]
 8009540:	4615      	mov	r5, r2
 8009542:	069a      	lsls	r2, r3, #26
 8009544:	f57f ae34 	bpl.w	80091b0 <st_prep_buffer+0x6a8>
            prep.inv_rate = 1.0f / pl_block->programmed_rate;
 8009548:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800954a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800954e:	f7f7 fc67 	bl	8000e20 <__aeabi_fdiv>
            st_prep_block->is_pwm_rate_adjusted = true;
 8009552:	2301      	movs	r3, #1
 8009554:	f888 3016 	strb.w	r3, [r8, #22]
 8009558:	4b09      	ldr	r3, [pc, #36]	; (8009580 <st_prep_buffer+0xa78>)
 800955a:	f8d5 b024 	ldr.w	fp, [r5, #36]	; 0x24
 800955e:	791c      	ldrb	r4, [r3, #4]
            prep.inv_rate = 1.0f / pl_block->programmed_rate;
 8009560:	f8c9 0030 	str.w	r0, [r9, #48]	; 0x30
 8009564:	f004 0702 	and.w	r7, r4, #2
 8009568:	e622      	b.n	80091b0 <st_prep_buffer+0x6a8>
 800956a:	4770      	bx	lr
 800956c:	20000e80 	.word	0x20000e80
 8009570:	20000f58 	.word	0x20000f58
 8009574:	3fa00000 	.word	0x3fa00000
 8009578:	20001744 	.word	0x20001744
 800957c:	20000dbc 	.word	0x20000dbc
 8009580:	20001408 	.word	0x20001408
 8009584:	20000df8 	.word	0x20000df8
					prep.exit_speed = sqrtf(pl_block->entry_speed_sqr-2*pl_block->acceleration*pl_block->millimeters);
 8009588:	4629      	mov	r1, r5
 800958a:	4628      	mov	r0, r5
 800958c:	f7f7 fa8c 	bl	8000aa8 <__addsf3>
 8009590:	4659      	mov	r1, fp
 8009592:	f7f7 fb91 	bl	8000cb8 <__aeabi_fmul>
 8009596:	4601      	mov	r1, r0
 8009598:	4630      	mov	r0, r6
 800959a:	f7f7 fa83 	bl	8000aa4 <__aeabi_fsub>
 800959e:	f002 fa1b 	bl	800b9d8 <sqrtf>
 80095a2:	f8d9 3020 	ldr.w	r3, [r9, #32]
 80095a6:	9007      	str	r0, [sp, #28]
 80095a8:	9301      	str	r3, [sp, #4]
 80095aa:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
 80095ae:	f8c9 0024 	str.w	r0, [r9, #36]	; 0x24
 80095b2:	9302      	str	r3, [sp, #8]
 80095b4:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
 80095b8:	f04f 0a00 	mov.w	sl, #0
 80095bc:	9303      	str	r3, [sp, #12]
 80095be:	e62a      	b.n	8009216 <st_prep_buffer+0x70e>
          exit_speed_sqr = plan_get_exec_block_exit_speed_sqr();
 80095c0:	f7fb f84c 	bl	800465c <plan_get_exec_block_exit_speed_sqr>
 80095c4:	4607      	mov	r7, r0
          prep.exit_speed = sqrtf(exit_speed_sqr);
 80095c6:	f002 fa07 	bl	800b9d8 <sqrtf>
 80095ca:	4b35      	ldr	r3, [pc, #212]	; (80096a0 <st_prep_buffer+0xb98>)
 80095cc:	f8c9 0024 	str.w	r0, [r9, #36]	; 0x24
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	9300      	str	r3, [sp, #0]
 80095d4:	4618      	mov	r0, r3
 80095d6:	e6c9      	b.n	800936c <st_prep_buffer+0x864>
 80095d8:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
            prep.current_speed = prep.maximum_speed;
 80095dc:	9e01      	ldr	r6, [sp, #4]
						mm_remaining = prep.accelerate_until;
 80095de:	f8dd b008 	ldr.w	fp, [sp, #8]
            prep.ramp_type = RAMP_CRUISE;
 80095e2:	f04f 0801 	mov.w	r8, #1
 80095e6:	f7ff bbc6 	b.w	8008d76 <st_prep_buffer+0x26e>
 80095ea:	46cb      	mov	fp, r9
            prep.ramp_type = RAMP_DECEL;
 80095ec:	f04f 0802 	mov.w	r8, #2
 80095f0:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 80095f4:	f7ff bbbf 	b.w	8008d76 <st_prep_buffer+0x26e>
            mm_remaining = mm_var;
 80095f8:	46c3      	mov	fp, r8
 80095fa:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 80095fe:	f04f 0801 	mov.w	r8, #1
 8009602:	f7ff bbb8 	b.w	8008d76 <st_prep_buffer+0x26e>
            prep.ramp_type = RAMP_DECEL;
 8009606:	f04f 0802 	mov.w	r8, #2
 800960a:	4b26      	ldr	r3, [pc, #152]	; (80096a4 <st_prep_buffer+0xb9c>)
 800960c:	f889 8014 	strb.w	r8, [r9, #20]
 8009610:	791c      	ldrb	r4, [r3, #4]
 8009612:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8009616:	f8d9 a018 	ldr.w	sl, [r9, #24]
 800961a:	9301      	str	r3, [sp, #4]
 800961c:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
 8009620:	9302      	str	r3, [sp, #8]
 8009622:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
 8009626:	9303      	str	r3, [sp, #12]
 8009628:	e5f5      	b.n	8009216 <st_prep_buffer+0x70e>
          bit_true(sys.step_control,STEP_CONTROL_END_MOTION);
 800962a:	4b1e      	ldr	r3, [pc, #120]	; (80096a4 <st_prep_buffer+0xb9c>)
 800962c:	f04a 0a01 	orr.w	sl, sl, #1
 8009630:	f883 a004 	strb.w	sl, [r3, #4]
}
 8009634:	b00f      	add	sp, #60	; 0x3c
 8009636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							prep.maximum_speed = sqrtf(2.0f*pl_block->acceleration*intersect_distance+exit_speed_sqr);
 800963a:	9b00      	ldr	r3, [sp, #0]
 800963c:	4645      	mov	r5, r8
 800963e:	6a19      	ldr	r1, [r3, #32]
							prep.accelerate_until = intersect_distance;
 8009640:	f8c9 8028 	str.w	r8, [r9, #40]	; 0x28
							prep.decelerate_after = intersect_distance;
 8009644:	f8c9 802c 	str.w	r8, [r9, #44]	; 0x2c
							prep.maximum_speed = sqrtf(2.0f*pl_block->acceleration*intersect_distance+exit_speed_sqr);
 8009648:	4608      	mov	r0, r1
 800964a:	f7f7 fa2d 	bl	8000aa8 <__addsf3>
 800964e:	4641      	mov	r1, r8
 8009650:	f7f7 fb32 	bl	8000cb8 <__aeabi_fmul>
 8009654:	4639      	mov	r1, r7
 8009656:	f7f7 fa27 	bl	8000aa8 <__addsf3>
 800965a:	f002 f9bd 	bl	800b9d8 <sqrtf>
 800965e:	4b11      	ldr	r3, [pc, #68]	; (80096a4 <st_prep_buffer+0xb9c>)
 8009660:	9001      	str	r0, [sp, #4]
 8009662:	791c      	ldrb	r4, [r3, #4]
 8009664:	f8c9 0020 	str.w	r0, [r9, #32]
 8009668:	f8d9 a018 	ldr.w	sl, [r9, #24]
 800966c:	f899 8014 	ldrb.w	r8, [r9, #20]
 8009670:	9503      	str	r5, [sp, #12]
 8009672:	e5d0      	b.n	8009216 <st_prep_buffer+0x70e>
								prep.accelerate_until -= inv_2_accel*(nominal_speed_sqr-pl_block->entry_speed_sqr);
 8009674:	4621      	mov	r1, r4
 8009676:	4628      	mov	r0, r5
 8009678:	f7f7 fa14 	bl	8000aa4 <__aeabi_fsub>
 800967c:	4631      	mov	r1, r6
 800967e:	f7f7 fb1b 	bl	8000cb8 <__aeabi_fmul>
 8009682:	4601      	mov	r1, r0
 8009684:	9802      	ldr	r0, [sp, #8]
 8009686:	f7f7 fa0f 	bl	8000aa8 <__addsf3>
 800968a:	4b06      	ldr	r3, [pc, #24]	; (80096a4 <st_prep_buffer+0xb9c>)
 800968c:	9002      	str	r0, [sp, #8]
 800968e:	791c      	ldrb	r4, [r3, #4]
 8009690:	f8c9 0028 	str.w	r0, [r9, #40]	; 0x28
 8009694:	f8d9 a018 	ldr.w	sl, [r9, #24]
 8009698:	f899 8014 	ldrb.w	r8, [r9, #20]
 800969c:	e5bb      	b.n	8009216 <st_prep_buffer+0x70e>
 800969e:	bf00      	nop
 80096a0:	20000dbc 	.word	0x20000dbc
 80096a4:	20001408 	.word	0x20001408

080096a8 <st_get_realtime_rate>:
  if (sys.state & (STATE_CYCLE | STATE_HOMING | STATE_HOLD | STATE_JOG | STATE_SAFETY_DOOR)){
 80096a8:	4b04      	ldr	r3, [pc, #16]	; (80096bc <st_get_realtime_rate+0x14>)
 80096aa:	781b      	ldrb	r3, [r3, #0]
 80096ac:	f013 0f7c 	tst.w	r3, #124	; 0x7c
    return prep.current_speed;
 80096b0:	bf1a      	itte	ne
 80096b2:	4b03      	ldrne	r3, [pc, #12]	; (80096c0 <st_get_realtime_rate+0x18>)
 80096b4:	69d8      	ldrne	r0, [r3, #28]
  return 0.0f;
 80096b6:	2000      	moveq	r0, #0
}
 80096b8:	4770      	bx	lr
 80096ba:	bf00      	nop
 80096bc:	20001408 	.word	0x20001408
 80096c0:	20000dc0 	.word	0x20000dc0

080096c4 <system_init>:

#include "grbl.h"


void system_init()
{
 80096c4:	b510      	push	{r4, lr}
  CONTROL_PCMSK |= CONTROL_MASK;  // Enable specific pins of the Pin Change Interrupt
  PCICR |= (1 << CONTROL_INT);   // Enable Pin Change Interrupt
#endif
#ifdef STM32F103C8
  GPIO_InitTypeDef GPIO_InitStructure;
  RCC_APB2PeriphClockCmd(RCC_CONTROL_PORT | RCC_APB2Periph_AFIO, ENABLE);
 80096c6:	2101      	movs	r1, #1
{
 80096c8:	b084      	sub	sp, #16
  RCC_APB2PeriphClockCmd(RCC_CONTROL_PORT | RCC_APB2Periph_AFIO, ENABLE);
 80096ca:	2009      	movs	r0, #9
 80096cc:	f7f8 f8b4 	bl	8001838 <RCC_APB2PeriphClockCmd>
#ifdef DISABLE_CONTROL_PIN_PULL_UP
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
#else
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
#endif
  GPIO_InitStructure.GPIO_Pin = CONTROL_MASK;
 80096d0:	f44f 74f0 	mov.w	r4, #480	; 0x1e0
  GPIO_PinRemapConfig(GPIO_Remap_SWJ_JTAGDisable, ENABLE); // to enable PA15, PB3, PB4 pins
 80096d4:	2101      	movs	r1, #1
 80096d6:	481a      	ldr	r0, [pc, #104]	; (8009740 <system_init+0x7c>)
 80096d8:	f7f8 f808 	bl	80016ec <GPIO_PinRemapConfig>
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80096dc:	2203      	movs	r2, #3
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 80096de:	2348      	movs	r3, #72	; 0x48
  GPIO_InitStructure.GPIO_Pin = CONTROL_MASK;
 80096e0:	a904      	add	r1, sp, #16
 80096e2:	f821 4d10 	strh.w	r4, [r1, #-16]!
  GPIO_Init(CONTROL_PORT, &GPIO_InitStructure);
 80096e6:	4817      	ldr	r0, [pc, #92]	; (8009744 <system_init+0x80>)
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80096e8:	f88d 2002 	strb.w	r2, [sp, #2]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 80096ec:	f88d 3003 	strb.w	r3, [sp, #3]
  GPIO_Init(CONTROL_PORT, &GPIO_InitStructure);
 80096f0:	f7f7 fe64 	bl	80013bc <GPIO_Init>

  GPIO_EXTILineConfig(GPIO_CONTROL_PORT, CONTROL_RESET_BIT);
 80096f4:	2105      	movs	r1, #5
 80096f6:	2001      	movs	r0, #1
 80096f8:	f7f8 f82e 	bl	8001758 <GPIO_EXTILineConfig>
  GPIO_EXTILineConfig(GPIO_CONTROL_PORT, CONTROL_FEED_HOLD_BIT);
 80096fc:	2106      	movs	r1, #6
 80096fe:	2001      	movs	r0, #1
 8009700:	f7f8 f82a 	bl	8001758 <GPIO_EXTILineConfig>
  GPIO_EXTILineConfig(GPIO_CONTROL_PORT, CONTROL_CYCLE_START_BIT);
 8009704:	2107      	movs	r1, #7
 8009706:	2001      	movs	r0, #1
 8009708:	f7f8 f826 	bl	8001758 <GPIO_EXTILineConfig>
  GPIO_EXTILineConfig(GPIO_CONTROL_PORT, CONTROL_SAFETY_DOOR_BIT);
 800970c:	2108      	movs	r1, #8
 800970e:	2001      	movs	r0, #1
 8009710:	f7f8 f822 	bl	8001758 <GPIO_EXTILineConfig>

  EXTI_InitTypeDef EXTI_InitStructure;
  EXTI_InitStructure.EXTI_Line = CONTROL_MASK;    //
  EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt; //Interrupt mode, optional values for the interrupt EXTI_Mode_Interrupt and event EXTI_Mode_Event.
 8009714:	2100      	movs	r1, #0
  EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising_Falling; //Trigger mode, can be a falling edge trigger EXTI_Trigger_Falling, the rising edge triggered EXTI_Trigger_Rising, or any level (rising edge and falling edge trigger EXTI_Trigger_Rising_Falling)
 8009716:	2210      	movs	r2, #16
  EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8009718:	2301      	movs	r3, #1
  EXTI_Init(&EXTI_InitStructure);
 800971a:	a802      	add	r0, sp, #8
  EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt; //Interrupt mode, optional values for the interrupt EXTI_Mode_Interrupt and event EXTI_Mode_Event.
 800971c:	f88d 100c 	strb.w	r1, [sp, #12]
  EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising_Falling; //Trigger mode, can be a falling edge trigger EXTI_Trigger_Falling, the rising edge triggered EXTI_Trigger_Rising, or any level (rising edge and falling edge trigger EXTI_Trigger_Rising_Falling)
 8009720:	f88d 200d 	strb.w	r2, [sp, #13]
  EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8009724:	f88d 300e 	strb.w	r3, [sp, #14]
  EXTI_InitStructure.EXTI_Line = CONTROL_MASK;    //
 8009728:	9402      	str	r4, [sp, #8]
  EXTI_Init(&EXTI_InitStructure);
 800972a:	f7f7 fd1d 	bl	8001168 <EXTI_Init>

  NVIC_InitTypeDef NVIC_InitStructure;
  NVIC_InitStructure.NVIC_IRQChannel = EXTI9_5_IRQn; //Enable keypad external interrupt channel
 800972e:	4b06      	ldr	r3, [pc, #24]	; (8009748 <system_init+0x84>)
 8009730:	a804      	add	r0, sp, #16
 8009732:	f840 3d0c 	str.w	r3, [r0, #-12]!
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x02; //Priority 2,
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x02; //Sub priority 2
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE; //Enable external interrupt channel
  NVIC_Init(&NVIC_InitStructure);
 8009736:	f7f7 fceb 	bl	8001110 <NVIC_Init>
#endif
}
 800973a:	b004      	add	sp, #16
 800973c:	bd10      	pop	{r4, pc}
 800973e:	bf00      	nop
 8009740:	00300200 	.word	0x00300200
 8009744:	40010c00 	.word	0x40010c00
 8009748:	01020217 	.word	0x01020217

0800974c <system_control_get_state>:

// Returns control pin state as a uint8 bitfield. Each bit indicates the input pin state, where
// triggered is 1 and not triggered is 0. Invert mask is applied. Bitfield organization is
// defined by the CONTROL_PIN_INDEX in the header file.
uint8_t system_control_get_state()
{
 800974c:	b508      	push	{r3, lr}
#endif
#ifdef WIN32
  uint8_t pin = 0;
#endif
#ifdef STM32F103C8
  uint16_t pin= GPIO_ReadInputData(CONTROL_PIN_PORT);
 800974e:	480a      	ldr	r0, [pc, #40]	; (8009778 <system_control_get_state+0x2c>)
 8009750:	f7f7 ffba 	bl	80016c8 <GPIO_ReadInputData>
#endif
  #ifdef INVERT_CONTROL_PIN_MASK
    pin ^= INVERT_CONTROL_PIN_MASK;
  #endif
  if (pin) {
 8009754:	b168      	cbz	r0, 8009772 <system_control_get_state+0x26>
    #ifdef ENABLE_SAFETY_DOOR_INPUT_PIN
      if (bit_isfalse(pin,(1<<CONTROL_SAFETY_DOOR_BIT))) { control_state |= CONTROL_PIN_INDEX_SAFETY_DOOR; }
    #endif
    if (bit_isfalse(pin,(1<<CONTROL_RESET_BIT))) { control_state |= CONTROL_PIN_INDEX_RESET; }
 8009756:	f080 0320 	eor.w	r3, r0, #32
    if (bit_isfalse(pin,(1<<CONTROL_FEED_HOLD_BIT))) { control_state |= CONTROL_PIN_INDEX_FEED_HOLD; }
 800975a:	0641      	lsls	r1, r0, #25
  uint8_t control_state = 0;
 800975c:	f3c3 1340 	ubfx	r3, r3, #5, #1
    if (bit_isfalse(pin,(1<<CONTROL_FEED_HOLD_BIT))) { control_state |= CONTROL_PIN_INDEX_FEED_HOLD; }
 8009760:	bf58      	it	pl
 8009762:	f043 0302 	orrpl.w	r3, r3, #2
    if (bit_isfalse(pin,(1<<CONTROL_CYCLE_START_BIT))) { control_state |= CONTROL_PIN_INDEX_CYCLE_START; }
 8009766:	0602      	lsls	r2, r0, #24
 8009768:	d401      	bmi.n	800976e <system_control_get_state+0x22>
 800976a:	f043 0304 	orr.w	r3, r3, #4
  }
  return(control_state);
}
 800976e:	4618      	mov	r0, r3
 8009770:	bd08      	pop	{r3, pc}
  uint8_t control_state = 0;
 8009772:	4603      	mov	r3, r0
}
 8009774:	4618      	mov	r0, r3
 8009776:	bd08      	pop	{r3, pc}
 8009778:	40010c00 	.word	0x40010c00

0800977c <EXTI9_5_IRQHandler>:
  }
}
#endif
#if defined (STM32F103C8)
void EXTI9_5_IRQHandler(void)
{
 800977c:	b508      	push	{r3, lr}
    EXTI_ClearITPendingBit((1 << CONTROL_RESET_BIT) | (1 << CONTROL_FEED_HOLD_BIT) | (1 << CONTROL_CYCLE_START_BIT) | (1 << CONTROL_SAFETY_DOOR_BIT));
 800977e:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8009782:	f7f7 fd3d 	bl	8001200 <EXTI_ClearITPendingBit>
  uint16_t pin= GPIO_ReadInputData(CONTROL_PIN_PORT);
 8009786:	4811      	ldr	r0, [pc, #68]	; (80097cc <EXTI9_5_IRQHandler+0x50>)
 8009788:	f7f7 ff9e 	bl	80016c8 <GPIO_ReadInputData>
  if (pin) {
 800978c:	b160      	cbz	r0, 80097a8 <EXTI9_5_IRQHandler+0x2c>
    if (bit_isfalse(pin,(1<<CONTROL_RESET_BIT))) { control_state |= CONTROL_PIN_INDEX_RESET; }
 800978e:	0681      	lsls	r1, r0, #26
 8009790:	f000 0340 	and.w	r3, r0, #64	; 0x40
 8009794:	f000 0280 	and.w	r2, r0, #128	; 0x80
 8009798:	d407      	bmi.n	80097aa <EXTI9_5_IRQHandler+0x2e>
	uint8_t pin = system_control_get_state();
	if (pin) 
	{ 
		if (bit_istrue(pin,CONTROL_PIN_INDEX_RESET)) 
		{
			mc_reset();
 800979a:	f7fa fc3f 	bl	800401c <mc_reset>
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
 800979e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80097a2:	4b0b      	ldr	r3, [pc, #44]	; (80097d0 <EXTI9_5_IRQHandler+0x54>)
 80097a4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
			bit_true(sys_rt_exec_state, EXEC_SAFETY_DOOR);
		}
#endif
		NVIC_ClearPendingIRQ(EXTI9_5_IRQn);
}
}
 80097a8:	bd08      	pop	{r3, pc}
    if (bit_isfalse(pin,(1<<CONTROL_FEED_HOLD_BIT))) { control_state |= CONTROL_PIN_INDEX_FEED_HOLD; }
 80097aa:	b933      	cbnz	r3, 80097ba <EXTI9_5_IRQHandler+0x3e>
    if (bit_isfalse(pin,(1<<CONTROL_CYCLE_START_BIT))) { control_state |= CONTROL_PIN_INDEX_CYCLE_START; }
 80097ac:	b13a      	cbz	r2, 80097be <EXTI9_5_IRQHandler+0x42>
			bit_true(sys_rt_exec_state, EXEC_FEED_HOLD);
 80097ae:	4a09      	ldr	r2, [pc, #36]	; (80097d4 <EXTI9_5_IRQHandler+0x58>)
 80097b0:	7813      	ldrb	r3, [r2, #0]
 80097b2:	f043 0308 	orr.w	r3, r3, #8
 80097b6:	7013      	strb	r3, [r2, #0]
 80097b8:	e7f1      	b.n	800979e <EXTI9_5_IRQHandler+0x22>
    if (bit_isfalse(pin,(1<<CONTROL_CYCLE_START_BIT))) { control_state |= CONTROL_PIN_INDEX_CYCLE_START; }
 80097ba:	2a00      	cmp	r2, #0
 80097bc:	d1f4      	bne.n	80097a8 <EXTI9_5_IRQHandler+0x2c>
			bit_true(sys_rt_exec_state, EXEC_CYCLE_START);
 80097be:	4a05      	ldr	r2, [pc, #20]	; (80097d4 <EXTI9_5_IRQHandler+0x58>)
 80097c0:	7813      	ldrb	r3, [r2, #0]
 80097c2:	f043 0302 	orr.w	r3, r3, #2
 80097c6:	7013      	strb	r3, [r2, #0]
 80097c8:	e7e9      	b.n	800979e <EXTI9_5_IRQHandler+0x22>
 80097ca:	bf00      	nop
 80097cc:	40010c00 	.word	0x40010c00
 80097d0:	e000e100 	.word	0xe000e100
 80097d4:	2000141d 	.word	0x2000141d

080097d8 <system_check_safety_door_ajar>:
  #ifdef ENABLE_SAFETY_DOOR_INPUT_PIN
    return(system_control_get_state() & CONTROL_PIN_INDEX_SAFETY_DOOR);
  #else
    return(false); // Input pin not enabled, so just return that it's closed.
  #endif
}
 80097d8:	2000      	movs	r0, #0
 80097da:	4770      	bx	lr

080097dc <system_execute_startup>:


// Executes user startup script, if stored.
void system_execute_startup(char *line)
{
 80097dc:	b538      	push	{r3, r4, r5, lr}
 80097de:	4604      	mov	r4, r0
 80097e0:	2500      	movs	r5, #0
  uint8_t n;
  for (n=0; n < N_STARTUP_LINE; n++) {
    if (!(settings_read_startup_line(n, line))) {
 80097e2:	4621      	mov	r1, r4
 80097e4:	4628      	mov	r0, r5
 80097e6:	f7fe f979 	bl	8007adc <settings_read_startup_line>
 80097ea:	b150      	cbz	r0, 8009802 <system_execute_startup+0x26>
      line[0] = 0;
      report_execute_startup_message(line,STATUS_SETTING_READ_FAIL);
    } else {
      if (line[0] != 0) {
 80097ec:	7823      	ldrb	r3, [r4, #0]
 80097ee:	b973      	cbnz	r3, 800980e <system_execute_startup+0x32>
  for (n=0; n < N_STARTUP_LINE; n++) {
 80097f0:	b105      	cbz	r5, 80097f4 <system_execute_startup+0x18>
        uint8_t status_code = gc_execute_line(line);
        report_execute_startup_message(line,status_code);
      }
    }
  }
}
 80097f2:	bd38      	pop	{r3, r4, r5, pc}
 80097f4:	2501      	movs	r5, #1
    if (!(settings_read_startup_line(n, line))) {
 80097f6:	4621      	mov	r1, r4
 80097f8:	4628      	mov	r0, r5
 80097fa:	f7fe f96f 	bl	8007adc <settings_read_startup_line>
 80097fe:	2800      	cmp	r0, #0
 8009800:	d1f4      	bne.n	80097ec <system_execute_startup+0x10>
      line[0] = 0;
 8009802:	7020      	strb	r0, [r4, #0]
      report_execute_startup_message(line,STATUS_SETTING_READ_FAIL);
 8009804:	2107      	movs	r1, #7
 8009806:	4620      	mov	r0, r4
 8009808:	f7fd fcc6 	bl	8007198 <report_execute_startup_message>
 800980c:	e7f0      	b.n	80097f0 <system_execute_startup+0x14>
        uint8_t status_code = gc_execute_line(line);
 800980e:	4620      	mov	r0, r4
 8009810:	f7f8 fade 	bl	8001dd0 <gc_execute_line>
        report_execute_startup_message(line,status_code);
 8009814:	4601      	mov	r1, r0
 8009816:	4620      	mov	r0, r4
 8009818:	f7fd fcbe 	bl	8007198 <report_execute_startup_message>
 800981c:	e7e8      	b.n	80097f0 <system_execute_startup+0x14>
 800981e:	bf00      	nop

08009820 <system_execute_line>:
// the lines that are processed afterward, not necessarily real-time during a cycle,
// since there are motions already stored in the buffer. However, this 'lag' should not
// be an issue, since these commands are not typically used during a cycle.
uint8_t system_execute_line(char *line)
{
  uint8_t char_counter = 1;
 8009820:	2301      	movs	r3, #1
{
 8009822:	b570      	push	{r4, r5, r6, lr}
  uint8_t helper_var = 0; // Helper variable
  float parameter, value;
  switch( line[char_counter] ) {
 8009824:	7844      	ldrb	r4, [r0, #1]
{
 8009826:	b084      	sub	sp, #16
  switch( line[char_counter] ) {
 8009828:	2c43      	cmp	r4, #67	; 0x43
{
 800982a:	4605      	mov	r5, r0
  uint8_t char_counter = 1;
 800982c:	f88d 3007 	strb.w	r3, [sp, #7]
  switch( line[char_counter] ) {
 8009830:	d04c      	beq.n	80098cc <system_execute_line+0xac>
 8009832:	d964      	bls.n	80098fe <system_execute_line+0xde>
 8009834:	2c4a      	cmp	r4, #74	; 0x4a
 8009836:	d108      	bne.n	800984a <system_execute_line+0x2a>
    case 0 : report_grbl_help(); break;
    case 'J' : // Jogging
      // Execute only if in IDLE or JOG states.
      if (sys.state != STATE_IDLE && sys.state != STATE_JOG) { return(STATUS_IDLE_ERROR); }
 8009838:	4b9b      	ldr	r3, [pc, #620]	; (8009aa8 <system_execute_line+0x288>)
 800983a:	781b      	ldrb	r3, [r3, #0]
 800983c:	f013 0fdf 	tst.w	r3, #223	; 0xdf
 8009840:	d064      	beq.n	800990c <system_execute_line+0xec>
                report_startup_line(helper_var,line);
              }
            }
            break;
          } else { // Store startup line [IDLE Only] Prevents motion during ALARM.
            if (sys.state != STATE_IDLE) { return(STATUS_IDLE_ERROR); } // Store only when idle.
 8009842:	2408      	movs	r4, #8
            return(settings_store_global_setting((uint8_t)parameter, value));
          }
      }
  }
  return(STATUS_OK); // If '$' command makes it to here, then everything's ok.
}
 8009844:	4620      	mov	r0, r4
 8009846:	b004      	add	sp, #16
 8009848:	bd70      	pop	{r4, r5, r6, pc}
  switch( line[char_counter] ) {
 800984a:	2c58      	cmp	r4, #88	; 0x58
 800984c:	d03e      	beq.n	80098cc <system_execute_line+0xac>
 800984e:	2c47      	cmp	r4, #71	; 0x47
 8009850:	d03c      	beq.n	80098cc <system_execute_line+0xac>
      if ( !(sys.state == STATE_IDLE || sys.state == STATE_ALARM) ) { return(STATUS_IDLE_ERROR); }
 8009852:	4e95      	ldr	r6, [pc, #596]	; (8009aa8 <system_execute_line+0x288>)
 8009854:	7833      	ldrb	r3, [r6, #0]
 8009856:	2b01      	cmp	r3, #1
 8009858:	d8f3      	bhi.n	8009842 <system_execute_line+0x22>
      switch( line[1] ) {
 800985a:	3c23      	subs	r4, #35	; 0x23
 800985c:	2c30      	cmp	r4, #48	; 0x30
 800985e:	f200 8129 	bhi.w	8009ab4 <system_execute_line+0x294>
 8009862:	e8df f014 	tbh	[pc, r4, lsl #1]
 8009866:	00cf      	.short	0x00cf
 8009868:	01270127 	.word	0x01270127
 800986c:	01270127 	.word	0x01270127
 8009870:	01270127 	.word	0x01270127
 8009874:	01270127 	.word	0x01270127
 8009878:	01270127 	.word	0x01270127
 800987c:	01270127 	.word	0x01270127
 8009880:	01270127 	.word	0x01270127
 8009884:	01270127 	.word	0x01270127
 8009888:	01270127 	.word	0x01270127
 800988c:	01270127 	.word	0x01270127
 8009890:	01270127 	.word	0x01270127
 8009894:	01270127 	.word	0x01270127
 8009898:	01270127 	.word	0x01270127
 800989c:	01270127 	.word	0x01270127
 80098a0:	01270127 	.word	0x01270127
 80098a4:	01270127 	.word	0x01270127
 80098a8:	01270127 	.word	0x01270127
 80098ac:	01270127 	.word	0x01270127
 80098b0:	00b600d6 	.word	0x00b600d6
 80098b4:	01270127 	.word	0x01270127
 80098b8:	01270127 	.word	0x01270127
 80098bc:	01270096 	.word	0x01270096
 80098c0:	01270127 	.word	0x01270127
 80098c4:	00660077 	.word	0x00660077
  switch( line[char_counter] ) {
 80098c8:	2c24      	cmp	r4, #36	; 0x24
 80098ca:	d1c2      	bne.n	8009852 <system_execute_line+0x32>
      if ( line[2] != 0 ) { return(STATUS_INVALID_STATEMENT); }
 80098cc:	78ad      	ldrb	r5, [r5, #2]
 80098ce:	b995      	cbnz	r5, 80098f6 <system_execute_line+0xd6>
      switch( line[1] ) {
 80098d0:	2c43      	cmp	r4, #67	; 0x43
 80098d2:	f000 8141 	beq.w	8009b58 <system_execute_line+0x338>
 80098d6:	d920      	bls.n	800991a <system_execute_line+0xfa>
 80098d8:	2c47      	cmp	r4, #71	; 0x47
 80098da:	f000 8139 	beq.w	8009b50 <system_execute_line+0x330>
 80098de:	2c58      	cmp	r4, #88	; 0x58
 80098e0:	d11d      	bne.n	800991e <system_execute_line+0xfe>
          if (sys.state == STATE_ALARM) {
 80098e2:	4e71      	ldr	r6, [pc, #452]	; (8009aa8 <system_execute_line+0x288>)
 80098e4:	7833      	ldrb	r3, [r6, #0]
 80098e6:	2b01      	cmp	r3, #1
 80098e8:	d119      	bne.n	800991e <system_execute_line+0xfe>
            report_feedback_message(MESSAGE_ALARM_UNLOCK);
 80098ea:	2003      	movs	r0, #3
 80098ec:	f7fc ff5a 	bl	80067a4 <report_feedback_message>
  return(STATUS_OK); // If '$' command makes it to here, then everything's ok.
 80098f0:	462c      	mov	r4, r5
            sys.state = STATE_IDLE;
 80098f2:	7035      	strb	r5, [r6, #0]
 80098f4:	e7a6      	b.n	8009844 <system_execute_line+0x24>
                default: return(STATUS_INVALID_STATEMENT);
 80098f6:	2403      	movs	r4, #3
}
 80098f8:	4620      	mov	r0, r4
 80098fa:	b004      	add	sp, #16
 80098fc:	bd70      	pop	{r4, r5, r6, pc}
  switch( line[char_counter] ) {
 80098fe:	2c00      	cmp	r4, #0
 8009900:	d1e2      	bne.n	80098c8 <system_execute_line+0xa8>
    case 0 : report_grbl_help(); break;
 8009902:	f7fc ffb3 	bl	800686c <report_grbl_help>
}
 8009906:	4620      	mov	r0, r4
 8009908:	b004      	add	sp, #16
 800990a:	bd70      	pop	{r4, r5, r6, pc}
      if(line[2] != '=') { return(STATUS_INVALID_STATEMENT); }
 800990c:	7883      	ldrb	r3, [r0, #2]
 800990e:	2b3d      	cmp	r3, #61	; 0x3d
 8009910:	d1f1      	bne.n	80098f6 <system_execute_line+0xd6>
      return(gc_execute_line(line)); // NOTE: $J= is ignored inside g-code parser and used to detect jog motions.
 8009912:	f7f8 fa5d 	bl	8001dd0 <gc_execute_line>
 8009916:	4604      	mov	r4, r0
 8009918:	e794      	b.n	8009844 <system_execute_line+0x24>
      switch( line[1] ) {
 800991a:	2c24      	cmp	r4, #36	; 0x24
 800991c:	d001      	beq.n	8009922 <system_execute_line+0x102>
  return(STATUS_OK); // If '$' command makes it to here, then everything's ok.
 800991e:	2400      	movs	r4, #0
 8009920:	e790      	b.n	8009844 <system_execute_line+0x24>
          if ( sys.state & (STATE_CYCLE | STATE_HOLD) ) { return(STATUS_IDLE_ERROR); } // Block during cycle. Takes too long to print.
 8009922:	4b61      	ldr	r3, [pc, #388]	; (8009aa8 <system_execute_line+0x288>)
 8009924:	781c      	ldrb	r4, [r3, #0]
 8009926:	f014 0418 	ands.w	r4, r4, #24
 800992a:	d18a      	bne.n	8009842 <system_execute_line+0x22>
          else { report_grbl_settings(); }
 800992c:	f7fc ffa4 	bl	8006878 <report_grbl_settings>
          break;
 8009930:	e788      	b.n	8009844 <system_execute_line+0x24>
          if ((line[2] != 'L') || (line[3] != 'P') || (line[4] != 0)) { return(STATUS_INVALID_STATEMENT); }
 8009932:	78ab      	ldrb	r3, [r5, #2]
 8009934:	2b4c      	cmp	r3, #76	; 0x4c
 8009936:	d1de      	bne.n	80098f6 <system_execute_line+0xd6>
 8009938:	78eb      	ldrb	r3, [r5, #3]
 800993a:	2b50      	cmp	r3, #80	; 0x50
 800993c:	d1db      	bne.n	80098f6 <system_execute_line+0xd6>
 800993e:	792c      	ldrb	r4, [r5, #4]
 8009940:	2c00      	cmp	r4, #0
 8009942:	d1d8      	bne.n	80098f6 <system_execute_line+0xd6>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 8009944:	b672      	cpsid	i
  sys_rt_exec_state |= (mask);
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_state |= (mask);
 8009946:	4a59      	ldr	r2, [pc, #356]	; (8009aac <system_execute_line+0x28c>)
 8009948:	7813      	ldrb	r3, [r2, #0]
 800994a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800994e:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("cpsie i");
 8009950:	b662      	cpsie	i
 8009952:	e777      	b.n	8009844 <system_execute_line+0x24>
          if ((line[2] != 'S') || (line[3] != 'T') || (line[4] != '=') || (line[6] != 0)) { return(STATUS_INVALID_STATEMENT); }
 8009954:	78ab      	ldrb	r3, [r5, #2]
 8009956:	2b53      	cmp	r3, #83	; 0x53
 8009958:	d1cd      	bne.n	80098f6 <system_execute_line+0xd6>
 800995a:	78eb      	ldrb	r3, [r5, #3]
 800995c:	2b54      	cmp	r3, #84	; 0x54
 800995e:	d1ca      	bne.n	80098f6 <system_execute_line+0xd6>
 8009960:	792b      	ldrb	r3, [r5, #4]
 8009962:	2b3d      	cmp	r3, #61	; 0x3d
 8009964:	d1c7      	bne.n	80098f6 <system_execute_line+0xd6>
 8009966:	79ab      	ldrb	r3, [r5, #6]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d1c4      	bne.n	80098f6 <system_execute_line+0xd6>
          switch (line[5]) {
 800996c:	796b      	ldrb	r3, [r5, #5]
 800996e:	2b24      	cmp	r3, #36	; 0x24
 8009970:	f000 8141 	beq.w	8009bf6 <system_execute_line+0x3d6>
 8009974:	2b2a      	cmp	r3, #42	; 0x2a
 8009976:	f000 813a 	beq.w	8009bee <system_execute_line+0x3ce>
 800997a:	2b23      	cmp	r3, #35	; 0x23
 800997c:	d1bb      	bne.n	80098f6 <system_execute_line+0xd6>
              case '#': settings_restore(SETTINGS_RESTORE_PARAMETERS); break;
 800997e:	2002      	movs	r0, #2
 8009980:	f7fe f814 	bl	80079ac <settings_restore>
          report_feedback_message(MESSAGE_RESTORE_DEFAULTS);
 8009984:	2009      	movs	r0, #9
 8009986:	f7fc ff0d 	bl	80067a4 <report_feedback_message>
  return(STATUS_OK); // If '$' command makes it to here, then everything's ok.
 800998a:	2400      	movs	r4, #0
          mc_reset(); // Force reset to ensure settings are initialized correctly.
 800998c:	f7fa fb46 	bl	800401c <mc_reset>
          break;
 8009990:	e758      	b.n	8009844 <system_execute_line+0x24>
          if ( line[++char_counter] == 0 ) { // Print startup lines
 8009992:	2202      	movs	r2, #2
 8009994:	78ac      	ldrb	r4, [r5, #2]
 8009996:	f88d 2007 	strb.w	r2, [sp, #7]
 800999a:	2c00      	cmp	r4, #0
 800999c:	f040 80e9 	bne.w	8009b72 <system_execute_line+0x352>
              if (!(settings_read_startup_line(helper_var, line))) {
 80099a0:	4629      	mov	r1, r5
 80099a2:	4620      	mov	r0, r4
 80099a4:	f7fe f89a 	bl	8007adc <settings_read_startup_line>
 80099a8:	2800      	cmp	r0, #0
 80099aa:	f000 80fd 	beq.w	8009ba8 <system_execute_line+0x388>
                report_startup_line(helper_var,line);
 80099ae:	4620      	mov	r0, r4
 80099b0:	4629      	mov	r1, r5
 80099b2:	f7fd fbd9 	bl	8007168 <report_startup_line>
              if (!(settings_read_startup_line(helper_var, line))) {
 80099b6:	4629      	mov	r1, r5
 80099b8:	2001      	movs	r0, #1
 80099ba:	f7fe f88f 	bl	8007adc <settings_read_startup_line>
 80099be:	4604      	mov	r4, r0
 80099c0:	2800      	cmp	r0, #0
 80099c2:	f000 80ed 	beq.w	8009ba0 <system_execute_line+0x380>
                report_startup_line(helper_var,line);
 80099c6:	4629      	mov	r1, r5
 80099c8:	2001      	movs	r0, #1
 80099ca:	f7fd fbcd 	bl	8007168 <report_startup_line>
  return(STATUS_OK); // If '$' command makes it to here, then everything's ok.
 80099ce:	2400      	movs	r4, #0
 80099d0:	e738      	b.n	8009844 <system_execute_line+0x24>
          if ( line[++char_counter] == 0 ) {
 80099d2:	2302      	movs	r3, #2
 80099d4:	78ac      	ldrb	r4, [r5, #2]
 80099d6:	f88d 3007 	strb.w	r3, [sp, #7]
 80099da:	2c00      	cmp	r4, #0
 80099dc:	f000 80d9 	beq.w	8009b92 <system_execute_line+0x372>
              if(line[char_counter++] != '=') { return(STATUS_INVALID_STATEMENT); }
 80099e0:	2c3d      	cmp	r4, #61	; 0x3d
 80099e2:	f04f 0303 	mov.w	r3, #3
 80099e6:	d186      	bne.n	80098f6 <system_execute_line+0xd6>
                line[char_counter-helper_var] = line[char_counter];
 80099e8:	5cec      	ldrb	r4, [r5, r3]
 80099ea:	18ea      	adds	r2, r5, r3
              } while (line[char_counter++] != 0);
 80099ec:	3301      	adds	r3, #1
                line[char_counter-helper_var] = line[char_counter];
 80099ee:	f802 4c03 	strb.w	r4, [r2, #-3]
              } while (line[char_counter++] != 0);
 80099f2:	b2db      	uxtb	r3, r3
 80099f4:	2c00      	cmp	r4, #0
 80099f6:	d1f7      	bne.n	80099e8 <system_execute_line+0x1c8>
              settings_store_build_info(line);
 80099f8:	4628      	mov	r0, r5
 80099fa:	f88d 3007 	strb.w	r3, [sp, #7]
 80099fe:	f7fd ffbf 	bl	8007980 <settings_store_build_info>
 8009a02:	e71f      	b.n	8009844 <system_execute_line+0x24>
          if ( line[2] != 0 ) { return(STATUS_INVALID_STATEMENT); }
 8009a04:	78ac      	ldrb	r4, [r5, #2]
 8009a06:	2c00      	cmp	r4, #0
 8009a08:	f47f af75 	bne.w	80098f6 <system_execute_line+0xd6>
          else { report_ngc_parameters(); }
 8009a0c:	f7fd fa32 	bl	8006e74 <report_ngc_parameters>
          break;
 8009a10:	e718      	b.n	8009844 <system_execute_line+0x24>
          if (bit_isfalse(settings.flags,BITFLAG_HOMING_ENABLE)) {return(STATUS_SETTING_DISABLED); }
 8009a12:	4b27      	ldr	r3, [pc, #156]	; (8009ab0 <system_execute_line+0x290>)
 8009a14:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8009a18:	06db      	lsls	r3, r3, #27
 8009a1a:	f140 80b1 	bpl.w	8009b80 <system_execute_line+0x360>
          sys.state = STATE_HOMING; // Set system state variable
 8009a1e:	2304      	movs	r3, #4
          if (line[2] == 0) {
 8009a20:	78a8      	ldrb	r0, [r5, #2]
          sys.state = STATE_HOMING; // Set system state variable
 8009a22:	7033      	strb	r3, [r6, #0]
          if (line[2] == 0) {
 8009a24:	2800      	cmp	r0, #0
 8009a26:	f000 8090 	beq.w	8009b4a <system_execute_line+0x32a>
            } else if (line[3] == 0) {
 8009a2a:	78eb      	ldrb	r3, [r5, #3]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	f47f af62 	bne.w	80098f6 <system_execute_line+0xd6>
              switch (line[2]) {
 8009a32:	3841      	subs	r0, #65	; 0x41
 8009a34:	2819      	cmp	r0, #25
 8009a36:	f63f af5e 	bhi.w	80098f6 <system_execute_line+0xd6>
 8009a3a:	a301      	add	r3, pc, #4	; (adr r3, 8009a40 <system_execute_line+0x220>)
 8009a3c:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 8009a40:	08009b49 	.word	0x08009b49
 8009a44:	080098f7 	.word	0x080098f7
 8009a48:	080098f7 	.word	0x080098f7
 8009a4c:	080098f7 	.word	0x080098f7
 8009a50:	080098f7 	.word	0x080098f7
 8009a54:	080098f7 	.word	0x080098f7
 8009a58:	080098f7 	.word	0x080098f7
 8009a5c:	080098f7 	.word	0x080098f7
 8009a60:	080098f7 	.word	0x080098f7
 8009a64:	080098f7 	.word	0x080098f7
 8009a68:	080098f7 	.word	0x080098f7
 8009a6c:	080098f7 	.word	0x080098f7
 8009a70:	080098f7 	.word	0x080098f7
 8009a74:	080098f7 	.word	0x080098f7
 8009a78:	080098f7 	.word	0x080098f7
 8009a7c:	080098f7 	.word	0x080098f7
 8009a80:	080098f7 	.word	0x080098f7
 8009a84:	080098f7 	.word	0x080098f7
 8009a88:	080098f7 	.word	0x080098f7
 8009a8c:	080098f7 	.word	0x080098f7
 8009a90:	080098f7 	.word	0x080098f7
 8009a94:	080098f7 	.word	0x080098f7
 8009a98:	080098f7 	.word	0x080098f7
 8009a9c:	08009b41 	.word	0x08009b41
 8009aa0:	08009b39 	.word	0x08009b39
 8009aa4:	08009b15 	.word	0x08009b15
 8009aa8:	20001408 	.word	0x20001408
 8009aac:	2000141d 	.word	0x2000141d
 8009ab0:	20001744 	.word	0x20001744
  uint8_t helper_var = 0; // Helper variable
 8009ab4:	2400      	movs	r4, #0
          if(!read_float(line, &char_counter, &parameter)) { return(STATUS_BAD_NUMBER_FORMAT); }
 8009ab6:	f10d 0107 	add.w	r1, sp, #7
 8009aba:	aa02      	add	r2, sp, #8
 8009abc:	4628      	mov	r0, r5
 8009abe:	f7fa fadf 	bl	8004080 <read_float>
 8009ac2:	2800      	cmp	r0, #0
 8009ac4:	d05a      	beq.n	8009b7c <system_execute_line+0x35c>
          if(line[char_counter++] != '=') { return(STATUS_INVALID_STATEMENT); }
 8009ac6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8009aca:	1c53      	adds	r3, r2, #1
 8009acc:	5caa      	ldrb	r2, [r5, r2]
 8009ace:	b2db      	uxtb	r3, r3
 8009ad0:	2a3d      	cmp	r2, #61	; 0x3d
 8009ad2:	f88d 3007 	strb.w	r3, [sp, #7]
 8009ad6:	f47f af0e 	bne.w	80098f6 <system_execute_line+0xd6>
          if (helper_var) { // Store startup line
 8009ada:	2c00      	cmp	r4, #0
 8009adc:	d068      	beq.n	8009bb0 <system_execute_line+0x390>
 8009ade:	4618      	mov	r0, r3
              line[char_counter-helper_var] = line[char_counter];
 8009ae0:	5ce9      	ldrb	r1, [r5, r3]
 8009ae2:	1a1a      	subs	r2, r3, r0
 8009ae4:	54a9      	strb	r1, [r5, r2]
 8009ae6:	18ea      	adds	r2, r5, r3
            } while (line[char_counter++] != 0);
 8009ae8:	7812      	ldrb	r2, [r2, #0]
 8009aea:	3301      	adds	r3, #1
 8009aec:	b2db      	uxtb	r3, r3
 8009aee:	2a00      	cmp	r2, #0
 8009af0:	d1f6      	bne.n	8009ae0 <system_execute_line+0x2c0>
            helper_var = gc_execute_line(line); // Set helper_var to returned status code.
 8009af2:	4628      	mov	r0, r5
 8009af4:	f88d 3007 	strb.w	r3, [sp, #7]
 8009af8:	f7f8 f96a 	bl	8001dd0 <gc_execute_line>
            if (helper_var) { return(helper_var); }
 8009afc:	4604      	mov	r4, r0
 8009afe:	2800      	cmp	r0, #0
 8009b00:	f47f aea0 	bne.w	8009844 <system_execute_line+0x24>
              helper_var = truncf(parameter); // Set helper_var to int value of parameter
 8009b04:	9802      	ldr	r0, [sp, #8]
 8009b06:	f7f7 fad9 	bl	80010bc <__aeabi_f2uiz>
              settings_store_startup_line(helper_var,line);
 8009b0a:	4629      	mov	r1, r5
 8009b0c:	b2c0      	uxtb	r0, r0
 8009b0e:	f7fd ff25 	bl	800795c <settings_store_startup_line>
 8009b12:	e697      	b.n	8009844 <system_execute_line+0x24>
                case 'Z': mc_homing_cycle(HOMING_CYCLE_Z); break;
 8009b14:	2004      	movs	r0, #4
 8009b16:	f7fa f9bf 	bl	8003e98 <mc_homing_cycle>
          if (!sys.abort) {  // Execute startup scripts after successful homing.
 8009b1a:	7874      	ldrb	r4, [r6, #1]
 8009b1c:	2c00      	cmp	r4, #0
 8009b1e:	f47f aefe 	bne.w	800991e <system_execute_line+0xfe>
            sys.state = STATE_IDLE; // Set to IDLE when complete.
 8009b22:	7034      	strb	r4, [r6, #0]
            st_go_idle(); // Set steppers to the settings idle state before returning.
 8009b24:	f7fe fcae 	bl	8008484 <st_go_idle>
            if (line[2] == 0) { system_execute_startup(line); }
 8009b28:	78ab      	ldrb	r3, [r5, #2]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	f47f aef7 	bne.w	800991e <system_execute_line+0xfe>
 8009b30:	4628      	mov	r0, r5
 8009b32:	f7ff fe53 	bl	80097dc <system_execute_startup>
 8009b36:	e685      	b.n	8009844 <system_execute_line+0x24>
                case 'Y': mc_homing_cycle(HOMING_CYCLE_Y); break;
 8009b38:	2002      	movs	r0, #2
 8009b3a:	f7fa f9ad 	bl	8003e98 <mc_homing_cycle>
 8009b3e:	e7ec      	b.n	8009b1a <system_execute_line+0x2fa>
                case 'X': mc_homing_cycle(HOMING_CYCLE_X); break;
 8009b40:	2001      	movs	r0, #1
 8009b42:	f7fa f9a9 	bl	8003e98 <mc_homing_cycle>
 8009b46:	e7e8      	b.n	8009b1a <system_execute_line+0x2fa>
				case 'A': mc_homing_cycle(HOMING_CYCLE_A); break;
 8009b48:	2008      	movs	r0, #8
 8009b4a:	f7fa f9a5 	bl	8003e98 <mc_homing_cycle>
 8009b4e:	e7e4      	b.n	8009b1a <system_execute_line+0x2fa>
          report_gcode_modes();
 8009b50:	f7fd fa4e 	bl	8006ff0 <report_gcode_modes>
  return(STATUS_OK); // If '$' command makes it to here, then everything's ok.
 8009b54:	462c      	mov	r4, r5
          break;
 8009b56:	e675      	b.n	8009844 <system_execute_line+0x24>
          if ( sys.state == STATE_CHECK_MODE ) {
 8009b58:	4b29      	ldr	r3, [pc, #164]	; (8009c00 <system_execute_line+0x3e0>)
 8009b5a:	781c      	ldrb	r4, [r3, #0]
 8009b5c:	2c02      	cmp	r4, #2
 8009b5e:	d011      	beq.n	8009b84 <system_execute_line+0x364>
            if (sys.state) { return(STATUS_IDLE_ERROR); } // Requires no alarm mode.
 8009b60:	2c00      	cmp	r4, #0
 8009b62:	f47f ae6e 	bne.w	8009842 <system_execute_line+0x22>
            sys.state = STATE_CHECK_MODE;
 8009b66:	2202      	movs	r2, #2
            report_feedback_message(MESSAGE_ENABLED);
 8009b68:	2004      	movs	r0, #4
            sys.state = STATE_CHECK_MODE;
 8009b6a:	701a      	strb	r2, [r3, #0]
            report_feedback_message(MESSAGE_ENABLED);
 8009b6c:	f7fc fe1a 	bl	80067a4 <report_feedback_message>
 8009b70:	e668      	b.n	8009844 <system_execute_line+0x24>
            if (sys.state != STATE_IDLE) { return(STATUS_IDLE_ERROR); } // Store only when idle.
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	f47f ae65 	bne.w	8009842 <system_execute_line+0x22>
            helper_var = true;  // Set helper_var to flag storing method.
 8009b78:	2401      	movs	r4, #1
 8009b7a:	e79c      	b.n	8009ab6 <system_execute_line+0x296>
          if(!read_float(line, &char_counter, &parameter)) { return(STATUS_BAD_NUMBER_FORMAT); }
 8009b7c:	2402      	movs	r4, #2
 8009b7e:	e661      	b.n	8009844 <system_execute_line+0x24>
          if (bit_isfalse(settings.flags,BITFLAG_HOMING_ENABLE)) {return(STATUS_SETTING_DISABLED); }
 8009b80:	2405      	movs	r4, #5
 8009b82:	e65f      	b.n	8009844 <system_execute_line+0x24>
            mc_reset();
 8009b84:	f7fa fa4a 	bl	800401c <mc_reset>
            report_feedback_message(MESSAGE_DISABLED);
 8009b88:	2005      	movs	r0, #5
  return(STATUS_OK); // If '$' command makes it to here, then everything's ok.
 8009b8a:	462c      	mov	r4, r5
            report_feedback_message(MESSAGE_DISABLED);
 8009b8c:	f7fc fe0a 	bl	80067a4 <report_feedback_message>
 8009b90:	e658      	b.n	8009844 <system_execute_line+0x24>
            settings_read_build_info(line);
 8009b92:	4628      	mov	r0, r5
 8009b94:	f7fd ffbe 	bl	8007b14 <settings_read_build_info>
            report_build_info(line);
 8009b98:	4628      	mov	r0, r5
 8009b9a:	f7fd fb21 	bl	80071e0 <report_build_info>
 8009b9e:	e651      	b.n	8009844 <system_execute_line+0x24>
                report_status_message(STATUS_SETTING_READ_FAIL);
 8009ba0:	2007      	movs	r0, #7
 8009ba2:	f7fc fdd1 	bl	8006748 <report_status_message>
 8009ba6:	e64d      	b.n	8009844 <system_execute_line+0x24>
 8009ba8:	2007      	movs	r0, #7
 8009baa:	f7fc fdcd 	bl	8006748 <report_status_message>
 8009bae:	e702      	b.n	80099b6 <system_execute_line+0x196>
            if(!read_float(line, &char_counter, &value)) { return(STATUS_BAD_NUMBER_FORMAT); }
 8009bb0:	f10d 0107 	add.w	r1, sp, #7
 8009bb4:	aa03      	add	r2, sp, #12
 8009bb6:	4628      	mov	r0, r5
 8009bb8:	f7fa fa62 	bl	8004080 <read_float>
 8009bbc:	2800      	cmp	r0, #0
 8009bbe:	d0dd      	beq.n	8009b7c <system_execute_line+0x35c>
            if((line[char_counter] != 0) || (parameter > 255)) { return(STATUS_INVALID_STATEMENT); }
 8009bc0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009bc4:	5ceb      	ldrb	r3, [r5, r3]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	f47f ae95 	bne.w	80098f6 <system_execute_line+0xd6>
 8009bcc:	9c02      	ldr	r4, [sp, #8]
 8009bce:	490d      	ldr	r1, [pc, #52]	; (8009c04 <system_execute_line+0x3e4>)
 8009bd0:	4620      	mov	r0, r4
 8009bd2:	f7f7 fa2d 	bl	8001030 <__aeabi_fcmpgt>
 8009bd6:	2800      	cmp	r0, #0
 8009bd8:	f47f ae8d 	bne.w	80098f6 <system_execute_line+0xd6>
            return(settings_store_global_setting((uint8_t)parameter, value));
 8009bdc:	4620      	mov	r0, r4
 8009bde:	f7f7 fa6d 	bl	80010bc <__aeabi_f2uiz>
 8009be2:	9903      	ldr	r1, [sp, #12]
 8009be4:	b2c0      	uxtb	r0, r0
 8009be6:	f7fd ffc7 	bl	8007b78 <settings_store_global_setting>
 8009bea:	4604      	mov	r4, r0
 8009bec:	e62a      	b.n	8009844 <system_execute_line+0x24>
              case '*': settings_restore(SETTINGS_RESTORE_ALL); break;
 8009bee:	20ff      	movs	r0, #255	; 0xff
 8009bf0:	f7fd fedc 	bl	80079ac <settings_restore>
 8009bf4:	e6c6      	b.n	8009984 <system_execute_line+0x164>
              case '$': settings_restore(SETTINGS_RESTORE_DEFAULTS); break;
 8009bf6:	2001      	movs	r0, #1
 8009bf8:	f7fd fed8 	bl	80079ac <settings_restore>
 8009bfc:	e6c2      	b.n	8009984 <system_execute_line+0x164>
 8009bfe:	bf00      	nop
 8009c00:	20001408 	.word	0x20001408
 8009c04:	437f0000 	.word	0x437f0000

08009c08 <system_flag_wco_change>:
{
 8009c08:	b508      	push	{r3, lr}
    protocol_buffer_synchronize();
 8009c0a:	f7fc fabd 	bl	8006188 <protocol_buffer_synchronize>
  sys.report_wco_counter = 0;
 8009c0e:	2200      	movs	r2, #0
 8009c10:	4b01      	ldr	r3, [pc, #4]	; (8009c18 <system_flag_wco_change+0x10>)
 8009c12:	735a      	strb	r2, [r3, #13]
}
 8009c14:	bd08      	pop	{r3, pc}
 8009c16:	bf00      	nop
 8009c18:	20001408 	.word	0x20001408

08009c1c <system_convert_array_steps_to_mpos>:
{
 8009c1c:	b570      	push	{r4, r5, r6, lr}
    pos = steps[idx]/settings.steps_per_mm[idx];
 8009c1e:	4d10      	ldr	r5, [pc, #64]	; (8009c60 <system_convert_array_steps_to_mpos+0x44>)
{
 8009c20:	4604      	mov	r4, r0
    pos = steps[idx]/settings.steps_per_mm[idx];
 8009c22:	6808      	ldr	r0, [r1, #0]
{
 8009c24:	460e      	mov	r6, r1
    pos = steps[idx]/settings.steps_per_mm[idx];
 8009c26:	f7f6 fff3 	bl	8000c10 <__aeabi_i2f>
 8009c2a:	6829      	ldr	r1, [r5, #0]
 8009c2c:	f7f7 f8f8 	bl	8000e20 <__aeabi_fdiv>
    position[idx] = system_convert_axis_steps_to_mpos(steps, idx);
 8009c30:	6020      	str	r0, [r4, #0]
    pos = steps[idx]/settings.steps_per_mm[idx];
 8009c32:	6870      	ldr	r0, [r6, #4]
 8009c34:	f7f6 ffec 	bl	8000c10 <__aeabi_i2f>
 8009c38:	6869      	ldr	r1, [r5, #4]
 8009c3a:	f7f7 f8f1 	bl	8000e20 <__aeabi_fdiv>
    position[idx] = system_convert_axis_steps_to_mpos(steps, idx);
 8009c3e:	6060      	str	r0, [r4, #4]
    pos = steps[idx]/settings.steps_per_mm[idx];
 8009c40:	68b0      	ldr	r0, [r6, #8]
 8009c42:	f7f6 ffe5 	bl	8000c10 <__aeabi_i2f>
 8009c46:	68a9      	ldr	r1, [r5, #8]
 8009c48:	f7f7 f8ea 	bl	8000e20 <__aeabi_fdiv>
    position[idx] = system_convert_axis_steps_to_mpos(steps, idx);
 8009c4c:	60a0      	str	r0, [r4, #8]
    pos = steps[idx]/settings.steps_per_mm[idx];
 8009c4e:	68f0      	ldr	r0, [r6, #12]
 8009c50:	f7f6 ffde 	bl	8000c10 <__aeabi_i2f>
 8009c54:	68e9      	ldr	r1, [r5, #12]
 8009c56:	f7f7 f8e3 	bl	8000e20 <__aeabi_fdiv>
    position[idx] = system_convert_axis_steps_to_mpos(steps, idx);
 8009c5a:	60e0      	str	r0, [r4, #12]
}
 8009c5c:	bd70      	pop	{r4, r5, r6, pc}
 8009c5e:	bf00      	nop
 8009c60:	20001744 	.word	0x20001744

08009c64 <system_check_travel_limits>:
{
 8009c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8009c66:	4c3d      	ldr	r4, [pc, #244]	; (8009d5c <system_check_travel_limits+0xf8>)
 8009c68:	6807      	ldr	r7, [r0, #0]
 8009c6a:	f8b4 505a 	ldrh.w	r5, [r4, #90]	; 0x5a
{
 8009c6e:	4606      	mov	r6, r0
      if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8009c70:	07ea      	lsls	r2, r5, #31
        if (target[idx] < 0 || target[idx] > -settings.max_travel[idx]) { return(true); }
 8009c72:	f04f 0100 	mov.w	r1, #0
 8009c76:	4638      	mov	r0, r7
      if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8009c78:	d409      	bmi.n	8009c8e <system_check_travel_limits+0x2a>
        if (target[idx] > 0 || target[idx] < settings.max_travel[idx]) { return(true); }
 8009c7a:	f7f7 f9d9 	bl	8001030 <__aeabi_fcmpgt>
 8009c7e:	b920      	cbnz	r0, 8009c8a <system_check_travel_limits+0x26>
 8009c80:	4639      	mov	r1, r7
 8009c82:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8009c84:	f7f7 f9d4 	bl	8001030 <__aeabi_fcmpgt>
 8009c88:	b168      	cbz	r0, 8009ca6 <system_check_travel_limits+0x42>
        if (target[idx] < 0 || target[idx] > -settings.max_travel[idx]) { return(true); }
 8009c8a:	2001      	movs	r0, #1
}
 8009c8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (target[idx] < 0 || target[idx] > -settings.max_travel[idx]) { return(true); }
 8009c8e:	f7f7 f9b1 	bl	8000ff4 <__aeabi_fcmplt>
 8009c92:	2800      	cmp	r0, #0
 8009c94:	d1f9      	bne.n	8009c8a <system_check_travel_limits+0x26>
 8009c96:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009c98:	4638      	mov	r0, r7
 8009c9a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8009c9e:	f7f7 f9c7 	bl	8001030 <__aeabi_fcmpgt>
 8009ca2:	2800      	cmp	r0, #0
 8009ca4:	d1f1      	bne.n	8009c8a <system_check_travel_limits+0x26>
 8009ca6:	6877      	ldr	r7, [r6, #4]
      if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8009ca8:	07ab      	lsls	r3, r5, #30
        if (target[idx] < 0 || target[idx] > -settings.max_travel[idx]) { return(true); }
 8009caa:	f04f 0100 	mov.w	r1, #0
 8009cae:	4638      	mov	r0, r7
      if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8009cb0:	d42d      	bmi.n	8009d0e <system_check_travel_limits+0xaa>
        if (target[idx] > 0 || target[idx] < settings.max_travel[idx]) { return(true); }
 8009cb2:	f7f7 f9bd 	bl	8001030 <__aeabi_fcmpgt>
 8009cb6:	2800      	cmp	r0, #0
 8009cb8:	d1e7      	bne.n	8009c8a <system_check_travel_limits+0x26>
 8009cba:	4638      	mov	r0, r7
 8009cbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009cbe:	f7f7 f999 	bl	8000ff4 <__aeabi_fcmplt>
 8009cc2:	2800      	cmp	r0, #0
 8009cc4:	d1e1      	bne.n	8009c8a <system_check_travel_limits+0x26>
 8009cc6:	68b7      	ldr	r7, [r6, #8]
      if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8009cc8:	076a      	lsls	r2, r5, #29
        if (target[idx] < 0 || target[idx] > -settings.max_travel[idx]) { return(true); }
 8009cca:	f04f 0100 	mov.w	r1, #0
 8009cce:	4638      	mov	r0, r7
      if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8009cd0:	d42a      	bmi.n	8009d28 <system_check_travel_limits+0xc4>
        if (target[idx] > 0 || target[idx] < settings.max_travel[idx]) { return(true); }
 8009cd2:	f7f7 f9ad 	bl	8001030 <__aeabi_fcmpgt>
 8009cd6:	2800      	cmp	r0, #0
 8009cd8:	d1d7      	bne.n	8009c8a <system_check_travel_limits+0x26>
 8009cda:	4638      	mov	r0, r7
 8009cdc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009cde:	f7f7 f989 	bl	8000ff4 <__aeabi_fcmplt>
 8009ce2:	2800      	cmp	r0, #0
 8009ce4:	d1d1      	bne.n	8009c8a <system_check_travel_limits+0x26>
 8009ce6:	68f6      	ldr	r6, [r6, #12]
      if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8009ce8:	072b      	lsls	r3, r5, #28
        if (target[idx] < 0 || target[idx] > -settings.max_travel[idx]) { return(true); }
 8009cea:	f04f 0100 	mov.w	r1, #0
 8009cee:	4630      	mov	r0, r6
      if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8009cf0:	d527      	bpl.n	8009d42 <system_check_travel_limits+0xde>
        if (target[idx] < 0 || target[idx] > -settings.max_travel[idx]) { return(true); }
 8009cf2:	f7f7 f97f 	bl	8000ff4 <__aeabi_fcmplt>
 8009cf6:	2800      	cmp	r0, #0
 8009cf8:	d1c7      	bne.n	8009c8a <system_check_travel_limits+0x26>
 8009cfa:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8009cfc:	4631      	mov	r1, r6
 8009cfe:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8009d02:	f7f7 f977 	bl	8000ff4 <__aeabi_fcmplt>
  return(false);
 8009d06:	3000      	adds	r0, #0
 8009d08:	bf18      	it	ne
 8009d0a:	2001      	movne	r0, #1
}
 8009d0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (target[idx] < 0 || target[idx] > -settings.max_travel[idx]) { return(true); }
 8009d0e:	f7f7 f971 	bl	8000ff4 <__aeabi_fcmplt>
 8009d12:	2800      	cmp	r0, #0
 8009d14:	d1b9      	bne.n	8009c8a <system_check_travel_limits+0x26>
 8009d16:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d18:	4638      	mov	r0, r7
 8009d1a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8009d1e:	f7f7 f987 	bl	8001030 <__aeabi_fcmpgt>
 8009d22:	2800      	cmp	r0, #0
 8009d24:	d0cf      	beq.n	8009cc6 <system_check_travel_limits+0x62>
 8009d26:	e7b0      	b.n	8009c8a <system_check_travel_limits+0x26>
 8009d28:	f7f7 f964 	bl	8000ff4 <__aeabi_fcmplt>
 8009d2c:	2800      	cmp	r0, #0
 8009d2e:	d1ac      	bne.n	8009c8a <system_check_travel_limits+0x26>
 8009d30:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009d32:	4638      	mov	r0, r7
 8009d34:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8009d38:	f7f7 f97a 	bl	8001030 <__aeabi_fcmpgt>
 8009d3c:	2800      	cmp	r0, #0
 8009d3e:	d0d2      	beq.n	8009ce6 <system_check_travel_limits+0x82>
 8009d40:	e7a3      	b.n	8009c8a <system_check_travel_limits+0x26>
        if (target[idx] > 0 || target[idx] < settings.max_travel[idx]) { return(true); }
 8009d42:	f7f7 f975 	bl	8001030 <__aeabi_fcmpgt>
 8009d46:	2800      	cmp	r0, #0
 8009d48:	d19f      	bne.n	8009c8a <system_check_travel_limits+0x26>
 8009d4a:	4631      	mov	r1, r6
 8009d4c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8009d4e:	f7f7 f96f 	bl	8001030 <__aeabi_fcmpgt>
  return(false);
 8009d52:	3000      	adds	r0, #0
 8009d54:	bf18      	it	ne
 8009d56:	2001      	movne	r0, #1
}
 8009d58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d5a:	bf00      	nop
 8009d5c:	20001744 	.word	0x20001744

08009d60 <system_set_exec_state_flag>:
  __ASM volatile ("cpsid i");
 8009d60:	b672      	cpsid	i
  sys_rt_exec_state |= (mask);
 8009d62:	4a03      	ldr	r2, [pc, #12]	; (8009d70 <system_set_exec_state_flag+0x10>)
 8009d64:	7813      	ldrb	r3, [r2, #0]
 8009d66:	4318      	orrs	r0, r3
 8009d68:	7010      	strb	r0, [r2, #0]
  __ASM volatile ("cpsie i");
 8009d6a:	b662      	cpsie	i
  __enable_irq();
#endif
}
 8009d6c:	4770      	bx	lr
 8009d6e:	bf00      	nop
 8009d70:	2000141d 	.word	0x2000141d

08009d74 <system_clear_exec_state_flag>:
  __ASM volatile ("cpsid i");
 8009d74:	b672      	cpsid	i
  sys_rt_exec_state &= ~(mask);
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_state &= ~(mask);
 8009d76:	4a03      	ldr	r2, [pc, #12]	; (8009d84 <system_clear_exec_state_flag+0x10>)
 8009d78:	7813      	ldrb	r3, [r2, #0]
 8009d7a:	ea23 0000 	bic.w	r0, r3, r0
 8009d7e:	7010      	strb	r0, [r2, #0]
  __ASM volatile ("cpsie i");
 8009d80:	b662      	cpsie	i
  __enable_irq();
#endif
}
 8009d82:	4770      	bx	lr
 8009d84:	2000141d 	.word	0x2000141d

08009d88 <system_set_exec_alarm>:
  __ASM volatile ("cpsid i");
 8009d88:	b672      	cpsid	i
  sys_rt_exec_alarm = (code);
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_alarm = (code);
 8009d8a:	4b02      	ldr	r3, [pc, #8]	; (8009d94 <system_set_exec_alarm+0xc>)
 8009d8c:	7018      	strb	r0, [r3, #0]
  __ASM volatile ("cpsie i");
 8009d8e:	b662      	cpsie	i
  __enable_irq();
#endif
}
 8009d90:	4770      	bx	lr
 8009d92:	bf00      	nop
 8009d94:	20001440 	.word	0x20001440

08009d98 <system_clear_exec_alarm>:
  __ASM volatile ("cpsid i");
 8009d98:	b672      	cpsid	i
  sys_rt_exec_alarm = 0;
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_alarm = 0;
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	4b01      	ldr	r3, [pc, #4]	; (8009da4 <system_clear_exec_alarm+0xc>)
 8009d9e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i");
 8009da0:	b662      	cpsie	i
  __enable_irq();
#endif
}
 8009da2:	4770      	bx	lr
 8009da4:	20001440 	.word	0x20001440

08009da8 <system_set_exec_motion_override_flag>:
  __ASM volatile ("cpsid i");
 8009da8:	b672      	cpsid	i
  sys_rt_exec_motion_override |= (mask);
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_motion_override |= (mask);
 8009daa:	4a03      	ldr	r2, [pc, #12]	; (8009db8 <system_set_exec_motion_override_flag+0x10>)
 8009dac:	7813      	ldrb	r3, [r2, #0]
 8009dae:	4318      	orrs	r0, r3
 8009db0:	7010      	strb	r0, [r2, #0]
  __ASM volatile ("cpsie i");
 8009db2:	b662      	cpsie	i
  __enable_irq();
#endif
}
 8009db4:	4770      	bx	lr
 8009db6:	bf00      	nop
 8009db8:	20001404 	.word	0x20001404

08009dbc <system_set_exec_accessory_override_flag>:
  __ASM volatile ("cpsid i");
 8009dbc:	b672      	cpsid	i
  sys_rt_exec_accessory_override |= (mask);
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_accessory_override |= (mask);
 8009dbe:	4a03      	ldr	r2, [pc, #12]	; (8009dcc <system_set_exec_accessory_override_flag+0x10>)
 8009dc0:	7813      	ldrb	r3, [r2, #0]
 8009dc2:	4318      	orrs	r0, r3
 8009dc4:	7010      	strb	r0, [r2, #0]
  __ASM volatile ("cpsie i");
 8009dc6:	b662      	cpsie	i
  __enable_irq();
#endif
}
 8009dc8:	4770      	bx	lr
 8009dca:	bf00      	nop
 8009dcc:	2000141c 	.word	0x2000141c

08009dd0 <system_clear_exec_motion_overrides>:
  __ASM volatile ("cpsid i");
 8009dd0:	b672      	cpsid	i
  sys_rt_exec_motion_override = 0;
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_motion_override = 0;
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	4b01      	ldr	r3, [pc, #4]	; (8009ddc <system_clear_exec_motion_overrides+0xc>)
 8009dd6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i");
 8009dd8:	b662      	cpsie	i
  __enable_irq();
#endif
}
 8009dda:	4770      	bx	lr
 8009ddc:	20001404 	.word	0x20001404

08009de0 <system_clear_exec_accessory_overrides>:
  __ASM volatile ("cpsid i");
 8009de0:	b672      	cpsid	i
  sys_rt_exec_accessory_override = 0;
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_accessory_override = 0;
 8009de2:	2200      	movs	r2, #0
 8009de4:	4b01      	ldr	r3, [pc, #4]	; (8009dec <system_clear_exec_accessory_overrides+0xc>)
 8009de6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i");
 8009de8:	b662      	cpsie	i
  __enable_irq();
#endif
}
 8009dea:	4770      	bx	lr
 8009dec:	2000141c 	.word	0x2000141c

08009df0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8009df0:	b430      	push	{r4, r5}
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8009df2:	2400      	movs	r4, #0
  RCC->CIR = 0x009F0000;
 8009df4:	f44f 051f 	mov.w	r5, #10420224	; 0x9f0000
  RCC->CR |= (uint32_t)0x00000001;
 8009df8:	4b3a      	ldr	r3, [pc, #232]	; (8009ee4 <SystemInit+0xf4>)
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8009dfa:	493b      	ldr	r1, [pc, #236]	; (8009ee8 <SystemInit+0xf8>)
  RCC->CR |= (uint32_t)0x00000001;
 8009dfc:	6818      	ldr	r0, [r3, #0]
{
 8009dfe:	b082      	sub	sp, #8
  RCC->CR |= (uint32_t)0x00000001;
 8009e00:	f040 0001 	orr.w	r0, r0, #1
 8009e04:	6018      	str	r0, [r3, #0]
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8009e06:	6858      	ldr	r0, [r3, #4]
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8009e08:	461a      	mov	r2, r3
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8009e0a:	4001      	ands	r1, r0
 8009e0c:	6059      	str	r1, [r3, #4]
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8009e0e:	6819      	ldr	r1, [r3, #0]
 8009e10:	f021 7184 	bic.w	r1, r1, #17301504	; 0x1080000
 8009e14:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8009e18:	6019      	str	r1, [r3, #0]
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8009e1a:	6819      	ldr	r1, [r3, #0]
 8009e1c:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8009e20:	6019      	str	r1, [r3, #0]
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8009e22:	6859      	ldr	r1, [r3, #4]
 8009e24:	f421 01fe 	bic.w	r1, r1, #8323072	; 0x7f0000
 8009e28:	6059      	str	r1, [r3, #4]
  RCC->CIR = 0x009F0000;
 8009e2a:	609d      	str	r5, [r3, #8]
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8009e2c:	9400      	str	r4, [sp, #0]
 8009e2e:	9401      	str	r4, [sp, #4]
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8009e30:	6819      	ldr	r1, [r3, #0]
 8009e32:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8009e36:	6019      	str	r1, [r3, #0]
 8009e38:	e003      	b.n	8009e42 <SystemInit+0x52>
    StartUpCounter++;  
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8009e3a:	9b00      	ldr	r3, [sp, #0]
 8009e3c:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8009e40:	d009      	beq.n	8009e56 <SystemInit+0x66>
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8009e42:	6813      	ldr	r3, [r2, #0]
 8009e44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e48:	9301      	str	r3, [sp, #4]
    StartUpCounter++;  
 8009e4a:	9b00      	ldr	r3, [sp, #0]
 8009e4c:	3301      	adds	r3, #1
 8009e4e:	9300      	str	r3, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8009e50:	9b01      	ldr	r3, [sp, #4]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d0f1      	beq.n	8009e3a <SystemInit+0x4a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8009e56:	4b23      	ldr	r3, [pc, #140]	; (8009ee4 <SystemInit+0xf4>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
 8009e5e:	bf18      	it	ne
 8009e60:	2301      	movne	r3, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8009e62:	9301      	str	r3, [sp, #4]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8009e64:	9b01      	ldr	r3, [sp, #4]
 8009e66:	2b01      	cmp	r3, #1
 8009e68:	d006      	beq.n	8009e78 <SystemInit+0x88>
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8009e6a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009e6e:	4b1f      	ldr	r3, [pc, #124]	; (8009eec <SystemInit+0xfc>)
 8009e70:	609a      	str	r2, [r3, #8]
}
 8009e72:	b002      	add	sp, #8
 8009e74:	bc30      	pop	{r4, r5}
 8009e76:	4770      	bx	lr
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8009e78:	491d      	ldr	r1, [pc, #116]	; (8009ef0 <SystemInit+0x100>)
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8009e7a:	4b1a      	ldr	r3, [pc, #104]	; (8009ee4 <SystemInit+0xf4>)
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8009e7c:	6808      	ldr	r0, [r1, #0]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8009e7e:	461a      	mov	r2, r3
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8009e80:	f040 0010 	orr.w	r0, r0, #16
 8009e84:	6008      	str	r0, [r1, #0]
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8009e86:	6808      	ldr	r0, [r1, #0]
 8009e88:	f020 0003 	bic.w	r0, r0, #3
 8009e8c:	6008      	str	r0, [r1, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8009e8e:	6808      	ldr	r0, [r1, #0]
 8009e90:	f040 0002 	orr.w	r0, r0, #2
 8009e94:	6008      	str	r0, [r1, #0]
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8009e96:	6859      	ldr	r1, [r3, #4]
 8009e98:	6059      	str	r1, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8009e9a:	6859      	ldr	r1, [r3, #4]
 8009e9c:	6059      	str	r1, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8009e9e:	6859      	ldr	r1, [r3, #4]
 8009ea0:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8009ea4:	6059      	str	r1, [r3, #4]
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8009ea6:	6859      	ldr	r1, [r3, #4]
 8009ea8:	f421 117c 	bic.w	r1, r1, #4128768	; 0x3f0000
 8009eac:	6059      	str	r1, [r3, #4]
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL6); // SCE2
 8009eae:	6859      	ldr	r1, [r3, #4]
 8009eb0:	f441 1188 	orr.w	r1, r1, #1114112	; 0x110000
 8009eb4:	6059      	str	r1, [r3, #4]
    RCC->CR |= RCC_CR_PLLON;
 8009eb6:	6819      	ldr	r1, [r3, #0]
 8009eb8:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8009ebc:	6019      	str	r1, [r3, #0]
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8009ebe:	6813      	ldr	r3, [r2, #0]
 8009ec0:	019b      	lsls	r3, r3, #6
 8009ec2:	d5fc      	bpl.n	8009ebe <SystemInit+0xce>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8009ec4:	6853      	ldr	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8009ec6:	4907      	ldr	r1, [pc, #28]	; (8009ee4 <SystemInit+0xf4>)
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8009ec8:	f023 0303 	bic.w	r3, r3, #3
 8009ecc:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8009ece:	6853      	ldr	r3, [r2, #4]
 8009ed0:	f043 0302 	orr.w	r3, r3, #2
 8009ed4:	6053      	str	r3, [r2, #4]
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8009ed6:	684b      	ldr	r3, [r1, #4]
 8009ed8:	f003 030c 	and.w	r3, r3, #12
 8009edc:	2b08      	cmp	r3, #8
 8009ede:	d1fa      	bne.n	8009ed6 <SystemInit+0xe6>
 8009ee0:	e7c3      	b.n	8009e6a <SystemInit+0x7a>
 8009ee2:	bf00      	nop
 8009ee4:	40021000 	.word	0x40021000
 8009ee8:	f8ff0000 	.word	0xf8ff0000
 8009eec:	e000ed00 	.word	0xe000ed00
 8009ef0:	40022000 	.word	0x40022000

08009ef4 <tmc_set>:
	}
}
*/

void tmc_set(unsigned char motor, unsigned char reg, unsigned char d3, unsigned char d2, unsigned char d1, unsigned char d0)
{
 8009ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
	*crc = 0;
 8009ef6:	2700      	movs	r7, #0
{
 8009ef8:	b083      	sub	sp, #12
	unsigned char cmd1[] = {0x05, motor, reg, d3, d2, d1, d0, 0xFF}; // set CRC to FF and calculate in next step
 8009efa:	f04f 0c05 	mov.w	ip, #5
 8009efe:	f10d 35ff 	add.w	r5, sp, #4294967295
	*crc = 0;
 8009f02:	463c      	mov	r4, r7
 8009f04:	462e      	mov	r6, r5
	unsigned char cmd1[] = {0x05, motor, reg, d3, d2, d1, d0, 0xFF}; // set CRC to FF and calculate in next step
 8009f06:	f88d 2003 	strb.w	r2, [sp, #3]
 8009f0a:	f88d 3004 	strb.w	r3, [sp, #4]
{
 8009f0e:	f89d 2020 	ldrb.w	r2, [sp, #32]
 8009f12:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
	unsigned char cmd1[] = {0x05, motor, reg, d3, d2, d1, d0, 0xFF}; // set CRC to FF and calculate in next step
 8009f16:	f88d 0001 	strb.w	r0, [sp, #1]
 8009f1a:	f88d 3006 	strb.w	r3, [sp, #6]
 8009f1e:	f88d 1002 	strb.w	r1, [sp, #2]
	*crc = 0;
 8009f22:	f88d 7007 	strb.w	r7, [sp, #7]
	unsigned char cmd1[] = {0x05, motor, reg, d3, d2, d1, d0, 0xFF}; // set CRC to FF and calculate in next step
 8009f26:	f88d c000 	strb.w	ip, [sp]
 8009f2a:	f88d 2005 	strb.w	r2, [sp, #5]
 8009f2e:	f10d 0306 	add.w	r3, sp, #6
		currentByte = datagram[i];  // Retrieve a byte to be sent from Array
 8009f32:	f816 2f01 	ldrb.w	r2, [r6, #1]!
			if ((*crc >> 7) ^ (currentByte&0x01))   // update CRC based result of XOR operation
 8009f36:	f002 0101 	and.w	r1, r2, #1
 8009f3a:	ebb1 1fd4 	cmp.w	r1, r4, lsr #7
				*crc = (*crc << 1) ^ 0x07;
 8009f3e:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8009f42:	bf18      	it	ne
 8009f44:	f084 0407 	eorne.w	r4, r4, #7
 8009f48:	b2e4      	uxtb	r4, r4
			if ((*crc >> 7) ^ (currentByte&0x01))   // update CRC based result of XOR operation
 8009f4a:	f3c2 0140 	ubfx	r1, r2, #1, #1
 8009f4e:	ebb1 1fd4 	cmp.w	r1, r4, lsr #7
				*crc = (*crc << 1) ^ 0x07;
 8009f52:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8009f56:	bf18      	it	ne
 8009f58:	f084 0407 	eorne.w	r4, r4, #7
 8009f5c:	b2e4      	uxtb	r4, r4
			if ((*crc >> 7) ^ (currentByte&0x01))   // update CRC based result of XOR operation
 8009f5e:	f3c2 0180 	ubfx	r1, r2, #2, #1
 8009f62:	ebb1 1fd4 	cmp.w	r1, r4, lsr #7
				*crc = (*crc << 1) ^ 0x07;
 8009f66:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8009f6a:	bf18      	it	ne
 8009f6c:	f084 0407 	eorne.w	r4, r4, #7
 8009f70:	b2e4      	uxtb	r4, r4
			if ((*crc >> 7) ^ (currentByte&0x01))   // update CRC based result of XOR operation
 8009f72:	f3c2 01c0 	ubfx	r1, r2, #3, #1
 8009f76:	ebb1 1fd4 	cmp.w	r1, r4, lsr #7
				*crc = (*crc << 1) ^ 0x07;
 8009f7a:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8009f7e:	bf18      	it	ne
 8009f80:	f084 0407 	eorne.w	r4, r4, #7
 8009f84:	b2e4      	uxtb	r4, r4
			if ((*crc >> 7) ^ (currentByte&0x01))   // update CRC based result of XOR operation
 8009f86:	f3c2 1100 	ubfx	r1, r2, #4, #1
 8009f8a:	ebb1 1fd4 	cmp.w	r1, r4, lsr #7
				*crc = (*crc << 1) ^ 0x07;
 8009f8e:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8009f92:	bf18      	it	ne
 8009f94:	f084 0407 	eorne.w	r4, r4, #7
 8009f98:	b2e4      	uxtb	r4, r4
			if ((*crc >> 7) ^ (currentByte&0x01))   // update CRC based result of XOR operation
 8009f9a:	f3c2 1140 	ubfx	r1, r2, #5, #1
 8009f9e:	ebb1 1fd4 	cmp.w	r1, r4, lsr #7
				*crc = (*crc << 1) ^ 0x07;
 8009fa2:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8009fa6:	bf18      	it	ne
 8009fa8:	f084 0407 	eorne.w	r4, r4, #7
 8009fac:	b2e4      	uxtb	r4, r4
			if ((*crc >> 7) ^ (currentByte&0x01))   // update CRC based result of XOR operation
 8009fae:	f3c2 1180 	ubfx	r1, r2, #6, #1
 8009fb2:	ebb1 1fd4 	cmp.w	r1, r4, lsr #7
				*crc = (*crc << 1) ^ 0x07;
 8009fb6:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8009fba:	bf18      	it	ne
 8009fbc:	f084 0407 	eorne.w	r4, r4, #7
 8009fc0:	b2e4      	uxtb	r4, r4
			if ((*crc >> 7) ^ (currentByte&0x01))   // update CRC based result of XOR operation
 8009fc2:	09e1      	lsrs	r1, r4, #7
 8009fc4:	ebb1 1fd2 	cmp.w	r1, r2, lsr #7
				*crc = (*crc << 1) ^ 0x07;
 8009fc8:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8009fcc:	bf18      	it	ne
 8009fce:	f084 0407 	eorne.w	r4, r4, #7
 8009fd2:	b2e4      	uxtb	r4, r4
	for (i=0; i<(datagramLength-1); i++)
 8009fd4:	429e      	cmp	r6, r3
 8009fd6:	f88d 4007 	strb.w	r4, [sp, #7]
 8009fda:	d1aa      	bne.n	8009f32 <tmc_set+0x3e>
	swuart_calcCRC(cmd1, 8);

	for(int i=0; i<8; i++)
	{
		USART_SendData(USART3, cmd1[i]);
 8009fdc:	4c07      	ldr	r4, [pc, #28]	; (8009ffc <tmc_set+0x108>)
 8009fde:	f10d 0607 	add.w	r6, sp, #7
 8009fe2:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8009fe6:	4620      	mov	r0, r4
 8009fe8:	f7f7 fd92 	bl	8001b10 <USART_SendData>
		while (!(USART3->SR & USART_FLAG_TXE));
 8009fec:	8823      	ldrh	r3, [r4, #0]
 8009fee:	061b      	lsls	r3, r3, #24
 8009ff0:	d5fc      	bpl.n	8009fec <tmc_set+0xf8>
	for(int i=0; i<8; i++)
 8009ff2:	42ae      	cmp	r6, r5
 8009ff4:	d1f5      	bne.n	8009fe2 <tmc_set+0xee>
	}
}
 8009ff6:	b003      	add	sp, #12
 8009ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ffa:	bf00      	nop
 8009ffc:	40004800 	.word	0x40004800

0800a000 <tmc_read>:
}
*/


void tmc_read(unsigned char motor, unsigned char reg)
{
 800a000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a004:	4605      	mov	r5, r0
 800a006:	b08a      	sub	sp, #40	; 0x28
 800a008:	460c      	mov	r4, r1
	  char buffer[30];

	  serial3_reset_read_buffer();
 800a00a:	f7fd fc9d 	bl	8007948 <serial3_reset_read_buffer>
				*crc = (*crc << 1);
 800a00e:	f015 0f01 	tst.w	r5, #1
 800a012:	bf14      	ite	ne
 800a014:	23d5      	movne	r3, #213	; 0xd5
 800a016:	23d2      	moveq	r3, #210	; 0xd2

	  unsigned char cmd1[] = {0x05, motor, reg, 0xFF}; // set CRC to FF and calculate in next step
 800a018:	2205      	movs	r2, #5
			if ((*crc >> 7) ^ (currentByte&0x01))   // update CRC based result of XOR operation
 800a01a:	07af      	lsls	r7, r5, #30
				*crc = (*crc << 1) ^ 0x07;
 800a01c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a020:	bf58      	it	pl
 800a022:	f083 0307 	eorpl.w	r3, r3, #7
 800a026:	b2db      	uxtb	r3, r3
			if ((*crc >> 7) ^ (currentByte&0x01))   // update CRC based result of XOR operation
 800a028:	076e      	lsls	r6, r5, #29
				*crc = (*crc << 1) ^ 0x07;
 800a02a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a02e:	bf58      	it	pl
 800a030:	f083 0307 	eorpl.w	r3, r3, #7
 800a034:	b2db      	uxtb	r3, r3
			if ((*crc >> 7) ^ (currentByte&0x01))   // update CRC based result of XOR operation
 800a036:	0728      	lsls	r0, r5, #28
				*crc = (*crc << 1) ^ 0x07;
 800a038:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a03c:	bf48      	it	mi
 800a03e:	f083 0307 	eormi.w	r3, r3, #7
 800a042:	b2db      	uxtb	r3, r3
			if ((*crc >> 7) ^ (currentByte&0x01))   // update CRC based result of XOR operation
 800a044:	06e9      	lsls	r1, r5, #27
				*crc = (*crc << 1) ^ 0x07;
 800a046:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a04a:	bf58      	it	pl
 800a04c:	f083 0307 	eorpl.w	r3, r3, #7
 800a050:	b2db      	uxtb	r3, r3
	  unsigned char cmd1[] = {0x05, motor, reg, 0xFF}; // set CRC to FF and calculate in next step
 800a052:	f88d 2004 	strb.w	r2, [sp, #4]
				*crc = (*crc << 1) ^ 0x07;
 800a056:	005b      	lsls	r3, r3, #1
			if ((*crc >> 7) ^ (currentByte&0x01))   // update CRC based result of XOR operation
 800a058:	06aa      	lsls	r2, r5, #26
				*crc = (*crc << 1) ^ 0x07;
 800a05a:	bf48      	it	mi
 800a05c:	f083 0307 	eormi.w	r3, r3, #7
			if ((*crc >> 7) ^ (currentByte&0x01))   // update CRC based result of XOR operation
 800a060:	f3c5 1280 	ubfx	r2, r5, #6, #1
				*crc = (*crc << 1) ^ 0x07;
 800a064:	b2db      	uxtb	r3, r3
			if ((*crc >> 7) ^ (currentByte&0x01))   // update CRC based result of XOR operation
 800a066:	ebb2 1fd3 	cmp.w	r2, r3, lsr #7
				*crc = (*crc << 1) ^ 0x07;
 800a06a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a06e:	bf18      	it	ne
 800a070:	f083 0307 	eorne.w	r3, r3, #7
 800a074:	b2db      	uxtb	r3, r3
			if ((*crc >> 7) ^ (currentByte&0x01))   // update CRC based result of XOR operation
 800a076:	09da      	lsrs	r2, r3, #7
 800a078:	ebb2 1fd5 	cmp.w	r2, r5, lsr #7
				*crc = (*crc << 1) ^ 0x07;
 800a07c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a080:	bf18      	it	ne
 800a082:	f083 0307 	eorne.w	r3, r3, #7
			if ((*crc >> 7) ^ (currentByte&0x01))   // update CRC based result of XOR operation
 800a086:	f004 0201 	and.w	r2, r4, #1
				*crc = (*crc << 1) ^ 0x07;
 800a08a:	b2db      	uxtb	r3, r3
			if ((*crc >> 7) ^ (currentByte&0x01))   // update CRC based result of XOR operation
 800a08c:	ebb2 1fd3 	cmp.w	r2, r3, lsr #7
				*crc = (*crc << 1) ^ 0x07;
 800a090:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a094:	bf18      	it	ne
 800a096:	f083 0307 	eorne.w	r3, r3, #7
			if ((*crc >> 7) ^ (currentByte&0x01))   // update CRC based result of XOR operation
 800a09a:	f3c4 0240 	ubfx	r2, r4, #1, #1
				*crc = (*crc << 1) ^ 0x07;
 800a09e:	b2db      	uxtb	r3, r3
			if ((*crc >> 7) ^ (currentByte&0x01))   // update CRC based result of XOR operation
 800a0a0:	ebb2 1fd3 	cmp.w	r2, r3, lsr #7
				*crc = (*crc << 1) ^ 0x07;
 800a0a4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a0a8:	bf18      	it	ne
 800a0aa:	f083 0307 	eorne.w	r3, r3, #7
			if ((*crc >> 7) ^ (currentByte&0x01))   // update CRC based result of XOR operation
 800a0ae:	f3c4 0280 	ubfx	r2, r4, #2, #1
				*crc = (*crc << 1) ^ 0x07;
 800a0b2:	b2db      	uxtb	r3, r3
			if ((*crc >> 7) ^ (currentByte&0x01))   // update CRC based result of XOR operation
 800a0b4:	ebb2 1fd3 	cmp.w	r2, r3, lsr #7
				*crc = (*crc << 1) ^ 0x07;
 800a0b8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a0bc:	bf18      	it	ne
 800a0be:	f083 0307 	eorne.w	r3, r3, #7
			if ((*crc >> 7) ^ (currentByte&0x01))   // update CRC based result of XOR operation
 800a0c2:	f3c4 02c0 	ubfx	r2, r4, #3, #1
				*crc = (*crc << 1) ^ 0x07;
 800a0c6:	b2db      	uxtb	r3, r3
			if ((*crc >> 7) ^ (currentByte&0x01))   // update CRC based result of XOR operation
 800a0c8:	ebb2 1fd3 	cmp.w	r2, r3, lsr #7
				*crc = (*crc << 1) ^ 0x07;
 800a0cc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a0d0:	bf18      	it	ne
 800a0d2:	f083 0307 	eorne.w	r3, r3, #7
			if ((*crc >> 7) ^ (currentByte&0x01))   // update CRC based result of XOR operation
 800a0d6:	f3c4 1200 	ubfx	r2, r4, #4, #1
				*crc = (*crc << 1) ^ 0x07;
 800a0da:	b2db      	uxtb	r3, r3
			if ((*crc >> 7) ^ (currentByte&0x01))   // update CRC based result of XOR operation
 800a0dc:	ebb2 1fd3 	cmp.w	r2, r3, lsr #7
				*crc = (*crc << 1) ^ 0x07;
 800a0e0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a0e4:	bf18      	it	ne
 800a0e6:	f083 0307 	eorne.w	r3, r3, #7
			if ((*crc >> 7) ^ (currentByte&0x01))   // update CRC based result of XOR operation
 800a0ea:	f3c4 1240 	ubfx	r2, r4, #5, #1
				*crc = (*crc << 1) ^ 0x07;
 800a0ee:	b2db      	uxtb	r3, r3
			if ((*crc >> 7) ^ (currentByte&0x01))   // update CRC based result of XOR operation
 800a0f0:	ebb2 1fd3 	cmp.w	r2, r3, lsr #7
				*crc = (*crc << 1) ^ 0x07;
 800a0f4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a0f8:	bf18      	it	ne
 800a0fa:	f083 0307 	eorne.w	r3, r3, #7
			if ((*crc >> 7) ^ (currentByte&0x01))   // update CRC based result of XOR operation
 800a0fe:	f3c4 1280 	ubfx	r2, r4, #6, #1
				*crc = (*crc << 1) ^ 0x07;
 800a102:	b2db      	uxtb	r3, r3
			if ((*crc >> 7) ^ (currentByte&0x01))   // update CRC based result of XOR operation
 800a104:	ebb2 1fd3 	cmp.w	r2, r3, lsr #7
				*crc = (*crc << 1) ^ 0x07;
 800a108:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a10c:	bf18      	it	ne
 800a10e:	f083 0307 	eorne.w	r3, r3, #7
 800a112:	b2db      	uxtb	r3, r3
			if ((*crc >> 7) ^ (currentByte&0x01))   // update CRC based result of XOR operation
 800a114:	09da      	lsrs	r2, r3, #7
 800a116:	ebb2 1fd4 	cmp.w	r2, r4, lsr #7
				*crc = (*crc << 1) ^ 0x07;
 800a11a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a11e:	bf18      	it	ne
 800a120:	f083 0307 	eorne.w	r3, r3, #7
	  unsigned char cmd1[] = {0x05, motor, reg, 0xFF}; // set CRC to FF and calculate in next step
 800a124:	f88d 4006 	strb.w	r4, [sp, #6]
				*crc = (*crc << 1) ^ 0x07;
 800a128:	b2db      	uxtb	r3, r3
	  swuart_calcCRC(cmd1, 4);

	  for(int i=0; i<4; i++)
	  {
		  USART_SendData(USART3, cmd1[i]);
 800a12a:	4c24      	ldr	r4, [pc, #144]	; (800a1bc <tmc_read+0x1bc>)
	  unsigned char cmd1[] = {0x05, motor, reg, 0xFF}; // set CRC to FF and calculate in next step
 800a12c:	f88d 5005 	strb.w	r5, [sp, #5]
 800a130:	f88d 3007 	strb.w	r3, [sp, #7]
 800a134:	ae01      	add	r6, sp, #4
 800a136:	ad02      	add	r5, sp, #8
		  USART_SendData(USART3, cmd1[i]);
 800a138:	f816 1b01 	ldrb.w	r1, [r6], #1
 800a13c:	4620      	mov	r0, r4
 800a13e:	f7f7 fce7 	bl	8001b10 <USART_SendData>
		  while (!(USART3->SR & USART_FLAG_TXE));
 800a142:	8823      	ldrh	r3, [r4, #0]
 800a144:	061b      	lsls	r3, r3, #24
 800a146:	d5fc      	bpl.n	800a142 <tmc_read+0x142>
	  for(int i=0; i<4; i++)
 800a148:	42ae      	cmp	r6, r5
 800a14a:	d1f5      	bne.n	800a138 <tmc_read+0x138>
	  }

	  _delay_ms(10);
 800a14c:	200a      	movs	r0, #10
 800a14e:	f7f9 fc2d 	bl	80039ac <_delay_ms>

	  int c1 = 0;
	  c1 = serial3_get_rx_buffer_count();
 800a152:	f7fd fa83 	bl	800765c <serial3_get_rx_buffer_count>
 800a156:	4606      	mov	r6, r0

	  printString("[TMC:");
 800a158:	4819      	ldr	r0, [pc, #100]	; (800a1c0 <tmc_read+0x1c0>)
 800a15a:	f7fa fde1 	bl	8004d20 <printString>
	  for(int i=0; i < c1; i++)
 800a15e:	b186      	cbz	r6, 800a182 <tmc_read+0x182>
 800a160:	1e77      	subs	r7, r6, #1
 800a162:	2f00      	cmp	r7, #0
 800a164:	f04f 0400 	mov.w	r4, #0
 800a168:	dc13      	bgt.n	800a192 <tmc_read+0x192>
	  {
		  uint8_t d = serial3_read();
 800a16a:	f7fd facb 	bl	8007704 <serial3_read>
		  itoa (d, buffer, 10);
 800a16e:	220a      	movs	r2, #10
 800a170:	4629      	mov	r1, r5
 800a172:	f001 fa45 	bl	800b600 <itoa>
	  for(int i=0; i < c1; i++)
 800a176:	3401      	adds	r4, #1
		  printString(buffer);
 800a178:	4628      	mov	r0, r5
 800a17a:	f7fa fdd1 	bl	8004d20 <printString>
	  for(int i=0; i < c1; i++)
 800a17e:	42a6      	cmp	r6, r4
 800a180:	dcf3      	bgt.n	800a16a <tmc_read+0x16a>
		  if(i<(c1-1))
			  printString(",");
	  }
	  printString("]\r\n");
 800a182:	4810      	ldr	r0, [pc, #64]	; (800a1c4 <tmc_read+0x1c4>)
 800a184:	f7fa fdcc 	bl	8004d20 <printString>

	  serial3_reset_read_buffer();
 800a188:	f7fd fbde 	bl	8007948 <serial3_reset_read_buffer>

}
 800a18c:	b00a      	add	sp, #40	; 0x28
 800a18e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			  printString(",");
 800a192:	f8df 8034 	ldr.w	r8, [pc, #52]	; 800a1c8 <tmc_read+0x1c8>
		  uint8_t d = serial3_read();
 800a196:	f7fd fab5 	bl	8007704 <serial3_read>
		  itoa (d, buffer, 10);
 800a19a:	220a      	movs	r2, #10
 800a19c:	4629      	mov	r1, r5
 800a19e:	f001 fa2f 	bl	800b600 <itoa>
		  printString(buffer);
 800a1a2:	4628      	mov	r0, r5
 800a1a4:	f7fa fdbc 	bl	8004d20 <printString>
	  for(int i=0; i < c1; i++)
 800a1a8:	3401      	adds	r4, #1
			  printString(",");
 800a1aa:	4640      	mov	r0, r8
 800a1ac:	f7fa fdb8 	bl	8004d20 <printString>
	  for(int i=0; i < c1; i++)
 800a1b0:	42bc      	cmp	r4, r7
 800a1b2:	dbf0      	blt.n	800a196 <tmc_read+0x196>
 800a1b4:	42a6      	cmp	r6, r4
 800a1b6:	dcd8      	bgt.n	800a16a <tmc_read+0x16a>
 800a1b8:	e7e3      	b.n	800a182 <tmc_read+0x182>
 800a1ba:	bf00      	nop
 800a1bc:	40004800 	.word	0x40004800
 800a1c0:	0800cb34 	.word	0x0800cb34
 800a1c4:	0800cb40 	.word	0x0800cb40
 800a1c8:	0800cb3c 	.word	0x0800cb3c

0800a1cc <Standard_GetConfiguration>:
* Output         : None.
* Return         : Return 1 , if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
uint8_t *Standard_GetConfiguration(uint16_t Length)
{
 800a1cc:	b508      	push	{r3, lr}
  if (Length == 0)
 800a1ce:	b138      	cbz	r0, 800a1e0 <Standard_GetConfiguration+0x14>
  {
    pInformation->Ctrl_Info.Usb_wLength =
      sizeof(pInformation->Current_Configuration);
    return 0;
  }
  pUser_Standard_Requests->User_GetConfiguration();
 800a1d0:	4b06      	ldr	r3, [pc, #24]	; (800a1ec <Standard_GetConfiguration+0x20>)
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	4798      	blx	r3
  return (uint8_t *)&pInformation->Current_Configuration;
 800a1d8:	4b05      	ldr	r3, [pc, #20]	; (800a1f0 <Standard_GetConfiguration+0x24>)
 800a1da:	6818      	ldr	r0, [r3, #0]
 800a1dc:	300a      	adds	r0, #10
}
 800a1de:	bd08      	pop	{r3, pc}
    pInformation->Ctrl_Info.Usb_wLength =
 800a1e0:	2201      	movs	r2, #1
 800a1e2:	4b03      	ldr	r3, [pc, #12]	; (800a1f0 <Standard_GetConfiguration+0x24>)
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	821a      	strh	r2, [r3, #16]
}
 800a1e8:	bd08      	pop	{r3, pc}
 800a1ea:	bf00      	nop
 800a1ec:	200017dc 	.word	0x200017dc
 800a1f0:	200017e0 	.word	0x200017e0

0800a1f4 <Standard_GetInterface>:
* Output         : None.
* Return         : Return 0, if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
uint8_t *Standard_GetInterface(uint16_t Length)
{
 800a1f4:	b508      	push	{r3, lr}
  if (Length == 0)
 800a1f6:	b138      	cbz	r0, 800a208 <Standard_GetInterface+0x14>
  {
    pInformation->Ctrl_Info.Usb_wLength =
      sizeof(pInformation->Current_AlternateSetting);
    return 0;
  }
  pUser_Standard_Requests->User_GetInterface();
 800a1f8:	4b06      	ldr	r3, [pc, #24]	; (800a214 <Standard_GetInterface+0x20>)
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	689b      	ldr	r3, [r3, #8]
 800a1fe:	4798      	blx	r3
  return (uint8_t *)&pInformation->Current_AlternateSetting;
 800a200:	4b05      	ldr	r3, [pc, #20]	; (800a218 <Standard_GetInterface+0x24>)
 800a202:	6818      	ldr	r0, [r3, #0]
 800a204:	300c      	adds	r0, #12
}
 800a206:	bd08      	pop	{r3, pc}
    pInformation->Ctrl_Info.Usb_wLength =
 800a208:	2201      	movs	r2, #1
 800a20a:	4b03      	ldr	r3, [pc, #12]	; (800a218 <Standard_GetInterface+0x24>)
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	821a      	strh	r2, [r3, #16]
}
 800a210:	bd08      	pop	{r3, pc}
 800a212:	bf00      	nop
 800a214:	200017dc 	.word	0x200017dc
 800a218:	200017e0 	.word	0x200017e0

0800a21c <Standard_GetStatus>:
* Output         : None.
* Return         : Return 0, if the request is at end of data block,
*                  or is invalid when "Length" is 0.
*******************************************************************************/
uint8_t *Standard_GetStatus(uint16_t Length)
{
 800a21c:	b508      	push	{r3, lr}
 800a21e:	4b1f      	ldr	r3, [pc, #124]	; (800a29c <Standard_GetStatus+0x80>)
 800a220:	681a      	ldr	r2, [r3, #0]
  if (Length == 0)
 800a222:	2800      	cmp	r0, #0
 800a224:	d034      	beq.n	800a290 <Standard_GetStatus+0x74>
    pInformation->Ctrl_Info.Usb_wLength = 2;
    return 0;
  }

  /* Reset Status Information */
  StatusInfo.w = 0;
 800a226:	2100      	movs	r1, #0
 800a228:	481d      	ldr	r0, [pc, #116]	; (800a2a0 <Standard_GetStatus+0x84>)
 800a22a:	8001      	strh	r1, [r0, #0]
 800a22c:	7813      	ldrb	r3, [r2, #0]

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800a22e:	f013 037f 	ands.w	r3, r3, #127	; 0x7f
 800a232:	d016      	beq.n	800a262 <Standard_GetStatus+0x46>
    {
      ClrBit(StatusInfo0, 0);
    }
  }
  /*Interface Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 800a234:	2b01      	cmp	r3, #1
 800a236:	d025      	beq.n	800a284 <Standard_GetStatus+0x68>
  {
    return (uint8_t *)&StatusInfo;
  }
  /*Get EndPoint Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 800a238:	2b02      	cmp	r3, #2
 800a23a:	d12c      	bne.n	800a296 <Standard_GetStatus+0x7a>
  {
    uint8_t Related_Endpoint;
    uint8_t wIndex0 = pInformation->USBwIndex0;
 800a23c:	7952      	ldrb	r2, [r2, #5]
 800a23e:	f002 030f 	and.w	r3, r2, #15
 800a242:	009b      	lsls	r3, r3, #2
 800a244:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a248:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
 800a24c:	0612      	lsls	r2, r2, #24
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 800a24e:	681b      	ldr	r3, [r3, #0]
    if (ValBit(wIndex0, 7))
 800a250:	d419      	bmi.n	800a286 <Standard_GetStatus+0x6a>
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 800a252:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a256:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a25a:	d10e      	bne.n	800a27a <Standard_GetStatus+0x5e>
        SetBit(StatusInfo0, 0); /* IN Endpoint stalled */
 800a25c:	2301      	movs	r3, #1
 800a25e:	7003      	strb	r3, [r0, #0]
 800a260:	e00b      	b.n	800a27a <Standard_GetStatus+0x5e>
    uint8_t Feature = pInformation->Current_Feature;
 800a262:	7a52      	ldrb	r2, [r2, #9]
    if (ValBit(Feature, 5))
 800a264:	f012 0320 	ands.w	r3, r2, #32
 800a268:	bf1a      	itte	ne
 800a26a:	2103      	movne	r1, #3
 800a26c:	2302      	movne	r3, #2
 800a26e:	2101      	moveq	r1, #1
      SetBit(StatusInfo0, 0);
 800a270:	f012 0f40 	tst.w	r2, #64	; 0x40
 800a274:	bf18      	it	ne
 800a276:	460b      	movne	r3, r1
 800a278:	7003      	strb	r3, [r0, #0]
  }
  else
  {
    return NULL;
  }
  pUser_Standard_Requests->User_GetStatus();
 800a27a:	4b0a      	ldr	r3, [pc, #40]	; (800a2a4 <Standard_GetStatus+0x88>)
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	691b      	ldr	r3, [r3, #16]
 800a280:	4798      	blx	r3
  return (uint8_t *)&StatusInfo;
 800a282:	4807      	ldr	r0, [pc, #28]	; (800a2a0 <Standard_GetStatus+0x84>)
}
 800a284:	bd08      	pop	{r3, pc}
      if (_GetTxStallStatus(Related_Endpoint))
 800a286:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a28a:	2b10      	cmp	r3, #16
 800a28c:	d1f5      	bne.n	800a27a <Standard_GetStatus+0x5e>
 800a28e:	e7e5      	b.n	800a25c <Standard_GetStatus+0x40>
    pInformation->Ctrl_Info.Usb_wLength = 2;
 800a290:	2302      	movs	r3, #2
 800a292:	8213      	strh	r3, [r2, #16]
}
 800a294:	bd08      	pop	{r3, pc}
    return NULL;
 800a296:	4608      	mov	r0, r1
}
 800a298:	bd08      	pop	{r3, pc}
 800a29a:	bf00      	nop
 800a29c:	200017e0 	.word	0x200017e0
 800a2a0:	200017b0 	.word	0x200017b0
 800a2a4:	200017dc 	.word	0x200017dc

0800a2a8 <DataStageIn>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void DataStageIn(void)
{
 800a2a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
 800a2ac:	4f24      	ldr	r7, [pc, #144]	; (800a340 <DataStageIn+0x98>)
 800a2ae:	683d      	ldr	r5, [r7, #0]
  uint32_t save_wLength = pEPinfo->Usb_wLength;
 800a2b0:	8a2c      	ldrh	r4, [r5, #16]
  uint32_t ControlState = pInformation->ControlState;

  uint8_t *DataBuffer;
  uint32_t Length;

  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
 800a2b2:	b92c      	cbnz	r4, 800a2c0 <DataStageIn+0x18>
  uint32_t ControlState = pInformation->ControlState;
 800a2b4:	7a2e      	ldrb	r6, [r5, #8]
  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
 800a2b6:	2e04      	cmp	r6, #4
 800a2b8:	d02b      	beq.n	800a312 <DataStageIn+0x6a>
    }
    
    goto Expect_Status_Out;
  }

  Length = pEPinfo->PacketSize;
 800a2ba:	8aab      	ldrh	r3, [r5, #20]
 800a2bc:	2604      	movs	r6, #4
 800a2be:	e004      	b.n	800a2ca <DataStageIn+0x22>
 800a2c0:	8aab      	ldrh	r3, [r5, #20]
  ControlState = (save_wLength <= Length) ? LAST_IN_DATA : IN_DATA;
 800a2c2:	429c      	cmp	r4, r3
 800a2c4:	bf8c      	ite	hi
 800a2c6:	2602      	movhi	r6, #2
 800a2c8:	2604      	movls	r6, #4
  if (Length > save_wLength)
  {
    Length = save_wLength;
  }

  DataBuffer = (*pEPinfo->CopyData)(Length);
 800a2ca:	429c      	cmp	r4, r3
 800a2cc:	bf28      	it	cs
 800a2ce:	461c      	movcs	r4, r3
 800a2d0:	69ab      	ldr	r3, [r5, #24]
 800a2d2:	4620      	mov	r0, r4
 800a2d4:	4798      	blx	r3
 800a2d6:	4680      	mov	r8, r0

#ifdef STM32F10X_CL
  PCD_EP_Write (ENDP0, DataBuffer, Length);
#else   
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);
 800a2d8:	2000      	movs	r0, #0
 800a2da:	f000 fdc1 	bl	800ae60 <GetEPTxAddr>
 800a2de:	4622      	mov	r2, r4
 800a2e0:	4601      	mov	r1, r0
 800a2e2:	4640      	mov	r0, r8
 800a2e4:	f000 fcd4 	bl	800ac90 <UserToPMABufferCopy>
#endif /* STM32F10X_CL */ 

  SetEPTxCount(ENDP0, Length);
 800a2e8:	4621      	mov	r1, r4
 800a2ea:	2000      	movs	r0, #0
 800a2ec:	f000 fdd4 	bl	800ae98 <SetEPTxCount>

  pEPinfo->Usb_wLength -= Length;
  pEPinfo->Usb_wOffset += Length;
  vSetEPTxStatus(EP_TX_VALID);
 800a2f0:	2030      	movs	r0, #48	; 0x30

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 800a2f2:	f44f 5240 	mov.w	r2, #12288	; 0x3000
  pEPinfo->Usb_wLength -= Length;
 800a2f6:	8a2b      	ldrh	r3, [r5, #16]
  pEPinfo->Usb_wOffset += Length;
 800a2f8:	8a69      	ldrh	r1, [r5, #18]
  pEPinfo->Usb_wLength -= Length;
 800a2fa:	1b1b      	subs	r3, r3, r4
 800a2fc:	822b      	strh	r3, [r5, #16]
  pEPinfo->Usb_wOffset += Length;
 800a2fe:	440c      	add	r4, r1
  USB_StatusOut();/* Expect the host to abort the data IN stage */
 800a300:	4b10      	ldr	r3, [pc, #64]	; (800a344 <DataStageIn+0x9c>)
  vSetEPTxStatus(EP_TX_VALID);
 800a302:	4911      	ldr	r1, [pc, #68]	; (800a348 <DataStageIn+0xa0>)
  pEPinfo->Usb_wOffset += Length;
 800a304:	826c      	strh	r4, [r5, #18]
  vSetEPTxStatus(EP_TX_VALID);
 800a306:	8008      	strh	r0, [r1, #0]
 800a308:	683d      	ldr	r5, [r7, #0]
  USB_StatusOut();/* Expect the host to abort the data IN stage */
 800a30a:	801a      	strh	r2, [r3, #0]

Expect_Status_Out:
  pInformation->ControlState = ControlState;
 800a30c:	722e      	strb	r6, [r5, #8]
}
 800a30e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Data_Mul_MaxPacketSize == TRUE)
 800a312:	4b0e      	ldr	r3, [pc, #56]	; (800a34c <DataStageIn+0xa4>)
 800a314:	681a      	ldr	r2, [r3, #0]
 800a316:	2a01      	cmp	r2, #1
 800a318:	d006      	beq.n	800a328 <DataStageIn+0x80>
      vSetEPTxStatus(EP_TX_STALL);
 800a31a:	2210      	movs	r2, #16
 800a31c:	2607      	movs	r6, #7
 800a31e:	4b0a      	ldr	r3, [pc, #40]	; (800a348 <DataStageIn+0xa0>)
 800a320:	801a      	strh	r2, [r3, #0]
  pInformation->ControlState = ControlState;
 800a322:	722e      	strb	r6, [r5, #8]
}
 800a324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      Send0LengthData();
 800a328:	2030      	movs	r0, #48	; 0x30
 800a32a:	4909      	ldr	r1, [pc, #36]	; (800a350 <DataStageIn+0xa8>)
 800a32c:	4a09      	ldr	r2, [pc, #36]	; (800a354 <DataStageIn+0xac>)
 800a32e:	6809      	ldr	r1, [r1, #0]
 800a330:	b289      	uxth	r1, r1
 800a332:	440a      	add	r2, r1
 800a334:	4904      	ldr	r1, [pc, #16]	; (800a348 <DataStageIn+0xa0>)
 800a336:	0052      	lsls	r2, r2, #1
 800a338:	6014      	str	r4, [r2, #0]
      Data_Mul_MaxPacketSize = FALSE;
 800a33a:	601c      	str	r4, [r3, #0]
      Send0LengthData();
 800a33c:	8008      	strh	r0, [r1, #0]
 800a33e:	e7e5      	b.n	800a30c <DataStageIn+0x64>
 800a340:	200017e0 	.word	0x200017e0
 800a344:	200017e6 	.word	0x200017e6
 800a348:	200017e8 	.word	0x200017e8
 800a34c:	20000f60 	.word	0x20000f60
 800a350:	40005c50 	.word	0x40005c50
 800a354:	20003002 	.word	0x20003002

0800a358 <Standard_ClearFeature>:
{
 800a358:	b538      	push	{r3, r4, r5, lr}
  uint32_t     Type_Rec = Type_Recipient;
 800a35a:	4b2e      	ldr	r3, [pc, #184]	; (800a414 <Standard_ClearFeature+0xbc>)
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	7818      	ldrb	r0, [r3, #0]
  if (Type_Rec == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800a360:	f010 007f 	ands.w	r0, r0, #127	; 0x7f
 800a364:	d02c      	beq.n	800a3c0 <Standard_ClearFeature+0x68>
  else if (Type_Rec == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 800a366:	2802      	cmp	r0, #2
 800a368:	d128      	bne.n	800a3bc <Standard_ClearFeature+0x64>
    if ((pInformation->USBwValue != ENDPOINT_STALL)
 800a36a:	885a      	ldrh	r2, [r3, #2]
 800a36c:	bb2a      	cbnz	r2, 800a3ba <Standard_ClearFeature+0x62>
        || (pInformation->USBwIndex1 != 0))
 800a36e:	791a      	ldrb	r2, [r3, #4]
 800a370:	bb1a      	cbnz	r2, 800a3ba <Standard_ClearFeature+0x62>
    wIndex0 = pInformation->USBwIndex0;
 800a372:	795a      	ldrb	r2, [r3, #5]
    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 800a374:	4d28      	ldr	r5, [pc, #160]	; (800a418 <Standard_ClearFeature+0xc0>)
    rEP = wIndex0 & ~0x80;
 800a376:	f022 0080 	bic.w	r0, r2, #128	; 0x80
 800a37a:	0084      	lsls	r4, r0, #2
 800a37c:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 800a380:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
      Status = _GetEPTxStatus(Related_Endpoint);
 800a384:	6821      	ldr	r1, [r4, #0]
    if (ValBit(pInformation->USBwIndex0, 7))
 800a386:	b252      	sxtb	r2, r2
    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 800a388:	782d      	ldrb	r5, [r5, #0]
    if (ValBit(pInformation->USBwIndex0, 7))
 800a38a:	2a00      	cmp	r2, #0
      Status = _GetEPTxStatus(Related_Endpoint);
 800a38c:	bfb4      	ite	lt
 800a38e:	f001 0130 	andlt.w	r1, r1, #48	; 0x30
      Status = _GetEPRxStatus(Related_Endpoint);
 800a392:	f401 5140 	andge.w	r1, r1, #12288	; 0x3000
    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 800a396:	4285      	cmp	r5, r0
 800a398:	d910      	bls.n	800a3bc <Standard_ClearFeature+0x64>
 800a39a:	b179      	cbz	r1, 800a3bc <Standard_ClearFeature+0x64>
        || (pInformation->Current_Configuration == 0))
 800a39c:	7a9b      	ldrb	r3, [r3, #10]
 800a39e:	b16b      	cbz	r3, 800a3bc <Standard_ClearFeature+0x64>
    if (wIndex0 & 0x80)
 800a3a0:	2a00      	cmp	r2, #0
      if (_GetTxStallStatus(Related_Endpoint ))
 800a3a2:	6823      	ldr	r3, [r4, #0]
    if (wIndex0 & 0x80)
 800a3a4:	db11      	blt.n	800a3ca <Standard_ClearFeature+0x72>
      if (_GetRxStallStatus(Related_Endpoint))
 800a3a6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a3aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a3ae:	d019      	beq.n	800a3e4 <Standard_ClearFeature+0x8c>
    pUser_Standard_Requests->User_ClearFeature();
 800a3b0:	4b1a      	ldr	r3, [pc, #104]	; (800a41c <Standard_ClearFeature+0xc4>)
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	695b      	ldr	r3, [r3, #20]
 800a3b6:	4798      	blx	r3
    return USB_SUCCESS;
 800a3b8:	2000      	movs	r0, #0
}
 800a3ba:	bd38      	pop	{r3, r4, r5, pc}
  return USB_UNSUPPORT;
 800a3bc:	2002      	movs	r0, #2
}
 800a3be:	bd38      	pop	{r3, r4, r5, pc}
    ClrBit(pInformation->Current_Feature, 5);
 800a3c0:	7a5a      	ldrb	r2, [r3, #9]
 800a3c2:	f022 0220 	bic.w	r2, r2, #32
 800a3c6:	725a      	strb	r2, [r3, #9]
}
 800a3c8:	bd38      	pop	{r3, r4, r5, pc}
      if (_GetTxStallStatus(Related_Endpoint ))
 800a3ca:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a3ce:	2b10      	cmp	r3, #16
 800a3d0:	d1ee      	bne.n	800a3b0 <Standard_ClearFeature+0x58>
        ClearDTOG_TX(Related_Endpoint);
 800a3d2:	b2c4      	uxtb	r4, r0
 800a3d4:	4620      	mov	r0, r4
 800a3d6:	f000 fd11 	bl	800adfc <ClearDTOG_TX>
        SetEPTxStatus(Related_Endpoint, EP_TX_VALID);
 800a3da:	4620      	mov	r0, r4
 800a3dc:	2130      	movs	r1, #48	; 0x30
 800a3de:	f000 fc8f 	bl	800ad00 <SetEPTxStatus>
 800a3e2:	e7e5      	b.n	800a3b0 <Standard_ClearFeature+0x58>
        if (Related_Endpoint == ENDP0)
 800a3e4:	b990      	cbnz	r0, 800a40c <Standard_ClearFeature+0xb4>
          SetEPRxCount(Related_Endpoint, Device_Property.MaxPacketSize);
 800a3e6:	4b0e      	ldr	r3, [pc, #56]	; (800a420 <Standard_ClearFeature+0xc8>)
 800a3e8:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 800a3ec:	f000 fd62 	bl	800aeb4 <SetEPRxCount>
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
 800a3f0:	6823      	ldr	r3, [r4, #0]
 800a3f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a3f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3fa:	b29b      	uxth	r3, r3
 800a3fc:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800a400:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a404:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a408:	6023      	str	r3, [r4, #0]
 800a40a:	e7d1      	b.n	800a3b0 <Standard_ClearFeature+0x58>
          ClearDTOG_RX(Related_Endpoint);
 800a40c:	f000 fce4 	bl	800add8 <ClearDTOG_RX>
 800a410:	e7ee      	b.n	800a3f0 <Standard_ClearFeature+0x98>
 800a412:	bf00      	nop
 800a414:	200017e0 	.word	0x200017e0
 800a418:	200000b0 	.word	0x200000b0
 800a41c:	200017dc 	.word	0x200017dc
 800a420:	20000080 	.word	0x20000080

0800a424 <Standard_SetEndPointFeature>:
{
 800a424:	b538      	push	{r3, r4, r5, lr}
  wIndex0 = pInformation->USBwIndex0;
 800a426:	4b1f      	ldr	r3, [pc, #124]	; (800a4a4 <Standard_SetEndPointFeature+0x80>)
  if (Related_Endpoint >= Device_Table.Total_Endpoint
 800a428:	4d1f      	ldr	r5, [pc, #124]	; (800a4a8 <Standard_SetEndPointFeature+0x84>)
  wIndex0 = pInformation->USBwIndex0;
 800a42a:	6818      	ldr	r0, [r3, #0]
  if (Related_Endpoint >= Device_Table.Total_Endpoint
 800a42c:	782d      	ldrb	r5, [r5, #0]
  wIndex0 = pInformation->USBwIndex0;
 800a42e:	7942      	ldrb	r2, [r0, #5]
  rEP = wIndex0 & ~0x80;
 800a430:	f022 0480 	bic.w	r4, r2, #128	; 0x80
 800a434:	00a3      	lsls	r3, r4, #2
 800a436:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a43a:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
    Status = _GetEPTxStatus(Related_Endpoint);
 800a43e:	6819      	ldr	r1, [r3, #0]
  if (ValBit(pInformation->USBwIndex0, 7))
 800a440:	b252      	sxtb	r2, r2
 800a442:	2a00      	cmp	r2, #0
    Status = _GetEPTxStatus(Related_Endpoint);
 800a444:	bfb4      	ite	lt
 800a446:	f001 0130 	andlt.w	r1, r1, #48	; 0x30
    Status = _GetEPRxStatus(Related_Endpoint);
 800a44a:	f401 5140 	andge.w	r1, r1, #12288	; 0x3000
  if (Related_Endpoint >= Device_Table.Total_Endpoint
 800a44e:	42a5      	cmp	r5, r4
 800a450:	d919      	bls.n	800a486 <Standard_SetEndPointFeature+0x62>
      || pInformation->USBwValue != 0 || Status == 0
 800a452:	8844      	ldrh	r4, [r0, #2]
 800a454:	b9bc      	cbnz	r4, 800a486 <Standard_SetEndPointFeature+0x62>
 800a456:	b1b1      	cbz	r1, 800a486 <Standard_SetEndPointFeature+0x62>
      || pInformation->Current_Configuration == 0)
 800a458:	7a81      	ldrb	r1, [r0, #10]
 800a45a:	b1a1      	cbz	r1, 800a486 <Standard_SetEndPointFeature+0x62>
    if (wIndex0 & 0x80)
 800a45c:	2a00      	cmp	r2, #0
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 800a45e:	681a      	ldr	r2, [r3, #0]
    if (wIndex0 & 0x80)
 800a460:	db13      	blt.n	800a48a <Standard_SetEndPointFeature+0x66>
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
 800a462:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a466:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800a46a:	b292      	uxth	r2, r2
 800a46c:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
 800a470:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a474:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a478:	601a      	str	r2, [r3, #0]
  pUser_Standard_Requests->User_SetEndPointFeature();
 800a47a:	4b0c      	ldr	r3, [pc, #48]	; (800a4ac <Standard_SetEndPointFeature+0x88>)
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	699b      	ldr	r3, [r3, #24]
 800a480:	4798      	blx	r3
  return USB_SUCCESS;
 800a482:	2000      	movs	r0, #0
}
 800a484:	bd38      	pop	{r3, r4, r5, pc}
    return USB_UNSUPPORT;
 800a486:	2002      	movs	r0, #2
}
 800a488:	bd38      	pop	{r3, r4, r5, pc}
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 800a48a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800a48e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a492:	b292      	uxth	r2, r2
 800a494:	f082 0210 	eor.w	r2, r2, #16
 800a498:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a49c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a4a0:	601a      	str	r2, [r3, #0]
 800a4a2:	e7ea      	b.n	800a47a <Standard_SetEndPointFeature+0x56>
 800a4a4:	200017e0 	.word	0x200017e0
 800a4a8:	200000b0 	.word	0x200000b0
 800a4ac:	200017dc 	.word	0x200017dc

0800a4b0 <Standard_GetDescriptorData>:
  wOffset = pInformation->Ctrl_Info.Usb_wOffset;
 800a4b0:	4b05      	ldr	r3, [pc, #20]	; (800a4c8 <Standard_GetDescriptorData+0x18>)
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	8a5a      	ldrh	r2, [r3, #18]
  if (Length == 0)
 800a4b6:	b110      	cbz	r0, 800a4be <Standard_GetDescriptorData+0xe>
  return pDesc->Descriptor + wOffset;
 800a4b8:	6808      	ldr	r0, [r1, #0]
 800a4ba:	4410      	add	r0, r2
}
 800a4bc:	4770      	bx	lr
    pInformation->Ctrl_Info.Usb_wLength = pDesc->Descriptor_Size - wOffset;
 800a4be:	8889      	ldrh	r1, [r1, #4]
 800a4c0:	1a8a      	subs	r2, r1, r2
 800a4c2:	821a      	strh	r2, [r3, #16]
    return 0;
 800a4c4:	4770      	bx	lr
 800a4c6:	bf00      	nop
 800a4c8:	200017e0 	.word	0x200017e0

0800a4cc <Setup0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Setup0_Process(void)
{
 800a4cc:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
#endif /* STM32F10X_CL */

  if (pInformation->ControlState != PAUSE)
 800a4ce:	4ea5      	ldr	r6, [pc, #660]	; (800a764 <Setup0_Process+0x298>)
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 800a4d0:	4ba5      	ldr	r3, [pc, #660]	; (800a768 <Setup0_Process+0x29c>)
  if (pInformation->ControlState != PAUSE)
 800a4d2:	6834      	ldr	r4, [r6, #0]
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 800a4d4:	681a      	ldr	r2, [r3, #0]
  if (pInformation->ControlState != PAUSE)
 800a4d6:	7a23      	ldrb	r3, [r4, #8]
{
 800a4d8:	b083      	sub	sp, #12
  if (pInformation->ControlState != PAUSE)
 800a4da:	2b09      	cmp	r3, #9
 800a4dc:	d140      	bne.n	800a560 <Setup0_Process+0x94>
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength */
  }

  pInformation->ControlState = SETTING_UP;
 800a4de:	2201      	movs	r2, #1
 800a4e0:	88e3      	ldrh	r3, [r4, #6]
 800a4e2:	7865      	ldrb	r5, [r4, #1]
 800a4e4:	7222      	strb	r2, [r4, #8]
  if (pInformation->USBwLength == 0)
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d059      	beq.n	800a59e <Setup0_Process+0xd2>
  if (Request_No == GET_DESCRIPTOR)
 800a4ea:	2d06      	cmp	r5, #6
 800a4ec:	f000 8090 	beq.w	800a610 <Setup0_Process+0x144>
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
 800a4f0:	2d00      	cmp	r5, #0
 800a4f2:	f040 80a1 	bne.w	800a638 <Setup0_Process+0x16c>
 800a4f6:	8861      	ldrh	r1, [r4, #2]
 800a4f8:	b931      	cbnz	r1, 800a508 <Setup0_Process+0x3c>
           && (pInformation->USBwIndex1 == 0))
 800a4fa:	6863      	ldr	r3, [r4, #4]
 800a4fc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a500:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a504:	f000 817c 	beq.w	800a800 <Setup0_Process+0x334>
 800a508:	4b98      	ldr	r3, [pc, #608]	; (800a76c <Setup0_Process+0x2a0>)
 800a50a:	681b      	ldr	r3, [r3, #0]
    Result = (*pProperty->Class_Data_Setup)(pInformation->USBbRequest);
 800a50c:	691b      	ldr	r3, [r3, #16]
 800a50e:	4628      	mov	r0, r5
 800a510:	4798      	blx	r3
    if (Result == USB_NOT_READY)
 800a512:	2803      	cmp	r0, #3
 800a514:	f000 80e4 	beq.w	800a6e0 <Setup0_Process+0x214>
  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
 800a518:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a51c:	6833      	ldr	r3, [r6, #0]
 800a51e:	8a1a      	ldrh	r2, [r3, #16]
 800a520:	428a      	cmp	r2, r1
 800a522:	f000 80cb 	beq.w	800a6bc <Setup0_Process+0x1f0>
  if ((Result == USB_UNSUPPORT) || (pInformation->Ctrl_Info.Usb_wLength == 0))
 800a526:	2802      	cmp	r0, #2
 800a528:	f040 8097 	bne.w	800a65a <Setup0_Process+0x18e>
    pInformation->ControlState = STALLED;
 800a52c:	2208      	movs	r2, #8
 800a52e:	721a      	strb	r2, [r3, #8]
{
#ifdef STM32F10X_CL  
  USB_OTG_EP *ep;
#endif /* STM32F10X_CL */
      
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 800a530:	4b8f      	ldr	r3, [pc, #572]	; (800a770 <Setup0_Process+0x2a4>)
 800a532:	2000      	movs	r0, #0
 800a534:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 800a538:	f000 fcbc 	bl	800aeb4 <SetEPRxCount>

  if (pInformation->ControlState == STALLED)
 800a53c:	6833      	ldr	r3, [r6, #0]
 800a53e:	7a18      	ldrb	r0, [r3, #8]
 800a540:	2808      	cmp	r0, #8
 800a542:	d106      	bne.n	800a552 <Setup0_Process+0x86>
  {
    vSetEPRxStatus(EP_RX_STALL);
 800a544:	f44f 5480 	mov.w	r4, #4096	; 0x1000
    vSetEPTxStatus(EP_TX_STALL);
 800a548:	2210      	movs	r2, #16
    vSetEPRxStatus(EP_RX_STALL);
 800a54a:	498a      	ldr	r1, [pc, #552]	; (800a774 <Setup0_Process+0x2a8>)
    vSetEPTxStatus(EP_TX_STALL);
 800a54c:	4b8a      	ldr	r3, [pc, #552]	; (800a778 <Setup0_Process+0x2ac>)
    vSetEPRxStatus(EP_RX_STALL);
 800a54e:	800c      	strh	r4, [r1, #0]
    vSetEPTxStatus(EP_TX_STALL);
 800a550:	801a      	strh	r2, [r3, #0]
}
 800a552:	f1a0 0009 	sub.w	r0, r0, #9
 800a556:	fab0 f080 	clz	r0, r0
 800a55a:	0940      	lsrs	r0, r0, #5
 800a55c:	b003      	add	sp, #12
 800a55e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 800a560:	4b86      	ldr	r3, [pc, #536]	; (800a77c <Setup0_Process+0x2b0>)
 800a562:	b292      	uxth	r2, r2
 800a564:	4413      	add	r3, r2
 800a566:	005b      	lsls	r3, r3, #1
 800a568:	881d      	ldrh	r5, [r3, #0]
 800a56a:	006d      	lsls	r5, r5, #1
 800a56c:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 800a570:	f505 45c0 	add.w	r5, r5, #24576	; 0x6000
    pInformation->USBbmRequestType = *pBuf.b++; /* bmRequestType */
 800a574:	782b      	ldrb	r3, [r5, #0]
 800a576:	7023      	strb	r3, [r4, #0]
    pInformation->USBbRequest = *pBuf.b++; /* bRequest */
 800a578:	786b      	ldrb	r3, [r5, #1]
 800a57a:	7063      	strb	r3, [r4, #1]
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
 800a57c:	88a8      	ldrh	r0, [r5, #4]
 800a57e:	f000 fccb 	bl	800af18 <ByteSwap>
 800a582:	8060      	strh	r0, [r4, #2]
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
 800a584:	8928      	ldrh	r0, [r5, #8]
 800a586:	6834      	ldr	r4, [r6, #0]
 800a588:	f000 fcc6 	bl	800af18 <ByteSwap>
  pInformation->ControlState = SETTING_UP;
 800a58c:	2201      	movs	r2, #1
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
 800a58e:	80a0      	strh	r0, [r4, #4]
    pInformation->USBwLength = *pBuf.w; /* wLength */
 800a590:	89ab      	ldrh	r3, [r5, #12]
 800a592:	6834      	ldr	r4, [r6, #0]
 800a594:	80e3      	strh	r3, [r4, #6]
 800a596:	7865      	ldrb	r5, [r4, #1]
  pInformation->ControlState = SETTING_UP;
 800a598:	7222      	strb	r2, [r4, #8]
  if (pInformation->USBwLength == 0)
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d1a5      	bne.n	800a4ea <Setup0_Process+0x1e>
 800a59e:	7823      	ldrb	r3, [r4, #0]
  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800a5a0:	f013 037f 	ands.w	r3, r3, #127	; 0x7f
 800a5a4:	d125      	bne.n	800a5f2 <Setup0_Process+0x126>
    if (RequestNo == SET_CONFIGURATION)
 800a5a6:	2d09      	cmp	r5, #9
 800a5a8:	f000 80c4 	beq.w	800a734 <Setup0_Process+0x268>
    else if (RequestNo == SET_ADDRESS)
 800a5ac:	2d05      	cmp	r5, #5
 800a5ae:	f000 8088 	beq.w	800a6c2 <Setup0_Process+0x1f6>
    else if (RequestNo == SET_FEATURE)
 800a5b2:	2d03      	cmp	r5, #3
 800a5b4:	f000 80fd 	beq.w	800a7b2 <Setup0_Process+0x2e6>
    else if (RequestNo == CLEAR_FEATURE)
 800a5b8:	2d01      	cmp	r5, #1
 800a5ba:	f000 80eb 	beq.w	800a794 <Setup0_Process+0x2c8>
 800a5be:	4b6b      	ldr	r3, [pc, #428]	; (800a76c <Setup0_Process+0x2a0>)
 800a5c0:	681b      	ldr	r3, [r3, #0]
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
 800a5c2:	695b      	ldr	r3, [r3, #20]
 800a5c4:	4628      	mov	r0, r5
 800a5c6:	4798      	blx	r3
    if (Result == USB_NOT_READY)
 800a5c8:	2803      	cmp	r0, #3
 800a5ca:	6834      	ldr	r4, [r6, #0]
 800a5cc:	f000 808c 	beq.w	800a6e8 <Setup0_Process+0x21c>
  if (Result != USB_SUCCESS)
 800a5d0:	2800      	cmp	r0, #0
 800a5d2:	f040 8082 	bne.w	800a6da <Setup0_Process+0x20e>
  USB_StatusIn();
 800a5d6:	2000      	movs	r0, #0
 800a5d8:	4a63      	ldr	r2, [pc, #396]	; (800a768 <Setup0_Process+0x29c>)
 800a5da:	4b69      	ldr	r3, [pc, #420]	; (800a780 <Setup0_Process+0x2b4>)
 800a5dc:	6812      	ldr	r2, [r2, #0]
 800a5de:	2130      	movs	r1, #48	; 0x30
 800a5e0:	b292      	uxth	r2, r2
 800a5e2:	4413      	add	r3, r2
 800a5e4:	005b      	lsls	r3, r3, #1
 800a5e6:	6018      	str	r0, [r3, #0]
 800a5e8:	2306      	movs	r3, #6
 800a5ea:	4a63      	ldr	r2, [pc, #396]	; (800a778 <Setup0_Process+0x2ac>)
  pInformation->ControlState = ControlState;
 800a5ec:	7223      	strb	r3, [r4, #8]
  USB_StatusIn();
 800a5ee:	8011      	strh	r1, [r2, #0]
 800a5f0:	e79e      	b.n	800a530 <Setup0_Process+0x64>
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 800a5f2:	2b01      	cmp	r3, #1
 800a5f4:	d040      	beq.n	800a678 <Setup0_Process+0x1ac>
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 800a5f6:	2b02      	cmp	r3, #2
 800a5f8:	d1e1      	bne.n	800a5be <Setup0_Process+0xf2>
    if (RequestNo == CLEAR_FEATURE)
 800a5fa:	2d01      	cmp	r5, #1
 800a5fc:	f000 80d6 	beq.w	800a7ac <Setup0_Process+0x2e0>
    else if (RequestNo == SET_FEATURE)
 800a600:	2d03      	cmp	r5, #3
 800a602:	d1dc      	bne.n	800a5be <Setup0_Process+0xf2>
      Result = Standard_SetEndPointFeature();
 800a604:	f7ff ff0e 	bl	800a424 <Standard_SetEndPointFeature>
  if (Result != USB_SUCCESS)
 800a608:	2800      	cmp	r0, #0
 800a60a:	d1d8      	bne.n	800a5be <Setup0_Process+0xf2>
 800a60c:	6834      	ldr	r4, [r6, #0]
 800a60e:	e7e2      	b.n	800a5d6 <Setup0_Process+0x10a>
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800a610:	7822      	ldrb	r2, [r4, #0]
 800a612:	4b56      	ldr	r3, [pc, #344]	; (800a76c <Setup0_Process+0x2a0>)
 800a614:	0650      	lsls	r0, r2, #25
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	f47f af78 	bne.w	800a50c <Setup0_Process+0x40>
      uint8_t wValue1 = pInformation->USBwValue1;
 800a61c:	78a2      	ldrb	r2, [r4, #2]
      if (wValue1 == DEVICE_DESCRIPTOR)
 800a61e:	2a01      	cmp	r2, #1
 800a620:	f000 80ec 	beq.w	800a7fc <Setup0_Process+0x330>
      else if (wValue1 == CONFIG_DESCRIPTOR)
 800a624:	2a02      	cmp	r2, #2
 800a626:	f000 809a 	beq.w	800a75e <Setup0_Process+0x292>
      else if (wValue1 == STRING_DESCRIPTOR)
 800a62a:	2a03      	cmp	r2, #3
 800a62c:	f47f af6e 	bne.w	800a50c <Setup0_Process+0x40>
        CopyRoutine = pProperty->GetStringDescriptor;
 800a630:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  if (CopyRoutine)
 800a632:	b942      	cbnz	r2, 800a646 <Setup0_Process+0x17a>
 800a634:	2506      	movs	r5, #6
 800a636:	e769      	b.n	800a50c <Setup0_Process+0x40>
  else if (Request_No == GET_CONFIGURATION)
 800a638:	2d08      	cmp	r5, #8
 800a63a:	d158      	bne.n	800a6ee <Setup0_Process+0x222>
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800a63c:	7823      	ldrb	r3, [r4, #0]
 800a63e:	065b      	lsls	r3, r3, #25
 800a640:	f47f af62 	bne.w	800a508 <Setup0_Process+0x3c>
      CopyRoutine = Standard_GetConfiguration;
 800a644:	4a4f      	ldr	r2, [pc, #316]	; (800a784 <Setup0_Process+0x2b8>)
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 800a646:	2000      	movs	r0, #0
    pInformation->Ctrl_Info.CopyData = CopyRoutine;
 800a648:	61a2      	str	r2, [r4, #24]
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 800a64a:	8260      	strh	r0, [r4, #18]
    (*CopyRoutine)(0);
 800a64c:	4790      	blx	r2
  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
 800a64e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a652:	6833      	ldr	r3, [r6, #0]
 800a654:	8a1a      	ldrh	r2, [r3, #16]
 800a656:	428a      	cmp	r2, r1
 800a658:	d030      	beq.n	800a6bc <Setup0_Process+0x1f0>
  if ((Result == USB_UNSUPPORT) || (pInformation->Ctrl_Info.Usb_wLength == 0))
 800a65a:	2a00      	cmp	r2, #0
 800a65c:	f43f af66 	beq.w	800a52c <Setup0_Process+0x60>
  if (ValBit(pInformation->USBbmRequestType, 7))
 800a660:	f993 1000 	ldrsb.w	r1, [r3]
 800a664:	2900      	cmp	r1, #0
 800a666:	f2c0 80b9 	blt.w	800a7dc <Setup0_Process+0x310>
    pInformation->ControlState = OUT_DATA;
 800a66a:	2003      	movs	r0, #3
    vSetEPRxStatus(EP_RX_VALID); /* enable for next data reception */
 800a66c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800a670:	4a40      	ldr	r2, [pc, #256]	; (800a774 <Setup0_Process+0x2a8>)
    pInformation->ControlState = OUT_DATA;
 800a672:	7218      	strb	r0, [r3, #8]
    vSetEPRxStatus(EP_RX_VALID); /* enable for next data reception */
 800a674:	8011      	strh	r1, [r2, #0]
 800a676:	e75b      	b.n	800a530 <Setup0_Process+0x64>
 800a678:	4f3c      	ldr	r7, [pc, #240]	; (800a76c <Setup0_Process+0x2a0>)
    if (RequestNo == SET_INTERFACE)
 800a67a:	2d0b      	cmp	r5, #11
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	d1a0      	bne.n	800a5c2 <Setup0_Process+0xf6>
  Re = (*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, pInformation->USBwValue0);
 800a680:	699b      	ldr	r3, [r3, #24]
 800a682:	78e1      	ldrb	r1, [r4, #3]
 800a684:	7960      	ldrb	r0, [r4, #5]
 800a686:	4798      	blx	r3
  if (pInformation->Current_Configuration != 0)
 800a688:	6833      	ldr	r3, [r6, #0]
 800a68a:	7a9a      	ldrb	r2, [r3, #10]
 800a68c:	2a00      	cmp	r2, #0
 800a68e:	f000 80dc 	beq.w	800a84a <Setup0_Process+0x37e>
    if ((Re != USB_SUCCESS) || (pInformation->USBwIndex1 != 0)
 800a692:	2800      	cmp	r0, #0
 800a694:	f040 80d9 	bne.w	800a84a <Setup0_Process+0x37e>
 800a698:	791a      	ldrb	r2, [r3, #4]
 800a69a:	2a00      	cmp	r2, #0
 800a69c:	f040 80d5 	bne.w	800a84a <Setup0_Process+0x37e>
        || (pInformation->USBwValue1 != 0))
 800a6a0:	789b      	ldrb	r3, [r3, #2]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	f040 80d1 	bne.w	800a84a <Setup0_Process+0x37e>
      pUser_Standard_Requests->User_SetInterface();
 800a6a8:	4b37      	ldr	r3, [pc, #220]	; (800a788 <Setup0_Process+0x2bc>)
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	68db      	ldr	r3, [r3, #12]
 800a6ae:	4798      	blx	r3
      pInformation->Current_Interface = pInformation->USBwIndex0;
 800a6b0:	6834      	ldr	r4, [r6, #0]
 800a6b2:	7962      	ldrb	r2, [r4, #5]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 800a6b4:	78e3      	ldrb	r3, [r4, #3]
      pInformation->Current_Interface = pInformation->USBwIndex0;
 800a6b6:	72e2      	strb	r2, [r4, #11]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 800a6b8:	7323      	strb	r3, [r4, #12]
 800a6ba:	e78c      	b.n	800a5d6 <Setup0_Process+0x10a>
    pInformation->ControlState = PAUSE;
 800a6bc:	2209      	movs	r2, #9
 800a6be:	721a      	strb	r2, [r3, #8]
 800a6c0:	e736      	b.n	800a530 <Setup0_Process+0x64>
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
 800a6c2:	f994 3003 	ldrsb.w	r3, [r4, #3]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	db07      	blt.n	800a6da <Setup0_Process+0x20e>
 800a6ca:	78a3      	ldrb	r3, [r4, #2]
 800a6cc:	b92b      	cbnz	r3, 800a6da <Setup0_Process+0x20e>
          || (pInformation->USBwIndex != 0)
 800a6ce:	88a3      	ldrh	r3, [r4, #4]
 800a6d0:	b91b      	cbnz	r3, 800a6da <Setup0_Process+0x20e>
          || (pInformation->Current_Configuration != 0))
 800a6d2:	7aa3      	ldrb	r3, [r4, #10]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	f43f af7e 	beq.w	800a5d6 <Setup0_Process+0x10a>
  if (Result != USB_SUCCESS)
 800a6da:	2308      	movs	r3, #8
  pInformation->ControlState = ControlState;
 800a6dc:	7223      	strb	r3, [r4, #8]
 800a6de:	e727      	b.n	800a530 <Setup0_Process+0x64>
      pInformation->ControlState = PAUSE;
 800a6e0:	2209      	movs	r2, #9
 800a6e2:	6833      	ldr	r3, [r6, #0]
 800a6e4:	721a      	strb	r2, [r3, #8]
 800a6e6:	e723      	b.n	800a530 <Setup0_Process+0x64>
    if (Result == USB_NOT_READY)
 800a6e8:	2309      	movs	r3, #9
  pInformation->ControlState = ControlState;
 800a6ea:	7223      	strb	r3, [r4, #8]
 800a6ec:	e720      	b.n	800a530 <Setup0_Process+0x64>
 800a6ee:	4f1f      	ldr	r7, [pc, #124]	; (800a76c <Setup0_Process+0x2a0>)
  else if (Request_No == GET_INTERFACE)
 800a6f0:	2d0a      	cmp	r5, #10
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	f47f af0a 	bne.w	800a50c <Setup0_Process+0x40>
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 800a6f8:	7822      	ldrb	r2, [r4, #0]
 800a6fa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a6fe:	2a01      	cmp	r2, #1
 800a700:	f47f af04 	bne.w	800a50c <Setup0_Process+0x40>
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
 800a704:	7aa2      	ldrb	r2, [r4, #10]
 800a706:	2a00      	cmp	r2, #0
 800a708:	f43f af00 	beq.w	800a50c <Setup0_Process+0x40>
 800a70c:	8861      	ldrh	r1, [r4, #2]
 800a70e:	2900      	cmp	r1, #0
 800a710:	f47f aefc 	bne.w	800a50c <Setup0_Process+0x40>
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
 800a714:	6862      	ldr	r2, [r4, #4]
 800a716:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800a71a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800a71e:	f47f aef5 	bne.w	800a50c <Setup0_Process+0x40>
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
 800a722:	699b      	ldr	r3, [r3, #24]
 800a724:	7960      	ldrb	r0, [r4, #5]
 800a726:	4798      	blx	r3
 800a728:	2800      	cmp	r0, #0
 800a72a:	f040 808a 	bne.w	800a842 <Setup0_Process+0x376>
 800a72e:	6834      	ldr	r4, [r6, #0]
      CopyRoutine = Standard_GetInterface;
 800a730:	4a16      	ldr	r2, [pc, #88]	; (800a78c <Setup0_Process+0x2c0>)
 800a732:	e788      	b.n	800a646 <Setup0_Process+0x17a>
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
 800a734:	4a16      	ldr	r2, [pc, #88]	; (800a790 <Setup0_Process+0x2c4>)
  if ((pInformation->USBwValue0 <=
 800a736:	78e3      	ldrb	r3, [r4, #3]
 800a738:	7852      	ldrb	r2, [r2, #1]
 800a73a:	429a      	cmp	r2, r3
 800a73c:	f4ff af3f 	bcc.w	800a5be <Setup0_Process+0xf2>
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
 800a740:	78a2      	ldrb	r2, [r4, #2]
 800a742:	2a00      	cmp	r2, #0
 800a744:	f47f af3b 	bne.w	800a5be <Setup0_Process+0xf2>
      && (pInformation->USBwIndex == 0)) /*call Back usb spec 2.0*/
 800a748:	88a2      	ldrh	r2, [r4, #4]
 800a74a:	2a00      	cmp	r2, #0
 800a74c:	f47f af37 	bne.w	800a5be <Setup0_Process+0xf2>
    pUser_Standard_Requests->User_SetConfiguration();
 800a750:	4a0d      	ldr	r2, [pc, #52]	; (800a788 <Setup0_Process+0x2bc>)
    pInformation->Current_Configuration = pInformation->USBwValue0;
 800a752:	72a3      	strb	r3, [r4, #10]
    pUser_Standard_Requests->User_SetConfiguration();
 800a754:	6813      	ldr	r3, [r2, #0]
 800a756:	685b      	ldr	r3, [r3, #4]
 800a758:	4798      	blx	r3
 800a75a:	6834      	ldr	r4, [r6, #0]
 800a75c:	e73b      	b.n	800a5d6 <Setup0_Process+0x10a>
        CopyRoutine = pProperty->GetConfigDescriptor;
 800a75e:	6a1a      	ldr	r2, [r3, #32]
 800a760:	e767      	b.n	800a632 <Setup0_Process+0x166>
 800a762:	bf00      	nop
 800a764:	200017e0 	.word	0x200017e0
 800a768:	40005c50 	.word	0x40005c50
 800a76c:	200017b8 	.word	0x200017b8
 800a770:	20000080 	.word	0x20000080
 800a774:	200017e6 	.word	0x200017e6
 800a778:	200017e8 	.word	0x200017e8
 800a77c:	20003004 	.word	0x20003004
 800a780:	20003002 	.word	0x20003002
 800a784:	0800a1cd 	.word	0x0800a1cd
 800a788:	200017dc 	.word	0x200017dc
 800a78c:	0800a1f5 	.word	0x0800a1f5
 800a790:	200000b0 	.word	0x200000b0
      if (pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP
 800a794:	78e3      	ldrb	r3, [r4, #3]
 800a796:	2b01      	cmp	r3, #1
 800a798:	f47f af11 	bne.w	800a5be <Setup0_Process+0xf2>
          && pInformation->USBwIndex == 0
 800a79c:	88a3      	ldrh	r3, [r4, #4]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	f47f af0d 	bne.w	800a5be <Setup0_Process+0xf2>
          && ValBit(pInformation->Current_Feature, 5))
 800a7a4:	7a63      	ldrb	r3, [r4, #9]
 800a7a6:	069c      	lsls	r4, r3, #26
 800a7a8:	f57f af09 	bpl.w	800a5be <Setup0_Process+0xf2>
        Result = Standard_ClearFeature();
 800a7ac:	f7ff fdd4 	bl	800a358 <Standard_ClearFeature>
 800a7b0:	e72a      	b.n	800a608 <Setup0_Process+0x13c>
      if ((pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP)
 800a7b2:	78e3      	ldrb	r3, [r4, #3]
 800a7b4:	2b01      	cmp	r3, #1
 800a7b6:	f47f af02 	bne.w	800a5be <Setup0_Process+0xf2>
          && (pInformation->USBwIndex == 0)
 800a7ba:	88a3      	ldrh	r3, [r4, #4]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	f47f aefe 	bne.w	800a5be <Setup0_Process+0xf2>
          && (ValBit(pInformation->Current_Feature, 5)))
 800a7c2:	7a63      	ldrb	r3, [r4, #9]
 800a7c4:	069f      	lsls	r7, r3, #26
 800a7c6:	f57f aefa 	bpl.w	800a5be <Setup0_Process+0xf2>
  pUser_Standard_Requests->User_SetDeviceFeature();
 800a7ca:	4a35      	ldr	r2, [pc, #212]	; (800a8a0 <Setup0_Process+0x3d4>)
  SetBit(pInformation->Current_Feature, 5);
 800a7cc:	f043 0320 	orr.w	r3, r3, #32
  pUser_Standard_Requests->User_SetDeviceFeature();
 800a7d0:	6812      	ldr	r2, [r2, #0]
  SetBit(pInformation->Current_Feature, 5);
 800a7d2:	7263      	strb	r3, [r4, #9]
  pUser_Standard_Requests->User_SetDeviceFeature();
 800a7d4:	69d3      	ldr	r3, [r2, #28]
 800a7d6:	4798      	blx	r3
 800a7d8:	6834      	ldr	r4, [r6, #0]
 800a7da:	e6fc      	b.n	800a5d6 <Setup0_Process+0x10a>
 800a7dc:	4831      	ldr	r0, [pc, #196]	; (800a8a4 <Setup0_Process+0x3d8>)
    __IO uint32_t wLength = pInformation->USBwLength;
 800a7de:	88d9      	ldrh	r1, [r3, #6]
 800a7e0:	6800      	ldr	r0, [r0, #0]
 800a7e2:	9101      	str	r1, [sp, #4]
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
 800a7e4:	9d01      	ldr	r5, [sp, #4]
 800a7e6:	f890 402c 	ldrb.w	r4, [r0, #44]	; 0x2c
 800a7ea:	42aa      	cmp	r2, r5
 800a7ec:	b2a0      	uxth	r0, r4
 800a7ee:	d911      	bls.n	800a814 <Setup0_Process+0x348>
      pInformation->Ctrl_Info.Usb_wLength = wLength;
 800a7f0:	9a01      	ldr	r2, [sp, #4]
 800a7f2:	821a      	strh	r2, [r3, #16]
    pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
 800a7f4:	8298      	strh	r0, [r3, #20]
    DataStageIn();
 800a7f6:	f7ff fd57 	bl	800a2a8 <DataStageIn>
 800a7fa:	e699      	b.n	800a530 <Setup0_Process+0x64>
        CopyRoutine = pProperty->GetDeviceDescriptor;
 800a7fc:	69da      	ldr	r2, [r3, #28]
 800a7fe:	e718      	b.n	800a632 <Setup0_Process+0x166>
 800a800:	7825      	ldrb	r5, [r4, #0]
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800a802:	f015 057f 	ands.w	r5, r5, #127	; 0x7f
 800a806:	d10d      	bne.n	800a824 <Setup0_Process+0x358>
        && (pInformation->USBwIndex == 0))
 800a808:	88a3      	ldrh	r3, [r4, #4]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	f47f ae7c 	bne.w	800a508 <Setup0_Process+0x3c>
        CopyRoutine = Standard_GetStatus;
 800a810:	4a25      	ldr	r2, [pc, #148]	; (800a8a8 <Setup0_Process+0x3dc>)
 800a812:	e718      	b.n	800a646 <Setup0_Process+0x17a>
    else if (pInformation->Ctrl_Info.Usb_wLength < pInformation->USBwLength)
 800a814:	4291      	cmp	r1, r2
 800a816:	d9ed      	bls.n	800a7f4 <Setup0_Process+0x328>
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
 800a818:	4290      	cmp	r0, r2
 800a81a:	d918      	bls.n	800a84e <Setup0_Process+0x382>
        Data_Mul_MaxPacketSize = FALSE;
 800a81c:	2100      	movs	r1, #0
 800a81e:	4a23      	ldr	r2, [pc, #140]	; (800a8ac <Setup0_Process+0x3e0>)
 800a820:	6011      	str	r1, [r2, #0]
 800a822:	e7e7      	b.n	800a7f4 <Setup0_Process+0x328>
    else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 800a824:	2d01      	cmp	r5, #1
 800a826:	d11c      	bne.n	800a862 <Setup0_Process+0x396>
      if (((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS)
 800a828:	4f1e      	ldr	r7, [pc, #120]	; (800a8a4 <Setup0_Process+0x3d8>)
 800a82a:	7960      	ldrb	r0, [r4, #5]
 800a82c:	683b      	ldr	r3, [r7, #0]
 800a82e:	699b      	ldr	r3, [r3, #24]
 800a830:	4798      	blx	r3
 800a832:	b930      	cbnz	r0, 800a842 <Setup0_Process+0x376>
          && (pInformation->Current_Configuration != 0))
 800a834:	6834      	ldr	r4, [r6, #0]
 800a836:	7aa3      	ldrb	r3, [r4, #10]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d1e9      	bne.n	800a810 <Setup0_Process+0x344>
 800a83c:	7865      	ldrb	r5, [r4, #1]
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	e664      	b.n	800a50c <Setup0_Process+0x40>
 800a842:	6832      	ldr	r2, [r6, #0]
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	7855      	ldrb	r5, [r2, #1]
 800a848:	e660      	b.n	800a50c <Setup0_Process+0x40>
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	e6b9      	b.n	800a5c2 <Setup0_Process+0xf6>
      else if ((pInformation->Ctrl_Info.Usb_wLength % pProperty->MaxPacketSize) == 0)
 800a84e:	fb92 f1f4 	sdiv	r1, r2, r4
 800a852:	fb04 2211 	mls	r2, r4, r1, r2
 800a856:	2a00      	cmp	r2, #0
 800a858:	d1cc      	bne.n	800a7f4 <Setup0_Process+0x328>
        Data_Mul_MaxPacketSize = TRUE;
 800a85a:	2101      	movs	r1, #1
 800a85c:	4a13      	ldr	r2, [pc, #76]	; (800a8ac <Setup0_Process+0x3e0>)
 800a85e:	6011      	str	r1, [r2, #0]
 800a860:	e7c8      	b.n	800a7f4 <Setup0_Process+0x328>
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 800a862:	2d02      	cmp	r5, #2
 800a864:	d118      	bne.n	800a898 <Setup0_Process+0x3cc>
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
 800a866:	7965      	ldrb	r5, [r4, #5]
 800a868:	f005 020f 	and.w	r2, r5, #15
 800a86c:	0093      	lsls	r3, r2, #2
      if (ValBit(pInformation->USBwIndex0, 7))
 800a86e:	0629      	lsls	r1, r5, #24
 800a870:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 800a874:	490e      	ldr	r1, [pc, #56]	; (800a8b0 <Setup0_Process+0x3e4>)
 800a876:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
        Status = _GetEPTxStatus(Related_Endpoint);
 800a87a:	681b      	ldr	r3, [r3, #0]
      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 800a87c:	7809      	ldrb	r1, [r1, #0]
        Status = _GetEPTxStatus(Related_Endpoint);
 800a87e:	bf4c      	ite	mi
 800a880:	f003 0330 	andmi.w	r3, r3, #48	; 0x30
        Status = _GetEPRxStatus(Related_Endpoint);
 800a884:	f403 5340 	andpl.w	r3, r3, #12288	; 0x3000
      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 800a888:	4291      	cmp	r1, r2
 800a88a:	d905      	bls.n	800a898 <Setup0_Process+0x3cc>
 800a88c:	f015 0570 	ands.w	r5, r5, #112	; 0x70
 800a890:	d102      	bne.n	800a898 <Setup0_Process+0x3cc>
          && (Status != 0))
 800a892:	2b00      	cmp	r3, #0
 800a894:	d1bc      	bne.n	800a810 <Setup0_Process+0x344>
 800a896:	e637      	b.n	800a508 <Setup0_Process+0x3c>
 800a898:	4b02      	ldr	r3, [pc, #8]	; (800a8a4 <Setup0_Process+0x3d8>)
      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 800a89a:	2500      	movs	r5, #0
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	e635      	b.n	800a50c <Setup0_Process+0x40>
 800a8a0:	200017dc 	.word	0x200017dc
 800a8a4:	200017b8 	.word	0x200017b8
 800a8a8:	0800a21d 	.word	0x0800a21d
 800a8ac:	20000f60 	.word	0x20000f60
 800a8b0:	200000b0 	.word	0x200000b0

0800a8b4 <In0_Process>:
{
 800a8b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t ControlState = pInformation->ControlState;
 800a8b6:	4c29      	ldr	r4, [pc, #164]	; (800a95c <In0_Process+0xa8>)
 800a8b8:	6823      	ldr	r3, [r4, #0]
 800a8ba:	7a1a      	ldrb	r2, [r3, #8]
  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 800a8bc:	2a02      	cmp	r2, #2
 800a8be:	d026      	beq.n	800a90e <In0_Process+0x5a>
 800a8c0:	2a04      	cmp	r2, #4
 800a8c2:	d024      	beq.n	800a90e <In0_Process+0x5a>
  else if (ControlState == WAIT_STATUS_IN)
 800a8c4:	2a06      	cmp	r2, #6
 800a8c6:	d018      	beq.n	800a8fa <In0_Process+0x46>
 800a8c8:	2108      	movs	r1, #8
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 800a8ca:	4a25      	ldr	r2, [pc, #148]	; (800a960 <In0_Process+0xac>)
  pInformation->ControlState = ControlState;
 800a8cc:	7219      	strb	r1, [r3, #8]
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 800a8ce:	2000      	movs	r0, #0
 800a8d0:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
 800a8d4:	f000 faee 	bl	800aeb4 <SetEPRxCount>
  if (pInformation->ControlState == STALLED)
 800a8d8:	6823      	ldr	r3, [r4, #0]
 800a8da:	7a18      	ldrb	r0, [r3, #8]
 800a8dc:	2808      	cmp	r0, #8
 800a8de:	d106      	bne.n	800a8ee <In0_Process+0x3a>
    vSetEPRxStatus(EP_RX_STALL);
 800a8e0:	f44f 5480 	mov.w	r4, #4096	; 0x1000
    vSetEPTxStatus(EP_TX_STALL);
 800a8e4:	2210      	movs	r2, #16
    vSetEPRxStatus(EP_RX_STALL);
 800a8e6:	491f      	ldr	r1, [pc, #124]	; (800a964 <In0_Process+0xb0>)
    vSetEPTxStatus(EP_TX_STALL);
 800a8e8:	4b1f      	ldr	r3, [pc, #124]	; (800a968 <In0_Process+0xb4>)
    vSetEPRxStatus(EP_RX_STALL);
 800a8ea:	800c      	strh	r4, [r1, #0]
    vSetEPTxStatus(EP_TX_STALL);
 800a8ec:	801a      	strh	r2, [r3, #0]
}
 800a8ee:	f1a0 0009 	sub.w	r0, r0, #9
 800a8f2:	fab0 f080 	clz	r0, r0
 800a8f6:	0940      	lsrs	r0, r0, #5
 800a8f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 800a8fa:	785a      	ldrb	r2, [r3, #1]
 800a8fc:	2a05      	cmp	r2, #5
 800a8fe:	d00b      	beq.n	800a918 <In0_Process+0x64>
    (*pProperty->Process_Status_IN)();
 800a900:	4b1a      	ldr	r3, [pc, #104]	; (800a96c <In0_Process+0xb8>)
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	689b      	ldr	r3, [r3, #8]
 800a906:	4798      	blx	r3
 800a908:	6823      	ldr	r3, [r4, #0]
 800a90a:	2108      	movs	r1, #8
 800a90c:	e7dd      	b.n	800a8ca <In0_Process+0x16>
    DataStageIn();
 800a90e:	f7ff fccb 	bl	800a2a8 <DataStageIn>
    ControlState = pInformation->ControlState;
 800a912:	6823      	ldr	r3, [r4, #0]
 800a914:	7a19      	ldrb	r1, [r3, #8]
 800a916:	e7d8      	b.n	800a8ca <In0_Process+0x16>
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 800a918:	781a      	ldrb	r2, [r3, #0]
 800a91a:	f012 027f 	ands.w	r2, r2, #127	; 0x7f
 800a91e:	d1ef      	bne.n	800a900 <In0_Process+0x4c>
{
#ifdef STM32F10X_CL 
  PCD_EP_SetAddress ((uint8_t)Val);
#else 
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;
 800a920:	4913      	ldr	r1, [pc, #76]	; (800a970 <In0_Process+0xbc>)
      SetDeviceAddress(pInformation->USBwValue0);
 800a922:	f893 c003 	ldrb.w	ip, [r3, #3]
  uint32_t nEP = Device_Table.Total_Endpoint;
 800a926:	780d      	ldrb	r5, [r1, #0]

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 800a928:	b175      	cbz	r5, 800a948 <In0_Process+0x94>
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 800a92a:	f640 770f 	movw	r7, #3855	; 0xf0f
 800a92e:	f248 0680 	movw	r6, #32896	; 0x8080
  for (i = 0; i < nEP; i++)
 800a932:	4910      	ldr	r1, [pc, #64]	; (800a974 <In0_Process+0xc0>)
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 800a934:	680b      	ldr	r3, [r1, #0]
 800a936:	ea42 0006 	orr.w	r0, r2, r6
 800a93a:	403b      	ands	r3, r7
  for (i = 0; i < nEP; i++)
 800a93c:	3201      	adds	r2, #1
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 800a93e:	4303      	orrs	r3, r0
  for (i = 0; i < nEP; i++)
 800a940:	4295      	cmp	r5, r2
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 800a942:	f841 3b04 	str.w	r3, [r1], #4
  for (i = 0; i < nEP; i++)
 800a946:	d1f5      	bne.n	800a934 <In0_Process+0x80>
  } /* for */
  _SetDADDR(Val | DADDR_EF); /* set device address and enable function */
 800a948:	490b      	ldr	r1, [pc, #44]	; (800a978 <In0_Process+0xc4>)
      pUser_Standard_Requests->User_SetDeviceAddress();
 800a94a:	4a0c      	ldr	r2, [pc, #48]	; (800a97c <In0_Process+0xc8>)
  _SetDADDR(Val | DADDR_EF); /* set device address and enable function */
 800a94c:	f04c 0380 	orr.w	r3, ip, #128	; 0x80
 800a950:	600b      	str	r3, [r1, #0]
      pUser_Standard_Requests->User_SetDeviceAddress();
 800a952:	6813      	ldr	r3, [r2, #0]
 800a954:	6a1b      	ldr	r3, [r3, #32]
 800a956:	4798      	blx	r3
 800a958:	e7d2      	b.n	800a900 <In0_Process+0x4c>
 800a95a:	bf00      	nop
 800a95c:	200017e0 	.word	0x200017e0
 800a960:	20000080 	.word	0x20000080
 800a964:	200017e6 	.word	0x200017e6
 800a968:	200017e8 	.word	0x200017e8
 800a96c:	200017b8 	.word	0x200017b8
 800a970:	200000b0 	.word	0x200000b0
 800a974:	40005c00 	.word	0x40005c00
 800a978:	40005c4c 	.word	0x40005c4c
 800a97c:	200017dc 	.word	0x200017dc

0800a980 <Out0_Process>:
{
 800a980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t ControlState = pInformation->ControlState;
 800a982:	4d3c      	ldr	r5, [pc, #240]	; (800aa74 <Out0_Process+0xf4>)
 800a984:	682c      	ldr	r4, [r5, #0]
 800a986:	7a23      	ldrb	r3, [r4, #8]
  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 800a988:	2b02      	cmp	r3, #2
 800a98a:	d00e      	beq.n	800a9aa <Out0_Process+0x2a>
 800a98c:	2b04      	cmp	r3, #4
 800a98e:	d00c      	beq.n	800a9aa <Out0_Process+0x2a>
  else if ((ControlState == OUT_DATA) || (ControlState == LAST_OUT_DATA))
 800a990:	2b03      	cmp	r3, #3
 800a992:	d023      	beq.n	800a9dc <Out0_Process+0x5c>
 800a994:	2b05      	cmp	r3, #5
 800a996:	d021      	beq.n	800a9dc <Out0_Process+0x5c>
  else if (ControlState == WAIT_STATUS_OUT)
 800a998:	2b07      	cmp	r3, #7
 800a99a:	d106      	bne.n	800a9aa <Out0_Process+0x2a>
    (*pProperty->Process_Status_OUT)();
 800a99c:	4b36      	ldr	r3, [pc, #216]	; (800aa78 <Out0_Process+0xf8>)
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	68db      	ldr	r3, [r3, #12]
 800a9a2:	4798      	blx	r3
 800a9a4:	682c      	ldr	r4, [r5, #0]
 800a9a6:	2308      	movs	r3, #8
 800a9a8:	e000      	b.n	800a9ac <Out0_Process+0x2c>
 800a9aa:	2308      	movs	r3, #8
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 800a9ac:	4a33      	ldr	r2, [pc, #204]	; (800aa7c <Out0_Process+0xfc>)
  pInformation->ControlState = ControlState;
 800a9ae:	7223      	strb	r3, [r4, #8]
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 800a9b0:	2000      	movs	r0, #0
 800a9b2:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
 800a9b6:	f000 fa7d 	bl	800aeb4 <SetEPRxCount>
  if (pInformation->ControlState == STALLED)
 800a9ba:	682b      	ldr	r3, [r5, #0]
 800a9bc:	7a18      	ldrb	r0, [r3, #8]
 800a9be:	2808      	cmp	r0, #8
 800a9c0:	d106      	bne.n	800a9d0 <Out0_Process+0x50>
    vSetEPRxStatus(EP_RX_STALL);
 800a9c2:	f44f 5480 	mov.w	r4, #4096	; 0x1000
    vSetEPTxStatus(EP_TX_STALL);
 800a9c6:	2210      	movs	r2, #16
    vSetEPRxStatus(EP_RX_STALL);
 800a9c8:	492d      	ldr	r1, [pc, #180]	; (800aa80 <Out0_Process+0x100>)
    vSetEPTxStatus(EP_TX_STALL);
 800a9ca:	4b2e      	ldr	r3, [pc, #184]	; (800aa84 <Out0_Process+0x104>)
    vSetEPRxStatus(EP_RX_STALL);
 800a9cc:	800c      	strh	r4, [r1, #0]
    vSetEPTxStatus(EP_TX_STALL);
 800a9ce:	801a      	strh	r2, [r3, #0]
  return Post0_Process();
 800a9d0:	f1a0 0009 	sub.w	r0, r0, #9
 800a9d4:	fab0 f080 	clz	r0, r0
 800a9d8:	0940      	lsrs	r0, r0, #5
}
 800a9da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (pEPinfo->CopyData && save_rLength)
 800a9dc:	69a3      	ldr	r3, [r4, #24]
  save_rLength = pEPinfo->Usb_rLength;
 800a9de:	8a22      	ldrh	r2, [r4, #16]
  if (pEPinfo->CopyData && save_rLength)
 800a9e0:	b1b3      	cbz	r3, 800aa10 <Out0_Process+0x90>
 800a9e2:	8aa6      	ldrh	r6, [r4, #20]
 800a9e4:	b352      	cbz	r2, 800aa3c <Out0_Process+0xbc>
    Buffer = (*pEPinfo->CopyData)(Length);
 800a9e6:	4296      	cmp	r6, r2
 800a9e8:	bf28      	it	cs
 800a9ea:	4616      	movcs	r6, r2
 800a9ec:	4630      	mov	r0, r6
 800a9ee:	4798      	blx	r3
    pEPinfo->Usb_rLength -= Length;
 800a9f0:	8a22      	ldrh	r2, [r4, #16]
    pEPinfo->Usb_rOffset += Length;
 800a9f2:	8a63      	ldrh	r3, [r4, #18]
    pEPinfo->Usb_rLength -= Length;
 800a9f4:	1b92      	subs	r2, r2, r6
    pEPinfo->Usb_rOffset += Length;
 800a9f6:	4433      	add	r3, r6
    Buffer = (*pEPinfo->CopyData)(Length);
 800a9f8:	4607      	mov	r7, r0
    pEPinfo->Usb_rLength -= Length;
 800a9fa:	8222      	strh	r2, [r4, #16]
    pEPinfo->Usb_rOffset += Length;
 800a9fc:	8263      	strh	r3, [r4, #18]
    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
 800a9fe:	2000      	movs	r0, #0
 800aa00:	f000 fa3c 	bl	800ae7c <GetEPRxAddr>
 800aa04:	4632      	mov	r2, r6
 800aa06:	4601      	mov	r1, r0
 800aa08:	4638      	mov	r0, r7
 800aa0a:	f000 f951 	bl	800acb0 <PMAToUserBufferCopy>
 800aa0e:	8a22      	ldrh	r2, [r4, #16]
  if (pEPinfo->Usb_rLength != 0)
 800aa10:	b1ca      	cbz	r2, 800aa46 <Out0_Process+0xc6>
    SetEPTxCount(ENDP0, 0);
 800aa12:	2100      	movs	r1, #0
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 800aa14:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800aa18:	4b19      	ldr	r3, [pc, #100]	; (800aa80 <Out0_Process+0x100>)
    SetEPTxCount(ENDP0, 0);
 800aa1a:	4608      	mov	r0, r1
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 800aa1c:	801a      	strh	r2, [r3, #0]
    SetEPTxCount(ENDP0, 0);
 800aa1e:	f000 fa3b 	bl	800ae98 <SetEPTxCount>
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 800aa22:	2230      	movs	r2, #48	; 0x30
 800aa24:	8a23      	ldrh	r3, [r4, #16]
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 800aa26:	8aa0      	ldrh	r0, [r4, #20]
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 800aa28:	4916      	ldr	r1, [pc, #88]	; (800aa84 <Out0_Process+0x104>)
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 800aa2a:	4298      	cmp	r0, r3
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 800aa2c:	800a      	strh	r2, [r1, #0]
 800aa2e:	682a      	ldr	r2, [r5, #0]
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 800aa30:	d91b      	bls.n	800aa6a <Out0_Process+0xea>
    if (pEPinfo->Usb_rLength > 0)
 800aa32:	b1e3      	cbz	r3, 800aa6e <Out0_Process+0xee>
      pInformation->ControlState = LAST_OUT_DATA;
 800aa34:	2305      	movs	r3, #5
 800aa36:	4614      	mov	r4, r2
 800aa38:	7213      	strb	r3, [r2, #8]
 800aa3a:	e7b7      	b.n	800a9ac <Out0_Process+0x2c>
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 800aa3c:	42b2      	cmp	r2, r6
 800aa3e:	d306      	bcc.n	800aa4e <Out0_Process+0xce>
    pInformation->ControlState = OUT_DATA;
 800aa40:	2303      	movs	r3, #3
 800aa42:	7223      	strb	r3, [r4, #8]
 800aa44:	e7b2      	b.n	800a9ac <Out0_Process+0x2c>
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 800aa46:	8aa3      	ldrh	r3, [r4, #20]
 800aa48:	682c      	ldr	r4, [r5, #0]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d0f8      	beq.n	800aa40 <Out0_Process+0xc0>
 800aa4e:	490d      	ldr	r1, [pc, #52]	; (800aa84 <Out0_Process+0x104>)
      pInformation->ControlState = WAIT_STATUS_IN;
 800aa50:	2306      	movs	r3, #6
      USB_StatusIn();
 800aa52:	2700      	movs	r7, #0
 800aa54:	2630      	movs	r6, #48	; 0x30
 800aa56:	4a0c      	ldr	r2, [pc, #48]	; (800aa88 <Out0_Process+0x108>)
      pInformation->ControlState = WAIT_STATUS_IN;
 800aa58:	7223      	strb	r3, [r4, #8]
      USB_StatusIn();
 800aa5a:	6810      	ldr	r0, [r2, #0]
 800aa5c:	4a0b      	ldr	r2, [pc, #44]	; (800aa8c <Out0_Process+0x10c>)
 800aa5e:	b280      	uxth	r0, r0
 800aa60:	4402      	add	r2, r0
 800aa62:	0052      	lsls	r2, r2, #1
 800aa64:	6017      	str	r7, [r2, #0]
 800aa66:	800e      	strh	r6, [r1, #0]
    ControlState = pInformation->ControlState; /* may be changed outside the function */
 800aa68:	e7a0      	b.n	800a9ac <Out0_Process+0x2c>
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 800aa6a:	4614      	mov	r4, r2
 800aa6c:	e7e8      	b.n	800aa40 <Out0_Process+0xc0>
    if (pEPinfo->Usb_rLength > 0)
 800aa6e:	4614      	mov	r4, r2
 800aa70:	e7ee      	b.n	800aa50 <Out0_Process+0xd0>
 800aa72:	bf00      	nop
 800aa74:	200017e0 	.word	0x200017e0
 800aa78:	200017b8 	.word	0x200017b8
 800aa7c:	20000080 	.word	0x20000080
 800aa80:	200017e6 	.word	0x200017e6
 800aa84:	200017e8 	.word	0x200017e8
 800aa88:	40005c50 	.word	0x40005c50
 800aa8c:	20003002 	.word	0x20003002

0800aa90 <SetDeviceAddress>:
{
 800aa90:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t nEP = Device_Table.Total_Endpoint;
 800aa92:	4b0c      	ldr	r3, [pc, #48]	; (800aac4 <SetDeviceAddress+0x34>)
 800aa94:	781d      	ldrb	r5, [r3, #0]
  for (i = 0; i < nEP; i++)
 800aa96:	b17d      	cbz	r5, 800aab8 <SetDeviceAddress+0x28>
 800aa98:	2200      	movs	r2, #0
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 800aa9a:	f640 770f 	movw	r7, #3855	; 0xf0f
 800aa9e:	f248 0680 	movw	r6, #32896	; 0x8080
  for (i = 0; i < nEP; i++)
 800aaa2:	4909      	ldr	r1, [pc, #36]	; (800aac8 <SetDeviceAddress+0x38>)
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 800aaa4:	680b      	ldr	r3, [r1, #0]
 800aaa6:	ea42 0406 	orr.w	r4, r2, r6
 800aaaa:	403b      	ands	r3, r7
  for (i = 0; i < nEP; i++)
 800aaac:	3201      	adds	r2, #1
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 800aaae:	4323      	orrs	r3, r4
  for (i = 0; i < nEP; i++)
 800aab0:	4295      	cmp	r5, r2
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 800aab2:	f841 3b04 	str.w	r3, [r1], #4
  for (i = 0; i < nEP; i++)
 800aab6:	d1f5      	bne.n	800aaa4 <SetDeviceAddress+0x14>
#endif  /* STM32F10X_CL */  
}
 800aab8:	bcf0      	pop	{r4, r5, r6, r7}
  _SetDADDR(Val | DADDR_EF); /* set device address and enable function */
 800aaba:	4b04      	ldr	r3, [pc, #16]	; (800aacc <SetDeviceAddress+0x3c>)
 800aabc:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 800aac0:	6018      	str	r0, [r3, #0]
}
 800aac2:	4770      	bx	lr
 800aac4:	200000b0 	.word	0x200000b0
 800aac8:	40005c00 	.word	0x40005c00
 800aacc:	40005c4c 	.word	0x40005c4c

0800aad0 <NOP_Process>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 800aad0:	4770      	bx	lr
 800aad2:	bf00      	nop

0800aad4 <USB_Init>:
* Return         : None.
*******************************************************************************/
void USB_Init(void)
{
  pInformation = &Device_Info;
  pInformation->ControlState = 2;
 800aad4:	2002      	movs	r0, #2
{
 800aad6:	b430      	push	{r4, r5}
  pInformation = &Device_Info;
 800aad8:	4a06      	ldr	r2, [pc, #24]	; (800aaf4 <USB_Init+0x20>)
 800aada:	4d07      	ldr	r5, [pc, #28]	; (800aaf8 <USB_Init+0x24>)
  pProperty = &Device_Property;
 800aadc:	4c07      	ldr	r4, [pc, #28]	; (800aafc <USB_Init+0x28>)
 800aade:	4b08      	ldr	r3, [pc, #32]	; (800ab00 <USB_Init+0x2c>)
  pInformation->ControlState = 2;
 800aae0:	7210      	strb	r0, [r2, #8]
  pUser_Standard_Requests = &User_Standard_Requests;
 800aae2:	4908      	ldr	r1, [pc, #32]	; (800ab04 <USB_Init+0x30>)
 800aae4:	4808      	ldr	r0, [pc, #32]	; (800ab08 <USB_Init+0x34>)
  pProperty = &Device_Property;
 800aae6:	6023      	str	r3, [r4, #0]
  pInformation = &Device_Info;
 800aae8:	602a      	str	r2, [r5, #0]
  /* Initialize devices one by one */
  pProperty->Init();
 800aaea:	681b      	ldr	r3, [r3, #0]
  pUser_Standard_Requests = &User_Standard_Requests;
 800aaec:	6008      	str	r0, [r1, #0]
}
 800aaee:	bc30      	pop	{r4, r5}
  pProperty->Init();
 800aaf0:	4718      	bx	r3
 800aaf2:	bf00      	nop
 800aaf4:	200017c0 	.word	0x200017c0
 800aaf8:	200017e0 	.word	0x200017e0
 800aafc:	200017b8 	.word	0x200017b8
 800ab00:	20000080 	.word	0x20000080
 800ab04:	200017dc 	.word	0x200017dc
 800ab08:	200000d4 	.word	0x200000d4

0800ab0c <CTR_LP>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
 800ab0c:	2300      	movs	r3, #0
{
 800ab0e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab12:	f8df 8174 	ldr.w	r8, [pc, #372]	; 800ac88 <CTR_LP+0x17c>
 800ab16:	b084      	sub	sp, #16
  /* stay in loop while pending ints */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 800ab18:	4d55      	ldr	r5, [pc, #340]	; (800ac70 <CTR_LP+0x164>)
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 800ab1a:	4c56      	ldr	r4, [pc, #344]	; (800ac74 <CTR_LP+0x168>)
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 800ab1c:	4e56      	ldr	r6, [pc, #344]	; (800ac78 <CTR_LP+0x16c>)
  __IO uint16_t wEPVal = 0;
 800ab1e:	f8ad 300e 	strh.w	r3, [sp, #14]
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 800ab22:	682b      	ldr	r3, [r5, #0]
	    SaveRState = _GetENDPOINT(ENDP0);
 800ab24:	4f55      	ldr	r7, [pc, #340]	; (800ac7c <CTR_LP+0x170>)
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 800ab26:	b29a      	uxth	r2, r3
 800ab28:	041b      	lsls	r3, r3, #16
	    SaveRState = _GetENDPOINT(ENDP0);
 800ab2a:	4955      	ldr	r1, [pc, #340]	; (800ac80 <CTR_LP+0x174>)
	    SaveTState = SaveRState & EPTX_STAT;
 800ab2c:	f8df 915c 	ldr.w	r9, [pc, #348]	; 800ac8c <CTR_LP+0x180>
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 800ab30:	f8a8 2000 	strh.w	r2, [r8]
 800ab34:	f140 808f 	bpl.w	800ac56 <CTR_LP+0x14a>
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 800ab38:	f8b8 3000 	ldrh.w	r3, [r8]
 800ab3c:	f003 030f 	and.w	r3, r3, #15
      wEPVal = _GetENDPOINT(EPindex);
 800ab40:	009a      	lsls	r2, r3, #2
 800ab42:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800ab46:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 800ab4a:	7023      	strb	r3, [r4, #0]
    if (EPindex == 0)
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d132      	bne.n	800abb6 <CTR_LP+0xaa>
	    _SetEPRxTxStatus(ENDP0,EP_RX_NAK,EP_TX_NAK);
 800ab50:	f64b 7abf 	movw	sl, #49087	; 0xbfbf
	    SaveRState = _GetENDPOINT(ENDP0);
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	b29b      	uxth	r3, r3
 800ab58:	800b      	strh	r3, [r1, #0]
	    SaveTState = SaveRState & EPTX_STAT;
 800ab5a:	880b      	ldrh	r3, [r1, #0]
 800ab5c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ab60:	f8a9 3000 	strh.w	r3, [r9]
	    SaveRState &=  EPRX_STAT;	
 800ab64:	880b      	ldrh	r3, [r1, #0]
 800ab66:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800ab6a:	800b      	strh	r3, [r1, #0]
	    _SetEPRxTxStatus(ENDP0,EP_RX_NAK,EP_TX_NAK);
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	ea03 030a 	and.w	r3, r3, sl
 800ab72:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ab76:	f083 0320 	eor.w	r3, r3, #32
 800ab7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab82:	603b      	str	r3, [r7, #0]
      if ((wIstr & ISTR_DIR) == 0)
 800ab84:	f8b8 3000 	ldrh.w	r3, [r8]
 800ab88:	06d8      	lsls	r0, r3, #27
 800ab8a:	d53a      	bpl.n	800ac02 <CTR_LP+0xf6>
        wEPVal = _GetENDPOINT(ENDP0);
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	b29b      	uxth	r3, r3
 800ab90:	f8ad 300e 	strh.w	r3, [sp, #14]
        if ((wEPVal &EP_SETUP) != 0)
 800ab94:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800ab98:	051a      	lsls	r2, r3, #20
 800ab9a:	d45f      	bmi.n	800ac5c <CTR_LP+0x150>
        else if ((wEPVal & EP_CTR_RX) != 0)
 800ab9c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800aba0:	041b      	lsls	r3, r3, #16
 800aba2:	d5be      	bpl.n	800ab22 <CTR_LP+0x16>
          _ClearEP_CTR_RX(ENDP0);
 800aba4:	f640 728f 	movw	r2, #3983	; 0xf8f
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	9101      	str	r1, [sp, #4]
 800abac:	4013      	ands	r3, r2
 800abae:	603b      	str	r3, [r7, #0]
          Out0_Process();
 800abb0:	f7ff fee6 	bl	800a980 <Out0_Process>
 800abb4:	e02d      	b.n	800ac12 <CTR_LP+0x106>
      wEPVal = _GetENDPOINT(EPindex);
 800abb6:	6811      	ldr	r1, [r2, #0]
        (*pEpInt_OUT[EPindex-1])();
 800abb8:	4832      	ldr	r0, [pc, #200]	; (800ac84 <CTR_LP+0x178>)
      wEPVal = _GetENDPOINT(EPindex);
 800abba:	b289      	uxth	r1, r1
 800abbc:	f8ad 100e 	strh.w	r1, [sp, #14]
      if ((wEPVal & EP_CTR_RX) != 0)
 800abc0:	f8bd 100e 	ldrh.w	r1, [sp, #14]
        (*pEpInt_OUT[EPindex-1])();
 800abc4:	3b01      	subs	r3, #1
      if ((wEPVal & EP_CTR_RX) != 0)
 800abc6:	0409      	lsls	r1, r1, #16
 800abc8:	d507      	bpl.n	800abda <CTR_LP+0xce>
        _ClearEP_CTR_RX(EPindex);
 800abca:	f640 778f 	movw	r7, #3983	; 0xf8f
 800abce:	6811      	ldr	r1, [r2, #0]
        (*pEpInt_OUT[EPindex-1])();
 800abd0:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
        _ClearEP_CTR_RX(EPindex);
 800abd4:	4039      	ands	r1, r7
 800abd6:	6011      	str	r1, [r2, #0]
        (*pEpInt_OUT[EPindex-1])();
 800abd8:	4780      	blx	r0
      if ((wEPVal & EP_CTR_TX) != 0)
 800abda:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800abde:	061a      	lsls	r2, r3, #24
 800abe0:	d59f      	bpl.n	800ab22 <CTR_LP+0x16>
        _ClearEP_CTR_TX(EPindex);
 800abe2:	f648 700f 	movw	r0, #36623	; 0x8f0f
 800abe6:	7822      	ldrb	r2, [r4, #0]
 800abe8:	0093      	lsls	r3, r2, #2
 800abea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800abee:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800abf2:	6819      	ldr	r1, [r3, #0]
        (*pEpInt_IN[EPindex-1])();
 800abf4:	3a01      	subs	r2, #1
        _ClearEP_CTR_TX(EPindex);
 800abf6:	4001      	ands	r1, r0
        (*pEpInt_IN[EPindex-1])();
 800abf8:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
        _ClearEP_CTR_TX(EPindex);
 800abfc:	6019      	str	r1, [r3, #0]
        (*pEpInt_IN[EPindex-1])();
 800abfe:	4790      	blx	r2
 800ac00:	e78f      	b.n	800ab22 <CTR_LP+0x16>
        _ClearEP_CTR_TX(ENDP0);
 800ac02:	f648 720f 	movw	r2, #36623	; 0x8f0f
 800ac06:	683b      	ldr	r3, [r7, #0]
 800ac08:	9101      	str	r1, [sp, #4]
 800ac0a:	4013      	ands	r3, r2
 800ac0c:	603b      	str	r3, [r7, #0]
        In0_Process();
 800ac0e:	f7ff fe51 	bl	800a8b4 <In0_Process>
		     _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
 800ac12:	9901      	ldr	r1, [sp, #4]
 800ac14:	683b      	ldr	r3, [r7, #0]
 800ac16:	880a      	ldrh	r2, [r1, #0]
 800ac18:	ea03 0a0a 	and.w	sl, r3, sl
 800ac1c:	880b      	ldrh	r3, [r1, #0]
 800ac1e:	04d6      	lsls	r6, r2, #19
 800ac20:	bf48      	it	mi
 800ac22:	f48a 5a80 	eormi.w	sl, sl, #4096	; 0x1000
 800ac26:	049d      	lsls	r5, r3, #18
 800ac28:	f8b9 3000 	ldrh.w	r3, [r9]
 800ac2c:	bf48      	it	mi
 800ac2e:	f48a 5a00 	eormi.w	sl, sl, #8192	; 0x2000
 800ac32:	06dc      	lsls	r4, r3, #27
 800ac34:	f8b9 3000 	ldrh.w	r3, [r9]
 800ac38:	bf48      	it	mi
 800ac3a:	f08a 0a10 	eormi.w	sl, sl, #16
 800ac3e:	0698      	lsls	r0, r3, #26
 800ac40:	bf48      	it	mi
 800ac42:	f08a 0a20 	eormi.w	sl, sl, #32
 800ac46:	f44a 4a00 	orr.w	sl, sl, #32768	; 0x8000
 800ac4a:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 800ac4e:	4a0b      	ldr	r2, [pc, #44]	; (800ac7c <CTR_LP+0x170>)
 800ac50:	fa1f f38a 	uxth.w	r3, sl
 800ac54:	6013      	str	r3, [r2, #0]
      } /* if((wEPVal & EP_CTR_TX) != 0) */

    }/* if(EPindex == 0) else */

  }/* while(...) */
}
 800ac56:	b004      	add	sp, #16
 800ac58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          _ClearEP_CTR_RX(ENDP0); /* SETUP bit kept frozen while CTR_RX = 1 */
 800ac5c:	f640 728f 	movw	r2, #3983	; 0xf8f
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	9101      	str	r1, [sp, #4]
 800ac64:	4013      	ands	r3, r2
 800ac66:	603b      	str	r3, [r7, #0]
          Setup0_Process();
 800ac68:	f7ff fc30 	bl	800a4cc <Setup0_Process>
 800ac6c:	e7d1      	b.n	800ac12 <CTR_LP+0x106>
 800ac6e:	bf00      	nop
 800ac70:	40005c44 	.word	0x40005c44
 800ac74:	200017bc 	.word	0x200017bc
 800ac78:	20000038 	.word	0x20000038
 800ac7c:	40005c00 	.word	0x40005c00
 800ac80:	200017e6 	.word	0x200017e6
 800ac84:	20000054 	.word	0x20000054
 800ac88:	2000182c 	.word	0x2000182c
 800ac8c:	200017e8 	.word	0x200017e8

0800ac90 <UserToPMABufferCopy>:
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
 800ac90:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 800ac94:	3201      	adds	r2, #1
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
 800ac96:	f501 5140 	add.w	r1, r1, #12288	; 0x3000
  for (i = n; i != 0; i--)
 800ac9a:	1052      	asrs	r2, r2, #1
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
 800ac9c:	ea4f 0141 	mov.w	r1, r1, lsl #1
  for (i = n; i != 0; i--)
 800aca0:	d005      	beq.n	800acae <UserToPMABufferCopy+0x1e>
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    *pdwVal++ = temp1 | (uint16_t) * pbUsrBuf << 8;
 800aca2:	f830 3b02 	ldrh.w	r3, [r0], #2
  for (i = n; i != 0; i--)
 800aca6:	3a01      	subs	r2, #1
    *pdwVal++ = temp1 | (uint16_t) * pbUsrBuf << 8;
 800aca8:	f821 3b04 	strh.w	r3, [r1], #4
  for (i = n; i != 0; i--)
 800acac:	d1f9      	bne.n	800aca2 <UserToPMABufferCopy+0x12>
    pdwVal++;
    pbUsrBuf++;
  }
}
 800acae:	4770      	bx	lr

0800acb0 <PMAToUserBufferCopy>:
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 800acb0:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
 800acb4:	3201      	adds	r2, #1
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 800acb6:	f501 5140 	add.w	r1, r1, #12288	; 0x3000
  for (i = n; i != 0; i--)
 800acba:	1052      	asrs	r2, r2, #1
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 800acbc:	ea4f 0141 	mov.w	r1, r1, lsl #1
  for (i = n; i != 0; i--)
 800acc0:	d006      	beq.n	800acd0 <PMAToUserBufferCopy+0x20>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 800acc2:	680b      	ldr	r3, [r1, #0]
  for (i = n; i != 0; i--)
 800acc4:	3a01      	subs	r2, #1
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 800acc6:	f101 0104 	add.w	r1, r1, #4
 800acca:	f820 3b02 	strh.w	r3, [r0], #2
  for (i = n; i != 0; i--)
 800acce:	d1f8      	bne.n	800acc2 <PMAToUserBufferCopy+0x12>
    pbUsrBuf++;
  }
}
 800acd0:	4770      	bx	lr
 800acd2:	bf00      	nop

0800acd4 <SetBTABLE>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetBTABLE(uint16_t wRegValue)
{
  _SetBTABLE(wRegValue);
 800acd4:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 800acd8:	4a01      	ldr	r2, [pc, #4]	; (800ace0 <SetBTABLE+0xc>)
 800acda:	4003      	ands	r3, r0
 800acdc:	6013      	str	r3, [r2, #0]
}
 800acde:	4770      	bx	lr
 800ace0:	40005c50 	.word	0x40005c50

0800ace4 <SetEPType>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPType(uint8_t bEpNum, uint16_t wType)
{
  _SetEPType(bEpNum, wType);
 800ace4:	0080      	lsls	r0, r0, #2
 800ace6:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800acea:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 800acee:	6803      	ldr	r3, [r0, #0]
 800acf0:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800acf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800acf8:	4319      	orrs	r1, r3
 800acfa:	b289      	uxth	r1, r1
 800acfc:	6001      	str	r1, [r0, #0]
}
 800acfe:	4770      	bx	lr

0800ad00 <SetEPTxStatus>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPTxStatus(bEpNum, wState);
 800ad00:	0080      	lsls	r0, r0, #2
 800ad02:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800ad06:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 800ad0a:	6803      	ldr	r3, [r0, #0]
 800ad0c:	06ca      	lsls	r2, r1, #27
 800ad0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ad12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad16:	b29b      	uxth	r3, r3
 800ad18:	bf48      	it	mi
 800ad1a:	f083 0310 	eormi.w	r3, r3, #16
 800ad1e:	068a      	lsls	r2, r1, #26
 800ad20:	bf48      	it	mi
 800ad22:	f083 0320 	eormi.w	r3, r3, #32
 800ad26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad2e:	6003      	str	r3, [r0, #0]
}
 800ad30:	4770      	bx	lr
 800ad32:	bf00      	nop

0800ad34 <SetEPRxStatus>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPRxStatus(bEpNum, wState);
 800ad34:	0080      	lsls	r0, r0, #2
 800ad36:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800ad3a:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 800ad3e:	6803      	ldr	r3, [r0, #0]
 800ad40:	04ca      	lsls	r2, r1, #19
 800ad42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ad46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad4a:	b29b      	uxth	r3, r3
 800ad4c:	bf48      	it	mi
 800ad4e:	f483 5380 	eormi.w	r3, r3, #4096	; 0x1000
 800ad52:	048a      	lsls	r2, r1, #18
 800ad54:	bf48      	it	mi
 800ad56:	f483 5300 	eormi.w	r3, r3, #8192	; 0x2000
 800ad5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad62:	6003      	str	r3, [r0, #0]
}
 800ad64:	4770      	bx	lr
 800ad66:	bf00      	nop

0800ad68 <SetEPTxValid>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxValid(uint8_t bEpNum)
{
  _SetEPTxStatus(bEpNum, EP_TX_VALID);
 800ad68:	0080      	lsls	r0, r0, #2
 800ad6a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800ad6e:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 800ad72:	6803      	ldr	r3, [r0, #0]
 800ad74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ad78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad7c:	b29b      	uxth	r3, r3
 800ad7e:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 800ad82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad8a:	6003      	str	r3, [r0, #0]
}
 800ad8c:	4770      	bx	lr
 800ad8e:	bf00      	nop

0800ad90 <SetEPRxValid>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxValid(uint8_t bEpNum)
{
  _SetEPRxStatus(bEpNum, EP_RX_VALID);
 800ad90:	0080      	lsls	r0, r0, #2
 800ad92:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800ad96:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 800ad9a:	6803      	ldr	r3, [r0, #0]
 800ad9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ada0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ada4:	b29b      	uxth	r3, r3
 800ada6:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800adaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800adae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adb2:	6003      	str	r3, [r0, #0]
}
 800adb4:	4770      	bx	lr
 800adb6:	bf00      	nop

0800adb8 <Clear_Status_Out>:
 800adb8:	f640 630f 	movw	r3, #3599	; 0xe0f
 800adbc:	0080      	lsls	r0, r0, #2
 800adbe:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800adc2:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 800adc6:	6802      	ldr	r2, [r0, #0]
 800adc8:	4013      	ands	r3, r2
 800adca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800adce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800add2:	6003      	str	r3, [r0, #0]
 800add4:	4770      	bx	lr
 800add6:	bf00      	nop

0800add8 <ClearDTOG_RX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_RX(uint8_t bEpNum)
{
  _ClearDTOG_RX(bEpNum);
 800add8:	0080      	lsls	r0, r0, #2
 800adda:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800adde:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 800ade2:	6803      	ldr	r3, [r0, #0]
 800ade4:	045b      	lsls	r3, r3, #17
 800ade6:	d508      	bpl.n	800adfa <ClearDTOG_RX+0x22>
 800ade8:	f640 720f 	movw	r2, #3855	; 0xf0f
 800adec:	6803      	ldr	r3, [r0, #0]
 800adee:	4013      	ands	r3, r2
 800adf0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800adf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adf8:	6003      	str	r3, [r0, #0]
}
 800adfa:	4770      	bx	lr

0800adfc <ClearDTOG_TX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_TX(uint8_t bEpNum)
{
  _ClearDTOG_TX(bEpNum);
 800adfc:	0080      	lsls	r0, r0, #2
 800adfe:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800ae02:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 800ae06:	6803      	ldr	r3, [r0, #0]
 800ae08:	065b      	lsls	r3, r3, #25
 800ae0a:	d508      	bpl.n	800ae1e <ClearDTOG_TX+0x22>
 800ae0c:	f640 720f 	movw	r2, #3855	; 0xf0f
 800ae10:	6803      	ldr	r3, [r0, #0]
 800ae12:	4013      	ands	r3, r2
 800ae14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae18:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ae1c:	6003      	str	r3, [r0, #0]
}
 800ae1e:	4770      	bx	lr

0800ae20 <SetEPTxAddr>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPTxAddr(bEpNum, wAddr);
 800ae20:	4b06      	ldr	r3, [pc, #24]	; (800ae3c <SetEPTxAddr+0x1c>)
 800ae22:	0849      	lsrs	r1, r1, #1
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	0049      	lsls	r1, r1, #1
 800ae28:	b29b      	uxth	r3, r3
 800ae2a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800ae2e:	f100 5000 	add.w	r0, r0, #536870912	; 0x20000000
 800ae32:	f500 5040 	add.w	r0, r0, #12288	; 0x3000
 800ae36:	0040      	lsls	r0, r0, #1
 800ae38:	6001      	str	r1, [r0, #0]
}
 800ae3a:	4770      	bx	lr
 800ae3c:	40005c50 	.word	0x40005c50

0800ae40 <SetEPRxAddr>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPRxAddr(bEpNum, wAddr);
 800ae40:	4a05      	ldr	r2, [pc, #20]	; (800ae58 <SetEPRxAddr+0x18>)
 800ae42:	4b06      	ldr	r3, [pc, #24]	; (800ae5c <SetEPRxAddr+0x1c>)
 800ae44:	6812      	ldr	r2, [r2, #0]
 800ae46:	0849      	lsrs	r1, r1, #1
 800ae48:	b292      	uxth	r2, r2
 800ae4a:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800ae4e:	4413      	add	r3, r2
 800ae50:	0049      	lsls	r1, r1, #1
 800ae52:	005b      	lsls	r3, r3, #1
 800ae54:	6019      	str	r1, [r3, #0]
}
 800ae56:	4770      	bx	lr
 800ae58:	40005c50 	.word	0x40005c50
 800ae5c:	20003004 	.word	0x20003004

0800ae60 <GetEPTxAddr>:
* Output         : None.
* Return         : Rx buffer address. 
*******************************************************************************/
uint16_t GetEPTxAddr(uint8_t bEpNum)
{
  return(_GetEPTxAddr(bEpNum));
 800ae60:	4b05      	ldr	r3, [pc, #20]	; (800ae78 <GetEPTxAddr+0x18>)
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	b29b      	uxth	r3, r3
 800ae66:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800ae6a:	f100 5000 	add.w	r0, r0, #536870912	; 0x20000000
 800ae6e:	f500 5040 	add.w	r0, r0, #12288	; 0x3000
 800ae72:	0040      	lsls	r0, r0, #1
}
 800ae74:	8800      	ldrh	r0, [r0, #0]
 800ae76:	4770      	bx	lr
 800ae78:	40005c50 	.word	0x40005c50

0800ae7c <GetEPRxAddr>:
* Output         : None.
* Return         : Rx buffer address.
*******************************************************************************/
uint16_t GetEPRxAddr(uint8_t bEpNum)
{
  return(_GetEPRxAddr(bEpNum));
 800ae7c:	4a04      	ldr	r2, [pc, #16]	; (800ae90 <GetEPRxAddr+0x14>)
 800ae7e:	4b05      	ldr	r3, [pc, #20]	; (800ae94 <GetEPRxAddr+0x18>)
 800ae80:	6812      	ldr	r2, [r2, #0]
 800ae82:	b292      	uxth	r2, r2
 800ae84:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800ae88:	4403      	add	r3, r0
 800ae8a:	005b      	lsls	r3, r3, #1
}
 800ae8c:	8818      	ldrh	r0, [r3, #0]
 800ae8e:	4770      	bx	lr
 800ae90:	40005c50 	.word	0x40005c50
 800ae94:	20003004 	.word	0x20003004

0800ae98 <SetEPTxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPTxCount(bEpNum, wCount);
 800ae98:	4a04      	ldr	r2, [pc, #16]	; (800aeac <SetEPTxCount+0x14>)
 800ae9a:	4b05      	ldr	r3, [pc, #20]	; (800aeb0 <SetEPTxCount+0x18>)
 800ae9c:	6812      	ldr	r2, [r2, #0]
 800ae9e:	b292      	uxth	r2, r2
 800aea0:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800aea4:	4403      	add	r3, r0
 800aea6:	005b      	lsls	r3, r3, #1
 800aea8:	6019      	str	r1, [r3, #0]
}
 800aeaa:	4770      	bx	lr
 800aeac:	40005c50 	.word	0x40005c50
 800aeb0:	20003002 	.word	0x20003002

0800aeb4 <SetEPRxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPRxCount(bEpNum, wCount);
 800aeb4:	4a0e      	ldr	r2, [pc, #56]	; (800aef0 <SetEPRxCount+0x3c>)
 800aeb6:	4b0f      	ldr	r3, [pc, #60]	; (800aef4 <SetEPRxCount+0x40>)
 800aeb8:	6812      	ldr	r2, [r2, #0]
 800aeba:	293e      	cmp	r1, #62	; 0x3e
 800aebc:	b292      	uxth	r2, r2
 800aebe:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800aec2:	4403      	add	r3, r0
 800aec4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800aec8:	d90a      	bls.n	800aee0 <SetEPRxCount+0x2c>
 800aeca:	094a      	lsrs	r2, r1, #5
 800aecc:	06c8      	lsls	r0, r1, #27
 800aece:	bf04      	itt	eq
 800aed0:	f102 32ff 	addeq.w	r2, r2, #4294967295
 800aed4:	b292      	uxtheq	r2, r2
 800aed6:	0292      	lsls	r2, r2, #10
 800aed8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800aedc:	601a      	str	r2, [r3, #0]
 800aede:	4770      	bx	lr
 800aee0:	084a      	lsrs	r2, r1, #1
 800aee2:	07c9      	lsls	r1, r1, #31
 800aee4:	bf48      	it	mi
 800aee6:	3201      	addmi	r2, #1
 800aee8:	0292      	lsls	r2, r2, #10
 800aeea:	601a      	str	r2, [r3, #0]
}
 800aeec:	4770      	bx	lr
 800aeee:	bf00      	nop
 800aef0:	40005c50 	.word	0x40005c50
 800aef4:	20003006 	.word	0x20003006

0800aef8 <GetEPRxCount>:
* Output         : None.
* Return         : Rx count value.
*******************************************************************************/
uint16_t GetEPRxCount(uint8_t bEpNum)
{
  return(_GetEPRxCount(bEpNum));
 800aef8:	4a05      	ldr	r2, [pc, #20]	; (800af10 <GetEPRxCount+0x18>)
 800aefa:	4b06      	ldr	r3, [pc, #24]	; (800af14 <GetEPRxCount+0x1c>)
 800aefc:	6812      	ldr	r2, [r2, #0]
 800aefe:	b292      	uxth	r2, r2
 800af00:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800af04:	4403      	add	r3, r0
 800af06:	005b      	lsls	r3, r3, #1
 800af08:	6818      	ldr	r0, [r3, #0]
}
 800af0a:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800af0e:	4770      	bx	lr
 800af10:	40005c50 	.word	0x40005c50
 800af14:	20003006 	.word	0x20003006

0800af18 <ByteSwap>:
uint16_t ByteSwap(uint16_t wSwW)
{
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
 800af18:	b2c3      	uxtb	r3, r0
 800af1a:	0a00      	lsrs	r0, r0, #8
  return(wRet);
}
 800af1c:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800af20:	4770      	bx	lr
 800af22:	bf00      	nop

0800af24 <USB_SIL_Init>:
{
#ifndef STM32F10X_CL
  
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
 800af24:	2000      	movs	r0, #0
  wInterrupt_Mask = IMR_MSK;
 800af26:	f44f 4306 	mov.w	r3, #34304	; 0x8600
{
 800af2a:	b410      	push	{r4}
  wInterrupt_Mask = IMR_MSK;
 800af2c:	4903      	ldr	r1, [pc, #12]	; (800af3c <USB_SIL_Init+0x18>)
  _SetISTR(0);
 800af2e:	4c04      	ldr	r4, [pc, #16]	; (800af40 <USB_SIL_Init+0x1c>)
  /* set interrupts mask */
  _SetCNTR(wInterrupt_Mask);
 800af30:	4a04      	ldr	r2, [pc, #16]	; (800af44 <USB_SIL_Init+0x20>)
  _SetISTR(0);
 800af32:	6020      	str	r0, [r4, #0]
  wInterrupt_Mask = IMR_MSK;
 800af34:	800b      	strh	r3, [r1, #0]
  OTG_DEV_Init();
  
#endif /* STM32F10X_CL */

  return 0;
}
 800af36:	bc10      	pop	{r4}
  _SetCNTR(wInterrupt_Mask);
 800af38:	6013      	str	r3, [r2, #0]
}
 800af3a:	4770      	bx	lr
 800af3c:	200017e4 	.word	0x200017e4
 800af40:	40005c44 	.word	0x40005c44
 800af44:	40005c40 	.word	0x40005c40

0800af48 <USB_SIL_Read>:
*                     received data buffer.
* Output         : None.
* Return         : Number of received data (in Bytes).
*******************************************************************************/
uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
{
 800af48:	b570      	push	{r4, r5, r6, lr}
  uint32_t DataLength = 0;

#ifndef STM32F10X_CL

  /* Get the number of received data on the selected Endpoint */
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 800af4a:	f000 057f 	and.w	r5, r0, #127	; 0x7f
 800af4e:	4628      	mov	r0, r5
{
 800af50:	460e      	mov	r6, r1
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 800af52:	f7ff ffd1 	bl	800aef8 <GetEPRxCount>
 800af56:	4604      	mov	r4, r0
  
  /* Use the memory interface function to write to the selected endpoint */
  PMAToUserBufferCopy(pBufferPointer, GetEPRxAddr(bEpAddr & 0x7F), DataLength);
 800af58:	4628      	mov	r0, r5
 800af5a:	f7ff ff8f 	bl	800ae7c <GetEPRxAddr>
 800af5e:	4622      	mov	r2, r4
 800af60:	4601      	mov	r1, r0
 800af62:	4630      	mov	r0, r6
 800af64:	f7ff fea4 	bl	800acb0 <PMAToUserBufferCopy>
  
#endif /* STM32F10X_CL */

  /* Return the number of received data */
  return DataLength;
}
 800af68:	4620      	mov	r0, r4
 800af6a:	bd70      	pop	{r4, r5, r6, pc}

0800af6c <Set_USBClock>:

/*******************************************************************************
 * Description    : Configures USB Clock input (48MHz)
 *******************************************************************************/
void Set_USBClock(void)
{
 800af6c:	b508      	push	{r3, lr}
	/* Select USBCLK source */
	RCC_USBCLKConfig(RCC_USBCLKSource_PLLCLK_1Div5);
 800af6e:	2000      	movs	r0, #0
 800af70:	f7f6 fc0a 	bl	8001788 <RCC_USBCLKConfig>

	/* Enable the USB clock */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USB, ENABLE);
}
 800af74:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USB, ENABLE);
 800af78:	2101      	movs	r1, #1
 800af7a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800af7e:	f7f6 bc67 	b.w	8001850 <RCC_APB1PeriphClockCmd>
 800af82:	bf00      	nop

0800af84 <USB_Interrupts_Config>:

/*******************************************************************************
 * Description    : Configures the USB interrupts
 *******************************************************************************/
void USB_Interrupts_Config(void)
{
 800af84:	b500      	push	{lr}
	NVIC_InitTypeDef NVIC_InitStructure;

	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
 800af86:	f44f 60c0 	mov.w	r0, #1536	; 0x600
{
 800af8a:	b083      	sub	sp, #12
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
 800af8c:	f7f6 f8b6 	bl	80010fc <NVIC_PriorityGroupConfig>

	NVIC_InitStructure.NVIC_IRQChannel = USB_LP_CAN1_RX0_IRQn;
 800af90:	4b04      	ldr	r3, [pc, #16]	; (800afa4 <USB_Interrupts_Config+0x20>)
 800af92:	a802      	add	r0, sp, #8
 800af94:	f840 3d04 	str.w	r3, [r0, #-4]!
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
 800af98:	f7f6 f8ba 	bl	8001110 <NVIC_Init>
}
 800af9c:	b003      	add	sp, #12
 800af9e:	f85d fb04 	ldr.w	pc, [sp], #4
 800afa2:	bf00      	nop
 800afa4:	01000114 	.word	0x01000114

0800afa8 <USB_Cable_Config>:
/*******************************************************************************
 * Description    : Software Connection/Disconnection of USB Cable
 *******************************************************************************/
void USB_Cable_Config(FunctionalState NewState)
{
}
 800afa8:	4770      	bx	lr
 800afaa:	bf00      	nop

0800afac <Get_SerialNum>:
 *******************************************************************************/
void Get_SerialNum(void)
{
	uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

	Device_Serial0 = *(__IO uint32_t*) (0x1FFFF7E8);
 800afac:	4a43      	ldr	r2, [pc, #268]	; (800b0bc <Get_SerialNum+0x110>)
	Device_Serial1 = *(__IO uint32_t*) (0x1FFFF7EC);
 800afae:	4944      	ldr	r1, [pc, #272]	; (800b0c0 <Get_SerialNum+0x114>)
	Device_Serial2 = *(__IO uint32_t*) (0x1FFFF7F0);
 800afb0:	4b44      	ldr	r3, [pc, #272]	; (800b0c4 <Get_SerialNum+0x118>)
	Device_Serial0 = *(__IO uint32_t*) (0x1FFFF7E8);
 800afb2:	6812      	ldr	r2, [r2, #0]
	Device_Serial1 = *(__IO uint32_t*) (0x1FFFF7EC);
 800afb4:	6809      	ldr	r1, [r1, #0]
	Device_Serial2 = *(__IO uint32_t*) (0x1FFFF7F0);
 800afb6:	681b      	ldr	r3, [r3, #0]

	Device_Serial0 += Device_Serial2;

	if (Device_Serial0 != 0)
 800afb8:	18d2      	adds	r2, r2, r3
 800afba:	d100      	bne.n	800afbe <Get_SerialNum+0x12>
 800afbc:	4770      	bx	lr
{
 800afbe:	b410      	push	{r4}
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
		}

		value = value << 4;

		pbuf[2 * idx + 1] = 0;
 800afc0:	2400      	movs	r4, #0
		if (((value >> 28)) < 0xA)
 800afc2:	0f13      	lsrs	r3, r2, #28
 800afc4:	b2d8      	uxtb	r0, r3
 800afc6:	2b09      	cmp	r3, #9
			pbuf[2 * idx] = (value >> 28) + '0';
 800afc8:	4b3f      	ldr	r3, [pc, #252]	; (800b0c8 <Get_SerialNum+0x11c>)
 800afca:	bf94      	ite	ls
 800afcc:	3030      	addls	r0, #48	; 0x30
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800afce:	3037      	addhi	r0, #55	; 0x37
 800afd0:	7098      	strb	r0, [r3, #2]
		if (((value >> 28)) < 0xA)
 800afd2:	f3c2 6003 	ubfx	r0, r2, #24, #4
 800afd6:	2809      	cmp	r0, #9
		pbuf[2 * idx + 1] = 0;
 800afd8:	70dc      	strb	r4, [r3, #3]
 800afda:	b2c4      	uxtb	r4, r0
			pbuf[2 * idx] = (value >> 28) + '0';
 800afdc:	bf94      	ite	ls
 800afde:	3430      	addls	r4, #48	; 0x30
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800afe0:	3437      	addhi	r4, #55	; 0x37
 800afe2:	711c      	strb	r4, [r3, #4]
		pbuf[2 * idx + 1] = 0;
 800afe4:	2400      	movs	r4, #0
		if (((value >> 28)) < 0xA)
 800afe6:	f3c2 5003 	ubfx	r0, r2, #20, #4
 800afea:	2809      	cmp	r0, #9
		pbuf[2 * idx + 1] = 0;
 800afec:	715c      	strb	r4, [r3, #5]
 800afee:	b2c4      	uxtb	r4, r0
			pbuf[2 * idx] = (value >> 28) + '0';
 800aff0:	bf94      	ite	ls
 800aff2:	3430      	addls	r4, #48	; 0x30
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800aff4:	3437      	addhi	r4, #55	; 0x37
 800aff6:	719c      	strb	r4, [r3, #6]
		pbuf[2 * idx + 1] = 0;
 800aff8:	2400      	movs	r4, #0
		if (((value >> 28)) < 0xA)
 800affa:	f3c2 4003 	ubfx	r0, r2, #16, #4
 800affe:	2809      	cmp	r0, #9
		pbuf[2 * idx + 1] = 0;
 800b000:	71dc      	strb	r4, [r3, #7]
 800b002:	b2c4      	uxtb	r4, r0
			pbuf[2 * idx] = (value >> 28) + '0';
 800b004:	bf94      	ite	ls
 800b006:	3430      	addls	r4, #48	; 0x30
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b008:	3437      	addhi	r4, #55	; 0x37
 800b00a:	721c      	strb	r4, [r3, #8]
		pbuf[2 * idx + 1] = 0;
 800b00c:	2400      	movs	r4, #0
		if (((value >> 28)) < 0xA)
 800b00e:	f3c2 3003 	ubfx	r0, r2, #12, #4
 800b012:	2809      	cmp	r0, #9
		pbuf[2 * idx + 1] = 0;
 800b014:	725c      	strb	r4, [r3, #9]
 800b016:	b2c4      	uxtb	r4, r0
			pbuf[2 * idx] = (value >> 28) + '0';
 800b018:	bf94      	ite	ls
 800b01a:	3430      	addls	r4, #48	; 0x30
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b01c:	3437      	addhi	r4, #55	; 0x37
 800b01e:	729c      	strb	r4, [r3, #10]
		pbuf[2 * idx + 1] = 0;
 800b020:	2400      	movs	r4, #0
		if (((value >> 28)) < 0xA)
 800b022:	f3c2 2003 	ubfx	r0, r2, #8, #4
 800b026:	2809      	cmp	r0, #9
		pbuf[2 * idx + 1] = 0;
 800b028:	72dc      	strb	r4, [r3, #11]
 800b02a:	b2c4      	uxtb	r4, r0
			pbuf[2 * idx] = (value >> 28) + '0';
 800b02c:	bf94      	ite	ls
 800b02e:	3430      	addls	r4, #48	; 0x30
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b030:	3437      	addhi	r4, #55	; 0x37
 800b032:	731c      	strb	r4, [r3, #12]
		pbuf[2 * idx + 1] = 0;
 800b034:	2400      	movs	r4, #0
		if (((value >> 28)) < 0xA)
 800b036:	f3c2 1003 	ubfx	r0, r2, #4, #4
 800b03a:	2809      	cmp	r0, #9
 800b03c:	f002 020f 	and.w	r2, r2, #15
		pbuf[2 * idx + 1] = 0;
 800b040:	735c      	strb	r4, [r3, #13]
 800b042:	b2c4      	uxtb	r4, r0
			pbuf[2 * idx] = (value >> 28) + '0';
 800b044:	bf98      	it	ls
 800b046:	3430      	addls	r4, #48	; 0x30
 800b048:	b2d0      	uxtb	r0, r2
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b04a:	bf88      	it	hi
 800b04c:	3437      	addhi	r4, #55	; 0x37
		if (((value >> 28)) < 0xA)
 800b04e:	2a09      	cmp	r2, #9
			pbuf[2 * idx] = (value >> 28) + '0';
 800b050:	bf94      	ite	ls
 800b052:	3030      	addls	r0, #48	; 0x30
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b054:	3037      	addhi	r0, #55	; 0x37
 800b056:	7418      	strb	r0, [r3, #16]
		pbuf[2 * idx + 1] = 0;
 800b058:	2000      	movs	r0, #0
		if (((value >> 28)) < 0xA)
 800b05a:	0f0a      	lsrs	r2, r1, #28
 800b05c:	2a09      	cmp	r2, #9
		pbuf[2 * idx + 1] = 0;
 800b05e:	7458      	strb	r0, [r3, #17]
 800b060:	b2d0      	uxtb	r0, r2
			pbuf[2 * idx] = (value >> 28) + '0';
 800b062:	bf94      	ite	ls
 800b064:	3030      	addls	r0, #48	; 0x30
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b066:	3037      	addhi	r0, #55	; 0x37
 800b068:	7498      	strb	r0, [r3, #18]
		pbuf[2 * idx + 1] = 0;
 800b06a:	2000      	movs	r0, #0
		if (((value >> 28)) < 0xA)
 800b06c:	f3c1 6203 	ubfx	r2, r1, #24, #4
 800b070:	2a09      	cmp	r2, #9
		pbuf[2 * idx + 1] = 0;
 800b072:	74d8      	strb	r0, [r3, #19]
 800b074:	b2d0      	uxtb	r0, r2
			pbuf[2 * idx] = (value >> 28) + '0';
 800b076:	bf94      	ite	ls
 800b078:	3030      	addls	r0, #48	; 0x30
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b07a:	3037      	addhi	r0, #55	; 0x37
 800b07c:	7518      	strb	r0, [r3, #20]
		pbuf[2 * idx + 1] = 0;
 800b07e:	2000      	movs	r0, #0
		if (((value >> 28)) < 0xA)
 800b080:	f3c1 5203 	ubfx	r2, r1, #20, #4
 800b084:	2a09      	cmp	r2, #9
		pbuf[2 * idx + 1] = 0;
 800b086:	7558      	strb	r0, [r3, #21]
 800b088:	b2d0      	uxtb	r0, r2
			pbuf[2 * idx] = (value >> 28) + '0';
 800b08a:	bf94      	ite	ls
 800b08c:	3030      	addls	r0, #48	; 0x30
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b08e:	3037      	addhi	r0, #55	; 0x37
		if (((value >> 28)) < 0xA)
 800b090:	f3c1 4203 	ubfx	r2, r1, #16, #4
 800b094:	b2d1      	uxtb	r1, r2
 800b096:	2a09      	cmp	r2, #9
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b098:	739c      	strb	r4, [r3, #14]
 800b09a:	7598      	strb	r0, [r3, #22]
		pbuf[2 * idx + 1] = 0;
 800b09c:	f04f 0400 	mov.w	r4, #0
 800b0a0:	f04f 0000 	mov.w	r0, #0
 800b0a4:	f04f 0200 	mov.w	r2, #0
			pbuf[2 * idx] = (value >> 28) + '0';
 800b0a8:	bf94      	ite	ls
 800b0aa:	3130      	addls	r1, #48	; 0x30
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b0ac:	3137      	addhi	r1, #55	; 0x37
		pbuf[2 * idx + 1] = 0;
 800b0ae:	73dc      	strb	r4, [r3, #15]
 800b0b0:	75d8      	strb	r0, [r3, #23]
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b0b2:	7619      	strb	r1, [r3, #24]
		pbuf[2 * idx + 1] = 0;
 800b0b4:	765a      	strb	r2, [r3, #25]
}
 800b0b6:	bc10      	pop	{r4}
 800b0b8:	4770      	bx	lr
 800b0ba:	bf00      	nop
 800b0bc:	1ffff7e8 	.word	0x1ffff7e8
 800b0c0:	1ffff7ec 	.word	0x1ffff7ec
 800b0c4:	1ffff7f0 	.word	0x1ffff7f0
 800b0c8:	2000001c 	.word	0x2000001c

0800b0cc <EP3_OUT_Callback>:
#ifdef USB_CHANGED_DEBUG
volatile uint8_t txUsbLock = 0;
#endif

void EP3_OUT_Callback(void)
{
 800b0cc:	b510      	push	{r4, lr}
	uint16_t USB_Rx_Cnt;

	/* Get the received data buffer and update the counter */
	USB_Rx_Cnt = USB_SIL_Read(EP3_OUT, USB_Rx_Buffer);
 800b0ce:	4c07      	ldr	r4, [pc, #28]	; (800b0ec <EP3_OUT_Callback+0x20>)
 800b0d0:	2003      	movs	r0, #3
 800b0d2:	4621      	mov	r1, r4
 800b0d4:	f7ff ff38 	bl	800af48 <USB_SIL_Read>

	/* USB data will be immediately processed, this allow next USB traffic being
	NAKed till the end of the USART Xfer */

	OnUsbDataRx(USB_Rx_Buffer, USB_Rx_Cnt);
 800b0d8:	b2c1      	uxtb	r1, r0
 800b0da:	4620      	mov	r0, r4
 800b0dc:	f7fc fb2a 	bl	8007734 <OnUsbDataRx>

	/* Enable the receive of data on EP3 */
	SetEPRxValid(ENDP3);
}
 800b0e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	SetEPRxValid(ENDP3);
 800b0e4:	2003      	movs	r0, #3
 800b0e6:	f7ff be53 	b.w	800ad90 <SetEPRxValid>
 800b0ea:	bf00      	nop
 800b0ec:	200017ec 	.word	0x200017ec

0800b0f0 <EP1_IN_Callback>:

#ifdef USB_CHANGED_DEBUG
void EP1_IN_Callback(void)
{
 800b0f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t USB_Tx_length;
	uint8_t head;

	if(_GetEPTxStatus(ENDP1) != EP_TX_NAK) return;
 800b0f2:	4b29      	ldr	r3, [pc, #164]	; (800b198 <EP1_IN_Callback+0xa8>)
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b0fa:	2b20      	cmp	r3, #32
 800b0fc:	d000      	beq.n	800b100 <EP1_IN_Callback+0x10>
			serial_tx_buffer_tail -= TX_BUFFER_SIZE;
		SetEPTxCount(ENDP1, USB_Tx_length);
		SetEPTxValid(ENDP1);
		}
	}
}
 800b0fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	txUsbLock = 0; // this may be removed
 800b100:	2200      	movs	r2, #0
	txUsbLock = 1; // this may be removed, just make sure the local head variable save the serial_tx_buffer_head before doing condition check
 800b102:	2001      	movs	r0, #1
 800b104:	4b25      	ldr	r3, [pc, #148]	; (800b19c <EP1_IN_Callback+0xac>)
	if ((head != serial_tx_buffer_tail)) {
 800b106:	4d26      	ldr	r5, [pc, #152]	; (800b1a0 <EP1_IN_Callback+0xb0>)
	head = serial_tx_buffer_head;
 800b108:	4926      	ldr	r1, [pc, #152]	; (800b1a4 <EP1_IN_Callback+0xb4>)
	txUsbLock = 1; // this may be removed, just make sure the local head variable save the serial_tx_buffer_head before doing condition check
 800b10a:	7018      	strb	r0, [r3, #0]
	txUsbLock = 0; // this may be removed
 800b10c:	701a      	strb	r2, [r3, #0]
	if ((head != serial_tx_buffer_tail)) {
 800b10e:	782a      	ldrb	r2, [r5, #0]
	head = serial_tx_buffer_head;
 800b110:	780b      	ldrb	r3, [r1, #0]
	if ((head != serial_tx_buffer_tail)) {
 800b112:	4293      	cmp	r3, r2
 800b114:	d0f3      	beq.n	800b0fe <EP1_IN_Callback+0xe>
		if (head > serial_tx_buffer_tail)
 800b116:	782a      	ldrb	r2, [r5, #0]
 800b118:	b299      	uxth	r1, r3
 800b11a:	4293      	cmp	r3, r2
			USB_Tx_length = head - serial_tx_buffer_tail;
 800b11c:	782b      	ldrb	r3, [r5, #0]
			USB_Tx_length = TX_BUFFER_SIZE - serial_tx_buffer_tail + head;
 800b11e:	bf98      	it	ls
 800b120:	3180      	addls	r1, #128	; 0x80
 800b122:	1ac9      	subs	r1, r1, r3
 800b124:	b289      	uxth	r1, r1
		if (USB_Tx_length != 0) {
 800b126:	2900      	cmp	r1, #0
 800b128:	d0e9      	beq.n	800b0fe <EP1_IN_Callback+0xe>
 800b12a:	2940      	cmp	r1, #64	; 0x40
				uint8_t *pbUsrBuf = serial_tx_buffer + serial_tx_buffer_tail;
 800b12c:	4c1e      	ldr	r4, [pc, #120]	; (800b1a8 <EP1_IN_Callback+0xb8>)
 800b12e:	bf28      	it	cs
 800b130:	2140      	movcs	r1, #64	; 0x40
				for (i = 0; i<n; i++) {
 800b132:	2000      	movs	r0, #0
						pbUsrBuf = serial_tx_buffer;
 800b134:	4627      	mov	r7, r4
				uint8_t *pbUsrBuf = serial_tx_buffer + serial_tx_buffer_tail;
 800b136:	782b      	ldrb	r3, [r5, #0]
				uint32_t n = (USB_Tx_length + 1) >> 1; /* n = (wNBytes + 1) / 2 */
 800b138:	f101 0e01 	add.w	lr, r1, #1
				uint16_t *pdwVal= (uint16_t *)(ENDP1_TXADDR * 2 + PMAAddr);
 800b13c:	4e1b      	ldr	r6, [pc, #108]	; (800b1ac <EP1_IN_Callback+0xbc>)
				uint32_t n = (USB_Tx_length + 1) >> 1; /* n = (wNBytes + 1) / 2 */
 800b13e:	ea4f 0e6e 	mov.w	lr, lr, asr #1
				uint8_t *pbUsrBuf = serial_tx_buffer + serial_tx_buffer_tail;
 800b142:	4423      	add	r3, r4
					temp1 = (uint16_t) *pbUsrBuf;
 800b144:	f813 2b01 	ldrb.w	r2, [r3], #1
				for (i = 0; i<n; i++) {
 800b148:	3001      	adds	r0, #1
					if (pbUsrBuf - serial_tx_buffer == TX_BUFFER_SIZE)
 800b14a:	eba3 0c04 	sub.w	ip, r3, r4
					*pdwVal++ = temp1 | (uint16_t) * pbUsrBuf << 8;
 800b14e:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
 800b152:	bf08      	it	eq
 800b154:	463b      	moveq	r3, r7
 800b156:	f813 cb01 	ldrb.w	ip, [r3], #1
 800b15a:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
					if (pbUsrBuf - serial_tx_buffer == TX_BUFFER_SIZE)
 800b15e:	eba3 0c04 	sub.w	ip, r3, r4
						pbUsrBuf = serial_tx_buffer;
 800b162:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
 800b166:	bf08      	it	eq
 800b168:	463b      	moveq	r3, r7
				for (i = 0; i<n; i++) {
 800b16a:	4586      	cmp	lr, r0
					*pdwVal++ = temp1 | (uint16_t) * pbUsrBuf << 8;
 800b16c:	f826 2b04 	strh.w	r2, [r6], #4
				for (i = 0; i<n; i++) {
 800b170:	d8e8      	bhi.n	800b144 <EP1_IN_Callback+0x54>
		serial_tx_buffer_tail += USB_Tx_length;
 800b172:	782b      	ldrb	r3, [r5, #0]
 800b174:	440b      	add	r3, r1
 800b176:	b2db      	uxtb	r3, r3
 800b178:	702b      	strb	r3, [r5, #0]
		if (serial_tx_buffer_tail >= TX_BUFFER_SIZE)
 800b17a:	782b      	ldrb	r3, [r5, #0]
 800b17c:	061b      	lsls	r3, r3, #24
 800b17e:	d503      	bpl.n	800b188 <EP1_IN_Callback+0x98>
			serial_tx_buffer_tail -= TX_BUFFER_SIZE;
 800b180:	782b      	ldrb	r3, [r5, #0]
 800b182:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 800b186:	702b      	strb	r3, [r5, #0]
		SetEPTxCount(ENDP1, USB_Tx_length);
 800b188:	2001      	movs	r0, #1
 800b18a:	f7ff fe85 	bl	800ae98 <SetEPTxCount>
}
 800b18e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		SetEPTxValid(ENDP1);
 800b192:	2001      	movs	r0, #1
 800b194:	f7ff bde8 	b.w	800ad68 <SetEPTxValid>
 800b198:	40005c04 	.word	0x40005c04
 800b19c:	20000f64 	.word	0x20000f64
 800b1a0:	20000db1 	.word	0x20000db1
 800b1a4:	20000db0 	.word	0x20000db0
 800b1a8:	20001544 	.word	0x20001544
 800b1ac:	40006180 	.word	0x40006180

0800b1b0 <SOF_Callback>:


/*	\brief Start Of Frame (SOF) callback
 */
void SOF_Callback(void)
{
 800b1b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(bDeviceState == CONFIGURED)
 800b1b2:	4b2b      	ldr	r3, [pc, #172]	; (800b260 <SOF_Callback+0xb0>)
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	2b05      	cmp	r3, #5
 800b1b8:	d000      	beq.n	800b1bc <SOF_Callback+0xc>
	{
		/* Check the data to be sent through IN pipe */
		EP1_IN_Callback();
	}
}
 800b1ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if(_GetEPTxStatus(ENDP1) != EP_TX_NAK) return;
 800b1bc:	4b29      	ldr	r3, [pc, #164]	; (800b264 <SOF_Callback+0xb4>)
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b1c4:	2b20      	cmp	r3, #32
 800b1c6:	d1f8      	bne.n	800b1ba <SOF_Callback+0xa>
	txUsbLock = 0; // this may be removed
 800b1c8:	2200      	movs	r2, #0
	txUsbLock = 1; // this may be removed, just make sure the local head variable save the serial_tx_buffer_head before doing condition check
 800b1ca:	2001      	movs	r0, #1
 800b1cc:	4b26      	ldr	r3, [pc, #152]	; (800b268 <SOF_Callback+0xb8>)
	if ((head != serial_tx_buffer_tail)) {
 800b1ce:	4d27      	ldr	r5, [pc, #156]	; (800b26c <SOF_Callback+0xbc>)
	head = serial_tx_buffer_head;
 800b1d0:	4927      	ldr	r1, [pc, #156]	; (800b270 <SOF_Callback+0xc0>)
	txUsbLock = 1; // this may be removed, just make sure the local head variable save the serial_tx_buffer_head before doing condition check
 800b1d2:	7018      	strb	r0, [r3, #0]
	txUsbLock = 0; // this may be removed
 800b1d4:	701a      	strb	r2, [r3, #0]
	if ((head != serial_tx_buffer_tail)) {
 800b1d6:	782a      	ldrb	r2, [r5, #0]
	head = serial_tx_buffer_head;
 800b1d8:	780b      	ldrb	r3, [r1, #0]
	if ((head != serial_tx_buffer_tail)) {
 800b1da:	4293      	cmp	r3, r2
 800b1dc:	d0ed      	beq.n	800b1ba <SOF_Callback+0xa>
		if (head > serial_tx_buffer_tail)
 800b1de:	782a      	ldrb	r2, [r5, #0]
 800b1e0:	b299      	uxth	r1, r3
 800b1e2:	4293      	cmp	r3, r2
			USB_Tx_length = head - serial_tx_buffer_tail;
 800b1e4:	782b      	ldrb	r3, [r5, #0]
			USB_Tx_length = TX_BUFFER_SIZE - serial_tx_buffer_tail + head;
 800b1e6:	bf98      	it	ls
 800b1e8:	3180      	addls	r1, #128	; 0x80
 800b1ea:	1ac9      	subs	r1, r1, r3
 800b1ec:	b289      	uxth	r1, r1
		if (USB_Tx_length != 0) {
 800b1ee:	2900      	cmp	r1, #0
 800b1f0:	d0e3      	beq.n	800b1ba <SOF_Callback+0xa>
 800b1f2:	2940      	cmp	r1, #64	; 0x40
				uint8_t *pbUsrBuf = serial_tx_buffer + serial_tx_buffer_tail;
 800b1f4:	4c1f      	ldr	r4, [pc, #124]	; (800b274 <SOF_Callback+0xc4>)
 800b1f6:	bf28      	it	cs
 800b1f8:	2140      	movcs	r1, #64	; 0x40
				for (i = 0; i<n; i++) {
 800b1fa:	2000      	movs	r0, #0
						pbUsrBuf = serial_tx_buffer;
 800b1fc:	4627      	mov	r7, r4
				uint8_t *pbUsrBuf = serial_tx_buffer + serial_tx_buffer_tail;
 800b1fe:	782b      	ldrb	r3, [r5, #0]
				uint32_t n = (USB_Tx_length + 1) >> 1; /* n = (wNBytes + 1) / 2 */
 800b200:	f101 0e01 	add.w	lr, r1, #1
				uint16_t *pdwVal= (uint16_t *)(ENDP1_TXADDR * 2 + PMAAddr);
 800b204:	4e1c      	ldr	r6, [pc, #112]	; (800b278 <SOF_Callback+0xc8>)
				uint32_t n = (USB_Tx_length + 1) >> 1; /* n = (wNBytes + 1) / 2 */
 800b206:	ea4f 0e6e 	mov.w	lr, lr, asr #1
				uint8_t *pbUsrBuf = serial_tx_buffer + serial_tx_buffer_tail;
 800b20a:	4423      	add	r3, r4
					temp1 = (uint16_t) *pbUsrBuf;
 800b20c:	f813 2b01 	ldrb.w	r2, [r3], #1
				for (i = 0; i<n; i++) {
 800b210:	3001      	adds	r0, #1
					if (pbUsrBuf - serial_tx_buffer == TX_BUFFER_SIZE)
 800b212:	eba3 0c04 	sub.w	ip, r3, r4
					*pdwVal++ = temp1 | (uint16_t) * pbUsrBuf << 8;
 800b216:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
 800b21a:	bf08      	it	eq
 800b21c:	463b      	moveq	r3, r7
 800b21e:	f813 cb01 	ldrb.w	ip, [r3], #1
 800b222:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
					if (pbUsrBuf - serial_tx_buffer == TX_BUFFER_SIZE)
 800b226:	eba3 0c04 	sub.w	ip, r3, r4
						pbUsrBuf = serial_tx_buffer;
 800b22a:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
 800b22e:	bf08      	it	eq
 800b230:	463b      	moveq	r3, r7
				for (i = 0; i<n; i++) {
 800b232:	4586      	cmp	lr, r0
					*pdwVal++ = temp1 | (uint16_t) * pbUsrBuf << 8;
 800b234:	f826 2b04 	strh.w	r2, [r6], #4
				for (i = 0; i<n; i++) {
 800b238:	d8e8      	bhi.n	800b20c <SOF_Callback+0x5c>
		serial_tx_buffer_tail += USB_Tx_length;
 800b23a:	782b      	ldrb	r3, [r5, #0]
 800b23c:	440b      	add	r3, r1
 800b23e:	b2db      	uxtb	r3, r3
 800b240:	702b      	strb	r3, [r5, #0]
		if (serial_tx_buffer_tail >= TX_BUFFER_SIZE)
 800b242:	782b      	ldrb	r3, [r5, #0]
 800b244:	061b      	lsls	r3, r3, #24
 800b246:	d503      	bpl.n	800b250 <SOF_Callback+0xa0>
			serial_tx_buffer_tail -= TX_BUFFER_SIZE;
 800b248:	782b      	ldrb	r3, [r5, #0]
 800b24a:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 800b24e:	702b      	strb	r3, [r5, #0]
		SetEPTxCount(ENDP1, USB_Tx_length);
 800b250:	2001      	movs	r0, #1
 800b252:	f7ff fe21 	bl	800ae98 <SetEPTxCount>
}
 800b256:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		SetEPTxValid(ENDP1);
 800b25a:	2001      	movs	r0, #1
 800b25c:	f7ff bd84 	b.w	800ad68 <SetEPTxValid>
 800b260:	20000f68 	.word	0x20000f68
 800b264:	40005c04 	.word	0x40005c04
 800b268:	20000f64 	.word	0x20000f64
 800b26c:	20000db1 	.word	0x20000db1
 800b270:	20000db0 	.word	0x20000db0
 800b274:	20001544 	.word	0x20001544
 800b278:	40006180 	.word	0x40006180

0800b27c <USB_Istr>:
* Return         :
*******************************************************************************/
void USB_Istr(void)
{

  wIstr = _GetISTR();
 800b27c:	491a      	ldr	r1, [pc, #104]	; (800b2e8 <USB_Istr+0x6c>)
{
 800b27e:	b570      	push	{r4, r5, r6, lr}
  wIstr = _GetISTR();
 800b280:	680b      	ldr	r3, [r1, #0]
 800b282:	4c1a      	ldr	r4, [pc, #104]	; (800b2ec <USB_Istr+0x70>)
 800b284:	b29b      	uxth	r3, r3

#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 800b286:	4d1a      	ldr	r5, [pc, #104]	; (800b2f0 <USB_Istr+0x74>)
  wIstr = _GetISTR();
 800b288:	8023      	strh	r3, [r4, #0]
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 800b28a:	8822      	ldrh	r2, [r4, #0]
 800b28c:	882b      	ldrh	r3, [r5, #0]
 800b28e:	401a      	ands	r2, r3
 800b290:	0590      	lsls	r0, r2, #22
 800b292:	d411      	bmi.n	800b2b8 <USB_Istr+0x3c>
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
  
#if (IMR_MSK & ISTR_CTR)
  if (wIstr & ISTR_CTR & wInterrupt_Mask)
 800b294:	8822      	ldrh	r2, [r4, #0]
 800b296:	401a      	ands	r2, r3
 800b298:	0412      	lsls	r2, r2, #16
 800b29a:	d41c      	bmi.n	800b2d6 <USB_Istr+0x5a>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
#if (IMR_MSK & ISTR_RESET)
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
 800b29c:	8822      	ldrh	r2, [r4, #0]
 800b29e:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 800b2a2:	4213      	tst	r3, r2
 800b2a4:	d01f      	beq.n	800b2e6 <USB_Istr+0x6a>
#ifdef ESOF_CALLBACK
    ESOF_Callback();
#endif
  }
#endif
} /* USB_Istr */
 800b2a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    _SetISTR((uint16_t)CLR_RESET);
 800b2aa:	f64f 31ff 	movw	r1, #64511	; 0xfbff
 800b2ae:	4a0e      	ldr	r2, [pc, #56]	; (800b2e8 <USB_Istr+0x6c>)
    Device_Property.Reset();
 800b2b0:	4b10      	ldr	r3, [pc, #64]	; (800b2f4 <USB_Istr+0x78>)
    _SetISTR((uint16_t)CLR_RESET);
 800b2b2:	6011      	str	r1, [r2, #0]
    Device_Property.Reset();
 800b2b4:	685b      	ldr	r3, [r3, #4]
 800b2b6:	4718      	bx	r3
    _SetISTR((uint16_t)CLR_SOF);
 800b2b8:	f64f 53ff 	movw	r3, #65023	; 0xfdff
    bIntPackSOF++;
 800b2bc:	4a0e      	ldr	r2, [pc, #56]	; (800b2f8 <USB_Istr+0x7c>)
    _SetISTR((uint16_t)CLR_SOF);
 800b2be:	600b      	str	r3, [r1, #0]
    bIntPackSOF++;
 800b2c0:	7813      	ldrb	r3, [r2, #0]
 800b2c2:	3301      	adds	r3, #1
 800b2c4:	b2db      	uxtb	r3, r3
 800b2c6:	7013      	strb	r3, [r2, #0]
    SOF_Callback();
 800b2c8:	f7ff ff72 	bl	800b1b0 <SOF_Callback>
 800b2cc:	882b      	ldrh	r3, [r5, #0]
  if (wIstr & ISTR_CTR & wInterrupt_Mask)
 800b2ce:	8822      	ldrh	r2, [r4, #0]
 800b2d0:	401a      	ands	r2, r3
 800b2d2:	0412      	lsls	r2, r2, #16
 800b2d4:	d5e2      	bpl.n	800b29c <USB_Istr+0x20>
    CTR_LP();
 800b2d6:	f7ff fc19 	bl	800ab0c <CTR_LP>
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
 800b2da:	8822      	ldrh	r2, [r4, #0]
 800b2dc:	882b      	ldrh	r3, [r5, #0]
 800b2de:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 800b2e2:	4213      	tst	r3, r2
 800b2e4:	d1df      	bne.n	800b2a6 <USB_Istr+0x2a>
} /* USB_Istr */
 800b2e6:	bd70      	pop	{r4, r5, r6, pc}
 800b2e8:	40005c44 	.word	0x40005c44
 800b2ec:	2000182c 	.word	0x2000182c
 800b2f0:	200017e4 	.word	0x200017e4
 800b2f4:	20000080 	.word	0x20000080
 800b2f8:	20000f65 	.word	0x20000f65

0800b2fc <Virtual_Com_Port_SetConfiguration>:
*******************************************************************************/
void Virtual_Com_Port_SetConfiguration(void)
{
  DEVICE_INFO *pInfo = &Device_Info;

  if (pInfo->Current_Configuration != 0)
 800b2fc:	4b03      	ldr	r3, [pc, #12]	; (800b30c <Virtual_Com_Port_SetConfiguration+0x10>)
 800b2fe:	7a9b      	ldrb	r3, [r3, #10]
 800b300:	b113      	cbz	r3, 800b308 <Virtual_Com_Port_SetConfiguration+0xc>
  {
    /* Device configured */
    bDeviceState = CONFIGURED;
 800b302:	2205      	movs	r2, #5
 800b304:	4b02      	ldr	r3, [pc, #8]	; (800b310 <Virtual_Com_Port_SetConfiguration+0x14>)
 800b306:	601a      	str	r2, [r3, #0]
  }
}
 800b308:	4770      	bx	lr
 800b30a:	bf00      	nop
 800b30c:	200017c0 	.word	0x200017c0
 800b310:	20000f68 	.word	0x20000f68

0800b314 <Virtual_Com_Port_SetDeviceAddress>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_SetDeviceAddress (void)
{
  bDeviceState = ADDRESSED;
 800b314:	2204      	movs	r2, #4
 800b316:	4b01      	ldr	r3, [pc, #4]	; (800b31c <Virtual_Com_Port_SetDeviceAddress+0x8>)
 800b318:	601a      	str	r2, [r3, #0]
}
 800b31a:	4770      	bx	lr
 800b31c:	20000f68 	.word	0x20000f68

0800b320 <Virtual_Com_Port_Status_In>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Status_In(void)
{
  if (Request == SET_LINE_CODING)
 800b320:	4b03      	ldr	r3, [pc, #12]	; (800b330 <Virtual_Com_Port_Status_In+0x10>)
 800b322:	781a      	ldrb	r2, [r3, #0]
 800b324:	2a20      	cmp	r2, #32
  {
    Request = 0;
 800b326:	bf04      	itt	eq
 800b328:	2200      	moveq	r2, #0
 800b32a:	701a      	strbeq	r2, [r3, #0]
  }
}
 800b32c:	4770      	bx	lr
 800b32e:	bf00      	nop
 800b330:	20000f66 	.word	0x20000f66

0800b334 <Virtual_Com_Port_Status_Out>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Status_Out(void)
{}
 800b334:	4770      	bx	lr
 800b336:	bf00      	nop

0800b338 <Virtual_Com_Port_Data_Setup>:
{
  uint8_t    *(*CopyRoutine)(uint16_t);

  CopyRoutine = NULL;

  if (RequestNo == GET_LINE_CODING)
 800b338:	2821      	cmp	r0, #33	; 0x21
 800b33a:	d014      	beq.n	800b366 <Virtual_Com_Port_Data_Setup+0x2e>
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
    }
  }
  else if (RequestNo == SET_LINE_CODING)
 800b33c:	2820      	cmp	r0, #32
 800b33e:	4603      	mov	r3, r0
 800b340:	d118      	bne.n	800b374 <Virtual_Com_Port_Data_Setup+0x3c>
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 800b342:	4a10      	ldr	r2, [pc, #64]	; (800b384 <Virtual_Com_Port_Data_Setup+0x4c>)
 800b344:	6812      	ldr	r2, [r2, #0]
 800b346:	7811      	ldrb	r1, [r2, #0]
 800b348:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800b34c:	2921      	cmp	r1, #33	; 0x21
 800b34e:	d115      	bne.n	800b37c <Virtual_Com_Port_Data_Setup+0x44>
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
    }
    Request = SET_LINE_CODING;
 800b350:	480d      	ldr	r0, [pc, #52]	; (800b388 <Virtual_Com_Port_Data_Setup+0x50>)
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
 800b352:	490e      	ldr	r1, [pc, #56]	; (800b38c <Virtual_Com_Port_Data_Setup+0x54>)
    Request = SET_LINE_CODING;
 800b354:	7003      	strb	r3, [r0, #0]
{
 800b356:	b510      	push	{r4, lr}
  {
    return USB_UNSUPPORT;
  }

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
  pInformation->Ctrl_Info.Usb_wOffset = 0;
 800b358:	2400      	movs	r4, #0
  pInformation->Ctrl_Info.CopyData = CopyRoutine;
 800b35a:	6191      	str	r1, [r2, #24]
  pInformation->Ctrl_Info.Usb_wOffset = 0;
 800b35c:	8254      	strh	r4, [r2, #18]
  (*CopyRoutine)(0);
 800b35e:	4620      	mov	r0, r4
 800b360:	4788      	blx	r1
  return USB_SUCCESS;
 800b362:	4620      	mov	r0, r4
}
 800b364:	bd10      	pop	{r4, pc}
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 800b366:	4b07      	ldr	r3, [pc, #28]	; (800b384 <Virtual_Com_Port_Data_Setup+0x4c>)
 800b368:	681a      	ldr	r2, [r3, #0]
 800b36a:	7813      	ldrb	r3, [r2, #0]
 800b36c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b370:	2b21      	cmp	r3, #33	; 0x21
 800b372:	d001      	beq.n	800b378 <Virtual_Com_Port_Data_Setup+0x40>
    return USB_UNSUPPORT;
 800b374:	2002      	movs	r0, #2
}
 800b376:	4770      	bx	lr
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
 800b378:	4905      	ldr	r1, [pc, #20]	; (800b390 <Virtual_Com_Port_Data_Setup+0x58>)
 800b37a:	e7ec      	b.n	800b356 <Virtual_Com_Port_Data_Setup+0x1e>
    Request = SET_LINE_CODING;
 800b37c:	4a02      	ldr	r2, [pc, #8]	; (800b388 <Virtual_Com_Port_Data_Setup+0x50>)
    return USB_UNSUPPORT;
 800b37e:	2002      	movs	r0, #2
    Request = SET_LINE_CODING;
 800b380:	7013      	strb	r3, [r2, #0]
 800b382:	4770      	bx	lr
 800b384:	200017e0 	.word	0x200017e0
 800b388:	20000f66 	.word	0x20000f66
 800b38c:	0800b51d 	.word	0x0800b51d
 800b390:	0800b3c9 	.word	0x0800b3c9

0800b394 <Virtual_Com_Port_NoData_Setup>:
* Return         : USB_UNSUPPORT or USB_SUCCESS.
*******************************************************************************/
RESULT Virtual_Com_Port_NoData_Setup(uint8_t RequestNo)
{

  if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 800b394:	4b07      	ldr	r3, [pc, #28]	; (800b3b4 <Virtual_Com_Port_NoData_Setup+0x20>)
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	781b      	ldrb	r3, [r3, #0]
 800b39a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b39e:	2b21      	cmp	r3, #33	; 0x21
 800b3a0:	d106      	bne.n	800b3b0 <Virtual_Com_Port_NoData_Setup+0x1c>
  {
    if (RequestNo == SET_COMM_FEATURE)
 800b3a2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800b3a6:	2802      	cmp	r0, #2
    {
      return USB_SUCCESS;
 800b3a8:	bf14      	ite	ne
 800b3aa:	2002      	movne	r0, #2
 800b3ac:	2000      	moveq	r0, #0
 800b3ae:	4770      	bx	lr
    {
      return USB_SUCCESS;
    }
  }

  return USB_UNSUPPORT;
 800b3b0:	2002      	movs	r0, #2
}
 800b3b2:	4770      	bx	lr
 800b3b4:	200017e0 	.word	0x200017e0

0800b3b8 <Virtual_Com_Port_Get_Interface_Setting>:
* Output         : None.
* Return         : The address of the string descriptors.
*******************************************************************************/
RESULT Virtual_Com_Port_Get_Interface_Setting(uint8_t Interface, uint8_t AlternateSetting)
{
  if (AlternateSetting > 0)
 800b3b8:	b921      	cbnz	r1, 800b3c4 <Virtual_Com_Port_Get_Interface_Setting+0xc>
  {
    return USB_UNSUPPORT;
  }
  else if (Interface > 1)
 800b3ba:	2801      	cmp	r0, #1
  {
    return USB_UNSUPPORT;
  }
  return USB_SUCCESS;
 800b3bc:	bf8c      	ite	hi
 800b3be:	2002      	movhi	r0, #2
 800b3c0:	2000      	movls	r0, #0
 800b3c2:	4770      	bx	lr
    return USB_UNSUPPORT;
 800b3c4:	2002      	movs	r0, #2
}
 800b3c6:	4770      	bx	lr

0800b3c8 <Virtual_Com_Port_GetLineCoding>:
* Output         : None.
* Return         : Linecoding structure base address.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetLineCoding(uint16_t Length)
{
  if (Length == 0)
 800b3c8:	b108      	cbz	r0, 800b3ce <Virtual_Com_Port_GetLineCoding+0x6>
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
    return NULL;
  }
  return(uint8_t *)&linecoding;
 800b3ca:	4803      	ldr	r0, [pc, #12]	; (800b3d8 <Virtual_Com_Port_GetLineCoding+0x10>)
}
 800b3cc:	4770      	bx	lr
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
 800b3ce:	2208      	movs	r2, #8
 800b3d0:	4b02      	ldr	r3, [pc, #8]	; (800b3dc <Virtual_Com_Port_GetLineCoding+0x14>)
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	821a      	strh	r2, [r3, #16]
    return NULL;
 800b3d6:	4770      	bx	lr
 800b3d8:	200000f8 	.word	0x200000f8
 800b3dc:	200017e0 	.word	0x200017e0

0800b3e0 <Virtual_Com_Port_init>:
{
 800b3e0:	b510      	push	{r4, lr}
  pInformation->Current_Configuration = 0;
 800b3e2:	2400      	movs	r4, #0
  Get_SerialNum();
 800b3e4:	f7ff fde2 	bl	800afac <Get_SerialNum>
  pInformation->Current_Configuration = 0;
 800b3e8:	4b04      	ldr	r3, [pc, #16]	; (800b3fc <Virtual_Com_Port_init+0x1c>)
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	729c      	strb	r4, [r3, #10]
  PowerOn();
 800b3ee:	f000 f8a1 	bl	800b534 <PowerOn>
  USB_SIL_Init();
 800b3f2:	f7ff fd97 	bl	800af24 <USB_SIL_Init>
  bDeviceState = UNCONNECTED;
 800b3f6:	4b02      	ldr	r3, [pc, #8]	; (800b400 <Virtual_Com_Port_init+0x20>)
 800b3f8:	601c      	str	r4, [r3, #0]
}
 800b3fa:	bd10      	pop	{r4, pc}
 800b3fc:	200017e0 	.word	0x200017e0
 800b400:	20000f68 	.word	0x20000f68

0800b404 <Virtual_Com_Port_Reset>:
{
 800b404:	b510      	push	{r4, lr}
  pInformation->Current_Configuration = 0;
 800b406:	2400      	movs	r4, #0
 800b408:	4b32      	ldr	r3, [pc, #200]	; (800b4d4 <Virtual_Com_Port_Reset+0xd0>)
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 800b40a:	4a33      	ldr	r2, [pc, #204]	; (800b4d8 <Virtual_Com_Port_Reset+0xd4>)
  pInformation->Current_Configuration = 0;
 800b40c:	681b      	ldr	r3, [r3, #0]
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 800b40e:	79d2      	ldrb	r2, [r2, #7]
  pInformation->Current_Configuration = 0;
 800b410:	815c      	strh	r4, [r3, #10]
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 800b412:	725a      	strb	r2, [r3, #9]
  SetBTABLE(BTABLE_ADDRESS);
 800b414:	4620      	mov	r0, r4
 800b416:	f7ff fc5d 	bl	800acd4 <SetBTABLE>
  SetEPType(ENDP0, EP_CONTROL);
 800b41a:	4620      	mov	r0, r4
 800b41c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b420:	f7ff fc60 	bl	800ace4 <SetEPType>
  SetEPTxStatus(ENDP0, EP_TX_STALL);
 800b424:	4620      	mov	r0, r4
 800b426:	2110      	movs	r1, #16
 800b428:	f7ff fc6a 	bl	800ad00 <SetEPTxStatus>
  SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 800b42c:	4620      	mov	r0, r4
 800b42e:	2140      	movs	r1, #64	; 0x40
 800b430:	f7ff fd06 	bl	800ae40 <SetEPRxAddr>
  SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 800b434:	2180      	movs	r1, #128	; 0x80
 800b436:	4620      	mov	r0, r4
 800b438:	f7ff fcf2 	bl	800ae20 <SetEPTxAddr>
  Clear_Status_Out(ENDP0);
 800b43c:	4620      	mov	r0, r4
 800b43e:	f7ff fcbb 	bl	800adb8 <Clear_Status_Out>
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 800b442:	4b26      	ldr	r3, [pc, #152]	; (800b4dc <Virtual_Com_Port_Reset+0xd8>)
 800b444:	4620      	mov	r0, r4
 800b446:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 800b44a:	f7ff fd33 	bl	800aeb4 <SetEPRxCount>
  SetEPRxValid(ENDP0);
 800b44e:	4620      	mov	r0, r4
 800b450:	f7ff fc9e 	bl	800ad90 <SetEPRxValid>
  SetEPType(ENDP1, EP_BULK);
 800b454:	4621      	mov	r1, r4
 800b456:	2001      	movs	r0, #1
 800b458:	f7ff fc44 	bl	800ace4 <SetEPType>
  SetEPTxAddr(ENDP1, ENDP1_TXADDR);
 800b45c:	21c0      	movs	r1, #192	; 0xc0
 800b45e:	2001      	movs	r0, #1
 800b460:	f7ff fcde 	bl	800ae20 <SetEPTxAddr>
  SetEPTxStatus(ENDP1, EP_TX_NAK);
 800b464:	2120      	movs	r1, #32
 800b466:	2001      	movs	r0, #1
 800b468:	f7ff fc4a 	bl	800ad00 <SetEPTxStatus>
  SetEPRxStatus(ENDP1, EP_RX_DIS);
 800b46c:	4621      	mov	r1, r4
 800b46e:	2001      	movs	r0, #1
 800b470:	f7ff fc60 	bl	800ad34 <SetEPRxStatus>
  SetEPType(ENDP2, EP_INTERRUPT);
 800b474:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800b478:	2002      	movs	r0, #2
 800b47a:	f7ff fc33 	bl	800ace4 <SetEPType>
  SetEPTxAddr(ENDP2, ENDP2_TXADDR);
 800b47e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b482:	2002      	movs	r0, #2
 800b484:	f7ff fccc 	bl	800ae20 <SetEPTxAddr>
  SetEPRxStatus(ENDP2, EP_RX_DIS);
 800b488:	4621      	mov	r1, r4
 800b48a:	2002      	movs	r0, #2
 800b48c:	f7ff fc52 	bl	800ad34 <SetEPRxStatus>
  SetEPTxStatus(ENDP2, EP_TX_NAK);
 800b490:	2120      	movs	r1, #32
 800b492:	2002      	movs	r0, #2
 800b494:	f7ff fc34 	bl	800ad00 <SetEPTxStatus>
  SetEPType(ENDP3, EP_BULK);
 800b498:	4621      	mov	r1, r4
 800b49a:	2003      	movs	r0, #3
 800b49c:	f7ff fc22 	bl	800ace4 <SetEPType>
  SetEPRxAddr(ENDP3, ENDP3_RXADDR);
 800b4a0:	f44f 7188 	mov.w	r1, #272	; 0x110
 800b4a4:	2003      	movs	r0, #3
 800b4a6:	f7ff fccb 	bl	800ae40 <SetEPRxAddr>
  SetEPRxCount(ENDP3, VIRTUAL_COM_PORT_DATA_SIZE);
 800b4aa:	2140      	movs	r1, #64	; 0x40
 800b4ac:	2003      	movs	r0, #3
 800b4ae:	f7ff fd01 	bl	800aeb4 <SetEPRxCount>
  SetEPRxStatus(ENDP3, EP_RX_VALID);
 800b4b2:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800b4b6:	2003      	movs	r0, #3
 800b4b8:	f7ff fc3c 	bl	800ad34 <SetEPRxStatus>
  SetEPTxStatus(ENDP3, EP_TX_DIS);
 800b4bc:	4621      	mov	r1, r4
 800b4be:	2003      	movs	r0, #3
 800b4c0:	f7ff fc1e 	bl	800ad00 <SetEPTxStatus>
  SetDeviceAddress(0);
 800b4c4:	4620      	mov	r0, r4
 800b4c6:	f7ff fae3 	bl	800aa90 <SetDeviceAddress>
  bDeviceState = ATTACHED;
 800b4ca:	2201      	movs	r2, #1
 800b4cc:	4b04      	ldr	r3, [pc, #16]	; (800b4e0 <Virtual_Com_Port_Reset+0xdc>)
 800b4ce:	601a      	str	r2, [r3, #0]
}
 800b4d0:	bd10      	pop	{r4, pc}
 800b4d2:	bf00      	nop
 800b4d4:	200017e0 	.word	0x200017e0
 800b4d8:	0800cb44 	.word	0x0800cb44
 800b4dc:	20000080 	.word	0x20000080
 800b4e0:	20000f68 	.word	0x20000f68

0800b4e4 <Virtual_Com_Port_GetDeviceDescriptor>:
  return Standard_GetDescriptorData(Length, &Device_Descriptor);
 800b4e4:	4901      	ldr	r1, [pc, #4]	; (800b4ec <Virtual_Com_Port_GetDeviceDescriptor+0x8>)
 800b4e6:	f7fe bfe3 	b.w	800a4b0 <Standard_GetDescriptorData>
 800b4ea:	bf00      	nop
 800b4ec:	20000078 	.word	0x20000078

0800b4f0 <Virtual_Com_Port_GetConfigDescriptor>:
  return Standard_GetDescriptorData(Length, &Config_Descriptor);
 800b4f0:	4901      	ldr	r1, [pc, #4]	; (800b4f8 <Virtual_Com_Port_GetConfigDescriptor+0x8>)
 800b4f2:	f7fe bfdd 	b.w	800a4b0 <Standard_GetDescriptorData>
 800b4f6:	bf00      	nop
 800b4f8:	20000070 	.word	0x20000070

0800b4fc <Virtual_Com_Port_GetStringDescriptor>:
  uint8_t wValue0 = pInformation->USBwValue0;
 800b4fc:	4b05      	ldr	r3, [pc, #20]	; (800b514 <Virtual_Com_Port_GetStringDescriptor+0x18>)
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	78db      	ldrb	r3, [r3, #3]
  if (wValue0 > 4)
 800b502:	2b04      	cmp	r3, #4
 800b504:	d804      	bhi.n	800b510 <Virtual_Com_Port_GetStringDescriptor+0x14>
    return Standard_GetDescriptorData(Length, &String_Descriptor[wValue0]);
 800b506:	4904      	ldr	r1, [pc, #16]	; (800b518 <Virtual_Com_Port_GetStringDescriptor+0x1c>)
 800b508:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b50c:	f7fe bfd0 	b.w	800a4b0 <Standard_GetDescriptorData>
}
 800b510:	2000      	movs	r0, #0
 800b512:	4770      	bx	lr
 800b514:	200017e0 	.word	0x200017e0
 800b518:	200000b4 	.word	0x200000b4

0800b51c <Virtual_Com_Port_SetLineCoding>:
 800b51c:	b108      	cbz	r0, 800b522 <Virtual_Com_Port_SetLineCoding+0x6>
 800b51e:	4803      	ldr	r0, [pc, #12]	; (800b52c <Virtual_Com_Port_SetLineCoding+0x10>)
 800b520:	4770      	bx	lr
 800b522:	2208      	movs	r2, #8
 800b524:	4b02      	ldr	r3, [pc, #8]	; (800b530 <Virtual_Com_Port_SetLineCoding+0x14>)
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	821a      	strh	r2, [r3, #16]
 800b52a:	4770      	bx	lr
 800b52c:	200000f8 	.word	0x200000f8
 800b530:	200017e0 	.word	0x200017e0

0800b534 <PowerOn>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
RESULT PowerOn(void)
{
 800b534:	b538      	push	{r3, r4, r5, lr}
#ifndef STM32F10X_CL
  uint16_t wRegVal;

  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);
 800b536:	2001      	movs	r0, #1
 800b538:	f7ff fd36 	bl	800afa8 <USB_Cable_Config>

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 800b53c:	2501      	movs	r5, #1

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
 800b53e:	2000      	movs	r0, #0
  /*** Clear pending interrupts ***/
  _SetISTR(0);
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 800b540:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
  _SetCNTR(wRegVal);
 800b544:	4b04      	ldr	r3, [pc, #16]	; (800b558 <PowerOn+0x24>)
  _SetISTR(0);
 800b546:	4c05      	ldr	r4, [pc, #20]	; (800b55c <PowerOn+0x28>)
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 800b548:	4905      	ldr	r1, [pc, #20]	; (800b560 <PowerOn+0x2c>)
  _SetCNTR(wRegVal);
 800b54a:	601d      	str	r5, [r3, #0]
  _SetCNTR(wInterrupt_Mask);
 800b54c:	6018      	str	r0, [r3, #0]
  _SetISTR(0);
 800b54e:	6020      	str	r0, [r4, #0]
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 800b550:	800a      	strh	r2, [r1, #0]
  _SetCNTR(wInterrupt_Mask);
 800b552:	601a      	str	r2, [r3, #0]
#endif /* STM32F10X_CL */

  return USB_SUCCESS;
}
 800b554:	bd38      	pop	{r3, r4, r5, pc}
 800b556:	bf00      	nop
 800b558:	40005c40 	.word	0x40005c40
 800b55c:	40005c44 	.word	0x40005c44
 800b560:	200017e4 	.word	0x200017e4

0800b564 <NMI_Handler>:
* Output         : None
* Return         : None
*******************************************************************************/
void NMI_Handler(void)
{
}
 800b564:	4770      	bx	lr
 800b566:	bf00      	nop

0800b568 <HardFault_Handler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void HardFault_Handler(void)
{
 800b568:	e7fe      	b.n	800b568 <HardFault_Handler>
 800b56a:	bf00      	nop

0800b56c <MemManage_Handler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void MemManage_Handler(void)
{
 800b56c:	e7fe      	b.n	800b56c <MemManage_Handler>
 800b56e:	bf00      	nop

0800b570 <BusFault_Handler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void BusFault_Handler(void)
{
 800b570:	e7fe      	b.n	800b570 <BusFault_Handler>
 800b572:	bf00      	nop

0800b574 <UsageFault_Handler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void UsageFault_Handler(void)
{
 800b574:	e7fe      	b.n	800b574 <UsageFault_Handler>
 800b576:	bf00      	nop

0800b578 <SVC_Handler>:
 800b578:	4770      	bx	lr
 800b57a:	bf00      	nop

0800b57c <DebugMon_Handler>:
 800b57c:	4770      	bx	lr
 800b57e:	bf00      	nop

0800b580 <PendSV_Handler>:
 800b580:	4770      	bx	lr
 800b582:	bf00      	nop

0800b584 <USB_LP_CAN1_RX0_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  USB_Istr();
 800b584:	f7ff be7a 	b.w	800b27c <USB_Istr>

0800b588 <__libc_init_array>:
 800b588:	b570      	push	{r4, r5, r6, lr}
 800b58a:	2500      	movs	r5, #0
 800b58c:	4e0c      	ldr	r6, [pc, #48]	; (800b5c0 <__libc_init_array+0x38>)
 800b58e:	4c0d      	ldr	r4, [pc, #52]	; (800b5c4 <__libc_init_array+0x3c>)
 800b590:	1ba4      	subs	r4, r4, r6
 800b592:	10a4      	asrs	r4, r4, #2
 800b594:	42a5      	cmp	r5, r4
 800b596:	d109      	bne.n	800b5ac <__libc_init_array+0x24>
 800b598:	f001 f9a2 	bl	800c8e0 <_init>
 800b59c:	2500      	movs	r5, #0
 800b59e:	4e0a      	ldr	r6, [pc, #40]	; (800b5c8 <__libc_init_array+0x40>)
 800b5a0:	4c0a      	ldr	r4, [pc, #40]	; (800b5cc <__libc_init_array+0x44>)
 800b5a2:	1ba4      	subs	r4, r4, r6
 800b5a4:	10a4      	asrs	r4, r4, #2
 800b5a6:	42a5      	cmp	r5, r4
 800b5a8:	d105      	bne.n	800b5b6 <__libc_init_array+0x2e>
 800b5aa:	bd70      	pop	{r4, r5, r6, pc}
 800b5ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b5b0:	4798      	blx	r3
 800b5b2:	3501      	adds	r5, #1
 800b5b4:	e7ee      	b.n	800b594 <__libc_init_array+0xc>
 800b5b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b5ba:	4798      	blx	r3
 800b5bc:	3501      	adds	r5, #1
 800b5be:	e7f2      	b.n	800b5a6 <__libc_init_array+0x1e>
 800b5c0:	0800cff4 	.word	0x0800cff4
 800b5c4:	0800cff4 	.word	0x0800cff4
 800b5c8:	0800cff4 	.word	0x0800cff4
 800b5cc:	0800cffc 	.word	0x0800cffc

0800b5d0 <__itoa>:
 800b5d0:	1e93      	subs	r3, r2, #2
 800b5d2:	2b22      	cmp	r3, #34	; 0x22
 800b5d4:	b510      	push	{r4, lr}
 800b5d6:	460c      	mov	r4, r1
 800b5d8:	d904      	bls.n	800b5e4 <__itoa+0x14>
 800b5da:	2300      	movs	r3, #0
 800b5dc:	461c      	mov	r4, r3
 800b5de:	700b      	strb	r3, [r1, #0]
 800b5e0:	4620      	mov	r0, r4
 800b5e2:	bd10      	pop	{r4, pc}
 800b5e4:	2a0a      	cmp	r2, #10
 800b5e6:	d109      	bne.n	800b5fc <__itoa+0x2c>
 800b5e8:	2800      	cmp	r0, #0
 800b5ea:	da07      	bge.n	800b5fc <__itoa+0x2c>
 800b5ec:	232d      	movs	r3, #45	; 0x2d
 800b5ee:	700b      	strb	r3, [r1, #0]
 800b5f0:	2101      	movs	r1, #1
 800b5f2:	4240      	negs	r0, r0
 800b5f4:	4421      	add	r1, r4
 800b5f6:	f000 f81d 	bl	800b634 <__utoa>
 800b5fa:	e7f1      	b.n	800b5e0 <__itoa+0x10>
 800b5fc:	2100      	movs	r1, #0
 800b5fe:	e7f9      	b.n	800b5f4 <__itoa+0x24>

0800b600 <itoa>:
 800b600:	f7ff bfe6 	b.w	800b5d0 <__itoa>

0800b604 <memcmp>:
 800b604:	b530      	push	{r4, r5, lr}
 800b606:	2400      	movs	r4, #0
 800b608:	42a2      	cmp	r2, r4
 800b60a:	d101      	bne.n	800b610 <memcmp+0xc>
 800b60c:	2000      	movs	r0, #0
 800b60e:	e007      	b.n	800b620 <memcmp+0x1c>
 800b610:	5d03      	ldrb	r3, [r0, r4]
 800b612:	3401      	adds	r4, #1
 800b614:	190d      	adds	r5, r1, r4
 800b616:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800b61a:	42ab      	cmp	r3, r5
 800b61c:	d0f4      	beq.n	800b608 <memcmp+0x4>
 800b61e:	1b58      	subs	r0, r3, r5
 800b620:	bd30      	pop	{r4, r5, pc}

0800b622 <memset>:
 800b622:	4603      	mov	r3, r0
 800b624:	4402      	add	r2, r0
 800b626:	4293      	cmp	r3, r2
 800b628:	d100      	bne.n	800b62c <memset+0xa>
 800b62a:	4770      	bx	lr
 800b62c:	f803 1b01 	strb.w	r1, [r3], #1
 800b630:	e7f9      	b.n	800b626 <memset+0x4>
	...

0800b634 <__utoa>:
 800b634:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b636:	b08b      	sub	sp, #44	; 0x2c
 800b638:	4605      	mov	r5, r0
 800b63a:	460c      	mov	r4, r1
 800b63c:	466e      	mov	r6, sp
 800b63e:	4b1b      	ldr	r3, [pc, #108]	; (800b6ac <__utoa+0x78>)
 800b640:	f103 0c20 	add.w	ip, r3, #32
 800b644:	4637      	mov	r7, r6
 800b646:	6818      	ldr	r0, [r3, #0]
 800b648:	6859      	ldr	r1, [r3, #4]
 800b64a:	3308      	adds	r3, #8
 800b64c:	c703      	stmia	r7!, {r0, r1}
 800b64e:	4563      	cmp	r3, ip
 800b650:	463e      	mov	r6, r7
 800b652:	d1f7      	bne.n	800b644 <__utoa+0x10>
 800b654:	6818      	ldr	r0, [r3, #0]
 800b656:	791b      	ldrb	r3, [r3, #4]
 800b658:	6038      	str	r0, [r7, #0]
 800b65a:	713b      	strb	r3, [r7, #4]
 800b65c:	1e93      	subs	r3, r2, #2
 800b65e:	2b22      	cmp	r3, #34	; 0x22
 800b660:	f04f 0300 	mov.w	r3, #0
 800b664:	d904      	bls.n	800b670 <__utoa+0x3c>
 800b666:	7023      	strb	r3, [r4, #0]
 800b668:	461c      	mov	r4, r3
 800b66a:	4620      	mov	r0, r4
 800b66c:	b00b      	add	sp, #44	; 0x2c
 800b66e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b670:	1e66      	subs	r6, r4, #1
 800b672:	fbb5 f0f2 	udiv	r0, r5, r2
 800b676:	fb02 5510 	mls	r5, r2, r0, r5
 800b67a:	af0a      	add	r7, sp, #40	; 0x28
 800b67c:	443d      	add	r5, r7
 800b67e:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 800b682:	1c59      	adds	r1, r3, #1
 800b684:	f806 5f01 	strb.w	r5, [r6, #1]!
 800b688:	4605      	mov	r5, r0
 800b68a:	b968      	cbnz	r0, 800b6a8 <__utoa+0x74>
 800b68c:	4622      	mov	r2, r4
 800b68e:	5460      	strb	r0, [r4, r1]
 800b690:	4423      	add	r3, r4
 800b692:	1b19      	subs	r1, r3, r4
 800b694:	1b10      	subs	r0, r2, r4
 800b696:	4281      	cmp	r1, r0
 800b698:	dde7      	ble.n	800b66a <__utoa+0x36>
 800b69a:	7811      	ldrb	r1, [r2, #0]
 800b69c:	7818      	ldrb	r0, [r3, #0]
 800b69e:	f802 0b01 	strb.w	r0, [r2], #1
 800b6a2:	f803 1901 	strb.w	r1, [r3], #-1
 800b6a6:	e7f4      	b.n	800b692 <__utoa+0x5e>
 800b6a8:	460b      	mov	r3, r1
 800b6aa:	e7e2      	b.n	800b672 <__utoa+0x3e>
 800b6ac:	0800cbd8 	.word	0x0800cbd8

0800b6b0 <register_fini>:
 800b6b0:	4b02      	ldr	r3, [pc, #8]	; (800b6bc <register_fini+0xc>)
 800b6b2:	b113      	cbz	r3, 800b6ba <register_fini+0xa>
 800b6b4:	4802      	ldr	r0, [pc, #8]	; (800b6c0 <register_fini+0x10>)
 800b6b6:	f000 b805 	b.w	800b6c4 <atexit>
 800b6ba:	4770      	bx	lr
 800b6bc:	00000000 	.word	0x00000000
 800b6c0:	0800b6d1 	.word	0x0800b6d1

0800b6c4 <atexit>:
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	4601      	mov	r1, r0
 800b6c8:	461a      	mov	r2, r3
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	f000 b816 	b.w	800b6fc <__register_exitproc>

0800b6d0 <__libc_fini_array>:
 800b6d0:	b538      	push	{r3, r4, r5, lr}
 800b6d2:	4d07      	ldr	r5, [pc, #28]	; (800b6f0 <__libc_fini_array+0x20>)
 800b6d4:	4c07      	ldr	r4, [pc, #28]	; (800b6f4 <__libc_fini_array+0x24>)
 800b6d6:	1b64      	subs	r4, r4, r5
 800b6d8:	10a4      	asrs	r4, r4, #2
 800b6da:	b91c      	cbnz	r4, 800b6e4 <__libc_fini_array+0x14>
 800b6dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b6e0:	f001 b904 	b.w	800c8ec <_fini>
 800b6e4:	3c01      	subs	r4, #1
 800b6e6:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800b6ea:	4798      	blx	r3
 800b6ec:	e7f5      	b.n	800b6da <__libc_fini_array+0xa>
 800b6ee:	bf00      	nop
 800b6f0:	0800cffc 	.word	0x0800cffc
 800b6f4:	0800d000 	.word	0x0800d000

0800b6f8 <__retarget_lock_acquire_recursive>:
 800b6f8:	4770      	bx	lr

0800b6fa <__retarget_lock_release_recursive>:
 800b6fa:	4770      	bx	lr

0800b6fc <__register_exitproc>:
 800b6fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b700:	4c26      	ldr	r4, [pc, #152]	; (800b79c <__register_exitproc+0xa0>)
 800b702:	4606      	mov	r6, r0
 800b704:	6820      	ldr	r0, [r4, #0]
 800b706:	4698      	mov	r8, r3
 800b708:	460f      	mov	r7, r1
 800b70a:	4691      	mov	r9, r2
 800b70c:	f7ff fff4 	bl	800b6f8 <__retarget_lock_acquire_recursive>
 800b710:	4b23      	ldr	r3, [pc, #140]	; (800b7a0 <__register_exitproc+0xa4>)
 800b712:	681d      	ldr	r5, [r3, #0]
 800b714:	f8d5 0148 	ldr.w	r0, [r5, #328]	; 0x148
 800b718:	b918      	cbnz	r0, 800b722 <__register_exitproc+0x26>
 800b71a:	f505 70a6 	add.w	r0, r5, #332	; 0x14c
 800b71e:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 800b722:	6843      	ldr	r3, [r0, #4]
 800b724:	2b1f      	cmp	r3, #31
 800b726:	dd19      	ble.n	800b75c <__register_exitproc+0x60>
 800b728:	4b1e      	ldr	r3, [pc, #120]	; (800b7a4 <__register_exitproc+0xa8>)
 800b72a:	b933      	cbnz	r3, 800b73a <__register_exitproc+0x3e>
 800b72c:	6820      	ldr	r0, [r4, #0]
 800b72e:	f7ff ffe4 	bl	800b6fa <__retarget_lock_release_recursive>
 800b732:	f04f 30ff 	mov.w	r0, #4294967295
 800b736:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b73a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800b73e:	f3af 8000 	nop.w
 800b742:	2800      	cmp	r0, #0
 800b744:	d0f2      	beq.n	800b72c <__register_exitproc+0x30>
 800b746:	2200      	movs	r2, #0
 800b748:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 800b74c:	6042      	str	r2, [r0, #4]
 800b74e:	6003      	str	r3, [r0, #0]
 800b750:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 800b754:	f8c0 2188 	str.w	r2, [r0, #392]	; 0x188
 800b758:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
 800b75c:	6843      	ldr	r3, [r0, #4]
 800b75e:	b19e      	cbz	r6, 800b788 <__register_exitproc+0x8c>
 800b760:	2201      	movs	r2, #1
 800b762:	eb00 0583 	add.w	r5, r0, r3, lsl #2
 800b766:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
 800b76a:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
 800b76e:	409a      	lsls	r2, r3
 800b770:	4311      	orrs	r1, r2
 800b772:	2e02      	cmp	r6, #2
 800b774:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
 800b778:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
 800b77c:	bf02      	ittt	eq
 800b77e:	f8d0 118c 	ldreq.w	r1, [r0, #396]	; 0x18c
 800b782:	430a      	orreq	r2, r1
 800b784:	f8c0 218c 	streq.w	r2, [r0, #396]	; 0x18c
 800b788:	1c5a      	adds	r2, r3, #1
 800b78a:	3302      	adds	r3, #2
 800b78c:	6042      	str	r2, [r0, #4]
 800b78e:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
 800b792:	6820      	ldr	r0, [r4, #0]
 800b794:	f7ff ffb1 	bl	800b6fa <__retarget_lock_release_recursive>
 800b798:	2000      	movs	r0, #0
 800b79a:	e7cc      	b.n	800b736 <__register_exitproc+0x3a>
 800b79c:	20000530 	.word	0x20000530
 800b7a0:	0800cbd4 	.word	0x0800cbd4
 800b7a4:	00000000 	.word	0x00000000

0800b7a8 <ceilf>:
 800b7a8:	b570      	push	{r4, r5, r6, lr}
 800b7aa:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800b7ae:	0df5      	lsrs	r5, r6, #23
 800b7b0:	3d7f      	subs	r5, #127	; 0x7f
 800b7b2:	2d16      	cmp	r5, #22
 800b7b4:	4601      	mov	r1, r0
 800b7b6:	4604      	mov	r4, r0
 800b7b8:	dc26      	bgt.n	800b808 <ceilf+0x60>
 800b7ba:	2d00      	cmp	r5, #0
 800b7bc:	da0e      	bge.n	800b7dc <ceilf+0x34>
 800b7be:	4918      	ldr	r1, [pc, #96]	; (800b820 <ceilf+0x78>)
 800b7c0:	f7f5 f972 	bl	8000aa8 <__addsf3>
 800b7c4:	2100      	movs	r1, #0
 800b7c6:	f7f5 fc33 	bl	8001030 <__aeabi_fcmpgt>
 800b7ca:	b128      	cbz	r0, 800b7d8 <ceilf+0x30>
 800b7cc:	2c00      	cmp	r4, #0
 800b7ce:	db23      	blt.n	800b818 <ceilf+0x70>
 800b7d0:	2e00      	cmp	r6, #0
 800b7d2:	bf18      	it	ne
 800b7d4:	f04f 547e 	movne.w	r4, #1065353216	; 0x3f800000
 800b7d8:	4621      	mov	r1, r4
 800b7da:	e01b      	b.n	800b814 <ceilf+0x6c>
 800b7dc:	4e11      	ldr	r6, [pc, #68]	; (800b824 <ceilf+0x7c>)
 800b7de:	412e      	asrs	r6, r5
 800b7e0:	4230      	tst	r0, r6
 800b7e2:	d017      	beq.n	800b814 <ceilf+0x6c>
 800b7e4:	490e      	ldr	r1, [pc, #56]	; (800b820 <ceilf+0x78>)
 800b7e6:	f7f5 f95f 	bl	8000aa8 <__addsf3>
 800b7ea:	2100      	movs	r1, #0
 800b7ec:	f7f5 fc20 	bl	8001030 <__aeabi_fcmpgt>
 800b7f0:	2800      	cmp	r0, #0
 800b7f2:	d0f1      	beq.n	800b7d8 <ceilf+0x30>
 800b7f4:	2c00      	cmp	r4, #0
 800b7f6:	bfc2      	ittt	gt
 800b7f8:	f44f 0300 	movgt.w	r3, #8388608	; 0x800000
 800b7fc:	fa43 f505 	asrgt.w	r5, r3, r5
 800b800:	1964      	addgt	r4, r4, r5
 800b802:	ea24 0406 	bic.w	r4, r4, r6
 800b806:	e7e7      	b.n	800b7d8 <ceilf+0x30>
 800b808:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800b80c:	d302      	bcc.n	800b814 <ceilf+0x6c>
 800b80e:	f7f5 f94b 	bl	8000aa8 <__addsf3>
 800b812:	4601      	mov	r1, r0
 800b814:	4608      	mov	r0, r1
 800b816:	bd70      	pop	{r4, r5, r6, pc}
 800b818:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800b81c:	e7dc      	b.n	800b7d8 <ceilf+0x30>
 800b81e:	bf00      	nop
 800b820:	7149f2ca 	.word	0x7149f2ca
 800b824:	007fffff 	.word	0x007fffff

0800b828 <cosf>:
 800b828:	b507      	push	{r0, r1, r2, lr}
 800b82a:	4a18      	ldr	r2, [pc, #96]	; (800b88c <cosf+0x64>)
 800b82c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800b830:	4293      	cmp	r3, r2
 800b832:	4601      	mov	r1, r0
 800b834:	dc03      	bgt.n	800b83e <cosf+0x16>
 800b836:	2100      	movs	r1, #0
 800b838:	f000 fb54 	bl	800bee4 <__kernel_cosf>
 800b83c:	e004      	b.n	800b848 <cosf+0x20>
 800b83e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b842:	db04      	blt.n	800b84e <cosf+0x26>
 800b844:	f7f5 f92e 	bl	8000aa4 <__aeabi_fsub>
 800b848:	b003      	add	sp, #12
 800b84a:	f85d fb04 	ldr.w	pc, [sp], #4
 800b84e:	4669      	mov	r1, sp
 800b850:	f000 f99c 	bl	800bb8c <__ieee754_rem_pio2f>
 800b854:	f000 0203 	and.w	r2, r0, #3
 800b858:	2a01      	cmp	r2, #1
 800b85a:	d005      	beq.n	800b868 <cosf+0x40>
 800b85c:	2a02      	cmp	r2, #2
 800b85e:	d00a      	beq.n	800b876 <cosf+0x4e>
 800b860:	b972      	cbnz	r2, 800b880 <cosf+0x58>
 800b862:	9901      	ldr	r1, [sp, #4]
 800b864:	9800      	ldr	r0, [sp, #0]
 800b866:	e7e7      	b.n	800b838 <cosf+0x10>
 800b868:	9901      	ldr	r1, [sp, #4]
 800b86a:	9800      	ldr	r0, [sp, #0]
 800b86c:	f000 fe58 	bl	800c520 <__kernel_sinf>
 800b870:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800b874:	e7e8      	b.n	800b848 <cosf+0x20>
 800b876:	9901      	ldr	r1, [sp, #4]
 800b878:	9800      	ldr	r0, [sp, #0]
 800b87a:	f000 fb33 	bl	800bee4 <__kernel_cosf>
 800b87e:	e7f7      	b.n	800b870 <cosf+0x48>
 800b880:	2201      	movs	r2, #1
 800b882:	9901      	ldr	r1, [sp, #4]
 800b884:	9800      	ldr	r0, [sp, #0]
 800b886:	f000 fe4b 	bl	800c520 <__kernel_sinf>
 800b88a:	e7dd      	b.n	800b848 <cosf+0x20>
 800b88c:	3f490fd8 	.word	0x3f490fd8

0800b890 <floorf>:
 800b890:	b570      	push	{r4, r5, r6, lr}
 800b892:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800b896:	0df5      	lsrs	r5, r6, #23
 800b898:	3d7f      	subs	r5, #127	; 0x7f
 800b89a:	2d16      	cmp	r5, #22
 800b89c:	4601      	mov	r1, r0
 800b89e:	4604      	mov	r4, r0
 800b8a0:	dc26      	bgt.n	800b8f0 <floorf+0x60>
 800b8a2:	2d00      	cmp	r5, #0
 800b8a4:	da0e      	bge.n	800b8c4 <floorf+0x34>
 800b8a6:	4917      	ldr	r1, [pc, #92]	; (800b904 <floorf+0x74>)
 800b8a8:	f7f5 f8fe 	bl	8000aa8 <__addsf3>
 800b8ac:	2100      	movs	r1, #0
 800b8ae:	f7f5 fbbf 	bl	8001030 <__aeabi_fcmpgt>
 800b8b2:	b128      	cbz	r0, 800b8c0 <floorf+0x30>
 800b8b4:	2c00      	cmp	r4, #0
 800b8b6:	da23      	bge.n	800b900 <floorf+0x70>
 800b8b8:	4b13      	ldr	r3, [pc, #76]	; (800b908 <floorf+0x78>)
 800b8ba:	2e00      	cmp	r6, #0
 800b8bc:	bf18      	it	ne
 800b8be:	461c      	movne	r4, r3
 800b8c0:	4621      	mov	r1, r4
 800b8c2:	e01b      	b.n	800b8fc <floorf+0x6c>
 800b8c4:	4e11      	ldr	r6, [pc, #68]	; (800b90c <floorf+0x7c>)
 800b8c6:	412e      	asrs	r6, r5
 800b8c8:	4230      	tst	r0, r6
 800b8ca:	d017      	beq.n	800b8fc <floorf+0x6c>
 800b8cc:	490d      	ldr	r1, [pc, #52]	; (800b904 <floorf+0x74>)
 800b8ce:	f7f5 f8eb 	bl	8000aa8 <__addsf3>
 800b8d2:	2100      	movs	r1, #0
 800b8d4:	f7f5 fbac 	bl	8001030 <__aeabi_fcmpgt>
 800b8d8:	2800      	cmp	r0, #0
 800b8da:	d0f1      	beq.n	800b8c0 <floorf+0x30>
 800b8dc:	2c00      	cmp	r4, #0
 800b8de:	bfbe      	ittt	lt
 800b8e0:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 800b8e4:	fa43 f505 	asrlt.w	r5, r3, r5
 800b8e8:	1964      	addlt	r4, r4, r5
 800b8ea:	ea24 0406 	bic.w	r4, r4, r6
 800b8ee:	e7e7      	b.n	800b8c0 <floorf+0x30>
 800b8f0:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800b8f4:	d302      	bcc.n	800b8fc <floorf+0x6c>
 800b8f6:	f7f5 f8d7 	bl	8000aa8 <__addsf3>
 800b8fa:	4601      	mov	r1, r0
 800b8fc:	4608      	mov	r0, r1
 800b8fe:	bd70      	pop	{r4, r5, r6, pc}
 800b900:	2400      	movs	r4, #0
 800b902:	e7dd      	b.n	800b8c0 <floorf+0x30>
 800b904:	7149f2ca 	.word	0x7149f2ca
 800b908:	bf800000 	.word	0xbf800000
 800b90c:	007fffff 	.word	0x007fffff

0800b910 <lroundf>:
 800b910:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800b914:	2800      	cmp	r0, #0
 800b916:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 800b91a:	b510      	push	{r4, lr}
 800b91c:	bfb4      	ite	lt
 800b91e:	f04f 34ff 	movlt.w	r4, #4294967295
 800b922:	2401      	movge	r4, #1
 800b924:	2a1e      	cmp	r2, #30
 800b926:	dc1b      	bgt.n	800b960 <lroundf+0x50>
 800b928:	2a00      	cmp	r2, #0
 800b92a:	da04      	bge.n	800b936 <lroundf+0x26>
 800b92c:	3201      	adds	r2, #1
 800b92e:	bf18      	it	ne
 800b930:	2400      	movne	r4, #0
 800b932:	4620      	mov	r0, r4
 800b934:	bd10      	pop	{r4, pc}
 800b936:	2a16      	cmp	r2, #22
 800b938:	bfd8      	it	le
 800b93a:	f44f 0380 	movle.w	r3, #4194304	; 0x400000
 800b93e:	f3c0 0116 	ubfx	r1, r0, #0, #23
 800b942:	bfd8      	it	le
 800b944:	4113      	asrle	r3, r2
 800b946:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800b94a:	bfcd      	iteet	gt
 800b94c:	3b96      	subgt	r3, #150	; 0x96
 800b94e:	185b      	addle	r3, r3, r1
 800b950:	f1c2 0217 	rsble	r2, r2, #23
 800b954:	fa01 f303 	lslgt.w	r3, r1, r3
 800b958:	bfd8      	it	le
 800b95a:	40d3      	lsrle	r3, r2
 800b95c:	435c      	muls	r4, r3
 800b95e:	e7e8      	b.n	800b932 <lroundf+0x22>
 800b960:	f7f5 fb86 	bl	8001070 <__aeabi_f2iz>
 800b964:	4604      	mov	r4, r0
 800b966:	e7e4      	b.n	800b932 <lroundf+0x22>

0800b968 <sinf>:
 800b968:	b507      	push	{r0, r1, r2, lr}
 800b96a:	4a19      	ldr	r2, [pc, #100]	; (800b9d0 <sinf+0x68>)
 800b96c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800b970:	4293      	cmp	r3, r2
 800b972:	4601      	mov	r1, r0
 800b974:	dc04      	bgt.n	800b980 <sinf+0x18>
 800b976:	2200      	movs	r2, #0
 800b978:	2100      	movs	r1, #0
 800b97a:	f000 fdd1 	bl	800c520 <__kernel_sinf>
 800b97e:	e004      	b.n	800b98a <sinf+0x22>
 800b980:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b984:	db04      	blt.n	800b990 <sinf+0x28>
 800b986:	f7f5 f88d 	bl	8000aa4 <__aeabi_fsub>
 800b98a:	b003      	add	sp, #12
 800b98c:	f85d fb04 	ldr.w	pc, [sp], #4
 800b990:	4669      	mov	r1, sp
 800b992:	f000 f8fb 	bl	800bb8c <__ieee754_rem_pio2f>
 800b996:	f000 0003 	and.w	r0, r0, #3
 800b99a:	2801      	cmp	r0, #1
 800b99c:	d006      	beq.n	800b9ac <sinf+0x44>
 800b99e:	2802      	cmp	r0, #2
 800b9a0:	d009      	beq.n	800b9b6 <sinf+0x4e>
 800b9a2:	b980      	cbnz	r0, 800b9c6 <sinf+0x5e>
 800b9a4:	2201      	movs	r2, #1
 800b9a6:	9901      	ldr	r1, [sp, #4]
 800b9a8:	9800      	ldr	r0, [sp, #0]
 800b9aa:	e7e6      	b.n	800b97a <sinf+0x12>
 800b9ac:	9901      	ldr	r1, [sp, #4]
 800b9ae:	9800      	ldr	r0, [sp, #0]
 800b9b0:	f000 fa98 	bl	800bee4 <__kernel_cosf>
 800b9b4:	e7e9      	b.n	800b98a <sinf+0x22>
 800b9b6:	2201      	movs	r2, #1
 800b9b8:	9901      	ldr	r1, [sp, #4]
 800b9ba:	9800      	ldr	r0, [sp, #0]
 800b9bc:	f000 fdb0 	bl	800c520 <__kernel_sinf>
 800b9c0:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800b9c4:	e7e1      	b.n	800b98a <sinf+0x22>
 800b9c6:	9901      	ldr	r1, [sp, #4]
 800b9c8:	9800      	ldr	r0, [sp, #0]
 800b9ca:	f000 fa8b 	bl	800bee4 <__kernel_cosf>
 800b9ce:	e7f7      	b.n	800b9c0 <sinf+0x58>
 800b9d0:	3f490fd8 	.word	0x3f490fd8

0800b9d4 <atan2f>:
 800b9d4:	f000 b84a 	b.w	800ba6c <__ieee754_atan2f>

0800b9d8 <sqrtf>:
 800b9d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b9da:	b08b      	sub	sp, #44	; 0x2c
 800b9dc:	4604      	mov	r4, r0
 800b9de:	f000 fa2d 	bl	800be3c <__ieee754_sqrtf>
 800b9e2:	4b20      	ldr	r3, [pc, #128]	; (800ba64 <sqrtf+0x8c>)
 800b9e4:	4606      	mov	r6, r0
 800b9e6:	f993 5000 	ldrsb.w	r5, [r3]
 800b9ea:	1c6b      	adds	r3, r5, #1
 800b9ec:	d02a      	beq.n	800ba44 <sqrtf+0x6c>
 800b9ee:	4621      	mov	r1, r4
 800b9f0:	4620      	mov	r0, r4
 800b9f2:	f7f5 fb27 	bl	8001044 <__aeabi_fcmpun>
 800b9f6:	4607      	mov	r7, r0
 800b9f8:	bb20      	cbnz	r0, 800ba44 <sqrtf+0x6c>
 800b9fa:	2100      	movs	r1, #0
 800b9fc:	4620      	mov	r0, r4
 800b9fe:	f7f5 faf9 	bl	8000ff4 <__aeabi_fcmplt>
 800ba02:	b1f8      	cbz	r0, 800ba44 <sqrtf+0x6c>
 800ba04:	2301      	movs	r3, #1
 800ba06:	9300      	str	r3, [sp, #0]
 800ba08:	4b17      	ldr	r3, [pc, #92]	; (800ba68 <sqrtf+0x90>)
 800ba0a:	4620      	mov	r0, r4
 800ba0c:	9301      	str	r3, [sp, #4]
 800ba0e:	9708      	str	r7, [sp, #32]
 800ba10:	f7f4 fd02 	bl	8000418 <__aeabi_f2d>
 800ba14:	2200      	movs	r2, #0
 800ba16:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ba1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ba1e:	2300      	movs	r3, #0
 800ba20:	b99d      	cbnz	r5, 800ba4a <sqrtf+0x72>
 800ba22:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ba26:	4668      	mov	r0, sp
 800ba28:	f000 fdf0 	bl	800c60c <matherr>
 800ba2c:	b1a8      	cbz	r0, 800ba5a <sqrtf+0x82>
 800ba2e:	9b08      	ldr	r3, [sp, #32]
 800ba30:	b11b      	cbz	r3, 800ba3a <sqrtf+0x62>
 800ba32:	f000 ff4f 	bl	800c8d4 <__errno>
 800ba36:	9b08      	ldr	r3, [sp, #32]
 800ba38:	6003      	str	r3, [r0, #0]
 800ba3a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ba3e:	f7f4 ffdd 	bl	80009fc <__aeabi_d2f>
 800ba42:	4606      	mov	r6, r0
 800ba44:	4630      	mov	r0, r6
 800ba46:	b00b      	add	sp, #44	; 0x2c
 800ba48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba4a:	4610      	mov	r0, r2
 800ba4c:	4619      	mov	r1, r3
 800ba4e:	f7f4 fe65 	bl	800071c <__aeabi_ddiv>
 800ba52:	2d02      	cmp	r5, #2
 800ba54:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ba58:	d1e5      	bne.n	800ba26 <sqrtf+0x4e>
 800ba5a:	f000 ff3b 	bl	800c8d4 <__errno>
 800ba5e:	2321      	movs	r3, #33	; 0x21
 800ba60:	6003      	str	r3, [r0, #0]
 800ba62:	e7e4      	b.n	800ba2e <sqrtf+0x56>
 800ba64:	20000534 	.word	0x20000534
 800ba68:	0800cbfd 	.word	0x0800cbfd

0800ba6c <__ieee754_atan2f>:
 800ba6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba6e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800ba72:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800ba76:	4603      	mov	r3, r0
 800ba78:	dc05      	bgt.n	800ba86 <__ieee754_atan2f+0x1a>
 800ba7a:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800ba7e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800ba82:	4607      	mov	r7, r0
 800ba84:	dd04      	ble.n	800ba90 <__ieee754_atan2f+0x24>
 800ba86:	4618      	mov	r0, r3
 800ba88:	f7f5 f80e 	bl	8000aa8 <__addsf3>
 800ba8c:	4603      	mov	r3, r0
 800ba8e:	e024      	b.n	800bada <__ieee754_atan2f+0x6e>
 800ba90:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800ba94:	d103      	bne.n	800ba9e <__ieee754_atan2f+0x32>
 800ba96:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ba9a:	f000 bdb9 	b.w	800c610 <atanf>
 800ba9e:	178c      	asrs	r4, r1, #30
 800baa0:	f004 0402 	and.w	r4, r4, #2
 800baa4:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800baa8:	b92a      	cbnz	r2, 800bab6 <__ieee754_atan2f+0x4a>
 800baaa:	2c02      	cmp	r4, #2
 800baac:	d057      	beq.n	800bb5e <__ieee754_atan2f+0xf2>
 800baae:	2c03      	cmp	r4, #3
 800bab0:	d113      	bne.n	800bada <__ieee754_atan2f+0x6e>
 800bab2:	4b2d      	ldr	r3, [pc, #180]	; (800bb68 <__ieee754_atan2f+0xfc>)
 800bab4:	e011      	b.n	800bada <__ieee754_atan2f+0x6e>
 800bab6:	b91e      	cbnz	r6, 800bac0 <__ieee754_atan2f+0x54>
 800bab8:	2f00      	cmp	r7, #0
 800baba:	da52      	bge.n	800bb62 <__ieee754_atan2f+0xf6>
 800babc:	4b2b      	ldr	r3, [pc, #172]	; (800bb6c <__ieee754_atan2f+0x100>)
 800babe:	e00c      	b.n	800bada <__ieee754_atan2f+0x6e>
 800bac0:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800bac4:	d11a      	bne.n	800bafc <__ieee754_atan2f+0x90>
 800bac6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800baca:	d10c      	bne.n	800bae6 <__ieee754_atan2f+0x7a>
 800bacc:	2c02      	cmp	r4, #2
 800bace:	d006      	beq.n	800bade <__ieee754_atan2f+0x72>
 800bad0:	2c03      	cmp	r4, #3
 800bad2:	d006      	beq.n	800bae2 <__ieee754_atan2f+0x76>
 800bad4:	2c01      	cmp	r4, #1
 800bad6:	d140      	bne.n	800bb5a <__ieee754_atan2f+0xee>
 800bad8:	4b25      	ldr	r3, [pc, #148]	; (800bb70 <__ieee754_atan2f+0x104>)
 800bada:	4618      	mov	r0, r3
 800badc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bade:	4b25      	ldr	r3, [pc, #148]	; (800bb74 <__ieee754_atan2f+0x108>)
 800bae0:	e7fb      	b.n	800bada <__ieee754_atan2f+0x6e>
 800bae2:	4b25      	ldr	r3, [pc, #148]	; (800bb78 <__ieee754_atan2f+0x10c>)
 800bae4:	e7f9      	b.n	800bada <__ieee754_atan2f+0x6e>
 800bae6:	2c02      	cmp	r4, #2
 800bae8:	d039      	beq.n	800bb5e <__ieee754_atan2f+0xf2>
 800baea:	2c03      	cmp	r4, #3
 800baec:	d0e1      	beq.n	800bab2 <__ieee754_atan2f+0x46>
 800baee:	2c01      	cmp	r4, #1
 800baf0:	d102      	bne.n	800baf8 <__ieee754_atan2f+0x8c>
 800baf2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800baf6:	e7f0      	b.n	800bada <__ieee754_atan2f+0x6e>
 800baf8:	2300      	movs	r3, #0
 800bafa:	e7ee      	b.n	800bada <__ieee754_atan2f+0x6e>
 800bafc:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800bb00:	d0da      	beq.n	800bab8 <__ieee754_atan2f+0x4c>
 800bb02:	1b92      	subs	r2, r2, r6
 800bb04:	15d2      	asrs	r2, r2, #23
 800bb06:	2a3c      	cmp	r2, #60	; 0x3c
 800bb08:	dc17      	bgt.n	800bb3a <__ieee754_atan2f+0xce>
 800bb0a:	2900      	cmp	r1, #0
 800bb0c:	da01      	bge.n	800bb12 <__ieee754_atan2f+0xa6>
 800bb0e:	323c      	adds	r2, #60	; 0x3c
 800bb10:	db15      	blt.n	800bb3e <__ieee754_atan2f+0xd2>
 800bb12:	4618      	mov	r0, r3
 800bb14:	f7f5 f984 	bl	8000e20 <__aeabi_fdiv>
 800bb18:	f000 fe86 	bl	800c828 <fabsf>
 800bb1c:	f000 fd78 	bl	800c610 <atanf>
 800bb20:	4603      	mov	r3, r0
 800bb22:	2c01      	cmp	r4, #1
 800bb24:	d00d      	beq.n	800bb42 <__ieee754_atan2f+0xd6>
 800bb26:	2c02      	cmp	r4, #2
 800bb28:	d00e      	beq.n	800bb48 <__ieee754_atan2f+0xdc>
 800bb2a:	2c00      	cmp	r4, #0
 800bb2c:	d0d5      	beq.n	800bada <__ieee754_atan2f+0x6e>
 800bb2e:	4913      	ldr	r1, [pc, #76]	; (800bb7c <__ieee754_atan2f+0x110>)
 800bb30:	4618      	mov	r0, r3
 800bb32:	f7f4 ffb9 	bl	8000aa8 <__addsf3>
 800bb36:	4912      	ldr	r1, [pc, #72]	; (800bb80 <__ieee754_atan2f+0x114>)
 800bb38:	e00c      	b.n	800bb54 <__ieee754_atan2f+0xe8>
 800bb3a:	4b12      	ldr	r3, [pc, #72]	; (800bb84 <__ieee754_atan2f+0x118>)
 800bb3c:	e7f1      	b.n	800bb22 <__ieee754_atan2f+0xb6>
 800bb3e:	2300      	movs	r3, #0
 800bb40:	e7ef      	b.n	800bb22 <__ieee754_atan2f+0xb6>
 800bb42:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bb46:	e7c8      	b.n	800bada <__ieee754_atan2f+0x6e>
 800bb48:	490c      	ldr	r1, [pc, #48]	; (800bb7c <__ieee754_atan2f+0x110>)
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	f7f4 ffac 	bl	8000aa8 <__addsf3>
 800bb50:	4601      	mov	r1, r0
 800bb52:	480b      	ldr	r0, [pc, #44]	; (800bb80 <__ieee754_atan2f+0x114>)
 800bb54:	f7f4 ffa6 	bl	8000aa4 <__aeabi_fsub>
 800bb58:	e798      	b.n	800ba8c <__ieee754_atan2f+0x20>
 800bb5a:	4b0b      	ldr	r3, [pc, #44]	; (800bb88 <__ieee754_atan2f+0x11c>)
 800bb5c:	e7bd      	b.n	800bada <__ieee754_atan2f+0x6e>
 800bb5e:	4b08      	ldr	r3, [pc, #32]	; (800bb80 <__ieee754_atan2f+0x114>)
 800bb60:	e7bb      	b.n	800bada <__ieee754_atan2f+0x6e>
 800bb62:	4b08      	ldr	r3, [pc, #32]	; (800bb84 <__ieee754_atan2f+0x118>)
 800bb64:	e7b9      	b.n	800bada <__ieee754_atan2f+0x6e>
 800bb66:	bf00      	nop
 800bb68:	c0490fdb 	.word	0xc0490fdb
 800bb6c:	bfc90fdb 	.word	0xbfc90fdb
 800bb70:	bf490fdb 	.word	0xbf490fdb
 800bb74:	4016cbe4 	.word	0x4016cbe4
 800bb78:	c016cbe4 	.word	0xc016cbe4
 800bb7c:	33bbbd2e 	.word	0x33bbbd2e
 800bb80:	40490fdb 	.word	0x40490fdb
 800bb84:	3fc90fdb 	.word	0x3fc90fdb
 800bb88:	3f490fdb 	.word	0x3f490fdb

0800bb8c <__ieee754_rem_pio2f>:
 800bb8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb90:	4a9d      	ldr	r2, [pc, #628]	; (800be08 <__ieee754_rem_pio2f+0x27c>)
 800bb92:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800bb96:	4295      	cmp	r5, r2
 800bb98:	b087      	sub	sp, #28
 800bb9a:	460c      	mov	r4, r1
 800bb9c:	4607      	mov	r7, r0
 800bb9e:	dc04      	bgt.n	800bbaa <__ieee754_rem_pio2f+0x1e>
 800bba0:	2300      	movs	r3, #0
 800bba2:	6020      	str	r0, [r4, #0]
 800bba4:	604b      	str	r3, [r1, #4]
 800bba6:	2600      	movs	r6, #0
 800bba8:	e01a      	b.n	800bbe0 <__ieee754_rem_pio2f+0x54>
 800bbaa:	4a98      	ldr	r2, [pc, #608]	; (800be0c <__ieee754_rem_pio2f+0x280>)
 800bbac:	4295      	cmp	r5, r2
 800bbae:	dc4b      	bgt.n	800bc48 <__ieee754_rem_pio2f+0xbc>
 800bbb0:	2800      	cmp	r0, #0
 800bbb2:	f025 050f 	bic.w	r5, r5, #15
 800bbb6:	4996      	ldr	r1, [pc, #600]	; (800be10 <__ieee754_rem_pio2f+0x284>)
 800bbb8:	4e96      	ldr	r6, [pc, #600]	; (800be14 <__ieee754_rem_pio2f+0x288>)
 800bbba:	dd23      	ble.n	800bc04 <__ieee754_rem_pio2f+0x78>
 800bbbc:	f7f4 ff72 	bl	8000aa4 <__aeabi_fsub>
 800bbc0:	42b5      	cmp	r5, r6
 800bbc2:	4607      	mov	r7, r0
 800bbc4:	d010      	beq.n	800bbe8 <__ieee754_rem_pio2f+0x5c>
 800bbc6:	4994      	ldr	r1, [pc, #592]	; (800be18 <__ieee754_rem_pio2f+0x28c>)
 800bbc8:	f7f4 ff6c 	bl	8000aa4 <__aeabi_fsub>
 800bbcc:	4601      	mov	r1, r0
 800bbce:	6020      	str	r0, [r4, #0]
 800bbd0:	4638      	mov	r0, r7
 800bbd2:	f7f4 ff67 	bl	8000aa4 <__aeabi_fsub>
 800bbd6:	4990      	ldr	r1, [pc, #576]	; (800be18 <__ieee754_rem_pio2f+0x28c>)
 800bbd8:	f7f4 ff64 	bl	8000aa4 <__aeabi_fsub>
 800bbdc:	2601      	movs	r6, #1
 800bbde:	6060      	str	r0, [r4, #4]
 800bbe0:	4630      	mov	r0, r6
 800bbe2:	b007      	add	sp, #28
 800bbe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbe8:	498c      	ldr	r1, [pc, #560]	; (800be1c <__ieee754_rem_pio2f+0x290>)
 800bbea:	f7f4 ff5b 	bl	8000aa4 <__aeabi_fsub>
 800bbee:	498c      	ldr	r1, [pc, #560]	; (800be20 <__ieee754_rem_pio2f+0x294>)
 800bbf0:	4605      	mov	r5, r0
 800bbf2:	f7f4 ff57 	bl	8000aa4 <__aeabi_fsub>
 800bbf6:	4601      	mov	r1, r0
 800bbf8:	6020      	str	r0, [r4, #0]
 800bbfa:	4628      	mov	r0, r5
 800bbfc:	f7f4 ff52 	bl	8000aa4 <__aeabi_fsub>
 800bc00:	4987      	ldr	r1, [pc, #540]	; (800be20 <__ieee754_rem_pio2f+0x294>)
 800bc02:	e7e9      	b.n	800bbd8 <__ieee754_rem_pio2f+0x4c>
 800bc04:	f7f4 ff50 	bl	8000aa8 <__addsf3>
 800bc08:	42b5      	cmp	r5, r6
 800bc0a:	4607      	mov	r7, r0
 800bc0c:	d00e      	beq.n	800bc2c <__ieee754_rem_pio2f+0xa0>
 800bc0e:	4982      	ldr	r1, [pc, #520]	; (800be18 <__ieee754_rem_pio2f+0x28c>)
 800bc10:	f7f4 ff4a 	bl	8000aa8 <__addsf3>
 800bc14:	4601      	mov	r1, r0
 800bc16:	6020      	str	r0, [r4, #0]
 800bc18:	4638      	mov	r0, r7
 800bc1a:	f7f4 ff43 	bl	8000aa4 <__aeabi_fsub>
 800bc1e:	497e      	ldr	r1, [pc, #504]	; (800be18 <__ieee754_rem_pio2f+0x28c>)
 800bc20:	f7f4 ff42 	bl	8000aa8 <__addsf3>
 800bc24:	f04f 36ff 	mov.w	r6, #4294967295
 800bc28:	6060      	str	r0, [r4, #4]
 800bc2a:	e7d9      	b.n	800bbe0 <__ieee754_rem_pio2f+0x54>
 800bc2c:	497b      	ldr	r1, [pc, #492]	; (800be1c <__ieee754_rem_pio2f+0x290>)
 800bc2e:	f7f4 ff3b 	bl	8000aa8 <__addsf3>
 800bc32:	497b      	ldr	r1, [pc, #492]	; (800be20 <__ieee754_rem_pio2f+0x294>)
 800bc34:	4605      	mov	r5, r0
 800bc36:	f7f4 ff37 	bl	8000aa8 <__addsf3>
 800bc3a:	4601      	mov	r1, r0
 800bc3c:	6020      	str	r0, [r4, #0]
 800bc3e:	4628      	mov	r0, r5
 800bc40:	f7f4 ff30 	bl	8000aa4 <__aeabi_fsub>
 800bc44:	4976      	ldr	r1, [pc, #472]	; (800be20 <__ieee754_rem_pio2f+0x294>)
 800bc46:	e7eb      	b.n	800bc20 <__ieee754_rem_pio2f+0x94>
 800bc48:	4a76      	ldr	r2, [pc, #472]	; (800be24 <__ieee754_rem_pio2f+0x298>)
 800bc4a:	4295      	cmp	r5, r2
 800bc4c:	f300 808c 	bgt.w	800bd68 <__ieee754_rem_pio2f+0x1dc>
 800bc50:	f000 fdea 	bl	800c828 <fabsf>
 800bc54:	4974      	ldr	r1, [pc, #464]	; (800be28 <__ieee754_rem_pio2f+0x29c>)
 800bc56:	4680      	mov	r8, r0
 800bc58:	f7f5 f82e 	bl	8000cb8 <__aeabi_fmul>
 800bc5c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800bc60:	f7f4 ff22 	bl	8000aa8 <__addsf3>
 800bc64:	f7f5 fa04 	bl	8001070 <__aeabi_f2iz>
 800bc68:	4606      	mov	r6, r0
 800bc6a:	f7f4 ffd1 	bl	8000c10 <__aeabi_i2f>
 800bc6e:	4968      	ldr	r1, [pc, #416]	; (800be10 <__ieee754_rem_pio2f+0x284>)
 800bc70:	4682      	mov	sl, r0
 800bc72:	f7f5 f821 	bl	8000cb8 <__aeabi_fmul>
 800bc76:	4601      	mov	r1, r0
 800bc78:	4640      	mov	r0, r8
 800bc7a:	f7f4 ff13 	bl	8000aa4 <__aeabi_fsub>
 800bc7e:	4966      	ldr	r1, [pc, #408]	; (800be18 <__ieee754_rem_pio2f+0x28c>)
 800bc80:	4680      	mov	r8, r0
 800bc82:	4650      	mov	r0, sl
 800bc84:	f7f5 f818 	bl	8000cb8 <__aeabi_fmul>
 800bc88:	2e1f      	cmp	r6, #31
 800bc8a:	4681      	mov	r9, r0
 800bc8c:	dc0c      	bgt.n	800bca8 <__ieee754_rem_pio2f+0x11c>
 800bc8e:	4a67      	ldr	r2, [pc, #412]	; (800be2c <__ieee754_rem_pio2f+0x2a0>)
 800bc90:	1e71      	subs	r1, r6, #1
 800bc92:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800bc96:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800bc9a:	4293      	cmp	r3, r2
 800bc9c:	d004      	beq.n	800bca8 <__ieee754_rem_pio2f+0x11c>
 800bc9e:	4649      	mov	r1, r9
 800bca0:	4640      	mov	r0, r8
 800bca2:	f7f4 feff 	bl	8000aa4 <__aeabi_fsub>
 800bca6:	e009      	b.n	800bcbc <__ieee754_rem_pio2f+0x130>
 800bca8:	4649      	mov	r1, r9
 800bcaa:	4640      	mov	r0, r8
 800bcac:	f7f4 fefa 	bl	8000aa4 <__aeabi_fsub>
 800bcb0:	15ed      	asrs	r5, r5, #23
 800bcb2:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800bcb6:	1aeb      	subs	r3, r5, r3
 800bcb8:	2b08      	cmp	r3, #8
 800bcba:	dc01      	bgt.n	800bcc0 <__ieee754_rem_pio2f+0x134>
 800bcbc:	6020      	str	r0, [r4, #0]
 800bcbe:	e024      	b.n	800bd0a <__ieee754_rem_pio2f+0x17e>
 800bcc0:	4956      	ldr	r1, [pc, #344]	; (800be1c <__ieee754_rem_pio2f+0x290>)
 800bcc2:	4650      	mov	r0, sl
 800bcc4:	f7f4 fff8 	bl	8000cb8 <__aeabi_fmul>
 800bcc8:	4681      	mov	r9, r0
 800bcca:	4601      	mov	r1, r0
 800bccc:	4640      	mov	r0, r8
 800bcce:	f7f4 fee9 	bl	8000aa4 <__aeabi_fsub>
 800bcd2:	4601      	mov	r1, r0
 800bcd4:	4683      	mov	fp, r0
 800bcd6:	4640      	mov	r0, r8
 800bcd8:	f7f4 fee4 	bl	8000aa4 <__aeabi_fsub>
 800bcdc:	4649      	mov	r1, r9
 800bcde:	f7f4 fee1 	bl	8000aa4 <__aeabi_fsub>
 800bce2:	4680      	mov	r8, r0
 800bce4:	494e      	ldr	r1, [pc, #312]	; (800be20 <__ieee754_rem_pio2f+0x294>)
 800bce6:	4650      	mov	r0, sl
 800bce8:	f7f4 ffe6 	bl	8000cb8 <__aeabi_fmul>
 800bcec:	4641      	mov	r1, r8
 800bcee:	f7f4 fed9 	bl	8000aa4 <__aeabi_fsub>
 800bcf2:	4601      	mov	r1, r0
 800bcf4:	4681      	mov	r9, r0
 800bcf6:	4658      	mov	r0, fp
 800bcf8:	f7f4 fed4 	bl	8000aa4 <__aeabi_fsub>
 800bcfc:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800bd00:	1aed      	subs	r5, r5, r3
 800bd02:	2d19      	cmp	r5, #25
 800bd04:	dc15      	bgt.n	800bd32 <__ieee754_rem_pio2f+0x1a6>
 800bd06:	46d8      	mov	r8, fp
 800bd08:	6020      	str	r0, [r4, #0]
 800bd0a:	6825      	ldr	r5, [r4, #0]
 800bd0c:	4640      	mov	r0, r8
 800bd0e:	4629      	mov	r1, r5
 800bd10:	f7f4 fec8 	bl	8000aa4 <__aeabi_fsub>
 800bd14:	4649      	mov	r1, r9
 800bd16:	f7f4 fec5 	bl	8000aa4 <__aeabi_fsub>
 800bd1a:	2f00      	cmp	r7, #0
 800bd1c:	6060      	str	r0, [r4, #4]
 800bd1e:	f6bf af5f 	bge.w	800bbe0 <__ieee754_rem_pio2f+0x54>
 800bd22:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 800bd26:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800bd2a:	6025      	str	r5, [r4, #0]
 800bd2c:	6060      	str	r0, [r4, #4]
 800bd2e:	4276      	negs	r6, r6
 800bd30:	e756      	b.n	800bbe0 <__ieee754_rem_pio2f+0x54>
 800bd32:	493f      	ldr	r1, [pc, #252]	; (800be30 <__ieee754_rem_pio2f+0x2a4>)
 800bd34:	4650      	mov	r0, sl
 800bd36:	f7f4 ffbf 	bl	8000cb8 <__aeabi_fmul>
 800bd3a:	4605      	mov	r5, r0
 800bd3c:	4601      	mov	r1, r0
 800bd3e:	4658      	mov	r0, fp
 800bd40:	f7f4 feb0 	bl	8000aa4 <__aeabi_fsub>
 800bd44:	4601      	mov	r1, r0
 800bd46:	4680      	mov	r8, r0
 800bd48:	4658      	mov	r0, fp
 800bd4a:	f7f4 feab 	bl	8000aa4 <__aeabi_fsub>
 800bd4e:	4629      	mov	r1, r5
 800bd50:	f7f4 fea8 	bl	8000aa4 <__aeabi_fsub>
 800bd54:	4605      	mov	r5, r0
 800bd56:	4937      	ldr	r1, [pc, #220]	; (800be34 <__ieee754_rem_pio2f+0x2a8>)
 800bd58:	4650      	mov	r0, sl
 800bd5a:	f7f4 ffad 	bl	8000cb8 <__aeabi_fmul>
 800bd5e:	4629      	mov	r1, r5
 800bd60:	f7f4 fea0 	bl	8000aa4 <__aeabi_fsub>
 800bd64:	4681      	mov	r9, r0
 800bd66:	e79a      	b.n	800bc9e <__ieee754_rem_pio2f+0x112>
 800bd68:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800bd6c:	db05      	blt.n	800bd7a <__ieee754_rem_pio2f+0x1ee>
 800bd6e:	4601      	mov	r1, r0
 800bd70:	f7f4 fe98 	bl	8000aa4 <__aeabi_fsub>
 800bd74:	6060      	str	r0, [r4, #4]
 800bd76:	6020      	str	r0, [r4, #0]
 800bd78:	e715      	b.n	800bba6 <__ieee754_rem_pio2f+0x1a>
 800bd7a:	15ee      	asrs	r6, r5, #23
 800bd7c:	3e86      	subs	r6, #134	; 0x86
 800bd7e:	eba5 55c6 	sub.w	r5, r5, r6, lsl #23
 800bd82:	4628      	mov	r0, r5
 800bd84:	f7f5 f974 	bl	8001070 <__aeabi_f2iz>
 800bd88:	f7f4 ff42 	bl	8000c10 <__aeabi_i2f>
 800bd8c:	4601      	mov	r1, r0
 800bd8e:	9003      	str	r0, [sp, #12]
 800bd90:	4628      	mov	r0, r5
 800bd92:	f7f4 fe87 	bl	8000aa4 <__aeabi_fsub>
 800bd96:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800bd9a:	f7f4 ff8d 	bl	8000cb8 <__aeabi_fmul>
 800bd9e:	4680      	mov	r8, r0
 800bda0:	f7f5 f966 	bl	8001070 <__aeabi_f2iz>
 800bda4:	f7f4 ff34 	bl	8000c10 <__aeabi_i2f>
 800bda8:	4601      	mov	r1, r0
 800bdaa:	9004      	str	r0, [sp, #16]
 800bdac:	4605      	mov	r5, r0
 800bdae:	4640      	mov	r0, r8
 800bdb0:	f7f4 fe78 	bl	8000aa4 <__aeabi_fsub>
 800bdb4:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800bdb8:	f7f4 ff7e 	bl	8000cb8 <__aeabi_fmul>
 800bdbc:	2100      	movs	r1, #0
 800bdbe:	9005      	str	r0, [sp, #20]
 800bdc0:	f7f5 f90e 	bl	8000fe0 <__aeabi_fcmpeq>
 800bdc4:	b1e8      	cbz	r0, 800be02 <__ieee754_rem_pio2f+0x276>
 800bdc6:	2100      	movs	r1, #0
 800bdc8:	4628      	mov	r0, r5
 800bdca:	f7f5 f909 	bl	8000fe0 <__aeabi_fcmpeq>
 800bdce:	2800      	cmp	r0, #0
 800bdd0:	bf14      	ite	ne
 800bdd2:	2301      	movne	r3, #1
 800bdd4:	2302      	moveq	r3, #2
 800bdd6:	4a18      	ldr	r2, [pc, #96]	; (800be38 <__ieee754_rem_pio2f+0x2ac>)
 800bdd8:	4621      	mov	r1, r4
 800bdda:	9201      	str	r2, [sp, #4]
 800bddc:	2202      	movs	r2, #2
 800bdde:	a803      	add	r0, sp, #12
 800bde0:	9200      	str	r2, [sp, #0]
 800bde2:	4632      	mov	r2, r6
 800bde4:	f000 f8fe 	bl	800bfe4 <__kernel_rem_pio2f>
 800bde8:	2f00      	cmp	r7, #0
 800bdea:	4606      	mov	r6, r0
 800bdec:	f6bf aef8 	bge.w	800bbe0 <__ieee754_rem_pio2f+0x54>
 800bdf0:	6823      	ldr	r3, [r4, #0]
 800bdf2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bdf6:	6023      	str	r3, [r4, #0]
 800bdf8:	6863      	ldr	r3, [r4, #4]
 800bdfa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bdfe:	6063      	str	r3, [r4, #4]
 800be00:	e795      	b.n	800bd2e <__ieee754_rem_pio2f+0x1a2>
 800be02:	2303      	movs	r3, #3
 800be04:	e7e7      	b.n	800bdd6 <__ieee754_rem_pio2f+0x24a>
 800be06:	bf00      	nop
 800be08:	3f490fd8 	.word	0x3f490fd8
 800be0c:	4016cbe3 	.word	0x4016cbe3
 800be10:	3fc90f80 	.word	0x3fc90f80
 800be14:	3fc90fd0 	.word	0x3fc90fd0
 800be18:	37354443 	.word	0x37354443
 800be1c:	37354400 	.word	0x37354400
 800be20:	2e85a308 	.word	0x2e85a308
 800be24:	43490f80 	.word	0x43490f80
 800be28:	3f22f984 	.word	0x3f22f984
 800be2c:	0800cc04 	.word	0x0800cc04
 800be30:	2e85a300 	.word	0x2e85a300
 800be34:	248d3132 	.word	0x248d3132
 800be38:	0800cc84 	.word	0x0800cc84

0800be3c <__ieee754_sqrtf>:
 800be3c:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800be40:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800be44:	b570      	push	{r4, r5, r6, lr}
 800be46:	4603      	mov	r3, r0
 800be48:	4604      	mov	r4, r0
 800be4a:	d309      	bcc.n	800be60 <__ieee754_sqrtf+0x24>
 800be4c:	4601      	mov	r1, r0
 800be4e:	f7f4 ff33 	bl	8000cb8 <__aeabi_fmul>
 800be52:	4601      	mov	r1, r0
 800be54:	4620      	mov	r0, r4
 800be56:	f7f4 fe27 	bl	8000aa8 <__addsf3>
 800be5a:	4604      	mov	r4, r0
 800be5c:	4620      	mov	r0, r4
 800be5e:	bd70      	pop	{r4, r5, r6, pc}
 800be60:	2a00      	cmp	r2, #0
 800be62:	d0fb      	beq.n	800be5c <__ieee754_sqrtf+0x20>
 800be64:	2800      	cmp	r0, #0
 800be66:	da06      	bge.n	800be76 <__ieee754_sqrtf+0x3a>
 800be68:	4601      	mov	r1, r0
 800be6a:	f7f4 fe1b 	bl	8000aa4 <__aeabi_fsub>
 800be6e:	4601      	mov	r1, r0
 800be70:	f7f4 ffd6 	bl	8000e20 <__aeabi_fdiv>
 800be74:	e7f1      	b.n	800be5a <__ieee754_sqrtf+0x1e>
 800be76:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800be7a:	ea4f 54e0 	mov.w	r4, r0, asr #23
 800be7e:	d32e      	bcc.n	800bede <__ieee754_sqrtf+0xa2>
 800be80:	3c7f      	subs	r4, #127	; 0x7f
 800be82:	07e2      	lsls	r2, r4, #31
 800be84:	f04f 0200 	mov.w	r2, #0
 800be88:	ea4f 0164 	mov.w	r1, r4, asr #1
 800be8c:	4616      	mov	r6, r2
 800be8e:	f04f 0419 	mov.w	r4, #25
 800be92:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800be96:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800be9a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800be9e:	bf48      	it	mi
 800bea0:	005b      	lslmi	r3, r3, #1
 800bea2:	005b      	lsls	r3, r3, #1
 800bea4:	1835      	adds	r5, r6, r0
 800bea6:	429d      	cmp	r5, r3
 800bea8:	bfde      	ittt	le
 800beaa:	182e      	addle	r6, r5, r0
 800beac:	1b5b      	suble	r3, r3, r5
 800beae:	1812      	addle	r2, r2, r0
 800beb0:	3c01      	subs	r4, #1
 800beb2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800beb6:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800beba:	d1f3      	bne.n	800bea4 <__ieee754_sqrtf+0x68>
 800bebc:	b113      	cbz	r3, 800bec4 <__ieee754_sqrtf+0x88>
 800bebe:	3201      	adds	r2, #1
 800bec0:	f022 0201 	bic.w	r2, r2, #1
 800bec4:	1054      	asrs	r4, r2, #1
 800bec6:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 800beca:	eb04 54c1 	add.w	r4, r4, r1, lsl #23
 800bece:	e7c5      	b.n	800be5c <__ieee754_sqrtf+0x20>
 800bed0:	005b      	lsls	r3, r3, #1
 800bed2:	3201      	adds	r2, #1
 800bed4:	0219      	lsls	r1, r3, #8
 800bed6:	d5fb      	bpl.n	800bed0 <__ieee754_sqrtf+0x94>
 800bed8:	3a01      	subs	r2, #1
 800beda:	1aa4      	subs	r4, r4, r2
 800bedc:	e7d0      	b.n	800be80 <__ieee754_sqrtf+0x44>
 800bede:	2200      	movs	r2, #0
 800bee0:	e7f8      	b.n	800bed4 <__ieee754_sqrtf+0x98>
	...

0800bee4 <__kernel_cosf>:
 800bee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bee8:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 800beec:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800bef0:	4606      	mov	r6, r0
 800bef2:	4688      	mov	r8, r1
 800bef4:	da03      	bge.n	800befe <__kernel_cosf+0x1a>
 800bef6:	f7f5 f8bb 	bl	8001070 <__aeabi_f2iz>
 800befa:	2800      	cmp	r0, #0
 800befc:	d05c      	beq.n	800bfb8 <__kernel_cosf+0xd4>
 800befe:	4631      	mov	r1, r6
 800bf00:	4630      	mov	r0, r6
 800bf02:	f7f4 fed9 	bl	8000cb8 <__aeabi_fmul>
 800bf06:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800bf0a:	4605      	mov	r5, r0
 800bf0c:	f7f4 fed4 	bl	8000cb8 <__aeabi_fmul>
 800bf10:	492b      	ldr	r1, [pc, #172]	; (800bfc0 <__kernel_cosf+0xdc>)
 800bf12:	4607      	mov	r7, r0
 800bf14:	4628      	mov	r0, r5
 800bf16:	f7f4 fecf 	bl	8000cb8 <__aeabi_fmul>
 800bf1a:	492a      	ldr	r1, [pc, #168]	; (800bfc4 <__kernel_cosf+0xe0>)
 800bf1c:	f7f4 fdc4 	bl	8000aa8 <__addsf3>
 800bf20:	4629      	mov	r1, r5
 800bf22:	f7f4 fec9 	bl	8000cb8 <__aeabi_fmul>
 800bf26:	4928      	ldr	r1, [pc, #160]	; (800bfc8 <__kernel_cosf+0xe4>)
 800bf28:	f7f4 fdbc 	bl	8000aa4 <__aeabi_fsub>
 800bf2c:	4629      	mov	r1, r5
 800bf2e:	f7f4 fec3 	bl	8000cb8 <__aeabi_fmul>
 800bf32:	4926      	ldr	r1, [pc, #152]	; (800bfcc <__kernel_cosf+0xe8>)
 800bf34:	f7f4 fdb8 	bl	8000aa8 <__addsf3>
 800bf38:	4629      	mov	r1, r5
 800bf3a:	f7f4 febd 	bl	8000cb8 <__aeabi_fmul>
 800bf3e:	4924      	ldr	r1, [pc, #144]	; (800bfd0 <__kernel_cosf+0xec>)
 800bf40:	f7f4 fdb0 	bl	8000aa4 <__aeabi_fsub>
 800bf44:	4629      	mov	r1, r5
 800bf46:	f7f4 feb7 	bl	8000cb8 <__aeabi_fmul>
 800bf4a:	4922      	ldr	r1, [pc, #136]	; (800bfd4 <__kernel_cosf+0xf0>)
 800bf4c:	f7f4 fdac 	bl	8000aa8 <__addsf3>
 800bf50:	4629      	mov	r1, r5
 800bf52:	f7f4 feb1 	bl	8000cb8 <__aeabi_fmul>
 800bf56:	4629      	mov	r1, r5
 800bf58:	f7f4 feae 	bl	8000cb8 <__aeabi_fmul>
 800bf5c:	4641      	mov	r1, r8
 800bf5e:	4605      	mov	r5, r0
 800bf60:	4630      	mov	r0, r6
 800bf62:	f7f4 fea9 	bl	8000cb8 <__aeabi_fmul>
 800bf66:	4601      	mov	r1, r0
 800bf68:	4628      	mov	r0, r5
 800bf6a:	f7f4 fd9b 	bl	8000aa4 <__aeabi_fsub>
 800bf6e:	4b1a      	ldr	r3, [pc, #104]	; (800bfd8 <__kernel_cosf+0xf4>)
 800bf70:	4605      	mov	r5, r0
 800bf72:	429c      	cmp	r4, r3
 800bf74:	dc0a      	bgt.n	800bf8c <__kernel_cosf+0xa8>
 800bf76:	4601      	mov	r1, r0
 800bf78:	4638      	mov	r0, r7
 800bf7a:	f7f4 fd93 	bl	8000aa4 <__aeabi_fsub>
 800bf7e:	4601      	mov	r1, r0
 800bf80:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800bf84:	f7f4 fd8e 	bl	8000aa4 <__aeabi_fsub>
 800bf88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf8c:	4b13      	ldr	r3, [pc, #76]	; (800bfdc <__kernel_cosf+0xf8>)
 800bf8e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800bf92:	429c      	cmp	r4, r3
 800bf94:	bfcc      	ite	gt
 800bf96:	4c12      	ldrgt	r4, [pc, #72]	; (800bfe0 <__kernel_cosf+0xfc>)
 800bf98:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 800bf9c:	4621      	mov	r1, r4
 800bf9e:	f7f4 fd81 	bl	8000aa4 <__aeabi_fsub>
 800bfa2:	4621      	mov	r1, r4
 800bfa4:	4606      	mov	r6, r0
 800bfa6:	4638      	mov	r0, r7
 800bfa8:	f7f4 fd7c 	bl	8000aa4 <__aeabi_fsub>
 800bfac:	4629      	mov	r1, r5
 800bfae:	f7f4 fd79 	bl	8000aa4 <__aeabi_fsub>
 800bfb2:	4601      	mov	r1, r0
 800bfb4:	4630      	mov	r0, r6
 800bfb6:	e7e5      	b.n	800bf84 <__kernel_cosf+0xa0>
 800bfb8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800bfbc:	e7e4      	b.n	800bf88 <__kernel_cosf+0xa4>
 800bfbe:	bf00      	nop
 800bfc0:	ad47d74e 	.word	0xad47d74e
 800bfc4:	310f74f6 	.word	0x310f74f6
 800bfc8:	3493f27c 	.word	0x3493f27c
 800bfcc:	37d00d01 	.word	0x37d00d01
 800bfd0:	3ab60b61 	.word	0x3ab60b61
 800bfd4:	3d2aaaab 	.word	0x3d2aaaab
 800bfd8:	3e999999 	.word	0x3e999999
 800bfdc:	3f480000 	.word	0x3f480000
 800bfe0:	3e900000 	.word	0x3e900000

0800bfe4 <__kernel_rem_pio2f>:
 800bfe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfe8:	b0d9      	sub	sp, #356	; 0x164
 800bfea:	9304      	str	r3, [sp, #16]
 800bfec:	9101      	str	r1, [sp, #4]
 800bfee:	4bc3      	ldr	r3, [pc, #780]	; (800c2fc <__kernel_rem_pio2f+0x318>)
 800bff0:	9962      	ldr	r1, [sp, #392]	; 0x188
 800bff2:	1ed4      	subs	r4, r2, #3
 800bff4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bff8:	2500      	movs	r5, #0
 800bffa:	9302      	str	r3, [sp, #8]
 800bffc:	9b04      	ldr	r3, [sp, #16]
 800bffe:	f04f 0a00 	mov.w	sl, #0
 800c002:	3b01      	subs	r3, #1
 800c004:	9303      	str	r3, [sp, #12]
 800c006:	2308      	movs	r3, #8
 800c008:	fb94 f4f3 	sdiv	r4, r4, r3
 800c00c:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800c010:	1c66      	adds	r6, r4, #1
 800c012:	eba2 06c6 	sub.w	r6, r2, r6, lsl #3
 800c016:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800c01a:	eb03 0802 	add.w	r8, r3, r2
 800c01e:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 800c020:	1aa7      	subs	r7, r4, r2
 800c022:	9005      	str	r0, [sp, #20]
 800c024:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800c028:	f10d 0b70 	add.w	fp, sp, #112	; 0x70
 800c02c:	4545      	cmp	r5, r8
 800c02e:	dd7f      	ble.n	800c130 <__kernel_rem_pio2f+0x14c>
 800c030:	f04f 0800 	mov.w	r8, #0
 800c034:	f04f 0a00 	mov.w	sl, #0
 800c038:	f06f 0b03 	mvn.w	fp, #3
 800c03c:	9b04      	ldr	r3, [sp, #16]
 800c03e:	aa1c      	add	r2, sp, #112	; 0x70
 800c040:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800c044:	ab44      	add	r3, sp, #272	; 0x110
 800c046:	9a02      	ldr	r2, [sp, #8]
 800c048:	4590      	cmp	r8, r2
 800c04a:	f340 8097 	ble.w	800c17c <__kernel_rem_pio2f+0x198>
 800c04e:	4613      	mov	r3, r2
 800c050:	aa08      	add	r2, sp, #32
 800c052:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c056:	9307      	str	r3, [sp, #28]
 800c058:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 800c05a:	9f02      	ldr	r7, [sp, #8]
 800c05c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c060:	9306      	str	r3, [sp, #24]
 800c062:	46ba      	mov	sl, r7
 800c064:	f04f 4887 	mov.w	r8, #1132462080	; 0x43800000
 800c068:	ab58      	add	r3, sp, #352	; 0x160
 800c06a:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 800c06e:	f853 4c50 	ldr.w	r4, [r3, #-80]
 800c072:	ad07      	add	r5, sp, #28
 800c074:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 800c078:	f1ba 0f00 	cmp.w	sl, #0
 800c07c:	f300 8081 	bgt.w	800c182 <__kernel_rem_pio2f+0x19e>
 800c080:	4631      	mov	r1, r6
 800c082:	4620      	mov	r0, r4
 800c084:	f000 fbd4 	bl	800c830 <scalbnf>
 800c088:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 800c08c:	4604      	mov	r4, r0
 800c08e:	f7f4 fe13 	bl	8000cb8 <__aeabi_fmul>
 800c092:	f7ff fbfd 	bl	800b890 <floorf>
 800c096:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800c09a:	f7f4 fe0d 	bl	8000cb8 <__aeabi_fmul>
 800c09e:	4601      	mov	r1, r0
 800c0a0:	4620      	mov	r0, r4
 800c0a2:	f7f4 fcff 	bl	8000aa4 <__aeabi_fsub>
 800c0a6:	4604      	mov	r4, r0
 800c0a8:	f7f4 ffe2 	bl	8001070 <__aeabi_f2iz>
 800c0ac:	4681      	mov	r9, r0
 800c0ae:	f7f4 fdaf 	bl	8000c10 <__aeabi_i2f>
 800c0b2:	4601      	mov	r1, r0
 800c0b4:	4620      	mov	r0, r4
 800c0b6:	f7f4 fcf5 	bl	8000aa4 <__aeabi_fsub>
 800c0ba:	2e00      	cmp	r6, #0
 800c0bc:	4604      	mov	r4, r0
 800c0be:	dd7e      	ble.n	800c1be <__kernel_rem_pio2f+0x1da>
 800c0c0:	1e7b      	subs	r3, r7, #1
 800c0c2:	aa08      	add	r2, sp, #32
 800c0c4:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 800c0c8:	f1c6 0208 	rsb	r2, r6, #8
 800c0cc:	fa45 f002 	asr.w	r0, r5, r2
 800c0d0:	4481      	add	r9, r0
 800c0d2:	4090      	lsls	r0, r2
 800c0d4:	1a2d      	subs	r5, r5, r0
 800c0d6:	aa08      	add	r2, sp, #32
 800c0d8:	f1c6 0007 	rsb	r0, r6, #7
 800c0dc:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
 800c0e0:	4105      	asrs	r5, r0
 800c0e2:	2d00      	cmp	r5, #0
 800c0e4:	dd79      	ble.n	800c1da <__kernel_rem_pio2f+0x1f6>
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	4690      	mov	r8, r2
 800c0ea:	f109 0901 	add.w	r9, r9, #1
 800c0ee:	4297      	cmp	r7, r2
 800c0f0:	f300 80ae 	bgt.w	800c250 <__kernel_rem_pio2f+0x26c>
 800c0f4:	2e00      	cmp	r6, #0
 800c0f6:	dd05      	ble.n	800c104 <__kernel_rem_pio2f+0x120>
 800c0f8:	2e01      	cmp	r6, #1
 800c0fa:	f000 80c0 	beq.w	800c27e <__kernel_rem_pio2f+0x29a>
 800c0fe:	2e02      	cmp	r6, #2
 800c100:	f000 80c7 	beq.w	800c292 <__kernel_rem_pio2f+0x2ae>
 800c104:	2d02      	cmp	r5, #2
 800c106:	d168      	bne.n	800c1da <__kernel_rem_pio2f+0x1f6>
 800c108:	4621      	mov	r1, r4
 800c10a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800c10e:	f7f4 fcc9 	bl	8000aa4 <__aeabi_fsub>
 800c112:	4604      	mov	r4, r0
 800c114:	f1b8 0f00 	cmp.w	r8, #0
 800c118:	d05f      	beq.n	800c1da <__kernel_rem_pio2f+0x1f6>
 800c11a:	4631      	mov	r1, r6
 800c11c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800c120:	f000 fb86 	bl	800c830 <scalbnf>
 800c124:	4601      	mov	r1, r0
 800c126:	4620      	mov	r0, r4
 800c128:	f7f4 fcbc 	bl	8000aa4 <__aeabi_fsub>
 800c12c:	4604      	mov	r4, r0
 800c12e:	e054      	b.n	800c1da <__kernel_rem_pio2f+0x1f6>
 800c130:	42ef      	cmn	r7, r5
 800c132:	d407      	bmi.n	800c144 <__kernel_rem_pio2f+0x160>
 800c134:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800c138:	f7f4 fd6a 	bl	8000c10 <__aeabi_i2f>
 800c13c:	f84b 0025 	str.w	r0, [fp, r5, lsl #2]
 800c140:	3501      	adds	r5, #1
 800c142:	e773      	b.n	800c02c <__kernel_rem_pio2f+0x48>
 800c144:	4650      	mov	r0, sl
 800c146:	e7f9      	b.n	800c13c <__kernel_rem_pio2f+0x158>
 800c148:	fb0b 5207 	mla	r2, fp, r7, r5
 800c14c:	9306      	str	r3, [sp, #24]
 800c14e:	9b05      	ldr	r3, [sp, #20]
 800c150:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800c154:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
 800c158:	f7f4 fdae 	bl	8000cb8 <__aeabi_fmul>
 800c15c:	4601      	mov	r1, r0
 800c15e:	4648      	mov	r0, r9
 800c160:	f7f4 fca2 	bl	8000aa8 <__addsf3>
 800c164:	4681      	mov	r9, r0
 800c166:	9b06      	ldr	r3, [sp, #24]
 800c168:	3701      	adds	r7, #1
 800c16a:	9a03      	ldr	r2, [sp, #12]
 800c16c:	4297      	cmp	r7, r2
 800c16e:	ddeb      	ble.n	800c148 <__kernel_rem_pio2f+0x164>
 800c170:	f843 9028 	str.w	r9, [r3, r8, lsl #2]
 800c174:	3504      	adds	r5, #4
 800c176:	f108 0801 	add.w	r8, r8, #1
 800c17a:	e764      	b.n	800c046 <__kernel_rem_pio2f+0x62>
 800c17c:	46d1      	mov	r9, sl
 800c17e:	2700      	movs	r7, #0
 800c180:	e7f3      	b.n	800c16a <__kernel_rem_pio2f+0x186>
 800c182:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800c186:	4620      	mov	r0, r4
 800c188:	f7f4 fd96 	bl	8000cb8 <__aeabi_fmul>
 800c18c:	f7f4 ff70 	bl	8001070 <__aeabi_f2iz>
 800c190:	f7f4 fd3e 	bl	8000c10 <__aeabi_i2f>
 800c194:	4641      	mov	r1, r8
 800c196:	4683      	mov	fp, r0
 800c198:	f7f4 fd8e 	bl	8000cb8 <__aeabi_fmul>
 800c19c:	4601      	mov	r1, r0
 800c19e:	4620      	mov	r0, r4
 800c1a0:	f7f4 fc80 	bl	8000aa4 <__aeabi_fsub>
 800c1a4:	f7f4 ff64 	bl	8001070 <__aeabi_f2iz>
 800c1a8:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c1ac:	f845 0f04 	str.w	r0, [r5, #4]!
 800c1b0:	f859 102a 	ldr.w	r1, [r9, sl, lsl #2]
 800c1b4:	4658      	mov	r0, fp
 800c1b6:	f7f4 fc77 	bl	8000aa8 <__addsf3>
 800c1ba:	4604      	mov	r4, r0
 800c1bc:	e75c      	b.n	800c078 <__kernel_rem_pio2f+0x94>
 800c1be:	d105      	bne.n	800c1cc <__kernel_rem_pio2f+0x1e8>
 800c1c0:	1e7b      	subs	r3, r7, #1
 800c1c2:	aa08      	add	r2, sp, #32
 800c1c4:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 800c1c8:	122d      	asrs	r5, r5, #8
 800c1ca:	e78a      	b.n	800c0e2 <__kernel_rem_pio2f+0xfe>
 800c1cc:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800c1d0:	f7f4 ff24 	bl	800101c <__aeabi_fcmpge>
 800c1d4:	2800      	cmp	r0, #0
 800c1d6:	d139      	bne.n	800c24c <__kernel_rem_pio2f+0x268>
 800c1d8:	4605      	mov	r5, r0
 800c1da:	2100      	movs	r1, #0
 800c1dc:	4620      	mov	r0, r4
 800c1de:	f7f4 feff 	bl	8000fe0 <__aeabi_fcmpeq>
 800c1e2:	2800      	cmp	r0, #0
 800c1e4:	f000 80a0 	beq.w	800c328 <__kernel_rem_pio2f+0x344>
 800c1e8:	1e7c      	subs	r4, r7, #1
 800c1ea:	4623      	mov	r3, r4
 800c1ec:	2200      	movs	r2, #0
 800c1ee:	9902      	ldr	r1, [sp, #8]
 800c1f0:	428b      	cmp	r3, r1
 800c1f2:	da55      	bge.n	800c2a0 <__kernel_rem_pio2f+0x2bc>
 800c1f4:	2a00      	cmp	r2, #0
 800c1f6:	d07e      	beq.n	800c2f6 <__kernel_rem_pio2f+0x312>
 800c1f8:	ab08      	add	r3, sp, #32
 800c1fa:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800c1fe:	3e08      	subs	r6, #8
 800c200:	2b00      	cmp	r3, #0
 800c202:	f000 808f 	beq.w	800c324 <__kernel_rem_pio2f+0x340>
 800c206:	4631      	mov	r1, r6
 800c208:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800c20c:	f000 fb10 	bl	800c830 <scalbnf>
 800c210:	46a0      	mov	r8, r4
 800c212:	4682      	mov	sl, r0
 800c214:	f04f 566e 	mov.w	r6, #998244352	; 0x3b800000
 800c218:	af44      	add	r7, sp, #272	; 0x110
 800c21a:	f1b8 0f00 	cmp.w	r8, #0
 800c21e:	f280 80b5 	bge.w	800c38c <__kernel_rem_pio2f+0x3a8>
 800c222:	f04f 0a00 	mov.w	sl, #0
 800c226:	2300      	movs	r3, #0
 800c228:	00a6      	lsls	r6, r4, #2
 800c22a:	4a35      	ldr	r2, [pc, #212]	; (800c300 <__kernel_rem_pio2f+0x31c>)
 800c22c:	4437      	add	r7, r6
 800c22e:	eba4 010a 	sub.w	r1, r4, sl
 800c232:	2900      	cmp	r1, #0
 800c234:	f280 80db 	bge.w	800c3ee <__kernel_rem_pio2f+0x40a>
 800c238:	9b62      	ldr	r3, [sp, #392]	; 0x188
 800c23a:	2b03      	cmp	r3, #3
 800c23c:	f200 80ff 	bhi.w	800c43e <__kernel_rem_pio2f+0x45a>
 800c240:	e8df f013 	tbh	[pc, r3, lsl #1]
 800c244:	01200102 	.word	0x01200102
 800c248:	00d90120 	.word	0x00d90120
 800c24c:	2502      	movs	r5, #2
 800c24e:	e74a      	b.n	800c0e6 <__kernel_rem_pio2f+0x102>
 800c250:	ab08      	add	r3, sp, #32
 800c252:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c256:	f1b8 0f00 	cmp.w	r8, #0
 800c25a:	d109      	bne.n	800c270 <__kernel_rem_pio2f+0x28c>
 800c25c:	b12b      	cbz	r3, 800c26a <__kernel_rem_pio2f+0x286>
 800c25e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800c262:	a908      	add	r1, sp, #32
 800c264:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800c268:	2301      	movs	r3, #1
 800c26a:	3201      	adds	r2, #1
 800c26c:	4698      	mov	r8, r3
 800c26e:	e73e      	b.n	800c0ee <__kernel_rem_pio2f+0x10a>
 800c270:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800c274:	a908      	add	r1, sp, #32
 800c276:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800c27a:	4643      	mov	r3, r8
 800c27c:	e7f5      	b.n	800c26a <__kernel_rem_pio2f+0x286>
 800c27e:	1e7a      	subs	r2, r7, #1
 800c280:	ab08      	add	r3, sp, #32
 800c282:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c286:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c28a:	a908      	add	r1, sp, #32
 800c28c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800c290:	e738      	b.n	800c104 <__kernel_rem_pio2f+0x120>
 800c292:	1e7a      	subs	r2, r7, #1
 800c294:	ab08      	add	r3, sp, #32
 800c296:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c29a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c29e:	e7f4      	b.n	800c28a <__kernel_rem_pio2f+0x2a6>
 800c2a0:	a908      	add	r1, sp, #32
 800c2a2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c2a6:	3b01      	subs	r3, #1
 800c2a8:	430a      	orrs	r2, r1
 800c2aa:	e7a0      	b.n	800c1ee <__kernel_rem_pio2f+0x20a>
 800c2ac:	3301      	adds	r3, #1
 800c2ae:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800c2b2:	2900      	cmp	r1, #0
 800c2b4:	d0fa      	beq.n	800c2ac <__kernel_rem_pio2f+0x2c8>
 800c2b6:	f06f 0803 	mvn.w	r8, #3
 800c2ba:	9a04      	ldr	r2, [sp, #16]
 800c2bc:	1c7d      	adds	r5, r7, #1
 800c2be:	18bc      	adds	r4, r7, r2
 800c2c0:	aa1c      	add	r2, sp, #112	; 0x70
 800c2c2:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800c2c6:	441f      	add	r7, r3
 800c2c8:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 800c2cc:	42af      	cmp	r7, r5
 800c2ce:	f6ff aec8 	blt.w	800c062 <__kernel_rem_pio2f+0x7e>
 800c2d2:	9b06      	ldr	r3, [sp, #24]
 800c2d4:	f04f 0a00 	mov.w	sl, #0
 800c2d8:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c2dc:	f7f4 fc98 	bl	8000c10 <__aeabi_i2f>
 800c2e0:	f04f 0b00 	mov.w	fp, #0
 800c2e4:	6020      	str	r0, [r4, #0]
 800c2e6:	9b03      	ldr	r3, [sp, #12]
 800c2e8:	459a      	cmp	sl, r3
 800c2ea:	dd0b      	ble.n	800c304 <__kernel_rem_pio2f+0x320>
 800c2ec:	f849 b025 	str.w	fp, [r9, r5, lsl #2]
 800c2f0:	3404      	adds	r4, #4
 800c2f2:	3501      	adds	r5, #1
 800c2f4:	e7ea      	b.n	800c2cc <__kernel_rem_pio2f+0x2e8>
 800c2f6:	9a07      	ldr	r2, [sp, #28]
 800c2f8:	2301      	movs	r3, #1
 800c2fa:	e7d8      	b.n	800c2ae <__kernel_rem_pio2f+0x2ca>
 800c2fc:	0800cfc8 	.word	0x0800cfc8
 800c300:	0800cf9c 	.word	0x0800cf9c
 800c304:	fb08 f30a 	mul.w	r3, r8, sl
 800c308:	9a05      	ldr	r2, [sp, #20]
 800c30a:	58e0      	ldr	r0, [r4, r3]
 800c30c:	f852 102a 	ldr.w	r1, [r2, sl, lsl #2]
 800c310:	f7f4 fcd2 	bl	8000cb8 <__aeabi_fmul>
 800c314:	4601      	mov	r1, r0
 800c316:	4658      	mov	r0, fp
 800c318:	f7f4 fbc6 	bl	8000aa8 <__addsf3>
 800c31c:	f10a 0a01 	add.w	sl, sl, #1
 800c320:	4683      	mov	fp, r0
 800c322:	e7e0      	b.n	800c2e6 <__kernel_rem_pio2f+0x302>
 800c324:	3c01      	subs	r4, #1
 800c326:	e767      	b.n	800c1f8 <__kernel_rem_pio2f+0x214>
 800c328:	4271      	negs	r1, r6
 800c32a:	4620      	mov	r0, r4
 800c32c:	f000 fa80 	bl	800c830 <scalbnf>
 800c330:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800c334:	4604      	mov	r4, r0
 800c336:	f7f4 fe71 	bl	800101c <__aeabi_fcmpge>
 800c33a:	b1f8      	cbz	r0, 800c37c <__kernel_rem_pio2f+0x398>
 800c33c:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800c340:	4620      	mov	r0, r4
 800c342:	f7f4 fcb9 	bl	8000cb8 <__aeabi_fmul>
 800c346:	f7f4 fe93 	bl	8001070 <__aeabi_f2iz>
 800c34a:	f7f4 fc61 	bl	8000c10 <__aeabi_i2f>
 800c34e:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800c352:	4680      	mov	r8, r0
 800c354:	f7f4 fcb0 	bl	8000cb8 <__aeabi_fmul>
 800c358:	4601      	mov	r1, r0
 800c35a:	4620      	mov	r0, r4
 800c35c:	f7f4 fba2 	bl	8000aa4 <__aeabi_fsub>
 800c360:	f7f4 fe86 	bl	8001070 <__aeabi_f2iz>
 800c364:	ab08      	add	r3, sp, #32
 800c366:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800c36a:	4640      	mov	r0, r8
 800c36c:	f7f4 fe80 	bl	8001070 <__aeabi_f2iz>
 800c370:	1c7c      	adds	r4, r7, #1
 800c372:	ab08      	add	r3, sp, #32
 800c374:	3608      	adds	r6, #8
 800c376:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c37a:	e744      	b.n	800c206 <__kernel_rem_pio2f+0x222>
 800c37c:	4620      	mov	r0, r4
 800c37e:	f7f4 fe77 	bl	8001070 <__aeabi_f2iz>
 800c382:	ab08      	add	r3, sp, #32
 800c384:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800c388:	463c      	mov	r4, r7
 800c38a:	e73c      	b.n	800c206 <__kernel_rem_pio2f+0x222>
 800c38c:	ab08      	add	r3, sp, #32
 800c38e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800c392:	f7f4 fc3d 	bl	8000c10 <__aeabi_i2f>
 800c396:	4651      	mov	r1, sl
 800c398:	f7f4 fc8e 	bl	8000cb8 <__aeabi_fmul>
 800c39c:	4631      	mov	r1, r6
 800c39e:	f847 0028 	str.w	r0, [r7, r8, lsl #2]
 800c3a2:	4650      	mov	r0, sl
 800c3a4:	f7f4 fc88 	bl	8000cb8 <__aeabi_fmul>
 800c3a8:	f108 38ff 	add.w	r8, r8, #4294967295
 800c3ac:	4682      	mov	sl, r0
 800c3ae:	e734      	b.n	800c21a <__kernel_rem_pio2f+0x236>
 800c3b0:	f852 0028 	ldr.w	r0, [r2, r8, lsl #2]
 800c3b4:	f857 1028 	ldr.w	r1, [r7, r8, lsl #2]
 800c3b8:	9304      	str	r3, [sp, #16]
 800c3ba:	9203      	str	r2, [sp, #12]
 800c3bc:	f7f4 fc7c 	bl	8000cb8 <__aeabi_fmul>
 800c3c0:	4601      	mov	r1, r0
 800c3c2:	4658      	mov	r0, fp
 800c3c4:	f7f4 fb70 	bl	8000aa8 <__addsf3>
 800c3c8:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 800c3cc:	4683      	mov	fp, r0
 800c3ce:	f108 0801 	add.w	r8, r8, #1
 800c3d2:	9902      	ldr	r1, [sp, #8]
 800c3d4:	4588      	cmp	r8, r1
 800c3d6:	dc01      	bgt.n	800c3dc <__kernel_rem_pio2f+0x3f8>
 800c3d8:	45c2      	cmp	sl, r8
 800c3da:	dae9      	bge.n	800c3b0 <__kernel_rem_pio2f+0x3cc>
 800c3dc:	a958      	add	r1, sp, #352	; 0x160
 800c3de:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c3e2:	f841 bca0 	str.w	fp, [r1, #-160]
 800c3e6:	f10a 0a01 	add.w	sl, sl, #1
 800c3ea:	3f04      	subs	r7, #4
 800c3ec:	e71f      	b.n	800c22e <__kernel_rem_pio2f+0x24a>
 800c3ee:	469b      	mov	fp, r3
 800c3f0:	f04f 0800 	mov.w	r8, #0
 800c3f4:	e7ed      	b.n	800c3d2 <__kernel_rem_pio2f+0x3ee>
 800c3f6:	f10d 0ac0 	add.w	sl, sp, #192	; 0xc0
 800c3fa:	4456      	add	r6, sl
 800c3fc:	4637      	mov	r7, r6
 800c3fe:	46a0      	mov	r8, r4
 800c400:	f1b8 0f00 	cmp.w	r8, #0
 800c404:	dc4a      	bgt.n	800c49c <__kernel_rem_pio2f+0x4b8>
 800c406:	4627      	mov	r7, r4
 800c408:	2f01      	cmp	r7, #1
 800c40a:	dc60      	bgt.n	800c4ce <__kernel_rem_pio2f+0x4ea>
 800c40c:	2000      	movs	r0, #0
 800c40e:	2c01      	cmp	r4, #1
 800c410:	dc74      	bgt.n	800c4fc <__kernel_rem_pio2f+0x518>
 800c412:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 800c414:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 800c416:	2d00      	cmp	r5, #0
 800c418:	d176      	bne.n	800c508 <__kernel_rem_pio2f+0x524>
 800c41a:	9901      	ldr	r1, [sp, #4]
 800c41c:	600a      	str	r2, [r1, #0]
 800c41e:	460a      	mov	r2, r1
 800c420:	604b      	str	r3, [r1, #4]
 800c422:	6090      	str	r0, [r2, #8]
 800c424:	e00b      	b.n	800c43e <__kernel_rem_pio2f+0x45a>
 800c426:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 800c42a:	f7f4 fb3d 	bl	8000aa8 <__addsf3>
 800c42e:	3c01      	subs	r4, #1
 800c430:	2c00      	cmp	r4, #0
 800c432:	daf8      	bge.n	800c426 <__kernel_rem_pio2f+0x442>
 800c434:	b10d      	cbz	r5, 800c43a <__kernel_rem_pio2f+0x456>
 800c436:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800c43a:	9b01      	ldr	r3, [sp, #4]
 800c43c:	6018      	str	r0, [r3, #0]
 800c43e:	f009 0007 	and.w	r0, r9, #7
 800c442:	b059      	add	sp, #356	; 0x164
 800c444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c448:	2000      	movs	r0, #0
 800c44a:	ae30      	add	r6, sp, #192	; 0xc0
 800c44c:	e7f0      	b.n	800c430 <__kernel_rem_pio2f+0x44c>
 800c44e:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
 800c452:	f7f4 fb29 	bl	8000aa8 <__addsf3>
 800c456:	3e01      	subs	r6, #1
 800c458:	2e00      	cmp	r6, #0
 800c45a:	daf8      	bge.n	800c44e <__kernel_rem_pio2f+0x46a>
 800c45c:	b1b5      	cbz	r5, 800c48c <__kernel_rem_pio2f+0x4a8>
 800c45e:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 800c462:	9a01      	ldr	r2, [sp, #4]
 800c464:	af58      	add	r7, sp, #352	; 0x160
 800c466:	4601      	mov	r1, r0
 800c468:	6013      	str	r3, [r2, #0]
 800c46a:	f857 0da0 	ldr.w	r0, [r7, #-160]!
 800c46e:	f7f4 fb19 	bl	8000aa4 <__aeabi_fsub>
 800c472:	2601      	movs	r6, #1
 800c474:	42b4      	cmp	r4, r6
 800c476:	da0b      	bge.n	800c490 <__kernel_rem_pio2f+0x4ac>
 800c478:	b10d      	cbz	r5, 800c47e <__kernel_rem_pio2f+0x49a>
 800c47a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800c47e:	9b01      	ldr	r3, [sp, #4]
 800c480:	6058      	str	r0, [r3, #4]
 800c482:	e7dc      	b.n	800c43e <__kernel_rem_pio2f+0x45a>
 800c484:	4626      	mov	r6, r4
 800c486:	2000      	movs	r0, #0
 800c488:	af30      	add	r7, sp, #192	; 0xc0
 800c48a:	e7e5      	b.n	800c458 <__kernel_rem_pio2f+0x474>
 800c48c:	4603      	mov	r3, r0
 800c48e:	e7e8      	b.n	800c462 <__kernel_rem_pio2f+0x47e>
 800c490:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
 800c494:	f7f4 fb08 	bl	8000aa8 <__addsf3>
 800c498:	3601      	adds	r6, #1
 800c49a:	e7eb      	b.n	800c474 <__kernel_rem_pio2f+0x490>
 800c49c:	f857 2d04 	ldr.w	r2, [r7, #-4]!
 800c4a0:	f108 38ff 	add.w	r8, r8, #4294967295
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	4610      	mov	r0, r2
 800c4a8:	4619      	mov	r1, r3
 800c4aa:	9303      	str	r3, [sp, #12]
 800c4ac:	9202      	str	r2, [sp, #8]
 800c4ae:	f7f4 fafb 	bl	8000aa8 <__addsf3>
 800c4b2:	9a02      	ldr	r2, [sp, #8]
 800c4b4:	4601      	mov	r1, r0
 800c4b6:	4683      	mov	fp, r0
 800c4b8:	4610      	mov	r0, r2
 800c4ba:	f7f4 faf3 	bl	8000aa4 <__aeabi_fsub>
 800c4be:	9b03      	ldr	r3, [sp, #12]
 800c4c0:	4619      	mov	r1, r3
 800c4c2:	f7f4 faf1 	bl	8000aa8 <__addsf3>
 800c4c6:	f8c7 b000 	str.w	fp, [r7]
 800c4ca:	6078      	str	r0, [r7, #4]
 800c4cc:	e798      	b.n	800c400 <__kernel_rem_pio2f+0x41c>
 800c4ce:	f856 3d04 	ldr.w	r3, [r6, #-4]!
 800c4d2:	3f01      	subs	r7, #1
 800c4d4:	f8d6 b004 	ldr.w	fp, [r6, #4]
 800c4d8:	4618      	mov	r0, r3
 800c4da:	4659      	mov	r1, fp
 800c4dc:	9302      	str	r3, [sp, #8]
 800c4de:	f7f4 fae3 	bl	8000aa8 <__addsf3>
 800c4e2:	9b02      	ldr	r3, [sp, #8]
 800c4e4:	4601      	mov	r1, r0
 800c4e6:	4680      	mov	r8, r0
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	f7f4 fadb 	bl	8000aa4 <__aeabi_fsub>
 800c4ee:	4659      	mov	r1, fp
 800c4f0:	f7f4 fada 	bl	8000aa8 <__addsf3>
 800c4f4:	f8c6 8000 	str.w	r8, [r6]
 800c4f8:	6070      	str	r0, [r6, #4]
 800c4fa:	e785      	b.n	800c408 <__kernel_rem_pio2f+0x424>
 800c4fc:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
 800c500:	f7f4 fad2 	bl	8000aa8 <__addsf3>
 800c504:	3c01      	subs	r4, #1
 800c506:	e782      	b.n	800c40e <__kernel_rem_pio2f+0x42a>
 800c508:	9901      	ldr	r1, [sp, #4]
 800c50a:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 800c50e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c512:	600a      	str	r2, [r1, #0]
 800c514:	604b      	str	r3, [r1, #4]
 800c516:	460a      	mov	r2, r1
 800c518:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800c51c:	e781      	b.n	800c422 <__kernel_rem_pio2f+0x43e>
 800c51e:	bf00      	nop

0800c520 <__kernel_sinf>:
 800c520:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c524:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800c528:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800c52c:	4604      	mov	r4, r0
 800c52e:	460f      	mov	r7, r1
 800c530:	4691      	mov	r9, r2
 800c532:	da03      	bge.n	800c53c <__kernel_sinf+0x1c>
 800c534:	f7f4 fd9c 	bl	8001070 <__aeabi_f2iz>
 800c538:	2800      	cmp	r0, #0
 800c53a:	d035      	beq.n	800c5a8 <__kernel_sinf+0x88>
 800c53c:	4621      	mov	r1, r4
 800c53e:	4620      	mov	r0, r4
 800c540:	f7f4 fbba 	bl	8000cb8 <__aeabi_fmul>
 800c544:	4605      	mov	r5, r0
 800c546:	4601      	mov	r1, r0
 800c548:	4620      	mov	r0, r4
 800c54a:	f7f4 fbb5 	bl	8000cb8 <__aeabi_fmul>
 800c54e:	4929      	ldr	r1, [pc, #164]	; (800c5f4 <__kernel_sinf+0xd4>)
 800c550:	4606      	mov	r6, r0
 800c552:	4628      	mov	r0, r5
 800c554:	f7f4 fbb0 	bl	8000cb8 <__aeabi_fmul>
 800c558:	4927      	ldr	r1, [pc, #156]	; (800c5f8 <__kernel_sinf+0xd8>)
 800c55a:	f7f4 faa3 	bl	8000aa4 <__aeabi_fsub>
 800c55e:	4629      	mov	r1, r5
 800c560:	f7f4 fbaa 	bl	8000cb8 <__aeabi_fmul>
 800c564:	4925      	ldr	r1, [pc, #148]	; (800c5fc <__kernel_sinf+0xdc>)
 800c566:	f7f4 fa9f 	bl	8000aa8 <__addsf3>
 800c56a:	4629      	mov	r1, r5
 800c56c:	f7f4 fba4 	bl	8000cb8 <__aeabi_fmul>
 800c570:	4923      	ldr	r1, [pc, #140]	; (800c600 <__kernel_sinf+0xe0>)
 800c572:	f7f4 fa97 	bl	8000aa4 <__aeabi_fsub>
 800c576:	4629      	mov	r1, r5
 800c578:	f7f4 fb9e 	bl	8000cb8 <__aeabi_fmul>
 800c57c:	4921      	ldr	r1, [pc, #132]	; (800c604 <__kernel_sinf+0xe4>)
 800c57e:	f7f4 fa93 	bl	8000aa8 <__addsf3>
 800c582:	4680      	mov	r8, r0
 800c584:	f1b9 0f00 	cmp.w	r9, #0
 800c588:	d111      	bne.n	800c5ae <__kernel_sinf+0x8e>
 800c58a:	4601      	mov	r1, r0
 800c58c:	4628      	mov	r0, r5
 800c58e:	f7f4 fb93 	bl	8000cb8 <__aeabi_fmul>
 800c592:	491d      	ldr	r1, [pc, #116]	; (800c608 <__kernel_sinf+0xe8>)
 800c594:	f7f4 fa86 	bl	8000aa4 <__aeabi_fsub>
 800c598:	4631      	mov	r1, r6
 800c59a:	f7f4 fb8d 	bl	8000cb8 <__aeabi_fmul>
 800c59e:	4601      	mov	r1, r0
 800c5a0:	4620      	mov	r0, r4
 800c5a2:	f7f4 fa81 	bl	8000aa8 <__addsf3>
 800c5a6:	4604      	mov	r4, r0
 800c5a8:	4620      	mov	r0, r4
 800c5aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5ae:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800c5b2:	4638      	mov	r0, r7
 800c5b4:	f7f4 fb80 	bl	8000cb8 <__aeabi_fmul>
 800c5b8:	4641      	mov	r1, r8
 800c5ba:	4681      	mov	r9, r0
 800c5bc:	4630      	mov	r0, r6
 800c5be:	f7f4 fb7b 	bl	8000cb8 <__aeabi_fmul>
 800c5c2:	4601      	mov	r1, r0
 800c5c4:	4648      	mov	r0, r9
 800c5c6:	f7f4 fa6d 	bl	8000aa4 <__aeabi_fsub>
 800c5ca:	4629      	mov	r1, r5
 800c5cc:	f7f4 fb74 	bl	8000cb8 <__aeabi_fmul>
 800c5d0:	4639      	mov	r1, r7
 800c5d2:	f7f4 fa67 	bl	8000aa4 <__aeabi_fsub>
 800c5d6:	490c      	ldr	r1, [pc, #48]	; (800c608 <__kernel_sinf+0xe8>)
 800c5d8:	4605      	mov	r5, r0
 800c5da:	4630      	mov	r0, r6
 800c5dc:	f7f4 fb6c 	bl	8000cb8 <__aeabi_fmul>
 800c5e0:	4601      	mov	r1, r0
 800c5e2:	4628      	mov	r0, r5
 800c5e4:	f7f4 fa60 	bl	8000aa8 <__addsf3>
 800c5e8:	4601      	mov	r1, r0
 800c5ea:	4620      	mov	r0, r4
 800c5ec:	f7f4 fa5a 	bl	8000aa4 <__aeabi_fsub>
 800c5f0:	e7d9      	b.n	800c5a6 <__kernel_sinf+0x86>
 800c5f2:	bf00      	nop
 800c5f4:	2f2ec9d3 	.word	0x2f2ec9d3
 800c5f8:	32d72f34 	.word	0x32d72f34
 800c5fc:	3638ef1b 	.word	0x3638ef1b
 800c600:	39500d01 	.word	0x39500d01
 800c604:	3c088889 	.word	0x3c088889
 800c608:	3e2aaaab 	.word	0x3e2aaaab

0800c60c <matherr>:
 800c60c:	2000      	movs	r0, #0
 800c60e:	4770      	bx	lr

0800c610 <atanf>:
 800c610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c614:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800c618:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 800c61c:	4604      	mov	r4, r0
 800c61e:	4607      	mov	r7, r0
 800c620:	db0e      	blt.n	800c640 <atanf+0x30>
 800c622:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800c626:	dd04      	ble.n	800c632 <atanf+0x22>
 800c628:	4601      	mov	r1, r0
 800c62a:	f7f4 fa3d 	bl	8000aa8 <__addsf3>
 800c62e:	4604      	mov	r4, r0
 800c630:	e003      	b.n	800c63a <atanf+0x2a>
 800c632:	2800      	cmp	r0, #0
 800c634:	f340 80cd 	ble.w	800c7d2 <atanf+0x1c2>
 800c638:	4c67      	ldr	r4, [pc, #412]	; (800c7d8 <atanf+0x1c8>)
 800c63a:	4620      	mov	r0, r4
 800c63c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c640:	4b66      	ldr	r3, [pc, #408]	; (800c7dc <atanf+0x1cc>)
 800c642:	429d      	cmp	r5, r3
 800c644:	dc0e      	bgt.n	800c664 <atanf+0x54>
 800c646:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 800c64a:	da08      	bge.n	800c65e <atanf+0x4e>
 800c64c:	4964      	ldr	r1, [pc, #400]	; (800c7e0 <atanf+0x1d0>)
 800c64e:	f7f4 fa2b 	bl	8000aa8 <__addsf3>
 800c652:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c656:	f7f4 fceb 	bl	8001030 <__aeabi_fcmpgt>
 800c65a:	2800      	cmp	r0, #0
 800c65c:	d1ed      	bne.n	800c63a <atanf+0x2a>
 800c65e:	f04f 36ff 	mov.w	r6, #4294967295
 800c662:	e01c      	b.n	800c69e <atanf+0x8e>
 800c664:	f000 f8e0 	bl	800c828 <fabsf>
 800c668:	4b5e      	ldr	r3, [pc, #376]	; (800c7e4 <atanf+0x1d4>)
 800c66a:	4604      	mov	r4, r0
 800c66c:	429d      	cmp	r5, r3
 800c66e:	dc7c      	bgt.n	800c76a <atanf+0x15a>
 800c670:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800c674:	429d      	cmp	r5, r3
 800c676:	dc67      	bgt.n	800c748 <atanf+0x138>
 800c678:	4601      	mov	r1, r0
 800c67a:	f7f4 fa15 	bl	8000aa8 <__addsf3>
 800c67e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c682:	f7f4 fa0f 	bl	8000aa4 <__aeabi_fsub>
 800c686:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800c68a:	4605      	mov	r5, r0
 800c68c:	4620      	mov	r0, r4
 800c68e:	f7f4 fa0b 	bl	8000aa8 <__addsf3>
 800c692:	4601      	mov	r1, r0
 800c694:	4628      	mov	r0, r5
 800c696:	f7f4 fbc3 	bl	8000e20 <__aeabi_fdiv>
 800c69a:	2600      	movs	r6, #0
 800c69c:	4604      	mov	r4, r0
 800c69e:	4621      	mov	r1, r4
 800c6a0:	4620      	mov	r0, r4
 800c6a2:	f7f4 fb09 	bl	8000cb8 <__aeabi_fmul>
 800c6a6:	4601      	mov	r1, r0
 800c6a8:	4680      	mov	r8, r0
 800c6aa:	f7f4 fb05 	bl	8000cb8 <__aeabi_fmul>
 800c6ae:	4605      	mov	r5, r0
 800c6b0:	494d      	ldr	r1, [pc, #308]	; (800c7e8 <atanf+0x1d8>)
 800c6b2:	f7f4 fb01 	bl	8000cb8 <__aeabi_fmul>
 800c6b6:	494d      	ldr	r1, [pc, #308]	; (800c7ec <atanf+0x1dc>)
 800c6b8:	f7f4 f9f6 	bl	8000aa8 <__addsf3>
 800c6bc:	4629      	mov	r1, r5
 800c6be:	f7f4 fafb 	bl	8000cb8 <__aeabi_fmul>
 800c6c2:	494b      	ldr	r1, [pc, #300]	; (800c7f0 <atanf+0x1e0>)
 800c6c4:	f7f4 f9f0 	bl	8000aa8 <__addsf3>
 800c6c8:	4629      	mov	r1, r5
 800c6ca:	f7f4 faf5 	bl	8000cb8 <__aeabi_fmul>
 800c6ce:	4949      	ldr	r1, [pc, #292]	; (800c7f4 <atanf+0x1e4>)
 800c6d0:	f7f4 f9ea 	bl	8000aa8 <__addsf3>
 800c6d4:	4629      	mov	r1, r5
 800c6d6:	f7f4 faef 	bl	8000cb8 <__aeabi_fmul>
 800c6da:	4947      	ldr	r1, [pc, #284]	; (800c7f8 <atanf+0x1e8>)
 800c6dc:	f7f4 f9e4 	bl	8000aa8 <__addsf3>
 800c6e0:	4629      	mov	r1, r5
 800c6e2:	f7f4 fae9 	bl	8000cb8 <__aeabi_fmul>
 800c6e6:	4945      	ldr	r1, [pc, #276]	; (800c7fc <atanf+0x1ec>)
 800c6e8:	f7f4 f9de 	bl	8000aa8 <__addsf3>
 800c6ec:	4641      	mov	r1, r8
 800c6ee:	f7f4 fae3 	bl	8000cb8 <__aeabi_fmul>
 800c6f2:	4943      	ldr	r1, [pc, #268]	; (800c800 <atanf+0x1f0>)
 800c6f4:	4680      	mov	r8, r0
 800c6f6:	4628      	mov	r0, r5
 800c6f8:	f7f4 fade 	bl	8000cb8 <__aeabi_fmul>
 800c6fc:	4941      	ldr	r1, [pc, #260]	; (800c804 <atanf+0x1f4>)
 800c6fe:	f7f4 f9d1 	bl	8000aa4 <__aeabi_fsub>
 800c702:	4629      	mov	r1, r5
 800c704:	f7f4 fad8 	bl	8000cb8 <__aeabi_fmul>
 800c708:	493f      	ldr	r1, [pc, #252]	; (800c808 <atanf+0x1f8>)
 800c70a:	f7f4 f9cb 	bl	8000aa4 <__aeabi_fsub>
 800c70e:	4629      	mov	r1, r5
 800c710:	f7f4 fad2 	bl	8000cb8 <__aeabi_fmul>
 800c714:	493d      	ldr	r1, [pc, #244]	; (800c80c <atanf+0x1fc>)
 800c716:	f7f4 f9c5 	bl	8000aa4 <__aeabi_fsub>
 800c71a:	4629      	mov	r1, r5
 800c71c:	f7f4 facc 	bl	8000cb8 <__aeabi_fmul>
 800c720:	493b      	ldr	r1, [pc, #236]	; (800c810 <atanf+0x200>)
 800c722:	f7f4 f9bf 	bl	8000aa4 <__aeabi_fsub>
 800c726:	4629      	mov	r1, r5
 800c728:	f7f4 fac6 	bl	8000cb8 <__aeabi_fmul>
 800c72c:	4601      	mov	r1, r0
 800c72e:	4640      	mov	r0, r8
 800c730:	f7f4 f9ba 	bl	8000aa8 <__addsf3>
 800c734:	4621      	mov	r1, r4
 800c736:	f7f4 fabf 	bl	8000cb8 <__aeabi_fmul>
 800c73a:	1c73      	adds	r3, r6, #1
 800c73c:	4601      	mov	r1, r0
 800c73e:	d133      	bne.n	800c7a8 <atanf+0x198>
 800c740:	4620      	mov	r0, r4
 800c742:	f7f4 f9af 	bl	8000aa4 <__aeabi_fsub>
 800c746:	e772      	b.n	800c62e <atanf+0x1e>
 800c748:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c74c:	f7f4 f9aa 	bl	8000aa4 <__aeabi_fsub>
 800c750:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c754:	4605      	mov	r5, r0
 800c756:	4620      	mov	r0, r4
 800c758:	f7f4 f9a6 	bl	8000aa8 <__addsf3>
 800c75c:	4601      	mov	r1, r0
 800c75e:	4628      	mov	r0, r5
 800c760:	f7f4 fb5e 	bl	8000e20 <__aeabi_fdiv>
 800c764:	2601      	movs	r6, #1
 800c766:	4604      	mov	r4, r0
 800c768:	e799      	b.n	800c69e <atanf+0x8e>
 800c76a:	4b2a      	ldr	r3, [pc, #168]	; (800c814 <atanf+0x204>)
 800c76c:	429d      	cmp	r5, r3
 800c76e:	dc14      	bgt.n	800c79a <atanf+0x18a>
 800c770:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800c774:	f7f4 f996 	bl	8000aa4 <__aeabi_fsub>
 800c778:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800c77c:	4605      	mov	r5, r0
 800c77e:	4620      	mov	r0, r4
 800c780:	f7f4 fa9a 	bl	8000cb8 <__aeabi_fmul>
 800c784:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c788:	f7f4 f98e 	bl	8000aa8 <__addsf3>
 800c78c:	4601      	mov	r1, r0
 800c78e:	4628      	mov	r0, r5
 800c790:	f7f4 fb46 	bl	8000e20 <__aeabi_fdiv>
 800c794:	2602      	movs	r6, #2
 800c796:	4604      	mov	r4, r0
 800c798:	e781      	b.n	800c69e <atanf+0x8e>
 800c79a:	4601      	mov	r1, r0
 800c79c:	481e      	ldr	r0, [pc, #120]	; (800c818 <atanf+0x208>)
 800c79e:	f7f4 fb3f 	bl	8000e20 <__aeabi_fdiv>
 800c7a2:	2603      	movs	r6, #3
 800c7a4:	4604      	mov	r4, r0
 800c7a6:	e77a      	b.n	800c69e <atanf+0x8e>
 800c7a8:	4b1c      	ldr	r3, [pc, #112]	; (800c81c <atanf+0x20c>)
 800c7aa:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800c7ae:	f7f4 f979 	bl	8000aa4 <__aeabi_fsub>
 800c7b2:	4621      	mov	r1, r4
 800c7b4:	f7f4 f976 	bl	8000aa4 <__aeabi_fsub>
 800c7b8:	4b19      	ldr	r3, [pc, #100]	; (800c820 <atanf+0x210>)
 800c7ba:	4601      	mov	r1, r0
 800c7bc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c7c0:	f7f4 f970 	bl	8000aa4 <__aeabi_fsub>
 800c7c4:	2f00      	cmp	r7, #0
 800c7c6:	4604      	mov	r4, r0
 800c7c8:	f6bf af37 	bge.w	800c63a <atanf+0x2a>
 800c7cc:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
 800c7d0:	e733      	b.n	800c63a <atanf+0x2a>
 800c7d2:	4c14      	ldr	r4, [pc, #80]	; (800c824 <atanf+0x214>)
 800c7d4:	e731      	b.n	800c63a <atanf+0x2a>
 800c7d6:	bf00      	nop
 800c7d8:	3fc90fdb 	.word	0x3fc90fdb
 800c7dc:	3edfffff 	.word	0x3edfffff
 800c7e0:	7149f2ca 	.word	0x7149f2ca
 800c7e4:	3f97ffff 	.word	0x3f97ffff
 800c7e8:	3c8569d7 	.word	0x3c8569d7
 800c7ec:	3d4bda59 	.word	0x3d4bda59
 800c7f0:	3d886b35 	.word	0x3d886b35
 800c7f4:	3dba2e6e 	.word	0x3dba2e6e
 800c7f8:	3e124925 	.word	0x3e124925
 800c7fc:	3eaaaaab 	.word	0x3eaaaaab
 800c800:	bd15a221 	.word	0xbd15a221
 800c804:	3d6ef16b 	.word	0x3d6ef16b
 800c808:	3d9d8795 	.word	0x3d9d8795
 800c80c:	3de38e38 	.word	0x3de38e38
 800c810:	3e4ccccd 	.word	0x3e4ccccd
 800c814:	401bffff 	.word	0x401bffff
 800c818:	bf800000 	.word	0xbf800000
 800c81c:	0800cfe4 	.word	0x0800cfe4
 800c820:	0800cfd4 	.word	0x0800cfd4
 800c824:	bfc90fdb 	.word	0xbfc90fdb

0800c828 <fabsf>:
 800c828:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800c82c:	4770      	bx	lr
	...

0800c830 <scalbnf>:
 800c830:	f030 4300 	bics.w	r3, r0, #2147483648	; 0x80000000
 800c834:	b510      	push	{r4, lr}
 800c836:	4602      	mov	r2, r0
 800c838:	460c      	mov	r4, r1
 800c83a:	4601      	mov	r1, r0
 800c83c:	d027      	beq.n	800c88e <scalbnf+0x5e>
 800c83e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c842:	d303      	bcc.n	800c84c <scalbnf+0x1c>
 800c844:	f7f4 f930 	bl	8000aa8 <__addsf3>
 800c848:	4602      	mov	r2, r0
 800c84a:	e020      	b.n	800c88e <scalbnf+0x5e>
 800c84c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c850:	d215      	bcs.n	800c87e <scalbnf+0x4e>
 800c852:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 800c856:	f7f4 fa2f 	bl	8000cb8 <__aeabi_fmul>
 800c85a:	4b18      	ldr	r3, [pc, #96]	; (800c8bc <scalbnf+0x8c>)
 800c85c:	4602      	mov	r2, r0
 800c85e:	429c      	cmp	r4, r3
 800c860:	db22      	blt.n	800c8a8 <scalbnf+0x78>
 800c862:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800c866:	3b19      	subs	r3, #25
 800c868:	4423      	add	r3, r4
 800c86a:	2bfe      	cmp	r3, #254	; 0xfe
 800c86c:	dd09      	ble.n	800c882 <scalbnf+0x52>
 800c86e:	4611      	mov	r1, r2
 800c870:	4813      	ldr	r0, [pc, #76]	; (800c8c0 <scalbnf+0x90>)
 800c872:	f000 f829 	bl	800c8c8 <copysignf>
 800c876:	4912      	ldr	r1, [pc, #72]	; (800c8c0 <scalbnf+0x90>)
 800c878:	f7f4 fa1e 	bl	8000cb8 <__aeabi_fmul>
 800c87c:	e7e4      	b.n	800c848 <scalbnf+0x18>
 800c87e:	0ddb      	lsrs	r3, r3, #23
 800c880:	e7f2      	b.n	800c868 <scalbnf+0x38>
 800c882:	2b00      	cmp	r3, #0
 800c884:	dd05      	ble.n	800c892 <scalbnf+0x62>
 800c886:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 800c88a:	ea40 52c3 	orr.w	r2, r0, r3, lsl #23
 800c88e:	4610      	mov	r0, r2
 800c890:	bd10      	pop	{r4, pc}
 800c892:	f113 0f16 	cmn.w	r3, #22
 800c896:	da09      	bge.n	800c8ac <scalbnf+0x7c>
 800c898:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c89c:	429c      	cmp	r4, r3
 800c89e:	4611      	mov	r1, r2
 800c8a0:	dce6      	bgt.n	800c870 <scalbnf+0x40>
 800c8a2:	4808      	ldr	r0, [pc, #32]	; (800c8c4 <scalbnf+0x94>)
 800c8a4:	f000 f810 	bl	800c8c8 <copysignf>
 800c8a8:	4906      	ldr	r1, [pc, #24]	; (800c8c4 <scalbnf+0x94>)
 800c8aa:	e7e5      	b.n	800c878 <scalbnf+0x48>
 800c8ac:	3319      	adds	r3, #25
 800c8ae:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 800c8b2:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 800c8b6:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800c8ba:	e7dd      	b.n	800c878 <scalbnf+0x48>
 800c8bc:	ffff3cb0 	.word	0xffff3cb0
 800c8c0:	7149f2ca 	.word	0x7149f2ca
 800c8c4:	0da24260 	.word	0x0da24260

0800c8c8 <copysignf>:
 800c8c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800c8cc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800c8d0:	4308      	orrs	r0, r1
 800c8d2:	4770      	bx	lr

0800c8d4 <__errno>:
 800c8d4:	4b01      	ldr	r3, [pc, #4]	; (800c8dc <__errno+0x8>)
 800c8d6:	6818      	ldr	r0, [r3, #0]
 800c8d8:	4770      	bx	lr
 800c8da:	bf00      	nop
 800c8dc:	20000100 	.word	0x20000100

0800c8e0 <_init>:
 800c8e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8e2:	bf00      	nop
 800c8e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8e6:	bc08      	pop	{r3}
 800c8e8:	469e      	mov	lr, r3
 800c8ea:	4770      	bx	lr

0800c8ec <_fini>:
 800c8ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8ee:	bf00      	nop
 800c8f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8f2:	bc08      	pop	{r3}
 800c8f4:	469e      	mov	lr, r3
 800c8f6:	4770      	bx	lr
