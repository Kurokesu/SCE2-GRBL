
stm32grbl11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c534  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006f8  0800c644  0800c644  0001c644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800cd3c  0800cd3c  0001cd3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800cd40  0800cd40  0001cd40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001f8  20000000  0800cd44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000012f8  200001f8  0800cf3c  000201f8  2**2
                  ALLOC
  7 ._user_heap_stack 00000280  200014f0  0800cf3c  000214f0  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
  9 .debug_info   0002993a  00000000  00000000  00020221  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00006be2  00000000  00000000  00049b5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000105d9  00000000  00000000  0005073d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001258  00000000  00000000  00060d18  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000037d8  00000000  00000000  00061f70  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000d145  00000000  00000000  00065748  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000059a0  00000000  00000000  0007288d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0007822d  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003718  00000000  00000000  000782ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f8 	.word	0x200001f8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c62c 	.word	0x0800c62c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001fc 	.word	0x200001fc
 800014c:	0800c62c 	.word	0x0800c62c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f092 0f00 	teq	r2, #0
 800043a:	bf14      	ite	ne
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	4770      	bxeq	lr
 8000442:	b530      	push	{r4, r5, lr}
 8000444:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000450:	e720      	b.n	8000294 <__adddf3+0x138>
 8000452:	bf00      	nop

08000454 <__aeabi_ul2d>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	b530      	push	{r4, r5, lr}
 800045e:	f04f 0500 	mov.w	r5, #0
 8000462:	e00a      	b.n	800047a <__aeabi_l2d+0x16>

08000464 <__aeabi_l2d>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	b530      	push	{r4, r5, lr}
 800046e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000472:	d502      	bpl.n	800047a <__aeabi_l2d+0x16>
 8000474:	4240      	negs	r0, r0
 8000476:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000482:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000486:	f43f aedc 	beq.w	8000242 <__adddf3+0xe6>
 800048a:	f04f 0203 	mov.w	r2, #3
 800048e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000492:	bf18      	it	ne
 8000494:	3203      	addne	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a2:	f1c2 0320 	rsb	r3, r2, #32
 80004a6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004aa:	fa20 f002 	lsr.w	r0, r0, r2
 80004ae:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b2:	ea40 000e 	orr.w	r0, r0, lr
 80004b6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ba:	4414      	add	r4, r2
 80004bc:	e6c1      	b.n	8000242 <__adddf3+0xe6>
 80004be:	bf00      	nop

080004c0 <__aeabi_dmul>:
 80004c0:	b570      	push	{r4, r5, r6, lr}
 80004c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004ce:	bf1d      	ittte	ne
 80004d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d4:	ea94 0f0c 	teqne	r4, ip
 80004d8:	ea95 0f0c 	teqne	r5, ip
 80004dc:	f000 f8de 	bleq	800069c <__aeabi_dmul+0x1dc>
 80004e0:	442c      	add	r4, r5
 80004e2:	ea81 0603 	eor.w	r6, r1, r3
 80004e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f2:	bf18      	it	ne
 80004f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80004fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000500:	d038      	beq.n	8000574 <__aeabi_dmul+0xb4>
 8000502:	fba0 ce02 	umull	ip, lr, r0, r2
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800050e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000512:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000516:	f04f 0600 	mov.w	r6, #0
 800051a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800051e:	f09c 0f00 	teq	ip, #0
 8000522:	bf18      	it	ne
 8000524:	f04e 0e01 	orrne.w	lr, lr, #1
 8000528:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800052c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000530:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000534:	d204      	bcs.n	8000540 <__aeabi_dmul+0x80>
 8000536:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053a:	416d      	adcs	r5, r5
 800053c:	eb46 0606 	adc.w	r6, r6, r6
 8000540:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000544:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000548:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800054c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000550:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000554:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000558:	bf88      	it	hi
 800055a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800055e:	d81e      	bhi.n	800059e <__aeabi_dmul+0xde>
 8000560:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000564:	bf08      	it	eq
 8000566:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056a:	f150 0000 	adcs.w	r0, r0, #0
 800056e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000572:	bd70      	pop	{r4, r5, r6, pc}
 8000574:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000578:	ea46 0101 	orr.w	r1, r6, r1
 800057c:	ea40 0002 	orr.w	r0, r0, r2
 8000580:	ea81 0103 	eor.w	r1, r1, r3
 8000584:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000588:	bfc2      	ittt	gt
 800058a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800058e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000592:	bd70      	popgt	{r4, r5, r6, pc}
 8000594:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000598:	f04f 0e00 	mov.w	lr, #0
 800059c:	3c01      	subs	r4, #1
 800059e:	f300 80ab 	bgt.w	80006f8 <__aeabi_dmul+0x238>
 80005a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005a6:	bfde      	ittt	le
 80005a8:	2000      	movle	r0, #0
 80005aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ae:	bd70      	pople	{r4, r5, r6, pc}
 80005b0:	f1c4 0400 	rsb	r4, r4, #0
 80005b4:	3c20      	subs	r4, #32
 80005b6:	da35      	bge.n	8000624 <__aeabi_dmul+0x164>
 80005b8:	340c      	adds	r4, #12
 80005ba:	dc1b      	bgt.n	80005f4 <__aeabi_dmul+0x134>
 80005bc:	f104 0414 	add.w	r4, r4, #20
 80005c0:	f1c4 0520 	rsb	r5, r4, #32
 80005c4:	fa00 f305 	lsl.w	r3, r0, r5
 80005c8:	fa20 f004 	lsr.w	r0, r0, r4
 80005cc:	fa01 f205 	lsl.w	r2, r1, r5
 80005d0:	ea40 0002 	orr.w	r0, r0, r2
 80005d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e0:	fa21 f604 	lsr.w	r6, r1, r4
 80005e4:	eb42 0106 	adc.w	r1, r2, r6
 80005e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005ec:	bf08      	it	eq
 80005ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f1c4 040c 	rsb	r4, r4, #12
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000600:	fa20 f005 	lsr.w	r0, r0, r5
 8000604:	fa01 f204 	lsl.w	r2, r1, r4
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000610:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000614:	f141 0100 	adc.w	r1, r1, #0
 8000618:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800061c:	bf08      	it	eq
 800061e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000622:	bd70      	pop	{r4, r5, r6, pc}
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f205 	lsl.w	r2, r0, r5
 800062c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000630:	fa20 f304 	lsr.w	r3, r0, r4
 8000634:	fa01 f205 	lsl.w	r2, r1, r5
 8000638:	ea43 0302 	orr.w	r3, r3, r2
 800063c:	fa21 f004 	lsr.w	r0, r1, r4
 8000640:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000644:	fa21 f204 	lsr.w	r2, r1, r4
 8000648:	ea20 0002 	bic.w	r0, r0, r2
 800064c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f094 0f00 	teq	r4, #0
 8000660:	d10f      	bne.n	8000682 <__aeabi_dmul+0x1c2>
 8000662:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000666:	0040      	lsls	r0, r0, #1
 8000668:	eb41 0101 	adc.w	r1, r1, r1
 800066c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000670:	bf08      	it	eq
 8000672:	3c01      	subeq	r4, #1
 8000674:	d0f7      	beq.n	8000666 <__aeabi_dmul+0x1a6>
 8000676:	ea41 0106 	orr.w	r1, r1, r6
 800067a:	f095 0f00 	teq	r5, #0
 800067e:	bf18      	it	ne
 8000680:	4770      	bxne	lr
 8000682:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000686:	0052      	lsls	r2, r2, #1
 8000688:	eb43 0303 	adc.w	r3, r3, r3
 800068c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000690:	bf08      	it	eq
 8000692:	3d01      	subeq	r5, #1
 8000694:	d0f7      	beq.n	8000686 <__aeabi_dmul+0x1c6>
 8000696:	ea43 0306 	orr.w	r3, r3, r6
 800069a:	4770      	bx	lr
 800069c:	ea94 0f0c 	teq	r4, ip
 80006a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a4:	bf18      	it	ne
 80006a6:	ea95 0f0c 	teqne	r5, ip
 80006aa:	d00c      	beq.n	80006c6 <__aeabi_dmul+0x206>
 80006ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b0:	bf18      	it	ne
 80006b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006b6:	d1d1      	bne.n	800065c <__aeabi_dmul+0x19c>
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd70      	pop	{r4, r5, r6, pc}
 80006c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ca:	bf06      	itte	eq
 80006cc:	4610      	moveq	r0, r2
 80006ce:	4619      	moveq	r1, r3
 80006d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d4:	d019      	beq.n	800070a <__aeabi_dmul+0x24a>
 80006d6:	ea94 0f0c 	teq	r4, ip
 80006da:	d102      	bne.n	80006e2 <__aeabi_dmul+0x222>
 80006dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e0:	d113      	bne.n	800070a <__aeabi_dmul+0x24a>
 80006e2:	ea95 0f0c 	teq	r5, ip
 80006e6:	d105      	bne.n	80006f4 <__aeabi_dmul+0x234>
 80006e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006ec:	bf1c      	itt	ne
 80006ee:	4610      	movne	r0, r2
 80006f0:	4619      	movne	r1, r3
 80006f2:	d10a      	bne.n	800070a <__aeabi_dmul+0x24a>
 80006f4:	ea81 0103 	eor.w	r1, r1, r3
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000700:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000704:	f04f 0000 	mov.w	r0, #0
 8000708:	bd70      	pop	{r4, r5, r6, pc}
 800070a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800070e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000712:	bd70      	pop	{r4, r5, r6, pc}

08000714 <__aeabi_ddiv>:
 8000714:	b570      	push	{r4, r5, r6, lr}
 8000716:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800071e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000722:	bf1d      	ittte	ne
 8000724:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000728:	ea94 0f0c 	teqne	r4, ip
 800072c:	ea95 0f0c 	teqne	r5, ip
 8000730:	f000 f8a7 	bleq	8000882 <__aeabi_ddiv+0x16e>
 8000734:	eba4 0405 	sub.w	r4, r4, r5
 8000738:	ea81 0e03 	eor.w	lr, r1, r3
 800073c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000740:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000744:	f000 8088 	beq.w	8000858 <__aeabi_ddiv+0x144>
 8000748:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800074c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000750:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000754:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000758:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800075c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000760:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000764:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000768:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800076c:	429d      	cmp	r5, r3
 800076e:	bf08      	it	eq
 8000770:	4296      	cmpeq	r6, r2
 8000772:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000776:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077a:	d202      	bcs.n	8000782 <__aeabi_ddiv+0x6e>
 800077c:	085b      	lsrs	r3, r3, #1
 800077e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000782:	1ab6      	subs	r6, r6, r2
 8000784:	eb65 0503 	sbc.w	r5, r5, r3
 8000788:	085b      	lsrs	r3, r3, #1
 800078a:	ea4f 0232 	mov.w	r2, r2, rrx
 800078e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000792:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000796:	ebb6 0e02 	subs.w	lr, r6, r2
 800079a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800079e:	bf22      	ittt	cs
 80007a0:	1ab6      	subcs	r6, r6, r2
 80007a2:	4675      	movcs	r5, lr
 80007a4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f0:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f4:	d018      	beq.n	8000828 <__aeabi_ddiv+0x114>
 80007f6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80007fe:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000802:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000806:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800080e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000812:	d1c0      	bne.n	8000796 <__aeabi_ddiv+0x82>
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	d10b      	bne.n	8000832 <__aeabi_ddiv+0x11e>
 800081a:	ea41 0100 	orr.w	r1, r1, r0
 800081e:	f04f 0000 	mov.w	r0, #0
 8000822:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000826:	e7b6      	b.n	8000796 <__aeabi_ddiv+0x82>
 8000828:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800082c:	bf04      	itt	eq
 800082e:	4301      	orreq	r1, r0
 8000830:	2000      	moveq	r0, #0
 8000832:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000836:	bf88      	it	hi
 8000838:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800083c:	f63f aeaf 	bhi.w	800059e <__aeabi_dmul+0xde>
 8000840:	ebb5 0c03 	subs.w	ip, r5, r3
 8000844:	bf04      	itt	eq
 8000846:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800084e:	f150 0000 	adcs.w	r0, r0, #0
 8000852:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000856:	bd70      	pop	{r4, r5, r6, pc}
 8000858:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800085c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000860:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000864:	bfc2      	ittt	gt
 8000866:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800086e:	bd70      	popgt	{r4, r5, r6, pc}
 8000870:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000874:	f04f 0e00 	mov.w	lr, #0
 8000878:	3c01      	subs	r4, #1
 800087a:	e690      	b.n	800059e <__aeabi_dmul+0xde>
 800087c:	ea45 0e06 	orr.w	lr, r5, r6
 8000880:	e68d      	b.n	800059e <__aeabi_dmul+0xde>
 8000882:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000886:	ea94 0f0c 	teq	r4, ip
 800088a:	bf08      	it	eq
 800088c:	ea95 0f0c 	teqeq	r5, ip
 8000890:	f43f af3b 	beq.w	800070a <__aeabi_dmul+0x24a>
 8000894:	ea94 0f0c 	teq	r4, ip
 8000898:	d10a      	bne.n	80008b0 <__aeabi_ddiv+0x19c>
 800089a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800089e:	f47f af34 	bne.w	800070a <__aeabi_dmul+0x24a>
 80008a2:	ea95 0f0c 	teq	r5, ip
 80008a6:	f47f af25 	bne.w	80006f4 <__aeabi_dmul+0x234>
 80008aa:	4610      	mov	r0, r2
 80008ac:	4619      	mov	r1, r3
 80008ae:	e72c      	b.n	800070a <__aeabi_dmul+0x24a>
 80008b0:	ea95 0f0c 	teq	r5, ip
 80008b4:	d106      	bne.n	80008c4 <__aeabi_ddiv+0x1b0>
 80008b6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ba:	f43f aefd 	beq.w	80006b8 <__aeabi_dmul+0x1f8>
 80008be:	4610      	mov	r0, r2
 80008c0:	4619      	mov	r1, r3
 80008c2:	e722      	b.n	800070a <__aeabi_dmul+0x24a>
 80008c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c8:	bf18      	it	ne
 80008ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ce:	f47f aec5 	bne.w	800065c <__aeabi_dmul+0x19c>
 80008d2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008d6:	f47f af0d 	bne.w	80006f4 <__aeabi_dmul+0x234>
 80008da:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008de:	f47f aeeb 	bne.w	80006b8 <__aeabi_dmul+0x1f8>
 80008e2:	e712      	b.n	800070a <__aeabi_dmul+0x24a>

080008e4 <__gedf2>:
 80008e4:	f04f 3cff 	mov.w	ip, #4294967295
 80008e8:	e006      	b.n	80008f8 <__cmpdf2+0x4>
 80008ea:	bf00      	nop

080008ec <__ledf2>:
 80008ec:	f04f 0c01 	mov.w	ip, #1
 80008f0:	e002      	b.n	80008f8 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__cmpdf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80008fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000900:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000904:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800090e:	d01b      	beq.n	8000948 <__cmpdf2+0x54>
 8000910:	b001      	add	sp, #4
 8000912:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000916:	bf0c      	ite	eq
 8000918:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800091c:	ea91 0f03 	teqne	r1, r3
 8000920:	bf02      	ittt	eq
 8000922:	ea90 0f02 	teqeq	r0, r2
 8000926:	2000      	moveq	r0, #0
 8000928:	4770      	bxeq	lr
 800092a:	f110 0f00 	cmn.w	r0, #0
 800092e:	ea91 0f03 	teq	r1, r3
 8000932:	bf58      	it	pl
 8000934:	4299      	cmppl	r1, r3
 8000936:	bf08      	it	eq
 8000938:	4290      	cmpeq	r0, r2
 800093a:	bf2c      	ite	cs
 800093c:	17d8      	asrcs	r0, r3, #31
 800093e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000942:	f040 0001 	orr.w	r0, r0, #1
 8000946:	4770      	bx	lr
 8000948:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800094c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000950:	d102      	bne.n	8000958 <__cmpdf2+0x64>
 8000952:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000956:	d107      	bne.n	8000968 <__cmpdf2+0x74>
 8000958:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800095c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000960:	d1d6      	bne.n	8000910 <__cmpdf2+0x1c>
 8000962:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000966:	d0d3      	beq.n	8000910 <__cmpdf2+0x1c>
 8000968:	f85d 0b04 	ldr.w	r0, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop

08000970 <__aeabi_cdrcmple>:
 8000970:	4684      	mov	ip, r0
 8000972:	4610      	mov	r0, r2
 8000974:	4662      	mov	r2, ip
 8000976:	468c      	mov	ip, r1
 8000978:	4619      	mov	r1, r3
 800097a:	4663      	mov	r3, ip
 800097c:	e000      	b.n	8000980 <__aeabi_cdcmpeq>
 800097e:	bf00      	nop

08000980 <__aeabi_cdcmpeq>:
 8000980:	b501      	push	{r0, lr}
 8000982:	f7ff ffb7 	bl	80008f4 <__cmpdf2>
 8000986:	2800      	cmp	r0, #0
 8000988:	bf48      	it	mi
 800098a:	f110 0f00 	cmnmi.w	r0, #0
 800098e:	bd01      	pop	{r0, pc}

08000990 <__aeabi_dcmpeq>:
 8000990:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000994:	f7ff fff4 	bl	8000980 <__aeabi_cdcmpeq>
 8000998:	bf0c      	ite	eq
 800099a:	2001      	moveq	r0, #1
 800099c:	2000      	movne	r0, #0
 800099e:	f85d fb08 	ldr.w	pc, [sp], #8
 80009a2:	bf00      	nop

080009a4 <__aeabi_dcmplt>:
 80009a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a8:	f7ff ffea 	bl	8000980 <__aeabi_cdcmpeq>
 80009ac:	bf34      	ite	cc
 80009ae:	2001      	movcc	r0, #1
 80009b0:	2000      	movcs	r0, #0
 80009b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009b6:	bf00      	nop

080009b8 <__aeabi_dcmple>:
 80009b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009bc:	f7ff ffe0 	bl	8000980 <__aeabi_cdcmpeq>
 80009c0:	bf94      	ite	ls
 80009c2:	2001      	movls	r0, #1
 80009c4:	2000      	movhi	r0, #0
 80009c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ca:	bf00      	nop

080009cc <__aeabi_dcmpge>:
 80009cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d0:	f7ff ffce 	bl	8000970 <__aeabi_cdrcmple>
 80009d4:	bf94      	ite	ls
 80009d6:	2001      	movls	r0, #1
 80009d8:	2000      	movhi	r0, #0
 80009da:	f85d fb08 	ldr.w	pc, [sp], #8
 80009de:	bf00      	nop

080009e0 <__aeabi_dcmpgt>:
 80009e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e4:	f7ff ffc4 	bl	8000970 <__aeabi_cdrcmple>
 80009e8:	bf34      	ite	cc
 80009ea:	2001      	movcc	r0, #1
 80009ec:	2000      	movcs	r0, #0
 80009ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f2:	bf00      	nop

080009f4 <__aeabi_d2f>:
 80009f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009fc:	bf24      	itt	cs
 80009fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a06:	d90d      	bls.n	8000a24 <__aeabi_d2f+0x30>
 8000a08:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a14:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a1c:	bf08      	it	eq
 8000a1e:	f020 0001 	biceq.w	r0, r0, #1
 8000a22:	4770      	bx	lr
 8000a24:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a28:	d121      	bne.n	8000a6e <__aeabi_d2f+0x7a>
 8000a2a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a2e:	bfbc      	itt	lt
 8000a30:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a34:	4770      	bxlt	lr
 8000a36:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a3e:	f1c2 0218 	rsb	r2, r2, #24
 8000a42:	f1c2 0c20 	rsb	ip, r2, #32
 8000a46:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a4a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a4e:	bf18      	it	ne
 8000a50:	f040 0001 	orrne.w	r0, r0, #1
 8000a54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a5c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a60:	ea40 000c 	orr.w	r0, r0, ip
 8000a64:	fa23 f302 	lsr.w	r3, r3, r2
 8000a68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a6c:	e7cc      	b.n	8000a08 <__aeabi_d2f+0x14>
 8000a6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a72:	d107      	bne.n	8000a84 <__aeabi_d2f+0x90>
 8000a74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a78:	bf1e      	ittt	ne
 8000a7a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a7e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a82:	4770      	bxne	lr
 8000a84:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <__aeabi_frsub>:
 8000a94:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a98:	e002      	b.n	8000aa0 <__addsf3>
 8000a9a:	bf00      	nop

08000a9c <__aeabi_fsub>:
 8000a9c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000aa0 <__addsf3>:
 8000aa0:	0042      	lsls	r2, r0, #1
 8000aa2:	bf1f      	itttt	ne
 8000aa4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000aa8:	ea92 0f03 	teqne	r2, r3
 8000aac:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ab0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ab4:	d06a      	beq.n	8000b8c <__addsf3+0xec>
 8000ab6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aba:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000abe:	bfc1      	itttt	gt
 8000ac0:	18d2      	addgt	r2, r2, r3
 8000ac2:	4041      	eorgt	r1, r0
 8000ac4:	4048      	eorgt	r0, r1
 8000ac6:	4041      	eorgt	r1, r0
 8000ac8:	bfb8      	it	lt
 8000aca:	425b      	neglt	r3, r3
 8000acc:	2b19      	cmp	r3, #25
 8000ace:	bf88      	it	hi
 8000ad0:	4770      	bxhi	lr
 8000ad2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ad6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ada:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ade:	bf18      	it	ne
 8000ae0:	4240      	negne	r0, r0
 8000ae2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ae6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000aea:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000aee:	bf18      	it	ne
 8000af0:	4249      	negne	r1, r1
 8000af2:	ea92 0f03 	teq	r2, r3
 8000af6:	d03f      	beq.n	8000b78 <__addsf3+0xd8>
 8000af8:	f1a2 0201 	sub.w	r2, r2, #1
 8000afc:	fa41 fc03 	asr.w	ip, r1, r3
 8000b00:	eb10 000c 	adds.w	r0, r0, ip
 8000b04:	f1c3 0320 	rsb	r3, r3, #32
 8000b08:	fa01 f103 	lsl.w	r1, r1, r3
 8000b0c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b10:	d502      	bpl.n	8000b18 <__addsf3+0x78>
 8000b12:	4249      	negs	r1, r1
 8000b14:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b18:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b1c:	d313      	bcc.n	8000b46 <__addsf3+0xa6>
 8000b1e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b22:	d306      	bcc.n	8000b32 <__addsf3+0x92>
 8000b24:	0840      	lsrs	r0, r0, #1
 8000b26:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b2a:	f102 0201 	add.w	r2, r2, #1
 8000b2e:	2afe      	cmp	r2, #254	; 0xfe
 8000b30:	d251      	bcs.n	8000bd6 <__addsf3+0x136>
 8000b32:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b36:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b3a:	bf08      	it	eq
 8000b3c:	f020 0001 	biceq.w	r0, r0, #1
 8000b40:	ea40 0003 	orr.w	r0, r0, r3
 8000b44:	4770      	bx	lr
 8000b46:	0049      	lsls	r1, r1, #1
 8000b48:	eb40 0000 	adc.w	r0, r0, r0
 8000b4c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b50:	f1a2 0201 	sub.w	r2, r2, #1
 8000b54:	d1ed      	bne.n	8000b32 <__addsf3+0x92>
 8000b56:	fab0 fc80 	clz	ip, r0
 8000b5a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b5e:	ebb2 020c 	subs.w	r2, r2, ip
 8000b62:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b66:	bfaa      	itet	ge
 8000b68:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b6c:	4252      	neglt	r2, r2
 8000b6e:	4318      	orrge	r0, r3
 8000b70:	bfbc      	itt	lt
 8000b72:	40d0      	lsrlt	r0, r2
 8000b74:	4318      	orrlt	r0, r3
 8000b76:	4770      	bx	lr
 8000b78:	f092 0f00 	teq	r2, #0
 8000b7c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b80:	bf06      	itte	eq
 8000b82:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b86:	3201      	addeq	r2, #1
 8000b88:	3b01      	subne	r3, #1
 8000b8a:	e7b5      	b.n	8000af8 <__addsf3+0x58>
 8000b8c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b90:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b94:	bf18      	it	ne
 8000b96:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b9a:	d021      	beq.n	8000be0 <__addsf3+0x140>
 8000b9c:	ea92 0f03 	teq	r2, r3
 8000ba0:	d004      	beq.n	8000bac <__addsf3+0x10c>
 8000ba2:	f092 0f00 	teq	r2, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	4608      	moveq	r0, r1
 8000baa:	4770      	bx	lr
 8000bac:	ea90 0f01 	teq	r0, r1
 8000bb0:	bf1c      	itt	ne
 8000bb2:	2000      	movne	r0, #0
 8000bb4:	4770      	bxne	lr
 8000bb6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bba:	d104      	bne.n	8000bc6 <__addsf3+0x126>
 8000bbc:	0040      	lsls	r0, r0, #1
 8000bbe:	bf28      	it	cs
 8000bc0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bc4:	4770      	bx	lr
 8000bc6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bca:	bf3c      	itt	cc
 8000bcc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bd0:	4770      	bxcc	lr
 8000bd2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bd6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bda:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bde:	4770      	bx	lr
 8000be0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000be4:	bf16      	itet	ne
 8000be6:	4608      	movne	r0, r1
 8000be8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bec:	4601      	movne	r1, r0
 8000bee:	0242      	lsls	r2, r0, #9
 8000bf0:	bf06      	itte	eq
 8000bf2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bf6:	ea90 0f01 	teqeq	r0, r1
 8000bfa:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bfe:	4770      	bx	lr

08000c00 <__aeabi_ui2f>:
 8000c00:	f04f 0300 	mov.w	r3, #0
 8000c04:	e004      	b.n	8000c10 <__aeabi_i2f+0x8>
 8000c06:	bf00      	nop

08000c08 <__aeabi_i2f>:
 8000c08:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c0c:	bf48      	it	mi
 8000c0e:	4240      	negmi	r0, r0
 8000c10:	ea5f 0c00 	movs.w	ip, r0
 8000c14:	bf08      	it	eq
 8000c16:	4770      	bxeq	lr
 8000c18:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c1c:	4601      	mov	r1, r0
 8000c1e:	f04f 0000 	mov.w	r0, #0
 8000c22:	e01c      	b.n	8000c5e <__aeabi_l2f+0x2a>

08000c24 <__aeabi_ul2f>:
 8000c24:	ea50 0201 	orrs.w	r2, r0, r1
 8000c28:	bf08      	it	eq
 8000c2a:	4770      	bxeq	lr
 8000c2c:	f04f 0300 	mov.w	r3, #0
 8000c30:	e00a      	b.n	8000c48 <__aeabi_l2f+0x14>
 8000c32:	bf00      	nop

08000c34 <__aeabi_l2f>:
 8000c34:	ea50 0201 	orrs.w	r2, r0, r1
 8000c38:	bf08      	it	eq
 8000c3a:	4770      	bxeq	lr
 8000c3c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c40:	d502      	bpl.n	8000c48 <__aeabi_l2f+0x14>
 8000c42:	4240      	negs	r0, r0
 8000c44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c48:	ea5f 0c01 	movs.w	ip, r1
 8000c4c:	bf02      	ittt	eq
 8000c4e:	4684      	moveq	ip, r0
 8000c50:	4601      	moveq	r1, r0
 8000c52:	2000      	moveq	r0, #0
 8000c54:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c58:	bf08      	it	eq
 8000c5a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c5e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c62:	fabc f28c 	clz	r2, ip
 8000c66:	3a08      	subs	r2, #8
 8000c68:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c6c:	db10      	blt.n	8000c90 <__aeabi_l2f+0x5c>
 8000c6e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c72:	4463      	add	r3, ip
 8000c74:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c78:	f1c2 0220 	rsb	r2, r2, #32
 8000c7c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c80:	fa20 f202 	lsr.w	r2, r0, r2
 8000c84:	eb43 0002 	adc.w	r0, r3, r2
 8000c88:	bf08      	it	eq
 8000c8a:	f020 0001 	biceq.w	r0, r0, #1
 8000c8e:	4770      	bx	lr
 8000c90:	f102 0220 	add.w	r2, r2, #32
 8000c94:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c98:	f1c2 0220 	rsb	r2, r2, #32
 8000c9c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ca0:	fa21 f202 	lsr.w	r2, r1, r2
 8000ca4:	eb43 0002 	adc.w	r0, r3, r2
 8000ca8:	bf08      	it	eq
 8000caa:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cae:	4770      	bx	lr

08000cb0 <__aeabi_fmul>:
 8000cb0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cb4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cb8:	bf1e      	ittt	ne
 8000cba:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cbe:	ea92 0f0c 	teqne	r2, ip
 8000cc2:	ea93 0f0c 	teqne	r3, ip
 8000cc6:	d06f      	beq.n	8000da8 <__aeabi_fmul+0xf8>
 8000cc8:	441a      	add	r2, r3
 8000cca:	ea80 0c01 	eor.w	ip, r0, r1
 8000cce:	0240      	lsls	r0, r0, #9
 8000cd0:	bf18      	it	ne
 8000cd2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cd6:	d01e      	beq.n	8000d16 <__aeabi_fmul+0x66>
 8000cd8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cdc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000ce0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000ce4:	fba0 3101 	umull	r3, r1, r0, r1
 8000ce8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000cec:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000cf0:	bf3e      	ittt	cc
 8000cf2:	0049      	lslcc	r1, r1, #1
 8000cf4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cf8:	005b      	lslcc	r3, r3, #1
 8000cfa:	ea40 0001 	orr.w	r0, r0, r1
 8000cfe:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d02:	2afd      	cmp	r2, #253	; 0xfd
 8000d04:	d81d      	bhi.n	8000d42 <__aeabi_fmul+0x92>
 8000d06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d0e:	bf08      	it	eq
 8000d10:	f020 0001 	biceq.w	r0, r0, #1
 8000d14:	4770      	bx	lr
 8000d16:	f090 0f00 	teq	r0, #0
 8000d1a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d1e:	bf08      	it	eq
 8000d20:	0249      	lsleq	r1, r1, #9
 8000d22:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d26:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d2a:	3a7f      	subs	r2, #127	; 0x7f
 8000d2c:	bfc2      	ittt	gt
 8000d2e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d32:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d36:	4770      	bxgt	lr
 8000d38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d3c:	f04f 0300 	mov.w	r3, #0
 8000d40:	3a01      	subs	r2, #1
 8000d42:	dc5d      	bgt.n	8000e00 <__aeabi_fmul+0x150>
 8000d44:	f112 0f19 	cmn.w	r2, #25
 8000d48:	bfdc      	itt	le
 8000d4a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d4e:	4770      	bxle	lr
 8000d50:	f1c2 0200 	rsb	r2, r2, #0
 8000d54:	0041      	lsls	r1, r0, #1
 8000d56:	fa21 f102 	lsr.w	r1, r1, r2
 8000d5a:	f1c2 0220 	rsb	r2, r2, #32
 8000d5e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d62:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d66:	f140 0000 	adc.w	r0, r0, #0
 8000d6a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d6e:	bf08      	it	eq
 8000d70:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d74:	4770      	bx	lr
 8000d76:	f092 0f00 	teq	r2, #0
 8000d7a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d7e:	bf02      	ittt	eq
 8000d80:	0040      	lsleq	r0, r0, #1
 8000d82:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d86:	3a01      	subeq	r2, #1
 8000d88:	d0f9      	beq.n	8000d7e <__aeabi_fmul+0xce>
 8000d8a:	ea40 000c 	orr.w	r0, r0, ip
 8000d8e:	f093 0f00 	teq	r3, #0
 8000d92:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d96:	bf02      	ittt	eq
 8000d98:	0049      	lsleq	r1, r1, #1
 8000d9a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d9e:	3b01      	subeq	r3, #1
 8000da0:	d0f9      	beq.n	8000d96 <__aeabi_fmul+0xe6>
 8000da2:	ea41 010c 	orr.w	r1, r1, ip
 8000da6:	e78f      	b.n	8000cc8 <__aeabi_fmul+0x18>
 8000da8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dac:	ea92 0f0c 	teq	r2, ip
 8000db0:	bf18      	it	ne
 8000db2:	ea93 0f0c 	teqne	r3, ip
 8000db6:	d00a      	beq.n	8000dce <__aeabi_fmul+0x11e>
 8000db8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000dbc:	bf18      	it	ne
 8000dbe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000dc2:	d1d8      	bne.n	8000d76 <__aeabi_fmul+0xc6>
 8000dc4:	ea80 0001 	eor.w	r0, r0, r1
 8000dc8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dcc:	4770      	bx	lr
 8000dce:	f090 0f00 	teq	r0, #0
 8000dd2:	bf17      	itett	ne
 8000dd4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dd8:	4608      	moveq	r0, r1
 8000dda:	f091 0f00 	teqne	r1, #0
 8000dde:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000de2:	d014      	beq.n	8000e0e <__aeabi_fmul+0x15e>
 8000de4:	ea92 0f0c 	teq	r2, ip
 8000de8:	d101      	bne.n	8000dee <__aeabi_fmul+0x13e>
 8000dea:	0242      	lsls	r2, r0, #9
 8000dec:	d10f      	bne.n	8000e0e <__aeabi_fmul+0x15e>
 8000dee:	ea93 0f0c 	teq	r3, ip
 8000df2:	d103      	bne.n	8000dfc <__aeabi_fmul+0x14c>
 8000df4:	024b      	lsls	r3, r1, #9
 8000df6:	bf18      	it	ne
 8000df8:	4608      	movne	r0, r1
 8000dfa:	d108      	bne.n	8000e0e <__aeabi_fmul+0x15e>
 8000dfc:	ea80 0001 	eor.w	r0, r0, r1
 8000e00:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e04:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e08:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e0c:	4770      	bx	lr
 8000e0e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e12:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e16:	4770      	bx	lr

08000e18 <__aeabi_fdiv>:
 8000e18:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e1c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e20:	bf1e      	ittt	ne
 8000e22:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e26:	ea92 0f0c 	teqne	r2, ip
 8000e2a:	ea93 0f0c 	teqne	r3, ip
 8000e2e:	d069      	beq.n	8000f04 <__aeabi_fdiv+0xec>
 8000e30:	eba2 0203 	sub.w	r2, r2, r3
 8000e34:	ea80 0c01 	eor.w	ip, r0, r1
 8000e38:	0249      	lsls	r1, r1, #9
 8000e3a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e3e:	d037      	beq.n	8000eb0 <__aeabi_fdiv+0x98>
 8000e40:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e44:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e48:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e4c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e50:	428b      	cmp	r3, r1
 8000e52:	bf38      	it	cc
 8000e54:	005b      	lslcc	r3, r3, #1
 8000e56:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e5a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	bf24      	itt	cs
 8000e62:	1a5b      	subcs	r3, r3, r1
 8000e64:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e68:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e6c:	bf24      	itt	cs
 8000e6e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e72:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e76:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e7a:	bf24      	itt	cs
 8000e7c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e80:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e84:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e88:	bf24      	itt	cs
 8000e8a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e8e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e92:	011b      	lsls	r3, r3, #4
 8000e94:	bf18      	it	ne
 8000e96:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e9a:	d1e0      	bne.n	8000e5e <__aeabi_fdiv+0x46>
 8000e9c:	2afd      	cmp	r2, #253	; 0xfd
 8000e9e:	f63f af50 	bhi.w	8000d42 <__aeabi_fmul+0x92>
 8000ea2:	428b      	cmp	r3, r1
 8000ea4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ea8:	bf08      	it	eq
 8000eaa:	f020 0001 	biceq.w	r0, r0, #1
 8000eae:	4770      	bx	lr
 8000eb0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000eb4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eb8:	327f      	adds	r2, #127	; 0x7f
 8000eba:	bfc2      	ittt	gt
 8000ebc:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ec0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ec4:	4770      	bxgt	lr
 8000ec6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000eca:	f04f 0300 	mov.w	r3, #0
 8000ece:	3a01      	subs	r2, #1
 8000ed0:	e737      	b.n	8000d42 <__aeabi_fmul+0x92>
 8000ed2:	f092 0f00 	teq	r2, #0
 8000ed6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000eda:	bf02      	ittt	eq
 8000edc:	0040      	lsleq	r0, r0, #1
 8000ede:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ee2:	3a01      	subeq	r2, #1
 8000ee4:	d0f9      	beq.n	8000eda <__aeabi_fdiv+0xc2>
 8000ee6:	ea40 000c 	orr.w	r0, r0, ip
 8000eea:	f093 0f00 	teq	r3, #0
 8000eee:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ef2:	bf02      	ittt	eq
 8000ef4:	0049      	lsleq	r1, r1, #1
 8000ef6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000efa:	3b01      	subeq	r3, #1
 8000efc:	d0f9      	beq.n	8000ef2 <__aeabi_fdiv+0xda>
 8000efe:	ea41 010c 	orr.w	r1, r1, ip
 8000f02:	e795      	b.n	8000e30 <__aeabi_fdiv+0x18>
 8000f04:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f08:	ea92 0f0c 	teq	r2, ip
 8000f0c:	d108      	bne.n	8000f20 <__aeabi_fdiv+0x108>
 8000f0e:	0242      	lsls	r2, r0, #9
 8000f10:	f47f af7d 	bne.w	8000e0e <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	f47f af70 	bne.w	8000dfc <__aeabi_fmul+0x14c>
 8000f1c:	4608      	mov	r0, r1
 8000f1e:	e776      	b.n	8000e0e <__aeabi_fmul+0x15e>
 8000f20:	ea93 0f0c 	teq	r3, ip
 8000f24:	d104      	bne.n	8000f30 <__aeabi_fdiv+0x118>
 8000f26:	024b      	lsls	r3, r1, #9
 8000f28:	f43f af4c 	beq.w	8000dc4 <__aeabi_fmul+0x114>
 8000f2c:	4608      	mov	r0, r1
 8000f2e:	e76e      	b.n	8000e0e <__aeabi_fmul+0x15e>
 8000f30:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f34:	bf18      	it	ne
 8000f36:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f3a:	d1ca      	bne.n	8000ed2 <__aeabi_fdiv+0xba>
 8000f3c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f40:	f47f af5c 	bne.w	8000dfc <__aeabi_fmul+0x14c>
 8000f44:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f48:	f47f af3c 	bne.w	8000dc4 <__aeabi_fmul+0x114>
 8000f4c:	e75f      	b.n	8000e0e <__aeabi_fmul+0x15e>
 8000f4e:	bf00      	nop

08000f50 <__gesf2>:
 8000f50:	f04f 3cff 	mov.w	ip, #4294967295
 8000f54:	e006      	b.n	8000f64 <__cmpsf2+0x4>
 8000f56:	bf00      	nop

08000f58 <__lesf2>:
 8000f58:	f04f 0c01 	mov.w	ip, #1
 8000f5c:	e002      	b.n	8000f64 <__cmpsf2+0x4>
 8000f5e:	bf00      	nop

08000f60 <__cmpsf2>:
 8000f60:	f04f 0c01 	mov.w	ip, #1
 8000f64:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f68:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f6c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f70:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f74:	bf18      	it	ne
 8000f76:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f7a:	d011      	beq.n	8000fa0 <__cmpsf2+0x40>
 8000f7c:	b001      	add	sp, #4
 8000f7e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f82:	bf18      	it	ne
 8000f84:	ea90 0f01 	teqne	r0, r1
 8000f88:	bf58      	it	pl
 8000f8a:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f8e:	bf88      	it	hi
 8000f90:	17c8      	asrhi	r0, r1, #31
 8000f92:	bf38      	it	cc
 8000f94:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f98:	bf18      	it	ne
 8000f9a:	f040 0001 	orrne.w	r0, r0, #1
 8000f9e:	4770      	bx	lr
 8000fa0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fa4:	d102      	bne.n	8000fac <__cmpsf2+0x4c>
 8000fa6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000faa:	d105      	bne.n	8000fb8 <__cmpsf2+0x58>
 8000fac:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fb0:	d1e4      	bne.n	8000f7c <__cmpsf2+0x1c>
 8000fb2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fb6:	d0e1      	beq.n	8000f7c <__cmpsf2+0x1c>
 8000fb8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop

08000fc0 <__aeabi_cfrcmple>:
 8000fc0:	4684      	mov	ip, r0
 8000fc2:	4608      	mov	r0, r1
 8000fc4:	4661      	mov	r1, ip
 8000fc6:	e7ff      	b.n	8000fc8 <__aeabi_cfcmpeq>

08000fc8 <__aeabi_cfcmpeq>:
 8000fc8:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fca:	f7ff ffc9 	bl	8000f60 <__cmpsf2>
 8000fce:	2800      	cmp	r0, #0
 8000fd0:	bf48      	it	mi
 8000fd2:	f110 0f00 	cmnmi.w	r0, #0
 8000fd6:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fd8 <__aeabi_fcmpeq>:
 8000fd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fdc:	f7ff fff4 	bl	8000fc8 <__aeabi_cfcmpeq>
 8000fe0:	bf0c      	ite	eq
 8000fe2:	2001      	moveq	r0, #1
 8000fe4:	2000      	movne	r0, #0
 8000fe6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fea:	bf00      	nop

08000fec <__aeabi_fcmplt>:
 8000fec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff0:	f7ff ffea 	bl	8000fc8 <__aeabi_cfcmpeq>
 8000ff4:	bf34      	ite	cc
 8000ff6:	2001      	movcc	r0, #1
 8000ff8:	2000      	movcs	r0, #0
 8000ffa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ffe:	bf00      	nop

08001000 <__aeabi_fcmple>:
 8001000:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001004:	f7ff ffe0 	bl	8000fc8 <__aeabi_cfcmpeq>
 8001008:	bf94      	ite	ls
 800100a:	2001      	movls	r0, #1
 800100c:	2000      	movhi	r0, #0
 800100e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001012:	bf00      	nop

08001014 <__aeabi_fcmpge>:
 8001014:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001018:	f7ff ffd2 	bl	8000fc0 <__aeabi_cfrcmple>
 800101c:	bf94      	ite	ls
 800101e:	2001      	movls	r0, #1
 8001020:	2000      	movhi	r0, #0
 8001022:	f85d fb08 	ldr.w	pc, [sp], #8
 8001026:	bf00      	nop

08001028 <__aeabi_fcmpgt>:
 8001028:	f84d ed08 	str.w	lr, [sp, #-8]!
 800102c:	f7ff ffc8 	bl	8000fc0 <__aeabi_cfrcmple>
 8001030:	bf34      	ite	cc
 8001032:	2001      	movcc	r0, #1
 8001034:	2000      	movcs	r0, #0
 8001036:	f85d fb08 	ldr.w	pc, [sp], #8
 800103a:	bf00      	nop

0800103c <__aeabi_fcmpun>:
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	d102      	bne.n	8001050 <__aeabi_fcmpun+0x14>
 800104a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800104e:	d108      	bne.n	8001062 <__aeabi_fcmpun+0x26>
 8001050:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001054:	d102      	bne.n	800105c <__aeabi_fcmpun+0x20>
 8001056:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800105a:	d102      	bne.n	8001062 <__aeabi_fcmpun+0x26>
 800105c:	f04f 0000 	mov.w	r0, #0
 8001060:	4770      	bx	lr
 8001062:	f04f 0001 	mov.w	r0, #1
 8001066:	4770      	bx	lr

08001068 <__aeabi_f2iz>:
 8001068:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800106c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001070:	d30f      	bcc.n	8001092 <__aeabi_f2iz+0x2a>
 8001072:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001076:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800107a:	d90d      	bls.n	8001098 <__aeabi_f2iz+0x30>
 800107c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001080:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001084:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001088:	fa23 f002 	lsr.w	r0, r3, r2
 800108c:	bf18      	it	ne
 800108e:	4240      	negne	r0, r0
 8001090:	4770      	bx	lr
 8001092:	f04f 0000 	mov.w	r0, #0
 8001096:	4770      	bx	lr
 8001098:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800109c:	d101      	bne.n	80010a2 <__aeabi_f2iz+0x3a>
 800109e:	0242      	lsls	r2, r0, #9
 80010a0:	d105      	bne.n	80010ae <__aeabi_f2iz+0x46>
 80010a2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80010a6:	bf08      	it	eq
 80010a8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80010ac:	4770      	bx	lr
 80010ae:	f04f 0000 	mov.w	r0, #0
 80010b2:	4770      	bx	lr

080010b4 <__aeabi_f2uiz>:
 80010b4:	0042      	lsls	r2, r0, #1
 80010b6:	d20e      	bcs.n	80010d6 <__aeabi_f2uiz+0x22>
 80010b8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010bc:	d30b      	bcc.n	80010d6 <__aeabi_f2uiz+0x22>
 80010be:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010c2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010c6:	d409      	bmi.n	80010dc <__aeabi_f2uiz+0x28>
 80010c8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010d0:	fa23 f002 	lsr.w	r0, r3, r2
 80010d4:	4770      	bx	lr
 80010d6:	f04f 0000 	mov.w	r0, #0
 80010da:	4770      	bx	lr
 80010dc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010e0:	d101      	bne.n	80010e6 <__aeabi_f2uiz+0x32>
 80010e2:	0242      	lsls	r2, r0, #9
 80010e4:	d102      	bne.n	80010ec <__aeabi_f2uiz+0x38>
 80010e6:	f04f 30ff 	mov.w	r0, #4294967295
 80010ea:	4770      	bx	lr
 80010ec:	f04f 0000 	mov.w	r0, #0
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop

080010f4 <NVIC_PriorityGroupConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 80010f4:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 80010f8:	4b02      	ldr	r3, [pc, #8]	; (8001104 <NVIC_PriorityGroupConfig+0x10>)
 80010fa:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 80010fe:	60d8      	str	r0, [r3, #12]
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <NVIC_Init>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8001108:	78c3      	ldrb	r3, [r0, #3]
 800110a:	b95b      	cbnz	r3, 8001124 <NVIC_Init+0x1c>
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800110c:	2101      	movs	r1, #1
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800110e:	7803      	ldrb	r3, [r0, #0]
 8001110:	4814      	ldr	r0, [pc, #80]	; (8001164 <NVIC_Init+0x5c>)
 8001112:	095a      	lsrs	r2, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8001114:	f003 031f 	and.w	r3, r3, #31
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001118:	3220      	adds	r2, #32
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800111a:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800111e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  }
}
 8001122:	4770      	bx	lr
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8001124:	4b10      	ldr	r3, [pc, #64]	; (8001168 <NVIC_Init+0x60>)
    tmpsub = tmpsub >> tmppriority;
 8001126:	210f      	movs	r1, #15
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8001128:	68da      	ldr	r2, [r3, #12]
{
 800112a:	b470      	push	{r4, r5, r6}
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800112c:	43d2      	mvns	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800112e:	2401      	movs	r4, #1
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8001130:	7885      	ldrb	r5, [r0, #2]
    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8001132:	7843      	ldrb	r3, [r0, #1]
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8001134:	f3c2 2202 	ubfx	r2, r2, #8, #3
    tmppre = (0x4 - tmppriority);
 8001138:	f1c2 0604 	rsb	r6, r2, #4
    tmpsub = tmpsub >> tmppriority;
 800113c:	fa21 f202 	lsr.w	r2, r1, r2
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8001140:	402a      	ands	r2, r5
    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8001142:	40b3      	lsls	r3, r6
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8001144:	7801      	ldrb	r1, [r0, #0]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8001146:	4313      	orrs	r3, r2
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8001148:	4a06      	ldr	r2, [pc, #24]	; (8001164 <NVIC_Init+0x5c>)
    tmppriority = tmppriority << 0x04;
 800114a:	011b      	lsls	r3, r3, #4
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800114c:	f001 051f 	and.w	r5, r1, #31
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8001150:	1850      	adds	r0, r2, r1
 8001152:	b2db      	uxtb	r3, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8001154:	40ac      	lsls	r4, r5
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8001156:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800115a:	0949      	lsrs	r1, r1, #5
 800115c:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
}
 8001160:	bc70      	pop	{r4, r5, r6}
 8001162:	4770      	bx	lr
 8001164:	e000e100 	.word	0xe000e100
 8001168:	e000ed00 	.word	0xe000ed00

0800116c <EXTI_Init>:
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 800116c:	7983      	ldrb	r3, [r0, #6]
 800116e:	b333      	cbz	r3, 80011be <EXTI_Init+0x52>
{
 8001170:	b430      	push	{r4, r5}
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8001172:	6804      	ldr	r4, [r0, #0]
 8001174:	4b1b      	ldr	r3, [pc, #108]	; (80011e4 <EXTI_Init+0x78>)
 8001176:	43e1      	mvns	r1, r4
 8001178:	681d      	ldr	r5, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 800117a:	7902      	ldrb	r2, [r0, #4]
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 800117c:	400d      	ands	r5, r1
 800117e:	601d      	str	r5, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8001180:	685d      	ldr	r5, [r3, #4]
    tmp += EXTI_InitStruct->EXTI_Mode;
 8001182:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8001186:	4029      	ands	r1, r5
 8001188:	6059      	str	r1, [r3, #4]
    tmp += EXTI_InitStruct->EXTI_Mode;
 800118a:	f502 3282 	add.w	r2, r2, #66560	; 0x10400

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 800118e:	6815      	ldr	r5, [r2, #0]
    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8001190:	7941      	ldrb	r1, [r0, #5]
    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8001192:	432c      	orrs	r4, r5
 8001194:	6014      	str	r4, [r2, #0]
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8001196:	6802      	ldr	r2, [r0, #0]
 8001198:	689c      	ldr	r4, [r3, #8]
 800119a:	43d0      	mvns	r0, r2
 800119c:	4004      	ands	r4, r0
 800119e:	609c      	str	r4, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 80011a0:	68dc      	ldr	r4, [r3, #12]
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 80011a2:	2910      	cmp	r1, #16
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 80011a4:	ea00 0004 	and.w	r0, r0, r4
 80011a8:	60d8      	str	r0, [r3, #12]
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 80011aa:	d013      	beq.n	80011d4 <EXTI_Init+0x68>
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 80011ac:	bc30      	pop	{r4, r5}
      tmp += EXTI_InitStruct->EXTI_Trigger;
 80011ae:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 80011b2:	f503 3382 	add.w	r3, r3, #66560	; 0x10400
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80011b6:	6819      	ldr	r1, [r3, #0]
 80011b8:	430a      	orrs	r2, r1
 80011ba:	601a      	str	r2, [r3, #0]
}
 80011bc:	4770      	bx	lr
    tmp += EXTI_InitStruct->EXTI_Mode;
 80011be:	7903      	ldrb	r3, [r0, #4]
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 80011c0:	6801      	ldr	r1, [r0, #0]
    tmp += EXTI_InitStruct->EXTI_Mode;
 80011c2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80011c6:	f503 3382 	add.w	r3, r3, #66560	; 0x10400
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	ea22 0201 	bic.w	r2, r2, r1
 80011d0:	601a      	str	r2, [r3, #0]
}
 80011d2:	4770      	bx	lr
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 80011d4:	6899      	ldr	r1, [r3, #8]
}
 80011d6:	bc30      	pop	{r4, r5}
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 80011d8:	4311      	orrs	r1, r2
 80011da:	6099      	str	r1, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 80011dc:	68d9      	ldr	r1, [r3, #12]
 80011de:	430a      	orrs	r2, r1
 80011e0:	60da      	str	r2, [r3, #12]
}
 80011e2:	4770      	bx	lr
 80011e4:	40010400 	.word	0x40010400

080011e8 <EXTI_GetITStatus>:
  ITStatus bitstatus = RESET;
  uint32_t enablestatus = 0;
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 80011e8:	4b05      	ldr	r3, [pc, #20]	; (8001200 <EXTI_GetITStatus+0x18>)
 80011ea:	681a      	ldr	r2, [r3, #0]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 80011ec:	695b      	ldr	r3, [r3, #20]
 80011ee:	4003      	ands	r3, r0
 80011f0:	d004      	beq.n	80011fc <EXTI_GetITStatus+0x14>
 80011f2:	4202      	tst	r2, r0
 80011f4:	bf14      	ite	ne
 80011f6:	2001      	movne	r0, #1
 80011f8:	2000      	moveq	r0, #0
 80011fa:	4770      	bx	lr
 80011fc:	4618      	mov	r0, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 80011fe:	4770      	bx	lr
 8001200:	40010400 	.word	0x40010400

08001204 <EXTI_ClearITPendingBit>:
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8001204:	4b01      	ldr	r3, [pc, #4]	; (800120c <EXTI_ClearITPendingBit+0x8>)
 8001206:	6158      	str	r0, [r3, #20]
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	40010400 	.word	0x40010400

08001210 <FLASH_Unlock>:
 8001210:	4b02      	ldr	r3, [pc, #8]	; (800121c <FLASH_Unlock+0xc>)
 8001212:	4903      	ldr	r1, [pc, #12]	; (8001220 <FLASH_Unlock+0x10>)
 8001214:	4a03      	ldr	r2, [pc, #12]	; (8001224 <FLASH_Unlock+0x14>)
 8001216:	6059      	str	r1, [r3, #4]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	4770      	bx	lr
 800121c:	40022000 	.word	0x40022000
 8001220:	45670123 	.word	0x45670123
 8001224:	cdef89ab 	.word	0xcdef89ab

08001228 <FLASH_ErasePage>:
  */
FLASH_Status FLASH_GetBank1Status(void)
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 8001228:	4938      	ldr	r1, [pc, #224]	; (800130c <FLASH_ErasePage+0xe4>)
 800122a:	68cb      	ldr	r3, [r1, #12]
 800122c:	f013 0f01 	tst.w	r3, #1
 8001230:	68cb      	ldr	r3, [r1, #12]
 8001232:	d103      	bne.n	800123c <FLASH_ErasePage+0x14>
  {
    flashstatus = FLASH_BUSY;
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 8001234:	075b      	lsls	r3, r3, #29
 8001236:	d538      	bpl.n	80012aa <FLASH_ErasePage+0x82>
    { 
      flashstatus = FLASH_ERROR_PG;
 8001238:	2002      	movs	r0, #2
 800123a:	4770      	bx	lr
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 800123c:	07db      	lsls	r3, r3, #31
 800123e:	d42c      	bmi.n	800129a <FLASH_ErasePage+0x72>
 8001240:	f44f 2330 	mov.w	r3, #720896	; 0xb0000
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 8001244:	4a31      	ldr	r2, [pc, #196]	; (800130c <FLASH_ErasePage+0xe4>)
 8001246:	68d1      	ldr	r1, [r2, #12]
 8001248:	0749      	lsls	r1, r1, #29
 800124a:	d505      	bpl.n	8001258 <FLASH_ErasePage+0x30>
      flashstatus = FLASH_ERROR_PG;
 800124c:	2002      	movs	r0, #2
  status = FLASH_GetBank1Status();
  /* Wait for a Flash operation to complete or a TIMEOUT to occur */
  while((status == FLASH_FLAG_BANK1_BSY) && (Timeout != 0x00))
  {
    status = FLASH_GetBank1Status();
    Timeout--;
 800124e:	3b01      	subs	r3, #1
  }
  if(Timeout == 0x00 )
  {
    status = FLASH_TIMEOUT;
 8001250:	2b00      	cmp	r3, #0
 8001252:	bf08      	it	eq
 8001254:	2005      	moveq	r0, #5
 8001256:	4770      	bx	lr
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 8001258:	68d2      	ldr	r2, [r2, #12]
 800125a:	06d2      	lsls	r2, r2, #27
 800125c:	d41a      	bmi.n	8001294 <FLASH_ErasePage+0x6c>
  if(Timeout == 0x00 )
 800125e:	2b01      	cmp	r3, #1
 8001260:	d021      	beq.n	80012a6 <FLASH_ErasePage+0x7e>
    FLASH->CR|= CR_PER_Set;
 8001262:	4a2a      	ldr	r2, [pc, #168]	; (800130c <FLASH_ErasePage+0xe4>)
 8001264:	6913      	ldr	r3, [r2, #16]
 8001266:	f043 0302 	orr.w	r3, r3, #2
 800126a:	6113      	str	r3, [r2, #16]
    FLASH->AR = Page_Address; 
 800126c:	6150      	str	r0, [r2, #20]
    FLASH->CR|= CR_STRT_Set;
 800126e:	6913      	ldr	r3, [r2, #16]
 8001270:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001274:	6113      	str	r3, [r2, #16]
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 8001276:	68d3      	ldr	r3, [r2, #12]
 8001278:	f013 0f01 	tst.w	r3, #1
 800127c:	68d3      	ldr	r3, [r2, #12]
 800127e:	d119      	bne.n	80012b4 <FLASH_ErasePage+0x8c>
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 8001280:	075b      	lsls	r3, r3, #29
 8001282:	d53b      	bpl.n	80012fc <FLASH_ErasePage+0xd4>
      flashstatus = FLASH_ERROR_PG;
 8001284:	2002      	movs	r0, #2
    FLASH->CR &= CR_PER_Reset;
 8001286:	f641 71fd 	movw	r1, #8189	; 0x1ffd
 800128a:	4a20      	ldr	r2, [pc, #128]	; (800130c <FLASH_ErasePage+0xe4>)
 800128c:	6913      	ldr	r3, [r2, #16]
 800128e:	400b      	ands	r3, r1
 8001290:	6113      	str	r3, [r2, #16]
 8001292:	4770      	bx	lr
        flashstatus = FLASH_ERROR_WRP;
 8001294:	2003      	movs	r0, #3
    Timeout--;
 8001296:	3b01      	subs	r3, #1
 8001298:	e7da      	b.n	8001250 <FLASH_ErasePage+0x28>
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 800129a:	4b1d      	ldr	r3, [pc, #116]	; (8001310 <FLASH_ErasePage+0xe8>)
 800129c:	68ca      	ldr	r2, [r1, #12]
 800129e:	07d2      	lsls	r2, r2, #31
 80012a0:	d5d0      	bpl.n	8001244 <FLASH_ErasePage+0x1c>
  while((status == FLASH_FLAG_BANK1_BSY) && (Timeout != 0x00))
 80012a2:	3b01      	subs	r3, #1
 80012a4:	d1fa      	bne.n	800129c <FLASH_ErasePage+0x74>
    status = FLASH_TIMEOUT;
 80012a6:	2005      	movs	r0, #5
 80012a8:	4770      	bx	lr
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 80012aa:	68cb      	ldr	r3, [r1, #12]
 80012ac:	06d9      	lsls	r1, r3, #27
 80012ae:	d5d8      	bpl.n	8001262 <FLASH_ErasePage+0x3a>
        flashstatus = FLASH_ERROR_WRP;
 80012b0:	2003      	movs	r0, #3
 80012b2:	4770      	bx	lr
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 80012b4:	07d9      	lsls	r1, r3, #31
 80012b6:	d409      	bmi.n	80012cc <FLASH_ErasePage+0xa4>
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 80012b8:	68d3      	ldr	r3, [r2, #12]
 80012ba:	075b      	lsls	r3, r3, #29
 80012bc:	d4e2      	bmi.n	8001284 <FLASH_ErasePage+0x5c>
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 80012be:	68d3      	ldr	r3, [r2, #12]
        flashstatus = FLASH_COMPLETE;
 80012c0:	f013 0f10 	tst.w	r3, #16
 80012c4:	bf14      	ite	ne
 80012c6:	2003      	movne	r0, #3
 80012c8:	2004      	moveq	r0, #4
 80012ca:	e7dc      	b.n	8001286 <FLASH_ErasePage+0x5e>
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 80012cc:	4b10      	ldr	r3, [pc, #64]	; (8001310 <FLASH_ErasePage+0xe8>)
 80012ce:	68d1      	ldr	r1, [r2, #12]
 80012d0:	07c9      	lsls	r1, r1, #31
 80012d2:	d408      	bmi.n	80012e6 <FLASH_ErasePage+0xbe>
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 80012d4:	68d1      	ldr	r1, [r2, #12]
 80012d6:	3b01      	subs	r3, #1
 80012d8:	0749      	lsls	r1, r1, #29
 80012da:	d508      	bpl.n	80012ee <FLASH_ErasePage+0xc6>
      flashstatus = FLASH_ERROR_PG;
 80012dc:	2002      	movs	r0, #2
    status = FLASH_TIMEOUT;
 80012de:	2b00      	cmp	r3, #0
 80012e0:	bf08      	it	eq
 80012e2:	2005      	moveq	r0, #5
 80012e4:	e7cf      	b.n	8001286 <FLASH_ErasePage+0x5e>
  while((status == FLASH_FLAG_BANK1_BSY) && (Timeout != 0x00))
 80012e6:	3b01      	subs	r3, #1
 80012e8:	d1f1      	bne.n	80012ce <FLASH_ErasePage+0xa6>
    status = FLASH_TIMEOUT;
 80012ea:	2005      	movs	r0, #5
 80012ec:	e7cb      	b.n	8001286 <FLASH_ErasePage+0x5e>
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 80012ee:	68d2      	ldr	r2, [r2, #12]
        flashstatus = FLASH_COMPLETE;
 80012f0:	f012 0f10 	tst.w	r2, #16
 80012f4:	bf14      	ite	ne
 80012f6:	2003      	movne	r0, #3
 80012f8:	2004      	moveq	r0, #4
 80012fa:	e7f0      	b.n	80012de <FLASH_ErasePage+0xb6>
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 80012fc:	68d3      	ldr	r3, [r2, #12]
        flashstatus = FLASH_ERROR_WRP;
 80012fe:	f013 0f10 	tst.w	r3, #16
 8001302:	bf0c      	ite	eq
 8001304:	2004      	moveq	r0, #4
 8001306:	2003      	movne	r0, #3
 8001308:	e7bd      	b.n	8001286 <FLASH_ErasePage+0x5e>
 800130a:	bf00      	nop
 800130c:	40022000 	.word	0x40022000
 8001310:	000affff 	.word	0x000affff

08001314 <FLASH_ProgramHalfWord>:
{
 8001314:	b410      	push	{r4}
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 8001316:	4c39      	ldr	r4, [pc, #228]	; (80013fc <FLASH_ProgramHalfWord+0xe8>)
 8001318:	68e3      	ldr	r3, [r4, #12]
 800131a:	f013 0f01 	tst.w	r3, #1
 800131e:	68e3      	ldr	r3, [r4, #12]
 8001320:	d104      	bne.n	800132c <FLASH_ProgramHalfWord+0x18>
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 8001322:	075b      	lsls	r3, r3, #29
 8001324:	d538      	bpl.n	8001398 <FLASH_ProgramHalfWord+0x84>
      flashstatus = FLASH_ERROR_PG;
 8001326:	2002      	movs	r0, #2
}
 8001328:	bc10      	pop	{r4}
 800132a:	4770      	bx	lr
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 800132c:	07db      	lsls	r3, r3, #31
 800132e:	d429      	bmi.n	8001384 <FLASH_ProgramHalfWord+0x70>
 8001330:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 8001334:	4a31      	ldr	r2, [pc, #196]	; (80013fc <FLASH_ProgramHalfWord+0xe8>)
 8001336:	68d4      	ldr	r4, [r2, #12]
 8001338:	0764      	lsls	r4, r4, #29
 800133a:	d505      	bpl.n	8001348 <FLASH_ProgramHalfWord+0x34>
      flashstatus = FLASH_ERROR_PG;
 800133c:	2002      	movs	r0, #2
    Timeout--;
 800133e:	3b01      	subs	r3, #1
    status = FLASH_TIMEOUT;
 8001340:	2b00      	cmp	r3, #0
 8001342:	bf08      	it	eq
 8001344:	2005      	moveq	r0, #5
 8001346:	e7ef      	b.n	8001328 <FLASH_ProgramHalfWord+0x14>
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 8001348:	68d2      	ldr	r2, [r2, #12]
 800134a:	06d2      	lsls	r2, r2, #27
 800134c:	d417      	bmi.n	800137e <FLASH_ProgramHalfWord+0x6a>
  if(Timeout == 0x00 )
 800134e:	2b01      	cmp	r3, #1
 8001350:	d01f      	beq.n	8001392 <FLASH_ProgramHalfWord+0x7e>
    FLASH->CR |= CR_PG_Set;
 8001352:	4a2a      	ldr	r2, [pc, #168]	; (80013fc <FLASH_ProgramHalfWord+0xe8>)
 8001354:	6913      	ldr	r3, [r2, #16]
 8001356:	f043 0301 	orr.w	r3, r3, #1
 800135a:	6113      	str	r3, [r2, #16]
    *(__IO uint16_t*)Address = Data;
 800135c:	8001      	strh	r1, [r0, #0]
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 800135e:	68d3      	ldr	r3, [r2, #12]
 8001360:	f013 0f01 	tst.w	r3, #1
 8001364:	68d3      	ldr	r3, [r2, #12]
 8001366:	d11c      	bne.n	80013a2 <FLASH_ProgramHalfWord+0x8e>
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 8001368:	075b      	lsls	r3, r3, #29
 800136a:	d53f      	bpl.n	80013ec <FLASH_ProgramHalfWord+0xd8>
      flashstatus = FLASH_ERROR_PG;
 800136c:	2002      	movs	r0, #2
    FLASH->CR &= CR_PG_Reset;
 800136e:	f641 71fe 	movw	r1, #8190	; 0x1ffe
 8001372:	4a22      	ldr	r2, [pc, #136]	; (80013fc <FLASH_ProgramHalfWord+0xe8>)
}
 8001374:	bc10      	pop	{r4}
    FLASH->CR &= CR_PG_Reset;
 8001376:	6913      	ldr	r3, [r2, #16]
 8001378:	400b      	ands	r3, r1
 800137a:	6113      	str	r3, [r2, #16]
}
 800137c:	4770      	bx	lr
        flashstatus = FLASH_ERROR_WRP;
 800137e:	2003      	movs	r0, #3
    Timeout--;
 8001380:	3b01      	subs	r3, #1
 8001382:	e7dd      	b.n	8001340 <FLASH_ProgramHalfWord+0x2c>
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 8001384:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8001388:	68e2      	ldr	r2, [r4, #12]
 800138a:	07d2      	lsls	r2, r2, #31
 800138c:	d5d2      	bpl.n	8001334 <FLASH_ProgramHalfWord+0x20>
  while((status == FLASH_FLAG_BANK1_BSY) && (Timeout != 0x00))
 800138e:	3b01      	subs	r3, #1
 8001390:	d1fa      	bne.n	8001388 <FLASH_ProgramHalfWord+0x74>
    status = FLASH_TIMEOUT;
 8001392:	2005      	movs	r0, #5
}
 8001394:	bc10      	pop	{r4}
 8001396:	4770      	bx	lr
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 8001398:	68e3      	ldr	r3, [r4, #12]
 800139a:	06dc      	lsls	r4, r3, #27
 800139c:	d5d9      	bpl.n	8001352 <FLASH_ProgramHalfWord+0x3e>
        flashstatus = FLASH_ERROR_WRP;
 800139e:	2003      	movs	r0, #3
 80013a0:	e7c2      	b.n	8001328 <FLASH_ProgramHalfWord+0x14>
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 80013a2:	07d9      	lsls	r1, r3, #31
 80013a4:	d409      	bmi.n	80013ba <FLASH_ProgramHalfWord+0xa6>
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 80013a6:	68d3      	ldr	r3, [r2, #12]
 80013a8:	075b      	lsls	r3, r3, #29
 80013aa:	d4df      	bmi.n	800136c <FLASH_ProgramHalfWord+0x58>
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 80013ac:	68d3      	ldr	r3, [r2, #12]
        flashstatus = FLASH_COMPLETE;
 80013ae:	f013 0f10 	tst.w	r3, #16
 80013b2:	bf14      	ite	ne
 80013b4:	2003      	movne	r0, #3
 80013b6:	2004      	moveq	r0, #4
 80013b8:	e7d9      	b.n	800136e <FLASH_ProgramHalfWord+0x5a>
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 80013ba:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80013be:	68d1      	ldr	r1, [r2, #12]
 80013c0:	07cc      	lsls	r4, r1, #31
 80013c2:	d408      	bmi.n	80013d6 <FLASH_ProgramHalfWord+0xc2>
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 80013c4:	68d1      	ldr	r1, [r2, #12]
 80013c6:	3b01      	subs	r3, #1
 80013c8:	0749      	lsls	r1, r1, #29
 80013ca:	d508      	bpl.n	80013de <FLASH_ProgramHalfWord+0xca>
      flashstatus = FLASH_ERROR_PG;
 80013cc:	2002      	movs	r0, #2
    status = FLASH_TIMEOUT;
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	bf08      	it	eq
 80013d2:	2005      	moveq	r0, #5
 80013d4:	e7cb      	b.n	800136e <FLASH_ProgramHalfWord+0x5a>
  while((status == FLASH_FLAG_BANK1_BSY) && (Timeout != 0x00))
 80013d6:	3b01      	subs	r3, #1
 80013d8:	d1f1      	bne.n	80013be <FLASH_ProgramHalfWord+0xaa>
    status = FLASH_TIMEOUT;
 80013da:	2005      	movs	r0, #5
 80013dc:	e7c7      	b.n	800136e <FLASH_ProgramHalfWord+0x5a>
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 80013de:	68d2      	ldr	r2, [r2, #12]
        flashstatus = FLASH_COMPLETE;
 80013e0:	f012 0f10 	tst.w	r2, #16
 80013e4:	bf14      	ite	ne
 80013e6:	2003      	movne	r0, #3
 80013e8:	2004      	moveq	r0, #4
 80013ea:	e7f0      	b.n	80013ce <FLASH_ProgramHalfWord+0xba>
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 80013ec:	68d3      	ldr	r3, [r2, #12]
        flashstatus = FLASH_ERROR_WRP;
 80013ee:	f013 0f10 	tst.w	r3, #16
 80013f2:	bf0c      	ite	eq
 80013f4:	2004      	moveq	r0, #4
 80013f6:	2003      	movne	r0, #3
 80013f8:	e7b9      	b.n	800136e <FLASH_ProgramHalfWord+0x5a>
 80013fa:	bf00      	nop
 80013fc:	40022000 	.word	0x40022000

08001400 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8001400:	b430      	push	{r4, r5}
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8001402:	78cd      	ldrb	r5, [r1, #3]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8001404:	06eb      	lsls	r3, r5, #27
 8001406:	bf48      	it	mi
 8001408:	788b      	ldrbmi	r3, [r1, #2]
 800140a:	f005 040f 	and.w	r4, r5, #15
 800140e:	bf48      	it	mi
 8001410:	431c      	orrmi	r4, r3
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8001412:	880b      	ldrh	r3, [r1, #0]
 8001414:	f013 0fff 	tst.w	r3, #255	; 0xff
 8001418:	d032      	beq.n	8001480 <GPIO_Init+0x80>
 800141a:	2d48      	cmp	r5, #72	; 0x48
  {
    tmpreg = GPIOx->CRL;
 800141c:	6802      	ldr	r2, [r0, #0]
 800141e:	f000 8081 	beq.w	8001524 <GPIO_Init+0x124>
 8001422:	2d28      	cmp	r5, #40	; 0x28
 8001424:	f000 80b6 	beq.w	8001594 <GPIO_Init+0x194>
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = ((uint32_t)0x01) << pinpos;
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
      if (currentpin == pos)
 8001428:	07d9      	lsls	r1, r3, #31
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 800142a:	bf44      	itt	mi
 800142c:	f022 020f 	bicmi.w	r2, r2, #15
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8001430:	4322      	orrmi	r2, r4
      if (currentpin == pos)
 8001432:	0799      	lsls	r1, r3, #30
        tmpreg &= ~pinmask;
 8001434:	bf44      	itt	mi
 8001436:	f022 02f0 	bicmi.w	r2, r2, #240	; 0xf0
        tmpreg |= (currentmode << pos);
 800143a:	ea42 1204 	orrmi.w	r2, r2, r4, lsl #4
      if (currentpin == pos)
 800143e:	0759      	lsls	r1, r3, #29
        tmpreg &= ~pinmask;
 8001440:	bf44      	itt	mi
 8001442:	f422 6270 	bicmi.w	r2, r2, #3840	; 0xf00
        tmpreg |= (currentmode << pos);
 8001446:	ea42 2204 	orrmi.w	r2, r2, r4, lsl #8
      if (currentpin == pos)
 800144a:	0719      	lsls	r1, r3, #28
        tmpreg &= ~pinmask;
 800144c:	bf44      	itt	mi
 800144e:	f422 4270 	bicmi.w	r2, r2, #61440	; 0xf000
        tmpreg |= (currentmode << pos);
 8001452:	ea42 3204 	orrmi.w	r2, r2, r4, lsl #12
      if (currentpin == pos)
 8001456:	06d9      	lsls	r1, r3, #27
        tmpreg &= ~pinmask;
 8001458:	bf44      	itt	mi
 800145a:	f422 2270 	bicmi.w	r2, r2, #983040	; 0xf0000
        tmpreg |= (currentmode << pos);
 800145e:	ea42 4204 	orrmi.w	r2, r2, r4, lsl #16
      if (currentpin == pos)
 8001462:	0699      	lsls	r1, r3, #26
        tmpreg &= ~pinmask;
 8001464:	bf44      	itt	mi
 8001466:	f422 0270 	bicmi.w	r2, r2, #15728640	; 0xf00000
        tmpreg |= (currentmode << pos);
 800146a:	ea42 5204 	orrmi.w	r2, r2, r4, lsl #20
      if (currentpin == pos)
 800146e:	0659      	lsls	r1, r3, #25
        tmpreg &= ~pinmask;
 8001470:	bf44      	itt	mi
 8001472:	f022 6270 	bicmi.w	r2, r2, #251658240	; 0xf000000
        tmpreg |= (currentmode << pos);
 8001476:	ea42 6204 	orrmi.w	r2, r2, r4, lsl #24
      if (currentpin == pos)
 800147a:	0619      	lsls	r1, r3, #24
 800147c:	d471      	bmi.n	8001562 <GPIO_Init+0x162>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 800147e:	6002      	str	r2, [r0, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8001480:	2bff      	cmp	r3, #255	; 0xff
 8001482:	d930      	bls.n	80014e6 <GPIO_Init+0xe6>
 8001484:	2d28      	cmp	r5, #40	; 0x28
  {
    tmpreg = GPIOx->CRH;
 8001486:	6842      	ldr	r2, [r0, #4]
 8001488:	d02f      	beq.n	80014ea <GPIO_Init+0xea>
 800148a:	2d48      	cmp	r5, #72	; 0x48
 800148c:	d06c      	beq.n	8001568 <GPIO_Init+0x168>
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
      if (currentpin == pos)
 800148e:	05d9      	lsls	r1, r3, #23
      {
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 8001490:	bf44      	itt	mi
 8001492:	f022 020f 	bicmi.w	r2, r2, #15
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8001496:	4322      	orrmi	r2, r4
      if (currentpin == pos)
 8001498:	059d      	lsls	r5, r3, #22
        tmpreg &= ~pinmask;
 800149a:	bf44      	itt	mi
 800149c:	f022 02f0 	bicmi.w	r2, r2, #240	; 0xf0
        tmpreg |= (currentmode << pos);
 80014a0:	ea42 1204 	orrmi.w	r2, r2, r4, lsl #4
      if (currentpin == pos)
 80014a4:	0559      	lsls	r1, r3, #21
        tmpreg &= ~pinmask;
 80014a6:	bf44      	itt	mi
 80014a8:	f422 6270 	bicmi.w	r2, r2, #3840	; 0xf00
        tmpreg |= (currentmode << pos);
 80014ac:	ea42 2204 	orrmi.w	r2, r2, r4, lsl #8
      if (currentpin == pos)
 80014b0:	051d      	lsls	r5, r3, #20
        tmpreg &= ~pinmask;
 80014b2:	bf44      	itt	mi
 80014b4:	f422 4270 	bicmi.w	r2, r2, #61440	; 0xf000
        tmpreg |= (currentmode << pos);
 80014b8:	ea42 3204 	orrmi.w	r2, r2, r4, lsl #12
      if (currentpin == pos)
 80014bc:	04d9      	lsls	r1, r3, #19
        tmpreg &= ~pinmask;
 80014be:	bf44      	itt	mi
 80014c0:	f422 2270 	bicmi.w	r2, r2, #983040	; 0xf0000
        tmpreg |= (currentmode << pos);
 80014c4:	ea42 4204 	orrmi.w	r2, r2, r4, lsl #16
      if (currentpin == pos)
 80014c8:	049d      	lsls	r5, r3, #18
        tmpreg &= ~pinmask;
 80014ca:	bf44      	itt	mi
 80014cc:	f422 0270 	bicmi.w	r2, r2, #15728640	; 0xf00000
        tmpreg |= (currentmode << pos);
 80014d0:	ea42 5204 	orrmi.w	r2, r2, r4, lsl #20
      if (currentpin == pos)
 80014d4:	0459      	lsls	r1, r3, #17
        tmpreg &= ~pinmask;
 80014d6:	bf44      	itt	mi
 80014d8:	f022 6270 	bicmi.w	r2, r2, #251658240	; 0xf000000
        tmpreg |= (currentmode << pos);
 80014dc:	ea42 6204 	orrmi.w	r2, r2, r4, lsl #24
      if (currentpin == pos)
 80014e0:	041d      	lsls	r5, r3, #16
 80014e2:	d43b      	bmi.n	800155c <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
 80014e4:	6042      	str	r2, [r0, #4]
  }
}
 80014e6:	bc30      	pop	{r4, r5}
 80014e8:	4770      	bx	lr
      if (currentpin == pos)
 80014ea:	05d9      	lsls	r1, r3, #23
 80014ec:	f100 80d6 	bmi.w	800169c <GPIO_Init+0x29c>
 80014f0:	059d      	lsls	r5, r3, #22
 80014f2:	f100 80cb 	bmi.w	800168c <GPIO_Init+0x28c>
 80014f6:	0559      	lsls	r1, r3, #21
 80014f8:	f100 80c0 	bmi.w	800167c <GPIO_Init+0x27c>
 80014fc:	051d      	lsls	r5, r3, #20
 80014fe:	f100 80b5 	bmi.w	800166c <GPIO_Init+0x26c>
 8001502:	04d9      	lsls	r1, r3, #19
 8001504:	f100 80aa 	bmi.w	800165c <GPIO_Init+0x25c>
 8001508:	049d      	lsls	r5, r3, #18
 800150a:	f100 809f 	bmi.w	800164c <GPIO_Init+0x24c>
 800150e:	0459      	lsls	r1, r3, #17
 8001510:	f100 8094 	bmi.w	800163c <GPIO_Init+0x23c>
 8001514:	041b      	lsls	r3, r3, #16
 8001516:	d5e5      	bpl.n	80014e4 <GPIO_Init+0xe4>
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001518:	f44f 4300 	mov.w	r3, #32768	; 0x8000
        tmpreg |= (currentmode << pos);
 800151c:	f364 721f 	bfi	r2, r4, #28, #4
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001520:	6143      	str	r3, [r0, #20]
 8001522:	e7df      	b.n	80014e4 <GPIO_Init+0xe4>
      if (currentpin == pos)
 8001524:	07d9      	lsls	r1, r3, #31
 8001526:	f100 80e3 	bmi.w	80016f0 <GPIO_Init+0x2f0>
 800152a:	0799      	lsls	r1, r3, #30
 800152c:	f100 80d9 	bmi.w	80016e2 <GPIO_Init+0x2e2>
 8001530:	0759      	lsls	r1, r3, #29
 8001532:	f100 80cf 	bmi.w	80016d4 <GPIO_Init+0x2d4>
 8001536:	0719      	lsls	r1, r3, #28
 8001538:	f100 80c5 	bmi.w	80016c6 <GPIO_Init+0x2c6>
 800153c:	06d9      	lsls	r1, r3, #27
 800153e:	f100 80bb 	bmi.w	80016b8 <GPIO_Init+0x2b8>
 8001542:	0699      	lsls	r1, r3, #26
 8001544:	f100 80b1 	bmi.w	80016aa <GPIO_Init+0x2aa>
 8001548:	0659      	lsls	r1, r3, #25
 800154a:	f100 80d7 	bmi.w	80016fc <GPIO_Init+0x2fc>
 800154e:	0619      	lsls	r1, r3, #24
 8001550:	d595      	bpl.n	800147e <GPIO_Init+0x7e>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8001552:	2180      	movs	r1, #128	; 0x80
        tmpreg |= (currentmode << pos);
 8001554:	f364 721f 	bfi	r2, r4, #28, #4
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8001558:	6101      	str	r1, [r0, #16]
 800155a:	e790      	b.n	800147e <GPIO_Init+0x7e>
        tmpreg |= (currentmode << pos);
 800155c:	f364 721f 	bfi	r2, r4, #28, #4
 8001560:	e7c0      	b.n	80014e4 <GPIO_Init+0xe4>
        tmpreg |= (currentmode << pos);
 8001562:	f364 721f 	bfi	r2, r4, #28, #4
 8001566:	e78a      	b.n	800147e <GPIO_Init+0x7e>
      if (currentpin == pos)
 8001568:	05d9      	lsls	r1, r3, #23
 800156a:	d448      	bmi.n	80015fe <GPIO_Init+0x1fe>
 800156c:	059d      	lsls	r5, r3, #22
 800156e:	d43e      	bmi.n	80015ee <GPIO_Init+0x1ee>
 8001570:	0559      	lsls	r1, r3, #21
 8001572:	d434      	bmi.n	80015de <GPIO_Init+0x1de>
 8001574:	051d      	lsls	r5, r3, #20
 8001576:	d42a      	bmi.n	80015ce <GPIO_Init+0x1ce>
 8001578:	04d9      	lsls	r1, r3, #19
 800157a:	d44f      	bmi.n	800161c <GPIO_Init+0x21c>
 800157c:	049d      	lsls	r5, r3, #18
 800157e:	d445      	bmi.n	800160c <GPIO_Init+0x20c>
 8001580:	0459      	lsls	r1, r3, #17
 8001582:	d453      	bmi.n	800162c <GPIO_Init+0x22c>
 8001584:	041d      	lsls	r5, r3, #16
 8001586:	d5ad      	bpl.n	80014e4 <GPIO_Init+0xe4>
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001588:	f44f 4300 	mov.w	r3, #32768	; 0x8000
        tmpreg |= (currentmode << pos);
 800158c:	f364 721f 	bfi	r2, r4, #28, #4
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001590:	6103      	str	r3, [r0, #16]
 8001592:	e7a7      	b.n	80014e4 <GPIO_Init+0xe4>
      if (currentpin == pos)
 8001594:	07d9      	lsls	r1, r3, #31
 8001596:	f100 80e2 	bmi.w	800175e <GPIO_Init+0x35e>
 800159a:	0799      	lsls	r1, r3, #30
 800159c:	f100 80d8 	bmi.w	8001750 <GPIO_Init+0x350>
 80015a0:	0759      	lsls	r1, r3, #29
 80015a2:	f100 80ce 	bmi.w	8001742 <GPIO_Init+0x342>
 80015a6:	0719      	lsls	r1, r3, #28
 80015a8:	f100 80c4 	bmi.w	8001734 <GPIO_Init+0x334>
 80015ac:	06d9      	lsls	r1, r3, #27
 80015ae:	f100 80ba 	bmi.w	8001726 <GPIO_Init+0x326>
 80015b2:	0699      	lsls	r1, r3, #26
 80015b4:	f100 80b0 	bmi.w	8001718 <GPIO_Init+0x318>
 80015b8:	0659      	lsls	r1, r3, #25
 80015ba:	f100 80a6 	bmi.w	800170a <GPIO_Init+0x30a>
 80015be:	0619      	lsls	r1, r3, #24
 80015c0:	f57f af5d 	bpl.w	800147e <GPIO_Init+0x7e>
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80015c4:	2180      	movs	r1, #128	; 0x80
        tmpreg |= (currentmode << pos);
 80015c6:	f364 721f 	bfi	r2, r4, #28, #4
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80015ca:	6141      	str	r1, [r0, #20]
 80015cc:	e757      	b.n	800147e <GPIO_Init+0x7e>
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80015ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
        tmpreg &= ~pinmask;
 80015d2:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
        tmpreg |= (currentmode << pos);
 80015d6:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80015da:	6101      	str	r1, [r0, #16]
 80015dc:	e7cc      	b.n	8001578 <GPIO_Init+0x178>
 80015de:	f44f 6180 	mov.w	r1, #1024	; 0x400
        tmpreg &= ~pinmask;
 80015e2:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
        tmpreg |= (currentmode << pos);
 80015e6:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80015ea:	6101      	str	r1, [r0, #16]
 80015ec:	e7c2      	b.n	8001574 <GPIO_Init+0x174>
 80015ee:	f44f 7100 	mov.w	r1, #512	; 0x200
        tmpreg &= ~pinmask;
 80015f2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
        tmpreg |= (currentmode << pos);
 80015f6:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80015fa:	6101      	str	r1, [r0, #16]
 80015fc:	e7b8      	b.n	8001570 <GPIO_Init+0x170>
 80015fe:	f44f 7180 	mov.w	r1, #256	; 0x100
        tmpreg &= ~pinmask;
 8001602:	f022 020f 	bic.w	r2, r2, #15
        tmpreg |= (currentmode << pos);
 8001606:	4322      	orrs	r2, r4
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001608:	6101      	str	r1, [r0, #16]
 800160a:	e7af      	b.n	800156c <GPIO_Init+0x16c>
 800160c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
        tmpreg &= ~pinmask;
 8001610:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
        tmpreg |= (currentmode << pos);
 8001614:	ea42 5204 	orr.w	r2, r2, r4, lsl #20
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001618:	6101      	str	r1, [r0, #16]
 800161a:	e7b1      	b.n	8001580 <GPIO_Init+0x180>
 800161c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
        tmpreg &= ~pinmask;
 8001620:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
        tmpreg |= (currentmode << pos);
 8001624:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001628:	6101      	str	r1, [r0, #16]
 800162a:	e7a7      	b.n	800157c <GPIO_Init+0x17c>
 800162c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
        tmpreg &= ~pinmask;
 8001630:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
        tmpreg |= (currentmode << pos);
 8001634:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001638:	6101      	str	r1, [r0, #16]
 800163a:	e7a3      	b.n	8001584 <GPIO_Init+0x184>
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800163c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
        tmpreg &= ~pinmask;
 8001640:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
        tmpreg |= (currentmode << pos);
 8001644:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001648:	6141      	str	r1, [r0, #20]
 800164a:	e763      	b.n	8001514 <GPIO_Init+0x114>
 800164c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
        tmpreg &= ~pinmask;
 8001650:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
        tmpreg |= (currentmode << pos);
 8001654:	ea42 5204 	orr.w	r2, r2, r4, lsl #20
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001658:	6141      	str	r1, [r0, #20]
 800165a:	e758      	b.n	800150e <GPIO_Init+0x10e>
 800165c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
        tmpreg &= ~pinmask;
 8001660:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
        tmpreg |= (currentmode << pos);
 8001664:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001668:	6141      	str	r1, [r0, #20]
 800166a:	e74d      	b.n	8001508 <GPIO_Init+0x108>
 800166c:	f44f 6100 	mov.w	r1, #2048	; 0x800
        tmpreg &= ~pinmask;
 8001670:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
        tmpreg |= (currentmode << pos);
 8001674:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001678:	6141      	str	r1, [r0, #20]
 800167a:	e742      	b.n	8001502 <GPIO_Init+0x102>
 800167c:	f44f 6180 	mov.w	r1, #1024	; 0x400
        tmpreg &= ~pinmask;
 8001680:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
        tmpreg |= (currentmode << pos);
 8001684:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001688:	6141      	str	r1, [r0, #20]
 800168a:	e737      	b.n	80014fc <GPIO_Init+0xfc>
 800168c:	f44f 7100 	mov.w	r1, #512	; 0x200
        tmpreg &= ~pinmask;
 8001690:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
        tmpreg |= (currentmode << pos);
 8001694:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001698:	6141      	str	r1, [r0, #20]
 800169a:	e72c      	b.n	80014f6 <GPIO_Init+0xf6>
 800169c:	f44f 7180 	mov.w	r1, #256	; 0x100
        tmpreg &= ~pinmask;
 80016a0:	f022 020f 	bic.w	r2, r2, #15
        tmpreg |= (currentmode << pos);
 80016a4:	4322      	orrs	r2, r4
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80016a6:	6141      	str	r1, [r0, #20]
 80016a8:	e722      	b.n	80014f0 <GPIO_Init+0xf0>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80016aa:	2120      	movs	r1, #32
        tmpreg &= ~pinmask;
 80016ac:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
        tmpreg |= (currentmode << pos);
 80016b0:	ea42 5204 	orr.w	r2, r2, r4, lsl #20
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80016b4:	6101      	str	r1, [r0, #16]
 80016b6:	e747      	b.n	8001548 <GPIO_Init+0x148>
 80016b8:	2110      	movs	r1, #16
        tmpreg &= ~pinmask;
 80016ba:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
        tmpreg |= (currentmode << pos);
 80016be:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80016c2:	6101      	str	r1, [r0, #16]
 80016c4:	e73d      	b.n	8001542 <GPIO_Init+0x142>
 80016c6:	2108      	movs	r1, #8
        tmpreg &= ~pinmask;
 80016c8:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
        tmpreg |= (currentmode << pos);
 80016cc:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80016d0:	6101      	str	r1, [r0, #16]
 80016d2:	e733      	b.n	800153c <GPIO_Init+0x13c>
 80016d4:	2104      	movs	r1, #4
        tmpreg &= ~pinmask;
 80016d6:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
        tmpreg |= (currentmode << pos);
 80016da:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80016de:	6101      	str	r1, [r0, #16]
 80016e0:	e729      	b.n	8001536 <GPIO_Init+0x136>
 80016e2:	2102      	movs	r1, #2
        tmpreg &= ~pinmask;
 80016e4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
        tmpreg |= (currentmode << pos);
 80016e8:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80016ec:	6101      	str	r1, [r0, #16]
 80016ee:	e71f      	b.n	8001530 <GPIO_Init+0x130>
 80016f0:	2101      	movs	r1, #1
        tmpreg &= ~pinmask;
 80016f2:	f022 020f 	bic.w	r2, r2, #15
        tmpreg |= (currentmode << pos);
 80016f6:	4322      	orrs	r2, r4
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80016f8:	6101      	str	r1, [r0, #16]
 80016fa:	e716      	b.n	800152a <GPIO_Init+0x12a>
 80016fc:	2140      	movs	r1, #64	; 0x40
        tmpreg &= ~pinmask;
 80016fe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
        tmpreg |= (currentmode << pos);
 8001702:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8001706:	6101      	str	r1, [r0, #16]
 8001708:	e721      	b.n	800154e <GPIO_Init+0x14e>
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 800170a:	2140      	movs	r1, #64	; 0x40
        tmpreg &= ~pinmask;
 800170c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
        tmpreg |= (currentmode << pos);
 8001710:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8001714:	6141      	str	r1, [r0, #20]
 8001716:	e752      	b.n	80015be <GPIO_Init+0x1be>
 8001718:	2120      	movs	r1, #32
        tmpreg &= ~pinmask;
 800171a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
        tmpreg |= (currentmode << pos);
 800171e:	ea42 5204 	orr.w	r2, r2, r4, lsl #20
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8001722:	6141      	str	r1, [r0, #20]
 8001724:	e748      	b.n	80015b8 <GPIO_Init+0x1b8>
 8001726:	2110      	movs	r1, #16
        tmpreg &= ~pinmask;
 8001728:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
        tmpreg |= (currentmode << pos);
 800172c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8001730:	6141      	str	r1, [r0, #20]
 8001732:	e73e      	b.n	80015b2 <GPIO_Init+0x1b2>
 8001734:	2108      	movs	r1, #8
        tmpreg &= ~pinmask;
 8001736:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
        tmpreg |= (currentmode << pos);
 800173a:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 800173e:	6141      	str	r1, [r0, #20]
 8001740:	e734      	b.n	80015ac <GPIO_Init+0x1ac>
 8001742:	2104      	movs	r1, #4
        tmpreg &= ~pinmask;
 8001744:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
        tmpreg |= (currentmode << pos);
 8001748:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 800174c:	6141      	str	r1, [r0, #20]
 800174e:	e72a      	b.n	80015a6 <GPIO_Init+0x1a6>
 8001750:	2102      	movs	r1, #2
        tmpreg &= ~pinmask;
 8001752:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
        tmpreg |= (currentmode << pos);
 8001756:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 800175a:	6141      	str	r1, [r0, #20]
 800175c:	e720      	b.n	80015a0 <GPIO_Init+0x1a0>
 800175e:	2101      	movs	r1, #1
        tmpreg &= ~pinmask;
 8001760:	f022 020f 	bic.w	r2, r2, #15
        tmpreg |= (currentmode << pos);
 8001764:	4322      	orrs	r2, r4
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8001766:	6141      	str	r1, [r0, #20]
 8001768:	e717      	b.n	800159a <GPIO_Init+0x19a>
 800176a:	bf00      	nop

0800176c <GPIO_ReadInputData>:
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  return ((uint16_t)GPIOx->IDR);
 800176c:	6880      	ldr	r0, [r0, #8]
}
 800176e:	b280      	uxth	r0, r0
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop

08001774 <GPIO_ReadOutputData>:
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    
  return ((uint16_t)GPIOx->ODR);
 8001774:	68c0      	ldr	r0, [r0, #12]
}
 8001776:	b280      	uxth	r0, r0
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop

0800177c <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 800177c:	6101      	str	r1, [r0, #16]
 800177e:	4770      	bx	lr

08001780 <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 8001780:	6141      	str	r1, [r0, #20]
 8001782:	4770      	bx	lr

08001784 <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
 8001784:	b90a      	cbnz	r2, 800178a <GPIO_WriteBit+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
 8001786:	6141      	str	r1, [r0, #20]
 8001788:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 800178a:	6101      	str	r1, [r0, #16]
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop

08001790 <GPIO_PinRemapConfig>:

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if((GPIO_Remap & 0x80000000) == 0x80000000)
 8001790:	2800      	cmp	r0, #0
  {
    tmpreg = AFIO->MAPR2;
 8001792:	4b19      	ldr	r3, [pc, #100]	; (80017f8 <GPIO_PinRemapConfig+0x68>)
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 8001794:	f400 1240 	and.w	r2, r0, #3145728	; 0x300000
    tmpreg = AFIO->MAPR2;
 8001798:	bfb4      	ite	lt
 800179a:	69db      	ldrlt	r3, [r3, #28]
    tmpreg = AFIO->MAPR;
 800179c:	685b      	ldrge	r3, [r3, #4]
  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 800179e:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
{
 80017a2:	b430      	push	{r4, r5}
  tmp = GPIO_Remap & LSB_MASK;
 80017a4:	b284      	uxth	r4, r0
  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 80017a6:	d01e      	beq.n	80017e6 <GPIO_PinRemapConfig+0x56>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
 80017a8:	02c2      	lsls	r2, r0, #11
 80017aa:	d513      	bpl.n	80017d4 <GPIO_PinRemapConfig+0x44>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
 80017ac:	2203      	movs	r2, #3
  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
 80017ae:	f3c0 4503 	ubfx	r5, r0, #16, #4
    tmp1 = ((uint32_t)0x03) << tmpmask;
 80017b2:	40aa      	lsls	r2, r5
    tmpreg &= ~tmp1;
 80017b4:	ea23 0302 	bic.w	r3, r3, r2
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 80017b8:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
  }

  if (NewState != DISABLE)
 80017bc:	b119      	cbz	r1, 80017c6 <GPIO_PinRemapConfig+0x36>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
 80017be:	0d42      	lsrs	r2, r0, #21
 80017c0:	0112      	lsls	r2, r2, #4
 80017c2:	4094      	lsls	r4, r2
 80017c4:	4323      	orrs	r3, r4
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
  {
    AFIO->MAPR2 = tmpreg;
 80017c6:	4a0c      	ldr	r2, [pc, #48]	; (80017f8 <GPIO_PinRemapConfig+0x68>)
  if((GPIO_Remap & 0x80000000) == 0x80000000)
 80017c8:	2800      	cmp	r0, #0
    AFIO->MAPR2 = tmpreg;
 80017ca:	bfb4      	ite	lt
 80017cc:	61d3      	strlt	r3, [r2, #28]
  }
  else
  {
    AFIO->MAPR = tmpreg;
 80017ce:	6053      	strge	r3, [r2, #4]
  }  
}
 80017d0:	bc30      	pop	{r4, r5}
 80017d2:	4770      	bx	lr
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 80017d4:	0d42      	lsrs	r2, r0, #21
 80017d6:	0112      	lsls	r2, r2, #4
 80017d8:	fa04 f202 	lsl.w	r2, r4, r2
 80017dc:	ea23 0302 	bic.w	r3, r3, r2
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 80017e0:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 80017e4:	e7ea      	b.n	80017bc <GPIO_PinRemapConfig+0x2c>
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 80017e6:	4d04      	ldr	r5, [pc, #16]	; (80017f8 <GPIO_PinRemapConfig+0x68>)
    tmpreg &= DBGAFR_SWJCFG_MASK;
 80017e8:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 80017ec:	686a      	ldr	r2, [r5, #4]
 80017ee:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80017f2:	606a      	str	r2, [r5, #4]
 80017f4:	e7e2      	b.n	80017bc <GPIO_PinRemapConfig+0x2c>
 80017f6:	bf00      	nop
 80017f8:	40010000 	.word	0x40010000

080017fc <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
 80017fc:	b410      	push	{r4}
  uint32_t tmp = 0x00;
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
 80017fe:	240f      	movs	r4, #15
 8001800:	f001 03fc 	and.w	r3, r1, #252	; 0xfc
 8001804:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001808:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800180c:	f001 0103 	and.w	r1, r1, #3
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 8001810:	689a      	ldr	r2, [r3, #8]
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
 8001812:	0089      	lsls	r1, r1, #2
 8001814:	408c      	lsls	r4, r1
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 8001816:	ea22 0204 	bic.w	r2, r2, r4
 800181a:	609a      	str	r2, [r3, #8]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
 800181c:	689a      	ldr	r2, [r3, #8]
 800181e:	fa00 f101 	lsl.w	r1, r0, r1
 8001822:	4311      	orrs	r1, r2
 8001824:	6099      	str	r1, [r3, #8]
}
 8001826:	bc10      	pop	{r4}
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop

0800182c <RCC_USBCLKConfig>:
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
 800182c:	4b01      	ldr	r3, [pc, #4]	; (8001834 <RCC_USBCLKConfig+0x8>)
 800182e:	6018      	str	r0, [r3, #0]
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	424200d8 	.word	0x424200d8

08001838 <RCC_GetClocksFreq>:
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8001838:	4a23      	ldr	r2, [pc, #140]	; (80018c8 <RCC_GetClocksFreq+0x90>)
{
 800183a:	b430      	push	{r4, r5}
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 800183c:	6853      	ldr	r3, [r2, #4]
 800183e:	f003 030c 	and.w	r3, r3, #12
  
  switch (tmp)
 8001842:	2b04      	cmp	r3, #4
 8001844:	d038      	beq.n	80018b8 <RCC_GetClocksFreq+0x80>
 8001846:	2b08      	cmp	r3, #8
 8001848:	d025      	beq.n	8001896 <RCC_GetClocksFreq+0x5e>
 800184a:	b30b      	cbz	r3, 8001890 <RCC_GetClocksFreq+0x58>
      }
#endif /* STM32F10X_CL */ 
      break;

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800184c:	4a1f      	ldr	r2, [pc, #124]	; (80018cc <RCC_GetClocksFreq+0x94>)
      break;
 800184e:	4613      	mov	r3, r2
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001850:	6002      	str	r2, [r0, #0]
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8001852:	4a1d      	ldr	r2, [pc, #116]	; (80018c8 <RCC_GetClocksFreq+0x90>)
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];
 8001854:	4c1e      	ldr	r4, [pc, #120]	; (80018d0 <RCC_GetClocksFreq+0x98>)
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8001856:	6851      	ldr	r1, [r2, #4]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
  tmp = tmp >> 14;
  presc = ADCPrescTable[tmp];
 8001858:	4d1e      	ldr	r5, [pc, #120]	; (80018d4 <RCC_GetClocksFreq+0x9c>)
  tmp = tmp >> 4;
 800185a:	f3c1 1103 	ubfx	r1, r1, #4, #4
  presc = APBAHBPrescTable[tmp];
 800185e:	5c61      	ldrb	r1, [r4, r1]
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8001860:	40cb      	lsrs	r3, r1
 8001862:	6043      	str	r3, [r0, #4]
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8001864:	6851      	ldr	r1, [r2, #4]
  tmp = tmp >> 8;
 8001866:	f3c1 2102 	ubfx	r1, r1, #8, #3
  presc = APBAHBPrescTable[tmp];
 800186a:	5c61      	ldrb	r1, [r4, r1]
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800186c:	fa23 f101 	lsr.w	r1, r3, r1
 8001870:	6081      	str	r1, [r0, #8]
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8001872:	6851      	ldr	r1, [r2, #4]
  tmp = tmp >> 11;
 8001874:	f3c1 21c2 	ubfx	r1, r1, #11, #3
  presc = APBAHBPrescTable[tmp];
 8001878:	5c61      	ldrb	r1, [r4, r1]
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800187a:	40cb      	lsrs	r3, r1
 800187c:	60c3      	str	r3, [r0, #12]
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 800187e:	6852      	ldr	r2, [r2, #4]
  tmp = tmp >> 14;
 8001880:	f3c2 3281 	ubfx	r2, r2, #14, #2
  presc = ADCPrescTable[tmp];
 8001884:	5caa      	ldrb	r2, [r5, r2]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
}
 8001886:	bc30      	pop	{r4, r5}
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8001888:	fbb3 f3f2 	udiv	r3, r3, r2
 800188c:	6103      	str	r3, [r0, #16]
}
 800188e:	4770      	bx	lr
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001890:	4b0e      	ldr	r3, [pc, #56]	; (80018cc <RCC_GetClocksFreq+0x94>)
 8001892:	6003      	str	r3, [r0, #0]
      break;
 8001894:	e7dd      	b.n	8001852 <RCC_GetClocksFreq+0x1a>
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8001896:	6853      	ldr	r3, [r2, #4]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8001898:	6851      	ldr	r1, [r2, #4]
      pllmull = ( pllmull >> 18) + 2;
 800189a:	f3c3 4383 	ubfx	r3, r3, #18, #4
      if (pllsource == 0x00)
 800189e:	03c9      	lsls	r1, r1, #15
      pllmull = ( pllmull >> 18) + 2;
 80018a0:	f103 0302 	add.w	r3, r3, #2
      if (pllsource == 0x00)
 80018a4:	d50b      	bpl.n	80018be <RCC_GetClocksFreq+0x86>
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 80018a6:	6852      	ldr	r2, [r2, #4]
 80018a8:	0392      	lsls	r2, r2, #14
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 80018aa:	bf4c      	ite	mi
 80018ac:	4a0a      	ldrmi	r2, [pc, #40]	; (80018d8 <RCC_GetClocksFreq+0xa0>)
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 80018ae:	4a0b      	ldrpl	r2, [pc, #44]	; (80018dc <RCC_GetClocksFreq+0xa4>)
 80018b0:	fb02 f303 	mul.w	r3, r2, r3
 80018b4:	6003      	str	r3, [r0, #0]
 80018b6:	e7cc      	b.n	8001852 <RCC_GetClocksFreq+0x1a>
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80018b8:	4b08      	ldr	r3, [pc, #32]	; (80018dc <RCC_GetClocksFreq+0xa4>)
 80018ba:	6003      	str	r3, [r0, #0]
      break;
 80018bc:	e7c9      	b.n	8001852 <RCC_GetClocksFreq+0x1a>
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 80018be:	4a08      	ldr	r2, [pc, #32]	; (80018e0 <RCC_GetClocksFreq+0xa8>)
 80018c0:	fb02 f303 	mul.w	r3, r2, r3
 80018c4:	6003      	str	r3, [r0, #0]
 80018c6:	e7c4      	b.n	8001852 <RCC_GetClocksFreq+0x1a>
 80018c8:	40021000 	.word	0x40021000
 80018cc:	007a1200 	.word	0x007a1200
 80018d0:	20000004 	.word	0x20000004
 80018d4:	20000000 	.word	0x20000000
 80018d8:	00061a80 	.word	0x00061a80
 80018dc:	000c3500 	.word	0x000c3500
 80018e0:	003d0900 	.word	0x003d0900

080018e4 <RCC_APB2PeriphClockCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80018e4:	4a04      	ldr	r2, [pc, #16]	; (80018f8 <RCC_APB2PeriphClockCmd+0x14>)
 80018e6:	6993      	ldr	r3, [r2, #24]
  if (NewState != DISABLE)
 80018e8:	b919      	cbnz	r1, 80018f2 <RCC_APB2PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80018ea:	ea23 0000 	bic.w	r0, r3, r0
 80018ee:	6190      	str	r0, [r2, #24]
 80018f0:	4770      	bx	lr
    RCC->APB2ENR |= RCC_APB2Periph;
 80018f2:	4318      	orrs	r0, r3
 80018f4:	6190      	str	r0, [r2, #24]
 80018f6:	4770      	bx	lr
 80018f8:	40021000 	.word	0x40021000

080018fc <RCC_APB1PeriphClockCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80018fc:	4a04      	ldr	r2, [pc, #16]	; (8001910 <RCC_APB1PeriphClockCmd+0x14>)
 80018fe:	69d3      	ldr	r3, [r2, #28]
  if (NewState != DISABLE)
 8001900:	b919      	cbnz	r1, 800190a <RCC_APB1PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001902:	ea23 0000 	bic.w	r0, r3, r0
 8001906:	61d0      	str	r0, [r2, #28]
 8001908:	4770      	bx	lr
    RCC->APB1ENR |= RCC_APB1Periph;
 800190a:	4318      	orrs	r0, r3
 800190c:	61d0      	str	r0, [r2, #28]
 800190e:	4770      	bx	lr
 8001910:	40021000 	.word	0x40021000

08001914 <TIM_TimeBaseInit>:
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 8001914:	4a27      	ldr	r2, [pc, #156]	; (80019b4 <TIM_TimeBaseInit+0xa0>)
  tmpcr1 = TIMx->CR1;  
 8001916:	8803      	ldrh	r3, [r0, #0]
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 8001918:	4290      	cmp	r0, r2
  tmpcr1 = TIMx->CR1;  
 800191a:	b29b      	uxth	r3, r3
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 800191c:	d012      	beq.n	8001944 <TIM_TimeBaseInit+0x30>
 800191e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001922:	4290      	cmp	r0, r2
 8001924:	d00e      	beq.n	8001944 <TIM_TimeBaseInit+0x30>
 8001926:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800192a:	d00b      	beq.n	8001944 <TIM_TimeBaseInit+0x30>
 800192c:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001930:	4290      	cmp	r0, r2
 8001932:	d007      	beq.n	8001944 <TIM_TimeBaseInit+0x30>
 8001934:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001938:	4290      	cmp	r0, r2
 800193a:	d003      	beq.n	8001944 <TIM_TimeBaseInit+0x30>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 800193c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001940:	4290      	cmp	r0, r2
 8001942:	d103      	bne.n	800194c <TIM_TimeBaseInit+0x38>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8001944:	884a      	ldrh	r2, [r1, #2]
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 8001946:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 800194a:	4313      	orrs	r3, r2
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 800194c:	4a1a      	ldr	r2, [pc, #104]	; (80019b8 <TIM_TimeBaseInit+0xa4>)
 800194e:	4290      	cmp	r0, r2
 8001950:	d027      	beq.n	80019a2 <TIM_TimeBaseInit+0x8e>
 8001952:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001956:	4290      	cmp	r0, r2
 8001958:	d023      	beq.n	80019a2 <TIM_TimeBaseInit+0x8e>
{
 800195a:	b470      	push	{r4, r5, r6}
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 800195c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8001960:	88ce      	ldrh	r6, [r1, #6]
  }

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8001962:	888d      	ldrh	r5, [r1, #4]
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8001964:	880c      	ldrh	r4, [r1, #0]
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 8001966:	b29b      	uxth	r3, r3
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 8001968:	f502 328c 	add.w	r2, r2, #71680	; 0x11800
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800196c:	4333      	orrs	r3, r6
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 800196e:	4290      	cmp	r0, r2
  TIMx->CR1 = tmpcr1;
 8001970:	8003      	strh	r3, [r0, #0]
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8001972:	8585      	strh	r5, [r0, #44]	; 0x2c
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8001974:	8504      	strh	r4, [r0, #40]	; 0x28
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 8001976:	d00e      	beq.n	8001996 <TIM_TimeBaseInit+0x82>
 8001978:	4b10      	ldr	r3, [pc, #64]	; (80019bc <TIM_TimeBaseInit+0xa8>)
 800197a:	4298      	cmp	r0, r3
 800197c:	d00b      	beq.n	8001996 <TIM_TimeBaseInit+0x82>
 800197e:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8001982:	4298      	cmp	r0, r3
 8001984:	d007      	beq.n	8001996 <TIM_TimeBaseInit+0x82>
 8001986:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800198a:	4298      	cmp	r0, r3
 800198c:	d003      	beq.n	8001996 <TIM_TimeBaseInit+0x82>
 800198e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001992:	4298      	cmp	r0, r3
 8001994:	d101      	bne.n	800199a <TIM_TimeBaseInit+0x86>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8001996:	7a0b      	ldrb	r3, [r1, #8]
 8001998:	8603      	strh	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 800199a:	2301      	movs	r3, #1
}
 800199c:	bc70      	pop	{r4, r5, r6}
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 800199e:	8283      	strh	r3, [r0, #20]
}
 80019a0:	4770      	bx	lr
  TIMx->CR1 = tmpcr1;
 80019a2:	8003      	strh	r3, [r0, #0]
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80019a4:	888b      	ldrh	r3, [r1, #4]
 80019a6:	8583      	strh	r3, [r0, #44]	; 0x2c
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80019a8:	880b      	ldrh	r3, [r1, #0]
 80019aa:	8503      	strh	r3, [r0, #40]	; 0x28
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 80019ac:	2301      	movs	r3, #1
 80019ae:	8283      	strh	r3, [r0, #20]
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	40012c00 	.word	0x40012c00
 80019b8:	40001000 	.word	0x40001000
 80019bc:	40013400 	.word	0x40013400

080019c0 <TIM_OC1Init>:
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 80019c0:	8c02      	ldrh	r2, [r0, #32]
{
 80019c2:	b4f0      	push	{r4, r5, r6, r7}
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 80019c4:	f022 0201 	bic.w	r2, r2, #1
 80019c8:	0412      	lsls	r2, r2, #16
 80019ca:	0c12      	lsrs	r2, r2, #16
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 80019cc:	890d      	ldrh	r5, [r1, #8]
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 80019ce:	8402      	strh	r2, [r0, #32]
  tmpccer = TIMx->CCER;
 80019d0:	8c03      	ldrh	r3, [r0, #32]
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 80019d2:	884e      	ldrh	r6, [r1, #2]
  tmpcr2 =  TIMx->CR2;
 80019d4:	8884      	ldrh	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80019d6:	8b02      	ldrh	r2, [r0, #24]
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 80019d8:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 80019dc:	4335      	orrs	r5, r6
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 80019de:	041b      	lsls	r3, r3, #16
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
 80019e0:	f022 0273 	bic.w	r2, r2, #115	; 0x73
    
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
 80019e4:	4e18      	ldr	r6, [pc, #96]	; (8001a48 <TIM_OC1Init+0x88>)
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 80019e6:	0c1b      	lsrs	r3, r3, #16
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
 80019e8:	0412      	lsls	r2, r2, #16
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80019ea:	880f      	ldrh	r7, [r1, #0]
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 80019ec:	432b      	orrs	r3, r5
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
 80019ee:	0c12      	lsrs	r2, r2, #16
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
 80019f0:	42b0      	cmp	r0, r6
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 80019f2:	b29b      	uxth	r3, r3
  tmpcr2 =  TIMx->CR2;
 80019f4:	b2a4      	uxth	r4, r4
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80019f6:	ea42 0207 	orr.w	r2, r2, r7
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
 80019fa:	d015      	beq.n	8001a28 <TIM_OC1Init+0x68>
 80019fc:	4d13      	ldr	r5, [pc, #76]	; (8001a4c <TIM_OC1Init+0x8c>)
 80019fe:	42a8      	cmp	r0, r5
 8001a00:	d012      	beq.n	8001a28 <TIM_OC1Init+0x68>
 8001a02:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8001a06:	42a8      	cmp	r0, r5
 8001a08:	d00e      	beq.n	8001a28 <TIM_OC1Init+0x68>
 8001a0a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001a0e:	42a8      	cmp	r0, r5
 8001a10:	d00a      	beq.n	8001a28 <TIM_OC1Init+0x68>
     (TIMx == TIM16)|| (TIMx == TIM17))
 8001a12:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001a16:	42a8      	cmp	r0, r5
 8001a18:	d006      	beq.n	8001a28 <TIM_OC1Init+0x68>
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
 8001a1a:	88c9      	ldrh	r1, [r1, #6]
  TIMx->CR2 = tmpcr2;
 8001a1c:	8084      	strh	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001a1e:	8302      	strh	r2, [r0, #24]
 
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8001a20:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
 8001a22:	8681      	strh	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8001a24:	8403      	strh	r3, [r0, #32]
}
 8001a26:	4770      	bx	lr
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8001a28:	894e      	ldrh	r6, [r1, #10]
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8001a2a:	898d      	ldrh	r5, [r1, #12]
 8001a2c:	89cf      	ldrh	r7, [r1, #14]
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NP));
 8001a2e:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8001a32:	4333      	orrs	r3, r6
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1N));
 8001a34:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8001a38:	888e      	ldrh	r6, [r1, #4]
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8001a3a:	433d      	orrs	r5, r7
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NE));    
 8001a3c:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8001a40:	432c      	orrs	r4, r5
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8001a42:	4333      	orrs	r3, r6
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8001a44:	b2a4      	uxth	r4, r4
 8001a46:	e7e8      	b.n	8001a1a <TIM_OC1Init+0x5a>
 8001a48:	40012c00 	.word	0x40012c00
 8001a4c:	40013400 	.word	0x40013400

08001a50 <TIM_TimeBaseStructInit>:
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFF;
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8001a50:	2300      	movs	r3, #0
 8001a52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a56:	6003      	str	r3, [r0, #0]
 8001a58:	6042      	str	r2, [r0, #4]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 8001a5a:	7203      	strb	r3, [r0, #8]
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop

08001a60 <TIM_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8001a60:	8803      	ldrh	r3, [r0, #0]
  if (NewState != DISABLE)
 8001a62:	b929      	cbnz	r1, 8001a70 <TIM_Cmd+0x10>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8001a64:	f023 0301 	bic.w	r3, r3, #1
 8001a68:	041b      	lsls	r3, r3, #16
 8001a6a:	0c1b      	lsrs	r3, r3, #16
 8001a6c:	8003      	strh	r3, [r0, #0]
 8001a6e:	4770      	bx	lr
    TIMx->CR1 |= TIM_CR1_CEN;
 8001a70:	b29b      	uxth	r3, r3
 8001a72:	f043 0301 	orr.w	r3, r3, #1
 8001a76:	8003      	strh	r3, [r0, #0]
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop

08001a7c <TIM_CtrlPWMOutputs>:
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8001a7c:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
  if (NewState != DISABLE)
 8001a80:	b921      	cbnz	r1, 8001a8c <TIM_CtrlPWMOutputs+0x10>
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)(~((uint16_t)TIM_BDTR_MOE));
 8001a82:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001a86:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 8001a8a:	4770      	bx	lr
    TIMx->BDTR |= TIM_BDTR_MOE;
 8001a8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 8001a9a:	4770      	bx	lr

08001a9c <TIM_ITConfig>:
 8001a9c:	8983      	ldrh	r3, [r0, #12]
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	b91a      	cbnz	r2, 8001aaa <TIM_ITConfig+0xe>
 8001aa2:	ea23 0101 	bic.w	r1, r3, r1
 8001aa6:	8181      	strh	r1, [r0, #12]
 8001aa8:	4770      	bx	lr
 8001aaa:	4319      	orrs	r1, r3
 8001aac:	8181      	strh	r1, [r0, #12]
 8001aae:	4770      	bx	lr

08001ab0 <TIM_OC1PreloadConfig>:
{
  uint16_t tmpccmr1 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr1 = TIMx->CCMR1;
 8001ab0:	8b03      	ldrh	r3, [r0, #24]
  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1PE);
 8001ab2:	f023 0308 	bic.w	r3, r3, #8
 8001ab6:	041b      	lsls	r3, r3, #16
 8001ab8:	0c1b      	lsrs	r3, r3, #16
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 8001aba:	4319      	orrs	r1, r3
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8001abc:	8301      	strh	r1, [r0, #24]
 8001abe:	4770      	bx	lr

08001ac0 <TIM_ClearITPendingBit>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8001ac0:	43c9      	mvns	r1, r1
 8001ac2:	b289      	uxth	r1, r1
 8001ac4:	8201      	strh	r1, [r0, #16]
 8001ac6:	4770      	bx	lr

08001ac8 <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8001ac8:	b570      	push	{r4, r5, r6, lr}
 8001aca:	460d      	mov	r5, r1
 8001acc:	4604      	mov	r4, r0
  }

  usartxbase = (uint32_t)USARTx;

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8001ace:	8a03      	ldrh	r3, [r0, #16]
 8001ad0:	88ca      	ldrh	r2, [r1, #6]
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ad8:	4313      	orrs	r3, r2
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
 8001ada:	8989      	ldrh	r1, [r1, #12]
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8001adc:	8203      	strh	r3, [r0, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8001ade:	8982      	ldrh	r2, [r0, #12]
 8001ae0:	88ae      	ldrh	r6, [r5, #4]
 8001ae2:	f422 53b0 	bic.w	r3, r2, #5632	; 0x1600
 8001ae6:	f023 030c 	bic.w	r3, r3, #12
 8001aea:	041b      	lsls	r3, r3, #16
 8001aec:	8928      	ldrh	r0, [r5, #8]
 8001aee:	0c1b      	lsrs	r3, r3, #16
 8001af0:	896a      	ldrh	r2, [r5, #10]
 8001af2:	4333      	orrs	r3, r6
 8001af4:	4303      	orrs	r3, r0
 8001af6:	4313      	orrs	r3, r2
 8001af8:	b29b      	uxth	r3, r3
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8001afa:	81a3      	strh	r3, [r4, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8001afc:	8aa3      	ldrh	r3, [r4, #20]
{
 8001afe:	b086      	sub	sp, #24
  tmpreg = USARTx->CR3;
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b06:	430b      	orrs	r3, r1
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8001b08:	a801      	add	r0, sp, #4
  USARTx->CR3 = (uint16_t)tmpreg;
 8001b0a:	82a3      	strh	r3, [r4, #20]
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8001b0c:	f7ff fe94 	bl	8001838 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8001b10:	9904      	ldr	r1, [sp, #16]
  if (usartxbase == USART1_BASE)
 8001b12:	481a      	ldr	r0, [pc, #104]	; (8001b7c <USART_Init+0xb4>)
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8001b14:	9b03      	ldr	r3, [sp, #12]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8001b16:	89a2      	ldrh	r2, [r4, #12]
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8001b18:	4284      	cmp	r4, r0
 8001b1a:	bf08      	it	eq
 8001b1c:	460b      	moveq	r3, r1
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8001b1e:	f412 4f00 	tst.w	r2, #32768	; 0x8000
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8001b22:	682a      	ldr	r2, [r5, #0]
 8001b24:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001b28:	bf14      	ite	ne
 8001b2a:	0052      	lslne	r2, r2, #1
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8001b2c:	0092      	lsleq	r2, r2, #2
 8001b2e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001b32:	fbb3 f3f2 	udiv	r3, r3, r2
 8001b36:	2264      	movs	r2, #100	; 0x64
  }
  tmpreg = (integerdivider / 100) << 4;
 8001b38:	4d11      	ldr	r5, [pc, #68]	; (8001b80 <USART_Init+0xb8>)

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8001b3a:	89a1      	ldrh	r1, [r4, #12]
  tmpreg = (integerdivider / 100) << 4;
 8001b3c:	fba5 6003 	umull	r6, r0, r5, r3
 8001b40:	0940      	lsrs	r0, r0, #5
 8001b42:	fb02 3310 	mls	r3, r2, r0, r3
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8001b46:	040a      	lsls	r2, r1, #16
  tmpreg = (integerdivider / 100) << 4;
 8001b48:	ea4f 1000 	mov.w	r0, r0, lsl #4
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8001b4c:	d40a      	bmi.n	8001b64 <USART_Init+0x9c>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8001b4e:	011b      	lsls	r3, r3, #4
 8001b50:	3332      	adds	r3, #50	; 0x32
 8001b52:	fba5 2303 	umull	r2, r3, r5, r3
 8001b56:	f3c3 1343 	ubfx	r3, r3, #5, #4
 8001b5a:	4303      	orrs	r3, r0
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	8123      	strh	r3, [r4, #8]
}
 8001b60:	b006      	add	sp, #24
 8001b62:	bd70      	pop	{r4, r5, r6, pc}
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8001b64:	00d9      	lsls	r1, r3, #3
 8001b66:	3132      	adds	r1, #50	; 0x32
 8001b68:	fba5 3101 	umull	r3, r1, r5, r1
 8001b6c:	f3c1 1242 	ubfx	r2, r1, #5, #3
 8001b70:	ea42 0300 	orr.w	r3, r2, r0
  USARTx->BRR = (uint16_t)tmpreg;
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	8123      	strh	r3, [r4, #8]
}
 8001b78:	b006      	add	sp, #24
 8001b7a:	bd70      	pop	{r4, r5, r6, pc}
 8001b7c:	40013800 	.word	0x40013800
 8001b80:	51eb851f 	.word	0x51eb851f

08001b84 <USART_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 8001b84:	8983      	ldrh	r3, [r0, #12]
  if (NewState != DISABLE)
 8001b86:	b929      	cbnz	r1, 8001b94 <USART_Cmd+0x10>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
 8001b88:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001b8c:	041b      	lsls	r3, r3, #16
 8001b8e:	0c1b      	lsrs	r3, r3, #16
 8001b90:	8183      	strh	r3, [r0, #12]
 8001b92:	4770      	bx	lr
    USARTx->CR1 |= CR1_UE_Set;
 8001b94:	b29b      	uxth	r3, r3
 8001b96:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b9a:	8183      	strh	r3, [r0, #12]
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop

08001ba0 <USART_ITConfig>:
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
  itmask = (((uint32_t)0x01) << itpos);
 8001ba0:	2301      	movs	r3, #1
{
 8001ba2:	b410      	push	{r4}
  itpos = USART_IT & IT_Mask;
 8001ba4:	f001 041f 	and.w	r4, r1, #31
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8001ba8:	f3c1 1142 	ubfx	r1, r1, #5, #3
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8001bac:	2901      	cmp	r1, #1
  itmask = (((uint32_t)0x01) << itpos);
 8001bae:	fa03 f304 	lsl.w	r3, r3, r4
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8001bb2:	d00f      	beq.n	8001bd4 <USART_ITConfig+0x34>
  {
    usartxbase += 0x0C;
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8001bb4:	2902      	cmp	r1, #2
  {
    usartxbase += 0x10;
 8001bb6:	bf0c      	ite	eq
 8001bb8:	3010      	addeq	r0, #16
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8001bba:	3014      	addne	r0, #20
  }
  if (NewState != DISABLE)
 8001bbc:	b92a      	cbnz	r2, 8001bca <USART_ITConfig+0x2a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8001bbe:	6802      	ldr	r2, [r0, #0]
  }
}
 8001bc0:	bc10      	pop	{r4}
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8001bc2:	ea22 0303 	bic.w	r3, r2, r3
 8001bc6:	6003      	str	r3, [r0, #0]
}
 8001bc8:	4770      	bx	lr
    *(__IO uint32_t*)usartxbase  |= itmask;
 8001bca:	6802      	ldr	r2, [r0, #0]
}
 8001bcc:	bc10      	pop	{r4}
    *(__IO uint32_t*)usartxbase  |= itmask;
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	6003      	str	r3, [r0, #0]
}
 8001bd2:	4770      	bx	lr
    usartxbase += 0x0C;
 8001bd4:	300c      	adds	r0, #12
 8001bd6:	e7f1      	b.n	8001bbc <USART_ITConfig+0x1c>

08001bd8 <USART_SendData>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8001bd8:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8001bdc:	8081      	strh	r1, [r0, #4]
 8001bde:	4770      	bx	lr

08001be0 <coolant_init>:

#include "grbl.h"


void coolant_init()
{
 8001be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	GPIO_Init(COOLANT_FLOOD_PORT, &GPIO_InitStructure);

	RCC_APB2PeriphClockCmd(RCC_COOLANT_MIST_PORT, ENABLE);
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Pin = 1 << COOLANT_MIST_BIT;
 8001be4:	2708      	movs	r7, #8
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8001be6:	2510      	movs	r5, #16
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001be8:	f04f 0803 	mov.w	r8, #3
{
 8001bec:	b082      	sub	sp, #8
	GPIO_Init(COOLANT_FLOOD_PORT, &GPIO_InitStructure);
 8001bee:	4c14      	ldr	r4, [pc, #80]	; (8001c40 <coolant_init+0x60>)
	GPIO_InitStructure.GPIO_Pin = 1 << COOLANT_FLOOD_BIT;
 8001bf0:	ae02      	add	r6, sp, #8
	RCC_APB2PeriphClockCmd(RCC_COOLANT_FLOOD_PORT, ENABLE);
 8001bf2:	4638      	mov	r0, r7
 8001bf4:	2101      	movs	r1, #1
 8001bf6:	f7ff fe75 	bl	80018e4 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Pin = 1 << COOLANT_FLOOD_BIT;
 8001bfa:	f826 5d04 	strh.w	r5, [r6, #-4]!
	GPIO_Init(COOLANT_FLOOD_PORT, &GPIO_InitStructure);
 8001bfe:	4631      	mov	r1, r6
 8001c00:	4620      	mov	r0, r4
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8001c02:	f88d 5007 	strb.w	r5, [sp, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001c06:	f88d 8006 	strb.w	r8, [sp, #6]
	GPIO_Init(COOLANT_FLOOD_PORT, &GPIO_InitStructure);
 8001c0a:	f7ff fbf9 	bl	8001400 <GPIO_Init>
	RCC_APB2PeriphClockCmd(RCC_COOLANT_MIST_PORT, ENABLE);
 8001c0e:	4638      	mov	r0, r7
 8001c10:	2101      	movs	r1, #1
 8001c12:	f7ff fe67 	bl	80018e4 <RCC_APB2PeriphClockCmd>
	GPIO_Init(COOLANT_MIST_PORT, &GPIO_InitStructure);
 8001c16:	4631      	mov	r1, r6
 8001c18:	4620      	mov	r0, r4
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001c1a:	f88d 8006 	strb.w	r8, [sp, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8001c1e:	f88d 5007 	strb.w	r5, [sp, #7]
	GPIO_InitStructure.GPIO_Pin = 1 << COOLANT_MIST_BIT;
 8001c22:	f8ad 7004 	strh.w	r7, [sp, #4]
	GPIO_Init(COOLANT_MIST_PORT, &GPIO_InitStructure);
 8001c26:	f7ff fbeb 	bl	8001400 <GPIO_Init>
#endif
  #else
#ifdef AVRTARGET
	COOLANT_FLOOD_PORT &= ~(1 << COOLANT_FLOOD_BIT);
#else
	GPIO_ResetBits(COOLANT_FLOOD_PORT,1 << COOLANT_FLOOD_BIT);
 8001c2a:	4629      	mov	r1, r5
 8001c2c:	4620      	mov	r0, r4
 8001c2e:	f7ff fda7 	bl	8001780 <GPIO_ResetBits>
#endif
    #else
#ifdef AVRTARGET
	COOLANT_MIST_PORT &= ~(1 << COOLANT_MIST_BIT);
#else
	GPIO_ResetBits(COOLANT_MIST_PORT, 1 << COOLANT_MIST_BIT);
 8001c32:	4639      	mov	r1, r7
 8001c34:	4620      	mov	r0, r4
 8001c36:	f7ff fda3 	bl	8001780 <GPIO_ResetBits>
}
 8001c3a:	b002      	add	sp, #8
 8001c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001c40:	40010c00 	.word	0x40010c00

08001c44 <coolant_get_state>:
{
 8001c44:	b510      	push	{r4, lr}
    if (bit_istrue(
 8001c46:	4807      	ldr	r0, [pc, #28]	; (8001c64 <coolant_get_state+0x20>)
 8001c48:	f7ff fd94 	bl	8001774 <GPIO_ReadOutputData>
  uint8_t cl_state = COOLANT_STATE_DISABLE;
 8001c4c:	f3c0 1400 	ubfx	r4, r0, #4, #1
      if (bit_istrue(
 8001c50:	4804      	ldr	r0, [pc, #16]	; (8001c64 <coolant_get_state+0x20>)
 8001c52:	f7ff fd8f 	bl	8001774 <GPIO_ReadOutputData>
 8001c56:	0703      	lsls	r3, r0, #28
      cl_state |= COOLANT_STATE_MIST;
 8001c58:	bf48      	it	mi
 8001c5a:	f044 0402 	orrmi.w	r4, r4, #2
}
 8001c5e:	4620      	mov	r0, r4
 8001c60:	bd10      	pop	{r4, pc}
 8001c62:	bf00      	nop
 8001c64:	40010c00 	.word	0x40010c00

08001c68 <coolant_stop>:
{
 8001c68:	b510      	push	{r4, lr}
	GPIO_ResetBits(COOLANT_FLOOD_PORT,1 << COOLANT_FLOOD_BIT);
 8001c6a:	4c05      	ldr	r4, [pc, #20]	; (8001c80 <coolant_stop+0x18>)
 8001c6c:	2110      	movs	r1, #16
 8001c6e:	4620      	mov	r0, r4
 8001c70:	f7ff fd86 	bl	8001780 <GPIO_ResetBits>
	GPIO_ResetBits(COOLANT_MIST_PORT, 1 << COOLANT_MIST_BIT);
 8001c74:	4620      	mov	r0, r4
#endif
    #endif
  #endif
#endif
}
 8001c76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	GPIO_ResetBits(COOLANT_MIST_PORT, 1 << COOLANT_MIST_BIT);
 8001c7a:	2108      	movs	r1, #8
 8001c7c:	f7ff bd80 	b.w	8001780 <GPIO_ResetBits>
 8001c80:	40010c00 	.word	0x40010c00

08001c84 <coolant_set_state>:
// Main program only. Immediately sets flood coolant running state and also mist coolant, 
// if enabled. Also sets a flag to report an update to a coolant state.
// Called by coolant toggle override, parking restore, parking retract, sleep mode, g-code
// parser program end, and g-code parser coolant_sync().
void coolant_set_state(uint8_t mode)
{
 8001c84:	b538      	push	{r3, r4, r5, lr}
  if (sys.abort) { return; } // Block during abort.  
 8001c86:	4d0f      	ldr	r5, [pc, #60]	; (8001cc4 <coolant_set_state+0x40>)
 8001c88:	786b      	ldrb	r3, [r5, #1]
 8001c8a:	b93b      	cbnz	r3, 8001c9c <coolant_set_state+0x18>
 8001c8c:	4604      	mov	r4, r0
  
  if (mode == COOLANT_DISABLE) {
 8001c8e:	b130      	cbz	r0, 8001c9e <coolant_set_state+0x1a>
    coolant_stop(); 
  
  } else {
  
#if defined(AVRTARGET) || defined(STM32F103C8)
	  if (mode & COOLANT_FLOOD_ENABLE) {
 8001c90:	0642      	lsls	r2, r0, #25
 8001c92:	d40d      	bmi.n	8001cb0 <coolant_set_state+0x2c>
#endif
      #endif
    }
  
    #ifdef ENABLE_M7
      if (mode & COOLANT_MIST_ENABLE) {
 8001c94:	0623      	lsls	r3, r4, #24
 8001c96:	d410      	bmi.n	8001cba <coolant_set_state+0x36>
        #endif
      }
    #endif
#endif  
  }
  sys.report_ovr_counter = 0; // Set to report change immediately
 8001c98:	2300      	movs	r3, #0
 8001c9a:	732b      	strb	r3, [r5, #12]
 8001c9c:	bd38      	pop	{r3, r4, r5, pc}
	GPIO_ResetBits(COOLANT_FLOOD_PORT,1 << COOLANT_FLOOD_BIT);
 8001c9e:	2110      	movs	r1, #16
 8001ca0:	4809      	ldr	r0, [pc, #36]	; (8001cc8 <coolant_set_state+0x44>)
 8001ca2:	f7ff fd6d 	bl	8001780 <GPIO_ResetBits>
	GPIO_ResetBits(COOLANT_MIST_PORT, 1 << COOLANT_MIST_BIT);
 8001ca6:	2108      	movs	r1, #8
 8001ca8:	4807      	ldr	r0, [pc, #28]	; (8001cc8 <coolant_set_state+0x44>)
 8001caa:	f7ff fd69 	bl	8001780 <GPIO_ResetBits>
 8001cae:	e7f3      	b.n	8001c98 <coolant_set_state+0x14>
		GPIO_SetBits(COOLANT_FLOOD_PORT,1 << COOLANT_FLOOD_BIT);
 8001cb0:	2110      	movs	r1, #16
 8001cb2:	4805      	ldr	r0, [pc, #20]	; (8001cc8 <coolant_set_state+0x44>)
 8001cb4:	f7ff fd62 	bl	800177c <GPIO_SetBits>
 8001cb8:	e7ec      	b.n	8001c94 <coolant_set_state+0x10>
		  GPIO_SetBits(COOLANT_MIST_PORT, 1 << COOLANT_MIST_BIT);
 8001cba:	2108      	movs	r1, #8
 8001cbc:	4802      	ldr	r0, [pc, #8]	; (8001cc8 <coolant_set_state+0x44>)
 8001cbe:	f7ff fd5d 	bl	800177c <GPIO_SetBits>
 8001cc2:	e7e9      	b.n	8001c98 <coolant_set_state+0x14>
 8001cc4:	200010c8 	.word	0x200010c8
 8001cc8:	40010c00 	.word	0x40010c00

08001ccc <coolant_sync>:


// G-code parser entry-point for setting coolant state. Forces a planner buffer sync and bails 
// if an abort or check-mode is active.
void coolant_sync(uint8_t mode)
{
 8001ccc:	b538      	push	{r3, r4, r5, lr}
  if (sys.state == STATE_CHECK_MODE) { return; }
 8001cce:	4c12      	ldr	r4, [pc, #72]	; (8001d18 <coolant_sync+0x4c>)
 8001cd0:	7823      	ldrb	r3, [r4, #0]
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d004      	beq.n	8001ce0 <coolant_sync+0x14>
 8001cd6:	4605      	mov	r5, r0
  protocol_buffer_synchronize(); // Ensure coolant turns on when specified in program.
 8001cd8:	f004 fa2e 	bl	8006138 <protocol_buffer_synchronize>
  if (sys.abort) { return; } // Block during abort.  
 8001cdc:	7863      	ldrb	r3, [r4, #1]
 8001cde:	b103      	cbz	r3, 8001ce2 <coolant_sync+0x16>
 8001ce0:	bd38      	pop	{r3, r4, r5, pc}
  if (mode == COOLANT_DISABLE) {
 8001ce2:	b135      	cbz	r5, 8001cf2 <coolant_sync+0x26>
	  if (mode & COOLANT_FLOOD_ENABLE) {
 8001ce4:	066a      	lsls	r2, r5, #25
 8001ce6:	d40d      	bmi.n	8001d04 <coolant_sync+0x38>
      if (mode & COOLANT_MIST_ENABLE) {
 8001ce8:	062b      	lsls	r3, r5, #24
 8001cea:	d410      	bmi.n	8001d0e <coolant_sync+0x42>
  sys.report_ovr_counter = 0; // Set to report change immediately
 8001cec:	2300      	movs	r3, #0
 8001cee:	7323      	strb	r3, [r4, #12]
 8001cf0:	bd38      	pop	{r3, r4, r5, pc}
	GPIO_ResetBits(COOLANT_FLOOD_PORT,1 << COOLANT_FLOOD_BIT);
 8001cf2:	2110      	movs	r1, #16
 8001cf4:	4809      	ldr	r0, [pc, #36]	; (8001d1c <coolant_sync+0x50>)
 8001cf6:	f7ff fd43 	bl	8001780 <GPIO_ResetBits>
	GPIO_ResetBits(COOLANT_MIST_PORT, 1 << COOLANT_MIST_BIT);
 8001cfa:	2108      	movs	r1, #8
 8001cfc:	4807      	ldr	r0, [pc, #28]	; (8001d1c <coolant_sync+0x50>)
 8001cfe:	f7ff fd3f 	bl	8001780 <GPIO_ResetBits>
 8001d02:	e7f3      	b.n	8001cec <coolant_sync+0x20>
		GPIO_SetBits(COOLANT_FLOOD_PORT,1 << COOLANT_FLOOD_BIT);
 8001d04:	2110      	movs	r1, #16
 8001d06:	4805      	ldr	r0, [pc, #20]	; (8001d1c <coolant_sync+0x50>)
 8001d08:	f7ff fd38 	bl	800177c <GPIO_SetBits>
 8001d0c:	e7ec      	b.n	8001ce8 <coolant_sync+0x1c>
		  GPIO_SetBits(COOLANT_MIST_PORT, 1 << COOLANT_MIST_BIT);
 8001d0e:	2108      	movs	r1, #8
 8001d10:	4802      	ldr	r0, [pc, #8]	; (8001d1c <coolant_sync+0x50>)
 8001d12:	f7ff fd33 	bl	800177c <GPIO_SetBits>
 8001d16:	e7e9      	b.n	8001cec <coolant_sync+0x20>
 8001d18:	200010c8 	.word	0x200010c8
 8001d1c:	40010c00 	.word	0x40010c00

08001d20 <eeprom_init>:
		nSize -= 4;
		nAddress += 4;
	}
}
void eeprom_init()
{
 8001d20:	4b0b      	ldr	r3, [pc, #44]	; (8001d50 <eeprom_init+0x30>)
 8001d22:	490c      	ldr	r1, [pc, #48]	; (8001d54 <eeprom_init+0x34>)
 8001d24:	b410      	push	{r4}
 8001d26:	1c5c      	adds	r4, r3, #1
 8001d28:	1b09      	subs	r1, r1, r4
 8001d2a:	f503 6080 	add.w	r0, r3, #1024	; 0x400
	uint16_t VarIdx = 0;
	uint8_t *pTmp = EE_Buffer;

	for (VarIdx = 0; VarIdx < PAGE_SIZE; VarIdx++)
	{
		*pTmp++ = (*(__IO uint8_t*)(EEPROM_START_ADDRESS + VarIdx));
 8001d2e:	5cca      	ldrb	r2, [r1, r3]
 8001d30:	f803 2f01 	strb.w	r2, [r3, #1]!
	for (VarIdx = 0; VarIdx < PAGE_SIZE; VarIdx++)
 8001d34:	4298      	cmp	r0, r3
 8001d36:	d1fa      	bne.n	8001d2e <eeprom_init+0xe>
	}

	if (EE_Buffer[0] != SETTINGS_VERSION)
 8001d38:	7823      	ldrb	r3, [r4, #0]
 8001d3a:	2b0a      	cmp	r3, #10
 8001d3c:	d006      	beq.n	8001d4c <eeprom_init+0x2c>
 8001d3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d42:	21ff      	movs	r1, #255	; 0xff
 8001d44:	4804      	ldr	r0, [pc, #16]	; (8001d58 <eeprom_init+0x38>)
		for (VarIdx = 0; VarIdx < PAGE_SIZE; VarIdx++)
		{
			*pTmp++ = 0xFF;
		}
	}
}
 8001d46:	bc10      	pop	{r4}
 8001d48:	f009 bb85 	b.w	800b456 <memset>
 8001d4c:	bc10      	pop	{r4}
 8001d4e:	4770      	bx	lr
 8001d50:	20000c2b 	.word	0x20000c2b
 8001d54:	0801fc01 	.word	0x0801fc01
 8001d58:	20000c2c 	.word	0x20000c2c

08001d5c <eeprom_get_char>:
	EEAR = addr; // Set EEPROM address register.
	EECR = (1<<EERE); // Start EEPROM read operation.
	return EEDR; // Return the byte read from EEPROM.
#endif
#if defined(WIN32) || defined(STM32F103C8)
	return EE_Buffer[addr];
 8001d5c:	4b01      	ldr	r3, [pc, #4]	; (8001d64 <eeprom_get_char+0x8>)
#endif
}
 8001d5e:	5c18      	ldrb	r0, [r3, r0]
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	20000c2c 	.word	0x20000c2c

08001d68 <eeprom_put_char>:
	}
	
	sei(); // Restore interrupt flag state.
#endif
#if defined(WIN32) || defined(STM32F103C8)
	EE_Buffer[addr] = new_value;
 8001d68:	4b01      	ldr	r3, [pc, #4]	; (8001d70 <eeprom_put_char+0x8>)
 8001d6a:	5419      	strb	r1, [r3, r0]
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	20000c2c 	.word	0x20000c2c

08001d74 <memcpy_to_eeprom_with_checksum>:
}

// Extensions added as part of Grbl 


void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
 8001d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d78:	4606      	mov	r6, r0
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
 8001d7a:	2a00      	cmp	r2, #0
 8001d7c:	d040      	beq.n	8001e00 <memcpy_to_eeprom_with_checksum+0x8c>
 8001d7e:	2300      	movs	r3, #0
 8001d80:	4f21      	ldr	r7, [pc, #132]	; (8001e08 <memcpy_to_eeprom_with_checksum+0x94>)
 8001d82:	1e44      	subs	r4, r0, #1
 8001d84:	443c      	add	r4, r7
 8001d86:	188d      	adds	r5, r1, r2
 8001d88:	2b00      	cmp	r3, #0
    checksum = (checksum << 1) || (checksum >> 7);
 8001d8a:	ea4f 13d3 	mov.w	r3, r3, lsr #7
 8001d8e:	bf18      	it	ne
 8001d90:	2301      	movne	r3, #1
    checksum += *source;
 8001d92:	f811 0b01 	ldrb.w	r0, [r1], #1
 8001d96:	4403      	add	r3, r0
  for(; size > 0; size--) { 
 8001d98:	42a9      	cmp	r1, r5
    checksum += *source;
 8001d9a:	b2db      	uxtb	r3, r3
	EE_Buffer[addr] = new_value;
 8001d9c:	f804 0f01 	strb.w	r0, [r4, #1]!
  for(; size > 0; size--) { 
 8001da0:	d1f2      	bne.n	8001d88 <memcpy_to_eeprom_with_checksum+0x14>
 8001da2:	4416      	add	r6, r2
	FlashStatus = FLASH_ErasePage(EEPROM_START_ADDRESS);
 8001da4:	4819      	ldr	r0, [pc, #100]	; (8001e0c <memcpy_to_eeprom_with_checksum+0x98>)
	EE_Buffer[addr] = new_value;
 8001da6:	55bb      	strb	r3, [r7, r6]
	FlashStatus = FLASH_ErasePage(EEPROM_START_ADDRESS);
 8001da8:	f7ff fa3e 	bl	8001228 <FLASH_ErasePage>
	if (FlashStatus != FLASH_COMPLETE)
 8001dac:	2804      	cmp	r0, #4
 8001dae:	d001      	beq.n	8001db4 <memcpy_to_eeprom_with_checksum+0x40>
 8001db0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (*pBuffer != 0xffff)
 8001db4:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8001db8:	4d15      	ldr	r5, [pc, #84]	; (8001e10 <memcpy_to_eeprom_with_checksum+0x9c>)
	if (FlashStatus != FLASH_COMPLETE)
 8001dba:	4c14      	ldr	r4, [pc, #80]	; (8001e0c <memcpy_to_eeprom_with_checksum+0x98>)
	while (nSize > 0)
 8001dbc:	f8df 8054 	ldr.w	r8, [pc, #84]	; 8001e14 <memcpy_to_eeprom_with_checksum+0xa0>
 8001dc0:	1eae      	subs	r6, r5, #2
		if (*pBuffer != 0xffff)
 8001dc2:	f835 1c04 	ldrh.w	r1, [r5, #-4]
 8001dc6:	42b9      	cmp	r1, r7
 8001dc8:	d002      	beq.n	8001dd0 <memcpy_to_eeprom_with_checksum+0x5c>
			FLASH_ProgramHalfWord(nAddress, *pBuffer++);
 8001dca:	4620      	mov	r0, r4
 8001dcc:	f7ff faa2 	bl	8001314 <FLASH_ProgramHalfWord>
		if (*pBuffer != 0xffff)
 8001dd0:	8831      	ldrh	r1, [r6, #0]
			FLASH_ProgramHalfWord(nAddress + 2, *pBuffer++);
 8001dd2:	1ca0      	adds	r0, r4, #2
		if (*pBuffer != 0xffff)
 8001dd4:	42b9      	cmp	r1, r7
		nAddress += 4;
 8001dd6:	f104 0404 	add.w	r4, r4, #4
		if (*pBuffer != 0xffff)
 8001dda:	d009      	beq.n	8001df0 <memcpy_to_eeprom_with_checksum+0x7c>
			FLASH_ProgramHalfWord(nAddress + 2, *pBuffer++);
 8001ddc:	f7ff fa9a 	bl	8001314 <FLASH_ProgramHalfWord>
	while (nSize > 0)
 8001de0:	4544      	cmp	r4, r8
 8001de2:	f105 0504 	add.w	r5, r5, #4
 8001de6:	f106 0604 	add.w	r6, r6, #4
 8001dea:	d1ea      	bne.n	8001dc2 <memcpy_to_eeprom_with_checksum+0x4e>
 8001dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001df0:	4544      	cmp	r4, r8
 8001df2:	f105 0504 	add.w	r5, r5, #4
 8001df6:	f106 0604 	add.w	r6, r6, #4
 8001dfa:	d1e2      	bne.n	8001dc2 <memcpy_to_eeprom_with_checksum+0x4e>
 8001dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  unsigned char checksum = 0;
 8001e00:	4613      	mov	r3, r2
 8001e02:	4f01      	ldr	r7, [pc, #4]	; (8001e08 <memcpy_to_eeprom_with_checksum+0x94>)
 8001e04:	e7ce      	b.n	8001da4 <memcpy_to_eeprom_with_checksum+0x30>
 8001e06:	bf00      	nop
 8001e08:	20000c2c 	.word	0x20000c2c
 8001e0c:	0801fc00 	.word	0x0801fc00
 8001e10:	20000c30 	.word	0x20000c30
 8001e14:	08020000 	.word	0x08020000

08001e18 <memcpy_from_eeprom_with_checksum>:
  eeprom_flush();
#endif
#endif
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
 8001e18:	b4f0      	push	{r4, r5, r6, r7}
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
 8001e1a:	b1ca      	cbz	r2, 8001e50 <memcpy_from_eeprom_with_checksum+0x38>
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	4f0e      	ldr	r7, [pc, #56]	; (8001e58 <memcpy_from_eeprom_with_checksum+0x40>)
 8001e20:	1e4d      	subs	r5, r1, #1
 8001e22:	443d      	add	r5, r7
 8001e24:	1886      	adds	r6, r0, r2
 8001e26:	2b00      	cmp	r3, #0
    data = eeprom_get_char(source++);
    checksum = (checksum << 1) || (checksum >> 7);
 8001e28:	ea4f 13d3 	mov.w	r3, r3, lsr #7
 8001e2c:	bf18      	it	ne
 8001e2e:	2301      	movne	r3, #1
	return EE_Buffer[addr];
 8001e30:	f815 4f01 	ldrb.w	r4, [r5, #1]!
    checksum += data;    
    *(destination++) = data; 
 8001e34:	f800 4b01 	strb.w	r4, [r0], #1
    checksum += data;    
 8001e38:	4423      	add	r3, r4
  for(; size > 0; size--) { 
 8001e3a:	42b0      	cmp	r0, r6
    checksum += data;    
 8001e3c:	b2db      	uxtb	r3, r3
  for(; size > 0; size--) { 
 8001e3e:	d1f2      	bne.n	8001e26 <memcpy_from_eeprom_with_checksum+0xe>
 8001e40:	4411      	add	r1, r2
  }
  return(checksum == eeprom_get_char(source));
 8001e42:	5c78      	ldrb	r0, [r7, r1]
}
 8001e44:	bcf0      	pop	{r4, r5, r6, r7}
 8001e46:	1ac0      	subs	r0, r0, r3
 8001e48:	fab0 f080 	clz	r0, r0
 8001e4c:	0940      	lsrs	r0, r0, #5
 8001e4e:	4770      	bx	lr
  unsigned char data, checksum = 0;
 8001e50:	4613      	mov	r3, r2
 8001e52:	4f01      	ldr	r7, [pc, #4]	; (8001e58 <memcpy_from_eeprom_with_checksum+0x40>)
 8001e54:	e7f5      	b.n	8001e42 <memcpy_from_eeprom_with_checksum+0x2a>
 8001e56:	bf00      	nop
 8001e58:	20000c2c 	.word	0x20000c2c

08001e5c <gc_init>:

#define FAIL(status) return(status);


void gc_init()
{
 8001e5c:	b508      	push	{r3, lr}
  memset(&gc_state, 0, sizeof(parser_state_t));
 8001e5e:	2100      	movs	r1, #0
 8001e60:	2250      	movs	r2, #80	; 0x50
 8001e62:	4807      	ldr	r0, [pc, #28]	; (8001e80 <gc_init+0x24>)
 8001e64:	f009 faf7 	bl	800b456 <memset>

  // Load default G54 coordinate system.
  if (!(settings_read_coord_data(gc_state.modal.coord_select,gc_state.coord_system))) {
 8001e68:	4906      	ldr	r1, [pc, #24]	; (8001e84 <gc_init+0x28>)
 8001e6a:	2000      	movs	r0, #0
 8001e6c:	f005 fe7e 	bl	8007b6c <settings_read_coord_data>
 8001e70:	b100      	cbz	r0, 8001e74 <gc_init+0x18>
 8001e72:	bd08      	pop	{r3, pc}
    report_status_message(STATUS_SETTING_READ_FAIL);
 8001e74:	2007      	movs	r0, #7
  }
}
 8001e76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    report_status_message(STATUS_SETTING_READ_FAIL);
 8001e7a:	f004 bc53 	b.w	8006724 <report_status_message>
 8001e7e:	bf00      	nop
 8001e80:	2000102c 	.word	0x2000102c
 8001e84:	20001058 	.word	0x20001058

08001e88 <gc_sync_position>:

// Sets g-code parser position in mm. Input in steps. Called by the system abort and hard
// limit pull-off routines.
void gc_sync_position()
{
  system_convert_array_steps_to_mpos(gc_state.position,sys_position);
 8001e88:	4901      	ldr	r1, [pc, #4]	; (8001e90 <gc_sync_position+0x8>)
 8001e8a:	4802      	ldr	r0, [pc, #8]	; (8001e94 <gc_sync_position+0xc>)
 8001e8c:	f007 be34 	b.w	8009af8 <system_convert_array_steps_to_mpos>
 8001e90:	200010f0 	.word	0x200010f0
 8001e94:	20001048 	.word	0x20001048

08001e98 <gc_execute_line>:
// characters and signed floating point values (no whitespace). Comments and block delete
// characters have been removed. In this function, all units and positions are converted and
// exported to grbl's internal functions in terms of (mm, mm/min) and absolute machine
// coordinates, respectively.
uint8_t gc_execute_line(char *line)
{
 8001e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e9c:	4607      	mov	r7, r0
     updates these modes and commands as the block line is parser and will only be used and
     executed after successful error-checking. The parser block struct also contains a block
     values struct, word tracking variables, and a non-modal commands tracker for the new
     block. This struct contains all of the necessary information to execute the block. */

  memset(&gc_block, 0, sizeof(parser_block_t)); // Initialize the parser block struct.
 8001e9e:	f8df 92ac 	ldr.w	r9, [pc, #684]	; 800214c <gc_execute_line+0x2b4>
 8001ea2:	2248      	movs	r2, #72	; 0x48
 8001ea4:	2100      	movs	r1, #0
{
 8001ea6:	b09f      	sub	sp, #124	; 0x7c
  memset(&gc_block, 0, sizeof(parser_block_t)); // Initialize the parser block struct.
 8001ea8:	4648      	mov	r0, r9
 8001eaa:	f009 fad4 	bl	800b456 <memset>
  memcpy(&gc_block.modal,&gc_state.modal,sizeof(gc_modal_t)); // Copy current modes
 8001eae:	4ba3      	ldr	r3, [pc, #652]	; (800213c <gc_execute_line+0x2a4>)
 8001eb0:	cb03      	ldmia	r3!, {r0, r1}
 8001eb2:	881c      	ldrh	r4, [r3, #0]
 8001eb4:	789a      	ldrb	r2, [r3, #2]
 8001eb6:	f8c9 0001 	str.w	r0, [r9, #1]
 8001eba:	f8c9 1005 	str.w	r1, [r9, #5]
 8001ebe:	f8a9 4009 	strh.w	r4, [r9, #9]
 8001ec2:	f889 200b 	strb.w	r2, [r9, #11]
  uint16_t command_words = 0; // Tracks G and M command words. Also used for modal group violations.
  uint16_t value_words = 0; // Tracks value words.
  uint8_t gc_parser_flags = GC_PARSER_NONE;

  // Determine if the line is a jogging motion or a normal g-code block.
  if (line[0] == '$') { // NOTE: `$J=` already parsed when passed to this function.
 8001ec6:	783b      	ldrb	r3, [r7, #0]
 8001ec8:	2b24      	cmp	r3, #36	; 0x24
 8001eca:	f000 8129 	beq.w	8002120 <gc_execute_line+0x288>
 8001ece:	2310      	movs	r3, #16
  char letter;
  float value;
  uint8_t int_value = 0;
  uint16_t mantissa = 0;
  if (gc_parser_flags & GC_PARSER_JOG_MOTION) { char_counter = 3; } // Start parsing after `$J=`
  else { char_counter = 0; }
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	930b      	str	r3, [sp, #44]	; 0x2c
 8001ed4:	2304      	movs	r3, #4
  uint8_t gc_parser_flags = GC_PARSER_NONE;
 8001ed6:	9209      	str	r2, [sp, #36]	; 0x24
 8001ed8:	930a      	str	r3, [sp, #40]	; 0x28
            word_bit = MODAL_GROUP_M8;
            switch(int_value) {
              #ifdef ENABLE_M7
                case 7: gc_block.modal.coolant = COOLANT_MIST_ENABLE; break;
              #endif
              case 8: gc_block.modal.coolant = COOLANT_FLOOD_ENABLE; break;
 8001eda:	f04f 0800 	mov.w	r8, #0
  while (line[char_counter] != 0) { // Loop until no more g-code words in line.
 8001ede:	5cbd      	ldrb	r5, [r7, r2]
 8001ee0:	f88d 2057 	strb.w	r2, [sp, #87]	; 0x57
              case 8: gc_block.modal.coolant = COOLANT_FLOOD_ENABLE; break;
 8001ee4:	4644      	mov	r4, r8
 8001ee6:	f8cd 8020 	str.w	r8, [sp, #32]
 8001eea:	f8cd 8018 	str.w	r8, [sp, #24]
 8001eee:	f8cd 801c 	str.w	r8, [sp, #28]
  while (line[char_counter] != 0) { // Loop until no more g-code words in line.
 8001ef2:	2d00      	cmp	r5, #0
 8001ef4:	f000 80f1 	beq.w	80020da <gc_execute_line+0x242>
    if((letter < 'A') || (letter > 'Z')) { FAIL(STATUS_EXPECTED_COMMAND_LETTER); } // [Expected word letter]
 8001ef8:	f1a5 0641 	sub.w	r6, r5, #65	; 0x41
 8001efc:	b2f3      	uxtb	r3, r6
 8001efe:	2b19      	cmp	r3, #25
 8001f00:	f200 82bd 	bhi.w	800247e <gc_execute_line+0x5e6>
    char_counter++;
 8001f04:	1c53      	adds	r3, r2, #1
    if (!read_float(line, &char_counter, &value)) { FAIL(STATUS_BAD_NUMBER_FORMAT); } // [Expected word value]
 8001f06:	f10d 0157 	add.w	r1, sp, #87	; 0x57
 8001f0a:	aa16      	add	r2, sp, #88	; 0x58
 8001f0c:	4638      	mov	r0, r7
    char_counter++;
 8001f0e:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
    if (!read_float(line, &char_counter, &value)) { FAIL(STATUS_BAD_NUMBER_FORMAT); } // [Expected word value]
 8001f12:	f002 f8dd 	bl	80040d0 <read_float>
 8001f16:	2800      	cmp	r0, #0
 8001f18:	f000 82b6 	beq.w	8002488 <gc_execute_line+0x5f0>
    int_value = truncf(value);
 8001f1c:	f8dd b058 	ldr.w	fp, [sp, #88]	; 0x58
 8001f20:	4658      	mov	r0, fp
 8001f22:	f7ff f8c7 	bl	80010b4 <__aeabi_f2uiz>
 8001f26:	fa5f fa80 	uxtb.w	sl, r0
	mantissa = (uint16_t)lroundf(100 * (value - int_value)); // Compute mantissa for Gxx.x commands.
 8001f2a:	4650      	mov	r0, sl
 8001f2c:	f7fe fe6c 	bl	8000c08 <__aeabi_i2f>
 8001f30:	4601      	mov	r1, r0
 8001f32:	4658      	mov	r0, fp
 8001f34:	f7fe fdb2 	bl	8000a9c <__aeabi_fsub>
 8001f38:	4981      	ldr	r1, [pc, #516]	; (8002140 <gc_execute_line+0x2a8>)
 8001f3a:	f7fe feb9 	bl	8000cb0 <__aeabi_fmul>
 8001f3e:	f009 fb87 	bl	800b650 <lroundf>
    switch(letter) {
 8001f42:	2d47      	cmp	r5, #71	; 0x47
	mantissa = (uint16_t)lroundf(100 * (value - int_value)); // Compute mantissa for Gxx.x commands.
 8001f44:	b282      	uxth	r2, r0
    switch(letter) {
 8001f46:	d028      	beq.n	8001f9a <gc_execute_line+0x102>
 8001f48:	2d4d      	cmp	r5, #77	; 0x4d
 8001f4a:	f040 8092 	bne.w	8002072 <gc_execute_line+0x1da>
        if (mantissa > 0) { FAIL(STATUS_GCODE_COMMAND_VALUE_NOT_INTEGER); } // [No Mxx.x commands]
 8001f4e:	2a00      	cmp	r2, #0
 8001f50:	f040 82d5 	bne.w	80024fe <gc_execute_line+0x666>
 8001f54:	f1ba 0f1e 	cmp.w	sl, #30
 8001f58:	f200 8115 	bhi.w	8002186 <gc_execute_line+0x2ee>
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	4a79      	ldr	r2, [pc, #484]	; (8002144 <gc_execute_line+0x2ac>)
 8001f60:	fa03 f30a 	lsl.w	r3, r3, sl
 8001f64:	4213      	tst	r3, r2
 8001f66:	f040 80a3 	bne.w	80020b0 <gc_execute_line+0x218>
 8001f6a:	f413 7f60 	tst.w	r3, #896	; 0x380
 8001f6e:	f040 80c7 	bne.w	8002100 <gc_execute_line+0x268>
 8001f72:	f013 0f38 	tst.w	r3, #56	; 0x38
 8001f76:	f000 8106 	beq.w	8002186 <gc_execute_line+0x2ee>
            switch(int_value) {
 8001f7a:	f1ba 0f04 	cmp.w	sl, #4
 8001f7e:	f000 8212 	beq.w	80023a6 <gc_execute_line+0x50e>
 8001f82:	f1ba 0f05 	cmp.w	sl, #5
 8001f86:	f000 8295 	beq.w	80024b4 <gc_execute_line+0x61c>
 8001f8a:	f1ba 0f03 	cmp.w	sl, #3
 8001f8e:	f000 8218 	beq.w	80023c2 <gc_execute_line+0x52a>
 8001f92:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f96:	230c      	movs	r3, #12
 8001f98:	e093      	b.n	80020c2 <gc_execute_line+0x22a>
        switch(int_value) {
 8001f9a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8001f9e:	f200 80f2 	bhi.w	8002186 <gc_execute_line+0x2ee>
 8001fa2:	e8df f01a 	tbh	[pc, sl, lsl #1]
 8001fa6:	00db      	.short	0x00db
 8001fa8:	00db00db 	.word	0x00db00db
 8001fac:	013800db 	.word	0x013800db
 8001fb0:	00f000f0 	.word	0x00f000f0
 8001fb4:	00f000f0 	.word	0x00f000f0
 8001fb8:	014800f0 	.word	0x014800f0
 8001fbc:	00f000f0 	.word	0x00f000f0
 8001fc0:	00f000f0 	.word	0x00f000f0
 8001fc4:	00f000f0 	.word	0x00f000f0
 8001fc8:	01610161 	.word	0x01610161
 8001fcc:	01670161 	.word	0x01670161
 8001fd0:	00f00167 	.word	0x00f00167
 8001fd4:	00f000f0 	.word	0x00f000f0
 8001fd8:	00f000f0 	.word	0x00f000f0
 8001fdc:	014800f0 	.word	0x014800f0
 8001fe0:	014800f0 	.word	0x014800f0
 8001fe4:	00f000f0 	.word	0x00f000f0
 8001fe8:	00f000f0 	.word	0x00f000f0
 8001fec:	00f000f0 	.word	0x00f000f0
 8001ff0:	00db00f0 	.word	0x00db00f0
 8001ff4:	00fc00f0 	.word	0x00fc00f0
 8001ff8:	00f000f0 	.word	0x00f000f0
 8001ffc:	00f0010a 	.word	0x00f0010a
 8002000:	00f000f0 	.word	0x00f000f0
 8002004:	00f000f0 	.word	0x00f000f0
 8002008:	00f0010a 	.word	0x00f0010a
 800200c:	00f000f0 	.word	0x00f000f0
 8002010:	011b0138 	.word	0x011b0138
 8002014:	011b011b 	.word	0x011b011b
 8002018:	011b011b 	.word	0x011b011b
 800201c:	00f0011b 	.word	0x00f0011b
 8002020:	00f00121 	.word	0x00f00121
 8002024:	00f000f0 	.word	0x00f000f0
 8002028:	00f000f0 	.word	0x00f000f0
 800202c:	00f000f0 	.word	0x00f000f0
 8002030:	00f000f0 	.word	0x00f000f0
 8002034:	00f000f0 	.word	0x00f000f0
 8002038:	00f000f0 	.word	0x00f000f0
 800203c:	00f000f0 	.word	0x00f000f0
 8002040:	00f000f0 	.word	0x00f000f0
 8002044:	015c00f0 	.word	0x015c00f0
 8002048:	00f000f0 	.word	0x00f000f0
 800204c:	00f000f0 	.word	0x00f000f0
 8002050:	00f000f0 	.word	0x00f000f0
 8002054:	00f000f0 	.word	0x00f000f0
 8002058:	012500f0 	.word	0x012500f0
 800205c:	01480125 	.word	0x01480125
 8002060:	012e012e 	.word	0x012e012e
 8002064:	00f000f0 	.word	0x00f000f0
 8002068:	00f000f0 	.word	0x00f000f0
 800206c:	013400f0 	.word	0x013400f0
 8002070:	0134      	.short	0x0134
      default:

        /* Non-Command Words: This initial parsing phase only checks for repeats of the remaining
           legal g-code words and stores their value. Error-checking is performed later since some
           words (I,J,K,L,P,R) have multiple connotations and/or depend on the issued commands. */
        switch(letter){
 8002072:	2e19      	cmp	r6, #25
 8002074:	f200 8087 	bhi.w	8002186 <gc_execute_line+0x2ee>
 8002078:	e8df f016 	tbh	[pc, r6, lsl #1]
 800207c:	0085013d 	.word	0x0085013d
 8002080:	00850085 	.word	0x00850085
 8002084:	01470085 	.word	0x01470085
 8002088:	00850085 	.word	0x00850085
 800208c:	01600157 	.word	0x01600157
 8002090:	01110102 	.word	0x01110102
 8002094:	01860085 	.word	0x01860085
 8002098:	01690085 	.word	0x01690085
 800209c:	016e0085 	.word	0x016e0085
 80020a0:	01790173 	.word	0x01790173
 80020a4:	00850085 	.word	0x00850085
 80020a8:	011f0085 	.word	0x011f0085
 80020ac:	01330129 	.word	0x01330129
            switch(int_value) {
 80020b0:	f1ba 0f00 	cmp.w	sl, #0
 80020b4:	d06c      	beq.n	8002190 <gc_execute_line+0x2f8>
 80020b6:	f1ba 0f01 	cmp.w	sl, #1
 80020ba:	d149      	bne.n	8002150 <gc_execute_line+0x2b8>
 80020bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020c0:	230b      	movs	r3, #11
        if ( bit_istrue(command_words,bit(word_bit)) ) { FAIL(STATUS_GCODE_MODAL_GROUP_VIOLATION); }
 80020c2:	fa44 f303 	asr.w	r3, r4, r3
 80020c6:	07d9      	lsls	r1, r3, #31
 80020c8:	f100 8204 	bmi.w	80024d4 <gc_execute_line+0x63c>
        command_words |= bit(word_bit);
 80020cc:	4314      	orrs	r4, r2
 80020ce:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
  while (line[char_counter] != 0) { // Loop until no more g-code words in line.
 80020d2:	5cbd      	ldrb	r5, [r7, r2]
 80020d4:	2d00      	cmp	r5, #0
 80020d6:	f47f af0f 	bne.w	8001ef8 <gc_execute_line+0x60>

  // [0. Non-specific/common error-checks and miscellaneous setup]:

  // Determine implicit axis command conditions. Axis words have been passed, but no explicit axis
  // command has been sent. If so, set axis command to current motion mode.
  if (axis_words) {
 80020da:	9b06      	ldr	r3, [sp, #24]
 80020dc:	b123      	cbz	r3, 80020e8 <gc_execute_line+0x250>
    if (!axis_command) { axis_command = AXIS_COMMAND_MOTION_MODE; } // Assign implicit motion-mode
 80020de:	9b07      	ldr	r3, [sp, #28]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	bf08      	it	eq
 80020e4:	2302      	moveq	r3, #2
 80020e6:	9307      	str	r3, [sp, #28]
  }

  // Check for valid line number N value.
  if (bit_istrue(value_words,bit(WORD_N))) {
 80020e8:	f018 0f20 	tst.w	r8, #32
 80020ec:	f000 817b 	beq.w	80023e6 <gc_execute_line+0x54e>
    // Line number value cannot be less than zero (done) or greater than max line number.
    if (gc_block.values.n > MAX_LINE_NUMBER) { FAIL(STATUS_GCODE_INVALID_LINE_NUMBER); } // [Exceeds max line number]
 80020f0:	4b15      	ldr	r3, [pc, #84]	; (8002148 <gc_execute_line+0x2b0>)
 80020f2:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
 80020f6:	429a      	cmp	r2, r3
 80020f8:	f340 8175 	ble.w	80023e6 <gc_execute_line+0x54e>
 80020fc:	241b      	movs	r4, #27
 80020fe:	e043      	b.n	8002188 <gc_execute_line+0x2f0>
            switch(int_value) {
 8002100:	f1ba 0f08 	cmp.w	sl, #8
 8002104:	f000 8148 	beq.w	8002398 <gc_execute_line+0x500>
 8002108:	f1ba 0f09 	cmp.w	sl, #9
 800210c:	f000 81c1 	beq.w	8002492 <gc_execute_line+0x5fa>
 8002110:	f1ba 0f07 	cmp.w	sl, #7
 8002114:	f000 814e 	beq.w	80023b4 <gc_execute_line+0x51c>
 8002118:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800211c:	230d      	movs	r3, #13
 800211e:	e7d0      	b.n	80020c2 <gc_execute_line+0x22a>
	gc_block.modal.motion = MOTION_MODE_LINEAR;
 8002120:	2301      	movs	r3, #1
 8002122:	f889 3001 	strb.w	r3, [r9, #1]
    gc_parser_flags |= GC_PARSER_JOG_MOTION;
 8002126:	9309      	str	r3, [sp, #36]	; 0x24
 8002128:	2311      	movs	r3, #17
    gc_block.modal.feed_rate = FEED_RATE_MODE_UNITS_PER_MIN;
 800212a:	2200      	movs	r2, #0
 800212c:	930b      	str	r3, [sp, #44]	; 0x2c
 800212e:	2305      	movs	r3, #5
 8002130:	f889 2002 	strb.w	r2, [r9, #2]
 8002134:	930a      	str	r3, [sp, #40]	; 0x28
  if (gc_parser_flags & GC_PARSER_JOG_MOTION) { char_counter = 3; } // Start parsing after `$J=`
 8002136:	2203      	movs	r2, #3
 8002138:	e6cf      	b.n	8001eda <gc_execute_line+0x42>
 800213a:	bf00      	nop
 800213c:	2000102c 	.word	0x2000102c
 8002140:	42c80000 	.word	0x42c80000
 8002144:	40000007 	.word	0x40000007
 8002148:	00989680 	.word	0x00989680
 800214c:	2000107c 	.word	0x2000107c
              default: gc_block.modal.program_flow = int_value; // Program end and reset
 8002150:	f889 a008 	strb.w	sl, [r9, #8]
 8002154:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002158:	230b      	movs	r3, #11
 800215a:	e7b2      	b.n	80020c2 <gc_execute_line+0x22a>
            if (axis_command) { FAIL(STATUS_GCODE_AXIS_COMMAND_CONFLICT); } // [Axis word/command conflict]
 800215c:	9b07      	ldr	r3, [sp, #28]
 800215e:	2b00      	cmp	r3, #0
 8002160:	f040 827e 	bne.w	8002660 <gc_execute_line+0x7c8>
            if (int_value == 38){
 8002164:	f1ba 0f26 	cmp.w	sl, #38	; 0x26
            gc_block.modal.motion = int_value;
 8002168:	f889 a001 	strb.w	sl, [r9, #1]
            if (int_value == 38){
 800216c:	f040 81c9 	bne.w	8002502 <gc_execute_line+0x66a>
              if (!((mantissa == 20) || (mantissa == 30) || (mantissa == 40) || (mantissa == 50))) {
 8002170:	f1a2 0314 	sub.w	r3, r2, #20
 8002174:	b29b      	uxth	r3, r3
 8002176:	2b1e      	cmp	r3, #30
 8002178:	d805      	bhi.n	8002186 <gc_execute_line+0x2ee>
 800217a:	49c9      	ldr	r1, [pc, #804]	; (80024a0 <gc_execute_line+0x608>)
 800217c:	fa21 f303 	lsr.w	r3, r1, r3
 8002180:	07dd      	lsls	r5, r3, #31
 8002182:	f100 8125 	bmi.w	80023d0 <gc_execute_line+0x538>
      coord_select = truncf(gc_block.values.p); // Convert p value to int.
      if (coord_select > N_COORDINATE_SYSTEM) { FAIL(STATUS_GCODE_UNSUPPORTED_COORD_SYS); } // [Greater than N sys]
      if (gc_block.values.l != 20) {
        if (gc_block.values.l == 2) {
          if (bit_istrue(value_words,bit(WORD_R))) { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); } // [G10 L2 R not supported]
        } else { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); } // [Unsupported L]
 8002186:	2414      	movs	r4, #20
  }

  // TODO: % to denote start of program.

  return(STATUS_OK);
}
 8002188:	4620      	mov	r0, r4
 800218a:	b01f      	add	sp, #124	; 0x7c
 800218c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
              case 0: gc_block.modal.program_flow = PROGRAM_FLOW_PAUSED; break; // Program pause
 8002190:	2303      	movs	r3, #3
 8002192:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002196:	f889 3008 	strb.w	r3, [r9, #8]
 800219a:	230b      	movs	r3, #11
 800219c:	e791      	b.n	80020c2 <gc_execute_line+0x22a>
        switch(int_value) {
 800219e:	2107      	movs	r1, #7
        if (mantissa > 0) { FAIL(STATUS_GCODE_COMMAND_VALUE_NOT_INTEGER); } // [Unsupported or invalid Gxx.x command]
 80021a0:	2a00      	cmp	r2, #0
 80021a2:	f040 81ac 	bne.w	80024fe <gc_execute_line+0x666>
        if ( bit_istrue(command_words,bit(word_bit)) ) { FAIL(STATUS_GCODE_MODAL_GROUP_VIOLATION); }
 80021a6:	fa44 f301 	asr.w	r3, r4, r1
 80021aa:	07d8      	lsls	r0, r3, #31
 80021ac:	f100 8192 	bmi.w	80024d4 <gc_execute_line+0x63c>
        command_words |= bit(word_bit);
 80021b0:	2301      	movs	r3, #1
 80021b2:	408b      	lsls	r3, r1
 80021b4:	431c      	orrs	r4, r3
 80021b6:	b2a4      	uxth	r4, r4
        break;
 80021b8:	e789      	b.n	80020ce <gc_execute_line+0x236>
            if (axis_command) { FAIL(STATUS_GCODE_AXIS_COMMAND_CONFLICT); } // [Axis word/command conflict] }
 80021ba:	9b07      	ldr	r3, [sp, #28]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	f040 824f 	bne.w	8002660 <gc_execute_line+0x7c8>
            if (int_value == 49) { // G49
 80021c2:	f1ba 0f31 	cmp.w	sl, #49	; 0x31
 80021c6:	f000 81a8 	beq.w	800251a <gc_execute_line+0x682>
            } else if (mantissa == 10) { // G43.1
 80021ca:	2a0a      	cmp	r2, #10
 80021cc:	d1db      	bne.n	8002186 <gc_execute_line+0x2ee>
              gc_block.modal.tool_length = TOOL_LENGTH_OFFSET_ENABLE_DYNAMIC;
 80021ce:	2301      	movs	r3, #1
 80021d0:	f889 3006 	strb.w	r3, [r9, #6]
            axis_command = AXIS_COMMAND_TOOL_LENGTH_OFFSET;
 80021d4:	2303      	movs	r3, #3
              gc_block.modal.tool_length = TOOL_LENGTH_OFFSET_ENABLE_DYNAMIC;
 80021d6:	2108      	movs	r1, #8
            axis_command = AXIS_COMMAND_TOOL_LENGTH_OFFSET;
 80021d8:	9307      	str	r3, [sp, #28]
 80021da:	e7e4      	b.n	80021a6 <gc_execute_line+0x30e>
            gc_block.modal.coord_select = int_value - 54; // Shift to array indexing.
 80021dc:	f1aa 0a36 	sub.w	sl, sl, #54	; 0x36
 80021e0:	f889 a007 	strb.w	sl, [r9, #7]
            break;
 80021e4:	2109      	movs	r1, #9
 80021e6:	e7db      	b.n	80021a0 <gc_execute_line+0x308>
            if (mantissa != 0) { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); } // [G61.1 not supported]
 80021e8:	2a00      	cmp	r2, #0
 80021ea:	d1cc      	bne.n	8002186 <gc_execute_line+0x2ee>
 80021ec:	210a      	movs	r1, #10
 80021ee:	e7da      	b.n	80021a6 <gc_execute_line+0x30e>
            if (mantissa == 0) {
 80021f0:	2a00      	cmp	r2, #0
 80021f2:	f040 8171 	bne.w	80024d8 <gc_execute_line+0x640>
              gc_block.modal.distance = int_value - 90;
 80021f6:	f1aa 0a5a 	sub.w	sl, sl, #90	; 0x5a
 80021fa:	f889 a004 	strb.w	sl, [r9, #4]
 80021fe:	2103      	movs	r1, #3
 8002200:	e7d1      	b.n	80021a6 <gc_execute_line+0x30e>
            gc_block.modal.feed_rate = 94 - int_value;
 8002202:	f1ca 0a5e 	rsb	sl, sl, #94	; 0x5e
 8002206:	f889 a002 	strb.w	sl, [r9, #2]
            break;
 800220a:	2105      	movs	r1, #5
 800220c:	e7c8      	b.n	80021a0 <gc_execute_line+0x308>
            gc_block.non_modal_command = int_value;
 800220e:	f889 a000 	strb.w	sl, [r9]
            break;
 8002212:	210f      	movs	r1, #15
 8002214:	e7c4      	b.n	80021a0 <gc_execute_line+0x308>
            if ((int_value == 28) || (int_value == 30) || (int_value == 92)) {
 8002216:	f1ba 0f1c 	cmp.w	sl, #28
            gc_block.non_modal_command = int_value;
 800221a:	f889 a000 	strb.w	sl, [r9]
            if ((int_value == 28) || (int_value == 30) || (int_value == 92)) {
 800221e:	f000 8150 	beq.w	80024c2 <gc_execute_line+0x62a>
 8002222:	f1ba 0f1e 	cmp.w	sl, #30
 8002226:	f000 814c 	beq.w	80024c2 <gc_execute_line+0x62a>
 800222a:	f1ba 0f5c 	cmp.w	sl, #92	; 0x5c
 800222e:	f000 8148 	beq.w	80024c2 <gc_execute_line+0x62a>
 8002232:	2100      	movs	r1, #0
 8002234:	e7b4      	b.n	80021a0 <gc_execute_line+0x308>
            if (mantissa == 0) { // Ignore G28.1, G30.1, and G92.1
 8002236:	2a00      	cmp	r2, #0
 8002238:	f040 8157 	bne.w	80024ea <gc_execute_line+0x652>
              if (axis_command) { FAIL(STATUS_GCODE_AXIS_COMMAND_CONFLICT); } // [Axis word/command conflict]
 800223c:	9b07      	ldr	r3, [sp, #28]
 800223e:	2b00      	cmp	r3, #0
 8002240:	f040 820e 	bne.w	8002660 <gc_execute_line+0x7c8>
            if ((int_value == 28) || (int_value == 30) || (int_value == 92)) {
 8002244:	f1ba 0f1c 	cmp.w	sl, #28
            gc_block.non_modal_command = int_value;
 8002248:	f889 a000 	strb.w	sl, [r9]
            if ((int_value == 28) || (int_value == 30) || (int_value == 92)) {
 800224c:	f000 8162 	beq.w	8002514 <gc_execute_line+0x67c>
 8002250:	f1ba 0f1e 	cmp.w	sl, #30
 8002254:	f000 815e 	beq.w	8002514 <gc_execute_line+0x67c>
              axis_command = AXIS_COMMAND_NON_MODAL;
 8002258:	2301      	movs	r3, #1
 800225a:	9307      	str	r3, [sp, #28]
 800225c:	e7e5      	b.n	800222a <gc_execute_line+0x392>
            gc_block.modal.motion = int_value;
 800225e:	2350      	movs	r3, #80	; 0x50
 8002260:	2101      	movs	r1, #1
 8002262:	f889 3001 	strb.w	r3, [r9, #1]
 8002266:	e79b      	b.n	80021a0 <gc_execute_line+0x308>
            gc_block.modal.plane_select = int_value - 17;
 8002268:	f1aa 0a11 	sub.w	sl, sl, #17
 800226c:	f889 a005 	strb.w	sl, [r9, #5]
            break;
 8002270:	2102      	movs	r1, #2
 8002272:	e795      	b.n	80021a0 <gc_execute_line+0x308>
            gc_block.modal.units = 21 - int_value;
 8002274:	f1ca 0a15 	rsb	sl, sl, #21
 8002278:	f889 a003 	strb.w	sl, [r9, #3]
            break;
 800227c:	2106      	movs	r1, #6
 800227e:	e78f      	b.n	80021a0 <gc_execute_line+0x308>
          case 'K': word_bit = WORD_K; gc_block.values.ijk[Z_AXIS] = value; ijk_words |= (1<<Z_AXIS); break;
 8002280:	9b08      	ldr	r3, [sp, #32]
 8002282:	2508      	movs	r5, #8
 8002284:	f043 0304 	orr.w	r3, r3, #4
 8002288:	9308      	str	r3, [sp, #32]
 800228a:	2303      	movs	r3, #3
 800228c:	f8c9 b018 	str.w	fp, [r9, #24]
        if (bit_istrue(value_words,bit(word_bit))) { FAIL(STATUS_GCODE_WORD_REPEATED); } // [Word repeated]
 8002290:	fa48 f303 	asr.w	r3, r8, r3
 8002294:	07db      	lsls	r3, r3, #31
 8002296:	d40b      	bmi.n	80022b0 <gc_execute_line+0x418>
        value_words |= bit(word_bit); // Flag to indicate parameter assigned.
 8002298:	ea45 0808 	orr.w	r8, r5, r8
 800229c:	e717      	b.n	80020ce <gc_execute_line+0x236>
          case 'L': word_bit = WORD_L; gc_block.values.l = int_value; break;
 800229e:	2304      	movs	r3, #4
        if (bit_istrue(value_words,bit(word_bit))) { FAIL(STATUS_GCODE_WORD_REPEATED); } // [Word repeated]
 80022a0:	fa48 f303 	asr.w	r3, r8, r3
 80022a4:	07db      	lsls	r3, r3, #31
          case 'L': word_bit = WORD_L; gc_block.values.l = int_value; break;
 80022a6:	f889 a020 	strb.w	sl, [r9, #32]
 80022aa:	f04f 0510 	mov.w	r5, #16
        if (bit_istrue(value_words,bit(word_bit))) { FAIL(STATUS_GCODE_WORD_REPEATED); } // [Word repeated]
 80022ae:	d5f3      	bpl.n	8002298 <gc_execute_line+0x400>
 80022b0:	2419      	movs	r4, #25
}
 80022b2:	4620      	mov	r0, r4
 80022b4:	b01f      	add	sp, #124	; 0x7c
 80022b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		  case 'X': word_bit = WORD_X; gc_block.values.xyz[X_AXIS] = value; axis_words |= (1<<X_AXIS); break;
 80022ba:	9b06      	ldr	r3, [sp, #24]
 80022bc:	f8c9 b038 	str.w	fp, [r9, #56]	; 0x38
 80022c0:	f043 0301 	orr.w	r3, r3, #1
 80022c4:	9306      	str	r3, [sp, #24]
 80022c6:	f44f 6580 	mov.w	r5, #1024	; 0x400
 80022ca:	230a      	movs	r3, #10
 80022cc:	e7e0      	b.n	8002290 <gc_execute_line+0x3f8>
          case 'Y': word_bit = WORD_Y; gc_block.values.xyz[Y_AXIS] = value; axis_words |= (1<<Y_AXIS); break;
 80022ce:	9b06      	ldr	r3, [sp, #24]
 80022d0:	f8c9 b03c 	str.w	fp, [r9, #60]	; 0x3c
 80022d4:	f043 0302 	orr.w	r3, r3, #2
 80022d8:	9306      	str	r3, [sp, #24]
 80022da:	f44f 6500 	mov.w	r5, #2048	; 0x800
 80022de:	230b      	movs	r3, #11
 80022e0:	e7d6      	b.n	8002290 <gc_execute_line+0x3f8>
          case 'Z': word_bit = WORD_Z; gc_block.values.xyz[Z_AXIS] = value; axis_words |= (1<<Z_AXIS); break;
 80022e2:	9b06      	ldr	r3, [sp, #24]
 80022e4:	f8c9 b040 	str.w	fp, [r9, #64]	; 0x40
 80022e8:	f043 0304 	orr.w	r3, r3, #4
 80022ec:	9306      	str	r3, [sp, #24]
 80022ee:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 80022f2:	230c      	movs	r3, #12
 80022f4:	e7cc      	b.n	8002290 <gc_execute_line+0x3f8>
		  case 'A': word_bit = WORD_A; gc_block.values.xyz[A_AXIS] = value; axis_words |= (1<<A_AXIS); break;
 80022f6:	9b06      	ldr	r3, [sp, #24]
 80022f8:	f8c9 b044 	str.w	fp, [r9, #68]	; 0x44
 80022fc:	f043 0308 	orr.w	r3, r3, #8
 8002300:	9306      	str	r3, [sp, #24]
 8002302:	f44f 5500 	mov.w	r5, #8192	; 0x2000
 8002306:	230d      	movs	r3, #13
 8002308:	e7c2      	b.n	8002290 <gc_execute_line+0x3f8>
          case 'F': word_bit = WORD_F; gc_block.values.f = value; break;
 800230a:	2501      	movs	r5, #1
 800230c:	2300      	movs	r3, #0
 800230e:	f8c9 b00c 	str.w	fp, [r9, #12]
        if (bit_istrue(value_words,bit(word_bit))) { FAIL(STATUS_GCODE_WORD_REPEATED); } // [Word repeated]
 8002312:	fa48 f303 	asr.w	r3, r8, r3
 8002316:	07da      	lsls	r2, r3, #31
 8002318:	d4ca      	bmi.n	80022b0 <gc_execute_line+0x418>
          if (value < 0.0) { FAIL(STATUS_NEGATIVE_VALUE); } // [Word value cannot be negative]
 800231a:	4658      	mov	r0, fp
 800231c:	2100      	movs	r1, #0
 800231e:	f7fe fe65 	bl	8000fec <__aeabi_fcmplt>
 8002322:	2800      	cmp	r0, #0
 8002324:	d0b8      	beq.n	8002298 <gc_execute_line+0x400>
 8002326:	2404      	movs	r4, #4
 8002328:	e72e      	b.n	8002188 <gc_execute_line+0x2f0>
          case 'I': word_bit = WORD_I; gc_block.values.ijk[X_AXIS] = value; ijk_words |= (1<<X_AXIS); break;
 800232a:	9b08      	ldr	r3, [sp, #32]
 800232c:	f8c9 b010 	str.w	fp, [r9, #16]
 8002330:	f043 0301 	orr.w	r3, r3, #1
 8002334:	9308      	str	r3, [sp, #32]
 8002336:	2502      	movs	r5, #2
 8002338:	2301      	movs	r3, #1
 800233a:	e7a9      	b.n	8002290 <gc_execute_line+0x3f8>
          case 'J': word_bit = WORD_J; gc_block.values.ijk[Y_AXIS] = value; ijk_words |= (1<<Y_AXIS); break;
 800233c:	9b08      	ldr	r3, [sp, #32]
 800233e:	f8c9 b014 	str.w	fp, [r9, #20]
 8002342:	f043 0302 	orr.w	r3, r3, #2
 8002346:	9308      	str	r3, [sp, #32]
 8002348:	2504      	movs	r5, #4
 800234a:	2302      	movs	r3, #2
 800234c:	e7a0      	b.n	8002290 <gc_execute_line+0x3f8>
          case 'P': word_bit = WORD_P; gc_block.values.p = value; break;
 800234e:	f8c9 b028 	str.w	fp, [r9, #40]	; 0x28
 8002352:	2540      	movs	r5, #64	; 0x40
 8002354:	2306      	movs	r3, #6
 8002356:	e7dc      	b.n	8002312 <gc_execute_line+0x47a>
          case 'R': word_bit = WORD_R; gc_block.values.r = value; break;
 8002358:	f8c9 b02c 	str.w	fp, [r9, #44]	; 0x2c
 800235c:	2580      	movs	r5, #128	; 0x80
 800235e:	2307      	movs	r3, #7
 8002360:	e796      	b.n	8002290 <gc_execute_line+0x3f8>
          case 'S': word_bit = WORD_S; gc_block.values.s = value; break;
 8002362:	f8c9 b030 	str.w	fp, [r9, #48]	; 0x30
 8002366:	f44f 7580 	mov.w	r5, #256	; 0x100
 800236a:	2308      	movs	r3, #8
 800236c:	e7d1      	b.n	8002312 <gc_execute_line+0x47a>
				if (value > MAX_TOOL_NUMBER) { FAIL(STATUS_GCODE_MAX_VALUE_EXCEEDED); }
 800236e:	494d      	ldr	r1, [pc, #308]	; (80024a4 <gc_execute_line+0x60c>)
 8002370:	4658      	mov	r0, fp
 8002372:	f7fe fe59 	bl	8001028 <__aeabi_fcmpgt>
 8002376:	2800      	cmp	r0, #0
 8002378:	f040 821c 	bne.w	80027b4 <gc_execute_line+0x91c>
					gc_block.values.t = int_value;
 800237c:	f889 a034 	strb.w	sl, [r9, #52]	; 0x34
				break;
 8002380:	f44f 7500 	mov.w	r5, #512	; 0x200
 8002384:	2309      	movs	r3, #9
 8002386:	e7c4      	b.n	8002312 <gc_execute_line+0x47a>
          case 'N': word_bit = WORD_N; gc_block.values.n = truncf(value); break;
 8002388:	4658      	mov	r0, fp
 800238a:	f7fe fe6d 	bl	8001068 <__aeabi_f2iz>
 800238e:	2520      	movs	r5, #32
 8002390:	f8c9 0024 	str.w	r0, [r9, #36]	; 0x24
 8002394:	2305      	movs	r3, #5
 8002396:	e7bc      	b.n	8002312 <gc_execute_line+0x47a>
              case 8: gc_block.modal.coolant = COOLANT_FLOOD_ENABLE; break;
 8002398:	2340      	movs	r3, #64	; 0x40
 800239a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800239e:	f889 3009 	strb.w	r3, [r9, #9]
 80023a2:	230d      	movs	r3, #13
 80023a4:	e68d      	b.n	80020c2 <gc_execute_line+0x22a>
              case 4: gc_block.modal.spindle = SPINDLE_ENABLE_CCW; break;
 80023a6:	2320      	movs	r3, #32
 80023a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80023ac:	f889 300a 	strb.w	r3, [r9, #10]
 80023b0:	230c      	movs	r3, #12
 80023b2:	e686      	b.n	80020c2 <gc_execute_line+0x22a>
                case 7: gc_block.modal.coolant = COOLANT_MIST_ENABLE; break;
 80023b4:	2380      	movs	r3, #128	; 0x80
 80023b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023ba:	f889 3009 	strb.w	r3, [r9, #9]
 80023be:	230d      	movs	r3, #13
 80023c0:	e67f      	b.n	80020c2 <gc_execute_line+0x22a>
              case 3: gc_block.modal.spindle = SPINDLE_ENABLE_CW; break;
 80023c2:	2310      	movs	r3, #16
 80023c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80023c8:	f889 300a 	strb.w	r3, [r9, #10]
 80023cc:	230c      	movs	r3, #12
 80023ce:	e678      	b.n	80020c2 <gc_execute_line+0x22a>
              gc_block.modal.motion += (mantissa/10)+100;
 80023d0:	4b35      	ldr	r3, [pc, #212]	; (80024a8 <gc_execute_line+0x610>)
 80023d2:	2101      	movs	r1, #1
 80023d4:	fba3 2302 	umull	r2, r3, r3, r2
 80023d8:	08db      	lsrs	r3, r3, #3
 80023da:	3b76      	subs	r3, #118	; 0x76
 80023dc:	f889 3001 	strb.w	r3, [r9, #1]
            axis_command = AXIS_COMMAND_MOTION_MODE;
 80023e0:	2302      	movs	r3, #2
 80023e2:	9307      	str	r3, [sp, #28]
 80023e4:	e6df      	b.n	80021a6 <gc_execute_line+0x30e>
  if (gc_parser_flags & GC_PARSER_JOG_MOTION) {
 80023e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	f040 808e 	bne.w	800250a <gc_execute_line+0x672>
    if (gc_block.modal.feed_rate == FEED_RATE_MODE_INVERSE_TIME) { // = G93
 80023ee:	f899 3002 	ldrb.w	r3, [r9, #2]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	f000 80d4 	beq.w	80025a0 <gc_execute_line+0x708>
      if (gc_state.modal.feed_rate == FEED_RATE_MODE_UNITS_PER_MIN) { // Last state is also G94
 80023f8:	4b2c      	ldr	r3, [pc, #176]	; (80024ac <gc_execute_line+0x614>)
 80023fa:	785b      	ldrb	r3, [r3, #1]
 80023fc:	b93b      	cbnz	r3, 800240e <gc_execute_line+0x576>
        if (bit_istrue(value_words,bit(WORD_F))) {
 80023fe:	f018 0f01 	tst.w	r8, #1
 8002402:	f040 8092 	bne.w	800252a <gc_execute_line+0x692>
          gc_block.values.f = gc_state.feed_rate; // Push last state feed rate
 8002406:	4b29      	ldr	r3, [pc, #164]	; (80024ac <gc_execute_line+0x614>)
 8002408:	691b      	ldr	r3, [r3, #16]
 800240a:	f8c9 300c 	str.w	r3, [r9, #12]
  if (bit_isfalse(value_words,bit(WORD_S))) { gc_block.values.s = gc_state.spindle_speed; }
 800240e:	f418 7f80 	tst.w	r8, #256	; 0x100
 8002412:	d103      	bne.n	800241c <gc_execute_line+0x584>
 8002414:	4b25      	ldr	r3, [pc, #148]	; (80024ac <gc_execute_line+0x614>)
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	f8c9 3030 	str.w	r3, [r9, #48]	; 0x30
  if (gc_block.non_modal_command == NON_MODAL_DWELL) {
 800241c:	f899 5000 	ldrb.w	r5, [r9]
 8002420:	2d04      	cmp	r5, #4
 8002422:	f000 808f 	beq.w	8002544 <gc_execute_line+0x6ac>
  if (gc_block.non_modal_command == NON_MODAL_G100) {
 8002426:	2d64      	cmp	r5, #100	; 0x64
 8002428:	f000 80a9 	beq.w	800257e <gc_execute_line+0x6e6>
  if (gc_block.non_modal_command == NON_MODAL_G101) {
 800242c:	2d65      	cmp	r5, #101	; 0x65
 800242e:	f000 80c7 	beq.w	80025c0 <gc_execute_line+0x728>
  switch (gc_block.modal.plane_select) {
 8002432:	f899 3005 	ldrb.w	r3, [r9, #5]
 8002436:	2b00      	cmp	r3, #0
 8002438:	f000 80cb 	beq.w	80025d2 <gc_execute_line+0x73a>
 800243c:	2b01      	cmp	r3, #1
 800243e:	f040 80d1 	bne.w	80025e4 <gc_execute_line+0x74c>
 8002442:	2600      	movs	r6, #0
 8002444:	2702      	movs	r7, #2
      axis_linear = Y_AXIS;
 8002446:	930f      	str	r3, [sp, #60]	; 0x3c
  switch (gc_block.modal.plane_select) {
 8002448:	2305      	movs	r3, #5
      axis_1 = X_AXIS;
 800244a:	960e      	str	r6, [sp, #56]	; 0x38
      axis_0 = Z_AXIS;
 800244c:	970d      	str	r7, [sp, #52]	; 0x34
  switch (gc_block.modal.plane_select) {
 800244e:	930c      	str	r3, [sp, #48]	; 0x30
  if (gc_block.modal.units == UNITS_MODE_INCHES) {
 8002450:	f899 3003 	ldrb.w	r3, [r9, #3]
 8002454:	2b01      	cmp	r3, #1
 8002456:	f000 80ce 	beq.w	80025f6 <gc_execute_line+0x75e>
  if (axis_command == AXIS_COMMAND_TOOL_LENGTH_OFFSET ) { // Indicates called in block.
 800245a:	9b07      	ldr	r3, [sp, #28]
 800245c:	2b03      	cmp	r3, #3
 800245e:	f000 80f4 	beq.w	800264a <gc_execute_line+0x7b2>
  memcpy(block_coord_system,gc_state.coord_system,sizeof(gc_state.coord_system));
 8002462:	4b13      	ldr	r3, [pc, #76]	; (80024b0 <gc_execute_line+0x618>)
 8002464:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
 8002468:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800246a:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
  if ( bit_istrue(command_words,bit(MODAL_GROUP_G12)) ) { // Check if called in block
 800246e:	05a3      	lsls	r3, r4, #22
 8002470:	d57a      	bpl.n	8002568 <gc_execute_line+0x6d0>
    if (gc_block.modal.coord_select > N_COORDINATE_SYSTEM) { FAIL(STATUS_GCODE_UNSUPPORTED_COORD_SYS); } // [Greater than N sys]
 8002472:	f899 0007 	ldrb.w	r0, [r9, #7]
 8002476:	2806      	cmp	r0, #6
 8002478:	d96a      	bls.n	8002550 <gc_execute_line+0x6b8>
 800247a:	241d      	movs	r4, #29
 800247c:	e684      	b.n	8002188 <gc_execute_line+0x2f0>
    if((letter < 'A') || (letter > 'Z')) { FAIL(STATUS_EXPECTED_COMMAND_LETTER); } // [Expected word letter]
 800247e:	2401      	movs	r4, #1
}
 8002480:	4620      	mov	r0, r4
 8002482:	b01f      	add	sp, #124	; 0x7c
 8002484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (!read_float(line, &char_counter, &value)) { FAIL(STATUS_BAD_NUMBER_FORMAT); } // [Expected word value]
 8002488:	2402      	movs	r4, #2
}
 800248a:	4620      	mov	r0, r4
 800248c:	b01f      	add	sp, #124	; 0x7c
 800248e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
              case 9: gc_block.modal.coolant = COOLANT_DISABLE; break;
 8002492:	2300      	movs	r3, #0
 8002494:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002498:	f889 3009 	strb.w	r3, [r9, #9]
 800249c:	230d      	movs	r3, #13
 800249e:	e610      	b.n	80020c2 <gc_execute_line+0x22a>
 80024a0:	40100401 	.word	0x40100401
 80024a4:	437f0000 	.word	0x437f0000
 80024a8:	cccccccd 	.word	0xcccccccd
 80024ac:	2000102c 	.word	0x2000102c
 80024b0:	20001058 	.word	0x20001058
              case 5: gc_block.modal.spindle = SPINDLE_DISABLE; break;
 80024b4:	2300      	movs	r3, #0
 80024b6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80024ba:	f889 300a 	strb.w	r3, [r9, #10]
 80024be:	230c      	movs	r3, #12
 80024c0:	e5ff      	b.n	80020c2 <gc_execute_line+0x22a>
              if (!((mantissa == 0) || (mantissa == 10))) { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); }
 80024c2:	b112      	cbz	r2, 80024ca <gc_execute_line+0x632>
 80024c4:	2a0a      	cmp	r2, #10
 80024c6:	f47f ae5e 	bne.w	8002186 <gc_execute_line+0x2ee>
              gc_block.non_modal_command += mantissa;
 80024ca:	4450      	add	r0, sl
 80024cc:	f889 0000 	strb.w	r0, [r9]
 80024d0:	2100      	movs	r1, #0
 80024d2:	e668      	b.n	80021a6 <gc_execute_line+0x30e>
        if ( bit_istrue(command_words,bit(word_bit)) ) { FAIL(STATUS_GCODE_MODAL_GROUP_VIOLATION); }
 80024d4:	2415      	movs	r4, #21
 80024d6:	e657      	b.n	8002188 <gc_execute_line+0x2f0>
              if ((mantissa != 10) || (int_value == 90)) { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); } // [G90.1 not supported]
 80024d8:	2a0a      	cmp	r2, #10
 80024da:	f47f ae54 	bne.w	8002186 <gc_execute_line+0x2ee>
 80024de:	f1ba 0f5a 	cmp.w	sl, #90	; 0x5a
 80024e2:	f43f ae50 	beq.w	8002186 <gc_execute_line+0x2ee>
 80024e6:	2104      	movs	r1, #4
 80024e8:	e65d      	b.n	80021a6 <gc_execute_line+0x30e>
            if ((int_value == 28) || (int_value == 30) || (int_value == 92)) {
 80024ea:	f1ba 0f1c 	cmp.w	sl, #28
            gc_block.non_modal_command = int_value;
 80024ee:	f889 a000 	strb.w	sl, [r9]
            if ((int_value == 28) || (int_value == 30) || (int_value == 92)) {
 80024f2:	d0e7      	beq.n	80024c4 <gc_execute_line+0x62c>
 80024f4:	f1ba 0f1e 	cmp.w	sl, #30
 80024f8:	f47f ae97 	bne.w	800222a <gc_execute_line+0x392>
 80024fc:	e7e2      	b.n	80024c4 <gc_execute_line+0x62c>
        if (mantissa > 0) { FAIL(STATUS_GCODE_COMMAND_VALUE_NOT_INTEGER); } // [Unsupported or invalid Gxx.x command]
 80024fe:	2417      	movs	r4, #23
 8002500:	e642      	b.n	8002188 <gc_execute_line+0x2f0>
            axis_command = AXIS_COMMAND_MOTION_MODE;
 8002502:	2302      	movs	r3, #2
 8002504:	2101      	movs	r1, #1
 8002506:	9307      	str	r3, [sp, #28]
 8002508:	e64a      	b.n	80021a0 <gc_execute_line+0x308>
    if (bit_isfalse(value_words,bit(WORD_F))) { FAIL(STATUS_GCODE_UNDEFINED_FEED_RATE); }
 800250a:	f018 0f01 	tst.w	r8, #1
 800250e:	d10c      	bne.n	800252a <gc_execute_line+0x692>
      if (gc_block.values.f == 0.0f) { FAIL(STATUS_GCODE_UNDEFINED_FEED_RATE); } // [Feed rate undefined]
 8002510:	2416      	movs	r4, #22
 8002512:	e639      	b.n	8002188 <gc_execute_line+0x2f0>
              axis_command = AXIS_COMMAND_NON_MODAL;
 8002514:	2301      	movs	r3, #1
 8002516:	9307      	str	r3, [sp, #28]
 8002518:	e7d7      	b.n	80024ca <gc_execute_line+0x632>
              gc_block.modal.tool_length = TOOL_LENGTH_OFFSET_CANCEL;
 800251a:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800251e:	2108      	movs	r1, #8
 8002520:	f889 3006 	strb.w	r3, [r9, #6]
            axis_command = AXIS_COMMAND_TOOL_LENGTH_OFFSET;
 8002524:	2303      	movs	r3, #3
 8002526:	9307      	str	r3, [sp, #28]
 8002528:	e63d      	b.n	80021a6 <gc_execute_line+0x30e>
    if (gc_block.modal.units == UNITS_MODE_INCHES) { gc_block.values.f *= MM_PER_INCH; }
 800252a:	f899 3003 	ldrb.w	r3, [r9, #3]
 800252e:	2b01      	cmp	r3, #1
 8002530:	f47f af6d 	bne.w	800240e <gc_execute_line+0x576>
 8002534:	f8d9 000c 	ldr.w	r0, [r9, #12]
 8002538:	49b4      	ldr	r1, [pc, #720]	; (800280c <gc_execute_line+0x974>)
 800253a:	f7fe fbb9 	bl	8000cb0 <__aeabi_fmul>
 800253e:	f8c9 000c 	str.w	r0, [r9, #12]
 8002542:	e764      	b.n	800240e <gc_execute_line+0x576>
    if (bit_isfalse(value_words,bit(WORD_P))) { FAIL(STATUS_GCODE_VALUE_WORD_MISSING); } // [P word missing]
 8002544:	f018 0f40 	tst.w	r8, #64	; 0x40
 8002548:	f040 808c 	bne.w	8002664 <gc_execute_line+0x7cc>
 800254c:	241c      	movs	r4, #28
 800254e:	e61b      	b.n	8002188 <gc_execute_line+0x2f0>
    if (gc_state.modal.coord_select != gc_block.modal.coord_select) {
 8002550:	4baf      	ldr	r3, [pc, #700]	; (8002810 <gc_execute_line+0x978>)
 8002552:	799b      	ldrb	r3, [r3, #6]
 8002554:	4283      	cmp	r3, r0
 8002556:	d007      	beq.n	8002568 <gc_execute_line+0x6d0>
      if (!(settings_read_coord_data(gc_block.modal.coord_select,block_coord_system))) { FAIL(STATUS_SETTING_READ_FAIL); }
 8002558:	a91a      	add	r1, sp, #104	; 0x68
 800255a:	f005 fb07 	bl	8007b6c <settings_read_coord_data>
 800255e:	2800      	cmp	r0, #0
 8002560:	f000 8126 	beq.w	80027b0 <gc_execute_line+0x918>
 8002564:	f899 5000 	ldrb.w	r5, [r9]
  switch (gc_block.non_modal_command) {
 8002568:	2d0a      	cmp	r5, #10
 800256a:	f000 80f5 	beq.w	8002758 <gc_execute_line+0x8c0>
 800256e:	2d5c      	cmp	r5, #92	; 0x5c
 8002570:	d17d      	bne.n	800266e <gc_execute_line+0x7d6>
      if (!axis_words) { FAIL(STATUS_GCODE_NO_AXIS_WORDS); } // [No axis words]
 8002572:	9b06      	ldr	r3, [sp, #24]
 8002574:	2b00      	cmp	r3, #0
 8002576:	f040 8183 	bne.w	8002880 <gc_execute_line+0x9e8>
      if (!axis_words) { FAIL(STATUS_GCODE_NO_AXIS_WORDS) }; // [No axis words]
 800257a:	241a      	movs	r4, #26
 800257c:	e604      	b.n	8002188 <gc_execute_line+0x2f0>
    if (bit_isfalse(value_words,bit(WORD_L))) { FAIL(STATUS_GCODE_VALUE_WORD_MISSING); } // [L word missing]
 800257e:	f008 0350 	and.w	r3, r8, #80	; 0x50
 8002582:	2b50      	cmp	r3, #80	; 0x50
 8002584:	d1e2      	bne.n	800254c <gc_execute_line+0x6b4>
    if (bit_isfalse(value_words,bit(WORD_S))) { FAIL(STATUS_GCODE_VALUE_WORD_MISSING); } // [S word missing]
 8002586:	f408 7390 	and.w	r3, r8, #288	; 0x120
 800258a:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 800258e:	d1dd      	bne.n	800254c <gc_execute_line+0x6b4>
    if (bit_isfalse(value_words,bit(WORD_F))) { FAIL(STATUS_GCODE_VALUE_WORD_MISSING); } // [F word missing]
 8002590:	f018 0f01 	tst.w	r8, #1
 8002594:	d0da      	beq.n	800254c <gc_execute_line+0x6b4>
    bit_false(value_words, bit(WORD_F));
 8002596:	f2a3 2392 	subw	r3, r3, #658	; 0x292
 800259a:	ea08 0803 	and.w	r8, r8, r3
 800259e:	e748      	b.n	8002432 <gc_execute_line+0x59a>
      if (axis_command == AXIS_COMMAND_MOTION_MODE) {
 80025a0:	9b07      	ldr	r3, [sp, #28]
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	f47f af33 	bne.w	800240e <gc_execute_line+0x576>
		if ((gc_block.modal.motion != MOTION_MODE_NONE) && (gc_block.modal.motion != MOTION_MODE_SEEK)) {
 80025a8:	f899 3001 	ldrb.w	r3, [r9, #1]
 80025ac:	2b50      	cmp	r3, #80	; 0x50
 80025ae:	f43f af2e 	beq.w	800240e <gc_execute_line+0x576>
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	f43f af2b 	beq.w	800240e <gc_execute_line+0x576>
          if (bit_isfalse(value_words,bit(WORD_F))) { FAIL(STATUS_GCODE_UNDEFINED_FEED_RATE); } // [F word missing]
 80025b8:	f018 0f01 	tst.w	r8, #1
 80025bc:	d0a8      	beq.n	8002510 <gc_execute_line+0x678>
 80025be:	e726      	b.n	800240e <gc_execute_line+0x576>
    if (bit_isfalse(value_words,bit(WORD_R))) { FAIL(STATUS_GCODE_VALUE_WORD_MISSING); } // [R word missing]
 80025c0:	f008 03c0 	and.w	r3, r8, #192	; 0xc0
 80025c4:	2bc0      	cmp	r3, #192	; 0xc0
 80025c6:	d1c1      	bne.n	800254c <gc_execute_line+0x6b4>
    bit_false(value_words, bit(WORD_R));
 80025c8:	f028 08c0 	bic.w	r8, r8, #192	; 0xc0
 80025cc:	fa1f f888 	uxth.w	r8, r8
 80025d0:	e72f      	b.n	8002432 <gc_execute_line+0x59a>
  switch (gc_block.modal.plane_select) {
 80025d2:	461f      	mov	r7, r3
      axis_0 = X_AXIS;
 80025d4:	930d      	str	r3, [sp, #52]	; 0x34
  switch (gc_block.modal.plane_select) {
 80025d6:	2303      	movs	r3, #3
 80025d8:	2601      	movs	r6, #1
 80025da:	930c      	str	r3, [sp, #48]	; 0x30
      axis_linear = Z_AXIS;
 80025dc:	2302      	movs	r3, #2
      axis_1 = Y_AXIS;
 80025de:	960e      	str	r6, [sp, #56]	; 0x38
      axis_linear = Z_AXIS;
 80025e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80025e2:	e735      	b.n	8002450 <gc_execute_line+0x5b8>
 80025e4:	2306      	movs	r3, #6
 80025e6:	2602      	movs	r6, #2
 80025e8:	2701      	movs	r7, #1
 80025ea:	930c      	str	r3, [sp, #48]	; 0x30
      axis_linear = X_AXIS;
 80025ec:	2300      	movs	r3, #0
      axis_1 = Z_AXIS;
 80025ee:	960e      	str	r6, [sp, #56]	; 0x38
      axis_0 = Y_AXIS;
 80025f0:	970d      	str	r7, [sp, #52]	; 0x34
      axis_linear = X_AXIS;
 80025f2:	930f      	str	r3, [sp, #60]	; 0x3c
 80025f4:	e72c      	b.n	8002450 <gc_execute_line+0x5b8>
      if (bit_istrue(axis_words,bit(idx)) ) {
 80025f6:	9b06      	ldr	r3, [sp, #24]
 80025f8:	07da      	lsls	r2, r3, #31
 80025fa:	d507      	bpl.n	800260c <gc_execute_line+0x774>
        gc_block.values.xyz[idx] *= MM_PER_INCH;
 80025fc:	f8d9 0038 	ldr.w	r0, [r9, #56]	; 0x38
 8002600:	4982      	ldr	r1, [pc, #520]	; (800280c <gc_execute_line+0x974>)
 8002602:	f7fe fb55 	bl	8000cb0 <__aeabi_fmul>
 8002606:	9b06      	ldr	r3, [sp, #24]
 8002608:	f8c9 0038 	str.w	r0, [r9, #56]	; 0x38
      if (bit_istrue(axis_words,bit(idx)) ) {
 800260c:	0798      	lsls	r0, r3, #30
 800260e:	d507      	bpl.n	8002620 <gc_execute_line+0x788>
        gc_block.values.xyz[idx] *= MM_PER_INCH;
 8002610:	f8d9 003c 	ldr.w	r0, [r9, #60]	; 0x3c
 8002614:	497d      	ldr	r1, [pc, #500]	; (800280c <gc_execute_line+0x974>)
 8002616:	f7fe fb4b 	bl	8000cb0 <__aeabi_fmul>
 800261a:	9b06      	ldr	r3, [sp, #24]
 800261c:	f8c9 003c 	str.w	r0, [r9, #60]	; 0x3c
      if (bit_istrue(axis_words,bit(idx)) ) {
 8002620:	0759      	lsls	r1, r3, #29
 8002622:	d507      	bpl.n	8002634 <gc_execute_line+0x79c>
        gc_block.values.xyz[idx] *= MM_PER_INCH;
 8002624:	f8d9 0040 	ldr.w	r0, [r9, #64]	; 0x40
 8002628:	4978      	ldr	r1, [pc, #480]	; (800280c <gc_execute_line+0x974>)
 800262a:	f7fe fb41 	bl	8000cb0 <__aeabi_fmul>
 800262e:	9b06      	ldr	r3, [sp, #24]
 8002630:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
      if (bit_istrue(axis_words,bit(idx)) ) {
 8002634:	071a      	lsls	r2, r3, #28
 8002636:	f57f af10 	bpl.w	800245a <gc_execute_line+0x5c2>
        gc_block.values.xyz[idx] *= MM_PER_INCH;
 800263a:	f8d9 0044 	ldr.w	r0, [r9, #68]	; 0x44
 800263e:	4973      	ldr	r1, [pc, #460]	; (800280c <gc_execute_line+0x974>)
 8002640:	f7fe fb36 	bl	8000cb0 <__aeabi_fmul>
 8002644:	f8c9 0044 	str.w	r0, [r9, #68]	; 0x44
 8002648:	e707      	b.n	800245a <gc_execute_line+0x5c2>
    if (gc_block.modal.tool_length == TOOL_LENGTH_OFFSET_ENABLE_DYNAMIC) {
 800264a:	f899 3006 	ldrb.w	r3, [r9, #6]
 800264e:	2b01      	cmp	r3, #1
 8002650:	f47f af07 	bne.w	8002462 <gc_execute_line+0x5ca>
      if (axis_words ^ (1<<TOOL_LENGTH_OFFSET_AXIS)) { FAIL(STATUS_GCODE_G43_DYNAMIC_AXIS_ERROR); }
 8002654:	9b06      	ldr	r3, [sp, #24]
 8002656:	2b04      	cmp	r3, #4
 8002658:	f43f af03 	beq.w	8002462 <gc_execute_line+0x5ca>
 800265c:	2425      	movs	r4, #37	; 0x25
 800265e:	e593      	b.n	8002188 <gc_execute_line+0x2f0>
              if (axis_command) { FAIL(STATUS_GCODE_AXIS_COMMAND_CONFLICT); } // [Axis word/command conflict]
 8002660:	2418      	movs	r4, #24
 8002662:	e591      	b.n	8002188 <gc_execute_line+0x2f0>
    bit_false(value_words,bit(WORD_P));
 8002664:	f028 0840 	bic.w	r8, r8, #64	; 0x40
 8002668:	fa1f f888 	uxth.w	r8, r8
 800266c:	e6e1      	b.n	8002432 <gc_execute_line+0x59a>
      if (axis_command != AXIS_COMMAND_TOOL_LENGTH_OFFSET ) { // TLO block any axis command.
 800266e:	9b07      	ldr	r3, [sp, #28]
 8002670:	2b03      	cmp	r3, #3
 8002672:	d04c      	beq.n	800270e <gc_execute_line+0x876>
        if (axis_words) {
 8002674:	9a06      	ldr	r2, [sp, #24]
 8002676:	2a00      	cmp	r2, #0
 8002678:	d049      	beq.n	800270e <gc_execute_line+0x876>
                  if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.xyz[idx] += gc_state.tool_length_offset; }
 800267a:	4965      	ldr	r1, [pc, #404]	; (8002810 <gc_execute_line+0x978>)
 800267c:	f899 3004 	ldrb.w	r3, [r9, #4]
 8002680:	f8d1 a04c 	ldr.w	sl, [r1, #76]	; 0x4c
 8002684:	2b00      	cmp	r3, #0
 8002686:	f040 80c9 	bne.w	800281c <gc_execute_line+0x984>
 800268a:	2d35      	cmp	r5, #53	; 0x35
 800268c:	4613      	mov	r3, r2
 800268e:	f000 8097 	beq.w	80027c0 <gc_execute_line+0x928>
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 8002692:	07d0      	lsls	r0, r2, #31
 8002694:	f140 8158 	bpl.w	8002948 <gc_execute_line+0xab0>
                  gc_block.values.xyz[idx] += block_coord_system[idx] + gc_state.coord_offset[idx];
 8002698:	f8d9 1038 	ldr.w	r1, [r9, #56]	; 0x38
 800269c:	981a      	ldr	r0, [sp, #104]	; 0x68
 800269e:	f7fe f9ff 	bl	8000aa0 <__addsf3>
 80026a2:	4b5b      	ldr	r3, [pc, #364]	; (8002810 <gc_execute_line+0x978>)
 80026a4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80026a6:	f7fe f9fb 	bl	8000aa0 <__addsf3>
 80026aa:	9b06      	ldr	r3, [sp, #24]
 80026ac:	f8c9 0038 	str.w	r0, [r9, #56]	; 0x38
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 80026b0:	0799      	lsls	r1, r3, #30
 80026b2:	f140 8144 	bpl.w	800293e <gc_execute_line+0xaa6>
                  gc_block.values.xyz[idx] += block_coord_system[idx] + gc_state.coord_offset[idx];
 80026b6:	f8d9 103c 	ldr.w	r1, [r9, #60]	; 0x3c
 80026ba:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80026bc:	f7fe f9f0 	bl	8000aa0 <__addsf3>
 80026c0:	4b53      	ldr	r3, [pc, #332]	; (8002810 <gc_execute_line+0x978>)
 80026c2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80026c4:	f7fe f9ec 	bl	8000aa0 <__addsf3>
 80026c8:	f8c9 003c 	str.w	r0, [r9, #60]	; 0x3c
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 80026cc:	9b06      	ldr	r3, [sp, #24]
 80026ce:	075a      	lsls	r2, r3, #29
 80026d0:	f140 812b 	bpl.w	800292a <gc_execute_line+0xa92>
                  gc_block.values.xyz[idx] += block_coord_system[idx] + gc_state.coord_offset[idx];
 80026d4:	f8d9 1040 	ldr.w	r1, [r9, #64]	; 0x40
 80026d8:	981c      	ldr	r0, [sp, #112]	; 0x70
 80026da:	f7fe f9e1 	bl	8000aa0 <__addsf3>
 80026de:	4b4c      	ldr	r3, [pc, #304]	; (8002810 <gc_execute_line+0x978>)
 80026e0:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80026e2:	f7fe f9dd 	bl	8000aa0 <__addsf3>
                  if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.xyz[idx] += gc_state.tool_length_offset; }
 80026e6:	4651      	mov	r1, sl
 80026e8:	f7fe f9da 	bl	8000aa0 <__addsf3>
 80026ec:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 80026f0:	9b06      	ldr	r3, [sp, #24]
 80026f2:	071b      	lsls	r3, r3, #28
 80026f4:	f140 8085 	bpl.w	8002802 <gc_execute_line+0x96a>
                  gc_block.values.xyz[idx] += block_coord_system[idx] + gc_state.coord_offset[idx];
 80026f8:	991d      	ldr	r1, [sp, #116]	; 0x74
 80026fa:	f8d9 0044 	ldr.w	r0, [r9, #68]	; 0x44
 80026fe:	f7fe f9cf 	bl	8000aa0 <__addsf3>
 8002702:	4b43      	ldr	r3, [pc, #268]	; (8002810 <gc_execute_line+0x978>)
 8002704:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8002706:	f7fe f9cb 	bl	8000aa0 <__addsf3>
 800270a:	f8c9 0044 	str.w	r0, [r9, #68]	; 0x44
      switch (gc_block.non_modal_command) {
 800270e:	2d1e      	cmp	r5, #30
 8002710:	f000 816e 	beq.w	80029f0 <gc_execute_line+0xb58>
 8002714:	2d35      	cmp	r5, #53	; 0x35
 8002716:	d06e      	beq.n	80027f6 <gc_execute_line+0x95e>
 8002718:	2d1c      	cmp	r5, #28
 800271a:	f000 8121 	beq.w	8002960 <gc_execute_line+0xac8>
  if (gc_block.modal.motion == MOTION_MODE_NONE) {
 800271e:	f899 5001 	ldrb.w	r5, [r9, #1]
 8002722:	2d50      	cmp	r5, #80	; 0x50
 8002724:	f000 8116 	beq.w	8002954 <gc_execute_line+0xabc>
 8002728:	f04f 0a00 	mov.w	sl, #0
  } else if ( axis_command == AXIS_COMMAND_MOTION_MODE ) {
 800272c:	9b07      	ldr	r3, [sp, #28]
 800272e:	2b02      	cmp	r3, #2
 8002730:	f000 8124 	beq.w	800297c <gc_execute_line+0xae4>
      switch (gc_block.modal.motion) {
 8002734:	9a09      	ldr	r2, [sp, #36]	; 0x24
  if (gc_parser_flags & GC_PARSER_JOG_MOTION) {
 8002736:	2a00      	cmp	r2, #0
 8002738:	d03e      	beq.n	80027b8 <gc_execute_line+0x920>
      bit_false(value_words, (bit(WORD_N) | bit(WORD_F)));
 800273a:	f028 0821 	bic.w	r8, r8, #33	; 0x21
 800273e:	fa1f f388 	uxth.w	r3, r8
  if (axis_command) { bit_false(value_words,(bit(WORD_X)|bit(WORD_Y)|bit(WORD_Z)|bit(WORD_A))); } // Remove axis words.
 8002742:	9907      	ldr	r1, [sp, #28]
 8002744:	b119      	cbz	r1, 800274e <gc_execute_line+0x8b6>
 8002746:	f423 5870 	bic.w	r8, r3, #15360	; 0x3c00
 800274a:	fa1f f388 	uxth.w	r3, r8
  if (value_words) { FAIL(STATUS_GCODE_UNUSED_WORDS); } // [Unused words]
 800274e:	2b00      	cmp	r3, #0
 8002750:	f000 8133 	beq.w	80029ba <gc_execute_line+0xb22>
 8002754:	2424      	movs	r4, #36	; 0x24
 8002756:	e517      	b.n	8002188 <gc_execute_line+0x2f0>
      if (!axis_words) { FAIL(STATUS_GCODE_NO_AXIS_WORDS) }; // [No axis words]
 8002758:	9b06      	ldr	r3, [sp, #24]
 800275a:	2b00      	cmp	r3, #0
 800275c:	f43f af0d 	beq.w	800257a <gc_execute_line+0x6e2>
      if (bit_isfalse(value_words,((1<<WORD_P)|(1<<WORD_L)))) { FAIL(STATUS_GCODE_VALUE_WORD_MISSING); } // [P/L word missing]
 8002760:	f018 0f50 	tst.w	r8, #80	; 0x50
 8002764:	f43f aef2 	beq.w	800254c <gc_execute_line+0x6b4>
      coord_select = truncf(gc_block.values.p); // Convert p value to int.
 8002768:	f8d9 0028 	ldr.w	r0, [r9, #40]	; 0x28
 800276c:	f7fe fca2 	bl	80010b4 <__aeabi_f2uiz>
 8002770:	b2c0      	uxtb	r0, r0
      if (coord_select > N_COORDINATE_SYSTEM) { FAIL(STATUS_GCODE_UNSUPPORTED_COORD_SYS); } // [Greater than N sys]
 8002772:	2806      	cmp	r0, #6
 8002774:	f63f ae81 	bhi.w	800247a <gc_execute_line+0x5e2>
      if (gc_block.values.l != 20) {
 8002778:	f899 3020 	ldrb.w	r3, [r9, #32]
 800277c:	2b14      	cmp	r3, #20
 800277e:	d006      	beq.n	800278e <gc_execute_line+0x8f6>
        if (gc_block.values.l == 2) {
 8002780:	2b02      	cmp	r3, #2
 8002782:	f47f ad00 	bne.w	8002186 <gc_execute_line+0x2ee>
          if (bit_istrue(value_words,bit(WORD_R))) { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); } // [G10 L2 R not supported]
 8002786:	f018 0f80 	tst.w	r8, #128	; 0x80
 800278a:	f47f acfc 	bne.w	8002186 <gc_execute_line+0x2ee>
      bit_false(value_words,(bit(WORD_L)|bit(WORD_P)));
 800278e:	f028 0850 	bic.w	r8, r8, #80	; 0x50
 8002792:	fa1f f888 	uxth.w	r8, r8
      if (coord_select > 0) { coord_select--; } // Adjust P1-P6 index to EEPROM coordinate data indexing.
 8002796:	2800      	cmp	r0, #0
 8002798:	f000 836f 	beq.w	8002e7a <gc_execute_line+0xfe2>
 800279c:	3801      	subs	r0, #1
 800279e:	fa5f fa80 	uxtb.w	sl, r0
      if (!settings_read_coord_data(coord_select,gc_block.values.ijk)) { FAIL(STATUS_SETTING_READ_FAIL); } // [EEPROM read fail]
 80027a2:	491c      	ldr	r1, [pc, #112]	; (8002814 <gc_execute_line+0x97c>)
 80027a4:	4650      	mov	r0, sl
 80027a6:	f005 f9e1 	bl	8007b6c <settings_read_coord_data>
 80027aa:	2800      	cmp	r0, #0
 80027ac:	f040 8342 	bne.w	8002e34 <gc_execute_line+0xf9c>
        if (!(settings_read_coord_data(gc_state.modal.coord_select,gc_state.coord_system))) { FAIL(STATUS_SETTING_READ_FAIL); }
 80027b0:	2407      	movs	r4, #7
 80027b2:	e4e9      	b.n	8002188 <gc_execute_line+0x2f0>
				if (value > MAX_TOOL_NUMBER) { FAIL(STATUS_GCODE_MAX_VALUE_EXCEEDED); }
 80027b4:	2426      	movs	r4, #38	; 0x26
 80027b6:	e4e7      	b.n	8002188 <gc_execute_line+0x2f0>
      bit_false(value_words, (bit(WORD_N) | bit(WORD_F) | bit(WORD_S) | bit(WORD_T))); // Remove single-meaning value words.
 80027b8:	4b17      	ldr	r3, [pc, #92]	; (8002818 <gc_execute_line+0x980>)
 80027ba:	ea08 0303 	and.w	r3, r8, r3
 80027be:	e7c0      	b.n	8002742 <gc_execute_line+0x8aa>
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 80027c0:	07d8      	lsls	r0, r3, #31
 80027c2:	d404      	bmi.n	80027ce <gc_execute_line+0x936>
              gc_block.values.xyz[idx] = gc_state.position[idx]; // No axis word in block. Keep same axis position.
 80027c4:	4b12      	ldr	r3, [pc, #72]	; (8002810 <gc_execute_line+0x978>)
 80027c6:	69db      	ldr	r3, [r3, #28]
 80027c8:	f8c9 3038 	str.w	r3, [r9, #56]	; 0x38
 80027cc:	9b06      	ldr	r3, [sp, #24]
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 80027ce:	0799      	lsls	r1, r3, #30
 80027d0:	d404      	bmi.n	80027dc <gc_execute_line+0x944>
              gc_block.values.xyz[idx] = gc_state.position[idx]; // No axis word in block. Keep same axis position.
 80027d2:	4b0f      	ldr	r3, [pc, #60]	; (8002810 <gc_execute_line+0x978>)
 80027d4:	6a1b      	ldr	r3, [r3, #32]
 80027d6:	f8c9 303c 	str.w	r3, [r9, #60]	; 0x3c
 80027da:	9b06      	ldr	r3, [sp, #24]
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 80027dc:	075a      	lsls	r2, r3, #29
 80027de:	d404      	bmi.n	80027ea <gc_execute_line+0x952>
              gc_block.values.xyz[idx] = gc_state.position[idx]; // No axis word in block. Keep same axis position.
 80027e0:	4b0b      	ldr	r3, [pc, #44]	; (8002810 <gc_execute_line+0x978>)
 80027e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e4:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
 80027e8:	9b06      	ldr	r3, [sp, #24]
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 80027ea:	071d      	lsls	r5, r3, #28
 80027ec:	d403      	bmi.n	80027f6 <gc_execute_line+0x95e>
              gc_block.values.xyz[idx] = gc_state.position[idx]; // No axis word in block. Keep same axis position.
 80027ee:	4b08      	ldr	r3, [pc, #32]	; (8002810 <gc_execute_line+0x978>)
 80027f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f2:	f8c9 3044 	str.w	r3, [r9, #68]	; 0x44
          if (!(gc_block.modal.motion == MOTION_MODE_SEEK || gc_block.modal.motion == MOTION_MODE_LINEAR)) {
 80027f6:	f899 3001 	ldrb.w	r3, [r9, #1]
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d98f      	bls.n	800271e <gc_execute_line+0x886>
            FAIL(STATUS_GCODE_G53_INVALID_MOTION_MODE); // [G53 G0/1 not active]
 80027fe:	241e      	movs	r4, #30
 8002800:	e4c2      	b.n	8002188 <gc_execute_line+0x2f0>
              gc_block.values.xyz[idx] = gc_state.position[idx]; // No axis word in block. Keep same axis position.
 8002802:	4b03      	ldr	r3, [pc, #12]	; (8002810 <gc_execute_line+0x978>)
 8002804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002806:	f8c9 3044 	str.w	r3, [r9, #68]	; 0x44
 800280a:	e780      	b.n	800270e <gc_execute_line+0x876>
 800280c:	41cb3333 	.word	0x41cb3333
 8002810:	2000102c 	.word	0x2000102c
 8002814:	2000108c 	.word	0x2000108c
 8002818:	fffffcde 	.word	0xfffffcde
 800281c:	2d35      	cmp	r5, #53	; 0x35
 800281e:	4613      	mov	r3, r2
 8002820:	d0ce      	beq.n	80027c0 <gc_execute_line+0x928>
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 8002822:	07d0      	lsls	r0, r2, #31
 8002824:	f140 80df 	bpl.w	80029e6 <gc_execute_line+0xb4e>
                  gc_block.values.xyz[idx] += gc_state.position[idx];
 8002828:	4b93      	ldr	r3, [pc, #588]	; (8002a78 <gc_execute_line+0xbe0>)
 800282a:	f8d9 1038 	ldr.w	r1, [r9, #56]	; 0x38
 800282e:	69d8      	ldr	r0, [r3, #28]
 8002830:	f7fe f936 	bl	8000aa0 <__addsf3>
 8002834:	f8c9 0038 	str.w	r0, [r9, #56]	; 0x38
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 8002838:	9b06      	ldr	r3, [sp, #24]
 800283a:	0799      	lsls	r1, r3, #30
 800283c:	f140 80ce 	bpl.w	80029dc <gc_execute_line+0xb44>
                  gc_block.values.xyz[idx] += gc_state.position[idx];
 8002840:	4b8d      	ldr	r3, [pc, #564]	; (8002a78 <gc_execute_line+0xbe0>)
 8002842:	f8d9 103c 	ldr.w	r1, [r9, #60]	; 0x3c
 8002846:	6a18      	ldr	r0, [r3, #32]
 8002848:	f7fe f92a 	bl	8000aa0 <__addsf3>
 800284c:	f8c9 003c 	str.w	r0, [r9, #60]	; 0x3c
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 8002850:	9b06      	ldr	r3, [sp, #24]
 8002852:	075a      	lsls	r2, r3, #29
 8002854:	f140 80bd 	bpl.w	80029d2 <gc_execute_line+0xb3a>
                  gc_block.values.xyz[idx] += gc_state.position[idx];
 8002858:	4b87      	ldr	r3, [pc, #540]	; (8002a78 <gc_execute_line+0xbe0>)
 800285a:	f8d9 1040 	ldr.w	r1, [r9, #64]	; 0x40
 800285e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002860:	f7fe f91e 	bl	8000aa0 <__addsf3>
 8002864:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 8002868:	9b06      	ldr	r3, [sp, #24]
 800286a:	071b      	lsls	r3, r3, #28
 800286c:	d5c9      	bpl.n	8002802 <gc_execute_line+0x96a>
                  gc_block.values.xyz[idx] += gc_state.position[idx];
 800286e:	4b82      	ldr	r3, [pc, #520]	; (8002a78 <gc_execute_line+0xbe0>)
 8002870:	f8d9 0044 	ldr.w	r0, [r9, #68]	; 0x44
 8002874:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002876:	f7fe f913 	bl	8000aa0 <__addsf3>
 800287a:	f8c9 0044 	str.w	r0, [r9, #68]	; 0x44
 800287e:	e746      	b.n	800270e <gc_execute_line+0x876>
          if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.xyz[idx] -= gc_state.tool_length_offset; }
 8002880:	4b7d      	ldr	r3, [pc, #500]	; (8002a78 <gc_execute_line+0xbe0>)
 8002882:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
        if (bit_istrue(axis_words,bit(idx)) ) {
 8002884:	9b06      	ldr	r3, [sp, #24]
 8002886:	07d9      	lsls	r1, r3, #31
 8002888:	d54a      	bpl.n	8002920 <gc_execute_line+0xa88>
          gc_block.values.xyz[idx] = gc_state.position[idx]-block_coord_system[idx]-gc_block.values.xyz[idx];
 800288a:	4b7b      	ldr	r3, [pc, #492]	; (8002a78 <gc_execute_line+0xbe0>)
 800288c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800288e:	69d8      	ldr	r0, [r3, #28]
 8002890:	f7fe f904 	bl	8000a9c <__aeabi_fsub>
 8002894:	f8d9 1038 	ldr.w	r1, [r9, #56]	; 0x38
 8002898:	f7fe f900 	bl	8000a9c <__aeabi_fsub>
 800289c:	f8c9 0038 	str.w	r0, [r9, #56]	; 0x38
        if (bit_istrue(axis_words,bit(idx)) ) {
 80028a0:	9b06      	ldr	r3, [sp, #24]
 80028a2:	079a      	lsls	r2, r3, #30
 80028a4:	d537      	bpl.n	8002916 <gc_execute_line+0xa7e>
          gc_block.values.xyz[idx] = gc_state.position[idx]-block_coord_system[idx]-gc_block.values.xyz[idx];
 80028a6:	4b74      	ldr	r3, [pc, #464]	; (8002a78 <gc_execute_line+0xbe0>)
 80028a8:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80028aa:	6a18      	ldr	r0, [r3, #32]
 80028ac:	f7fe f8f6 	bl	8000a9c <__aeabi_fsub>
 80028b0:	f8d9 103c 	ldr.w	r1, [r9, #60]	; 0x3c
 80028b4:	f7fe f8f2 	bl	8000a9c <__aeabi_fsub>
 80028b8:	f8c9 003c 	str.w	r0, [r9, #60]	; 0x3c
        if (bit_istrue(axis_words,bit(idx)) ) {
 80028bc:	9b06      	ldr	r3, [sp, #24]
 80028be:	075b      	lsls	r3, r3, #29
 80028c0:	d524      	bpl.n	800290c <gc_execute_line+0xa74>
          gc_block.values.xyz[idx] = gc_state.position[idx]-block_coord_system[idx]-gc_block.values.xyz[idx];
 80028c2:	4b6d      	ldr	r3, [pc, #436]	; (8002a78 <gc_execute_line+0xbe0>)
 80028c4:	991c      	ldr	r1, [sp, #112]	; 0x70
 80028c6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80028c8:	f7fe f8e8 	bl	8000a9c <__aeabi_fsub>
 80028cc:	f8d9 1040 	ldr.w	r1, [r9, #64]	; 0x40
 80028d0:	f7fe f8e4 	bl	8000a9c <__aeabi_fsub>
          if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.xyz[idx] -= gc_state.tool_length_offset; }
 80028d4:	4629      	mov	r1, r5
 80028d6:	f7fe f8e1 	bl	8000a9c <__aeabi_fsub>
 80028da:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
        if (bit_istrue(axis_words,bit(idx)) ) {
 80028de:	9b06      	ldr	r3, [sp, #24]
 80028e0:	071d      	lsls	r5, r3, #28
 80028e2:	d527      	bpl.n	8002934 <gc_execute_line+0xa9c>
          gc_block.values.xyz[idx] = gc_state.position[idx]-block_coord_system[idx]-gc_block.values.xyz[idx];
 80028e4:	4b64      	ldr	r3, [pc, #400]	; (8002a78 <gc_execute_line+0xbe0>)
 80028e6:	991d      	ldr	r1, [sp, #116]	; 0x74
 80028e8:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80028ea:	f7fe f8d7 	bl	8000a9c <__aeabi_fsub>
 80028ee:	f8d9 1044 	ldr.w	r1, [r9, #68]	; 0x44
 80028f2:	f7fe f8d3 	bl	8000a9c <__aeabi_fsub>
 80028f6:	f8c9 0044 	str.w	r0, [r9, #68]	; 0x44
  uint8_t coord_select = 0; // Tracks G10 P coordinate selection for execution
 80028fa:	f04f 0a00 	mov.w	sl, #0
  if (gc_block.modal.motion == MOTION_MODE_NONE) {
 80028fe:	f899 5001 	ldrb.w	r5, [r9, #1]
 8002902:	2d50      	cmp	r5, #80	; 0x50
 8002904:	f47f af12 	bne.w	800272c <gc_execute_line+0x894>
    if (axis_words) { FAIL(STATUS_GCODE_AXIS_WORDS_EXIST); } // [No axis words allowed]
 8002908:	241f      	movs	r4, #31
 800290a:	e43d      	b.n	8002188 <gc_execute_line+0x2f0>
          gc_block.values.xyz[idx] = gc_state.coord_offset[idx];
 800290c:	4b5a      	ldr	r3, [pc, #360]	; (8002a78 <gc_execute_line+0xbe0>)
 800290e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002910:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
 8002914:	e7e3      	b.n	80028de <gc_execute_line+0xa46>
 8002916:	4b58      	ldr	r3, [pc, #352]	; (8002a78 <gc_execute_line+0xbe0>)
 8002918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291a:	f8c9 303c 	str.w	r3, [r9, #60]	; 0x3c
 800291e:	e7cd      	b.n	80028bc <gc_execute_line+0xa24>
 8002920:	4b55      	ldr	r3, [pc, #340]	; (8002a78 <gc_execute_line+0xbe0>)
 8002922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002924:	f8c9 3038 	str.w	r3, [r9, #56]	; 0x38
 8002928:	e7ba      	b.n	80028a0 <gc_execute_line+0xa08>
              gc_block.values.xyz[idx] = gc_state.position[idx]; // No axis word in block. Keep same axis position.
 800292a:	4b53      	ldr	r3, [pc, #332]	; (8002a78 <gc_execute_line+0xbe0>)
 800292c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292e:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
 8002932:	e6dd      	b.n	80026f0 <gc_execute_line+0x858>
          gc_block.values.xyz[idx] = gc_state.coord_offset[idx];
 8002934:	4b50      	ldr	r3, [pc, #320]	; (8002a78 <gc_execute_line+0xbe0>)
 8002936:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002938:	f8c9 3044 	str.w	r3, [r9, #68]	; 0x44
 800293c:	e7dd      	b.n	80028fa <gc_execute_line+0xa62>
              gc_block.values.xyz[idx] = gc_state.position[idx]; // No axis word in block. Keep same axis position.
 800293e:	4b4e      	ldr	r3, [pc, #312]	; (8002a78 <gc_execute_line+0xbe0>)
 8002940:	6a1b      	ldr	r3, [r3, #32]
 8002942:	f8c9 303c 	str.w	r3, [r9, #60]	; 0x3c
 8002946:	e6c1      	b.n	80026cc <gc_execute_line+0x834>
 8002948:	4b4b      	ldr	r3, [pc, #300]	; (8002a78 <gc_execute_line+0xbe0>)
 800294a:	69db      	ldr	r3, [r3, #28]
 800294c:	f8c9 3038 	str.w	r3, [r9, #56]	; 0x38
 8002950:	4613      	mov	r3, r2
 8002952:	e6ad      	b.n	80026b0 <gc_execute_line+0x818>
    if (axis_words) { FAIL(STATUS_GCODE_AXIS_WORDS_EXIST); } // [No axis words allowed]
 8002954:	9b06      	ldr	r3, [sp, #24]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d1d6      	bne.n	8002908 <gc_execute_line+0xa70>
 800295a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800295c:	469a      	mov	sl, r3
 800295e:	e6ea      	b.n	8002736 <gc_execute_line+0x89e>
            if (!settings_read_coord_data(SETTING_INDEX_G28,gc_block.values.ijk)) { FAIL(STATUS_SETTING_READ_FAIL); }
 8002960:	4946      	ldr	r1, [pc, #280]	; (8002a7c <gc_execute_line+0xbe4>)
 8002962:	2006      	movs	r0, #6
 8002964:	f005 f902 	bl	8007b6c <settings_read_coord_data>
 8002968:	2800      	cmp	r0, #0
 800296a:	f43f af21 	beq.w	80027b0 <gc_execute_line+0x918>
          if (axis_words) {
 800296e:	9b06      	ldr	r3, [sp, #24]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d145      	bne.n	8002a00 <gc_execute_line+0xb68>
 8002974:	9a09      	ldr	r2, [sp, #36]	; 0x24
  uint8_t coord_select = 0; // Tracks G10 P coordinate selection for execution
 8002976:	469a      	mov	sl, r3
            axis_command = AXIS_COMMAND_NONE; // Set to none if no intermediate motion.
 8002978:	9307      	str	r3, [sp, #28]
 800297a:	e6dc      	b.n	8002736 <gc_execute_line+0x89e>
    if (gc_block.modal.motion == MOTION_MODE_SEEK) {
 800297c:	b1ad      	cbz	r5, 80029aa <gc_execute_line+0xb12>
      if (gc_block.values.f == 0.0f) { FAIL(STATUS_GCODE_UNDEFINED_FEED_RATE); } // [Feed rate undefined]
 800297e:	2100      	movs	r1, #0
 8002980:	f8d9 000c 	ldr.w	r0, [r9, #12]
 8002984:	f7fe fb28 	bl	8000fd8 <__aeabi_fcmpeq>
 8002988:	2800      	cmp	r0, #0
 800298a:	f47f adc1 	bne.w	8002510 <gc_execute_line+0x678>
      switch (gc_block.modal.motion) {
 800298e:	2d8c      	cmp	r5, #140	; 0x8c
 8002990:	f000 8292 	beq.w	8002eb8 <gc_execute_line+0x1020>
 8002994:	f200 8288 	bhi.w	8002ea8 <gc_execute_line+0x1010>
 8002998:	2d02      	cmp	r5, #2
 800299a:	f000 8219 	beq.w	8002dd0 <gc_execute_line+0xf38>
 800299e:	2d03      	cmp	r5, #3
 80029a0:	f000 8218 	beq.w	8002dd4 <gc_execute_line+0xf3c>
 80029a4:	2d01      	cmp	r5, #1
 80029a6:	f47f aec5 	bne.w	8002734 <gc_execute_line+0x89c>
          if (!axis_words) { axis_command = AXIS_COMMAND_NONE; }
 80029aa:	9b06      	ldr	r3, [sp, #24]
 80029ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	9b07      	ldr	r3, [sp, #28]
 80029b2:	bf08      	it	eq
 80029b4:	2300      	moveq	r3, #0
 80029b6:	9307      	str	r3, [sp, #28]
 80029b8:	e6bd      	b.n	8002736 <gc_execute_line+0x89e>
  memset(pl_data,0,sizeof(plan_line_data_t)); // Zero pl_data struct
 80029ba:	9317      	str	r3, [sp, #92]	; 0x5c
 80029bc:	9318      	str	r3, [sp, #96]	; 0x60
 80029be:	9319      	str	r3, [sp, #100]	; 0x64
  if (gc_parser_flags & GC_PARSER_JOG_MOTION) {
 80029c0:	2a00      	cmp	r2, #0
 80029c2:	d063      	beq.n	8002a8c <gc_execute_line+0xbf4>
      if (command_words & ~(bit(MODAL_GROUP_G3) | bit(MODAL_GROUP_G6 | bit(MODAL_GROUP_G0)))) { FAIL(STATUS_INVALID_JOG_COMMAND) };
 80029c4:	f024 0449 	bic.w	r4, r4, #73	; 0x49
 80029c8:	2c00      	cmp	r4, #0
 80029ca:	d036      	beq.n	8002a3a <gc_execute_line+0xba2>
 80029cc:	2410      	movs	r4, #16
 80029ce:	f7ff bbdb 	b.w	8002188 <gc_execute_line+0x2f0>
              gc_block.values.xyz[idx] = gc_state.position[idx]; // No axis word in block. Keep same axis position.
 80029d2:	4b29      	ldr	r3, [pc, #164]	; (8002a78 <gc_execute_line+0xbe0>)
 80029d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d6:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
 80029da:	e745      	b.n	8002868 <gc_execute_line+0x9d0>
 80029dc:	4b26      	ldr	r3, [pc, #152]	; (8002a78 <gc_execute_line+0xbe0>)
 80029de:	6a1b      	ldr	r3, [r3, #32]
 80029e0:	f8c9 303c 	str.w	r3, [r9, #60]	; 0x3c
 80029e4:	e734      	b.n	8002850 <gc_execute_line+0x9b8>
 80029e6:	4b24      	ldr	r3, [pc, #144]	; (8002a78 <gc_execute_line+0xbe0>)
 80029e8:	69db      	ldr	r3, [r3, #28]
 80029ea:	f8c9 3038 	str.w	r3, [r9, #56]	; 0x38
 80029ee:	e723      	b.n	8002838 <gc_execute_line+0x9a0>
            if (!settings_read_coord_data(SETTING_INDEX_G30,gc_block.values.ijk)) { FAIL(STATUS_SETTING_READ_FAIL); }
 80029f0:	4922      	ldr	r1, [pc, #136]	; (8002a7c <gc_execute_line+0xbe4>)
 80029f2:	2007      	movs	r0, #7
 80029f4:	f005 f8ba 	bl	8007b6c <settings_read_coord_data>
 80029f8:	2800      	cmp	r0, #0
 80029fa:	f43f aed9 	beq.w	80027b0 <gc_execute_line+0x918>
 80029fe:	e7b6      	b.n	800296e <gc_execute_line+0xad6>
              if (!(axis_words & (1<<idx))) { gc_block.values.ijk[idx] = gc_state.position[idx]; }
 8002a00:	07d8      	lsls	r0, r3, #31
 8002a02:	d404      	bmi.n	8002a0e <gc_execute_line+0xb76>
 8002a04:	4b1c      	ldr	r3, [pc, #112]	; (8002a78 <gc_execute_line+0xbe0>)
 8002a06:	69db      	ldr	r3, [r3, #28]
 8002a08:	f8c9 3010 	str.w	r3, [r9, #16]
 8002a0c:	9b06      	ldr	r3, [sp, #24]
 8002a0e:	0799      	lsls	r1, r3, #30
 8002a10:	d404      	bmi.n	8002a1c <gc_execute_line+0xb84>
 8002a12:	4b19      	ldr	r3, [pc, #100]	; (8002a78 <gc_execute_line+0xbe0>)
 8002a14:	6a1b      	ldr	r3, [r3, #32]
 8002a16:	f8c9 3014 	str.w	r3, [r9, #20]
 8002a1a:	9b06      	ldr	r3, [sp, #24]
 8002a1c:	075a      	lsls	r2, r3, #29
 8002a1e:	d404      	bmi.n	8002a2a <gc_execute_line+0xb92>
 8002a20:	4b15      	ldr	r3, [pc, #84]	; (8002a78 <gc_execute_line+0xbe0>)
 8002a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a24:	f8c9 3018 	str.w	r3, [r9, #24]
 8002a28:	9b06      	ldr	r3, [sp, #24]
 8002a2a:	071d      	lsls	r5, r3, #28
 8002a2c:	f53f af65 	bmi.w	80028fa <gc_execute_line+0xa62>
 8002a30:	4b11      	ldr	r3, [pc, #68]	; (8002a78 <gc_execute_line+0xbe0>)
 8002a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a34:	f8c9 301c 	str.w	r3, [r9, #28]
 8002a38:	e75f      	b.n	80028fa <gc_execute_line+0xa62>
      if (!(gc_block.non_modal_command == NON_MODAL_ABSOLUTE_OVERRIDE || gc_block.non_modal_command == NON_MODAL_NO_ACTION)) { FAIL(STATUS_INVALID_JOG_COMMAND); }
 8002a3a:	f899 3000 	ldrb.w	r3, [r9]
 8002a3e:	2b35      	cmp	r3, #53	; 0x35
 8002a40:	d001      	beq.n	8002a46 <gc_execute_line+0xbae>
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d1c2      	bne.n	80029cc <gc_execute_line+0xb34>
      plan_data.condition = (gc_state.modal.spindle | gc_state.modal.coolant);
 8002a46:	4a0c      	ldr	r2, [pc, #48]	; (8002a78 <gc_execute_line+0xbe0>)
 8002a48:	4b0b      	ldr	r3, [pc, #44]	; (8002a78 <gc_execute_line+0xbe0>)
 8002a4a:	7a11      	ldrb	r1, [r2, #8]
 8002a4c:	7a5b      	ldrb	r3, [r3, #9]
      pl_data->spindle_speed = gc_state.spindle_speed;
 8002a4e:	68d2      	ldr	r2, [r2, #12]
      plan_data.condition = (gc_state.modal.spindle | gc_state.modal.coolant);
 8002a50:	430b      	orrs	r3, r1
      uint8_t status = jog_execute(&plan_data, &gc_block);
 8002a52:	a817      	add	r0, sp, #92	; 0x5c
 8002a54:	490a      	ldr	r1, [pc, #40]	; (8002a80 <gc_execute_line+0xbe8>)
      plan_data.condition = (gc_state.modal.spindle | gc_state.modal.coolant);
 8002a56:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
      pl_data->spindle_speed = gc_state.spindle_speed;
 8002a5a:	9218      	str	r2, [sp, #96]	; 0x60
      uint8_t status = jog_execute(&plan_data, &gc_block);
 8002a5c:	f000 fba8 	bl	80031b0 <jog_execute>
      if (status == STATUS_OK) { memcpy(gc_state.position, gc_block.values.xyz, sizeof(gc_block.values.xyz)); }
 8002a60:	4604      	mov	r4, r0
 8002a62:	2800      	cmp	r0, #0
 8002a64:	f47f ab90 	bne.w	8002188 <gc_execute_line+0x2f0>
 8002a68:	4b06      	ldr	r3, [pc, #24]	; (8002a84 <gc_execute_line+0xbec>)
 8002a6a:	4d07      	ldr	r5, [pc, #28]	; (8002a88 <gc_execute_line+0xbf0>)
 8002a6c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a6e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002a72:	f7ff bb89 	b.w	8002188 <gc_execute_line+0x2f0>
 8002a76:	bf00      	nop
 8002a78:	2000102c 	.word	0x2000102c
 8002a7c:	2000108c 	.word	0x2000108c
 8002a80:	2000107c 	.word	0x2000107c
 8002a84:	200010b4 	.word	0x200010b4
 8002a88:	20001048 	.word	0x20001048
  if (bit_istrue(settings.flags, BITFLAG_LASER_MODE)) {
 8002a8c:	4bba      	ldr	r3, [pc, #744]	; (8002d78 <gc_execute_line+0xee0>)
 8002a8e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002a92:	079c      	lsls	r4, r3, #30
 8002a94:	d514      	bpl.n	8002ac0 <gc_execute_line+0xc28>
      if (!((gc_block.modal.motion == MOTION_MODE_LINEAR) || (gc_block.modal.motion == MOTION_MODE_CW_ARC)
 8002a96:	f899 3001 	ldrb.w	r3, [r9, #1]
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d904      	bls.n	8002aaa <gc_execute_line+0xc12>
          gc_parser_flags |= GC_PARSER_LASER_DISABLE;
 8002aa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002aa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	9309      	str	r3, [sp, #36]	; 0x24
      if (axis_words && (axis_command == AXIS_COMMAND_MOTION_MODE)) {
 8002aaa:	9b06      	ldr	r3, [sp, #24]
 8002aac:	b11b      	cbz	r3, 8002ab6 <gc_execute_line+0xc1e>
 8002aae:	9b07      	ldr	r3, [sp, #28]
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	f000 8344 	beq.w	800313e <gc_execute_line+0x12a6>
        if (gc_state.modal.spindle == SPINDLE_ENABLE_CW) {
 8002ab6:	4bb1      	ldr	r3, [pc, #708]	; (8002d7c <gc_execute_line+0xee4>)
 8002ab8:	7a5b      	ldrb	r3, [r3, #9]
 8002aba:	2b10      	cmp	r3, #16
 8002abc:	f000 832d 	beq.w	800311a <gc_execute_line+0x1282>
 8002ac0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ac2:	f003 0440 	and.w	r4, r3, #64	; 0x40
  gc_state.line_number = gc_block.values.n;
 8002ac6:	49ad      	ldr	r1, [pc, #692]	; (8002d7c <gc_execute_line+0xee4>)
 8002ac8:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
  gc_state.modal.feed_rate = gc_block.modal.feed_rate;
 8002acc:	f899 3002 	ldrb.w	r3, [r9, #2]
  gc_state.line_number = gc_block.values.n;
 8002ad0:	618a      	str	r2, [r1, #24]
  gc_state.modal.feed_rate = gc_block.modal.feed_rate;
 8002ad2:	704b      	strb	r3, [r1, #1]
  if (gc_state.modal.feed_rate) { pl_data->condition |= PL_COND_FLAG_INVERSE_TIME; } // Set condition flag for planner use.
 8002ad4:	b113      	cbz	r3, 8002adc <gc_execute_line+0xc44>
 8002ad6:	2308      	movs	r3, #8
 8002ad8:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
  gc_state.feed_rate = gc_block.values.f; // Always copy this value. See feed rate error-checking.
 8002adc:	f8d9 300c 	ldr.w	r3, [r9, #12]
  if ((gc_state.spindle_speed != gc_block.values.s) || bit_istrue(gc_parser_flags, GC_PARSER_LASER_FORCE_SYNC)) {
 8002ae0:	4aa6      	ldr	r2, [pc, #664]	; (8002d7c <gc_execute_line+0xee4>)
 8002ae2:	f8d9 5030 	ldr.w	r5, [r9, #48]	; 0x30
 8002ae6:	68d0      	ldr	r0, [r2, #12]
 8002ae8:	4629      	mov	r1, r5
  gc_state.feed_rate = gc_block.values.f; // Always copy this value. See feed rate error-checking.
 8002aea:	6113      	str	r3, [r2, #16]
  pl_data->feed_rate = gc_state.feed_rate; // Record data for planner use.
 8002aec:	9317      	str	r3, [sp, #92]	; 0x5c
  if ((gc_state.spindle_speed != gc_block.values.s) || bit_istrue(gc_parser_flags, GC_PARSER_LASER_FORCE_SYNC)) {
 8002aee:	f7fe fa73 	bl	8000fd8 <__aeabi_fcmpeq>
 8002af2:	b110      	cbz	r0, 8002afa <gc_execute_line+0xc62>
 8002af4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002af6:	0698      	lsls	r0, r3, #26
 8002af8:	d50f      	bpl.n	8002b1a <gc_execute_line+0xc82>
      if (gc_state.modal.spindle != SPINDLE_DISABLE) {
 8002afa:	4ba0      	ldr	r3, [pc, #640]	; (8002d7c <gc_execute_line+0xee4>)
 8002afc:	7a58      	ldrb	r0, [r3, #9]
 8002afe:	b140      	cbz	r0, 8002b12 <gc_execute_line+0xc7a>
        if (bit_isfalse(gc_parser_flags, GC_PARSER_LASER_ISMOTION)) {
 8002b00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b02:	0619      	lsls	r1, r3, #24
 8002b04:	d405      	bmi.n	8002b12 <gc_execute_line+0xc7a>
          if (bit_istrue(gc_parser_flags, GC_PARSER_LASER_DISABLE)) {
 8002b06:	2c00      	cmp	r4, #0
 8002b08:	f000 8326 	beq.w	8003158 <gc_execute_line+0x12c0>
            spindle_sync(gc_state.modal.spindle, 0.0);
 8002b0c:	2100      	movs	r1, #0
 8002b0e:	f005 fbd3 	bl	80082b8 <spindle_sync>
      gc_state.spindle_speed = gc_block.values.s; // Update spindle speed state.
 8002b12:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
 8002b16:	4a99      	ldr	r2, [pc, #612]	; (8002d7c <gc_execute_line+0xee4>)
 8002b18:	60d3      	str	r3, [r2, #12]
  if (bit_isfalse(gc_parser_flags, GC_PARSER_LASER_DISABLE)) {
 8002b1a:	b914      	cbnz	r4, 8002b22 <gc_execute_line+0xc8a>
      pl_data->spindle_speed = gc_state.spindle_speed; // Record data for planner use. 
 8002b1c:	4b97      	ldr	r3, [pc, #604]	; (8002d7c <gc_execute_line+0xee4>)
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	9318      	str	r3, [sp, #96]	; 0x60
  if (gc_state.modal.spindle != gc_block.modal.spindle) {
 8002b22:	4b96      	ldr	r3, [pc, #600]	; (8002d7c <gc_execute_line+0xee4>)
 8002b24:	f899 000a 	ldrb.w	r0, [r9, #10]
 8002b28:	7a5b      	ldrb	r3, [r3, #9]
  gc_state.tool = gc_block.values.t;
 8002b2a:	f899 2034 	ldrb.w	r2, [r9, #52]	; 0x34
 8002b2e:	4993      	ldr	r1, [pc, #588]	; (8002d7c <gc_execute_line+0xee4>)
  if (gc_state.modal.spindle != gc_block.modal.spindle) {
 8002b30:	4283      	cmp	r3, r0
  gc_state.tool = gc_block.values.t;
 8002b32:	750a      	strb	r2, [r1, #20]
  if (gc_state.modal.spindle != gc_block.modal.spindle) {
 8002b34:	d006      	beq.n	8002b44 <gc_execute_line+0xcac>
    spindle_sync(gc_block.modal.spindle, pl_data->spindle_speed);
 8002b36:	9918      	ldr	r1, [sp, #96]	; 0x60
 8002b38:	f005 fbbe 	bl	80082b8 <spindle_sync>
    gc_state.modal.spindle = gc_block.modal.spindle;
 8002b3c:	f899 300a 	ldrb.w	r3, [r9, #10]
 8002b40:	4a8e      	ldr	r2, [pc, #568]	; (8002d7c <gc_execute_line+0xee4>)
 8002b42:	7253      	strb	r3, [r2, #9]
  pl_data->condition |= gc_state.modal.spindle; // Set condition flag for planner use.
 8002b44:	4a8d      	ldr	r2, [pc, #564]	; (8002d7c <gc_execute_line+0xee4>)
 8002b46:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8002b4a:	7a52      	ldrb	r2, [r2, #9]
  if (gc_state.modal.coolant != gc_block.modal.coolant) {
 8002b4c:	f899 0009 	ldrb.w	r0, [r9, #9]
  pl_data->condition |= gc_state.modal.spindle; // Set condition flag for planner use.
 8002b50:	4313      	orrs	r3, r2
  if (gc_state.modal.coolant != gc_block.modal.coolant) {
 8002b52:	4a8a      	ldr	r2, [pc, #552]	; (8002d7c <gc_execute_line+0xee4>)
  pl_data->condition |= gc_state.modal.spindle; // Set condition flag for planner use.
 8002b54:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
  if (gc_state.modal.coolant != gc_block.modal.coolant) {
 8002b58:	7a12      	ldrb	r2, [r2, #8]
 8002b5a:	4282      	cmp	r2, r0
 8002b5c:	d009      	beq.n	8002b72 <gc_execute_line+0xcda>
    coolant_sync(gc_block.modal.coolant);
 8002b5e:	f7ff f8b5 	bl	8001ccc <coolant_sync>
    if (gc_block.modal.coolant == COOLANT_DISABLE) { gc_state.modal.coolant = COOLANT_DISABLE; }
 8002b62:	f899 3009 	ldrb.w	r3, [r9, #9]
 8002b66:	4a85      	ldr	r2, [pc, #532]	; (8002d7c <gc_execute_line+0xee4>)
 8002b68:	b113      	cbz	r3, 8002b70 <gc_execute_line+0xcd8>
    else { gc_state.modal.coolant |= gc_block.modal.coolant; }
 8002b6a:	7a12      	ldrb	r2, [r2, #8]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	4a83      	ldr	r2, [pc, #524]	; (8002d7c <gc_execute_line+0xee4>)
 8002b70:	7213      	strb	r3, [r2, #8]
  pl_data->condition |= gc_state.modal.coolant; // Set condition flag for planner use.
 8002b72:	4a82      	ldr	r2, [pc, #520]	; (8002d7c <gc_execute_line+0xee4>)
 8002b74:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8002b78:	7a11      	ldrb	r1, [r2, #8]
  if (gc_block.non_modal_command == NON_MODAL_DWELL) { mc_dwell(gc_block.values.p); }
 8002b7a:	f899 2000 	ldrb.w	r2, [r9]
  pl_data->condition |= gc_state.modal.coolant; // Set condition flag for planner use.
 8002b7e:	430b      	orrs	r3, r1
  if (gc_block.non_modal_command == NON_MODAL_DWELL) { mc_dwell(gc_block.values.p); }
 8002b80:	2a04      	cmp	r2, #4
  pl_data->condition |= gc_state.modal.coolant; // Set condition flag for planner use.
 8002b82:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
  if (gc_block.non_modal_command == NON_MODAL_DWELL) { mc_dwell(gc_block.values.p); }
 8002b86:	d103      	bne.n	8002b90 <gc_execute_line+0xcf8>
 8002b88:	f8d9 0028 	ldr.w	r0, [r9, #40]	; 0x28
 8002b8c:	f001 f9a2 	bl	8003ed4 <mc_dwell>
  if (gc_block.non_modal_command == NON_MODAL_G100) {
 8002b90:	f899 3000 	ldrb.w	r3, [r9]
 8002b94:	2b64      	cmp	r3, #100	; 0x64
 8002b96:	d117      	bne.n	8002bc8 <gc_execute_line+0xd30>
	  tmc_set(gc_block.values.p, gc_block.values.l, gc_block.values.n, gc_block.values.s, gc_block.values.f);
 8002b98:	f8d9 0030 	ldr.w	r0, [r9, #48]	; 0x30
 8002b9c:	f7fe fa8a 	bl	80010b4 <__aeabi_f2uiz>
 8002ba0:	b2c5      	uxtb	r5, r0
 8002ba2:	f8d9 0028 	ldr.w	r0, [r9, #40]	; 0x28
 8002ba6:	f7fe fa85 	bl	80010b4 <__aeabi_f2uiz>
 8002baa:	b2c4      	uxtb	r4, r0
 8002bac:	f8d9 000c 	ldr.w	r0, [r9, #12]
 8002bb0:	f7fe fa80 	bl	80010b4 <__aeabi_f2uiz>
 8002bb4:	b2c0      	uxtb	r0, r0
 8002bb6:	9000      	str	r0, [sp, #0]
 8002bb8:	f899 2024 	ldrb.w	r2, [r9, #36]	; 0x24
 8002bbc:	f899 1020 	ldrb.w	r1, [r9, #32]
 8002bc0:	462b      	mov	r3, r5
 8002bc2:	4620      	mov	r0, r4
 8002bc4:	f007 f904 	bl	8009dd0 <tmc_set>
  if (gc_block.non_modal_command == NON_MODAL_G101) {
 8002bc8:	f899 3000 	ldrb.w	r3, [r9]
 8002bcc:	2b65      	cmp	r3, #101	; 0x65
 8002bce:	d10c      	bne.n	8002bea <gc_execute_line+0xd52>
	  tmc_read(gc_block.values.p, gc_block.values.r);
 8002bd0:	f8d9 002c 	ldr.w	r0, [r9, #44]	; 0x2c
 8002bd4:	f7fe fa6e 	bl	80010b4 <__aeabi_f2uiz>
 8002bd8:	b2c4      	uxtb	r4, r0
 8002bda:	f8d9 0028 	ldr.w	r0, [r9, #40]	; 0x28
 8002bde:	f7fe fa69 	bl	80010b4 <__aeabi_f2uiz>
 8002be2:	4621      	mov	r1, r4
 8002be4:	b2c0      	uxtb	r0, r0
 8002be6:	f007 f979 	bl	8009edc <tmc_read>
  gc_state.modal.units = gc_block.modal.units;
 8002bea:	f899 3003 	ldrb.w	r3, [r9, #3]
  gc_state.modal.plane_select = gc_block.modal.plane_select;
 8002bee:	4963      	ldr	r1, [pc, #396]	; (8002d7c <gc_execute_line+0xee4>)
 8002bf0:	f899 2005 	ldrb.w	r2, [r9, #5]
  gc_state.modal.units = gc_block.modal.units;
 8002bf4:	708b      	strb	r3, [r1, #2]
  if (axis_command == AXIS_COMMAND_TOOL_LENGTH_OFFSET ) { // Indicates a change.
 8002bf6:	9b07      	ldr	r3, [sp, #28]
  gc_state.modal.plane_select = gc_block.modal.plane_select;
 8002bf8:	710a      	strb	r2, [r1, #4]
  if (axis_command == AXIS_COMMAND_TOOL_LENGTH_OFFSET ) { // Indicates a change.
 8002bfa:	2b03      	cmp	r3, #3
 8002bfc:	f000 8244 	beq.w	8003088 <gc_execute_line+0x11f0>
  if (gc_state.modal.coord_select != gc_block.modal.coord_select) {
 8002c00:	4b5e      	ldr	r3, [pc, #376]	; (8002d7c <gc_execute_line+0xee4>)
 8002c02:	f899 4007 	ldrb.w	r4, [r9, #7]
 8002c06:	799b      	ldrb	r3, [r3, #6]
 8002c08:	42a3      	cmp	r3, r4
 8002c0a:	d009      	beq.n	8002c20 <gc_execute_line+0xd88>
    gc_state.modal.coord_select = gc_block.modal.coord_select;
 8002c0c:	4d5b      	ldr	r5, [pc, #364]	; (8002d7c <gc_execute_line+0xee4>)
    memcpy(gc_state.coord_system,block_coord_system,N_AXIS*sizeof(float));
 8002c0e:	ab1a      	add	r3, sp, #104	; 0x68
    gc_state.modal.coord_select = gc_block.modal.coord_select;
 8002c10:	71ac      	strb	r4, [r5, #6]
    memcpy(gc_state.coord_system,block_coord_system,N_AXIS*sizeof(float));
 8002c12:	f105 042c 	add.w	r4, r5, #44	; 0x2c
 8002c16:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c18:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    system_flag_wco_change();
 8002c1c:	f006 ff62 	bl	8009ae4 <system_flag_wco_change>
  switch(gc_block.non_modal_command) {
 8002c20:	f899 3000 	ldrb.w	r3, [r9]
  gc_state.modal.distance = gc_block.modal.distance;
 8002c24:	f899 2004 	ldrb.w	r2, [r9, #4]
 8002c28:	4954      	ldr	r1, [pc, #336]	; (8002d7c <gc_execute_line+0xee4>)
  switch(gc_block.non_modal_command) {
 8002c2a:	2b26      	cmp	r3, #38	; 0x26
  gc_state.modal.distance = gc_block.modal.distance;
 8002c2c:	70ca      	strb	r2, [r1, #3]
  switch(gc_block.non_modal_command) {
 8002c2e:	f000 80b3 	beq.w	8002d98 <gc_execute_line+0xf00>
 8002c32:	f240 8087 	bls.w	8002d44 <gc_execute_line+0xeac>
 8002c36:	2b5c      	cmp	r3, #92	; 0x5c
 8002c38:	d07c      	beq.n	8002d34 <gc_execute_line+0xe9c>
 8002c3a:	2b66      	cmp	r3, #102	; 0x66
 8002c3c:	d06f      	beq.n	8002d1e <gc_execute_line+0xe86>
 8002c3e:	2b28      	cmp	r3, #40	; 0x28
 8002c40:	d103      	bne.n	8002c4a <gc_execute_line+0xdb2>
      settings_write_coord_data(SETTING_INDEX_G30,gc_state.position);
 8002c42:	494f      	ldr	r1, [pc, #316]	; (8002d80 <gc_execute_line+0xee8>)
 8002c44:	2007      	movs	r0, #7
 8002c46:	f004 feb9 	bl	80079bc <settings_write_coord_data>
  gc_state.modal.motion = gc_block.modal.motion;
 8002c4a:	f899 3001 	ldrb.w	r3, [r9, #1]
 8002c4e:	4a4b      	ldr	r2, [pc, #300]	; (8002d7c <gc_execute_line+0xee4>)
  if (gc_state.modal.motion != MOTION_MODE_NONE) {
 8002c50:	2b50      	cmp	r3, #80	; 0x50
  gc_state.modal.motion = gc_block.modal.motion;
 8002c52:	7013      	strb	r3, [r2, #0]
  if (gc_state.modal.motion != MOTION_MODE_NONE) {
 8002c54:	d002      	beq.n	8002c5c <gc_execute_line+0xdc4>
    if (axis_command == AXIS_COMMAND_MOTION_MODE) {
 8002c56:	9a07      	ldr	r2, [sp, #28]
 8002c58:	2a02      	cmp	r2, #2
 8002c5a:	d041      	beq.n	8002ce0 <gc_execute_line+0xe48>
  gc_state.modal.program_flow = gc_block.modal.program_flow;
 8002c5c:	f899 4008 	ldrb.w	r4, [r9, #8]
 8002c60:	4b46      	ldr	r3, [pc, #280]	; (8002d7c <gc_execute_line+0xee4>)
 8002c62:	71dc      	strb	r4, [r3, #7]
  if (gc_state.modal.program_flow) {
 8002c64:	2c00      	cmp	r4, #0
 8002c66:	f43f aa8f 	beq.w	8002188 <gc_execute_line+0x2f0>
    protocol_buffer_synchronize(); // Sync and finish all remaining buffered motions before moving on.
 8002c6a:	f003 fa65 	bl	8006138 <protocol_buffer_synchronize>
    if (gc_state.modal.program_flow == PROGRAM_FLOW_PAUSED) {
 8002c6e:	4b43      	ldr	r3, [pc, #268]	; (8002d7c <gc_execute_line+0xee4>)
 8002c70:	79db      	ldrb	r3, [r3, #7]
 8002c72:	2b03      	cmp	r3, #3
 8002c74:	d02a      	beq.n	8002ccc <gc_execute_line+0xe34>
      gc_state.modal.motion = MOTION_MODE_LINEAR;
 8002c76:	2101      	movs	r1, #1
      gc_state.modal.plane_select = PLANE_SELECT_XY;
 8002c78:	2400      	movs	r4, #0
        sys.f_override = DEFAULT_FEED_OVERRIDE;
 8002c7a:	2264      	movs	r2, #100	; 0x64
      gc_state.modal.motion = MOTION_MODE_LINEAR;
 8002c7c:	483f      	ldr	r0, [pc, #252]	; (8002d7c <gc_execute_line+0xee4>)
        sys.f_override = DEFAULT_FEED_OVERRIDE;
 8002c7e:	4b41      	ldr	r3, [pc, #260]	; (8002d84 <gc_execute_line+0xeec>)
      gc_state.modal.motion = MOTION_MODE_LINEAR;
 8002c80:	7001      	strb	r1, [r0, #0]
      if (sys.state != STATE_CHECK_MODE) {
 8002c82:	7819      	ldrb	r1, [r3, #0]
      gc_state.modal.plane_select = PLANE_SELECT_XY;
 8002c84:	7104      	strb	r4, [r0, #4]
      if (sys.state != STATE_CHECK_MODE) {
 8002c86:	2902      	cmp	r1, #2
      gc_state.modal.distance = DISTANCE_MODE_ABSOLUTE;
 8002c88:	70c4      	strb	r4, [r0, #3]
      gc_state.modal.feed_rate = FEED_RATE_MODE_UNITS_PER_MIN;
 8002c8a:	7044      	strb	r4, [r0, #1]
      gc_state.modal.coord_select = 0; // G54
 8002c8c:	7184      	strb	r4, [r0, #6]
      gc_state.modal.spindle = SPINDLE_DISABLE;
 8002c8e:	7244      	strb	r4, [r0, #9]
      gc_state.modal.coolant = COOLANT_DISABLE;
 8002c90:	7204      	strb	r4, [r0, #8]
        sys.f_override = DEFAULT_FEED_OVERRIDE;
 8002c92:	721a      	strb	r2, [r3, #8]
        sys.r_override = DEFAULT_RAPID_OVERRIDE;
 8002c94:	725a      	strb	r2, [r3, #9]
        sys.spindle_speed_ovr = DEFAULT_SPINDLE_SPEED_OVERRIDE;
 8002c96:	729a      	strb	r2, [r3, #10]
      if (sys.state != STATE_CHECK_MODE) {
 8002c98:	d010      	beq.n	8002cbc <gc_execute_line+0xe24>
        if (!(settings_read_coord_data(gc_state.modal.coord_select,gc_state.coord_system))) { FAIL(STATUS_SETTING_READ_FAIL); }
 8002c9a:	f100 012c 	add.w	r1, r0, #44	; 0x2c
 8002c9e:	4620      	mov	r0, r4
 8002ca0:	f004 ff64 	bl	8007b6c <settings_read_coord_data>
 8002ca4:	2800      	cmp	r0, #0
 8002ca6:	f43f ad83 	beq.w	80027b0 <gc_execute_line+0x918>
        system_flag_wco_change(); // Set to refresh immediately just in case something altered.
 8002caa:	f006 ff1b 	bl	8009ae4 <system_flag_wco_change>
        spindle_set_state(SPINDLE_DISABLE,0.0f);
 8002cae:	4620      	mov	r0, r4
 8002cb0:	2100      	movs	r1, #0
 8002cb2:	f005 fa77 	bl	80081a4 <spindle_set_state>
        coolant_set_state(COOLANT_DISABLE);
 8002cb6:	4620      	mov	r0, r4
 8002cb8:	f7fe ffe4 	bl	8001c84 <coolant_set_state>
      report_feedback_message(MESSAGE_PROGRAM_END);
 8002cbc:	2008      	movs	r0, #8
 8002cbe:	f003 fd5f 	bl	8006780 <report_feedback_message>
    gc_state.modal.program_flow = PROGRAM_FLOW_RUNNING; // Reset program flow.
 8002cc2:	2400      	movs	r4, #0
 8002cc4:	4b2d      	ldr	r3, [pc, #180]	; (8002d7c <gc_execute_line+0xee4>)
 8002cc6:	71dc      	strb	r4, [r3, #7]
 8002cc8:	f7ff ba5e 	b.w	8002188 <gc_execute_line+0x2f0>
      if (sys.state != STATE_CHECK_MODE) {
 8002ccc:	4b2d      	ldr	r3, [pc, #180]	; (8002d84 <gc_execute_line+0xeec>)
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d0f6      	beq.n	8002cc2 <gc_execute_line+0xe2a>
        system_set_exec_state_flag(EXEC_FEED_HOLD); // Use feed hold for program pause.
 8002cd4:	2008      	movs	r0, #8
 8002cd6:	f006 ffb1 	bl	8009c3c <system_set_exec_state_flag>
        protocol_execute_realtime(); // Execute suspend.
 8002cda:	f003 f83b 	bl	8005d54 <protocol_execute_realtime>
 8002cde:	e7f0      	b.n	8002cc2 <gc_execute_line+0xe2a>
      if (gc_state.modal.motion == MOTION_MODE_LINEAR) {
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	f000 8213 	beq.w	800310c <gc_execute_line+0x1274>
      } else if (gc_state.modal.motion == MOTION_MODE_SEEK) {
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	f000 8203 	beq.w	80030f2 <gc_execute_line+0x125a>
      } else if ((gc_state.modal.motion == MOTION_MODE_CW_ARC) || (gc_state.modal.motion == MOTION_MODE_CCW_ARC)) {
 8002cec:	3b02      	subs	r3, #2
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	f240 81e8 	bls.w	80030c4 <gc_execute_line+0x122c>
          pl_data->condition |= PL_COND_FLAG_NO_FEED_OVERRIDE;
 8002cf4:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
        gc_update_pos = mc_probe_cycle(gc_block.values.xyz, pl_data, gc_parser_flags);
 8002cf8:	4d23      	ldr	r5, [pc, #140]	; (8002d88 <gc_execute_line+0xef0>)
          pl_data->condition |= PL_COND_FLAG_NO_FEED_OVERRIDE;
 8002cfa:	f043 0304 	orr.w	r3, r3, #4
        gc_update_pos = mc_probe_cycle(gc_block.values.xyz, pl_data, gc_parser_flags);
 8002cfe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002d00:	a917      	add	r1, sp, #92	; 0x5c
 8002d02:	4628      	mov	r0, r5
          pl_data->condition |= PL_COND_FLAG_NO_FEED_OVERRIDE;
 8002d04:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
        gc_update_pos = mc_probe_cycle(gc_block.values.xyz, pl_data, gc_parser_flags);
 8002d08:	f001 f920 	bl	8003f4c <mc_probe_cycle>
      if (gc_update_pos == GC_UPDATE_POS_TARGET) {
 8002d0c:	2800      	cmp	r0, #0
 8002d0e:	f040 81d1 	bne.w	80030b4 <gc_execute_line+0x121c>
 8002d12:	4c1b      	ldr	r4, [pc, #108]	; (8002d80 <gc_execute_line+0xee8>)
        memcpy(gc_state.position, gc_block.values.xyz, sizeof(gc_block.values.xyz)); // gc_state.position[] = gc_block.values.xyz[]
 8002d14:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002d18:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002d1c:	e79e      	b.n	8002c5c <gc_execute_line+0xdc4>
      clear_vector(gc_state.coord_offset); // Disable G92 offsets by zeroing offset vector.
 8002d1e:	2300      	movs	r3, #0
 8002d20:	4a1a      	ldr	r2, [pc, #104]	; (8002d8c <gc_execute_line+0xef4>)
 8002d22:	f1a2 013c 	sub.w	r1, r2, #60	; 0x3c
 8002d26:	63cb      	str	r3, [r1, #60]	; 0x3c
 8002d28:	6053      	str	r3, [r2, #4]
 8002d2a:	6093      	str	r3, [r2, #8]
 8002d2c:	60d3      	str	r3, [r2, #12]
      system_flag_wco_change();
 8002d2e:	f006 fed9 	bl	8009ae4 <system_flag_wco_change>
      break;
 8002d32:	e78a      	b.n	8002c4a <gc_execute_line+0xdb2>
      memcpy(gc_state.coord_offset,gc_block.values.xyz,sizeof(gc_block.values.xyz));
 8002d34:	4c15      	ldr	r4, [pc, #84]	; (8002d8c <gc_execute_line+0xef4>)
 8002d36:	4b14      	ldr	r3, [pc, #80]	; (8002d88 <gc_execute_line+0xef0>)
 8002d38:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d3a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      system_flag_wco_change();
 8002d3e:	f006 fed1 	bl	8009ae4 <system_flag_wco_change>
      break;
 8002d42:	e782      	b.n	8002c4a <gc_execute_line+0xdb2>
  switch(gc_block.non_modal_command) {
 8002d44:	2b1c      	cmp	r3, #28
 8002d46:	d02c      	beq.n	8002da2 <gc_execute_line+0xf0a>
 8002d48:	2b1e      	cmp	r3, #30
 8002d4a:	d02a      	beq.n	8002da2 <gc_execute_line+0xf0a>
 8002d4c:	2b0a      	cmp	r3, #10
 8002d4e:	f47f af7c 	bne.w	8002c4a <gc_execute_line+0xdb2>
      settings_write_coord_data(coord_select,gc_block.values.ijk);
 8002d52:	4c0f      	ldr	r4, [pc, #60]	; (8002d90 <gc_execute_line+0xef8>)
 8002d54:	4650      	mov	r0, sl
 8002d56:	4621      	mov	r1, r4
 8002d58:	f004 fe30 	bl	80079bc <settings_write_coord_data>
      if (gc_state.modal.coord_select == coord_select) {
 8002d5c:	4b07      	ldr	r3, [pc, #28]	; (8002d7c <gc_execute_line+0xee4>)
 8002d5e:	799b      	ldrb	r3, [r3, #6]
 8002d60:	4553      	cmp	r3, sl
 8002d62:	f47f af72 	bne.w	8002c4a <gc_execute_line+0xdb2>
        memcpy(gc_state.coord_system,gc_block.values.ijk,N_AXIS*sizeof(float));
 8002d66:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002d6a:	4c0a      	ldr	r4, [pc, #40]	; (8002d94 <gc_execute_line+0xefc>)
 8002d6c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        system_flag_wco_change();
 8002d70:	f006 feb8 	bl	8009ae4 <system_flag_wco_change>
 8002d74:	e769      	b.n	8002c4a <gc_execute_line+0xdb2>
 8002d76:	bf00      	nop
 8002d78:	20001404 	.word	0x20001404
 8002d7c:	2000102c 	.word	0x2000102c
 8002d80:	20001048 	.word	0x20001048
 8002d84:	200010c8 	.word	0x200010c8
 8002d88:	200010b4 	.word	0x200010b4
 8002d8c:	20001068 	.word	0x20001068
 8002d90:	2000108c 	.word	0x2000108c
 8002d94:	20001058 	.word	0x20001058
      settings_write_coord_data(SETTING_INDEX_G28,gc_state.position);
 8002d98:	49b4      	ldr	r1, [pc, #720]	; (800306c <gc_execute_line+0x11d4>)
 8002d9a:	2006      	movs	r0, #6
 8002d9c:	f004 fe0e 	bl	80079bc <settings_write_coord_data>
      break;
 8002da0:	e753      	b.n	8002c4a <gc_execute_line+0xdb2>
      pl_data->condition |= PL_COND_FLAG_RAPID_MOTION; // Set rapid motion condition flag.
 8002da2:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8002da6:	f043 0301 	orr.w	r3, r3, #1
 8002daa:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
      if (axis_command) { mc_line(gc_block.values.xyz, pl_data); }
 8002dae:	9b07      	ldr	r3, [sp, #28]
 8002db0:	b11b      	cbz	r3, 8002dba <gc_execute_line+0xf22>
 8002db2:	a917      	add	r1, sp, #92	; 0x5c
 8002db4:	48ae      	ldr	r0, [pc, #696]	; (8003070 <gc_execute_line+0x11d8>)
 8002db6:	f000 fe55 	bl	8003a64 <mc_line>
      mc_line(gc_block.values.ijk, pl_data);
 8002dba:	4dae      	ldr	r5, [pc, #696]	; (8003074 <gc_execute_line+0x11dc>)
      memcpy(gc_state.position, gc_block.values.ijk, N_AXIS*sizeof(float));
 8002dbc:	4cab      	ldr	r4, [pc, #684]	; (800306c <gc_execute_line+0x11d4>)
      mc_line(gc_block.values.ijk, pl_data);
 8002dbe:	4628      	mov	r0, r5
 8002dc0:	a917      	add	r1, sp, #92	; 0x5c
 8002dc2:	f000 fe4f 	bl	8003a64 <mc_line>
      memcpy(gc_state.position, gc_block.values.ijk, N_AXIS*sizeof(float));
 8002dc6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002dca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      break;
 8002dce:	e73c      	b.n	8002c4a <gc_execute_line+0xdb2>
          gc_parser_flags |= GC_PARSER_ARC_IS_CLOCKWISE; // No break intentional.
 8002dd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002dd2:	9309      	str	r3, [sp, #36]	; 0x24
          if (!axis_words) { FAIL(STATUS_GCODE_NO_AXIS_WORDS); } // [No axis words]
 8002dd4:	9b06      	ldr	r3, [sp, #24]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	f43f abcf 	beq.w	800257a <gc_execute_line+0x6e2>
          if (!(axis_words & (bit(axis_0)|bit(axis_1)))) { FAIL(STATUS_GCODE_NO_AXIS_WORDS_IN_PLANE); } // [No axis words in plane]
 8002ddc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002dde:	4213      	tst	r3, r2
 8002de0:	d102      	bne.n	8002de8 <gc_execute_line+0xf50>
 8002de2:	2420      	movs	r4, #32
 8002de4:	f7ff b9d0 	b.w	8002188 <gc_execute_line+0x2f0>
          x = gc_block.values.xyz[axis_0]-gc_state.position[axis_0]; // Delta x between current position and target
 8002de8:	4ba3      	ldr	r3, [pc, #652]	; (8003078 <gc_execute_line+0x11e0>)
 8002dea:	eb09 0287 	add.w	r2, r9, r7, lsl #2
 8002dee:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8002df2:	69d9      	ldr	r1, [r3, #28]
 8002df4:	6b90      	ldr	r0, [r2, #56]	; 0x38
 8002df6:	f7fd fe51 	bl	8000a9c <__aeabi_fsub>
          y = gc_block.values.xyz[axis_1]-gc_state.position[axis_1]; // Delta y between current position and target
 8002dfa:	4b9f      	ldr	r3, [pc, #636]	; (8003078 <gc_execute_line+0x11e0>)
 8002dfc:	eb09 0286 	add.w	r2, r9, r6, lsl #2
 8002e00:	eb03 0386 	add.w	r3, r3, r6, lsl #2
          x = gc_block.values.xyz[axis_0]-gc_state.position[axis_0]; // Delta x between current position and target
 8002e04:	4683      	mov	fp, r0
          y = gc_block.values.xyz[axis_1]-gc_state.position[axis_1]; // Delta y between current position and target
 8002e06:	69d9      	ldr	r1, [r3, #28]
 8002e08:	6b90      	ldr	r0, [r2, #56]	; 0x38
 8002e0a:	f7fd fe47 	bl	8000a9c <__aeabi_fsub>
          if (value_words & bit(WORD_R)) { // Arc Radius Mode
 8002e0e:	f018 0580 	ands.w	r5, r8, #128	; 0x80
          y = gc_block.values.xyz[axis_1]-gc_state.position[axis_1]; // Delta y between current position and target
 8002e12:	900a      	str	r0, [sp, #40]	; 0x28
          if (value_words & bit(WORD_R)) { // Arc Radius Mode
 8002e14:	f000 8097 	beq.w	8002f46 <gc_execute_line+0x10ae>
            bit_false(value_words,bit(WORD_R));
 8002e18:	f028 0880 	bic.w	r8, r8, #128	; 0x80
            if (isequal_position_vector(gc_state.position, gc_block.values.xyz)) { FAIL(STATUS_GCODE_INVALID_TARGET); } // [Invalid target]
 8002e1c:	2210      	movs	r2, #16
 8002e1e:	4994      	ldr	r1, [pc, #592]	; (8003070 <gc_execute_line+0x11d8>)
 8002e20:	4892      	ldr	r0, [pc, #584]	; (800306c <gc_execute_line+0x11d4>)
            bit_false(value_words,bit(WORD_R));
 8002e22:	fa1f f888 	uxth.w	r8, r8
            if (isequal_position_vector(gc_state.position, gc_block.values.xyz)) { FAIL(STATUS_GCODE_INVALID_TARGET); } // [Invalid target]
 8002e26:	f008 fb07 	bl	800b438 <memcmp>
 8002e2a:	2800      	cmp	r0, #0
 8002e2c:	d15d      	bne.n	8002eea <gc_execute_line+0x1052>
 8002e2e:	2421      	movs	r4, #33	; 0x21
 8002e30:	f7ff b9aa 	b.w	8002188 <gc_execute_line+0x2f0>
          if (gc_block.values.l == 20) {
 8002e34:	f899 3020 	ldrb.w	r3, [r9, #32]
            if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.ijk[idx] -= gc_state.tool_length_offset; }
 8002e38:	2201      	movs	r2, #1
          if (gc_block.values.l == 20) {
 8002e3a:	9310      	str	r3, [sp, #64]	; 0x40
            if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.ijk[idx] -= gc_state.tool_length_offset; }
 8002e3c:	4b8e      	ldr	r3, [pc, #568]	; (8003078 <gc_execute_line+0x11e0>)
 8002e3e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800306c <gc_execute_line+0x11d4>
 8002e42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e44:	9412      	str	r4, [sp, #72]	; 0x48
 8002e46:	9311      	str	r3, [sp, #68]	; 0x44
 8002e48:	2300      	movs	r3, #0
 8002e4a:	9713      	str	r7, [sp, #76]	; 0x4c
 8002e4c:	4614      	mov	r4, r2
 8002e4e:	465f      	mov	r7, fp
 8002e50:	46b3      	mov	fp, r6
 8002e52:	461e      	mov	r6, r3
 8002e54:	4d87      	ldr	r5, [pc, #540]	; (8003074 <gc_execute_line+0x11dc>)
        if (bit_istrue(axis_words,bit(idx)) ) {
 8002e56:	9b06      	ldr	r3, [sp, #24]
 8002e58:	fa43 f106 	asr.w	r1, r3, r6
 8002e5c:	07c8      	lsls	r0, r1, #31
 8002e5e:	d504      	bpl.n	8002e6a <gc_execute_line+0xfd2>
          if (gc_block.values.l == 20) {
 8002e60:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002e62:	2b14      	cmp	r3, #20
 8002e64:	d00c      	beq.n	8002e80 <gc_execute_line+0xfe8>
            gc_block.values.ijk[idx] = gc_block.values.xyz[idx];
 8002e66:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8002e68:	6029      	str	r1, [r5, #0]
      for (idx=0; idx<N_AXIS; idx++) { // Axes indices are consistent, so loop may be used.
 8002e6a:	2c04      	cmp	r4, #4
 8002e6c:	d018      	beq.n	8002ea0 <gc_execute_line+0x1008>
 8002e6e:	3401      	adds	r4, #1
 8002e70:	b2e4      	uxtb	r4, r4
 8002e72:	3601      	adds	r6, #1
 8002e74:	3704      	adds	r7, #4
 8002e76:	3504      	adds	r5, #4
 8002e78:	e7ed      	b.n	8002e56 <gc_execute_line+0xfbe>
      else { coord_select = gc_block.modal.coord_select; } // Index P0 as the active coordinate system
 8002e7a:	f899 a007 	ldrb.w	sl, [r9, #7]
 8002e7e:	e490      	b.n	80027a2 <gc_execute_line+0x90a>
            gc_block.values.ijk[idx] = gc_state.position[idx]-gc_state.coord_offset[idx]-gc_block.values.xyz[idx];
 8002e80:	6a39      	ldr	r1, [r7, #32]
 8002e82:	6838      	ldr	r0, [r7, #0]
 8002e84:	f7fd fe0a 	bl	8000a9c <__aeabi_fsub>
 8002e88:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8002e8a:	f7fd fe07 	bl	8000a9c <__aeabi_fsub>
            if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.ijk[idx] -= gc_state.tool_length_offset; }
 8002e8e:	2e02      	cmp	r6, #2
            gc_block.values.ijk[idx] = gc_state.position[idx]-gc_state.coord_offset[idx]-gc_block.values.xyz[idx];
 8002e90:	6028      	str	r0, [r5, #0]
            if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.ijk[idx] -= gc_state.tool_length_offset; }
 8002e92:	d1ea      	bne.n	8002e6a <gc_execute_line+0xfd2>
 8002e94:	9911      	ldr	r1, [sp, #68]	; 0x44
 8002e96:	f7fd fe01 	bl	8000a9c <__aeabi_fsub>
 8002e9a:	f8c9 0018 	str.w	r0, [r9, #24]
 8002e9e:	e7e6      	b.n	8002e6e <gc_execute_line+0xfd6>
 8002ea0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8002ea2:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8002ea4:	465e      	mov	r6, fp
 8002ea6:	e52a      	b.n	80028fe <gc_execute_line+0xa66>
      switch (gc_block.modal.motion) {
 8002ea8:	2d8e      	cmp	r5, #142	; 0x8e
 8002eaa:	d005      	beq.n	8002eb8 <gc_execute_line+0x1020>
 8002eac:	d302      	bcc.n	8002eb4 <gc_execute_line+0x101c>
 8002eae:	2d8f      	cmp	r5, #143	; 0x8f
 8002eb0:	f47f ac40 	bne.w	8002734 <gc_execute_line+0x89c>
            gc_parser_flags |= GC_PARSER_PROBE_IS_NO_ERROR; // No break intentional.
 8002eb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002eb6:	9309      	str	r3, [sp, #36]	; 0x24
            if ((gc_block.modal.motion == MOTION_MODE_PROBE_AWAY) ||
 8002eb8:	f105 0372 	add.w	r3, r5, #114	; 0x72
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d804      	bhi.n	8002ecc <gc_execute_line+0x1034>
                (gc_block.modal.motion == MOTION_MODE_PROBE_AWAY_NO_ERROR)) { gc_parser_flags |= GC_PARSER_PROBE_IS_AWAY; }
 8002ec2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ec4:	f043 0308 	orr.w	r3, r3, #8
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	9309      	str	r3, [sp, #36]	; 0x24
          if (!axis_words) { FAIL(STATUS_GCODE_NO_AXIS_WORDS); } // [No axis words]
 8002ecc:	9b06      	ldr	r3, [sp, #24]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	f43f ab53 	beq.w	800257a <gc_execute_line+0x6e2>
          if (isequal_position_vector(gc_state.position, gc_block.values.xyz)) { FAIL(STATUS_GCODE_INVALID_TARGET); } // [Invalid target]
 8002ed4:	2210      	movs	r2, #16
 8002ed6:	4966      	ldr	r1, [pc, #408]	; (8003070 <gc_execute_line+0x11d8>)
 8002ed8:	4864      	ldr	r0, [pc, #400]	; (800306c <gc_execute_line+0x11d4>)
 8002eda:	f008 faad 	bl	800b438 <memcmp>
 8002ede:	2800      	cmp	r0, #0
 8002ee0:	d0a5      	beq.n	8002e2e <gc_execute_line+0xf96>
 8002ee2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ee4:	f003 0201 	and.w	r2, r3, #1
 8002ee8:	e425      	b.n	8002736 <gc_execute_line+0x89e>
            if (gc_block.modal.units == UNITS_MODE_INCHES) { gc_block.values.r *= MM_PER_INCH; }
 8002eea:	f899 3003 	ldrb.w	r3, [r9, #3]
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d106      	bne.n	8002f00 <gc_execute_line+0x1068>
 8002ef2:	f8d9 002c 	ldr.w	r0, [r9, #44]	; 0x2c
 8002ef6:	4961      	ldr	r1, [pc, #388]	; (800307c <gc_execute_line+0x11e4>)
 8002ef8:	f7fd feda 	bl	8000cb0 <__aeabi_fmul>
 8002efc:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
            float h_x2_div_d = 4.0f * gc_block.values.r*gc_block.values.r - x*x - y*y;
 8002f00:	f8d9 102c 	ldr.w	r1, [r9, #44]	; 0x2c
 8002f04:	4608      	mov	r0, r1
 8002f06:	f7fd fed3 	bl	8000cb0 <__aeabi_fmul>
 8002f0a:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002f0e:	f7fd fecf 	bl	8000cb0 <__aeabi_fmul>
 8002f12:	4659      	mov	r1, fp
 8002f14:	4605      	mov	r5, r0
 8002f16:	4658      	mov	r0, fp
 8002f18:	f7fd feca 	bl	8000cb0 <__aeabi_fmul>
 8002f1c:	4601      	mov	r1, r0
 8002f1e:	4628      	mov	r0, r5
 8002f20:	f7fd fdbc 	bl	8000a9c <__aeabi_fsub>
 8002f24:	4605      	mov	r5, r0
 8002f26:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002f28:	4601      	mov	r1, r0
 8002f2a:	f7fd fec1 	bl	8000cb0 <__aeabi_fmul>
 8002f2e:	4601      	mov	r1, r0
 8002f30:	4628      	mov	r0, r5
 8002f32:	f7fd fdb3 	bl	8000a9c <__aeabi_fsub>
            if (h_x2_div_d < 0) { FAIL(STATUS_GCODE_ARC_RADIUS_ERROR); } // [Arc radius error]
 8002f36:	2100      	movs	r1, #0
            float h_x2_div_d = 4.0f * gc_block.values.r*gc_block.values.r - x*x - y*y;
 8002f38:	4605      	mov	r5, r0
            if (h_x2_div_d < 0) { FAIL(STATUS_GCODE_ARC_RADIUS_ERROR); } // [Arc radius error]
 8002f3a:	f7fe f857 	bl	8000fec <__aeabi_fcmplt>
 8002f3e:	b148      	cbz	r0, 8002f54 <gc_execute_line+0x10bc>
 8002f40:	2422      	movs	r4, #34	; 0x22
 8002f42:	f7ff b921 	b.w	8002188 <gc_execute_line+0x2f0>
            if (!(ijk_words & (bit(axis_0)|bit(axis_1)))) { FAIL(STATUS_GCODE_NO_OFFSETS_IN_PLANE); } // [No offsets in plane]
 8002f46:	9b08      	ldr	r3, [sp, #32]
 8002f48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002f4a:	4213      	tst	r3, r2
 8002f4c:	d14a      	bne.n	8002fe4 <gc_execute_line+0x114c>
 8002f4e:	2423      	movs	r4, #35	; 0x23
 8002f50:	f7ff b91a 	b.w	8002188 <gc_execute_line+0x2f0>
            h_x2_div_d = -sqrtf(h_x2_div_d)/hypot_f(x,y); // == -(h * 2 / d)
 8002f54:	4628      	mov	r0, r5
 8002f56:	f008 fbdf 	bl	800b718 <sqrtf>
 8002f5a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002f5c:	4605      	mov	r5, r0
 8002f5e:	4658      	mov	r0, fp
 8002f60:	f001 f986 	bl	8004270 <hypot_f>
 8002f64:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8002f68:	4601      	mov	r1, r0
 8002f6a:	4628      	mov	r0, r5
 8002f6c:	f7fd ff54 	bl	8000e18 <__aeabi_fdiv>
            if (gc_block.modal.motion == MOTION_MODE_CCW_ARC) { h_x2_div_d = -h_x2_div_d; }
 8002f70:	f899 3001 	ldrb.w	r3, [r9, #1]
            h_x2_div_d = -sqrtf(h_x2_div_d)/hypot_f(x,y); // == -(h * 2 / d)
 8002f74:	4605      	mov	r5, r0
            if (gc_block.modal.motion == MOTION_MODE_CCW_ARC) { h_x2_div_d = -h_x2_div_d; }
 8002f76:	2b03      	cmp	r3, #3
            if (gc_block.values.r < 0) {
 8002f78:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
            if (gc_block.modal.motion == MOTION_MODE_CCW_ARC) { h_x2_div_d = -h_x2_div_d; }
 8002f7c:	bf08      	it	eq
 8002f7e:	f100 4500 	addeq.w	r5, r0, #2147483648	; 0x80000000
            if (gc_block.values.r < 0) {
 8002f82:	2100      	movs	r1, #0
 8002f84:	4618      	mov	r0, r3
 8002f86:	9308      	str	r3, [sp, #32]
 8002f88:	f7fe f830 	bl	8000fec <__aeabi_fcmplt>
 8002f8c:	9b08      	ldr	r3, [sp, #32]
 8002f8e:	b128      	cbz	r0, 8002f9c <gc_execute_line+0x1104>
                gc_block.values.r = -gc_block.values.r; // Finished with r. Set to positive for mc_arc
 8002f90:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
                h_x2_div_d = -h_x2_div_d;
 8002f94:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
                gc_block.values.r = -gc_block.values.r; // Finished with r. Set to positive for mc_arc
 8002f98:	f8c9 302c 	str.w	r3, [r9, #44]	; 0x2c
            gc_block.values.ijk[axis_0] = 0.5f*(x-(y*h_x2_div_d));
 8002f9c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002f9e:	4628      	mov	r0, r5
 8002fa0:	f7fd fe86 	bl	8000cb0 <__aeabi_fmul>
 8002fa4:	4601      	mov	r1, r0
 8002fa6:	4658      	mov	r0, fp
 8002fa8:	f7fd fd78 	bl	8000a9c <__aeabi_fsub>
 8002fac:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002fb0:	f7fd fe7e 	bl	8000cb0 <__aeabi_fmul>
 8002fb4:	3702      	adds	r7, #2
 8002fb6:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8002fba:	60b8      	str	r0, [r7, #8]
            gc_block.values.ijk[axis_1] = 0.5f*(y+(x*h_x2_div_d));
 8002fbc:	4659      	mov	r1, fp
 8002fbe:	4628      	mov	r0, r5
 8002fc0:	f7fd fe76 	bl	8000cb0 <__aeabi_fmul>
 8002fc4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002fc6:	f7fd fd6b 	bl	8000aa0 <__addsf3>
 8002fca:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002fce:	f7fd fe6f 	bl	8000cb0 <__aeabi_fmul>
 8002fd2:	3602      	adds	r6, #2
 8002fd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002fd6:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8002fda:	f003 0201 	and.w	r2, r3, #1
 8002fde:	60b0      	str	r0, [r6, #8]
 8002fe0:	f7ff bba9 	b.w	8002736 <gc_execute_line+0x89e>
            if (gc_block.modal.units == UNITS_MODE_INCHES) {
 8002fe4:	f899 3003 	ldrb.w	r3, [r9, #3]
            bit_false(value_words,(bit(WORD_I)|bit(WORD_J)|bit(WORD_K)));
 8002fe8:	f028 080e 	bic.w	r8, r8, #14
            if (gc_block.modal.units == UNITS_MODE_INCHES) {
 8002fec:	2b01      	cmp	r3, #1
            bit_false(value_words,(bit(WORD_I)|bit(WORD_J)|bit(WORD_K)));
 8002fee:	fa1f f888 	uxth.w	r8, r8
            if (gc_block.modal.units == UNITS_MODE_INCHES) {
 8002ff2:	f000 80b5 	beq.w	8003160 <gc_execute_line+0x12c8>
            y -= gc_block.values.ijk[axis_1]; // Delta y between circle center and target
 8002ff6:	1cb5      	adds	r5, r6, #2
 8002ff8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8002ffc:	68a9      	ldr	r1, [r5, #8]
 8002ffe:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003000:	f7fd fd4c 	bl	8000a9c <__aeabi_fsub>
 8003004:	4606      	mov	r6, r0
            x -= gc_block.values.ijk[axis_0]; // Delta x between circle center and target
 8003006:	3702      	adds	r7, #2
 8003008:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800300c:	68b9      	ldr	r1, [r7, #8]
 800300e:	4658      	mov	r0, fp
 8003010:	f7fd fd44 	bl	8000a9c <__aeabi_fsub>
            float target_r = hypot_f(x,y);
 8003014:	4631      	mov	r1, r6
 8003016:	f001 f92b 	bl	8004270 <hypot_f>
            gc_block.values.r = hypot_f(gc_block.values.ijk[axis_0], gc_block.values.ijk[axis_1]);
 800301a:	68a9      	ldr	r1, [r5, #8]
            float target_r = hypot_f(x,y);
 800301c:	4606      	mov	r6, r0
            gc_block.values.r = hypot_f(gc_block.values.ijk[axis_0], gc_block.values.ijk[axis_1]);
 800301e:	68b8      	ldr	r0, [r7, #8]
 8003020:	f001 f926 	bl	8004270 <hypot_f>
 8003024:	4607      	mov	r7, r0
            float delta_r = fabsf(target_r-gc_block.values.r);
 8003026:	4630      	mov	r0, r6
 8003028:	4639      	mov	r1, r7
            gc_block.values.r = hypot_f(gc_block.values.ijk[axis_0], gc_block.values.ijk[axis_1]);
 800302a:	f8c9 702c 	str.w	r7, [r9, #44]	; 0x2c
            float delta_r = fabsf(target_r-gc_block.values.r);
 800302e:	f7fd fd35 	bl	8000a9c <__aeabi_fsub>
 8003032:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
            if (delta_r > 0.005f) {
 8003036:	4628      	mov	r0, r5
 8003038:	4911      	ldr	r1, [pc, #68]	; (8003080 <gc_execute_line+0x11e8>)
 800303a:	f7fd fff5 	bl	8001028 <__aeabi_fcmpgt>
 800303e:	2800      	cmp	r0, #0
 8003040:	f43f af4f 	beq.w	8002ee2 <gc_execute_line+0x104a>
              if (delta_r > 0.5f) { FAIL(STATUS_GCODE_INVALID_TARGET); } // [Arc definition error] > 0.5mm
 8003044:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003048:	4628      	mov	r0, r5
 800304a:	f7fd ffed 	bl	8001028 <__aeabi_fcmpgt>
 800304e:	2800      	cmp	r0, #0
 8003050:	f47f aeed 	bne.w	8002e2e <gc_execute_line+0xf96>
              if (delta_r > (0.001f*gc_block.values.r)) { FAIL(STATUS_GCODE_INVALID_TARGET); } // [Arc definition error] > 0.005mm AND 0.1% radius
 8003054:	490b      	ldr	r1, [pc, #44]	; (8003084 <gc_execute_line+0x11ec>)
 8003056:	4638      	mov	r0, r7
 8003058:	f7fd fe2a 	bl	8000cb0 <__aeabi_fmul>
 800305c:	4601      	mov	r1, r0
 800305e:	4628      	mov	r0, r5
 8003060:	f7fd ffe2 	bl	8001028 <__aeabi_fcmpgt>
 8003064:	2800      	cmp	r0, #0
 8003066:	f47f aee2 	bne.w	8002e2e <gc_execute_line+0xf96>
 800306a:	e73a      	b.n	8002ee2 <gc_execute_line+0x104a>
 800306c:	20001048 	.word	0x20001048
 8003070:	200010b4 	.word	0x200010b4
 8003074:	2000108c 	.word	0x2000108c
 8003078:	2000102c 	.word	0x2000102c
 800307c:	41cb3333 	.word	0x41cb3333
 8003080:	3ba3d70a 	.word	0x3ba3d70a
 8003084:	3a83126f 	.word	0x3a83126f
    gc_state.modal.tool_length = gc_block.modal.tool_length;
 8003088:	f899 3006 	ldrb.w	r3, [r9, #6]
 800308c:	714b      	strb	r3, [r1, #5]
    if (gc_state.modal.tool_length == TOOL_LENGTH_OFFSET_CANCEL) { // G49
 800308e:	b913      	cbnz	r3, 8003096 <gc_execute_line+0x11fe>
      gc_block.values.xyz[TOOL_LENGTH_OFFSET_AXIS] = 0.0f;
 8003090:	2300      	movs	r3, #0
 8003092:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
    if ( gc_state.tool_length_offset != gc_block.values.xyz[TOOL_LENGTH_OFFSET_AXIS] ) {
 8003096:	f8d9 4040 	ldr.w	r4, [r9, #64]	; 0x40
 800309a:	4b3f      	ldr	r3, [pc, #252]	; (8003198 <gc_execute_line+0x1300>)
 800309c:	4621      	mov	r1, r4
 800309e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80030a0:	f7fd ff9a 	bl	8000fd8 <__aeabi_fcmpeq>
 80030a4:	2800      	cmp	r0, #0
 80030a6:	f47f adab 	bne.w	8002c00 <gc_execute_line+0xd68>
      gc_state.tool_length_offset = gc_block.values.xyz[TOOL_LENGTH_OFFSET_AXIS];
 80030aa:	4b3b      	ldr	r3, [pc, #236]	; (8003198 <gc_execute_line+0x1300>)
 80030ac:	64dc      	str	r4, [r3, #76]	; 0x4c
      system_flag_wco_change();
 80030ae:	f006 fd19 	bl	8009ae4 <system_flag_wco_change>
 80030b2:	e5a5      	b.n	8002c00 <gc_execute_line+0xd68>
      } else if (gc_update_pos == GC_UPDATE_POS_SYSTEM) {
 80030b4:	2801      	cmp	r0, #1
 80030b6:	f47f add1 	bne.w	8002c5c <gc_execute_line+0xdc4>
  system_convert_array_steps_to_mpos(gc_state.position,sys_position);
 80030ba:	4938      	ldr	r1, [pc, #224]	; (800319c <gc_execute_line+0x1304>)
 80030bc:	4838      	ldr	r0, [pc, #224]	; (80031a0 <gc_execute_line+0x1308>)
 80030be:	f006 fd1b 	bl	8009af8 <system_convert_array_steps_to_mpos>
 80030c2:	e5cb      	b.n	8002c5c <gc_execute_line+0xdc4>
          mc_arc(gc_block.values.xyz, pl_data, gc_state.position, gc_block.values.ijk, gc_block.values.r,
 80030c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80030c6:	4d37      	ldr	r5, [pc, #220]	; (80031a4 <gc_execute_line+0x130c>)
 80030c8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80030cc:	9304      	str	r3, [sp, #16]
 80030ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80030d0:	4c33      	ldr	r4, [pc, #204]	; (80031a0 <gc_execute_line+0x1308>)
 80030d2:	9303      	str	r3, [sp, #12]
 80030d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80030d6:	f8d9 602c 	ldr.w	r6, [r9, #44]	; 0x2c
 80030da:	9302      	str	r3, [sp, #8]
 80030dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80030de:	a917      	add	r1, sp, #92	; 0x5c
 80030e0:	9301      	str	r3, [sp, #4]
 80030e2:	4622      	mov	r2, r4
 80030e4:	f1a5 0328 	sub.w	r3, r5, #40	; 0x28
 80030e8:	4628      	mov	r0, r5
 80030ea:	9600      	str	r6, [sp, #0]
 80030ec:	f000 fcf0 	bl	8003ad0 <mc_arc>
 80030f0:	e610      	b.n	8002d14 <gc_execute_line+0xe7c>
        pl_data->condition |= PL_COND_FLAG_RAPID_MOTION; // Set rapid motion condition flag.
 80030f2:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
        mc_line(gc_block.values.xyz, pl_data);
 80030f6:	4d2b      	ldr	r5, [pc, #172]	; (80031a4 <gc_execute_line+0x130c>)
        pl_data->condition |= PL_COND_FLAG_RAPID_MOTION; // Set rapid motion condition flag.
 80030f8:	f043 0301 	orr.w	r3, r3, #1
        mc_line(gc_block.values.xyz, pl_data);
 80030fc:	a917      	add	r1, sp, #92	; 0x5c
 80030fe:	4628      	mov	r0, r5
        pl_data->condition |= PL_COND_FLAG_RAPID_MOTION; // Set rapid motion condition flag.
 8003100:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 8003104:	4c26      	ldr	r4, [pc, #152]	; (80031a0 <gc_execute_line+0x1308>)
        mc_line(gc_block.values.xyz, pl_data);
 8003106:	f000 fcad 	bl	8003a64 <mc_line>
 800310a:	e603      	b.n	8002d14 <gc_execute_line+0xe7c>
        mc_line(gc_block.values.xyz, pl_data);
 800310c:	4d25      	ldr	r5, [pc, #148]	; (80031a4 <gc_execute_line+0x130c>)
 800310e:	a917      	add	r1, sp, #92	; 0x5c
 8003110:	4628      	mov	r0, r5
 8003112:	f000 fca7 	bl	8003a64 <mc_line>
 8003116:	4c22      	ldr	r4, [pc, #136]	; (80031a0 <gc_execute_line+0x1308>)
 8003118:	e5fc      	b.n	8002d14 <gc_execute_line+0xe7c>
            || (gc_state.modal.motion == MOTION_MODE_CCW_ARC)) {
 800311a:	4b1f      	ldr	r3, [pc, #124]	; (8003198 <gc_execute_line+0x1300>)
            if (bit_istrue(gc_parser_flags, GC_PARSER_LASER_DISABLE)) {
 800311c:	9a09      	ldr	r2, [sp, #36]	; 0x24
            || (gc_state.modal.motion == MOTION_MODE_CCW_ARC)) {
 800311e:	781b      	ldrb	r3, [r3, #0]
          if ((gc_state.modal.motion == MOTION_MODE_LINEAR) || (gc_state.modal.motion == MOTION_MODE_CW_ARC)
 8003120:	3b01      	subs	r3, #1
 8003122:	2b02      	cmp	r3, #2
            if (bit_istrue(gc_parser_flags, GC_PARSER_LASER_DISABLE)) {
 8003124:	4613      	mov	r3, r2
          if ((gc_state.modal.motion == MOTION_MODE_LINEAR) || (gc_state.modal.motion == MOTION_MODE_CW_ARC)
 8003126:	d812      	bhi.n	800314e <gc_execute_line+0x12b6>
            if (bit_istrue(gc_parser_flags, GC_PARSER_LASER_DISABLE)) {
 8003128:	f012 0440 	ands.w	r4, r2, #64	; 0x40
 800312c:	f43f accb 	beq.w	8002ac6 <gc_execute_line+0xc2e>
              gc_parser_flags |= GC_PARSER_LASER_FORCE_SYNC;
 8003130:	f043 0320 	orr.w	r3, r3, #32
 8003134:	b2db      	uxtb	r3, r3
 8003136:	9309      	str	r3, [sp, #36]	; 0x24
 8003138:	f003 0440 	and.w	r4, r3, #64	; 0x40
 800313c:	e4c3      	b.n	8002ac6 <gc_execute_line+0xc2e>
        gc_parser_flags |= GC_PARSER_LASER_ISMOTION;
 800313e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003140:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003144:	b2db      	uxtb	r3, r3
 8003146:	9309      	str	r3, [sp, #36]	; 0x24
 8003148:	f003 0440 	and.w	r4, r3, #64	; 0x40
 800314c:	e4bb      	b.n	8002ac6 <gc_execute_line+0xc2e>
            if (bit_isfalse(gc_parser_flags, GC_PARSER_LASER_DISABLE)) {
 800314e:	f012 0440 	ands.w	r4, r2, #64	; 0x40
 8003152:	f47f acb8 	bne.w	8002ac6 <gc_execute_line+0xc2e>
 8003156:	e7eb      	b.n	8003130 <gc_execute_line+0x1298>
          else { spindle_sync(gc_state.modal.spindle, gc_block.values.s); }
 8003158:	4629      	mov	r1, r5
 800315a:	f005 f8ad 	bl	80082b8 <spindle_sync>
 800315e:	e4d8      	b.n	8002b12 <gc_execute_line+0xc7a>
 8003160:	4b11      	ldr	r3, [pc, #68]	; (80031a8 <gc_execute_line+0x1310>)
                if (ijk_words & bit(idx)) { gc_block.values.ijk[idx] *= MM_PER_INCH; }
 8003162:	960b      	str	r6, [sp, #44]	; 0x2c
 8003164:	4626      	mov	r6, r4
 8003166:	461c      	mov	r4, r3
 8003168:	4a10      	ldr	r2, [pc, #64]	; (80031ac <gc_execute_line+0x1314>)
 800316a:	9b08      	ldr	r3, [sp, #32]
 800316c:	fa43 f105 	asr.w	r1, r3, r5
 8003170:	f011 0f01 	tst.w	r1, #1
 8003174:	f105 0501 	add.w	r5, r5, #1
 8003178:	d006      	beq.n	8003188 <gc_execute_line+0x12f0>
 800317a:	4611      	mov	r1, r2
 800317c:	6820      	ldr	r0, [r4, #0]
 800317e:	920c      	str	r2, [sp, #48]	; 0x30
 8003180:	f7fd fd96 	bl	8000cb0 <__aeabi_fmul>
 8003184:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003186:	6020      	str	r0, [r4, #0]
              for (idx=0; idx<N_AXIS; idx++) { // Axes indices are consistent, so loop may be used to save flash space.
 8003188:	2d04      	cmp	r5, #4
 800318a:	f104 0404 	add.w	r4, r4, #4
 800318e:	d1ec      	bne.n	800316a <gc_execute_line+0x12d2>
 8003190:	4634      	mov	r4, r6
 8003192:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8003194:	e72f      	b.n	8002ff6 <gc_execute_line+0x115e>
 8003196:	bf00      	nop
 8003198:	2000102c 	.word	0x2000102c
 800319c:	200010f0 	.word	0x200010f0
 80031a0:	20001048 	.word	0x20001048
 80031a4:	200010b4 	.word	0x200010b4
 80031a8:	2000108c 	.word	0x2000108c
 80031ac:	41cb3333 	.word	0x41cb3333

080031b0 <jog_execute>:
#include "grbl.h"


// Sets up valid jog motion received from g-code parser, checks for soft-limits, and executes the jog.
uint8_t jog_execute(plan_line_data_t *pl_data, parser_block_t *gc_block)
{
 80031b0:	b570      	push	{r4, r5, r6, lr}
 80031b2:	4605      	mov	r5, r0
  // Initialize planner data struct for jogging motions.
  // NOTE: Spindle and coolant are allowed to fully function with overrides during a jog.
  pl_data->feed_rate = gc_block->values.f;
  pl_data->condition |= PL_COND_FLAG_NO_FEED_OVERRIDE;
 80031b4:	7a03      	ldrb	r3, [r0, #8]
  pl_data->feed_rate = gc_block->values.f;
 80031b6:	68c8      	ldr	r0, [r1, #12]
  pl_data->condition |= PL_COND_FLAG_NO_FEED_OVERRIDE;
 80031b8:	f043 0304 	orr.w	r3, r3, #4
#ifdef USE_LINE_NUMBERS
  pl_data->line_number = gc_block->values.n;
#endif

  if (bit_istrue(settings.flags, BITFLAG_SOFT_LIMIT_ENABLE)) {
 80031bc:	4a12      	ldr	r2, [pc, #72]	; (8003208 <jog_execute+0x58>)
  pl_data->feed_rate = gc_block->values.f;
 80031be:	6028      	str	r0, [r5, #0]
  pl_data->condition |= PL_COND_FLAG_NO_FEED_OVERRIDE;
 80031c0:	722b      	strb	r3, [r5, #8]
  if (bit_istrue(settings.flags, BITFLAG_SOFT_LIMIT_ENABLE)) {
 80031c2:	f892 3058 	ldrb.w	r3, [r2, #88]	; 0x58
    if (system_check_travel_limits(gc_block->values.xyz)) { return(STATUS_TRAVEL_EXCEEDED); }
 80031c6:	f101 0438 	add.w	r4, r1, #56	; 0x38
  if (bit_istrue(settings.flags, BITFLAG_SOFT_LIMIT_ENABLE)) {
 80031ca:	069b      	lsls	r3, r3, #26
 80031cc:	d506      	bpl.n	80031dc <jog_execute+0x2c>
    if (system_check_travel_limits(gc_block->values.xyz)) { return(STATUS_TRAVEL_EXCEEDED); }
 80031ce:	4620      	mov	r0, r4
 80031d0:	f006 fcb6 	bl	8009b40 <system_check_travel_limits>
 80031d4:	b110      	cbz	r0, 80031dc <jog_execute+0x2c>
 80031d6:	240f      	movs	r4, #15
      st_wake_up();  // NOTE: Manual start. No state machine required.
    }
  }

  return(STATUS_OK);
}
 80031d8:	4620      	mov	r0, r4
 80031da:	bd70      	pop	{r4, r5, r6, pc}
  if (sys.state == STATE_IDLE) {
 80031dc:	4e0b      	ldr	r6, [pc, #44]	; (800320c <jog_execute+0x5c>)
  mc_line(gc_block->values.xyz, pl_data);
 80031de:	4620      	mov	r0, r4
 80031e0:	4629      	mov	r1, r5
 80031e2:	f000 fc3f 	bl	8003a64 <mc_line>
  if (sys.state == STATE_IDLE) {
 80031e6:	7834      	ldrb	r4, [r6, #0]
 80031e8:	b114      	cbz	r4, 80031f0 <jog_execute+0x40>
  return(STATUS_OK);
 80031ea:	2400      	movs	r4, #0
}
 80031ec:	4620      	mov	r0, r4
 80031ee:	bd70      	pop	{r4, r5, r6, pc}
    if (plan_get_current_block() != NULL) { // Check if there is a block to execute.
 80031f0:	f001 fa4c 	bl	800468c <plan_get_current_block>
 80031f4:	2800      	cmp	r0, #0
 80031f6:	d0f8      	beq.n	80031ea <jog_execute+0x3a>
      sys.state = STATE_JOG;
 80031f8:	2320      	movs	r3, #32
 80031fa:	7033      	strb	r3, [r6, #0]
      st_prep_buffer();
 80031fc:	f005 fcae 	bl	8008b5c <st_prep_buffer>
      st_wake_up();  // NOTE: Manual start. No state machine required.
 8003200:	f005 f910 	bl	8008424 <st_wake_up>
}
 8003204:	4620      	mov	r0, r4
 8003206:	bd70      	pop	{r4, r5, r6, pc}
 8003208:	20001404 	.word	0x20001404
 800320c:	200010c8 	.word	0x200010c8

08003210 <limits_init>:
#ifndef HOMING_AXIS_LOCATE_SCALAR
  #define HOMING_AXIS_LOCATE_SCALAR  5.0f // Must be > 1 to ensure limit switch is cleared.
#endif

void limits_init()
{
 8003210:	b530      	push	{r4, r5, lr}
    WDTCSR = (1<<WDP0); // Set time-out at ~32msec.
  #endif
#endif
#ifdef STM32F103C8
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_APB2PeriphClockCmd(RCC_LIMIT_PORT | RCC_APB2Periph_AFIO, ENABLE);
 8003212:	2101      	movs	r1, #1
{
 8003214:	b085      	sub	sp, #20
	RCC_APB2PeriphClockCmd(RCC_LIMIT_PORT | RCC_APB2Periph_AFIO, ENABLE);
 8003216:	2009      	movs	r0, #9
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
#else
	//GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPD; // ZZZZZZZZZZZZZZZZZZZZZZ
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
#endif
	GPIO_InitStructure.GPIO_Pin = LIMIT_MASK;
 8003218:	f44f 4470 	mov.w	r4, #61440	; 0xf000
	RCC_APB2PeriphClockCmd(RCC_LIMIT_PORT | RCC_APB2Periph_AFIO, ENABLE);
 800321c:	f7fe fb62 	bl	80018e4 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 8003220:	2348      	movs	r3, #72	; 0x48
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8003222:	2203      	movs	r2, #3
	GPIO_InitStructure.GPIO_Pin = LIMIT_MASK;
 8003224:	a904      	add	r1, sp, #16
	GPIO_Init(LIMIT_PORT, &GPIO_InitStructure);

	if (bit_istrue(settings.flags, BITFLAG_HARD_LIMIT_ENABLE))
 8003226:	4d21      	ldr	r5, [pc, #132]	; (80032ac <limits_init+0x9c>)
	GPIO_InitStructure.GPIO_Pin = LIMIT_MASK;
 8003228:	f821 4d10 	strh.w	r4, [r1, #-16]!
	GPIO_Init(LIMIT_PORT, &GPIO_InitStructure);
 800322c:	4820      	ldr	r0, [pc, #128]	; (80032b0 <limits_init+0xa0>)
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 800322e:	f88d 3003 	strb.w	r3, [sp, #3]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8003232:	f88d 2002 	strb.w	r2, [sp, #2]
	GPIO_Init(LIMIT_PORT, &GPIO_InitStructure);
 8003236:	f7fe f8e3 	bl	8001400 <GPIO_Init>
	if (bit_istrue(settings.flags, BITFLAG_HARD_LIMIT_ENABLE))
 800323a:	f895 3058 	ldrb.w	r3, [r5, #88]	; 0x58
 800323e:	071b      	lsls	r3, r3, #28
 8003240:	d406      	bmi.n	8003250 <limits_init+0x40>

    \param [in]      IRQn  Number of the external interrupt to disable
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 8003242:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003246:	4b1b      	ldr	r3, [pc, #108]	; (80032b4 <limits_init+0xa4>)
 8003248:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	else
	{
		limits_disable();
	}
#endif
}
 800324c:	b005      	add	sp, #20
 800324e:	bd30      	pop	{r4, r5, pc}
		delay_ms(100); // added by MS for debug (issue#14)
 8003250:	2064      	movs	r0, #100	; 0x64
 8003252:	f000 fffd 	bl	8004250 <delay_ms>
		GPIO_EXTILineConfig(GPIO_LIMIT_PORT, X_LIMIT_BIT);
 8003256:	210c      	movs	r1, #12
 8003258:	2001      	movs	r0, #1
 800325a:	f7fe facf 	bl	80017fc <GPIO_EXTILineConfig>
		GPIO_EXTILineConfig(GPIO_LIMIT_PORT, Y_LIMIT_BIT);
 800325e:	210d      	movs	r1, #13
 8003260:	2001      	movs	r0, #1
 8003262:	f7fe facb 	bl	80017fc <GPIO_EXTILineConfig>
		GPIO_EXTILineConfig(GPIO_LIMIT_PORT, Z_LIMIT_BIT);
 8003266:	210e      	movs	r1, #14
 8003268:	2001      	movs	r0, #1
 800326a:	f7fe fac7 	bl	80017fc <GPIO_EXTILineConfig>
		GPIO_EXTILineConfig(GPIO_LIMIT_PORT, A_LIMIT_BIT);
 800326e:	210f      	movs	r1, #15
 8003270:	2001      	movs	r0, #1
 8003272:	f7fe fac3 	bl	80017fc <GPIO_EXTILineConfig>
		if (bit_istrue(settings.flags, BITFLAG_INVERT_LIMIT_PINS )) { // for normally closed switches, we need to interrupt on the rising edge
 8003276:	f895 3058 	ldrb.w	r3, [r5, #88]	; 0x58
		EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt; //Interrupt mode, optional values for the interrupt EXTI_Mode_Interrupt and event EXTI_Mode_Event.
 800327a:	2200      	movs	r2, #0
		if (bit_istrue(settings.flags, BITFLAG_INVERT_LIMIT_PINS )) { // for normally closed switches, we need to interrupt on the rising edge
 800327c:	f013 0f40 	tst.w	r3, #64	; 0x40
			EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling; //Trigger mode, can be a falling edge trigger EXTI_Trigger_Falling, the rising edge triggered EXTI_Trigger_Rising, or any level (rising edge and falling edge trigger EXTI_Trigger_Rising_Falling)
 8003280:	bf14      	ite	ne
 8003282:	2108      	movne	r1, #8
 8003284:	210c      	moveq	r1, #12
		EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8003286:	2301      	movs	r3, #1
		EXTI_Init(&EXTI_InitStructure);
 8003288:	a802      	add	r0, sp, #8
 800328a:	f88d 100d 	strb.w	r1, [sp, #13]
		EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt; //Interrupt mode, optional values for the interrupt EXTI_Mode_Interrupt and event EXTI_Mode_Event.
 800328e:	f88d 200c 	strb.w	r2, [sp, #12]
		EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8003292:	f88d 300e 	strb.w	r3, [sp, #14]
		EXTI_InitStructure.EXTI_Line = LIMIT_MASK;    //
 8003296:	9402      	str	r4, [sp, #8]
		EXTI_Init(&EXTI_InitStructure);
 8003298:	f7fd ff68 	bl	800116c <EXTI_Init>
		NVIC_InitStructure.NVIC_IRQChannel = EXTI15_10_IRQn; //Enable keypad external interrupt channel
 800329c:	4b06      	ldr	r3, [pc, #24]	; (80032b8 <limits_init+0xa8>)
 800329e:	a804      	add	r0, sp, #16
 80032a0:	f840 3d0c 	str.w	r3, [r0, #-12]!
		NVIC_Init(&NVIC_InitStructure);
 80032a4:	f7fd ff30 	bl	8001108 <NVIC_Init>
}
 80032a8:	b005      	add	sp, #20
 80032aa:	bd30      	pop	{r4, r5, pc}
 80032ac:	20001404 	.word	0x20001404
 80032b0:	40010c00 	.word	0x40010c00
 80032b4:	e000e100 	.word	0xe000e100
 80032b8:	01020228 	.word	0x01020228

080032bc <limits_disable>:
 80032bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032c0:	4b01      	ldr	r3, [pc, #4]	; (80032c8 <limits_disable+0xc>)
 80032c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80032c6:	4770      	bx	lr
 80032c8:	e000e100 	.word	0xe000e100

080032cc <limits_get_state>:

// Returns limit state as a bit-wise uint8 variable. Each bit indicates an axis limit, where
// triggered is 1 and not triggered is 0. Invert mask is applied. Axes are defined by their
// number in bit position, i.e. Z_AXIS is (1<<2) or bit 2, and Y_AXIS is (1<<1) or bit 1.
uint8_t limits_get_state()
{
 80032cc:	b570      	push	{r4, r5, r6, lr}
  bool bouncy_detected = false;	// ZZZZZZZZZZ

  // uint16_t pin = GPIO_ReadInputData(LIMIT_PIN); // original

  uint16_t pin, pin2 = 0;
  pin = GPIO_ReadInputData(LIMIT_PIN);
 80032ce:	481d      	ldr	r0, [pc, #116]	; (8003344 <limits_get_state+0x78>)
 80032d0:	f7fe fa4c 	bl	800176c <GPIO_ReadInputData>
		  // do something???
	  }
  }
  */

  uint8_t i = 0;
 80032d4:	2400      	movs	r4, #0
  pin = GPIO_ReadInputData(LIMIT_PIN);
 80032d6:	4605      	mov	r5, r0
  do{
	  pin2 = GPIO_ReadInputData(LIMIT_PIN);
 80032d8:	4e1a      	ldr	r6, [pc, #104]	; (8003344 <limits_get_state+0x78>)
 80032da:	481a      	ldr	r0, [pc, #104]	; (8003344 <limits_get_state+0x78>)
 80032dc:	f7fe fa46 	bl	800176c <GPIO_ReadInputData>
	  {
		  bouncy_detected = true;
		  i = 0;
		  pin = GPIO_ReadInputData(LIMIT_PIN);
	  }
	  i++;
 80032e0:	3401      	adds	r4, #1
	  if(pin != pin2)
 80032e2:	4285      	cmp	r5, r0
	  i++;
 80032e4:	b2e4      	uxtb	r4, r4
	  if(pin != pin2)
 80032e6:	d005      	beq.n	80032f4 <limits_get_state+0x28>
		  pin = GPIO_ReadInputData(LIMIT_PIN);
 80032e8:	4630      	mov	r0, r6
 80032ea:	f7fe fa3f 	bl	800176c <GPIO_ReadInputData>
	  i++;
 80032ee:	2401      	movs	r4, #1
		  pin = GPIO_ReadInputData(LIMIT_PIN);
 80032f0:	4605      	mov	r5, r0
 80032f2:	e7f2      	b.n	80032da <limits_get_state+0xe>
  } while (i<READ_CNT);
 80032f4:	2c09      	cmp	r4, #9
 80032f6:	d9f0      	bls.n	80032da <limits_get_state+0xe>

#endif
  #ifdef INVERT_LIMIT_PIN_MASK
    pin ^= INVERT_LIMIT_PIN_MASK;
  #endif
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_LIMIT_PINS)) { pin ^= LIMIT_MASK; }
 80032f8:	4b13      	ldr	r3, [pc, #76]	; (8003348 <limits_get_state+0x7c>)
 80032fa:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80032fe:	065b      	lsls	r3, r3, #25
 8003300:	bf5c      	itt	pl
 8003302:	f485 4570 	eorpl.w	r5, r5, #61440	; 0xf000
 8003306:	b2ad      	uxthpl	r5, r5
  if (pin) {
 8003308:	b1d5      	cbz	r5, 8003340 <limits_get_state+0x74>
    uint8_t idx;
    for (idx=0; idx<N_AXIS; idx++) {
      if (pin & limit_pin_mask[idx]) { limit_state |= (1 << idx); }
 800330a:	4a10      	ldr	r2, [pc, #64]	; (800334c <limits_get_state+0x80>)
 800330c:	8813      	ldrh	r3, [r2, #0]
 800330e:	8851      	ldrh	r1, [r2, #2]
 8003310:	421d      	tst	r5, r3
 8003312:	bf19      	ittee	ne
 8003314:	2003      	movne	r0, #3
 8003316:	2301      	movne	r3, #1
 8003318:	2300      	moveq	r3, #0
 800331a:	2002      	moveq	r0, #2
 800331c:	420d      	tst	r5, r1
 800331e:	bf18      	it	ne
 8003320:	4603      	movne	r3, r0
 8003322:	8891      	ldrh	r1, [r2, #4]
 8003324:	f043 0004 	orr.w	r0, r3, #4
 8003328:	420d      	tst	r5, r1
 800332a:	bf08      	it	eq
 800332c:	4618      	moveq	r0, r3
 800332e:	88d2      	ldrh	r2, [r2, #6]
 8003330:	f000 03ff 	and.w	r3, r0, #255	; 0xff
 8003334:	4215      	tst	r5, r2
 8003336:	f043 0008 	orr.w	r0, r3, #8
 800333a:	bf08      	it	eq
 800333c:	4618      	moveq	r0, r3
 800333e:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t limit_state = 0;
 8003340:	4628      	mov	r0, r5
    }
  }
#endif
  return(limit_state);
}
 8003342:	bd70      	pop	{r4, r5, r6, pc}
 8003344:	40010c00 	.word	0x40010c00
 8003348:	20001404 	.word	0x20001404
 800334c:	0800c870 	.word	0x0800c870

08003350 <EXTI15_10_IRQHandler>:
#if defined(AVRTARGET) 
ISR(LIMIT_INT_vect) // DEFAULT: Limit pin change interrupt process.
#else
void EXTI15_10_IRQHandler(void)
#endif
{
 8003350:	b508      	push	{r3, lr}
#if defined (STM32F103C8)
	if (EXTI_GetITStatus(1 << X_LIMIT_BIT) != RESET)
 8003352:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003356:	f7fd ff47 	bl	80011e8 <EXTI_GetITStatus>
 800335a:	bb88      	cbnz	r0, 80033c0 <EXTI15_10_IRQHandler+0x70>
	{
		EXTI_ClearITPendingBit(1 << X_LIMIT_BIT);
	}
	if (EXTI_GetITStatus(1 << Y_LIMIT_BIT) != RESET)
 800335c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003360:	f7fd ff42 	bl	80011e8 <EXTI_GetITStatus>
 8003364:	bb38      	cbnz	r0, 80033b6 <EXTI15_10_IRQHandler+0x66>
	{
		EXTI_ClearITPendingBit(1 << Y_LIMIT_BIT);
	}
	if (EXTI_GetITStatus(1 << Z_LIMIT_BIT) != RESET)
 8003366:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800336a:	f7fd ff3d 	bl	80011e8 <EXTI_GetITStatus>
 800336e:	b9e8      	cbnz	r0, 80033ac <EXTI15_10_IRQHandler+0x5c>
	{
		EXTI_ClearITPendingBit(1 << Z_LIMIT_BIT);
	}
// --- YSV 22-06-2018
	#if defined(AA_AXIS) || defined(AB_AXIS) || defined(ABC_AXIS)
	if (EXTI_GetITStatus(1 << A_LIMIT_BIT) != RESET)
 8003370:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003374:	f7fd ff38 	bl	80011e8 <EXTI_GetITStatus>
 8003378:	b998      	cbnz	r0, 80033a2 <EXTI15_10_IRQHandler+0x52>

    \param [in]      IRQn  Number of the interrupt for clear pending
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
 800337a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800337e:	4a13      	ldr	r2, [pc, #76]	; (80033cc <EXTI15_10_IRQHandler+0x7c>)
  // Ignore limit switches if already in an alarm state or in-process of executing an alarm.
  // When in the alarm state, Grbl should have been reset or will force a reset, so any pending
  // moves in the planner and serial buffers are all cleared and newly sent blocks will be
  // locked out until a homing cycle or a kill lock command. Allows the user to disable the hard
  // limit setting if their limits are constantly triggering after a reset and move their axes.
  if (sys.state != STATE_ALARM) {
 8003380:	4b13      	ldr	r3, [pc, #76]	; (80033d0 <EXTI15_10_IRQHandler+0x80>)
 8003382:	f8c2 1184 	str.w	r1, [r2, #388]	; 0x184
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	2b01      	cmp	r3, #1
 800338a:	d002      	beq.n	8003392 <EXTI15_10_IRQHandler+0x42>
    if (!(sys_rt_exec_alarm)) {
 800338c:	4b11      	ldr	r3, [pc, #68]	; (80033d4 <EXTI15_10_IRQHandler+0x84>)
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	b103      	cbz	r3, 8003394 <EXTI15_10_IRQHandler+0x44>
 8003392:	bd08      	pop	{r3, pc}
      if (limits_get_state()) {
        mc_reset(); // Initiate system kill.
        system_set_exec_alarm(EXEC_ALARM_HARD_LIMIT); // Indicate hard limit critical event
      }
#else
      mc_reset(); // Initiate system kill.
 8003394:	f000 fe6c 	bl	8004070 <mc_reset>
      system_set_exec_alarm(EXEC_ALARM_HARD_LIMIT); // Indicate hard limit critical event
#endif
    }
  }
}
 8003398:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      system_set_exec_alarm(EXEC_ALARM_HARD_LIMIT); // Indicate hard limit critical event
 800339c:	2001      	movs	r0, #1
 800339e:	f006 bc61 	b.w	8009c64 <system_set_exec_alarm>
		EXTI_ClearITPendingBit(1 << A_LIMIT_BIT);
 80033a2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80033a6:	f7fd ff2d 	bl	8001204 <EXTI_ClearITPendingBit>
 80033aa:	e7e6      	b.n	800337a <EXTI15_10_IRQHandler+0x2a>
		EXTI_ClearITPendingBit(1 << Z_LIMIT_BIT);
 80033ac:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80033b0:	f7fd ff28 	bl	8001204 <EXTI_ClearITPendingBit>
 80033b4:	e7dc      	b.n	8003370 <EXTI15_10_IRQHandler+0x20>
		EXTI_ClearITPendingBit(1 << Y_LIMIT_BIT);
 80033b6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80033ba:	f7fd ff23 	bl	8001204 <EXTI_ClearITPendingBit>
 80033be:	e7d2      	b.n	8003366 <EXTI15_10_IRQHandler+0x16>
		EXTI_ClearITPendingBit(1 << X_LIMIT_BIT);
 80033c0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80033c4:	f7fd ff1e 	bl	8001204 <EXTI_ClearITPendingBit>
 80033c8:	e7c8      	b.n	800335c <EXTI15_10_IRQHandler+0xc>
 80033ca:	bf00      	nop
 80033cc:	e000e100 	.word	0xe000e100
 80033d0:	200010c8 	.word	0x200010c8
 80033d4:	20001100 	.word	0x20001100

080033d8 <limits_go_home>:
// TODO: Move limit pin-specific calls to a general function for portability.
void limits_go_home(uint8_t cycle_mask)
{
  //char buffer[30];  // ZZZZZZZZZZZZZZ
  //printString("HOME START\r\n"); // ZZZZZZZZZZZZZZ
  if (sys.abort) { return; } // Block if system reset has been issued.
 80033d8:	4b97      	ldr	r3, [pc, #604]	; (8003638 <limits_go_home+0x260>)
 80033da:	785b      	ldrb	r3, [r3, #1]
 80033dc:	b103      	cbz	r3, 80033e0 <limits_go_home+0x8>
 80033de:	4770      	bx	lr
{
 80033e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033e4:	4605      	mov	r5, r0

  // Initialize plan data struct for homing motion. Spindle and coolant are disabled.
  plan_line_data_t plan_data;
  plan_line_data_t *pl_data = &plan_data;
  memset(pl_data,0,sizeof(plan_line_data_t));
  pl_data->condition = (PL_COND_FLAG_SYSTEM_MOTION|PL_COND_FLAG_NO_FEED_OVERRIDE);
 80033e6:	2406      	movs	r4, #6
 80033e8:	4994      	ldr	r1, [pc, #592]	; (800363c <limits_go_home+0x264>)
{
 80033ea:	b093      	sub	sp, #76	; 0x4c
 80033ec:	9006      	str	r0, [sp, #24]
    step_pin[idx] = step_pin_mask[idx];
    #ifdef COREXY
      if ((idx==A_MOTOR)||(idx==B_MOTOR)) { step_pin[idx] = (step_pin_mask[X_AXIS]| step_pin_mask[Y_AXIS]); }
    #endif

    if (bit_istrue(cycle_mask,bit(idx))) {
 80033ee:	f005 0501 	and.w	r5, r5, #1
 80033f2:	6808      	ldr	r0, [r1, #0]
 80033f4:	6849      	ldr	r1, [r1, #4]
  memset(pl_data,0,sizeof(plan_line_data_t));
 80033f6:	930d      	str	r3, [sp, #52]	; 0x34
 80033f8:	aa09      	add	r2, sp, #36	; 0x24
 80033fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80033fc:	930c      	str	r3, [sp, #48]	; 0x30
    if (bit_istrue(cycle_mask,bit(idx))) {
 80033fe:	f005 03ff 	and.w	r3, r5, #255	; 0xff
 8003402:	c203      	stmia	r2!, {r0, r1}
  pl_data->condition = (PL_COND_FLAG_SYSTEM_MOTION|PL_COND_FLAG_NO_FEED_OVERRIDE);
 8003404:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
    if (bit_istrue(cycle_mask,bit(idx))) {
 8003408:	9307      	str	r3, [sp, #28]
 800340a:	2d00      	cmp	r5, #0
 800340c:	f040 80cd 	bne.w	80035aa <limits_go_home+0x1d2>
  float max_travel = 0.0f;
 8003410:	2400      	movs	r4, #0
 8003412:	f8df 923c 	ldr.w	r9, [pc, #572]	; 8003650 <limits_go_home+0x278>
    if (bit_istrue(cycle_mask,bit(idx))) {
 8003416:	9b06      	ldr	r3, [sp, #24]
 8003418:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800341c:	9305      	str	r3, [sp, #20]
 800341e:	b15b      	cbz	r3, 8003438 <limits_go_home+0x60>
      // Set target based on max_travel setting. Ensure homing switches engaged with search scalar.
      // NOTE: settings.max_travel[] is stored as a negative value.
      max_travel = max(max_travel,(-HOMING_AXIS_SEARCH_SCALAR)*settings.max_travel[idx]);
 8003420:	4987      	ldr	r1, [pc, #540]	; (8003640 <limits_go_home+0x268>)
 8003422:	f8d9 0034 	ldr.w	r0, [r9, #52]	; 0x34
 8003426:	f7fd fc43 	bl	8000cb0 <__aeabi_fmul>
 800342a:	4606      	mov	r6, r0
 800342c:	4601      	mov	r1, r0
 800342e:	4620      	mov	r0, r4
 8003430:	f7fd fdf0 	bl	8001014 <__aeabi_fcmpge>
 8003434:	b900      	cbnz	r0, 8003438 <limits_go_home+0x60>
 8003436:	4634      	mov	r4, r6
    if (bit_istrue(cycle_mask,bit(idx))) {
 8003438:	9b06      	ldr	r3, [sp, #24]
 800343a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800343e:	9304      	str	r3, [sp, #16]
 8003440:	b15b      	cbz	r3, 800345a <limits_go_home+0x82>
      max_travel = max(max_travel,(-HOMING_AXIS_SEARCH_SCALAR)*settings.max_travel[idx]);
 8003442:	497f      	ldr	r1, [pc, #508]	; (8003640 <limits_go_home+0x268>)
 8003444:	f8d9 0038 	ldr.w	r0, [r9, #56]	; 0x38
 8003448:	f7fd fc32 	bl	8000cb0 <__aeabi_fmul>
 800344c:	4606      	mov	r6, r0
 800344e:	4601      	mov	r1, r0
 8003450:	4620      	mov	r0, r4
 8003452:	f7fd fddf 	bl	8001014 <__aeabi_fcmpge>
 8003456:	b900      	cbnz	r0, 800345a <limits_go_home+0x82>
 8003458:	4634      	mov	r4, r6
    if (bit_istrue(cycle_mask,bit(idx))) {
 800345a:	9b06      	ldr	r3, [sp, #24]
 800345c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003460:	9303      	str	r3, [sp, #12]
 8003462:	b15b      	cbz	r3, 800347c <limits_go_home+0xa4>
      max_travel = max(max_travel,(-HOMING_AXIS_SEARCH_SCALAR)*settings.max_travel[idx]);
 8003464:	4976      	ldr	r1, [pc, #472]	; (8003640 <limits_go_home+0x268>)
 8003466:	f8d9 003c 	ldr.w	r0, [r9, #60]	; 0x3c
 800346a:	f7fd fc21 	bl	8000cb0 <__aeabi_fmul>
 800346e:	4606      	mov	r6, r0
 8003470:	4601      	mov	r1, r0
 8003472:	4620      	mov	r0, r4
 8003474:	f7fd fdce 	bl	8001014 <__aeabi_fcmpge>
 8003478:	b900      	cbnz	r0, 800347c <limits_go_home+0xa4>
 800347a:	4634      	mov	r4, r6
 800347c:	b2eb      	uxtb	r3, r5
 800347e:	9302      	str	r3, [sp, #8]
    }
  }

  // Set search mode with approach at seek rate to quickly engage the specified cycle_mask limit switches.
  bool approach = true;
  float homing_rate = settings.homing_seek_rate;
 8003480:	2304      	movs	r3, #4
  bool approach = true;
 8003482:	2701      	movs	r7, #1
  float homing_rate = settings.homing_seek_rate;
 8003484:	f8d9 5060 	ldr.w	r5, [r9, #96]	; 0x60
 8003488:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8003654 <limits_go_home+0x27c>
      if (pin & limit_pin_mask[idx]) { limit_state |= (1 << idx); }
 800348c:	f8df a1c8 	ldr.w	sl, [pc, #456]	; 8003658 <limits_go_home+0x280>
  float homing_rate = settings.homing_seek_rate;
 8003490:	9301      	str	r3, [sp, #4]
  PORTPINDEF axislock;
  uint8_t limit_state, n_active_axis;
  do {
	  //printString("STATE CHANGE\r\n"); // ZZZZZZZZZZZZZZ

    system_convert_array_steps_to_mpos(target,sys_position);
 8003492:	496c      	ldr	r1, [pc, #432]	; (8003644 <limits_go_home+0x26c>)
 8003494:	a80e      	add	r0, sp, #56	; 0x38
 8003496:	f006 fb2f 	bl	8009af8 <system_convert_array_steps_to_mpos>
    // Initialize and declare variables needed for homing routine.
    axislock = 0;
    n_active_axis = 0;
    for (idx=0; idx<N_AXIS; idx++) {
      // Set target location for active axes and setup computation for homing rate.
      if (bit_istrue(cycle_mask,bit(idx))) {
 800349a:	9b02      	ldr	r3, [sp, #8]
 800349c:	2b00      	cmp	r3, #0
 800349e:	f000 8150 	beq.w	8003742 <limits_go_home+0x36a>
            sys_position[A_MOTOR] = sys_position[B_MOTOR] = axis_position;
          } else {
            sys_position[Z_AXIS] = 0;
          }
        #else
          sys_position[idx] = 0;
 80034a2:	2100      	movs	r1, #0
        #endif
        // Set target direction based on cycle mask and homing cycle approach state.
        // NOTE: This happens to compile smaller than any other implementation tried.
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 80034a4:	f8b9 305a 	ldrh.w	r3, [r9, #90]	; 0x5a
          sys_position[idx] = 0;
 80034a8:	4a66      	ldr	r2, [pc, #408]	; (8003644 <limits_go_home+0x26c>)
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 80034aa:	07de      	lsls	r6, r3, #31
          sys_position[idx] = 0;
 80034ac:	6011      	str	r1, [r2, #0]
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 80034ae:	f140 8157 	bpl.w	8003760 <limits_go_home+0x388>
          if (approach) { target[idx] = -max_travel; }
 80034b2:	2f00      	cmp	r7, #0
 80034b4:	f040 8157 	bne.w	8003766 <limits_go_home+0x38e>
          else { target[idx] = max_travel; }
 80034b8:	940e      	str	r4, [sp, #56]	; 0x38
        } else {
          if (approach) { target[idx] = max_travel; }
          else { target[idx] = -max_travel; }
        }
        // Apply axislock to the step port pins active in this cycle.
        axislock |= step_pin[idx];
 80034ba:	2302      	movs	r3, #2
        n_active_axis++;
 80034bc:	2001      	movs	r0, #1
        axislock |= step_pin[idx];
 80034be:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
      if (bit_istrue(cycle_mask,bit(idx))) {
 80034c2:	9a05      	ldr	r2, [sp, #20]
 80034c4:	b17a      	cbz	r2, 80034e6 <limits_go_home+0x10e>
          sys_position[idx] = 0;
 80034c6:	2000      	movs	r0, #0
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 80034c8:	f8b9 205a 	ldrh.w	r2, [r9, #90]	; 0x5a
          sys_position[idx] = 0;
 80034cc:	495d      	ldr	r1, [pc, #372]	; (8003644 <limits_go_home+0x26c>)
 80034ce:	6048      	str	r0, [r1, #4]
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 80034d0:	0790      	lsls	r0, r2, #30
 80034d2:	f140 813a 	bpl.w	800374a <limits_go_home+0x372>
          if (approach) { target[idx] = -max_travel; }
 80034d6:	2f00      	cmp	r7, #0
 80034d8:	f040 813a 	bne.w	8003750 <limits_go_home+0x378>
          else { target[idx] = max_travel; }
 80034dc:	940f      	str	r4, [sp, #60]	; 0x3c
        n_active_axis++;
 80034de:	4618      	mov	r0, r3
        axislock |= step_pin[idx];
 80034e0:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
 80034e4:	4316      	orrs	r6, r2
      if (bit_istrue(cycle_mask,bit(idx))) {
 80034e6:	9b04      	ldr	r3, [sp, #16]
 80034e8:	b183      	cbz	r3, 800350c <limits_go_home+0x134>
          sys_position[idx] = 0;
 80034ea:	2100      	movs	r1, #0
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 80034ec:	f8b9 305a 	ldrh.w	r3, [r9, #90]	; 0x5a
          sys_position[idx] = 0;
 80034f0:	4a54      	ldr	r2, [pc, #336]	; (8003644 <limits_go_home+0x26c>)
        n_active_axis++;
 80034f2:	3001      	adds	r0, #1
          sys_position[idx] = 0;
 80034f4:	6091      	str	r1, [r2, #8]
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 80034f6:	0759      	lsls	r1, r3, #29
        n_active_axis++;
 80034f8:	b2c0      	uxtb	r0, r0
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 80034fa:	f140 8138 	bpl.w	800376e <limits_go_home+0x396>
          if (approach) { target[idx] = -max_travel; }
 80034fe:	2f00      	cmp	r7, #0
 8003500:	f040 8138 	bne.w	8003774 <limits_go_home+0x39c>
          else { target[idx] = max_travel; }
 8003504:	9410      	str	r4, [sp, #64]	; 0x40
        axislock |= step_pin[idx];
 8003506:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 800350a:	431e      	orrs	r6, r3
      if (bit_istrue(cycle_mask,bit(idx))) {
 800350c:	9b03      	ldr	r3, [sp, #12]
 800350e:	b183      	cbz	r3, 8003532 <limits_go_home+0x15a>
          sys_position[idx] = 0;
 8003510:	2100      	movs	r1, #0
 8003512:	4a4c      	ldr	r2, [pc, #304]	; (8003644 <limits_go_home+0x26c>)
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8003514:	f8b9 305a 	ldrh.w	r3, [r9, #90]	; 0x5a
        n_active_axis++;
 8003518:	3001      	adds	r0, #1
          sys_position[idx] = 0;
 800351a:	60d1      	str	r1, [r2, #12]
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 800351c:	071a      	lsls	r2, r3, #28
        n_active_axis++;
 800351e:	b2c0      	uxtb	r0, r0
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8003520:	f100 811a 	bmi.w	8003758 <limits_go_home+0x380>
          if (approach) { target[idx] = max_travel; }
 8003524:	b90f      	cbnz	r7, 800352a <limits_go_home+0x152>
          if (approach) { target[idx] = -max_travel; }
 8003526:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
        axislock |= step_pin[idx];
 800352a:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
          if (approach) { target[idx] = -max_travel; }
 800352e:	9411      	str	r4, [sp, #68]	; 0x44
        axislock |= step_pin[idx];
 8003530:	431e      	orrs	r6, r3
      }

    }
    homing_rate *= sqrtf(n_active_axis); // [sqrt(N_AXIS)] Adjust so individual axes all move at homing rate.
 8003532:	f7fd fb65 	bl	8000c00 <__aeabi_ui2f>
 8003536:	f008 f8ef 	bl	800b718 <sqrtf>
    sys.homing_axis_lock = axislock;
 800353a:	4b3f      	ldr	r3, [pc, #252]	; (8003638 <limits_go_home+0x260>)
    homing_rate *= sqrtf(n_active_axis); // [sqrt(N_AXIS)] Adjust so individual axes all move at homing rate.
 800353c:	4601      	mov	r1, r0
    sys.homing_axis_lock = axislock;
 800353e:	80de      	strh	r6, [r3, #6]
    homing_rate *= sqrtf(n_active_axis); // [sqrt(N_AXIS)] Adjust so individual axes all move at homing rate.
 8003540:	4628      	mov	r0, r5
 8003542:	f7fd fbb5 	bl	8000cb0 <__aeabi_fmul>

    // Perform homing cycle. Planner buffer should be empty, as required to initiate the homing cycle.
    pl_data->feed_rate = homing_rate; // Set current homing rate.
    plan_buffer_line(target, pl_data); // Bypass mc_line(). Directly plan homing motion.
 8003546:	a90b      	add	r1, sp, #44	; 0x2c
    pl_data->feed_rate = homing_rate; // Set current homing rate.
 8003548:	900b      	str	r0, [sp, #44]	; 0x2c
    plan_buffer_line(target, pl_data); // Bypass mc_line(). Directly plan homing motion.
 800354a:	a80e      	add	r0, sp, #56	; 0x38
 800354c:	f001 f98c 	bl	8004868 <plan_buffer_line>

    sys.step_control = STEP_CONTROL_EXECUTE_SYS_MOTION; // Set to execute homing motion and clear existing flags.
 8003550:	2304      	movs	r3, #4
 8003552:	4a39      	ldr	r2, [pc, #228]	; (8003638 <limits_go_home+0x260>)
  pin = GPIO_ReadInputData(LIMIT_PIN);
 8003554:	4d3c      	ldr	r5, [pc, #240]	; (8003648 <limits_go_home+0x270>)
    sys.step_control = STEP_CONTROL_EXECUTE_SYS_MOTION; // Set to execute homing motion and clear existing flags.
 8003556:	7113      	strb	r3, [r2, #4]
    st_prep_buffer(); // Prep and fill segment buffer from newly planned block.
 8003558:	f005 fb00 	bl	8008b5c <st_prep_buffer>
    st_wake_up(); // Initiate motion
 800355c:	f004 ff62 	bl	8008424 <st_wake_up>
    do {
      if (approach) {
 8003560:	2f00      	cmp	r7, #0
 8003562:	d156      	bne.n	8003612 <limits_go_home+0x23a>
          }
        }
        sys.homing_axis_lock = axislock;
      }

      st_prep_buffer(); // Check and prep segment buffer. NOTE: Should take no longer than 200us.
 8003564:	f005 fafa 	bl	8008b5c <st_prep_buffer>

      // Exit routines: No time to run protocol_execute_realtime() in this loop.
      if (sys_rt_exec_state & (EXEC_SAFETY_DOOR | EXEC_RESET | EXEC_CYCLE_STOP)) {
 8003568:	f898 3000 	ldrb.w	r3, [r8]
 800356c:	f013 0f34 	tst.w	r3, #52	; 0x34
 8003570:	f040 80bd 	bne.w	80036ee <limits_go_home+0x316>
          system_clear_exec_state_flag(EXEC_CYCLE_STOP);
          break;
        }
      }

    } while (STEP_MASK & axislock);
 8003574:	0733      	lsls	r3, r6, #28
 8003576:	d1f3      	bne.n	8003560 <limits_go_home+0x188>

    st_reset(); // Immediately force kill steppers and reset step segment buffer.
 8003578:	f005 f978 	bl	800886c <st_reset>
    delay_ms(settings.homing_debounce_delay); // Delay to allow transient dynamics to dissipate.
 800357c:	f8b9 0064 	ldrh.w	r0, [r9, #100]	; 0x64
 8003580:	f000 fe66 	bl	8004250 <delay_ms>
 8003584:	f087 0601 	eor.w	r6, r7, #1

    // Reverse direction and reset homing rate for locate cycle(s).
    approach = !approach;

    // After first cycle, homing enters locating phase. Shorten search to pull-off distance.
    if (approach) {
 8003588:	b9ff      	cbnz	r7, 80035ca <limits_go_home+0x1f2>
      max_travel = settings.homing_pulloff*HOMING_AXIS_LOCATE_SCALAR;
 800358a:	4930      	ldr	r1, [pc, #192]	; (800364c <limits_go_home+0x274>)
 800358c:	f8d9 0068 	ldr.w	r0, [r9, #104]	; 0x68
 8003590:	f7fd fb8e 	bl	8000cb0 <__aeabi_fmul>
 8003594:	9b01      	ldr	r3, [sp, #4]
 8003596:	4604      	mov	r4, r0
 8003598:	3b01      	subs	r3, #1
    } else {
      max_travel = settings.homing_pulloff;
      homing_rate = settings.homing_seek_rate;
    }

  } while (n_cycle-- > 0);
 800359a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
      homing_rate = settings.homing_feed_rate;
 800359e:	f8d9 505c 	ldr.w	r5, [r9, #92]	; 0x5c
  } while (n_cycle-- > 0);
 80035a2:	9301      	str	r3, [sp, #4]
 80035a4:	d01b      	beq.n	80035de <limits_go_home+0x206>
  float max_travel = 0.0f;
 80035a6:	4637      	mov	r7, r6
 80035a8:	e773      	b.n	8003492 <limits_go_home+0xba>
      max_travel = max(max_travel,(-HOMING_AXIS_SEARCH_SCALAR)*settings.max_travel[idx]);
 80035aa:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8003650 <limits_go_home+0x278>
 80035ae:	4924      	ldr	r1, [pc, #144]	; (8003640 <limits_go_home+0x268>)
 80035b0:	f8d9 0030 	ldr.w	r0, [r9, #48]	; 0x30
 80035b4:	f7fd fb7c 	bl	8000cb0 <__aeabi_fmul>
 80035b8:	2100      	movs	r1, #0
 80035ba:	4604      	mov	r4, r0
 80035bc:	f7fd fd2a 	bl	8001014 <__aeabi_fcmpge>
 80035c0:	2800      	cmp	r0, #0
 80035c2:	f47f af28 	bne.w	8003416 <limits_go_home+0x3e>
 80035c6:	2400      	movs	r4, #0
 80035c8:	e725      	b.n	8003416 <limits_go_home+0x3e>
 80035ca:	9b01      	ldr	r3, [sp, #4]
      max_travel = settings.homing_pulloff;
 80035cc:	f8d9 4068 	ldr.w	r4, [r9, #104]	; 0x68
 80035d0:	3b01      	subs	r3, #1
  } while (n_cycle-- > 0);
 80035d2:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
      homing_rate = settings.homing_seek_rate;
 80035d6:	f8d9 5060 	ldr.w	r5, [r9, #96]	; 0x60
  } while (n_cycle-- > 0);
 80035da:	9301      	str	r3, [sp, #4]
 80035dc:	d1e3      	bne.n	80035a6 <limits_go_home+0x1ce>
  // triggering when hard limits are enabled or when more than one axes shares a limit pin.
  int32_t set_axis_position;
  // Set machine positions for homed limit switches. Don't update non-homed axes.
  for (idx=0; idx<N_AXIS; idx++) {
    // NOTE: settings.max_travel[] is stored as a negative value.
    if (cycle_mask & bit(idx)) {
 80035de:	9b07      	ldr	r3, [sp, #28]
 80035e0:	b113      	cbz	r3, 80035e8 <limits_go_home+0x210>
          sys_position[B_MOTOR] = off_axis_position - set_axis_position;
        } else {
          sys_position[idx] = set_axis_position;
        }
      #else
        sys_position[idx] = set_axis_position;
 80035e2:	2300      	movs	r3, #0
 80035e4:	4a17      	ldr	r2, [pc, #92]	; (8003644 <limits_go_home+0x26c>)
 80035e6:	6013      	str	r3, [r2, #0]
    if (cycle_mask & bit(idx)) {
 80035e8:	9b05      	ldr	r3, [sp, #20]
 80035ea:	b113      	cbz	r3, 80035f2 <limits_go_home+0x21a>
        sys_position[idx] = set_axis_position;
 80035ec:	2300      	movs	r3, #0
 80035ee:	4a15      	ldr	r2, [pc, #84]	; (8003644 <limits_go_home+0x26c>)
 80035f0:	6053      	str	r3, [r2, #4]
    if (cycle_mask & bit(idx)) {
 80035f2:	9b04      	ldr	r3, [sp, #16]
 80035f4:	b113      	cbz	r3, 80035fc <limits_go_home+0x224>
        sys_position[idx] = set_axis_position;
 80035f6:	2300      	movs	r3, #0
 80035f8:	4a12      	ldr	r2, [pc, #72]	; (8003644 <limits_go_home+0x26c>)
 80035fa:	6093      	str	r3, [r2, #8]
    if (cycle_mask & bit(idx)) {
 80035fc:	9b03      	ldr	r3, [sp, #12]
 80035fe:	b113      	cbz	r3, 8003606 <limits_go_home+0x22e>
        sys_position[idx] = set_axis_position;
 8003600:	2300      	movs	r3, #0
 8003602:	4a10      	ldr	r2, [pc, #64]	; (8003644 <limits_go_home+0x26c>)
 8003604:	60d3      	str	r3, [r2, #12]
      #endif

    }
  }
  sys.step_control = STEP_CONTROL_NORMAL_OP; // Return step control to normal operation.
 8003606:	2300      	movs	r3, #0
 8003608:	4a0b      	ldr	r2, [pc, #44]	; (8003638 <limits_go_home+0x260>)
 800360a:	7113      	strb	r3, [r2, #4]

  //printString("HOME END\r\n"); // ZZZZZZZZZZZZZZ
}
 800360c:	b013      	add	sp, #76	; 0x4c
 800360e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  pin = GPIO_ReadInputData(LIMIT_PIN);
 8003612:	4628      	mov	r0, r5
 8003614:	f7fe f8aa 	bl	800176c <GPIO_ReadInputData>
  uint8_t i = 0;
 8003618:	2400      	movs	r4, #0
  pin = GPIO_ReadInputData(LIMIT_PIN);
 800361a:	4683      	mov	fp, r0
	  pin2 = GPIO_ReadInputData(LIMIT_PIN);
 800361c:	4628      	mov	r0, r5
 800361e:	f7fe f8a5 	bl	800176c <GPIO_ReadInputData>
	  i++;
 8003622:	3401      	adds	r4, #1
	  if(pin != pin2)
 8003624:	4558      	cmp	r0, fp
	  i++;
 8003626:	b2e4      	uxtb	r4, r4
	  if(pin != pin2)
 8003628:	d018      	beq.n	800365c <limits_go_home+0x284>
		  pin = GPIO_ReadInputData(LIMIT_PIN);
 800362a:	4628      	mov	r0, r5
 800362c:	f7fe f89e 	bl	800176c <GPIO_ReadInputData>
	  i++;
 8003630:	2401      	movs	r4, #1
		  pin = GPIO_ReadInputData(LIMIT_PIN);
 8003632:	4683      	mov	fp, r0
 8003634:	e7f2      	b.n	800361c <limits_go_home+0x244>
 8003636:	bf00      	nop
 8003638:	200010c8 	.word	0x200010c8
 800363c:	0800c878 	.word	0x0800c878
 8003640:	bfc00000 	.word	0xbfc00000
 8003644:	200010f0 	.word	0x200010f0
 8003648:	40010c00 	.word	0x40010c00
 800364c:	40a00000 	.word	0x40a00000
 8003650:	20001404 	.word	0x20001404
 8003654:	200010dd 	.word	0x200010dd
 8003658:	0800c870 	.word	0x0800c870
  } while (i<READ_CNT);
 800365c:	2c09      	cmp	r4, #9
 800365e:	d9dd      	bls.n	800361c <limits_go_home+0x244>
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_LIMIT_PINS)) { pin ^= LIMIT_MASK; }
 8003660:	f899 3058 	ldrb.w	r3, [r9, #88]	; 0x58
 8003664:	065b      	lsls	r3, r3, #25
 8003666:	bf5c      	itt	pl
 8003668:	f48b 4070 	eorpl.w	r0, fp, #61440	; 0xf000
 800366c:	b280      	uxthpl	r0, r0
  if (pin) {
 800366e:	2800      	cmp	r0, #0
 8003670:	d033      	beq.n	80036da <limits_go_home+0x302>
      if (pin & limit_pin_mask[idx]) { limit_state |= (1 << idx); }
 8003672:	f8ba 3000 	ldrh.w	r3, [sl]
 8003676:	f8ba 2002 	ldrh.w	r2, [sl, #2]
 800367a:	4218      	tst	r0, r3
 800367c:	bf14      	ite	ne
 800367e:	2301      	movne	r3, #1
 8003680:	2300      	moveq	r3, #0
 8003682:	4210      	tst	r0, r2
 8003684:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8003688:	bf18      	it	ne
 800368a:	f043 0302 	orrne.w	r3, r3, #2
 800368e:	4210      	tst	r0, r2
 8003690:	f8ba 2006 	ldrh.w	r2, [sl, #6]
 8003694:	bf18      	it	ne
 8003696:	f043 0304 	orrne.w	r3, r3, #4
 800369a:	4210      	tst	r0, r2
          if (axislock & step_pin[idx]) {
 800369c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
      if (pin & limit_pin_mask[idx]) { limit_state |= (1 << idx); }
 80036a0:	bf18      	it	ne
 80036a2:	f043 0308 	orrne.w	r3, r3, #8
          if (axislock & step_pin[idx]) {
 80036a6:	4216      	tst	r6, r2
 80036a8:	d002      	beq.n	80036b0 <limits_go_home+0x2d8>
            if (limit_state & (1 << idx)) {
 80036aa:	07dc      	lsls	r4, r3, #31
                axislock &= ~(step_pin[idx]);
 80036ac:	bf48      	it	mi
 80036ae:	4396      	bicmi	r6, r2
          if (axislock & step_pin[idx]) {
 80036b0:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
 80036b4:	4216      	tst	r6, r2
 80036b6:	d002      	beq.n	80036be <limits_go_home+0x2e6>
            if (limit_state & (1 << idx)) {
 80036b8:	0798      	lsls	r0, r3, #30
                axislock &= ~(step_pin[idx]);
 80036ba:	bf48      	it	mi
 80036bc:	4396      	bicmi	r6, r2
          if (axislock & step_pin[idx]) {
 80036be:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 80036c2:	4216      	tst	r6, r2
 80036c4:	d002      	beq.n	80036cc <limits_go_home+0x2f4>
            if (limit_state & (1 << idx)) {
 80036c6:	0759      	lsls	r1, r3, #29
                axislock &= ~(step_pin[idx]);
 80036c8:	bf48      	it	mi
 80036ca:	4396      	bicmi	r6, r2
          if (axislock & step_pin[idx]) {
 80036cc:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 80036d0:	4216      	tst	r6, r2
 80036d2:	d002      	beq.n	80036da <limits_go_home+0x302>
            if (limit_state & (1 << idx)) {
 80036d4:	08db      	lsrs	r3, r3, #3
                axislock &= ~(step_pin[idx]);
 80036d6:	bf18      	it	ne
 80036d8:	4396      	bicne	r6, r2
        sys.homing_axis_lock = axislock;
 80036da:	4b44      	ldr	r3, [pc, #272]	; (80037ec <limits_go_home+0x414>)
 80036dc:	80de      	strh	r6, [r3, #6]
      st_prep_buffer(); // Check and prep segment buffer. NOTE: Should take no longer than 200us.
 80036de:	f005 fa3d 	bl	8008b5c <st_prep_buffer>
      if (sys_rt_exec_state & (EXEC_SAFETY_DOOR | EXEC_RESET | EXEC_CYCLE_STOP)) {
 80036e2:	f898 3000 	ldrb.w	r3, [r8]
 80036e6:	f013 0f34 	tst.w	r3, #52	; 0x34
 80036ea:	f43f af43 	beq.w	8003574 <limits_go_home+0x19c>
        uint8_t rt_exec = sys_rt_exec_state;
 80036ee:	f898 4000 	ldrb.w	r4, [r8]
 80036f2:	b2e4      	uxtb	r4, r4
        if (rt_exec & EXEC_RESET) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_RESET); }
 80036f4:	06e5      	lsls	r5, r4, #27
 80036f6:	d441      	bmi.n	800377c <limits_go_home+0x3a4>
        if (rt_exec & EXEC_SAFETY_DOOR) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_DOOR); }
 80036f8:	06a0      	lsls	r0, r4, #26
 80036fa:	d40a      	bmi.n	8003712 <limits_go_home+0x33a>
        if (!approach && (limits_get_state() & cycle_mask)) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_PULLOFF); }
 80036fc:	b177      	cbz	r7, 800371c <limits_go_home+0x344>
        if (approach && (rt_exec & EXEC_CYCLE_STOP)) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_APPROACH); }
 80036fe:	0762      	lsls	r2, r4, #29
 8003700:	d46a      	bmi.n	80037d8 <limits_go_home+0x400>
        if (sys_rt_exec_alarm) {
 8003702:	4b3b      	ldr	r3, [pc, #236]	; (80037f0 <limits_go_home+0x418>)
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d16a      	bne.n	80037e0 <limits_go_home+0x408>
          system_clear_exec_state_flag(EXEC_CYCLE_STOP);
 800370a:	2004      	movs	r0, #4
 800370c:	f006 faa0 	bl	8009c50 <system_clear_exec_state_flag>
          break;
 8003710:	e732      	b.n	8003578 <limits_go_home+0x1a0>
        if (rt_exec & EXEC_SAFETY_DOOR) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_DOOR); }
 8003712:	2007      	movs	r0, #7
 8003714:	f006 faa6 	bl	8009c64 <system_set_exec_alarm>
        if (!approach && (limits_get_state() & cycle_mask)) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_PULLOFF); }
 8003718:	2f00      	cmp	r7, #0
 800371a:	d1f0      	bne.n	80036fe <limits_go_home+0x326>
  pin = GPIO_ReadInputData(LIMIT_PIN);
 800371c:	4835      	ldr	r0, [pc, #212]	; (80037f4 <limits_go_home+0x41c>)
 800371e:	f7fe f825 	bl	800176c <GPIO_ReadInputData>
  uint8_t i = 0;
 8003722:	463e      	mov	r6, r7
  pin = GPIO_ReadInputData(LIMIT_PIN);
 8003724:	4604      	mov	r4, r0
	  pin2 = GPIO_ReadInputData(LIMIT_PIN);
 8003726:	4d33      	ldr	r5, [pc, #204]	; (80037f4 <limits_go_home+0x41c>)
 8003728:	4628      	mov	r0, r5
 800372a:	f7fe f81f 	bl	800176c <GPIO_ReadInputData>
	  i++;
 800372e:	3601      	adds	r6, #1
	  if(pin != pin2)
 8003730:	42a0      	cmp	r0, r4
	  i++;
 8003732:	b2f6      	uxtb	r6, r6
	  if(pin != pin2)
 8003734:	d026      	beq.n	8003784 <limits_go_home+0x3ac>
		  pin = GPIO_ReadInputData(LIMIT_PIN);
 8003736:	4628      	mov	r0, r5
 8003738:	f7fe f818 	bl	800176c <GPIO_ReadInputData>
	  i++;
 800373c:	2601      	movs	r6, #1
		  pin = GPIO_ReadInputData(LIMIT_PIN);
 800373e:	4604      	mov	r4, r0
 8003740:	e7f2      	b.n	8003728 <limits_go_home+0x350>
 8003742:	461e      	mov	r6, r3
    n_active_axis = 0;
 8003744:	4618      	mov	r0, r3
      if (bit_istrue(cycle_mask,bit(idx))) {
 8003746:	2301      	movs	r3, #1
 8003748:	e6bb      	b.n	80034c2 <limits_go_home+0xea>
          if (approach) { target[idx] = max_travel; }
 800374a:	2f00      	cmp	r7, #0
 800374c:	f47f aec6 	bne.w	80034dc <limits_go_home+0x104>
          if (approach) { target[idx] = -max_travel; }
 8003750:	f104 4200 	add.w	r2, r4, #2147483648	; 0x80000000
 8003754:	920f      	str	r2, [sp, #60]	; 0x3c
 8003756:	e6c2      	b.n	80034de <limits_go_home+0x106>
 8003758:	2f00      	cmp	r7, #0
 800375a:	f43f aee6 	beq.w	800352a <limits_go_home+0x152>
 800375e:	e6e2      	b.n	8003526 <limits_go_home+0x14e>
          if (approach) { target[idx] = max_travel; }
 8003760:	2f00      	cmp	r7, #0
 8003762:	f47f aea9 	bne.w	80034b8 <limits_go_home+0xe0>
          if (approach) { target[idx] = -max_travel; }
 8003766:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
 800376a:	930e      	str	r3, [sp, #56]	; 0x38
 800376c:	e6a5      	b.n	80034ba <limits_go_home+0xe2>
          if (approach) { target[idx] = max_travel; }
 800376e:	2f00      	cmp	r7, #0
 8003770:	f47f aec8 	bne.w	8003504 <limits_go_home+0x12c>
          if (approach) { target[idx] = -max_travel; }
 8003774:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
 8003778:	9310      	str	r3, [sp, #64]	; 0x40
 800377a:	e6c4      	b.n	8003506 <limits_go_home+0x12e>
        if (rt_exec & EXEC_RESET) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_RESET); }
 800377c:	2006      	movs	r0, #6
 800377e:	f006 fa71 	bl	8009c64 <system_set_exec_alarm>
 8003782:	e7b9      	b.n	80036f8 <limits_go_home+0x320>
  } while (i<READ_CNT);
 8003784:	2e09      	cmp	r6, #9
 8003786:	d9cf      	bls.n	8003728 <limits_go_home+0x350>
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_LIMIT_PINS)) { pin ^= LIMIT_MASK; }
 8003788:	f899 3058 	ldrb.w	r3, [r9, #88]	; 0x58
 800378c:	0659      	lsls	r1, r3, #25
 800378e:	bf5c      	itt	pl
 8003790:	f484 4070 	eorpl.w	r0, r4, #61440	; 0xf000
 8003794:	b280      	uxthpl	r0, r0
  if (pin) {
 8003796:	2800      	cmp	r0, #0
 8003798:	d0b3      	beq.n	8003702 <limits_go_home+0x32a>
      if (pin & limit_pin_mask[idx]) { limit_state |= (1 << idx); }
 800379a:	f8ba 3000 	ldrh.w	r3, [sl]
 800379e:	f8ba 2002 	ldrh.w	r2, [sl, #2]
 80037a2:	4218      	tst	r0, r3
 80037a4:	bf14      	ite	ne
 80037a6:	2301      	movne	r3, #1
 80037a8:	2300      	moveq	r3, #0
 80037aa:	4210      	tst	r0, r2
 80037ac:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 80037b0:	bf18      	it	ne
 80037b2:	f043 0302 	orrne.w	r3, r3, #2
 80037b6:	4210      	tst	r0, r2
 80037b8:	f8ba 2006 	ldrh.w	r2, [sl, #6]
 80037bc:	bf18      	it	ne
 80037be:	f043 0304 	orrne.w	r3, r3, #4
 80037c2:	4210      	tst	r0, r2
        if (!approach && (limits_get_state() & cycle_mask)) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_PULLOFF); }
 80037c4:	9a06      	ldr	r2, [sp, #24]
      if (pin & limit_pin_mask[idx]) { limit_state |= (1 << idx); }
 80037c6:	bf18      	it	ne
 80037c8:	f043 0308 	orrne.w	r3, r3, #8
        if (!approach && (limits_get_state() & cycle_mask)) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_PULLOFF); }
 80037cc:	421a      	tst	r2, r3
 80037ce:	d098      	beq.n	8003702 <limits_go_home+0x32a>
 80037d0:	2008      	movs	r0, #8
 80037d2:	f006 fa47 	bl	8009c64 <system_set_exec_alarm>
 80037d6:	e794      	b.n	8003702 <limits_go_home+0x32a>
        if (approach && (rt_exec & EXEC_CYCLE_STOP)) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_APPROACH); }
 80037d8:	2009      	movs	r0, #9
 80037da:	f006 fa43 	bl	8009c64 <system_set_exec_alarm>
 80037de:	e790      	b.n	8003702 <limits_go_home+0x32a>
          mc_reset(); // Stop motors, if they are running.
 80037e0:	f000 fc46 	bl	8004070 <mc_reset>
          protocol_execute_realtime();
 80037e4:	f002 fab6 	bl	8005d54 <protocol_execute_realtime>
          return;
 80037e8:	e710      	b.n	800360c <limits_go_home+0x234>
 80037ea:	bf00      	nop
 80037ec:	200010c8 	.word	0x200010c8
 80037f0:	20001100 	.word	0x20001100
 80037f4:	40010c00 	.word	0x40010c00

080037f8 <limits_soft_check>:

// Performs a soft limit check. Called from mc_line() only. Assumes the machine has been homed,
// the workspace volume is in all negative space, and the system is in normal operation.
// NOTE: Used by jogging to limit travel within soft-limit volume.
void limits_soft_check(float *target)
{
 80037f8:	b510      	push	{r4, lr}
  if (system_check_travel_limits(target)) {
 80037fa:	f006 f9a1 	bl	8009b40 <system_check_travel_limits>
 80037fe:	b1c8      	cbz	r0, 8003834 <limits_soft_check+0x3c>
    sys.soft_limit = true;
 8003800:	2301      	movs	r3, #1
 8003802:	4c0d      	ldr	r4, [pc, #52]	; (8003838 <limits_soft_check+0x40>)
    // Force feed hold if cycle is active. All buffered blocks are guaranteed to be within
    // workspace volume so just come to a controlled stop so position is not lost. When complete
    // enter alarm mode.
    if (sys.state == STATE_CYCLE) {
 8003804:	7820      	ldrb	r0, [r4, #0]
    sys.soft_limit = true;
 8003806:	70e3      	strb	r3, [r4, #3]
    if (sys.state == STATE_CYCLE) {
 8003808:	2808      	cmp	r0, #8
 800380a:	d008      	beq.n	800381e <limits_soft_check+0x26>
      do {
        protocol_execute_realtime();
        if (sys.abort) { return; }
      } while ( sys.state != STATE_IDLE );
    }
    mc_reset(); // Issue system reset and ensure spindle and coolant are shutdown.
 800380c:	f000 fc30 	bl	8004070 <mc_reset>
    system_set_exec_alarm(EXEC_ALARM_SOFT_LIMIT); // Indicate soft limit critical event
 8003810:	2002      	movs	r0, #2
 8003812:	f006 fa27 	bl	8009c64 <system_set_exec_alarm>
    protocol_execute_realtime(); // Execute to enter critical event loop and system abort
    return;
  }
}
 8003816:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    protocol_execute_realtime(); // Execute to enter critical event loop and system abort
 800381a:	f002 ba9b 	b.w	8005d54 <protocol_execute_realtime>
      system_set_exec_state_flag(EXEC_FEED_HOLD);
 800381e:	f006 fa0d 	bl	8009c3c <system_set_exec_state_flag>
 8003822:	e002      	b.n	800382a <limits_soft_check+0x32>
      } while ( sys.state != STATE_IDLE );
 8003824:	7823      	ldrb	r3, [r4, #0]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d0f0      	beq.n	800380c <limits_soft_check+0x14>
        protocol_execute_realtime();
 800382a:	f002 fa93 	bl	8005d54 <protocol_execute_realtime>
        if (sys.abort) { return; }
 800382e:	7863      	ldrb	r3, [r4, #1]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d0f7      	beq.n	8003824 <limits_soft_check+0x2c>
 8003834:	bd10      	pop	{r4, pc}
 8003836:	bf00      	nop
 8003838:	200010c8 	.word	0x200010c8

0800383c <USART3_Configuration>:

#endif

#ifdef USE_TMC2300
void USART3_Configuration(u32 BaudRate)
{
 800383c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800383e:	4607      	mov	r7, r0
 8003840:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStructure;
	USART_InitTypeDef USART_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
 8003842:	f44f 7040 	mov.w	r0, #768	; 0x300
 8003846:	f7fd fc55 	bl	80010f4 <NVIC_PriorityGroupConfig>
	NVIC_InitStructure.NVIC_IRQChannel = USART3_IRQn;
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 800384a:	2600      	movs	r6, #0

	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800384c:	2501      	movs	r5, #1
	NVIC_InitStructure.NVIC_IRQChannel = USART3_IRQn;
 800384e:	2327      	movs	r3, #39	; 0x27
	NVIC_Init(&NVIC_InitStructure);
 8003850:	a801      	add	r0, sp, #4
	NVIC_InitStructure.NVIC_IRQChannel = USART3_IRQn;
 8003852:	f88d 3004 	strb.w	r3, [sp, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8003856:	f88d 6005 	strb.w	r6, [sp, #5]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800385a:	f88d 5007 	strb.w	r5, [sp, #7]
	NVIC_Init(&NVIC_InitStructure);
 800385e:	f7fd fc53 	bl	8001108 <NVIC_Init>
	//RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3 | RCC_APB2Periph_GPIOB | RCC_APB2Periph_AFIO, ENABLE);
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
 8003862:	4629      	mov	r1, r5
 8003864:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8003868:	f7fe f848 	bl	80018fc <RCC_APB1PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB | RCC_APB2Periph_AFIO, ENABLE);
 800386c:	4629      	mov	r1, r5
 800386e:	2009      	movs	r0, #9
 8003870:	f7fe f838 	bl	80018e4 <RCC_APB2PeriphClockCmd>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
 8003874:	f44f 6180 	mov.w	r1, #1024	; 0x400
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8003878:	2218      	movs	r2, #24
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800387a:	2303      	movs	r3, #3
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 800387c:	4c1c      	ldr	r4, [pc, #112]	; (80038f0 <USART3_Configuration+0xb4>)
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
 800387e:	f8ad 1000 	strh.w	r1, [sp]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003882:	4620      	mov	r0, r4
 8003884:	4669      	mov	r1, sp
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8003886:	f88d 2003 	strb.w	r2, [sp, #3]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800388a:	f88d 3002 	strb.w	r3, [sp, #2]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 800388e:	f7fd fdb7 	bl	8001400 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
 8003892:	f44f 6200 	mov.w	r2, #2048	; 0x800
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8003896:	2304      	movs	r3, #4
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003898:	4669      	mov	r1, sp
 800389a:	4620      	mov	r0, r4
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
 800389c:	f8ad 2000 	strh.w	r2, [sp]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 80038a0:	f88d 3003 	strb.w	r3, [sp, #3]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 80038a4:	f7fd fdac 	bl	8001400 <GPIO_Init>
	USART_InitStructure.USART_BaudRate = BaudRate;
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
	USART_InitStructure.USART_Parity = USART_Parity_No;
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 80038a8:	230c      	movs	r3, #12
	USART3->CR1 |= (USART_CR1_RE | USART_CR1_TE);
 80038aa:	f5a4 4444 	sub.w	r4, r4, #50176	; 0xc400
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 80038ae:	f8ad 600c 	strh.w	r6, [sp, #12]
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 80038b2:	f8ad 600e 	strh.w	r6, [sp, #14]
	USART_InitStructure.USART_Parity = USART_Parity_No;
 80038b6:	f8ad 6010 	strh.w	r6, [sp, #16]
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 80038ba:	f8ad 6014 	strh.w	r6, [sp, #20]
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 80038be:	f8ad 3012 	strh.w	r3, [sp, #18]
	USART3->CR1 |= (USART_CR1_RE | USART_CR1_TE);
 80038c2:	89a3      	ldrh	r3, [r4, #12]
	USART_Init(USART3, &USART_InitStructure);
 80038c4:	4620      	mov	r0, r4
	USART3->CR1 |= (USART_CR1_RE | USART_CR1_TE);
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	f043 030c 	orr.w	r3, r3, #12
	USART_InitStructure.USART_BaudRate = BaudRate;
 80038cc:	9702      	str	r7, [sp, #8]
	USART_Init(USART3, &USART_InitStructure);
 80038ce:	a902      	add	r1, sp, #8
	USART3->CR1 |= (USART_CR1_RE | USART_CR1_TE);
 80038d0:	81a3      	strh	r3, [r4, #12]
	USART_Init(USART3, &USART_InitStructure);
 80038d2:	f7fe f8f9 	bl	8001ac8 <USART_Init>
	//	USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
	USART_ITConfig(USART3, USART_IT_RXNE, ENABLE); // DISABLED INTERRUPTS for now!!!
 80038d6:	462a      	mov	r2, r5
 80038d8:	4620      	mov	r0, r4
 80038da:	f240 5125 	movw	r1, #1317	; 0x525
 80038de:	f7fe f95f 	bl	8001ba0 <USART_ITConfig>
	USART_Cmd(USART3, ENABLE);
 80038e2:	4629      	mov	r1, r5
 80038e4:	4620      	mov	r0, r4
 80038e6:	f7fe f94d 	bl	8001b84 <USART_Cmd>
		USART_SendData(USART3, cmd1[i]);
	}
	*/


}
 80038ea:	b007      	add	sp, #28
 80038ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038ee:	bf00      	nop
 80038f0:	40010c00 	.word	0x40010c00

080038f4 <main>:
#ifdef WIN32
int main(int argc, char *argv[])
#else
int main(void)
#endif
{
 80038f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if defined (STM32F103C8)
    //GPIO_PinRemapConfig(GPIO_Remap_SWJ_Disable, ENABLE); // ??? Disable JTAG and SWD!?? Bug?
#ifdef LEDBLINK
	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 80038f8:	2101      	movs	r1, #1
{
 80038fa:	b083      	sub	sp, #12
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 80038fc:	2010      	movs	r0, #16
 80038fe:	f7fd fff1 	bl	80018e4 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
 8003902:	f44f 5000 	mov.w	r0, #8192	; 0x2000
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8003906:	2310      	movs	r3, #16
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 8003908:	2202      	movs	r2, #2
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
 800390a:	a902      	add	r1, sp, #8
 800390c:	f821 0d04 	strh.w	r0, [r1, #-4]!
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8003910:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8003914:	f500 4070 	add.w	r0, r0, #61440	; 0xf000
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8003918:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 800391c:	f88d 2006 	strb.w	r2, [sp, #6]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8003920:	f7fd fd6e 	bl	8001400 <GPIO_Init>


#ifndef USEUSB
	USART1_Configuration(115200);
#else
	Set_USBClock();
 8003924:	f007 fa9a 	bl	800ae5c <Set_USBClock>
	USB_Interrupts_Config();
 8003928:	f007 faa4 	bl	800ae74 <USB_Interrupts_Config>
	USB_Init();
 800392c:	f007 f84a 	bl	800a9c4 <USB_Init>
#endif

#ifndef NOEEPROMSUPPORT
	FLASH_Unlock();
 8003930:	f7fd fc6e 	bl	8001210 <FLASH_Unlock>
	eeprom_init();
 8003934:	f7fe f9f4 	bl	8001d20 <eeprom_init>
#endif
	SysTick->CTRL &= 0xfffffffb;
 8003938:	492b      	ldr	r1, [pc, #172]	; (80039e8 <main+0xf4>)

    // Reset system variables.
    uint8_t prior_state = sys.state;
    memset(&sys, 0, sizeof(system_t)); // Clear system struct variable.
    sys.state = prior_state;
    sys.f_override = DEFAULT_FEED_OVERRIDE;  // Set to 100%
 800393a:	f04f 0864 	mov.w	r8, #100	; 0x64
	SysTick->CTRL &= 0xfffffffb;
 800393e:	680a      	ldr	r2, [r1, #0]
 8003940:	4d2a      	ldr	r5, [pc, #168]	; (80039ec <main+0xf8>)
 8003942:	f022 0204 	bic.w	r2, r2, #4
 8003946:	600a      	str	r2, [r1, #0]
  serial_init();   // Setup serial baud rate and interrupts
 8003948:	f003 feb2 	bl	80076b0 <serial_init>
  settings_init(); // Load Grbl settings from EEPROM
 800394c:	f004 fa86 	bl	8007e5c <settings_init>
  stepper_init();  // Configure stepper pins and interrupt timers
 8003950:	f005 f830 	bl	80089b4 <stepper_init>
  system_init();   // Configure pinout pins and pin-change interrupt
 8003954:	f005 fe66 	bl	8009624 <system_init>
  	USART3_Configuration(9600); // SCE2, TODO: change back?
 8003958:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 800395c:	f7ff ff6e 	bl	800383c <USART3_Configuration>
  memset(sys_position,0,sizeof(sys_position)); // Clear machine position.
 8003960:	2100      	movs	r1, #0
 8003962:	460a      	mov	r2, r1
    memset(&sys, 0, sizeof(system_t)); // Clear system struct variable.
 8003964:	460c      	mov	r4, r1
  memset(sys_position,0,sizeof(sys_position)); // Clear machine position.
 8003966:	4822      	ldr	r0, [pc, #136]	; (80039f0 <main+0xfc>)
 8003968:	4e22      	ldr	r6, [pc, #136]	; (80039f4 <main+0x100>)
 800396a:	f8df b094 	ldr.w	fp, [pc, #148]	; 8003a00 <main+0x10c>
 800396e:	f8df a094 	ldr.w	sl, [pc, #148]	; 8003a04 <main+0x110>
 8003972:	f8df 9094 	ldr.w	r9, [pc, #148]	; 8003a08 <main+0x114>
 8003976:	4f20      	ldr	r7, [pc, #128]	; (80039f8 <main+0x104>)
 8003978:	6001      	str	r1, [r0, #0]
 800397a:	6041      	str	r1, [r0, #4]
 800397c:	6081      	str	r1, [r0, #8]
 800397e:	60c1      	str	r1, [r0, #12]
    sys.spindle_speed_ovr = DEFAULT_SPINDLE_SPEED_OVERRIDE; // Set to 100%
	memset(sys_probe_position,0,sizeof(sys_probe_position)); // Clear probe position.
    sys_probe_state = 0;
    sys_rt_exec_state = 0;
    sys_rt_exec_alarm = 0;
    sys_rt_exec_motion_override = 0;
 8003980:	4b1e      	ldr	r3, [pc, #120]	; (80039fc <main+0x108>)
    sys_probe_state = 0;
 8003982:	f88b 4000 	strb.w	r4, [fp]
    memset(&sys, 0, sizeof(system_t)); // Clear system struct variable.
 8003986:	60ac      	str	r4, [r5, #8]
    sys_rt_exec_state = 0;
 8003988:	f88a 4000 	strb.w	r4, [sl]
    memset(&sys, 0, sizeof(system_t)); // Clear system struct variable.
 800398c:	602c      	str	r4, [r5, #0]
    sys_rt_exec_alarm = 0;
 800398e:	f889 4000 	strb.w	r4, [r9]
    sys.state = prior_state;
 8003992:	702a      	strb	r2, [r5, #0]
    sys_rt_exec_motion_override = 0;
 8003994:	701c      	strb	r4, [r3, #0]
    memset(&sys, 0, sizeof(system_t)); // Clear system struct variable.
 8003996:	606c      	str	r4, [r5, #4]
 8003998:	60ec      	str	r4, [r5, #12]
 800399a:	612c      	str	r4, [r5, #16]
    sys.f_override = DEFAULT_FEED_OVERRIDE;  // Set to 100%
 800399c:	f885 8008 	strb.w	r8, [r5, #8]
    sys.r_override = DEFAULT_RAPID_OVERRIDE; // Set to 100%
 80039a0:	f885 8009 	strb.w	r8, [r5, #9]
    sys.spindle_speed_ovr = DEFAULT_SPINDLE_SPEED_OVERRIDE; // Set to 100%
 80039a4:	f885 800a 	strb.w	r8, [r5, #10]
	memset(sys_probe_position,0,sizeof(sys_probe_position)); // Clear probe position.
 80039a8:	6034      	str	r4, [r6, #0]
 80039aa:	6074      	str	r4, [r6, #4]
 80039ac:	60b4      	str	r4, [r6, #8]
 80039ae:	60f4      	str	r4, [r6, #12]
    sys_rt_exec_accessory_override = 0;
 80039b0:	703c      	strb	r4, [r7, #0]

    // Reset Grbl primary systems.
    serial_reset_read_buffer(); // Clear serial read buffer
 80039b2:	f003 ffd7 	bl	8007964 <serial_reset_read_buffer>
    gc_init(); // Set g-code parser to default state
 80039b6:	f7fe fa51 	bl	8001e5c <gc_init>
    spindle_init();
 80039ba:	f004 faeb 	bl	8007f94 <spindle_init>
    coolant_init();
 80039be:	f7fe f90f 	bl	8001be0 <coolant_init>
    limits_init();
 80039c2:	f7ff fc25 	bl	8003210 <limits_init>
    probe_init();
 80039c6:	f001 fc2b 	bl	8005220 <probe_init>
    plan_reset(); // Clear block buffer and planner variables
 80039ca:	f000 fe1d 	bl	8004608 <plan_reset>
    st_reset(); // Clear stepper subsystem variables.
 80039ce:	f004 ff4d 	bl	800886c <st_reset>

    // Sync cleared gcode and planner positions to current system position.
    plan_sync_position();
 80039d2:	f001 f9ab 	bl	8004d2c <plan_sync_position>
    gc_sync_position();
 80039d6:	f7fe fa57 	bl	8001e88 <gc_sync_position>

    // Print welcome message. Indicates an initialization has occured at power-up or with a reset.
    report_init_message();
 80039da:	f002 ff2f 	bl	800683c <report_init_message>

    // Start Grbl main loop. Processes program inputs and executes them.
    protocol_main_loop();
 80039de:	f002 fde7 	bl	80065b0 <protocol_main_loop>
 80039e2:	782a      	ldrb	r2, [r5, #0]
 80039e4:	e7cc      	b.n	8003980 <main+0x8c>
 80039e6:	bf00      	nop
 80039e8:	e000e010 	.word	0xe000e010
 80039ec:	200010c8 	.word	0x200010c8
 80039f0:	200010f0 	.word	0x200010f0
 80039f4:	200010e0 	.word	0x200010e0
 80039f8:	200010dc 	.word	0x200010dc
 80039fc:	200010c4 	.word	0x200010c4
 8003a00:	200010de 	.word	0x200010de
 8003a04:	200010dd 	.word	0x200010dd
 8003a08:	20001100 	.word	0x20001100

08003a0c <_delay_ms>:
}
#if defined (STM32F103C8)
void _delay_ms(uint32_t x)
{
	u32 temp;
	SysTick->LOAD = (u32)72000000 / 8000 * x;                     // Loading time
 8003a0c:	f242 3128 	movw	r1, #9000	; 0x2328
 8003a10:	4b09      	ldr	r3, [pc, #36]	; (8003a38 <_delay_ms+0x2c>)
{
 8003a12:	b430      	push	{r4, r5}
	SysTick->VAL = 0x00;                                            // Empty the counter
 8003a14:	2500      	movs	r5, #0
	SysTick->CTRL = 0x01;                                           // Start from bottom
 8003a16:	2401      	movs	r4, #1
	do
	{
		temp = SysTick->CTRL;
 8003a18:	461a      	mov	r2, r3
	SysTick->LOAD = (u32)72000000 / 8000 * x;                     // Loading time
 8003a1a:	fb01 f000 	mul.w	r0, r1, r0
 8003a1e:	6058      	str	r0, [r3, #4]
	SysTick->VAL = 0x00;                                            // Empty the counter
 8003a20:	609d      	str	r5, [r3, #8]
	SysTick->CTRL = 0x01;                                           // Start from bottom
 8003a22:	601c      	str	r4, [r3, #0]
		temp = SysTick->CTRL;
 8003a24:	6813      	ldr	r3, [r2, #0]
	} while ((temp & 0x01) && !(temp&(1 << 16)));                             // Wait time arrive
 8003a26:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d0fa      	beq.n	8003a24 <_delay_ms+0x18>
	SysTick->CTRL = 0x00;                                            // Close the counter
 8003a2e:	2300      	movs	r3, #0
	SysTick->VAL = 0X00;                                            // Empty the counter
}
 8003a30:	bc30      	pop	{r4, r5}
	SysTick->CTRL = 0x00;                                            // Close the counter
 8003a32:	6013      	str	r3, [r2, #0]
	SysTick->VAL = 0X00;                                            // Empty the counter
 8003a34:	6093      	str	r3, [r2, #8]
}
 8003a36:	4770      	bx	lr
 8003a38:	e000e010 	.word	0xe000e010

08003a3c <LedBlink>:
void LedBlink(void)
{
 8003a3c:	b510      	push	{r4, lr}
	static BitAction nOnFlag = Bit_SET;
	GPIO_WriteBit(GPIOC, GPIO_Pin_13, nOnFlag);
 8003a3e:	4c07      	ldr	r4, [pc, #28]	; (8003a5c <LedBlink+0x20>)
 8003a40:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003a44:	7822      	ldrb	r2, [r4, #0]
 8003a46:	4806      	ldr	r0, [pc, #24]	; (8003a60 <LedBlink+0x24>)
 8003a48:	f7fd fe9c 	bl	8001784 <GPIO_WriteBit>
	nOnFlag = (nOnFlag == Bit_SET) ? Bit_RESET : Bit_SET;
 8003a4c:	7823      	ldrb	r3, [r4, #0]
 8003a4e:	f113 33ff 	adds.w	r3, r3, #4294967295
 8003a52:	bf18      	it	ne
 8003a54:	2301      	movne	r3, #1
 8003a56:	7023      	strb	r3, [r4, #0]
 8003a58:	bd10      	pop	{r4, pc}
 8003a5a:	bf00      	nop
 8003a5c:	20000014 	.word	0x20000014
 8003a60:	40011000 	.word	0x40011000

08003a64 <mc_line>:
// NOTE: This is the primary gateway to the grbl planner. All line motions, including arc line
// segments, must pass through this routine before being passed to the planner. The seperation of
// mc_line and plan_buffer_line is done primarily to place non-planner-type functions from being
// in the planner and to let backlash compensation or canned cycle integration simple and direct.
void mc_line(float *target, plan_line_data_t *pl_data)
{
 8003a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // If enabled, check for soft limit violations. Placed here all line motions are picked up
  // from everywhere in Grbl.
  if (bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE)) {
 8003a66:	4d17      	ldr	r5, [pc, #92]	; (8003ac4 <mc_line+0x60>)
{
 8003a68:	460e      	mov	r6, r1
  if (bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE)) {
 8003a6a:	f895 3058 	ldrb.w	r3, [r5, #88]	; 0x58
{
 8003a6e:	4607      	mov	r7, r0
  if (bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE)) {
 8003a70:	0699      	lsls	r1, r3, #26
    // NOTE: Block jog state. Jogging is a special case and soft limits are handled independently.
    if (sys.state != STATE_JOG) { limits_soft_check(target); }
 8003a72:	4c15      	ldr	r4, [pc, #84]	; (8003ac8 <mc_line+0x64>)
  if (bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE)) {
 8003a74:	d504      	bpl.n	8003a80 <mc_line+0x1c>
    if (sys.state != STATE_JOG) { limits_soft_check(target); }
 8003a76:	7823      	ldrb	r3, [r4, #0]
 8003a78:	2b20      	cmp	r3, #32
 8003a7a:	d00a      	beq.n	8003a92 <mc_line+0x2e>
 8003a7c:	f7ff febc 	bl	80037f8 <limits_soft_check>
  }

  // If in check gcode mode, prevent motion by blocking planner. Soft limits still work.
  if (sys.state == STATE_CHECK_MODE) { return; }
 8003a80:	7823      	ldrb	r3, [r4, #0]
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d105      	bne.n	8003a92 <mc_line+0x2e>
 8003a86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  // If the buffer is full: good! That means we are well ahead of the robot.
  // Remain in this loop until there is room in the buffer.
  do {
    protocol_execute_realtime(); // Check for any run-time commands
    if (sys.abort) { return; } // Bail, if system abort.
    if ( plan_check_full_buffer() ) { protocol_auto_cycle_start(); } // Auto-cycle start when buffer is full.
 8003a88:	f000 fe2e 	bl	80046e8 <plan_check_full_buffer>
 8003a8c:	b138      	cbz	r0, 8003a9e <mc_line+0x3a>
 8003a8e:	f001 fc35 	bl	80052fc <protocol_auto_cycle_start>
    protocol_execute_realtime(); // Check for any run-time commands
 8003a92:	f002 f95f 	bl	8005d54 <protocol_execute_realtime>
    if (sys.abort) { return; } // Bail, if system abort.
 8003a96:	7863      	ldrb	r3, [r4, #1]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d0f5      	beq.n	8003a88 <mc_line+0x24>
 8003a9c:	e7f3      	b.n	8003a86 <mc_line+0x22>
    else { break; }
  } while (1);

  // Plan and queue motion into planner buffer
	if (plan_buffer_line(target, pl_data) == PLAN_EMPTY_BLOCK) {
 8003a9e:	4638      	mov	r0, r7
 8003aa0:	4631      	mov	r1, r6
 8003aa2:	f000 fee1 	bl	8004868 <plan_buffer_line>
 8003aa6:	2800      	cmp	r0, #0
 8003aa8:	d1ed      	bne.n	8003a86 <mc_line+0x22>
		if (bit_istrue(settings.flags, BITFLAG_LASER_MODE)) {
 8003aaa:	f895 3058 	ldrb.w	r3, [r5, #88]	; 0x58
 8003aae:	079a      	lsls	r2, r3, #30
 8003ab0:	d5e9      	bpl.n	8003a86 <mc_line+0x22>
			// Correctly set spindle state, if there is a coincident position passed. Forces a buffer
			// sync while in M3 laser mode only.
			if (pl_data->condition & PL_COND_FLAG_SPINDLE_CW) {
 8003ab2:	7a33      	ldrb	r3, [r6, #8]
 8003ab4:	06db      	lsls	r3, r3, #27
 8003ab6:	d5e6      	bpl.n	8003a86 <mc_line+0x22>
				spindle_sync(PL_COND_FLAG_SPINDLE_CW, pl_data->spindle_speed);
 8003ab8:	6871      	ldr	r1, [r6, #4]
 8003aba:	2010      	movs	r0, #16
			}
		}
	}
}
 8003abc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				spindle_sync(PL_COND_FLAG_SPINDLE_CW, pl_data->spindle_speed);
 8003ac0:	f004 bbfa 	b.w	80082b8 <spindle_sync>
 8003ac4:	20001404 	.word	0x20001404
 8003ac8:	200010c8 	.word	0x200010c8
 8003acc:	00000000 	.word	0x00000000

08003ad0 <mc_arc>:
// The arc is approximated by generating a huge number of tiny, linear segments. The chordal tolerance
// of each segment is configured in settings.arc_tolerance, which is defined to be the maximum normal
// distance from segment to the circle when the end points both lie on the circle.
void mc_arc(float *target, plan_line_data_t *pl_data, float *position, float *offset, float radius,
  uint8_t axis_0, uint8_t axis_1, uint8_t axis_linear, uint8_t is_clockwise_arc)
{
 8003ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ad4:	461f      	mov	r7, r3
 8003ad6:	b091      	sub	sp, #68	; 0x44
 8003ad8:	f89d 406c 	ldrb.w	r4, [sp, #108]	; 0x6c
 8003adc:	4683      	mov	fp, r0
  float center_axis0 = position[axis_0] + offset[axis_0];
 8003ade:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
 8003ae2:	00a3      	lsls	r3, r4, #2
 8003ae4:	18d6      	adds	r6, r2, r3
{
 8003ae6:	900f      	str	r0, [sp, #60]	; 0x3c
 8003ae8:	910b      	str	r1, [sp, #44]	; 0x2c
  float center_axis0 = position[axis_0] + offset[axis_0];
 8003aea:	4628      	mov	r0, r5
 8003aec:	f852 1024 	ldr.w	r1, [r2, r4, lsl #2]
 8003af0:	9602      	str	r6, [sp, #8]
 8003af2:	18fe      	adds	r6, r7, r3
 8003af4:	9207      	str	r2, [sp, #28]
 8003af6:	960c      	str	r6, [sp, #48]	; 0x30
 8003af8:	f7fc ffd2 	bl	8000aa0 <__addsf3>
{
 8003afc:	f89d 6070 	ldrb.w	r6, [sp, #112]	; 0x70
  float center_axis1 = position[axis_1] + offset[axis_1];
 8003b00:	9a07      	ldr	r2, [sp, #28]
 8003b02:	f857 8026 	ldr.w	r8, [r7, r6, lsl #2]
 8003b06:	00b3      	lsls	r3, r6, #2
 8003b08:	441f      	add	r7, r3
 8003b0a:	f852 1026 	ldr.w	r1, [r2, r6, lsl #2]
  float center_axis0 = position[axis_0] + offset[axis_0];
 8003b0e:	4682      	mov	sl, r0
  float center_axis1 = position[axis_1] + offset[axis_1];
 8003b10:	441a      	add	r2, r3
  float center_axis0 = position[axis_0] + offset[axis_0];
 8003b12:	9003      	str	r0, [sp, #12]
  float center_axis1 = position[axis_1] + offset[axis_1];
 8003b14:	4640      	mov	r0, r8
 8003b16:	9204      	str	r2, [sp, #16]
 8003b18:	970d      	str	r7, [sp, #52]	; 0x34
 8003b1a:	f7fc ffc1 	bl	8000aa0 <__addsf3>
  float r_axis0 = -offset[axis_0];  // Radius vector from center to current location
  float r_axis1 = -offset[axis_1];
  float rt_axis0 = target[axis_0] - center_axis0;
 8003b1e:	4651      	mov	r1, sl
  float center_axis1 = position[axis_1] + offset[axis_1];
 8003b20:	4681      	mov	r9, r0
 8003b22:	9005      	str	r0, [sp, #20]
  float rt_axis0 = target[axis_0] - center_axis0;
 8003b24:	f85b 0024 	ldr.w	r0, [fp, r4, lsl #2]
 8003b28:	f7fc ffb8 	bl	8000a9c <__aeabi_fsub>
  float rt_axis1 = target[axis_1] - center_axis1;
 8003b2c:	4649      	mov	r1, r9
  float rt_axis0 = target[axis_0] - center_axis0;
 8003b2e:	4604      	mov	r4, r0
  float rt_axis1 = target[axis_1] - center_axis1;
 8003b30:	f85b 0026 	ldr.w	r0, [fp, r6, lsl #2]
 8003b34:	f7fc ffb2 	bl	8000a9c <__aeabi_fsub>
  float r_axis0 = -offset[axis_0];  // Radius vector from center to current location
 8003b38:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
  float rt_axis1 = target[axis_1] - center_axis1;
 8003b3c:	4606      	mov	r6, r0

  // CCW angle between position and target from circle center. Only one atan2() trig computation required.
  float angular_travel = atan2f(r_axis0*rt_axis1-r_axis1*rt_axis0, r_axis0*rt_axis0+r_axis1*rt_axis1);
 8003b3e:	4621      	mov	r1, r4
 8003b40:	4628      	mov	r0, r5
 8003b42:	f7fd f8b5 	bl	8000cb0 <__aeabi_fmul>
  float r_axis1 = -offset[axis_1];
 8003b46:	f108 4800 	add.w	r8, r8, #2147483648	; 0x80000000
  float angular_travel = atan2f(r_axis0*rt_axis1-r_axis1*rt_axis0, r_axis0*rt_axis0+r_axis1*rt_axis1);
 8003b4a:	4607      	mov	r7, r0
 8003b4c:	4631      	mov	r1, r6
 8003b4e:	4640      	mov	r0, r8
 8003b50:	f7fd f8ae 	bl	8000cb0 <__aeabi_fmul>
 8003b54:	4601      	mov	r1, r0
 8003b56:	4638      	mov	r0, r7
 8003b58:	f7fc ffa2 	bl	8000aa0 <__addsf3>
 8003b5c:	4631      	mov	r1, r6
 8003b5e:	4681      	mov	r9, r0
 8003b60:	4628      	mov	r0, r5
 8003b62:	f7fd f8a5 	bl	8000cb0 <__aeabi_fmul>
 8003b66:	4621      	mov	r1, r4
 8003b68:	4606      	mov	r6, r0
 8003b6a:	4640      	mov	r0, r8
 8003b6c:	f7fd f8a0 	bl	8000cb0 <__aeabi_fmul>
 8003b70:	4601      	mov	r1, r0
 8003b72:	4630      	mov	r0, r6
 8003b74:	f7fc ff92 	bl	8000a9c <__aeabi_fsub>
 8003b78:	4649      	mov	r1, r9
 8003b7a:	f007 fdcb 	bl	800b714 <atan2f>
{
 8003b7e:	f89d 7078 	ldrb.w	r7, [sp, #120]	; 0x78
  float angular_travel = atan2f(r_axis0*rt_axis1-r_axis1*rt_axis0, r_axis0*rt_axis0+r_axis1*rt_axis1);
 8003b82:	4606      	mov	r6, r0
{
 8003b84:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8003b86:	f89d 9074 	ldrb.w	r9, [sp, #116]	; 0x74
  if (is_clockwise_arc) { // Correct atan2 output per direction
 8003b8a:	2f00      	cmp	r7, #0
 8003b8c:	f000 80d0 	beq.w	8003d30 <mc_arc+0x260>
    if (angular_travel >= -ARC_ANGULAR_TRAVEL_EPSILON) { angular_travel -= 2*M_PI; }
 8003b90:	f7fc fc42 	bl	8000418 <__aeabi_f2d>
 8003b94:	a3a8      	add	r3, pc, #672	; (adr r3, 8003e38 <mc_arc+0x368>)
 8003b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b9a:	4682      	mov	sl, r0
 8003b9c:	468b      	mov	fp, r1
 8003b9e:	f7fc ff15 	bl	80009cc <__aeabi_dcmpge>
 8003ba2:	2800      	cmp	r0, #0
 8003ba4:	f040 80e9 	bne.w	8003d7a <mc_arc+0x2aa>
  // NOTE: Segment end points are on the arc, which can lead to the arc diameter being smaller by up to
  // (2x) settings.arc_tolerance. For 99% of users, this is just fine. If a different arc segment fit
  // is desired, i.e. least-squares, midpoint on arc, just change the mm_per_arc_segment calculation.
  // For the intended uses of Grbl, this value shouldn't exceed 2000 for the strictest of cases.
  uint16_t segments = (uint16_t)floorf(fabsf(0.5f*angular_travel*radius) /
                          sqrtf(settings.arc_tolerance*(2*radius - settings.arc_tolerance)) );
 8003ba8:	f8df b2b0 	ldr.w	fp, [pc, #688]	; 8003e5c <mc_arc+0x38c>
 8003bac:	4621      	mov	r1, r4
 8003bae:	f8db 704c 	ldr.w	r7, [fp, #76]	; 0x4c
 8003bb2:	4620      	mov	r0, r4
 8003bb4:	f7fc ff74 	bl	8000aa0 <__addsf3>
 8003bb8:	4639      	mov	r1, r7
 8003bba:	f7fc ff6f 	bl	8000a9c <__aeabi_fsub>
 8003bbe:	4639      	mov	r1, r7
 8003bc0:	f7fd f876 	bl	8000cb0 <__aeabi_fmul>
 8003bc4:	f007 fda8 	bl	800b718 <sqrtf>
  uint16_t segments = (uint16_t)floorf(fabsf(0.5f*angular_travel*radius) /
 8003bc8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
                          sqrtf(settings.arc_tolerance*(2*radius - settings.arc_tolerance)) );
 8003bcc:	4607      	mov	r7, r0
  uint16_t segments = (uint16_t)floorf(fabsf(0.5f*angular_travel*radius) /
 8003bce:	4620      	mov	r0, r4
 8003bd0:	f7fd f86e 	bl	8000cb0 <__aeabi_fmul>
 8003bd4:	4631      	mov	r1, r6
 8003bd6:	f7fd f86b 	bl	8000cb0 <__aeabi_fmul>
 8003bda:	4639      	mov	r1, r7
 8003bdc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003be0:	f7fd f91a 	bl	8000e18 <__aeabi_fdiv>
 8003be4:	f007 fcf4 	bl	800b5d0 <floorf>
 8003be8:	f7fd fa64 	bl	80010b4 <__aeabi_f2uiz>
 8003bec:	b283      	uxth	r3, r0
 8003bee:	9301      	str	r3, [sp, #4]

  if (segments) {
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	f000 816b 	beq.w	8003ecc <mc_arc+0x3fc>
    // Multiply inverse feed_rate to compensate for the fact that this movement is approximated
    // by a number of discrete segments. The inverse feed_rate should be correct for the sum of
    // all segments.
    if (pl_data->condition & PL_COND_FLAG_INVERSE_TIME) { 
 8003bf6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
      pl_data->feed_rate *= segments; 
 8003bf8:	9801      	ldr	r0, [sp, #4]
    if (pl_data->condition & PL_COND_FLAG_INVERSE_TIME) { 
 8003bfa:	7a1c      	ldrb	r4, [r3, #8]
 8003bfc:	0722      	lsls	r2, r4, #28
 8003bfe:	f100 80ae 	bmi.w	8003d5e <mc_arc+0x28e>
 8003c02:	f7fd f801 	bl	8000c08 <__aeabi_i2f>
 8003c06:	4607      	mov	r7, r0
 8003c08:	4639      	mov	r1, r7
 8003c0a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003c0e:	f7fd f903 	bl	8000e18 <__aeabi_fdiv>
 8003c12:	4604      	mov	r4, r0
      bit_false(pl_data->condition,PL_COND_FLAG_INVERSE_TIME); // Force as feed absolute mode over arc segments.
    }
    
    float theta_per_segment = angular_travel/segments;
 8003c14:	4601      	mov	r1, r0
 8003c16:	4630      	mov	r0, r6
 8003c18:	f7fd f84a 	bl	8000cb0 <__aeabi_fmul>
    float linear_per_segment = (target[axis_linear] - position[axis_linear])/segments;
 8003c1c:	9b07      	ldr	r3, [sp, #28]
 8003c1e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003c20:	f853 1029 	ldr.w	r1, [r3, r9, lsl #2]
    float theta_per_segment = angular_travel/segments;
 8003c24:	4607      	mov	r7, r0
 8003c26:	900e      	str	r0, [sp, #56]	; 0x38
    float linear_per_segment = (target[axis_linear] - position[axis_linear])/segments;
 8003c28:	f852 0029 	ldr.w	r0, [r2, r9, lsl #2]
 8003c2c:	f7fc ff36 	bl	8000a9c <__aeabi_fsub>
 8003c30:	4621      	mov	r1, r4
 8003c32:	f7fd f83d 	bl	8000cb0 <__aeabi_fmul>
       without the initial overhead of computing cos() or sin(). By the time the arc needs to be applied
       a correction, the planner should have caught up to the lag caused by the initial mc_arc overhead.
       This is important when there are successive arc motions.
    */
    // Computes: cos_T = 1 - theta_per_segment^2/2, sin_T = theta_per_segment - theta_per_segment^3/6) in ~52usec
    float cos_T = 2.0f - theta_per_segment*theta_per_segment;
 8003c36:	4639      	mov	r1, r7
    float linear_per_segment = (target[axis_linear] - position[axis_linear])/segments;
 8003c38:	9006      	str	r0, [sp, #24]
    float cos_T = 2.0f - theta_per_segment*theta_per_segment;
 8003c3a:	4638      	mov	r0, r7
 8003c3c:	f7fd f838 	bl	8000cb0 <__aeabi_fmul>
 8003c40:	4601      	mov	r1, r0
 8003c42:	4604      	mov	r4, r0
 8003c44:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003c48:	f7fc ff28 	bl	8000a9c <__aeabi_fsub>
    float sin_T = theta_per_segment*0.16666667f*(cos_T + 4.0f);
 8003c4c:	4980      	ldr	r1, [pc, #512]	; (8003e50 <mc_arc+0x380>)
    float cos_T = 2.0f - theta_per_segment*theta_per_segment;
 8003c4e:	4606      	mov	r6, r0
    float sin_T = theta_per_segment*0.16666667f*(cos_T + 4.0f);
 8003c50:	4638      	mov	r0, r7
 8003c52:	f7fd f82d 	bl	8000cb0 <__aeabi_fmul>
 8003c56:	4621      	mov	r1, r4
 8003c58:	4607      	mov	r7, r0
 8003c5a:	487e      	ldr	r0, [pc, #504]	; (8003e54 <mc_arc+0x384>)
 8003c5c:	f7fc ff1e 	bl	8000a9c <__aeabi_fsub>
 8003c60:	4601      	mov	r1, r0
 8003c62:	4638      	mov	r0, r7
 8003c64:	f7fd f824 	bl	8000cb0 <__aeabi_fmul>
    float linear_per_segment = (target[axis_linear] - position[axis_linear])/segments;
 8003c68:	9b07      	ldr	r3, [sp, #28]
    float sin_T = theta_per_segment*0.16666667f*(cos_T + 4.0f);
 8003c6a:	9008      	str	r0, [sp, #32]
    cos_T *= 0.5;
 8003c6c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003c70:	4630      	mov	r0, r6
    float linear_per_segment = (target[axis_linear] - position[axis_linear])/segments;
 8003c72:	eb03 0789 	add.w	r7, r3, r9, lsl #2
    cos_T *= 0.5;
 8003c76:	f7fd f81b 	bl	8000cb0 <__aeabi_fmul>
    float cos_Ti;
    float r_axisi;
    uint16_t i;
    uint8_t count = 0;

    for (i = 1; i<segments; i++) { // Increment (segments-1).
 8003c7a:	9b01      	ldr	r3, [sp, #4]
    cos_T *= 0.5;
 8003c7c:	9009      	str	r0, [sp, #36]	; 0x24
    for (i = 1; i<segments; i++) { // Increment (segments-1).
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	f000 8124 	beq.w	8003ecc <mc_arc+0x3fc>
 8003c84:	2601      	movs	r6, #1
 8003c86:	f04f 0900 	mov.w	r9, #0
 8003c8a:	4c73      	ldr	r4, [pc, #460]	; (8003e58 <mc_arc+0x388>)

      if (count < N_ARC_CORRECTION) {
 8003c8c:	f1b9 0f0b 	cmp.w	r9, #11
 8003c90:	f200 80e6 	bhi.w	8003e60 <mc_arc+0x390>
        // Apply vector rotation matrix. ~40 usec
        r_axisi = r_axis0*sin_T + r_axis1*cos_T;
 8003c94:	4629      	mov	r1, r5
 8003c96:	9808      	ldr	r0, [sp, #32]
 8003c98:	f7fd f80a 	bl	8000cb0 <__aeabi_fmul>
 8003c9c:	4641      	mov	r1, r8
 8003c9e:	4682      	mov	sl, r0
 8003ca0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003ca2:	f7fd f805 	bl	8000cb0 <__aeabi_fmul>
 8003ca6:	4601      	mov	r1, r0
 8003ca8:	4650      	mov	r0, sl
 8003caa:	f7fc fef9 	bl	8000aa0 <__addsf3>
        r_axis0 = r_axis0*cos_T - r_axis1*sin_T;
 8003cae:	4629      	mov	r1, r5
        r_axisi = r_axis0*sin_T + r_axis1*cos_T;
 8003cb0:	4682      	mov	sl, r0
        r_axis0 = r_axis0*cos_T - r_axis1*sin_T;
 8003cb2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003cb4:	f7fc fffc 	bl	8000cb0 <__aeabi_fmul>
 8003cb8:	4641      	mov	r1, r8
 8003cba:	4605      	mov	r5, r0
 8003cbc:	9808      	ldr	r0, [sp, #32]
 8003cbe:	f7fc fff7 	bl	8000cb0 <__aeabi_fmul>
 8003cc2:	4601      	mov	r1, r0
 8003cc4:	4628      	mov	r0, r5
 8003cc6:	f7fc fee9 	bl	8000a9c <__aeabi_fsub>
        r_axis1 = r_axisi;
 8003cca:	46d0      	mov	r8, sl
        r_axis0 = r_axis0*cos_T - r_axis1*sin_T;
 8003ccc:	4605      	mov	r5, r0
        count++;
 8003cce:	f109 0901 	add.w	r9, r9, #1
 8003cd2:	fa5f f989 	uxtb.w	r9, r9
        r_axis1 = -offset[axis_0]*sin_Ti - offset[axis_1]*cos_Ti;
        count = 0;
      }

      // Update arc_target location
      position[axis_0] = center_axis0 + r_axis0;
 8003cd6:	9903      	ldr	r1, [sp, #12]
 8003cd8:	4628      	mov	r0, r5
 8003cda:	f7fc fee1 	bl	8000aa0 <__addsf3>
 8003cde:	9b02      	ldr	r3, [sp, #8]
      position[axis_1] = center_axis1 + r_axis1;
 8003ce0:	9905      	ldr	r1, [sp, #20]
      position[axis_0] = center_axis0 + r_axis0;
 8003ce2:	6018      	str	r0, [r3, #0]
      position[axis_1] = center_axis1 + r_axis1;
 8003ce4:	4640      	mov	r0, r8
 8003ce6:	f7fc fedb 	bl	8000aa0 <__addsf3>
 8003cea:	9b04      	ldr	r3, [sp, #16]
      position[axis_linear] += linear_per_segment;
 8003cec:	9906      	ldr	r1, [sp, #24]
      position[axis_1] = center_axis1 + r_axis1;
 8003cee:	6018      	str	r0, [r3, #0]
      position[axis_linear] += linear_per_segment;
 8003cf0:	6838      	ldr	r0, [r7, #0]
 8003cf2:	f7fc fed5 	bl	8000aa0 <__addsf3>
 8003cf6:	6038      	str	r0, [r7, #0]
  if (bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE)) {
 8003cf8:	f89b 3058 	ldrb.w	r3, [fp, #88]	; 0x58
 8003cfc:	069b      	lsls	r3, r3, #26
 8003cfe:	d505      	bpl.n	8003d0c <mc_arc+0x23c>
    if (sys.state != STATE_JOG) { limits_soft_check(target); }
 8003d00:	7823      	ldrb	r3, [r4, #0]
 8003d02:	2b20      	cmp	r3, #32
 8003d04:	d00c      	beq.n	8003d20 <mc_arc+0x250>
 8003d06:	9807      	ldr	r0, [sp, #28]
 8003d08:	f7ff fd76 	bl	80037f8 <limits_soft_check>
  if (sys.state == STATE_CHECK_MODE) { return; }
 8003d0c:	7823      	ldrb	r3, [r4, #0]
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d106      	bne.n	8003d20 <mc_arc+0x250>
 8003d12:	e051      	b.n	8003db8 <mc_arc+0x2e8>
    if ( plan_check_full_buffer() ) { protocol_auto_cycle_start(); } // Auto-cycle start when buffer is full.
 8003d14:	f000 fce8 	bl	80046e8 <plan_check_full_buffer>
 8003d18:	2800      	cmp	r0, #0
 8003d1a:	d039      	beq.n	8003d90 <mc_arc+0x2c0>
 8003d1c:	f001 faee 	bl	80052fc <protocol_auto_cycle_start>
    protocol_execute_realtime(); // Check for any run-time commands
 8003d20:	f002 f818 	bl	8005d54 <protocol_execute_realtime>
    if (sys.abort) { return; } // Bail, if system abort.
 8003d24:	7863      	ldrb	r3, [r4, #1]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d0f4      	beq.n	8003d14 <mc_arc+0x244>
      if (sys.abort) { return; }
    }
  }
  // Ensure last segment arrives at target location.
  mc_line(target, pl_data);
}
 8003d2a:	b011      	add	sp, #68	; 0x44
 8003d2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (angular_travel <= ARC_ANGULAR_TRAVEL_EPSILON) { angular_travel += 2*M_PI; }
 8003d30:	f7fc fb72 	bl	8000418 <__aeabi_f2d>
 8003d34:	a342      	add	r3, pc, #264	; (adr r3, 8003e40 <mc_arc+0x370>)
 8003d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d3a:	4682      	mov	sl, r0
 8003d3c:	468b      	mov	fp, r1
 8003d3e:	f7fc fe3b 	bl	80009b8 <__aeabi_dcmple>
 8003d42:	2800      	cmp	r0, #0
 8003d44:	f43f af30 	beq.w	8003ba8 <mc_arc+0xd8>
 8003d48:	a33f      	add	r3, pc, #252	; (adr r3, 8003e48 <mc_arc+0x378>)
 8003d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d4e:	4650      	mov	r0, sl
 8003d50:	4659      	mov	r1, fp
 8003d52:	f7fc fa03 	bl	800015c <__adddf3>
 8003d56:	f7fc fe4d 	bl	80009f4 <__aeabi_d2f>
 8003d5a:	4606      	mov	r6, r0
 8003d5c:	e724      	b.n	8003ba8 <mc_arc+0xd8>
      pl_data->feed_rate *= segments; 
 8003d5e:	f7fc ff53 	bl	8000c08 <__aeabi_i2f>
 8003d62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003d64:	4601      	mov	r1, r0
 8003d66:	4607      	mov	r7, r0
 8003d68:	6818      	ldr	r0, [r3, #0]
 8003d6a:	f7fc ffa1 	bl	8000cb0 <__aeabi_fmul>
 8003d6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
      bit_false(pl_data->condition,PL_COND_FLAG_INVERSE_TIME); // Force as feed absolute mode over arc segments.
 8003d70:	f024 0408 	bic.w	r4, r4, #8
      pl_data->feed_rate *= segments; 
 8003d74:	6018      	str	r0, [r3, #0]
      bit_false(pl_data->condition,PL_COND_FLAG_INVERSE_TIME); // Force as feed absolute mode over arc segments.
 8003d76:	721c      	strb	r4, [r3, #8]
 8003d78:	e746      	b.n	8003c08 <mc_arc+0x138>
    if (angular_travel >= -ARC_ANGULAR_TRAVEL_EPSILON) { angular_travel -= 2*M_PI; }
 8003d7a:	a333      	add	r3, pc, #204	; (adr r3, 8003e48 <mc_arc+0x378>)
 8003d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d80:	4650      	mov	r0, sl
 8003d82:	4659      	mov	r1, fp
 8003d84:	f7fc f9e8 	bl	8000158 <__aeabi_dsub>
 8003d88:	f7fc fe34 	bl	80009f4 <__aeabi_d2f>
 8003d8c:	4606      	mov	r6, r0
 8003d8e:	e70b      	b.n	8003ba8 <mc_arc+0xd8>
	if (plan_buffer_line(target, pl_data) == PLAN_EMPTY_BLOCK) {
 8003d90:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8003d94:	9807      	ldr	r0, [sp, #28]
 8003d96:	4651      	mov	r1, sl
 8003d98:	f000 fd66 	bl	8004868 <plan_buffer_line>
 8003d9c:	b960      	cbnz	r0, 8003db8 <mc_arc+0x2e8>
		if (bit_istrue(settings.flags, BITFLAG_LASER_MODE)) {
 8003d9e:	f89b 3058 	ldrb.w	r3, [fp, #88]	; 0x58
 8003da2:	0798      	lsls	r0, r3, #30
 8003da4:	d508      	bpl.n	8003db8 <mc_arc+0x2e8>
			if (pl_data->condition & PL_COND_FLAG_SPINDLE_CW) {
 8003da6:	f89a 3008 	ldrb.w	r3, [sl, #8]
 8003daa:	06d9      	lsls	r1, r3, #27
 8003dac:	d504      	bpl.n	8003db8 <mc_arc+0x2e8>
				spindle_sync(PL_COND_FLAG_SPINDLE_CW, pl_data->spindle_speed);
 8003dae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003db0:	2010      	movs	r0, #16
 8003db2:	6859      	ldr	r1, [r3, #4]
 8003db4:	f004 fa80 	bl	80082b8 <spindle_sync>
      if (sys.abort) { return; }
 8003db8:	7863      	ldrb	r3, [r4, #1]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d1b5      	bne.n	8003d2a <mc_arc+0x25a>
 8003dbe:	3601      	adds	r6, #1
    for (i = 1; i<segments; i++) { // Increment (segments-1).
 8003dc0:	9a01      	ldr	r2, [sp, #4]
 8003dc2:	b2b3      	uxth	r3, r6
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	f63f af61 	bhi.w	8003c8c <mc_arc+0x1bc>
  if (bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE)) {
 8003dca:	f89b 3058 	ldrb.w	r3, [fp, #88]	; 0x58
 8003dce:	0699      	lsls	r1, r3, #26
 8003dd0:	d505      	bpl.n	8003dde <mc_arc+0x30e>
    if (sys.state != STATE_JOG) { limits_soft_check(target); }
 8003dd2:	7823      	ldrb	r3, [r4, #0]
 8003dd4:	2b20      	cmp	r3, #32
 8003dd6:	d00f      	beq.n	8003df8 <mc_arc+0x328>
 8003dd8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003dda:	f7ff fd0d 	bl	80037f8 <limits_soft_check>
  if (sys.state == STATE_CHECK_MODE) { return; }
 8003dde:	7823      	ldrb	r3, [r4, #0]
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d0a2      	beq.n	8003d2a <mc_arc+0x25a>
    protocol_execute_realtime(); // Check for any run-time commands
 8003de4:	f001 ffb6 	bl	8005d54 <protocol_execute_realtime>
    if (sys.abort) { return; } // Bail, if system abort.
 8003de8:	7863      	ldrb	r3, [r4, #1]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d19d      	bne.n	8003d2a <mc_arc+0x25a>
    if ( plan_check_full_buffer() ) { protocol_auto_cycle_start(); } // Auto-cycle start when buffer is full.
 8003dee:	f000 fc7b 	bl	80046e8 <plan_check_full_buffer>
 8003df2:	b150      	cbz	r0, 8003e0a <mc_arc+0x33a>
 8003df4:	f001 fa82 	bl	80052fc <protocol_auto_cycle_start>
    protocol_execute_realtime(); // Check for any run-time commands
 8003df8:	f001 ffac 	bl	8005d54 <protocol_execute_realtime>
    if (sys.abort) { return; } // Bail, if system abort.
 8003dfc:	7863      	ldrb	r3, [r4, #1]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d193      	bne.n	8003d2a <mc_arc+0x25a>
    if ( plan_check_full_buffer() ) { protocol_auto_cycle_start(); } // Auto-cycle start when buffer is full.
 8003e02:	f000 fc71 	bl	80046e8 <plan_check_full_buffer>
 8003e06:	2800      	cmp	r0, #0
 8003e08:	d1f4      	bne.n	8003df4 <mc_arc+0x324>
	if (plan_buffer_line(target, pl_data) == PLAN_EMPTY_BLOCK) {
 8003e0a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8003e0c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003e0e:	4621      	mov	r1, r4
 8003e10:	f000 fd2a 	bl	8004868 <plan_buffer_line>
 8003e14:	2800      	cmp	r0, #0
 8003e16:	d188      	bne.n	8003d2a <mc_arc+0x25a>
		if (bit_istrue(settings.flags, BITFLAG_LASER_MODE)) {
 8003e18:	f89b 3058 	ldrb.w	r3, [fp, #88]	; 0x58
 8003e1c:	079a      	lsls	r2, r3, #30
 8003e1e:	d584      	bpl.n	8003d2a <mc_arc+0x25a>
			if (pl_data->condition & PL_COND_FLAG_SPINDLE_CW) {
 8003e20:	7a23      	ldrb	r3, [r4, #8]
 8003e22:	06db      	lsls	r3, r3, #27
 8003e24:	d581      	bpl.n	8003d2a <mc_arc+0x25a>
				spindle_sync(PL_COND_FLAG_SPINDLE_CW, pl_data->spindle_speed);
 8003e26:	2010      	movs	r0, #16
 8003e28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003e2a:	6859      	ldr	r1, [r3, #4]
}
 8003e2c:	b011      	add	sp, #68	; 0x44
 8003e2e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				spindle_sync(PL_COND_FLAG_SPINDLE_CW, pl_data->spindle_speed);
 8003e32:	f004 ba41 	b.w	80082b8 <spindle_sync>
 8003e36:	bf00      	nop
 8003e38:	a0b5ed8d 	.word	0xa0b5ed8d
 8003e3c:	bea0c6f7 	.word	0xbea0c6f7
 8003e40:	a0b5ed8d 	.word	0xa0b5ed8d
 8003e44:	3ea0c6f7 	.word	0x3ea0c6f7
 8003e48:	54442d18 	.word	0x54442d18
 8003e4c:	401921fb 	.word	0x401921fb
 8003e50:	3e2aaaab 	.word	0x3e2aaaab
 8003e54:	40c00000 	.word	0x40c00000
 8003e58:	200010c8 	.word	0x200010c8
 8003e5c:	20001404 	.word	0x20001404
        cos_Ti = cosf(i*theta_per_segment);
 8003e60:	4630      	mov	r0, r6
 8003e62:	f7fc fed1 	bl	8000c08 <__aeabi_i2f>
 8003e66:	990e      	ldr	r1, [sp, #56]	; 0x38
 8003e68:	f7fc ff22 	bl	8000cb0 <__aeabi_fmul>
 8003e6c:	4605      	mov	r5, r0
 8003e6e:	f007 fb7b 	bl	800b568 <cosf>
 8003e72:	4680      	mov	r8, r0
        sin_Ti = sinf(i*theta_per_segment);
 8003e74:	4628      	mov	r0, r5
 8003e76:	f007 fc17 	bl	800b6a8 <sinf>
        r_axis0 = -offset[axis_0]*cos_Ti + offset[axis_1]*sin_Ti;
 8003e7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
        sin_Ti = sinf(i*theta_per_segment);
 8003e7c:	4682      	mov	sl, r0
        r_axis0 = -offset[axis_0]*cos_Ti + offset[axis_1]*sin_Ti;
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4640      	mov	r0, r8
 8003e82:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003e86:	4619      	mov	r1, r3
 8003e88:	930a      	str	r3, [sp, #40]	; 0x28
 8003e8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003e8c:	f8d3 9000 	ldr.w	r9, [r3]
 8003e90:	f7fc ff0e 	bl	8000cb0 <__aeabi_fmul>
 8003e94:	4649      	mov	r1, r9
 8003e96:	4605      	mov	r5, r0
 8003e98:	4650      	mov	r0, sl
 8003e9a:	f7fc ff09 	bl	8000cb0 <__aeabi_fmul>
 8003e9e:	4601      	mov	r1, r0
 8003ea0:	4628      	mov	r0, r5
 8003ea2:	f7fc fdfd 	bl	8000aa0 <__addsf3>
        r_axis1 = -offset[axis_0]*sin_Ti - offset[axis_1]*cos_Ti;
 8003ea6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
        r_axis0 = -offset[axis_0]*cos_Ti + offset[axis_1]*sin_Ti;
 8003ea8:	4605      	mov	r5, r0
        r_axis1 = -offset[axis_0]*sin_Ti - offset[axis_1]*cos_Ti;
 8003eaa:	4619      	mov	r1, r3
 8003eac:	4650      	mov	r0, sl
 8003eae:	f7fc feff 	bl	8000cb0 <__aeabi_fmul>
 8003eb2:	4649      	mov	r1, r9
 8003eb4:	4682      	mov	sl, r0
 8003eb6:	4640      	mov	r0, r8
 8003eb8:	f7fc fefa 	bl	8000cb0 <__aeabi_fmul>
 8003ebc:	4601      	mov	r1, r0
 8003ebe:	4650      	mov	r0, sl
 8003ec0:	f7fc fdec 	bl	8000a9c <__aeabi_fsub>
        count = 0;
 8003ec4:	f04f 0900 	mov.w	r9, #0
        r_axis1 = -offset[axis_0]*sin_Ti - offset[axis_1]*cos_Ti;
 8003ec8:	4680      	mov	r8, r0
 8003eca:	e704      	b.n	8003cd6 <mc_arc+0x206>
 8003ecc:	4c00      	ldr	r4, [pc, #0]	; (8003ed0 <mc_arc+0x400>)
 8003ece:	e77c      	b.n	8003dca <mc_arc+0x2fa>
 8003ed0:	200010c8 	.word	0x200010c8

08003ed4 <mc_dwell>:


// Execute dwell in seconds.
void mc_dwell(float seconds)
{
  if (sys.state == STATE_CHECK_MODE) { return; }
 8003ed4:	4b07      	ldr	r3, [pc, #28]	; (8003ef4 <mc_dwell+0x20>)
 8003ed6:	781b      	ldrb	r3, [r3, #0]
 8003ed8:	2b02      	cmp	r3, #2
 8003eda:	d009      	beq.n	8003ef0 <mc_dwell+0x1c>
{
 8003edc:	b510      	push	{r4, lr}
 8003ede:	4604      	mov	r4, r0
  protocol_buffer_synchronize();
 8003ee0:	f002 f92a 	bl	8006138 <protocol_buffer_synchronize>
  delay_sec(seconds, DELAY_MODE_DWELL);
 8003ee4:	4620      	mov	r0, r4
}
 8003ee6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  delay_sec(seconds, DELAY_MODE_DWELL);
 8003eea:	2100      	movs	r1, #0
 8003eec:	f000 b978 	b.w	80041e0 <delay_sec>
 8003ef0:	4770      	bx	lr
 8003ef2:	bf00      	nop
 8003ef4:	200010c8 	.word	0x200010c8

08003ef8 <mc_homing_cycle>:

// Perform homing cycle to locate and set machine zero. Only '$H' executes this command.
// NOTE: There should be no motions in the buffer and Grbl must be in an idle state before
// executing the homing cycle. This prevents incorrect buffered plans after homing.
void mc_homing_cycle(uint8_t cycle_mask)
{
 8003ef8:	b510      	push	{r4, lr}
 8003efa:	4604      	mov	r4, r0
      system_set_exec_alarm(EXEC_ALARM_HARD_LIMIT);
      return;
    }
  #endif

  limits_disable(); // Disable hard limits pin change register for cycle duration
 8003efc:	f7ff f9de 	bl	80032bc <limits_disable>

  // -------------------------------------------------------------------------------------
  // Perform homing routine. NOTE: Special motion case. Only system reset works.
  
  #ifdef HOMING_SINGLE_AXIS_COMMANDS
    if (cycle_mask) { limits_go_home(cycle_mask); } // Perform homing cycle based on mask.
 8003f00:	b1b4      	cbz	r4, 8003f30 <mc_homing_cycle+0x38>
 8003f02:	4620      	mov	r0, r4
 8003f04:	f7ff fa68 	bl	80033d8 <limits_go_home>
    #ifdef HOMING_CYCLE_2
      limits_go_home(HOMING_CYCLE_2);  // Homing cycle 2
    #endif
  }

  protocol_execute_realtime(); // Check for reset and set system abort.
 8003f08:	f001 ff24 	bl	8005d54 <protocol_execute_realtime>
  if (sys.abort) { return; } // Did not complete. Alarm state set by mc_alarm.
 8003f0c:	4b0d      	ldr	r3, [pc, #52]	; (8003f44 <mc_homing_cycle+0x4c>)
 8003f0e:	785b      	ldrb	r3, [r3, #1]
 8003f10:	b96b      	cbnz	r3, 8003f2e <mc_homing_cycle+0x36>

  // Homing cycle complete! Setup system for normal operation.
  // -------------------------------------------------------------------------------------

  // Sync gcode parser and planner positions to homed position.
  gc_sync_position();
 8003f12:	f7fd ffb9 	bl	8001e88 <gc_sync_position>
  plan_sync_position();
 8003f16:	f000 ff09 	bl	8004d2c <plan_sync_position>

  // If hard limits feature enabled, re-enable hard limits pin change register after homing cycle.
#ifdef STM32F103C8
// --- YSV 22-06-2018
	#if defined AA_AXIS
	EXTI_ClearITPendingBit((1 << X_LIMIT_BIT) | (1 << Y_LIMIT_BIT) | (1 << Z_LIMIT_BIT) | (1 << A_LIMIT_BIT));
 8003f1a:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8003f1e:	f7fd f971 	bl	8001204 <EXTI_ClearITPendingBit>
 8003f22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f26:	4b08      	ldr	r3, [pc, #32]	; (8003f48 <mc_homing_cycle+0x50>)
 8003f28:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 8003f2c:	605a      	str	r2, [r3, #4]
 8003f2e:	bd10      	pop	{r4, pc}
    limits_go_home(HOMING_CYCLE_0);  // Homing cycle 0
 8003f30:	2004      	movs	r0, #4
 8003f32:	f7ff fa51 	bl	80033d8 <limits_go_home>
      limits_go_home(HOMING_CYCLE_1);  // Homing cycle 1
 8003f36:	2003      	movs	r0, #3
 8003f38:	f7ff fa4e 	bl	80033d8 <limits_go_home>
      limits_go_home(HOMING_CYCLE_2);  // Homing cycle 2
 8003f3c:	2008      	movs	r0, #8
 8003f3e:	f7ff fa4b 	bl	80033d8 <limits_go_home>
 8003f42:	e7e1      	b.n	8003f08 <mc_homing_cycle+0x10>
 8003f44:	200010c8 	.word	0x200010c8
 8003f48:	e000e100 	.word	0xe000e100

08003f4c <mc_probe_cycle>:


// Perform tool length probe cycle. Requires probe switch.
// NOTE: Upon probe failure, the program will be stopped and placed into ALARM state.
uint8_t mc_probe_cycle(float *target, plan_line_data_t *pl_data, uint8_t parser_flags)
{
 8003f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // TODO: Need to update this cycle so it obeys a non-auto cycle start.
  if (sys.state == STATE_CHECK_MODE) { return(GC_PROBE_CHECK_MODE); }
 8003f50:	4c42      	ldr	r4, [pc, #264]	; (800405c <mc_probe_cycle+0x110>)
 8003f52:	7823      	ldrb	r3, [r4, #0]
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d00c      	beq.n	8003f72 <mc_probe_cycle+0x26>
 8003f58:	4617      	mov	r7, r2
 8003f5a:	460e      	mov	r6, r1
 8003f5c:	4605      	mov	r5, r0

  // Finish all queued commands and empty planner buffer before starting probe cycle.
  protocol_buffer_synchronize();
 8003f5e:	f002 f8eb 	bl	8006138 <protocol_buffer_synchronize>
  if (sys.abort) { return(GC_PROBE_ABORT); } // Return if system reset has been issued.
 8003f62:	f894 8001 	ldrb.w	r8, [r4, #1]
 8003f66:	f1b8 0f00 	cmp.w	r8, #0
 8003f6a:	d005      	beq.n	8003f78 <mc_probe_cycle+0x2c>
  // NOTE: This probe initialization error applies to all probing cycles.
  if ( probe_get_state() ) { // Check probe pin state.
    system_set_exec_alarm(EXEC_ALARM_PROBE_FAIL_INITIAL);
    protocol_execute_realtime();
    probe_configure_invert_mask(false); // Re-initialize invert mask before returning.
    return(GC_PROBE_FAIL_INIT); // Nothing else to do but bail.
 8003f6c:	2002      	movs	r0, #2
 8003f6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (sys.state == STATE_CHECK_MODE) { return(GC_PROBE_CHECK_MODE); }
 8003f72:	2000      	movs	r0, #0
    report_probe_parameters();
  #endif

  if (sys.probe_succeeded) { return(GC_PROBE_FOUND); } // Successful probe cycle.
  else { return(GC_PROBE_FAIL_END); } // Failed to trigger probe within travel. With or without error.
}
 8003f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  probe_configure_invert_mask(is_probe_away);
 8003f78:	f3c7 00c0 	ubfx	r0, r7, #3, #1
  sys.probe_succeeded = false; // Re-initialize probe history before beginning cycle.
 8003f7c:	f884 8005 	strb.w	r8, [r4, #5]
  probe_configure_invert_mask(is_probe_away);
 8003f80:	f001 f974 	bl	800526c <probe_configure_invert_mask>
  if ( probe_get_state() ) { // Check probe pin state.
 8003f84:	f001 f986 	bl	8005294 <probe_get_state>
 8003f88:	b140      	cbz	r0, 8003f9c <mc_probe_cycle+0x50>
    system_set_exec_alarm(EXEC_ALARM_PROBE_FAIL_INITIAL);
 8003f8a:	2004      	movs	r0, #4
 8003f8c:	f005 fe6a 	bl	8009c64 <system_set_exec_alarm>
    protocol_execute_realtime();
 8003f90:	f001 fee0 	bl	8005d54 <protocol_execute_realtime>
    probe_configure_invert_mask(false); // Re-initialize invert mask before returning.
 8003f94:	4640      	mov	r0, r8
 8003f96:	f001 f969 	bl	800526c <probe_configure_invert_mask>
 8003f9a:	e7e7      	b.n	8003f6c <mc_probe_cycle+0x20>
  if (bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE)) {
 8003f9c:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 800406c <mc_probe_cycle+0x120>
 8003fa0:	f898 3058 	ldrb.w	r3, [r8, #88]	; 0x58
 8003fa4:	0698      	lsls	r0, r3, #26
 8003fa6:	d505      	bpl.n	8003fb4 <mc_probe_cycle+0x68>
    if (sys.state != STATE_JOG) { limits_soft_check(target); }
 8003fa8:	7823      	ldrb	r3, [r4, #0]
 8003faa:	2b20      	cmp	r3, #32
 8003fac:	d00b      	beq.n	8003fc6 <mc_probe_cycle+0x7a>
 8003fae:	4628      	mov	r0, r5
 8003fb0:	f7ff fc22 	bl	80037f8 <limits_soft_check>
  if (sys.state == STATE_CHECK_MODE) { return; }
 8003fb4:	7823      	ldrb	r3, [r4, #0]
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	d105      	bne.n	8003fc6 <mc_probe_cycle+0x7a>
 8003fba:	e009      	b.n	8003fd0 <mc_probe_cycle+0x84>
    if ( plan_check_full_buffer() ) { protocol_auto_cycle_start(); } // Auto-cycle start when buffer is full.
 8003fbc:	f000 fb94 	bl	80046e8 <plan_check_full_buffer>
 8003fc0:	b370      	cbz	r0, 8004020 <mc_probe_cycle+0xd4>
 8003fc2:	f001 f99b 	bl	80052fc <protocol_auto_cycle_start>
    protocol_execute_realtime(); // Check for any run-time commands
 8003fc6:	f001 fec5 	bl	8005d54 <protocol_execute_realtime>
    if (sys.abort) { return; } // Bail, if system abort.
 8003fca:	7863      	ldrb	r3, [r4, #1]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d0f5      	beq.n	8003fbc <mc_probe_cycle+0x70>
  sys_probe_state = PROBE_ACTIVE;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	4d23      	ldr	r5, [pc, #140]	; (8004060 <mc_probe_cycle+0x114>)
  system_set_exec_state_flag(EXEC_CYCLE_START);
 8003fd4:	2002      	movs	r0, #2
  sys_probe_state = PROBE_ACTIVE;
 8003fd6:	702b      	strb	r3, [r5, #0]
  system_set_exec_state_flag(EXEC_CYCLE_START);
 8003fd8:	f005 fe30 	bl	8009c3c <system_set_exec_state_flag>
    protocol_execute_realtime();
 8003fdc:	f001 feba 	bl	8005d54 <protocol_execute_realtime>
    if (sys.abort) { return(GC_PROBE_ABORT); } // Check for system abort
 8003fe0:	7863      	ldrb	r3, [r4, #1]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d1c2      	bne.n	8003f6c <mc_probe_cycle+0x20>
  } while (sys.state != STATE_IDLE);
 8003fe6:	7823      	ldrb	r3, [r4, #0]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d1f7      	bne.n	8003fdc <mc_probe_cycle+0x90>
  if (sys_probe_state == PROBE_ACTIVE) {
 8003fec:	782b      	ldrb	r3, [r5, #0]
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d028      	beq.n	8004044 <mc_probe_cycle+0xf8>
    sys.probe_succeeded = true; // Indicate to system the probing cycle completed successfully.
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	7163      	strb	r3, [r4, #5]
  sys_probe_state = PROBE_OFF; // Ensure probe state monitor is disabled.
 8003ff6:	2300      	movs	r3, #0
  probe_configure_invert_mask(false); // Re-initialize invert mask.
 8003ff8:	4618      	mov	r0, r3
  sys_probe_state = PROBE_OFF; // Ensure probe state monitor is disabled.
 8003ffa:	702b      	strb	r3, [r5, #0]
  probe_configure_invert_mask(false); // Re-initialize invert mask.
 8003ffc:	f001 f936 	bl	800526c <probe_configure_invert_mask>
  protocol_execute_realtime();   // Check and execute run-time commands
 8004000:	f001 fea8 	bl	8005d54 <protocol_execute_realtime>
  st_reset(); // Reset step segment buffer.
 8004004:	f004 fc32 	bl	800886c <st_reset>
  plan_reset(); // Reset planner buffer. Zero planner positions. Ensure probing motion is cleared.
 8004008:	f000 fafe 	bl	8004608 <plan_reset>
  plan_sync_position(); // Sync planner position to current machine position.
 800400c:	f000 fe8e 	bl	8004d2c <plan_sync_position>
    report_probe_parameters();
 8004010:	f002 ff16 	bl	8006e40 <report_probe_parameters>
  if (sys.probe_succeeded) { return(GC_PROBE_FOUND); } // Successful probe cycle.
 8004014:	7960      	ldrb	r0, [r4, #5]
  if (sys.state == STATE_CHECK_MODE) { return(GC_PROBE_CHECK_MODE); }
 8004016:	3000      	adds	r0, #0
 8004018:	bf18      	it	ne
 800401a:	2001      	movne	r0, #1
 800401c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (plan_buffer_line(target, pl_data) == PLAN_EMPTY_BLOCK) {
 8004020:	4628      	mov	r0, r5
 8004022:	4631      	mov	r1, r6
 8004024:	f000 fc20 	bl	8004868 <plan_buffer_line>
 8004028:	2800      	cmp	r0, #0
 800402a:	d1d1      	bne.n	8003fd0 <mc_probe_cycle+0x84>
		if (bit_istrue(settings.flags, BITFLAG_LASER_MODE)) {
 800402c:	f898 3058 	ldrb.w	r3, [r8, #88]	; 0x58
 8004030:	0799      	lsls	r1, r3, #30
 8004032:	d5cd      	bpl.n	8003fd0 <mc_probe_cycle+0x84>
			if (pl_data->condition & PL_COND_FLAG_SPINDLE_CW) {
 8004034:	7a33      	ldrb	r3, [r6, #8]
 8004036:	06da      	lsls	r2, r3, #27
 8004038:	d5ca      	bpl.n	8003fd0 <mc_probe_cycle+0x84>
				spindle_sync(PL_COND_FLAG_SPINDLE_CW, pl_data->spindle_speed);
 800403a:	6871      	ldr	r1, [r6, #4]
 800403c:	2010      	movs	r0, #16
 800403e:	f004 f93b 	bl	80082b8 <spindle_sync>
 8004042:	e7c5      	b.n	8003fd0 <mc_probe_cycle+0x84>
    if (is_no_error) { memcpy(sys_probe_position, sys_position, sizeof(sys_position)); }
 8004044:	06fb      	lsls	r3, r7, #27
 8004046:	d505      	bpl.n	8004054 <mc_probe_cycle+0x108>
 8004048:	4b06      	ldr	r3, [pc, #24]	; (8004064 <mc_probe_cycle+0x118>)
 800404a:	4e07      	ldr	r6, [pc, #28]	; (8004068 <mc_probe_cycle+0x11c>)
 800404c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800404e:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8004052:	e7d0      	b.n	8003ff6 <mc_probe_cycle+0xaa>
    else { system_set_exec_alarm(EXEC_ALARM_PROBE_FAIL_CONTACT); }
 8004054:	2005      	movs	r0, #5
 8004056:	f005 fe05 	bl	8009c64 <system_set_exec_alarm>
 800405a:	e7cc      	b.n	8003ff6 <mc_probe_cycle+0xaa>
 800405c:	200010c8 	.word	0x200010c8
 8004060:	200010de 	.word	0x200010de
 8004064:	200010f0 	.word	0x200010f0
 8004068:	200010e0 	.word	0x200010e0
 800406c:	20001404 	.word	0x20001404

08004070 <mc_reset>:
// active processes in the system. This also checks if a system reset is issued while Grbl
// is in a motion state. If so, kills the steppers and sets the system alarm to flag position
// lost, since there was an abrupt uncontrolled deceleration. Called at an interrupt level by
// realtime abort command and hard limits. So, keep to a minimum.
void mc_reset()
{
 8004070:	b508      	push	{r3, lr}
  // Only this function can set the system reset. Helps prevent multiple kill calls.
  if (bit_isfalse(sys_rt_exec_state, EXEC_RESET)) {
 8004072:	4b14      	ldr	r3, [pc, #80]	; (80040c4 <mc_reset+0x54>)
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	06db      	lsls	r3, r3, #27
 8004078:	d500      	bpl.n	800407c <mc_reset+0xc>
 800407a:	bd08      	pop	{r3, pc}
    system_set_exec_state_flag(EXEC_RESET);
 800407c:	2010      	movs	r0, #16
 800407e:	f005 fddd 	bl	8009c3c <system_set_exec_state_flag>

    // Kill spindle and coolant.
    spindle_stop();
 8004082:	f004 f82f 	bl	80080e4 <spindle_stop>
    coolant_stop();
 8004086:	f7fd fdef 	bl	8001c68 <coolant_stop>
    // Kill steppers only if in any motion state, i.e. cycle, actively holding, or homing.
    // NOTE: If steppers are kept enabled via the step idle delay setting, this also keeps
    // the steppers enabled by avoiding the go_idle call altogether, unless the motion state is
    // violated, by which, all bets are off.
#ifndef  USE_RESET_BTN_AS_ESTOP
    if ((sys.state & (STATE_CYCLE | STATE_HOMING | STATE_JOG)) ||
 800408a:	4a0f      	ldr	r2, [pc, #60]	; (80040c8 <mc_reset+0x58>)
 800408c:	7813      	ldrb	r3, [r2, #0]
 800408e:	f013 0f2c 	tst.w	r3, #44	; 0x2c
 8004092:	d008      	beq.n	80040a6 <mc_reset+0x36>
    		(sys.step_control & (STEP_CONTROL_EXECUTE_HOLD | STEP_CONTROL_EXECUTE_SYS_MOTION)))
#endif
    {
      if (sys.state == STATE_HOMING) {
 8004094:	2b04      	cmp	r3, #4
 8004096:	d00c      	beq.n	80040b2 <mc_reset+0x42>
        if (!sys_rt_exec_alarm) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_RESET); }
      }
      else { system_set_exec_alarm(EXEC_ALARM_ABORT_CYCLE); }
 8004098:	2003      	movs	r0, #3
 800409a:	f005 fde3 	bl	8009c64 <system_set_exec_alarm>
      st_go_idle(); // Force kill steppers. Position has likely been lost.
    }
  }
}
 800409e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      st_go_idle(); // Force kill steppers. Position has likely been lost.
 80040a2:	f004 b9ff 	b.w	80084a4 <st_go_idle>
    if ((sys.state & (STATE_CYCLE | STATE_HOMING | STATE_JOG)) ||
 80040a6:	7912      	ldrb	r2, [r2, #4]
 80040a8:	f012 0f06 	tst.w	r2, #6
 80040ac:	d0e5      	beq.n	800407a <mc_reset+0xa>
      if (sys.state == STATE_HOMING) {
 80040ae:	2b04      	cmp	r3, #4
 80040b0:	d1f2      	bne.n	8004098 <mc_reset+0x28>
        if (!sys_rt_exec_alarm) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_RESET); }
 80040b2:	4b06      	ldr	r3, [pc, #24]	; (80040cc <mc_reset+0x5c>)
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d1f1      	bne.n	800409e <mc_reset+0x2e>
 80040ba:	2006      	movs	r0, #6
 80040bc:	f005 fdd2 	bl	8009c64 <system_set_exec_alarm>
 80040c0:	e7ed      	b.n	800409e <mc_reset+0x2e>
 80040c2:	bf00      	nop
 80040c4:	200010dd 	.word	0x200010dd
 80040c8:	200010c8 	.word	0x200010c8
 80040cc:	20001100 	.word	0x20001100

080040d0 <read_float>:
// CNC applications, the typical decimal value is expected to be in the range of E0 to E-4.
// Scientific notation is officially not supported by g-code, and the 'E' character may
// be a g-code word on some CNC systems. So, 'E' notation will not be recognized.
// NOTE: Thanks to Radu-Eosif Mihailescu for identifying the issues with using strtod().
uint8_t read_float(char *line, uint8_t *char_counter, float *float_ptr)
{
 80040d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  char *ptr = line + *char_counter;
 80040d4:	780c      	ldrb	r4, [r1, #0]
{
 80040d6:	b083      	sub	sp, #12
  unsigned char c;

  // Grab first character and increment pointer. No spaces assumed in line.
  c = *ptr++;
 80040d8:	5d03      	ldrb	r3, [r0, r4]
  char *ptr = line + *char_counter;
 80040da:	4404      	add	r4, r0

  // Capture initial positive/minus character
  bool isnegative = false;
  if (c == '-') {
 80040dc:	2b2d      	cmp	r3, #45	; 0x2d
 80040de:	d065      	beq.n	80041ac <read_float+0xdc>
    isnegative = true;
    c = *ptr++;
  } else if (c == '+') {
 80040e0:	2b2b      	cmp	r3, #43	; 0x2b
 80040e2:	d068      	beq.n	80041b6 <read_float+0xe6>
  bool isnegative = false;
 80040e4:	f04f 0800 	mov.w	r8, #0
  c = *ptr++;
 80040e8:	1c65      	adds	r5, r4, #1

  // Extract number into fast integer. Track decimal in terms of exponent value.
  uint32_t intval = 0;
  int8_t exp = 0;
  uint8_t ndigit = 0;
  bool isdecimal = false;
 80040ea:	2600      	movs	r6, #0
  uint8_t ndigit = 0;
 80040ec:	4634      	mov	r4, r6
  int8_t exp = 0;
 80040ee:	4637      	mov	r7, r6
  uint32_t intval = 0;
 80040f0:	46b6      	mov	lr, r6
 80040f2:	e00c      	b.n	800410e <read_float+0x3e>
  while(1) {
    c -= '0';
    if (c <= 9) {
      ndigit++;
 80040f4:	3401      	adds	r4, #1
 80040f6:	b2e4      	uxtb	r4, r4
      if (ndigit <= MAX_INT_DIGITS) {
 80040f8:	2c08      	cmp	r4, #8
 80040fa:	d811      	bhi.n	8004120 <read_float+0x50>
        if (isdecimal) { exp--; }
 80040fc:	b10e      	cbz	r6, 8004102 <read_float+0x32>
 80040fe:	3f01      	subs	r7, #1
 8004100:	b27f      	sxtb	r7, r7
        intval = (((intval << 2) + intval) << 1) + c; // intval*10 + c
 8004102:	eb0e 0e8e 	add.w	lr, lr, lr, lsl #2
 8004106:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
    } else if (c == (('.'-'0') & 0xff)  &&  !(isdecimal)) {
      isdecimal = true;
    } else {
      break;
    }
    c = *ptr++;
 800410a:	f815 3b01 	ldrb.w	r3, [r5], #1
    c -= '0';
 800410e:	3b30      	subs	r3, #48	; 0x30
 8004110:	b2db      	uxtb	r3, r3
    if (c <= 9) {
 8004112:	2b09      	cmp	r3, #9
 8004114:	d9ee      	bls.n	80040f4 <read_float+0x24>
    } else if (c == (('.'-'0') & 0xff)  &&  !(isdecimal)) {
 8004116:	2bfe      	cmp	r3, #254	; 0xfe
 8004118:	d107      	bne.n	800412a <read_float+0x5a>
 800411a:	b936      	cbnz	r6, 800412a <read_float+0x5a>
      isdecimal = true;
 800411c:	2601      	movs	r6, #1
 800411e:	e7f4      	b.n	800410a <read_float+0x3a>
        if (!(isdecimal)) { exp++; }  // Drop overflow digits
 8004120:	2e00      	cmp	r6, #0
 8004122:	d1f2      	bne.n	800410a <read_float+0x3a>
 8004124:	3701      	adds	r7, #1
 8004126:	b27f      	sxtb	r7, r7
 8004128:	e7ef      	b.n	800410a <read_float+0x3a>
  }

  // Return if no digits have been read.
  if (!ndigit) { return(false); };
 800412a:	2c00      	cmp	r4, #0
 800412c:	d037      	beq.n	800419e <read_float+0xce>
 800412e:	4682      	mov	sl, r0

  // Convert integer into floating point.
  float fval;
  fval = (float)intval;
 8004130:	4670      	mov	r0, lr
 8004132:	9101      	str	r1, [sp, #4]
 8004134:	4691      	mov	r9, r2
 8004136:	f7fc fd63 	bl	8000c00 <__aeabi_ui2f>

  // Apply decimal. Should perform no more than two floating point multiplications for the
  // expected range of E0 to E-4.
  if (fval != 0) {
 800413a:	2100      	movs	r1, #0
  fval = (float)intval;
 800413c:	4683      	mov	fp, r0
  if (fval != 0) {
 800413e:	f7fc ff4b 	bl	8000fd8 <__aeabi_fcmpeq>
 8004142:	bb08      	cbnz	r0, 8004188 <read_float+0xb8>
    while (exp <= -2) {
 8004144:	1c79      	adds	r1, r7, #1
 8004146:	da12      	bge.n	800416e <read_float+0x9e>
 8004148:	463e      	mov	r6, r7
      fval *= 0.01f;
 800414a:	4c22      	ldr	r4, [pc, #136]	; (80041d4 <read_float+0x104>)
 800414c:	4658      	mov	r0, fp
 800414e:	4621      	mov	r1, r4
 8004150:	f7fc fdae 	bl	8000cb0 <__aeabi_fmul>
 8004154:	1cb3      	adds	r3, r6, #2
 8004156:	b25e      	sxtb	r6, r3
    while (exp <= -2) {
 8004158:	1c72      	adds	r2, r6, #1
      fval *= 0.01f;
 800415a:	4683      	mov	fp, r0
    while (exp <= -2) {
 800415c:	dbf6      	blt.n	800414c <read_float+0x7c>
 800415e:	b2ff      	uxtb	r7, r7
 8004160:	f1c7 03fe 	rsb	r3, r7, #254	; 0xfe
 8004164:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004168:	441f      	add	r7, r3
 800416a:	3702      	adds	r7, #2
 800416c:	b27f      	sxtb	r7, r7
      exp += 2;
    }
    if (exp < 0) {
 800416e:	1c7b      	adds	r3, r7, #1
 8004170:	d026      	beq.n	80041c0 <read_float+0xf0>
      fval *= 0.1f;
    } else if (exp > 0) {
 8004172:	b14f      	cbz	r7, 8004188 <read_float+0xb8>
      do {
        fval *= 10.0f;
 8004174:	4c18      	ldr	r4, [pc, #96]	; (80041d8 <read_float+0x108>)
 8004176:	4658      	mov	r0, fp
 8004178:	4621      	mov	r1, r4
 800417a:	f7fc fd99 	bl	8000cb0 <__aeabi_fmul>
 800417e:	3f01      	subs	r7, #1
 8004180:	b27f      	sxtb	r7, r7
 8004182:	4683      	mov	fp, r0
      } while (--exp > 0);
 8004184:	2f00      	cmp	r7, #0
 8004186:	d1f6      	bne.n	8004176 <read_float+0xa6>
    }
  }

  // Assign floating point value with correct sign.
  if (isnegative) {
 8004188:	f1b8 0f00 	cmp.w	r8, #0
 800418c:	d10b      	bne.n	80041a6 <read_float+0xd6>
    *float_ptr = fval;
  }

  *char_counter = ptr - line - 1; // Set char_counter to next statement

  return(true);
 800418e:	2401      	movs	r4, #1
  *char_counter = ptr - line - 1; // Set char_counter to next statement
 8004190:	eba5 050a 	sub.w	r5, r5, sl
 8004194:	9b01      	ldr	r3, [sp, #4]
 8004196:	3d01      	subs	r5, #1
 8004198:	f8c9 b000 	str.w	fp, [r9]
 800419c:	701d      	strb	r5, [r3, #0]
}
 800419e:	4620      	mov	r0, r4
 80041a0:	b003      	add	sp, #12
 80041a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    *float_ptr = -fval;
 80041a6:	f10b 4b00 	add.w	fp, fp, #2147483648	; 0x80000000
 80041aa:	e7f0      	b.n	800418e <read_float+0xbe>
    c = *ptr++;
 80041ac:	1ca5      	adds	r5, r4, #2
 80041ae:	7863      	ldrb	r3, [r4, #1]
    isnegative = true;
 80041b0:	f04f 0801 	mov.w	r8, #1
 80041b4:	e799      	b.n	80040ea <read_float+0x1a>
  bool isnegative = false;
 80041b6:	f04f 0800 	mov.w	r8, #0
    c = *ptr++;
 80041ba:	7863      	ldrb	r3, [r4, #1]
 80041bc:	1ca5      	adds	r5, r4, #2
 80041be:	e794      	b.n	80040ea <read_float+0x1a>
      fval *= 0.1f;
 80041c0:	4658      	mov	r0, fp
 80041c2:	4906      	ldr	r1, [pc, #24]	; (80041dc <read_float+0x10c>)
 80041c4:	f7fc fd74 	bl	8000cb0 <__aeabi_fmul>
 80041c8:	4683      	mov	fp, r0
  if (isnegative) {
 80041ca:	f1b8 0f00 	cmp.w	r8, #0
 80041ce:	d0de      	beq.n	800418e <read_float+0xbe>
 80041d0:	e7e9      	b.n	80041a6 <read_float+0xd6>
 80041d2:	bf00      	nop
 80041d4:	3c23d70a 	.word	0x3c23d70a
 80041d8:	41200000 	.word	0x41200000
 80041dc:	3dcccccd 	.word	0x3dcccccd

080041e0 <delay_sec>:


// Non-blocking delay function used for general operation and suspend features.
void delay_sec(float seconds, uint8_t mode)
{
 80041e0:	b570      	push	{r4, r5, r6, lr}
 80041e2:	460e      	mov	r6, r1
	uint16_t i = (uint16_t)ceilf(1000 / DWELL_TIME_STEP*seconds);
 80041e4:	4918      	ldr	r1, [pc, #96]	; (8004248 <delay_sec+0x68>)
 80041e6:	f7fc fd63 	bl	8000cb0 <__aeabi_fmul>
 80041ea:	f007 f97d 	bl	800b4e8 <ceilf>
 80041ee:	f7fc ff61 	bl	80010b4 <__aeabi_f2uiz>
 80041f2:	b280      	uxth	r0, r0
	while (i-- > 0) {
 80041f4:	b1b0      	cbz	r0, 8004224 <delay_sec+0x44>
		if (sys.abort) { return; }
 80041f6:	4d15      	ldr	r5, [pc, #84]	; (800424c <delay_sec+0x6c>)
 80041f8:	786b      	ldrb	r3, [r5, #1]
 80041fa:	b99b      	cbnz	r3, 8004224 <delay_sec+0x44>
 80041fc:	1e44      	subs	r4, r0, #1
 80041fe:	b2a4      	uxth	r4, r4
 8004200:	b18e      	cbz	r6, 8004226 <delay_sec+0x46>
	while (i-- > 0) {
 8004202:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8004206:	e008      	b.n	800421a <delay_sec+0x3a>
 8004208:	3c01      	subs	r4, #1
		} else { // DELAY_MODE_SYS_SUSPEND
		  // Execute rt_system() only to avoid nesting suspend loops.
		  protocol_exec_rt_system();
		  if (sys.suspend & SUSPEND_RESTART_RETRACT) { return; } // Bail, if safety door reopens.
		}
		_delay_ms(DWELL_TIME_STEP); // Delay DWELL_TIME_STEP increment
 800420a:	2032      	movs	r0, #50	; 0x32
	while (i-- > 0) {
 800420c:	b2a4      	uxth	r4, r4
		_delay_ms(DWELL_TIME_STEP); // Delay DWELL_TIME_STEP increment
 800420e:	f7ff fbfd 	bl	8003a0c <_delay_ms>
	while (i-- > 0) {
 8004212:	42b4      	cmp	r4, r6
 8004214:	d006      	beq.n	8004224 <delay_sec+0x44>
		if (sys.abort) { return; }
 8004216:	786b      	ldrb	r3, [r5, #1]
 8004218:	b9ab      	cbnz	r3, 8004246 <delay_sec+0x66>
		  protocol_exec_rt_system();
 800421a:	f001 f879 	bl	8005310 <protocol_exec_rt_system>
		  if (sys.suspend & SUSPEND_RESTART_RETRACT) { return; } // Bail, if safety door reopens.
 800421e:	78ab      	ldrb	r3, [r5, #2]
 8004220:	079b      	lsls	r3, r3, #30
 8004222:	d5f1      	bpl.n	8004208 <delay_sec+0x28>
 8004224:	bd70      	pop	{r4, r5, r6, pc}
	while (i-- > 0) {
 8004226:	f64f 76ff 	movw	r6, #65535	; 0xffff
 800422a:	e001      	b.n	8004230 <delay_sec+0x50>
		if (sys.abort) { return; }
 800422c:	786b      	ldrb	r3, [r5, #1]
 800422e:	b94b      	cbnz	r3, 8004244 <delay_sec+0x64>
	while (i-- > 0) {
 8004230:	3c01      	subs	r4, #1
			protocol_execute_realtime();
 8004232:	f001 fd8f 	bl	8005d54 <protocol_execute_realtime>
	while (i-- > 0) {
 8004236:	b2a4      	uxth	r4, r4
		_delay_ms(DWELL_TIME_STEP); // Delay DWELL_TIME_STEP increment
 8004238:	2032      	movs	r0, #50	; 0x32
 800423a:	f7ff fbe7 	bl	8003a0c <_delay_ms>
	while (i-- > 0) {
 800423e:	42b4      	cmp	r4, r6
 8004240:	d1f4      	bne.n	800422c <delay_sec+0x4c>
 8004242:	e7ef      	b.n	8004224 <delay_sec+0x44>
 8004244:	bd70      	pop	{r4, r5, r6, pc}
 8004246:	bd70      	pop	{r4, r5, r6, pc}
 8004248:	41a00000 	.word	0x41a00000
 800424c:	200010c8 	.word	0x200010c8

08004250 <delay_ms>:

// Delays variable defined milliseconds. Compiler compatibility fix for _delay_ms(),
// which only accepts constants in future compiler releases.
void delay_ms(uint16_t ms)
{
  while ( ms-- ) { _delay_ms(1); }
 8004250:	b160      	cbz	r0, 800426c <delay_ms+0x1c>
{
 8004252:	b538      	push	{r3, r4, r5, lr}
  while ( ms-- ) { _delay_ms(1); }
 8004254:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8004258:	1e44      	subs	r4, r0, #1
 800425a:	b2a4      	uxth	r4, r4
 800425c:	3c01      	subs	r4, #1
 800425e:	2001      	movs	r0, #1
 8004260:	b2a4      	uxth	r4, r4
 8004262:	f7ff fbd3 	bl	8003a0c <_delay_ms>
 8004266:	42ac      	cmp	r4, r5
 8004268:	d1f8      	bne.n	800425c <delay_ms+0xc>
 800426a:	bd38      	pop	{r3, r4, r5, pc}
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop

08004270 <hypot_f>:
}


// Simple hypotenuse computation function.
float hypot_f(float x, float y) { return(sqrtf(x*x + y*y)); }
 8004270:	b538      	push	{r3, r4, r5, lr}
 8004272:	460d      	mov	r5, r1
 8004274:	4601      	mov	r1, r0
 8004276:	f7fc fd1b 	bl	8000cb0 <__aeabi_fmul>
 800427a:	4629      	mov	r1, r5
 800427c:	4604      	mov	r4, r0
 800427e:	4628      	mov	r0, r5
 8004280:	f7fc fd16 	bl	8000cb0 <__aeabi_fmul>
 8004284:	4601      	mov	r1, r0
 8004286:	4620      	mov	r0, r4
 8004288:	f7fc fc0a 	bl	8000aa0 <__addsf3>
 800428c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004290:	f007 ba42 	b.w	800b718 <sqrtf>

08004294 <convert_delta_vector_to_unit_vector>:


float convert_delta_vector_to_unit_vector(float *vector)
{
 8004294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004296:	4604      	mov	r4, r0
  uint8_t idx;
  float magnitude = 0.0f;
  for (idx=0; idx<N_AXIS; idx++) {
    if (vector[idx] != 0.0f) {
 8004298:	6847      	ldr	r7, [r0, #4]
 800429a:	2100      	movs	r1, #0
 800429c:	4638      	mov	r0, r7
 800429e:	6826      	ldr	r6, [r4, #0]
 80042a0:	68a5      	ldr	r5, [r4, #8]
 80042a2:	f7fc fe99 	bl	8000fd8 <__aeabi_fcmpeq>
 80042a6:	2800      	cmp	r0, #0
 80042a8:	d14e      	bne.n	8004348 <convert_delta_vector_to_unit_vector+0xb4>
      magnitude += vector[idx]*vector[idx];
 80042aa:	4639      	mov	r1, r7
 80042ac:	4638      	mov	r0, r7
 80042ae:	f7fc fcff 	bl	8000cb0 <__aeabi_fmul>
 80042b2:	2100      	movs	r1, #0
 80042b4:	4607      	mov	r7, r0
 80042b6:	4628      	mov	r0, r5
 80042b8:	f7fc fe8e 	bl	8000fd8 <__aeabi_fcmpeq>
 80042bc:	2800      	cmp	r0, #0
 80042be:	d14a      	bne.n	8004356 <convert_delta_vector_to_unit_vector+0xc2>
 80042c0:	4629      	mov	r1, r5
 80042c2:	4628      	mov	r0, r5
 80042c4:	f7fc fcf4 	bl	8000cb0 <__aeabi_fmul>
 80042c8:	4601      	mov	r1, r0
 80042ca:	4638      	mov	r0, r7
 80042cc:	f7fc fbe8 	bl	8000aa0 <__addsf3>
 80042d0:	2100      	movs	r1, #0
 80042d2:	4605      	mov	r5, r0
 80042d4:	4630      	mov	r0, r6
 80042d6:	f7fc fe7f 	bl	8000fd8 <__aeabi_fcmpeq>
 80042da:	2800      	cmp	r0, #0
 80042dc:	d13f      	bne.n	800435e <convert_delta_vector_to_unit_vector+0xca>
 80042de:	4631      	mov	r1, r6
 80042e0:	4630      	mov	r0, r6
 80042e2:	f7fc fce5 	bl	8000cb0 <__aeabi_fmul>
 80042e6:	4601      	mov	r1, r0
 80042e8:	4628      	mov	r0, r5
 80042ea:	f7fc fbd9 	bl	8000aa0 <__addsf3>
    if (vector[idx] != 0.0f) {
 80042ee:	68e5      	ldr	r5, [r4, #12]
 80042f0:	4607      	mov	r7, r0
 80042f2:	2100      	movs	r1, #0
 80042f4:	4628      	mov	r0, r5
 80042f6:	f7fc fe6f 	bl	8000fd8 <__aeabi_fcmpeq>
 80042fa:	2800      	cmp	r0, #0
 80042fc:	d12d      	bne.n	800435a <convert_delta_vector_to_unit_vector+0xc6>
      magnitude += vector[idx]*vector[idx];
 80042fe:	4629      	mov	r1, r5
 8004300:	4628      	mov	r0, r5
 8004302:	f7fc fcd5 	bl	8000cb0 <__aeabi_fmul>
 8004306:	4639      	mov	r1, r7
 8004308:	f7fc fbca 	bl	8000aa0 <__addsf3>
    }
  }
  magnitude = sqrtf(magnitude);
 800430c:	f007 fa04 	bl	800b718 <sqrtf>
 8004310:	4607      	mov	r7, r0
  float inv_magnitude = 1.0f/magnitude;
 8004312:	4601      	mov	r1, r0
 8004314:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8004318:	f7fc fd7e 	bl	8000e18 <__aeabi_fdiv>
  for (idx=0; idx<N_AXIS; idx++) { vector[idx] *= inv_magnitude; }
 800431c:	4631      	mov	r1, r6
  float inv_magnitude = 1.0f/magnitude;
 800431e:	4605      	mov	r5, r0
  for (idx=0; idx<N_AXIS; idx++) { vector[idx] *= inv_magnitude; }
 8004320:	f7fc fcc6 	bl	8000cb0 <__aeabi_fmul>
 8004324:	4629      	mov	r1, r5
 8004326:	6020      	str	r0, [r4, #0]
 8004328:	6860      	ldr	r0, [r4, #4]
 800432a:	f7fc fcc1 	bl	8000cb0 <__aeabi_fmul>
 800432e:	4629      	mov	r1, r5
 8004330:	6060      	str	r0, [r4, #4]
 8004332:	68a0      	ldr	r0, [r4, #8]
 8004334:	f7fc fcbc 	bl	8000cb0 <__aeabi_fmul>
 8004338:	4629      	mov	r1, r5
 800433a:	60a0      	str	r0, [r4, #8]
 800433c:	68e0      	ldr	r0, [r4, #12]
 800433e:	f7fc fcb7 	bl	8000cb0 <__aeabi_fmul>
 8004342:	60e0      	str	r0, [r4, #12]
  return(magnitude);
}
 8004344:	4638      	mov	r0, r7
 8004346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004348:	2100      	movs	r1, #0
 800434a:	4628      	mov	r0, r5
 800434c:	2700      	movs	r7, #0
 800434e:	f7fc fe43 	bl	8000fd8 <__aeabi_fcmpeq>
 8004352:	2800      	cmp	r0, #0
 8004354:	d0b4      	beq.n	80042c0 <convert_delta_vector_to_unit_vector+0x2c>
 8004356:	2100      	movs	r1, #0
 8004358:	e7b7      	b.n	80042ca <convert_delta_vector_to_unit_vector+0x36>
 800435a:	2000      	movs	r0, #0
 800435c:	e7d3      	b.n	8004306 <convert_delta_vector_to_unit_vector+0x72>
 800435e:	2100      	movs	r1, #0
 8004360:	e7c2      	b.n	80042e8 <convert_delta_vector_to_unit_vector+0x54>
 8004362:	bf00      	nop

08004364 <limit_value_by_axis_maximum>:


float limit_value_by_axis_maximum(float *max_value, float *unit_vec)
{
 8004364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t idx;
  float limit_value = SOME_LARGE_VALUE;
  for (idx=0; idx<N_AXIS; idx++) {
    if (unit_vec[idx] != 0) {  // Avoid divide by zero.
 8004366:	680c      	ldr	r4, [r1, #0]
{
 8004368:	460d      	mov	r5, r1
 800436a:	4606      	mov	r6, r0
    if (unit_vec[idx] != 0) {  // Avoid divide by zero.
 800436c:	2100      	movs	r1, #0
 800436e:	4620      	mov	r0, r4
 8004370:	f7fc fe32 	bl	8000fd8 <__aeabi_fcmpeq>
 8004374:	2800      	cmp	r0, #0
 8004376:	d140      	bne.n	80043fa <limit_value_by_axis_maximum+0x96>
      limit_value = min(limit_value,fabsf(max_value[idx]/unit_vec[idx]));
 8004378:	4621      	mov	r1, r4
 800437a:	6830      	ldr	r0, [r6, #0]
 800437c:	f7fc fd4c 	bl	8000e18 <__aeabi_fdiv>
 8004380:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 8004384:	4620      	mov	r0, r4
 8004386:	4921      	ldr	r1, [pc, #132]	; (800440c <limit_value_by_axis_maximum+0xa8>)
 8004388:	f7fc fe3a 	bl	8001000 <__aeabi_fcmple>
 800438c:	2800      	cmp	r0, #0
 800438e:	d034      	beq.n	80043fa <limit_value_by_axis_maximum+0x96>
    if (unit_vec[idx] != 0) {  // Avoid divide by zero.
 8004390:	686f      	ldr	r7, [r5, #4]
 8004392:	2100      	movs	r1, #0
 8004394:	4638      	mov	r0, r7
 8004396:	f7fc fe1f 	bl	8000fd8 <__aeabi_fcmpeq>
 800439a:	b950      	cbnz	r0, 80043b2 <limit_value_by_axis_maximum+0x4e>
      limit_value = min(limit_value,fabsf(max_value[idx]/unit_vec[idx]));
 800439c:	4639      	mov	r1, r7
 800439e:	6870      	ldr	r0, [r6, #4]
 80043a0:	f7fc fd3a 	bl	8000e18 <__aeabi_fdiv>
 80043a4:	f020 4700 	bic.w	r7, r0, #2147483648	; 0x80000000
 80043a8:	4639      	mov	r1, r7
 80043aa:	4620      	mov	r0, r4
 80043ac:	f7fc fe28 	bl	8001000 <__aeabi_fcmple>
 80043b0:	b350      	cbz	r0, 8004408 <limit_value_by_axis_maximum+0xa4>
    if (unit_vec[idx] != 0) {  // Avoid divide by zero.
 80043b2:	68af      	ldr	r7, [r5, #8]
 80043b4:	2100      	movs	r1, #0
 80043b6:	4638      	mov	r0, r7
 80043b8:	f7fc fe0e 	bl	8000fd8 <__aeabi_fcmpeq>
 80043bc:	b950      	cbnz	r0, 80043d4 <limit_value_by_axis_maximum+0x70>
      limit_value = min(limit_value,fabsf(max_value[idx]/unit_vec[idx]));
 80043be:	4639      	mov	r1, r7
 80043c0:	68b0      	ldr	r0, [r6, #8]
 80043c2:	f7fc fd29 	bl	8000e18 <__aeabi_fdiv>
 80043c6:	f020 4700 	bic.w	r7, r0, #2147483648	; 0x80000000
 80043ca:	4639      	mov	r1, r7
 80043cc:	4620      	mov	r0, r4
 80043ce:	f7fc fe17 	bl	8001000 <__aeabi_fcmple>
 80043d2:	b1b8      	cbz	r0, 8004404 <limit_value_by_axis_maximum+0xa0>
    if (unit_vec[idx] != 0) {  // Avoid divide by zero.
 80043d4:	68ed      	ldr	r5, [r5, #12]
 80043d6:	2100      	movs	r1, #0
 80043d8:	4628      	mov	r0, r5
 80043da:	f7fc fdfd 	bl	8000fd8 <__aeabi_fcmpeq>
 80043de:	b950      	cbnz	r0, 80043f6 <limit_value_by_axis_maximum+0x92>
      limit_value = min(limit_value,fabsf(max_value[idx]/unit_vec[idx]));
 80043e0:	4629      	mov	r1, r5
 80043e2:	68f0      	ldr	r0, [r6, #12]
 80043e4:	f7fc fd18 	bl	8000e18 <__aeabi_fdiv>
 80043e8:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 80043ec:	4629      	mov	r1, r5
 80043ee:	4620      	mov	r0, r4
 80043f0:	f7fc fe06 	bl	8001000 <__aeabi_fcmple>
 80043f4:	b118      	cbz	r0, 80043fe <limit_value_by_axis_maximum+0x9a>
    }
  }
  return(limit_value);
}
 80043f6:	4620      	mov	r0, r4
 80043f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  float limit_value = SOME_LARGE_VALUE;
 80043fa:	4c04      	ldr	r4, [pc, #16]	; (800440c <limit_value_by_axis_maximum+0xa8>)
 80043fc:	e7c8      	b.n	8004390 <limit_value_by_axis_maximum+0x2c>
      limit_value = min(limit_value,fabsf(max_value[idx]/unit_vec[idx]));
 80043fe:	462c      	mov	r4, r5
}
 8004400:	4620      	mov	r0, r4
 8004402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      limit_value = min(limit_value,fabsf(max_value[idx]/unit_vec[idx]));
 8004404:	463c      	mov	r4, r7
 8004406:	e7e5      	b.n	80043d4 <limit_value_by_axis_maximum+0x70>
 8004408:	463c      	mov	r4, r7
 800440a:	e7d2      	b.n	80043b2 <limit_value_by_axis_maximum+0x4e>
 800440c:	7f7fffff 	.word	0x7f7fffff

08004410 <planner_recalculate>:
  to compute an optimal plan, so select carefully. The Arduino 328p memory is already maxed out, but future
  ARM versions should have enough memory and speed for look-ahead blocks numbering up to a hundred or more.

*/
static void planner_recalculate()
{
 8004410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  // Initialize block index to the last block in the planner buffer.
  uint8_t block_index = plan_prev_block_index(block_buffer_head);
 8004414:	4b77      	ldr	r3, [pc, #476]	; (80045f4 <planner_recalculate+0x1e4>)
{
 8004416:	b083      	sub	sp, #12
  uint8_t block_index = plan_prev_block_index(block_buffer_head);
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	9300      	str	r3, [sp, #0]
  if (block_index == 0) { block_index = BLOCK_BUFFER_SIZE; }
 800441c:	2b00      	cmp	r3, #0
 800441e:	d075      	beq.n	800450c <planner_recalculate+0xfc>

  // Bail. Can't do anything with one only one plan-able block.
  if (block_index == block_buffer_planned) { return; }
 8004420:	4a75      	ldr	r2, [pc, #468]	; (80045f8 <planner_recalculate+0x1e8>)
  block_index--;
 8004422:	1e5c      	subs	r4, r3, #1
  if (block_index == block_buffer_planned) { return; }
 8004424:	f892 8000 	ldrb.w	r8, [r2]
  block_index--;
 8004428:	b2e4      	uxtb	r4, r4
  if (block_index == block_buffer_planned) { return; }
 800442a:	45a0      	cmp	r8, r4
 800442c:	9201      	str	r2, [sp, #4]
 800442e:	d06a      	beq.n	8004506 <planner_recalculate+0xf6>
  // Reverse Pass: Coarsely maximize all possible deceleration curves back-planning from the last
  // block in buffer. Cease planning when the last optimal planned or tail pointer is reached.
  // NOTE: Forward pass will later refine and correct the reverse pass to create an optimal plan.
  float entry_speed_sqr;
  plan_block_t *next;
  plan_block_t *current = &block_buffer[block_index];
 8004430:	4d72      	ldr	r5, [pc, #456]	; (80045fc <planner_recalculate+0x1ec>)
 8004432:	ebc4 07c4 	rsb	r7, r4, r4, lsl #3
 8004436:	eb05 07c7 	add.w	r7, r5, r7, lsl #3

  // Calculate maximum entry speed for last block in buffer, where the exit speed is always zero.
  current->entry_speed_sqr = min( current->max_entry_speed_sqr, 2*current->acceleration*current->millimeters);
 800443a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800443c:	6a38      	ldr	r0, [r7, #32]
 800443e:	f7fc fc37 	bl	8000cb0 <__aeabi_fmul>
 8004442:	4601      	mov	r1, r0
 8004444:	f7fc fb2c 	bl	8000aa0 <__addsf3>
 8004448:	f8d7 b01c 	ldr.w	fp, [r7, #28]
 800444c:	4681      	mov	r9, r0
 800444e:	4659      	mov	r1, fp
 8004450:	f107 0a18 	add.w	sl, r7, #24
 8004454:	f7fc fdd4 	bl	8001000 <__aeabi_fcmple>
 8004458:	b900      	cbnz	r0, 800445c <planner_recalculate+0x4c>
 800445a:	46d9      	mov	r9, fp
 800445c:	f8ca 9000 	str.w	r9, [sl]
  if (block_index == 0) { block_index = BLOCK_BUFFER_SIZE; }
 8004460:	f04f 0b23 	mov.w	fp, #35	; 0x23
 8004464:	2c00      	cmp	r4, #0
 8004466:	d06f      	beq.n	8004548 <planner_recalculate+0x138>
 8004468:	9b00      	ldr	r3, [sp, #0]
 800446a:	3b02      	subs	r3, #2
 800446c:	fa5f fb83 	uxtb.w	fp, r3
 8004470:	e06a      	b.n	8004548 <planner_recalculate+0x138>
 8004472:	4b60      	ldr	r3, [pc, #384]	; (80045f4 <planner_recalculate+0x1e4>)
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	9300      	str	r3, [sp, #0]
    }
  }

  // Forward Pass: Forward plan the acceleration curve from the planned pointer onward.
  // Also scans for optimal plan breakpoints and appropriately updates the planned pointer.
  next = &block_buffer[block_buffer_planned]; // Begin at buffer planned pointer
 8004478:	ebcb 03cb 	rsb	r3, fp, fp, lsl #3
  block_index++;
 800447c:	f10b 0401 	add.w	r4, fp, #1
 8004480:	b2e4      	uxtb	r4, r4
  next = &block_buffer[block_buffer_planned]; // Begin at buffer planned pointer
 8004482:	eb05 0ac3 	add.w	sl, r5, r3, lsl #3
 8004486:	9b01      	ldr	r3, [sp, #4]
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 8004488:	2c24      	cmp	r4, #36	; 0x24
 800448a:	bf08      	it	eq
 800448c:	2400      	moveq	r4, #0
 800448e:	f893 b000 	ldrb.w	fp, [r3]
 8004492:	e02e      	b.n	80044f2 <planner_recalculate+0xe2>
    next = &block_buffer[block_index];

    // Any acceleration detected in the forward pass automatically moves the optimal planned
    // pointer forward, since everything before this is all optimal. In other words, nothing
    // can improve the plan from the buffer tail to the planned pointer by logic.
    if (current->entry_speed_sqr < next->entry_speed_sqr) {
 8004494:	f8da 9018 	ldr.w	r9, [sl, #24]
 8004498:	f8d7 8018 	ldr.w	r8, [r7, #24]
 800449c:	4648      	mov	r0, r9
 800449e:	4641      	mov	r1, r8
 80044a0:	f7fc fda4 	bl	8000fec <__aeabi_fcmplt>
 80044a4:	b1a8      	cbz	r0, 80044d2 <planner_recalculate+0xc2>
      entry_speed_sqr = current->entry_speed_sqr + 2*current->acceleration*current->millimeters;
 80044a6:	f8da 1024 	ldr.w	r1, [sl, #36]	; 0x24
 80044aa:	f8da 0020 	ldr.w	r0, [sl, #32]
 80044ae:	f7fc fbff 	bl	8000cb0 <__aeabi_fmul>
 80044b2:	4601      	mov	r1, r0
 80044b4:	f7fc faf4 	bl	8000aa0 <__addsf3>
 80044b8:	4649      	mov	r1, r9
 80044ba:	f7fc faf1 	bl	8000aa0 <__addsf3>
 80044be:	4681      	mov	r9, r0
      // If true, current block is full-acceleration and we can move the planned pointer forward.
      if (entry_speed_sqr < next->entry_speed_sqr) {
 80044c0:	4601      	mov	r1, r0
 80044c2:	4640      	mov	r0, r8
 80044c4:	f7fc fdb0 	bl	8001028 <__aeabi_fcmpgt>
 80044c8:	b118      	cbz	r0, 80044d2 <planner_recalculate+0xc2>
        next->entry_speed_sqr = entry_speed_sqr; // Always <= max_entry_speed_sqr. Backward pass sets this.
 80044ca:	46c8      	mov	r8, r9
 80044cc:	46a3      	mov	fp, r4
 80044ce:	f8c7 9018 	str.w	r9, [r7, #24]

    // Any block set at its maximum entry speed also creates an optimal plan up to this
    // point in the buffer. When the plan is bracketed by either the beginning of the
    // buffer and a maximum entry speed or two maximum entry speeds, every block in between
    // cannot logically be further improved. Hence, we don't have to recompute them anymore.
    if (next->entry_speed_sqr == next->max_entry_speed_sqr) { block_buffer_planned = block_index; }
 80044d2:	1b32      	subs	r2, r6, r4
 80044d4:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80044d8:	69d0      	ldr	r0, [r2, #28]
 80044da:	4641      	mov	r1, r8
 80044dc:	f7fc fd7c 	bl	8000fd8 <__aeabi_fcmpeq>
  block_index++;
 80044e0:	1c63      	adds	r3, r4, #1
    if (next->entry_speed_sqr == next->max_entry_speed_sqr) { block_buffer_planned = block_index; }
 80044e2:	2800      	cmp	r0, #0
 80044e4:	bf18      	it	ne
 80044e6:	46a3      	movne	fp, r4
  block_index++;
 80044e8:	b2dc      	uxtb	r4, r3
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 80044ea:	2c24      	cmp	r4, #36	; 0x24
 80044ec:	bf08      	it	eq
 80044ee:	2400      	moveq	r4, #0
 80044f0:	46ba      	mov	sl, r7
  while (block_index != block_buffer_head) {
 80044f2:	9b00      	ldr	r3, [sp, #0]
    next = &block_buffer[block_index];
 80044f4:	00e6      	lsls	r6, r4, #3
 80044f6:	1b37      	subs	r7, r6, r4
  while (block_index != block_buffer_head) {
 80044f8:	429c      	cmp	r4, r3
    next = &block_buffer[block_index];
 80044fa:	eb05 07c7 	add.w	r7, r5, r7, lsl #3
  while (block_index != block_buffer_head) {
 80044fe:	d1c9      	bne.n	8004494 <planner_recalculate+0x84>
 8004500:	9b01      	ldr	r3, [sp, #4]
 8004502:	f883 b000 	strb.w	fp, [r3]
    block_index = plan_next_block_index( block_index );
  }
}
 8004506:	b003      	add	sp, #12
 8004508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (block_index == block_buffer_planned) { return; }
 800450c:	4b3a      	ldr	r3, [pc, #232]	; (80045f8 <planner_recalculate+0x1e8>)
 800450e:	f893 8000 	ldrb.w	r8, [r3]
 8004512:	9301      	str	r3, [sp, #4]
 8004514:	f1b8 0f23 	cmp.w	r8, #35	; 0x23
 8004518:	d0f5      	beq.n	8004506 <planner_recalculate+0xf6>
  current->entry_speed_sqr = min( current->max_entry_speed_sqr, 2*current->acceleration*current->millimeters);
 800451a:	4d38      	ldr	r5, [pc, #224]	; (80045fc <planner_recalculate+0x1ec>)
 800451c:	f8d5 17c8 	ldr.w	r1, [r5, #1992]	; 0x7c8
 8004520:	f8d5 07cc 	ldr.w	r0, [r5, #1996]	; 0x7cc
 8004524:	f7fc fbc4 	bl	8000cb0 <__aeabi_fmul>
 8004528:	4601      	mov	r1, r0
 800452a:	f7fc fab9 	bl	8000aa0 <__addsf3>
 800452e:	f8d5 77c4 	ldr.w	r7, [r5, #1988]	; 0x7c4
 8004532:	4604      	mov	r4, r0
 8004534:	4639      	mov	r1, r7
 8004536:	f7fc fd63 	bl	8001000 <__aeabi_fcmple>
 800453a:	b900      	cbnz	r0, 800453e <planner_recalculate+0x12e>
 800453c:	463c      	mov	r4, r7
 800453e:	f04f 0b22 	mov.w	fp, #34	; 0x22
  plan_block_t *current = &block_buffer[block_index];
 8004542:	4f2f      	ldr	r7, [pc, #188]	; (8004600 <planner_recalculate+0x1f0>)
  current->entry_speed_sqr = min( current->max_entry_speed_sqr, 2*current->acceleration*current->millimeters);
 8004544:	f8c5 47c0 	str.w	r4, [r5, #1984]	; 0x7c0
  if (block_index == block_buffer_planned) { // Only two plannable blocks in buffer. Reverse pass complete.
 8004548:	45d8      	cmp	r8, fp
 800454a:	d045      	beq.n	80045d8 <planner_recalculate+0x1c8>
 800454c:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 8004604 <planner_recalculate+0x1f4>
 8004550:	e029      	b.n	80045a6 <planner_recalculate+0x196>
 8004552:	fa5f fb82 	uxtb.w	fp, r2
      if (block_index == block_buffer_tail) { st_update_plan_block_parameters(); }
 8004556:	f899 2000 	ldrb.w	r2, [r9]
 800455a:	455a      	cmp	r2, fp
 800455c:	d033      	beq.n	80045c6 <planner_recalculate+0x1b6>
      if (current->entry_speed_sqr != current->max_entry_speed_sqr) {
 800455e:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 8004562:	eb05 0ac6 	add.w	sl, r5, r6, lsl #3
 8004566:	f8da 601c 	ldr.w	r6, [sl, #28]
 800456a:	f8da 0018 	ldr.w	r0, [sl, #24]
 800456e:	4631      	mov	r1, r6
 8004570:	f7fc fd32 	bl	8000fd8 <__aeabi_fcmpeq>
 8004574:	b998      	cbnz	r0, 800459e <planner_recalculate+0x18e>
        entry_speed_sqr = next->entry_speed_sqr + 2*current->acceleration*current->millimeters;
 8004576:	f8da 1024 	ldr.w	r1, [sl, #36]	; 0x24
 800457a:	f8da 0020 	ldr.w	r0, [sl, #32]
 800457e:	f7fc fb97 	bl	8000cb0 <__aeabi_fmul>
 8004582:	4601      	mov	r1, r0
 8004584:	f7fc fa8c 	bl	8000aa0 <__addsf3>
 8004588:	69b9      	ldr	r1, [r7, #24]
 800458a:	f7fc fa89 	bl	8000aa0 <__addsf3>
 800458e:	4607      	mov	r7, r0
        if (entry_speed_sqr < current->max_entry_speed_sqr) {
 8004590:	4601      	mov	r1, r0
 8004592:	4630      	mov	r0, r6
 8004594:	f7fc fd48 	bl	8001028 <__aeabi_fcmpgt>
 8004598:	b1d8      	cbz	r0, 80045d2 <planner_recalculate+0x1c2>
          current->entry_speed_sqr = entry_speed_sqr;
 800459a:	f8ca 7018 	str.w	r7, [sl, #24]
    while (block_index != block_buffer_planned) {
 800459e:	45c3      	cmp	fp, r8
 80045a0:	4627      	mov	r7, r4
 80045a2:	f43f af66 	beq.w	8004472 <planner_recalculate+0x62>
      current = &block_buffer[block_index];
 80045a6:	ebcb 04cb 	rsb	r4, fp, fp, lsl #3
 80045aa:	f10b 32ff 	add.w	r2, fp, #4294967295
 80045ae:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
 80045b2:	465e      	mov	r6, fp
  if (block_index == 0) { block_index = BLOCK_BUFFER_SIZE; }
 80045b4:	f1bb 0f00 	cmp.w	fp, #0
 80045b8:	d1cb      	bne.n	8004552 <planner_recalculate+0x142>
 80045ba:	f04f 0b23 	mov.w	fp, #35	; 0x23
      if (block_index == block_buffer_tail) { st_update_plan_block_parameters(); }
 80045be:	f899 2000 	ldrb.w	r2, [r9]
 80045c2:	455a      	cmp	r2, fp
 80045c4:	d1cb      	bne.n	800455e <planner_recalculate+0x14e>
 80045c6:	f004 fab3 	bl	8008b30 <st_update_plan_block_parameters>
 80045ca:	9b01      	ldr	r3, [sp, #4]
 80045cc:	f893 8000 	ldrb.w	r8, [r3]
 80045d0:	e7c5      	b.n	800455e <planner_recalculate+0x14e>
          current->entry_speed_sqr = current->max_entry_speed_sqr;
 80045d2:	f8ca 6018 	str.w	r6, [sl, #24]
 80045d6:	e7e2      	b.n	800459e <planner_recalculate+0x18e>
    if (block_index == block_buffer_tail) { st_update_plan_block_parameters(); }
 80045d8:	4a0a      	ldr	r2, [pc, #40]	; (8004604 <planner_recalculate+0x1f4>)
 80045da:	7812      	ldrb	r2, [r2, #0]
 80045dc:	455a      	cmp	r2, fp
 80045de:	f47f af4b 	bne.w	8004478 <planner_recalculate+0x68>
 80045e2:	f004 faa5 	bl	8008b30 <st_update_plan_block_parameters>
 80045e6:	4b03      	ldr	r3, [pc, #12]	; (80045f4 <planner_recalculate+0x1e4>)
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	9300      	str	r3, [sp, #0]
 80045ec:	9b01      	ldr	r3, [sp, #4]
 80045ee:	f893 b000 	ldrb.w	fp, [r3]
 80045f2:	e741      	b.n	8004478 <planner_recalculate+0x68>
 80045f4:	200009f4 	.word	0x200009f4
 80045f8:	200009f5 	.word	0x200009f5
 80045fc:	20000214 	.word	0x20000214
 8004600:	200009bc 	.word	0x200009bc
 8004604:	200009f6 	.word	0x200009f6

08004608 <plan_reset>:


void plan_reset()
{
 8004608:	b538      	push	{r3, r4, r5, lr}
  memset(&pl, 0, sizeof(planner_t)); // Clear planner struct
 800460a:	2224      	movs	r2, #36	; 0x24
 800460c:	2100      	movs	r1, #0
 800460e:	4807      	ldr	r0, [pc, #28]	; (800462c <plan_reset+0x24>)
 8004610:	f006 ff21 	bl	800b456 <memset>
}


void plan_reset_buffer()
{
  block_buffer_tail = 0;
 8004614:	2300      	movs	r3, #0
  block_buffer_head = 0; // Empty = tail
  next_buffer_head = 1; // plan_next_block_index(block_buffer_head)
 8004616:	2101      	movs	r1, #1
  block_buffer_tail = 0;
 8004618:	4d05      	ldr	r5, [pc, #20]	; (8004630 <plan_reset+0x28>)
  block_buffer_head = 0; // Empty = tail
 800461a:	4c06      	ldr	r4, [pc, #24]	; (8004634 <plan_reset+0x2c>)
  block_buffer_planned = 0; // = block_buffer_tail;
 800461c:	4806      	ldr	r0, [pc, #24]	; (8004638 <plan_reset+0x30>)
  next_buffer_head = 1; // plan_next_block_index(block_buffer_head)
 800461e:	4a07      	ldr	r2, [pc, #28]	; (800463c <plan_reset+0x34>)
  block_buffer_tail = 0;
 8004620:	702b      	strb	r3, [r5, #0]
  block_buffer_head = 0; // Empty = tail
 8004622:	7023      	strb	r3, [r4, #0]
  block_buffer_planned = 0; // = block_buffer_tail;
 8004624:	7003      	strb	r3, [r0, #0]
  next_buffer_head = 1; // plan_next_block_index(block_buffer_head)
 8004626:	7011      	strb	r1, [r2, #0]
 8004628:	bd38      	pop	{r3, r4, r5, pc}
 800462a:	bf00      	nop
 800462c:	200009f8 	.word	0x200009f8
 8004630:	200009f6 	.word	0x200009f6
 8004634:	200009f4 	.word	0x200009f4
 8004638:	200009f5 	.word	0x200009f5
 800463c:	200009f7 	.word	0x200009f7

08004640 <plan_discard_current_block>:
}


void plan_discard_current_block()
{
  if (block_buffer_head != block_buffer_tail) { // Discard non-empty buffer.
 8004640:	4909      	ldr	r1, [pc, #36]	; (8004668 <plan_discard_current_block+0x28>)
 8004642:	4b0a      	ldr	r3, [pc, #40]	; (800466c <plan_discard_current_block+0x2c>)
 8004644:	780a      	ldrb	r2, [r1, #0]
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	4293      	cmp	r3, r2
 800464a:	d00c      	beq.n	8004666 <plan_discard_current_block+0x26>
  block_index++;
 800464c:	1c53      	adds	r3, r2, #1
 800464e:	b2db      	uxtb	r3, r3
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 8004650:	2b24      	cmp	r3, #36	; 0x24
 8004652:	bf08      	it	eq
 8004654:	2300      	moveq	r3, #0
{
 8004656:	b410      	push	{r4}
    uint8_t block_index = plan_next_block_index( block_buffer_tail );
    // Push block_buffer_planned pointer, if encountered.
    if (block_buffer_tail == block_buffer_planned) { block_buffer_planned = block_index; }
 8004658:	4805      	ldr	r0, [pc, #20]	; (8004670 <plan_discard_current_block+0x30>)
    block_buffer_tail = block_index;
 800465a:	700b      	strb	r3, [r1, #0]
    if (block_buffer_tail == block_buffer_planned) { block_buffer_planned = block_index; }
 800465c:	7804      	ldrb	r4, [r0, #0]
 800465e:	4294      	cmp	r4, r2
 8004660:	bf08      	it	eq
 8004662:	7003      	strbeq	r3, [r0, #0]
  }
}
 8004664:	bc10      	pop	{r4}
 8004666:	4770      	bx	lr
 8004668:	200009f6 	.word	0x200009f6
 800466c:	200009f4 	.word	0x200009f4
 8004670:	200009f5 	.word	0x200009f5

08004674 <plan_get_system_motion_block>:


// Returns address of planner buffer block used by system motions. Called by segment generator.
plan_block_t *plan_get_system_motion_block()
{
  return(&block_buffer[block_buffer_head]);
 8004674:	4b03      	ldr	r3, [pc, #12]	; (8004684 <plan_get_system_motion_block+0x10>)
 8004676:	4804      	ldr	r0, [pc, #16]	; (8004688 <plan_get_system_motion_block+0x14>)
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
}
 800467e:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 8004682:	4770      	bx	lr
 8004684:	200009f4 	.word	0x200009f4
 8004688:	20000214 	.word	0x20000214

0800468c <plan_get_current_block>:


// Returns address of first planner block, if available. Called by various main program functions.
plan_block_t *plan_get_current_block()
{
  if (block_buffer_head == block_buffer_tail) { return(NULL); } // Buffer empty
 800468c:	4b06      	ldr	r3, [pc, #24]	; (80046a8 <plan_get_current_block+0x1c>)
 800468e:	4a07      	ldr	r2, [pc, #28]	; (80046ac <plan_get_current_block+0x20>)
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	7812      	ldrb	r2, [r2, #0]
 8004694:	429a      	cmp	r2, r3
  return(&block_buffer[block_buffer_tail]);
 8004696:	bf1d      	ittte	ne
 8004698:	4805      	ldrne	r0, [pc, #20]	; (80046b0 <plan_get_current_block+0x24>)
 800469a:	ebc3 03c3 	rsbne	r3, r3, r3, lsl #3
 800469e:	eb00 00c3 	addne.w	r0, r0, r3, lsl #3
  if (block_buffer_head == block_buffer_tail) { return(NULL); } // Buffer empty
 80046a2:	2000      	moveq	r0, #0
}
 80046a4:	4770      	bx	lr
 80046a6:	bf00      	nop
 80046a8:	200009f6 	.word	0x200009f6
 80046ac:	200009f4 	.word	0x200009f4
 80046b0:	20000214 	.word	0x20000214

080046b4 <plan_get_exec_block_exit_speed_sqr>:


float plan_get_exec_block_exit_speed_sqr()
{
  uint8_t block_index = plan_next_block_index(block_buffer_tail);
 80046b4:	4b09      	ldr	r3, [pc, #36]	; (80046dc <plan_get_exec_block_exit_speed_sqr+0x28>)
  if (block_index == block_buffer_head) { return( 0.0 ); }
 80046b6:	4a0a      	ldr	r2, [pc, #40]	; (80046e0 <plan_get_exec_block_exit_speed_sqr+0x2c>)
  block_index++;
 80046b8:	781b      	ldrb	r3, [r3, #0]
  if (block_index == block_buffer_head) { return( 0.0 ); }
 80046ba:	7812      	ldrb	r2, [r2, #0]
  block_index++;
 80046bc:	3301      	adds	r3, #1
 80046be:	b2db      	uxtb	r3, r3
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 80046c0:	2b24      	cmp	r3, #36	; 0x24
 80046c2:	bf08      	it	eq
 80046c4:	2300      	moveq	r3, #0
  if (block_index == block_buffer_head) { return( 0.0 ); }
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d006      	beq.n	80046d8 <plan_get_exec_block_exit_speed_sqr+0x24>
  return( block_buffer[block_index].entry_speed_sqr );
 80046ca:	4a06      	ldr	r2, [pc, #24]	; (80046e4 <plan_get_exec_block_exit_speed_sqr+0x30>)
 80046cc:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80046d0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80046d4:	6998      	ldr	r0, [r3, #24]
 80046d6:	4770      	bx	lr
  if (block_index == block_buffer_head) { return( 0.0 ); }
 80046d8:	2000      	movs	r0, #0
}
 80046da:	4770      	bx	lr
 80046dc:	200009f6 	.word	0x200009f6
 80046e0:	200009f4 	.word	0x200009f4
 80046e4:	20000214 	.word	0x20000214

080046e8 <plan_check_full_buffer>:


// Returns the availability status of the block ring buffer. True, if full.
uint8_t plan_check_full_buffer()
{
  if (block_buffer_tail == next_buffer_head) { return(true); }
 80046e8:	4a04      	ldr	r2, [pc, #16]	; (80046fc <plan_check_full_buffer+0x14>)
 80046ea:	4b05      	ldr	r3, [pc, #20]	; (8004700 <plan_check_full_buffer+0x18>)
 80046ec:	7810      	ldrb	r0, [r2, #0]
 80046ee:	781b      	ldrb	r3, [r3, #0]
  return(false);
}
 80046f0:	1ac0      	subs	r0, r0, r3
 80046f2:	fab0 f080 	clz	r0, r0
 80046f6:	0940      	lsrs	r0, r0, #5
 80046f8:	4770      	bx	lr
 80046fa:	bf00      	nop
 80046fc:	200009f6 	.word	0x200009f6
 8004700:	200009f7 	.word	0x200009f7

08004704 <plan_compute_profile_nominal_speed>:


// Computes and returns block nominal speed based on running condition and override values.
// NOTE: All system motion commands, such as homing/parking, are not subject to overrides.
float plan_compute_profile_nominal_speed(plan_block_t *block)
{
 8004704:	b538      	push	{r3, r4, r5, lr}
  float nominal_speed = block->programmed_rate;
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01f*sys.r_override); }
 8004706:	7d83      	ldrb	r3, [r0, #22]
  float nominal_speed = block->programmed_rate;
 8004708:	6b05      	ldr	r5, [r0, #48]	; 0x30
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01f*sys.r_override); }
 800470a:	07da      	lsls	r2, r3, #31
 800470c:	d514      	bpl.n	8004738 <plan_compute_profile_nominal_speed+0x34>
 800470e:	4b16      	ldr	r3, [pc, #88]	; (8004768 <plan_compute_profile_nominal_speed+0x64>)
 8004710:	7a58      	ldrb	r0, [r3, #9]
 8004712:	f7fc fa79 	bl	8000c08 <__aeabi_i2f>
 8004716:	4915      	ldr	r1, [pc, #84]	; (800476c <plan_compute_profile_nominal_speed+0x68>)
 8004718:	f7fc faca 	bl	8000cb0 <__aeabi_fmul>
 800471c:	4629      	mov	r1, r5
 800471e:	f7fc fac7 	bl	8000cb0 <__aeabi_fmul>
 8004722:	4604      	mov	r4, r0
 8004724:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8004728:	4620      	mov	r0, r4
 800472a:	f7fc fc73 	bl	8001014 <__aeabi_fcmpge>
 800472e:	b908      	cbnz	r0, 8004734 <plan_compute_profile_nominal_speed+0x30>
 8004730:	f04f 547e 	mov.w	r4, #1065353216	; 0x3f800000
    if (!(block->condition & PL_COND_FLAG_NO_FEED_OVERRIDE)) { nominal_speed *= (0.01f*sys.f_override); }
    if (nominal_speed > block->rapid_rate) { nominal_speed = block->rapid_rate; }
  }
  if (nominal_speed > MINIMUM_FEED_RATE) { return(nominal_speed); }
  return(MINIMUM_FEED_RATE);
}
 8004734:	4620      	mov	r0, r4
 8004736:	bd38      	pop	{r3, r4, r5, pc}
    if (!(block->condition & PL_COND_FLAG_NO_FEED_OVERRIDE)) { nominal_speed *= (0.01f*sys.f_override); }
 8004738:	075b      	lsls	r3, r3, #29
 800473a:	4604      	mov	r4, r0
 800473c:	d40b      	bmi.n	8004756 <plan_compute_profile_nominal_speed+0x52>
 800473e:	4b0a      	ldr	r3, [pc, #40]	; (8004768 <plan_compute_profile_nominal_speed+0x64>)
 8004740:	7a18      	ldrb	r0, [r3, #8]
 8004742:	f7fc fa61 	bl	8000c08 <__aeabi_i2f>
 8004746:	4909      	ldr	r1, [pc, #36]	; (800476c <plan_compute_profile_nominal_speed+0x68>)
 8004748:	f7fc fab2 	bl	8000cb0 <__aeabi_fmul>
 800474c:	4601      	mov	r1, r0
 800474e:	4628      	mov	r0, r5
 8004750:	f7fc faae 	bl	8000cb0 <__aeabi_fmul>
 8004754:	4605      	mov	r5, r0
 8004756:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 8004758:	4629      	mov	r1, r5
 800475a:	4620      	mov	r0, r4
 800475c:	f7fc fc50 	bl	8001000 <__aeabi_fcmple>
 8004760:	2800      	cmp	r0, #0
 8004762:	d1df      	bne.n	8004724 <plan_compute_profile_nominal_speed+0x20>
 8004764:	462c      	mov	r4, r5
 8004766:	e7dd      	b.n	8004724 <plan_compute_profile_nominal_speed+0x20>
 8004768:	200010c8 	.word	0x200010c8
 800476c:	3c23d70a 	.word	0x3c23d70a

08004770 <plan_update_velocity_profile_parameters>:
}


// Re-calculates buffered motions profile parameters upon a motion-based override change.
void plan_update_velocity_profile_parameters()
{
 8004770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (!(block->condition & PL_COND_FLAG_NO_FEED_OVERRIDE)) { nominal_speed *= (0.01f*sys.f_override); }
 8004774:	4d35      	ldr	r5, [pc, #212]	; (800484c <plan_update_velocity_profile_parameters+0xdc>)
  uint8_t block_index = block_buffer_tail;
 8004776:	4a36      	ldr	r2, [pc, #216]	; (8004850 <plan_update_velocity_profile_parameters+0xe0>)
 8004778:	4b36      	ldr	r3, [pc, #216]	; (8004854 <plan_update_velocity_profile_parameters+0xe4>)
{
 800477a:	b083      	sub	sp, #12
    if (!(block->condition & PL_COND_FLAG_NO_FEED_OVERRIDE)) { nominal_speed *= (0.01f*sys.f_override); }
 800477c:	7a28      	ldrb	r0, [r5, #8]
  uint8_t block_index = block_buffer_tail;
 800477e:	7814      	ldrb	r4, [r2, #0]
 8004780:	f893 b000 	ldrb.w	fp, [r3]
    if (!(block->condition & PL_COND_FLAG_NO_FEED_OVERRIDE)) { nominal_speed *= (0.01f*sys.f_override); }
 8004784:	f7fc fa40 	bl	8000c08 <__aeabi_i2f>
 8004788:	4933      	ldr	r1, [pc, #204]	; (8004858 <plan_update_velocity_profile_parameters+0xe8>)
 800478a:	f7fc fa91 	bl	8000cb0 <__aeabi_fmul>
 800478e:	9001      	str	r0, [sp, #4]
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01f*sys.r_override); }
 8004790:	7a68      	ldrb	r0, [r5, #9]
 8004792:	f7fc fa39 	bl	8000c08 <__aeabi_i2f>
 8004796:	4930      	ldr	r1, [pc, #192]	; (8004858 <plan_update_velocity_profile_parameters+0xe8>)
 8004798:	f7fc fa8a 	bl	8000cb0 <__aeabi_fmul>
  plan_block_t *block;
  float nominal_speed;
  float prev_nominal_speed = SOME_LARGE_VALUE; // Set high for first block nominal speed calculation.
 800479c:	4f2f      	ldr	r7, [pc, #188]	; (800485c <plan_update_velocity_profile_parameters+0xec>)
 800479e:	9000      	str	r0, [sp, #0]
  while (block_index != block_buffer_head) {
    block = &block_buffer[block_index];
 80047a0:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 8004864 <plan_update_velocity_profile_parameters+0xf4>
 80047a4:	f04f 597e 	mov.w	r9, #1065353216	; 0x3f800000
  while (block_index != block_buffer_head) {
 80047a8:	e023      	b.n	80047f2 <plan_update_velocity_profile_parameters+0x82>
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01f*sys.r_override); }
 80047aa:	4641      	mov	r1, r8
 80047ac:	9800      	ldr	r0, [sp, #0]
 80047ae:	f7fc fa7f 	bl	8000cb0 <__aeabi_fmul>
 80047b2:	4605      	mov	r5, r0
 80047b4:	4649      	mov	r1, r9
 80047b6:	4628      	mov	r0, r5
 80047b8:	f7fc fc2c 	bl	8001014 <__aeabi_fcmpge>
 80047bc:	b900      	cbnz	r0, 80047c0 <plan_update_velocity_profile_parameters+0x50>
 80047be:	464d      	mov	r5, r9
  if (nominal_speed > prev_nominal_speed) { block->max_entry_speed_sqr = prev_nominal_speed*prev_nominal_speed; }
 80047c0:	4629      	mov	r1, r5
 80047c2:	4638      	mov	r0, r7
 80047c4:	f8d6 8028 	ldr.w	r8, [r6, #40]	; 0x28
 80047c8:	f7fc fc10 	bl	8000fec <__aeabi_fcmplt>
 80047cc:	2800      	cmp	r0, #0
 80047ce:	d031      	beq.n	8004834 <plan_update_velocity_profile_parameters+0xc4>
 80047d0:	4639      	mov	r1, r7
 80047d2:	4638      	mov	r0, r7
 80047d4:	f7fc fa6c 	bl	8000cb0 <__aeabi_fmul>
 80047d8:	4607      	mov	r7, r0
  if (block->max_entry_speed_sqr > block->max_junction_speed_sqr) { block->max_entry_speed_sqr = block->max_junction_speed_sqr; }
 80047da:	4641      	mov	r1, r8
 80047dc:	4638      	mov	r0, r7
 80047de:	f7fc fc23 	bl	8001028 <__aeabi_fcmpgt>
 80047e2:	bb20      	cbnz	r0, 800482e <plan_update_velocity_profile_parameters+0xbe>
 80047e4:	61f7      	str	r7, [r6, #28]
  block_index++;
 80047e6:	3401      	adds	r4, #1
 80047e8:	b2e4      	uxtb	r4, r4
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 80047ea:	2c24      	cmp	r4, #36	; 0x24
 80047ec:	bf08      	it	eq
 80047ee:	2400      	moveq	r4, #0
 80047f0:	462f      	mov	r7, r5
  while (block_index != block_buffer_head) {
 80047f2:	455c      	cmp	r4, fp
 80047f4:	d024      	beq.n	8004840 <plan_update_velocity_profile_parameters+0xd0>
    block = &block_buffer[block_index];
 80047f6:	00e5      	lsls	r5, r4, #3
 80047f8:	1b2e      	subs	r6, r5, r4
 80047fa:	eb0a 06c6 	add.w	r6, sl, r6, lsl #3
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01f*sys.r_override); }
 80047fe:	7db3      	ldrb	r3, [r6, #22]
  float nominal_speed = block->programmed_rate;
 8004800:	f8d6 8030 	ldr.w	r8, [r6, #48]	; 0x30
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01f*sys.r_override); }
 8004804:	07da      	lsls	r2, r3, #31
 8004806:	d4d0      	bmi.n	80047aa <plan_update_velocity_profile_parameters+0x3a>
    if (!(block->condition & PL_COND_FLAG_NO_FEED_OVERRIDE)) { nominal_speed *= (0.01f*sys.f_override); }
 8004808:	075b      	lsls	r3, r3, #29
 800480a:	d404      	bmi.n	8004816 <plan_update_velocity_profile_parameters+0xa6>
 800480c:	4640      	mov	r0, r8
 800480e:	9901      	ldr	r1, [sp, #4]
 8004810:	f7fc fa4e 	bl	8000cb0 <__aeabi_fmul>
 8004814:	4680      	mov	r8, r0
    if (nominal_speed > block->rapid_rate) { nominal_speed = block->rapid_rate; }
 8004816:	1b2d      	subs	r5, r5, r4
 8004818:	eb0a 05c5 	add.w	r5, sl, r5, lsl #3
 800481c:	6aed      	ldr	r5, [r5, #44]	; 0x2c
 800481e:	4641      	mov	r1, r8
 8004820:	4628      	mov	r0, r5
 8004822:	f7fc fbed 	bl	8001000 <__aeabi_fcmple>
 8004826:	2800      	cmp	r0, #0
 8004828:	d1c4      	bne.n	80047b4 <plan_update_velocity_profile_parameters+0x44>
 800482a:	4645      	mov	r5, r8
 800482c:	e7c2      	b.n	80047b4 <plan_update_velocity_profile_parameters+0x44>
  if (block->max_entry_speed_sqr > block->max_junction_speed_sqr) { block->max_entry_speed_sqr = block->max_junction_speed_sqr; }
 800482e:	f8c6 801c 	str.w	r8, [r6, #28]
 8004832:	e7d8      	b.n	80047e6 <plan_update_velocity_profile_parameters+0x76>
  else { block->max_entry_speed_sqr = nominal_speed*nominal_speed; }
 8004834:	4629      	mov	r1, r5
 8004836:	4628      	mov	r0, r5
 8004838:	f7fc fa3a 	bl	8000cb0 <__aeabi_fmul>
 800483c:	4607      	mov	r7, r0
 800483e:	e7cc      	b.n	80047da <plan_update_velocity_profile_parameters+0x6a>
    nominal_speed = plan_compute_profile_nominal_speed(block);
    plan_compute_profile_parameters(block, nominal_speed, prev_nominal_speed);
    prev_nominal_speed = nominal_speed;
    block_index = plan_next_block_index(block_index);
  }
  pl.previous_nominal_speed = prev_nominal_speed; // Update prev nominal speed for next incoming block.
 8004840:	4b07      	ldr	r3, [pc, #28]	; (8004860 <plan_update_velocity_profile_parameters+0xf0>)
 8004842:	621f      	str	r7, [r3, #32]
}
 8004844:	b003      	add	sp, #12
 8004846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800484a:	bf00      	nop
 800484c:	200010c8 	.word	0x200010c8
 8004850:	200009f6 	.word	0x200009f6
 8004854:	200009f4 	.word	0x200009f4
 8004858:	3c23d70a 	.word	0x3c23d70a
 800485c:	7f7fffff 	.word	0x7f7fffff
 8004860:	200009f8 	.word	0x200009f8
 8004864:	20000214 	.word	0x20000214

08004868 <plan_buffer_line>:
   The system motion condition tells the planner to plan a motion in the always unused block buffer
   head. It avoids changing the planner state and preserves the buffer to ensure subsequent gcode
   motions are still planned correctly, while the stepper module only points to the block buffer head
   to execute the special system motion. */
uint8_t plan_buffer_line(float *target, plan_line_data_t *pl_data)
{
 8004868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800486c:	468b      	mov	fp, r1
 800486e:	4682      	mov	sl, r0
  // Prepare and initialize new block. Copy relevant pl_data for block execution.
  plan_block_t *block = &block_buffer[block_buffer_head];
 8004870:	4b66      	ldr	r3, [pc, #408]	; (8004a0c <plan_buffer_line+0x1a4>)
 8004872:	4d67      	ldr	r5, [pc, #412]	; (8004a10 <plan_buffer_line+0x1a8>)
 8004874:	781e      	ldrb	r6, [r3, #0]
{
 8004876:	b093      	sub	sp, #76	; 0x4c
  plan_block_t *block = &block_buffer[block_buffer_head];
 8004878:	00f7      	lsls	r7, r6, #3
 800487a:	eba7 0806 	sub.w	r8, r7, r6
 800487e:	eb05 08c8 	add.w	r8, r5, r8, lsl #3
  memset(block,0,sizeof(plan_block_t)); // Zero all block values.
 8004882:	2238      	movs	r2, #56	; 0x38
 8004884:	2100      	movs	r1, #0
 8004886:	4640      	mov	r0, r8
 8004888:	f006 fde5 	bl	800b456 <memset>
  block->condition = pl_data->condition;
 800488c:	f89b 3008 	ldrb.w	r3, [fp, #8]
  #ifdef VARIABLE_SPINDLE
    block->spindle_speed = pl_data->spindle_speed;
 8004890:	f8db 2004 	ldr.w	r2, [fp, #4]
  int32_t target_steps[N_AXIS], position_steps[N_AXIS];
  float unit_vec[N_AXIS], delta_mm;
  uint8_t idx;

  // Copy position data based on type of motion being planned.
  if (block->condition & PL_COND_FLAG_SYSTEM_MOTION) {
 8004894:	0798      	lsls	r0, r3, #30
  block->condition = pl_data->condition;
 8004896:	f888 3016 	strb.w	r3, [r8, #22]
        delta_mm = (target_steps[X_AXIS]-position_steps[X_AXIS] - target_steps[Y_AXIS]+position_steps[Y_AXIS])/settings.steps_per_mm[idx];
      } else {
        delta_mm = (target_steps[idx] - position_steps[idx])/settings.steps_per_mm[idx];
      }
    #else
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 800489a:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8004a1c <plan_buffer_line+0x1b4>
    memcpy(position_steps, sys_position, sizeof(sys_position));
 800489e:	bf4c      	ite	mi
 80048a0:	4b5c      	ldrmi	r3, [pc, #368]	; (8004a14 <plan_buffer_line+0x1ac>)
  else { memcpy(position_steps, pl.position, sizeof(pl.position)); }
 80048a2:	4b5d      	ldrpl	r3, [pc, #372]	; (8004a18 <plan_buffer_line+0x1b0>)
    block->spindle_speed = pl_data->spindle_speed;
 80048a4:	f8c8 2034 	str.w	r2, [r8, #52]	; 0x34
  else { memcpy(position_steps, pl.position, sizeof(pl.position)); }
 80048a8:	ac06      	add	r4, sp, #24
 80048aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80048ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 80048b0:	f8d9 2000 	ldr.w	r2, [r9]
 80048b4:	f8da 1000 	ldr.w	r1, [sl]
 80048b8:	4610      	mov	r0, r2
 80048ba:	9201      	str	r2, [sp, #4]
 80048bc:	f7fc f9f8 	bl	8000cb0 <__aeabi_fmul>
 80048c0:	f006 fec6 	bl	800b650 <lroundf>
 80048c4:	4686      	mov	lr, r0
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 80048c6:	1bb9      	subs	r1, r7, r6
 80048c8:	9806      	ldr	r0, [sp, #24]
 80048ca:	00c9      	lsls	r1, r1, #3
 80048cc:	186b      	adds	r3, r5, r1
 80048ce:	ebae 0000 	sub.w	r0, lr, r0
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 80048d2:	691a      	ldr	r2, [r3, #16]
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 80048d4:	ea80 74e0 	eor.w	r4, r0, r0, asr #31
 80048d8:	eba4 74e0 	sub.w	r4, r4, r0, asr #31
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 80048dc:	4294      	cmp	r4, r2
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 80048de:	506c      	str	r4, [r5, r1]
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 80048e0:	bf38      	it	cc
 80048e2:	4614      	movcc	r4, r2
 80048e4:	611c      	str	r4, [r3, #16]
 80048e6:	9300      	str	r3, [sp, #0]
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 80048e8:	f8cd e008 	str.w	lr, [sp, #8]
      delta_mm = (target_steps[idx] - position_steps[idx])/settings.steps_per_mm[idx];
 80048ec:	f7fc f98c 	bl	8000c08 <__aeabi_i2f>
 80048f0:	9a01      	ldr	r2, [sp, #4]
 80048f2:	4611      	mov	r1, r2
 80048f4:	f7fc fa90 	bl	8000e18 <__aeabi_fdiv>
	  #endif
    unit_vec[idx] = delta_mm; // Store unit vector numerator

    // Set direction bits. Bit enabled always means direction is negative.
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 80048f8:	2100      	movs	r1, #0
    unit_vec[idx] = delta_mm; // Store unit vector numerator
 80048fa:	900a      	str	r0, [sp, #40]	; 0x28
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 80048fc:	f7fc fb76 	bl	8000fec <__aeabi_fcmplt>
 8004900:	9b00      	ldr	r3, [sp, #0]
 8004902:	2800      	cmp	r0, #0
 8004904:	f040 8173 	bne.w	8004bee <plan_buffer_line+0x386>
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 8004908:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800490c:	f8da 1004 	ldr.w	r1, [sl, #4]
 8004910:	4610      	mov	r0, r2
 8004912:	9201      	str	r2, [sp, #4]
 8004914:	f7fc f9cc 	bl	8000cb0 <__aeabi_fmul>
 8004918:	f006 fe9a 	bl	800b650 <lroundf>
 800491c:	4601      	mov	r1, r0
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 800491e:	9807      	ldr	r0, [sp, #28]
 8004920:	1bbb      	subs	r3, r7, r6
 8004922:	1a08      	subs	r0, r1, r0
 8004924:	ea80 7ee0 	eor.w	lr, r0, r0, asr #31
 8004928:	ebae 7ee0 	sub.w	lr, lr, r0, asr #31
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 800492c:	4574      	cmp	r4, lr
 800492e:	bf38      	it	cc
 8004930:	4674      	movcc	r4, lr
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 8004932:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8004936:	f8c3 e004 	str.w	lr, [r3, #4]
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 800493a:	611c      	str	r4, [r3, #16]
 800493c:	9300      	str	r3, [sp, #0]
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 800493e:	9103      	str	r1, [sp, #12]
      delta_mm = (target_steps[idx] - position_steps[idx])/settings.steps_per_mm[idx];
 8004940:	f7fc f962 	bl	8000c08 <__aeabi_i2f>
 8004944:	9a01      	ldr	r2, [sp, #4]
 8004946:	4611      	mov	r1, r2
 8004948:	f7fc fa66 	bl	8000e18 <__aeabi_fdiv>
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 800494c:	2100      	movs	r1, #0
    unit_vec[idx] = delta_mm; // Store unit vector numerator
 800494e:	900b      	str	r0, [sp, #44]	; 0x2c
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 8004950:	f7fc fb4c 	bl	8000fec <__aeabi_fcmplt>
 8004954:	9b00      	ldr	r3, [sp, #0]
 8004956:	2800      	cmp	r0, #0
 8004958:	f040 8155 	bne.w	8004c06 <plan_buffer_line+0x39e>
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 800495c:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8004960:	f8da 1008 	ldr.w	r1, [sl, #8]
 8004964:	4610      	mov	r0, r2
 8004966:	9201      	str	r2, [sp, #4]
 8004968:	f7fc f9a2 	bl	8000cb0 <__aeabi_fmul>
 800496c:	f006 fe70 	bl	800b650 <lroundf>
 8004970:	4601      	mov	r1, r0
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 8004972:	9808      	ldr	r0, [sp, #32]
 8004974:	1bbb      	subs	r3, r7, r6
 8004976:	1a08      	subs	r0, r1, r0
 8004978:	ea80 7ee0 	eor.w	lr, r0, r0, asr #31
 800497c:	ebae 7ee0 	sub.w	lr, lr, r0, asr #31
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 8004980:	4574      	cmp	r4, lr
 8004982:	bf38      	it	cc
 8004984:	4674      	movcc	r4, lr
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 8004986:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800498a:	f8c3 e008 	str.w	lr, [r3, #8]
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 800498e:	611c      	str	r4, [r3, #16]
 8004990:	9300      	str	r3, [sp, #0]
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 8004992:	9104      	str	r1, [sp, #16]
      delta_mm = (target_steps[idx] - position_steps[idx])/settings.steps_per_mm[idx];
 8004994:	f7fc f938 	bl	8000c08 <__aeabi_i2f>
 8004998:	9a01      	ldr	r2, [sp, #4]
 800499a:	4611      	mov	r1, r2
 800499c:	f7fc fa3c 	bl	8000e18 <__aeabi_fdiv>
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 80049a0:	2100      	movs	r1, #0
    unit_vec[idx] = delta_mm; // Store unit vector numerator
 80049a2:	900c      	str	r0, [sp, #48]	; 0x30
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 80049a4:	f7fc fb22 	bl	8000fec <__aeabi_fcmplt>
 80049a8:	9b00      	ldr	r3, [sp, #0]
 80049aa:	2800      	cmp	r0, #0
 80049ac:	f040 8125 	bne.w	8004bfa <plan_buffer_line+0x392>
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 80049b0:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80049b4:	f8da 100c 	ldr.w	r1, [sl, #12]
 80049b8:	4618      	mov	r0, r3
 80049ba:	9300      	str	r3, [sp, #0]
 80049bc:	f7fc f978 	bl	8000cb0 <__aeabi_fmul>
 80049c0:	f006 fe46 	bl	800b650 <lroundf>
 80049c4:	4602      	mov	r2, r0
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 80049c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80049c8:	eba7 0a06 	sub.w	sl, r7, r6
 80049cc:	1a10      	subs	r0, r2, r0
 80049ce:	ea80 71e0 	eor.w	r1, r0, r0, asr #31
 80049d2:	eba1 71e0 	sub.w	r1, r1, r0, asr #31
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 80049d6:	428c      	cmp	r4, r1
 80049d8:	bf38      	it	cc
 80049da:	460c      	movcc	r4, r1
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 80049dc:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 80049e0:	f8ca 100c 	str.w	r1, [sl, #12]
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 80049e4:	f8ca 4010 	str.w	r4, [sl, #16]
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 80049e8:	9205      	str	r2, [sp, #20]
      delta_mm = (target_steps[idx] - position_steps[idx])/settings.steps_per_mm[idx];
 80049ea:	f7fc f90d 	bl	8000c08 <__aeabi_i2f>
 80049ee:	9b00      	ldr	r3, [sp, #0]
 80049f0:	4619      	mov	r1, r3
 80049f2:	f7fc fa11 	bl	8000e18 <__aeabi_fdiv>
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 80049f6:	2100      	movs	r1, #0
    unit_vec[idx] = delta_mm; // Store unit vector numerator
 80049f8:	900d      	str	r0, [sp, #52]	; 0x34
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 80049fa:	f7fc faf7 	bl	8000fec <__aeabi_fcmplt>
 80049fe:	b978      	cbnz	r0, 8004a20 <plan_buffer_line+0x1b8>
  }

  // Bail if this is a zero-length block. Highly unlikely to occur.
  if (block->step_event_count == 0) { return(PLAN_EMPTY_BLOCK); }
 8004a00:	b9bc      	cbnz	r4, 8004a32 <plan_buffer_line+0x1ca>
 8004a02:	4620      	mov	r0, r4

    // Finish up by recalculating the plan with the new block.
    planner_recalculate();
  }
  return(PLAN_OK);
}
 8004a04:	b013      	add	sp, #76	; 0x4c
 8004a06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a0a:	bf00      	nop
 8004a0c:	200009f4 	.word	0x200009f4
 8004a10:	20000214 	.word	0x20000214
 8004a14:	200010f0 	.word	0x200010f0
 8004a18:	200009f8 	.word	0x200009f8
 8004a1c:	20001404 	.word	0x20001404
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 8004a20:	4a99      	ldr	r2, [pc, #612]	; (8004c88 <plan_buffer_line+0x420>)
 8004a22:	f8ba 3014 	ldrh.w	r3, [sl, #20]
 8004a26:	88d2      	ldrh	r2, [r2, #6]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	f8aa 3014 	strh.w	r3, [sl, #20]
  if (block->step_event_count == 0) { return(PLAN_EMPTY_BLOCK); }
 8004a2e:	2c00      	cmp	r4, #0
 8004a30:	d0e7      	beq.n	8004a02 <plan_buffer_line+0x19a>
  block->millimeters = convert_delta_vector_to_unit_vector(unit_vec);
 8004a32:	ac0a      	add	r4, sp, #40	; 0x28
 8004a34:	4620      	mov	r0, r4
 8004a36:	f7ff fc2d 	bl	8004294 <convert_delta_vector_to_unit_vector>
 8004a3a:	eba7 0a06 	sub.w	sl, r7, r6
 8004a3e:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 8004a42:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
  block->acceleration = limit_value_by_axis_maximum(settings.acceleration, unit_vec);
 8004a46:	4621      	mov	r1, r4
 8004a48:	4890      	ldr	r0, [pc, #576]	; (8004c8c <plan_buffer_line+0x424>)
 8004a4a:	f7ff fc8b 	bl	8004364 <limit_value_by_axis_maximum>
  block->rapid_rate = limit_value_by_axis_maximum(settings.max_rate, unit_vec);
 8004a4e:	4621      	mov	r1, r4
  block->acceleration = limit_value_by_axis_maximum(settings.acceleration, unit_vec);
 8004a50:	f8ca 0020 	str.w	r0, [sl, #32]
  block->rapid_rate = limit_value_by_axis_maximum(settings.max_rate, unit_vec);
 8004a54:	488e      	ldr	r0, [pc, #568]	; (8004c90 <plan_buffer_line+0x428>)
 8004a56:	f7ff fc85 	bl	8004364 <limit_value_by_axis_maximum>
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { block->programmed_rate = block->rapid_rate; }
 8004a5a:	f89a 3016 	ldrb.w	r3, [sl, #22]
  block->rapid_rate = limit_value_by_axis_maximum(settings.max_rate, unit_vec);
 8004a5e:	f8ca 002c 	str.w	r0, [sl, #44]	; 0x2c
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { block->programmed_rate = block->rapid_rate; }
 8004a62:	07d9      	lsls	r1, r3, #31
 8004a64:	f100 80d5 	bmi.w	8004c12 <plan_buffer_line+0x3aa>
    block->programmed_rate = pl_data->feed_rate;
 8004a68:	f8db 1000 	ldr.w	r1, [fp]
    if (block->condition & PL_COND_FLAG_INVERSE_TIME) { block->programmed_rate *= block->millimeters; }
 8004a6c:	071a      	lsls	r2, r3, #28
    block->programmed_rate = pl_data->feed_rate;
 8004a6e:	f8ca 1030 	str.w	r1, [sl, #48]	; 0x30
    if (block->condition & PL_COND_FLAG_INVERSE_TIME) { block->programmed_rate *= block->millimeters; }
 8004a72:	d507      	bpl.n	8004a84 <plan_buffer_line+0x21c>
 8004a74:	f8da 0024 	ldr.w	r0, [sl, #36]	; 0x24
 8004a78:	9300      	str	r3, [sp, #0]
 8004a7a:	f7fc f919 	bl	8000cb0 <__aeabi_fmul>
 8004a7e:	9b00      	ldr	r3, [sp, #0]
 8004a80:	f8ca 0030 	str.w	r0, [sl, #48]	; 0x30
  if ((block_buffer_head == block_buffer_tail) || (block->condition & PL_COND_FLAG_SYSTEM_MOTION)) {
 8004a84:	4a83      	ldr	r2, [pc, #524]	; (8004c94 <plan_buffer_line+0x42c>)
 8004a86:	4984      	ldr	r1, [pc, #528]	; (8004c98 <plan_buffer_line+0x430>)
 8004a88:	7812      	ldrb	r2, [r2, #0]
 8004a8a:	7809      	ldrb	r1, [r1, #0]
 8004a8c:	4291      	cmp	r1, r2
 8004a8e:	f000 80c3 	beq.w	8004c18 <plan_buffer_line+0x3b0>
 8004a92:	079b      	lsls	r3, r3, #30
 8004a94:	f100 80c0 	bmi.w	8004c18 <plan_buffer_line+0x3b0>
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 8004a98:	4b80      	ldr	r3, [pc, #512]	; (8004c9c <plan_buffer_line+0x434>)
 8004a9a:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8004a9e:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8004aa2:	4650      	mov	r0, sl
 8004aa4:	4659      	mov	r1, fp
 8004aa6:	f7fc f903 	bl	8000cb0 <__aeabi_fmul>
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 8004aaa:	4659      	mov	r1, fp
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 8004aac:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 8004ab0:	4650      	mov	r0, sl
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 8004ab2:	9300      	str	r3, [sp, #0]
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 8004ab4:	f7fb fff2 	bl	8000a9c <__aeabi_fsub>
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 8004ab8:	4b78      	ldr	r3, [pc, #480]	; (8004c9c <plan_buffer_line+0x434>)
 8004aba:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8004abe:	f8d3 b014 	ldr.w	fp, [r3, #20]
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 8004ac2:	900e      	str	r0, [sp, #56]	; 0x38
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 8004ac4:	4659      	mov	r1, fp
 8004ac6:	4650      	mov	r0, sl
 8004ac8:	f7fc f8f2 	bl	8000cb0 <__aeabi_fmul>
 8004acc:	9b00      	ldr	r3, [sp, #0]
 8004ace:	4601      	mov	r1, r0
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f7fb ffe3 	bl	8000a9c <__aeabi_fsub>
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 8004ad6:	4659      	mov	r1, fp
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 8004ad8:	9001      	str	r0, [sp, #4]
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 8004ada:	4650      	mov	r0, sl
 8004adc:	f7fb ffde 	bl	8000a9c <__aeabi_fsub>
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 8004ae0:	4b6e      	ldr	r3, [pc, #440]	; (8004c9c <plan_buffer_line+0x434>)
 8004ae2:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 8004ae6:	699b      	ldr	r3, [r3, #24]
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 8004ae8:	900f      	str	r0, [sp, #60]	; 0x3c
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 8004aea:	4619      	mov	r1, r3
 8004aec:	4658      	mov	r0, fp
 8004aee:	9300      	str	r3, [sp, #0]
 8004af0:	f7fc f8de 	bl	8000cb0 <__aeabi_fmul>
 8004af4:	9a01      	ldr	r2, [sp, #4]
 8004af6:	4601      	mov	r1, r0
 8004af8:	4610      	mov	r0, r2
 8004afa:	f7fb ffcf 	bl	8000a9c <__aeabi_fsub>
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 8004afe:	9b00      	ldr	r3, [sp, #0]
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 8004b00:	4682      	mov	sl, r0
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 8004b02:	4619      	mov	r1, r3
 8004b04:	4658      	mov	r0, fp
 8004b06:	f7fb ffc9 	bl	8000a9c <__aeabi_fsub>
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 8004b0a:	4b64      	ldr	r3, [pc, #400]	; (8004c9c <plan_buffer_line+0x434>)
 8004b0c:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8004b10:	69db      	ldr	r3, [r3, #28]
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 8004b12:	9010      	str	r0, [sp, #64]	; 0x40
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 8004b14:	4659      	mov	r1, fp
 8004b16:	4618      	mov	r0, r3
 8004b18:	9300      	str	r3, [sp, #0]
 8004b1a:	f7fc f8c9 	bl	8000cb0 <__aeabi_fmul>
 8004b1e:	4601      	mov	r1, r0
 8004b20:	4650      	mov	r0, sl
 8004b22:	f7fb ffbb 	bl	8000a9c <__aeabi_fsub>
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 8004b26:	9b00      	ldr	r3, [sp, #0]
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 8004b28:	4682      	mov	sl, r0
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 8004b2a:	4619      	mov	r1, r3
 8004b2c:	4658      	mov	r0, fp
 8004b2e:	f7fb ffb5 	bl	8000a9c <__aeabi_fsub>
    if (junction_cos_theta > 0.999999f) {
 8004b32:	495b      	ldr	r1, [pc, #364]	; (8004ca0 <plan_buffer_line+0x438>)
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 8004b34:	9011      	str	r0, [sp, #68]	; 0x44
    if (junction_cos_theta > 0.999999f) {
 8004b36:	4650      	mov	r0, sl
 8004b38:	f7fc fa76 	bl	8001028 <__aeabi_fcmpgt>
 8004b3c:	2800      	cmp	r0, #0
 8004b3e:	f000 8098 	beq.w	8004c72 <plan_buffer_line+0x40a>
      block->max_junction_speed_sqr = MINIMUM_JUNCTION_SPEED*MINIMUM_JUNCTION_SPEED;
 8004b42:	2200      	movs	r2, #0
 8004b44:	1bbb      	subs	r3, r7, r6
 8004b46:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8004b4a:	629a      	str	r2, [r3, #40]	; 0x28
  if (!(block->condition & PL_COND_FLAG_SYSTEM_MOTION)) {
 8004b4c:	1bbb      	subs	r3, r7, r6
 8004b4e:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8004b52:	7d9a      	ldrb	r2, [r3, #22]
 8004b54:	0790      	lsls	r0, r2, #30
 8004b56:	d466      	bmi.n	8004c26 <plan_buffer_line+0x3be>
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01f*sys.r_override); }
 8004b58:	07d1      	lsls	r1, r2, #31
  float nominal_speed = block->programmed_rate;
 8004b5a:	f8d3 9030 	ldr.w	r9, [r3, #48]	; 0x30
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01f*sys.r_override); }
 8004b5e:	d566      	bpl.n	8004c2e <plan_buffer_line+0x3c6>
 8004b60:	4b50      	ldr	r3, [pc, #320]	; (8004ca4 <plan_buffer_line+0x43c>)
 8004b62:	7a58      	ldrb	r0, [r3, #9]
 8004b64:	f7fc f850 	bl	8000c08 <__aeabi_i2f>
 8004b68:	4649      	mov	r1, r9
 8004b6a:	f7fc f8a1 	bl	8000cb0 <__aeabi_fmul>
 8004b6e:	494e      	ldr	r1, [pc, #312]	; (8004ca8 <plan_buffer_line+0x440>)
 8004b70:	f7fc f89e 	bl	8000cb0 <__aeabi_fmul>
 8004b74:	4605      	mov	r5, r0
 8004b76:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8004b7a:	4628      	mov	r0, r5
 8004b7c:	f7fc fa4a 	bl	8001014 <__aeabi_fcmpge>
 8004b80:	b908      	cbnz	r0, 8004b86 <plan_buffer_line+0x31e>
 8004b82:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
    plan_compute_profile_parameters(block, nominal_speed, pl.previous_nominal_speed);
 8004b86:	4e45      	ldr	r6, [pc, #276]	; (8004c9c <plan_buffer_line+0x434>)
  if (nominal_speed > prev_nominal_speed) { block->max_entry_speed_sqr = prev_nominal_speed*prev_nominal_speed; }
 8004b88:	4629      	mov	r1, r5
    plan_compute_profile_parameters(block, nominal_speed, pl.previous_nominal_speed);
 8004b8a:	f8d6 9020 	ldr.w	r9, [r6, #32]
 8004b8e:	f8d8 7028 	ldr.w	r7, [r8, #40]	; 0x28
  if (nominal_speed > prev_nominal_speed) { block->max_entry_speed_sqr = prev_nominal_speed*prev_nominal_speed; }
 8004b92:	4648      	mov	r0, r9
 8004b94:	f7fc fa2a 	bl	8000fec <__aeabi_fcmplt>
 8004b98:	2800      	cmp	r0, #0
 8004b9a:	d064      	beq.n	8004c66 <plan_buffer_line+0x3fe>
 8004b9c:	4649      	mov	r1, r9
 8004b9e:	4648      	mov	r0, r9
 8004ba0:	f7fc f886 	bl	8000cb0 <__aeabi_fmul>
 8004ba4:	4681      	mov	r9, r0
  if (block->max_entry_speed_sqr > block->max_junction_speed_sqr) { block->max_entry_speed_sqr = block->max_junction_speed_sqr; }
 8004ba6:	4639      	mov	r1, r7
 8004ba8:	4648      	mov	r0, r9
 8004baa:	f7fc fa3d 	bl	8001028 <__aeabi_fcmpgt>
 8004bae:	2800      	cmp	r0, #0
 8004bb0:	d156      	bne.n	8004c60 <plan_buffer_line+0x3f8>
 8004bb2:	f8c8 901c 	str.w	r9, [r8, #28]
    block_buffer_head = next_buffer_head;
 8004bb6:	4a3d      	ldr	r2, [pc, #244]	; (8004cac <plan_buffer_line+0x444>)
    memcpy(pl.previous_unit_vec, unit_vec, sizeof(unit_vec)); // pl.previous_unit_vec[] = unit_vec[]
 8004bb8:	f8df e0fc 	ldr.w	lr, [pc, #252]	; 8004cb8 <plan_buffer_line+0x450>
    block_buffer_head = next_buffer_head;
 8004bbc:	7811      	ldrb	r1, [r2, #0]
 8004bbe:	4836      	ldr	r0, [pc, #216]	; (8004c98 <plan_buffer_line+0x430>)
  block_index++;
 8004bc0:	1c4b      	adds	r3, r1, #1
 8004bc2:	b2db      	uxtb	r3, r3
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 8004bc4:	2b24      	cmp	r3, #36	; 0x24
 8004bc6:	bf08      	it	eq
 8004bc8:	2300      	moveq	r3, #0
    memcpy(pl.position, target_steps, sizeof(target_steps)); // pl.position[] = target_steps[]
 8004bca:	af02      	add	r7, sp, #8
    pl.previous_nominal_speed = nominal_speed;
 8004bcc:	6235      	str	r5, [r6, #32]
    block_buffer_head = next_buffer_head;
 8004bce:	7001      	strb	r1, [r0, #0]
    next_buffer_head = plan_next_block_index(block_buffer_head);
 8004bd0:	7013      	strb	r3, [r2, #0]
    memcpy(pl.previous_unit_vec, unit_vec, sizeof(unit_vec)); // pl.previous_unit_vec[] = unit_vec[]
 8004bd2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004bd6:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
    memcpy(pl.position, target_steps, sizeof(target_steps)); // pl.position[] = target_steps[]
 8004bda:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8004bde:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    planner_recalculate();
 8004be2:	f7ff fc15 	bl	8004410 <planner_recalculate>
  return(PLAN_OK);
 8004be6:	2001      	movs	r0, #1
}
 8004be8:	b013      	add	sp, #76	; 0x4c
 8004bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 8004bee:	4a26      	ldr	r2, [pc, #152]	; (8004c88 <plan_buffer_line+0x420>)
 8004bf0:	8a99      	ldrh	r1, [r3, #20]
 8004bf2:	8812      	ldrh	r2, [r2, #0]
 8004bf4:	430a      	orrs	r2, r1
 8004bf6:	829a      	strh	r2, [r3, #20]
 8004bf8:	e686      	b.n	8004908 <plan_buffer_line+0xa0>
 8004bfa:	4923      	ldr	r1, [pc, #140]	; (8004c88 <plan_buffer_line+0x420>)
 8004bfc:	8a9a      	ldrh	r2, [r3, #20]
 8004bfe:	8889      	ldrh	r1, [r1, #4]
 8004c00:	430a      	orrs	r2, r1
 8004c02:	829a      	strh	r2, [r3, #20]
 8004c04:	e6d4      	b.n	80049b0 <plan_buffer_line+0x148>
 8004c06:	4a20      	ldr	r2, [pc, #128]	; (8004c88 <plan_buffer_line+0x420>)
 8004c08:	8a99      	ldrh	r1, [r3, #20]
 8004c0a:	8852      	ldrh	r2, [r2, #2]
 8004c0c:	430a      	orrs	r2, r1
 8004c0e:	829a      	strh	r2, [r3, #20]
 8004c10:	e6a4      	b.n	800495c <plan_buffer_line+0xf4>
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { block->programmed_rate = block->rapid_rate; }
 8004c12:	f8ca 0030 	str.w	r0, [sl, #48]	; 0x30
 8004c16:	e735      	b.n	8004a84 <plan_buffer_line+0x21c>
    block->entry_speed_sqr = 0.0f;
 8004c18:	2200      	movs	r2, #0
 8004c1a:	1bbb      	subs	r3, r7, r6
 8004c1c:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8004c20:	619a      	str	r2, [r3, #24]
    block->max_junction_speed_sqr = 0.0f; // Starting from rest. Enforce start from zero velocity.
 8004c22:	629a      	str	r2, [r3, #40]	; 0x28
 8004c24:	e792      	b.n	8004b4c <plan_buffer_line+0x2e4>
  return(PLAN_OK);
 8004c26:	2001      	movs	r0, #1
}
 8004c28:	b013      	add	sp, #76	; 0x4c
 8004c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (!(block->condition & PL_COND_FLAG_NO_FEED_OVERRIDE)) { nominal_speed *= (0.01f*sys.f_override); }
 8004c2e:	0753      	lsls	r3, r2, #29
 8004c30:	d40a      	bmi.n	8004c48 <plan_buffer_line+0x3e0>
 8004c32:	4b1c      	ldr	r3, [pc, #112]	; (8004ca4 <plan_buffer_line+0x43c>)
 8004c34:	7a18      	ldrb	r0, [r3, #8]
 8004c36:	f7fb ffe7 	bl	8000c08 <__aeabi_i2f>
 8004c3a:	4649      	mov	r1, r9
 8004c3c:	f7fc f838 	bl	8000cb0 <__aeabi_fmul>
 8004c40:	4919      	ldr	r1, [pc, #100]	; (8004ca8 <plan_buffer_line+0x440>)
 8004c42:	f7fc f835 	bl	8000cb0 <__aeabi_fmul>
 8004c46:	4681      	mov	r9, r0
    if (nominal_speed > block->rapid_rate) { nominal_speed = block->rapid_rate; }
 8004c48:	1bbe      	subs	r6, r7, r6
 8004c4a:	eb05 05c6 	add.w	r5, r5, r6, lsl #3
 8004c4e:	6aed      	ldr	r5, [r5, #44]	; 0x2c
 8004c50:	4649      	mov	r1, r9
 8004c52:	4628      	mov	r0, r5
 8004c54:	f7fc f9d4 	bl	8001000 <__aeabi_fcmple>
 8004c58:	2800      	cmp	r0, #0
 8004c5a:	d18c      	bne.n	8004b76 <plan_buffer_line+0x30e>
 8004c5c:	464d      	mov	r5, r9
 8004c5e:	e78a      	b.n	8004b76 <plan_buffer_line+0x30e>
  if (block->max_entry_speed_sqr > block->max_junction_speed_sqr) { block->max_entry_speed_sqr = block->max_junction_speed_sqr; }
 8004c60:	f8c8 701c 	str.w	r7, [r8, #28]
 8004c64:	e7a7      	b.n	8004bb6 <plan_buffer_line+0x34e>
  else { block->max_entry_speed_sqr = nominal_speed*nominal_speed; }
 8004c66:	4629      	mov	r1, r5
 8004c68:	4628      	mov	r0, r5
 8004c6a:	f7fc f821 	bl	8000cb0 <__aeabi_fmul>
 8004c6e:	4681      	mov	r9, r0
 8004c70:	e799      	b.n	8004ba6 <plan_buffer_line+0x33e>
      if (junction_cos_theta < -0.999999f) {
 8004c72:	490f      	ldr	r1, [pc, #60]	; (8004cb0 <plan_buffer_line+0x448>)
 8004c74:	4650      	mov	r0, sl
 8004c76:	f7fc f9b9 	bl	8000fec <__aeabi_fcmplt>
 8004c7a:	b1f8      	cbz	r0, 8004cbc <plan_buffer_line+0x454>
        block->max_junction_speed_sqr = SOME_LARGE_VALUE;
 8004c7c:	1bbb      	subs	r3, r7, r6
 8004c7e:	4a0d      	ldr	r2, [pc, #52]	; (8004cb4 <plan_buffer_line+0x44c>)
 8004c80:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8004c84:	629a      	str	r2, [r3, #40]	; 0x28
 8004c86:	e761      	b.n	8004b4c <plan_buffer_line+0x2e4>
 8004c88:	0800c868 	.word	0x0800c868
 8004c8c:	20001424 	.word	0x20001424
 8004c90:	20001414 	.word	0x20001414
 8004c94:	200009f6 	.word	0x200009f6
 8004c98:	200009f4 	.word	0x200009f4
 8004c9c:	200009f8 	.word	0x200009f8
 8004ca0:	3f7fffef 	.word	0x3f7fffef
 8004ca4:	200010c8 	.word	0x200010c8
 8004ca8:	3c23d70a 	.word	0x3c23d70a
 8004cac:	200009f7 	.word	0x200009f7
 8004cb0:	bf7fffef 	.word	0xbf7fffef
 8004cb4:	7f7fffff 	.word	0x7f7fffff
 8004cb8:	20000a08 	.word	0x20000a08
        convert_delta_vector_to_unit_vector(junction_unit_vec);
 8004cbc:	a80e      	add	r0, sp, #56	; 0x38
 8004cbe:	f7ff fae9 	bl	8004294 <convert_delta_vector_to_unit_vector>
        float junction_acceleration = limit_value_by_axis_maximum(settings.acceleration, junction_unit_vec);
 8004cc2:	a90e      	add	r1, sp, #56	; 0x38
 8004cc4:	4818      	ldr	r0, [pc, #96]	; (8004d28 <plan_buffer_line+0x4c0>)
 8004cc6:	f7ff fb4d 	bl	8004364 <limit_value_by_axis_maximum>
        float sin_theta_d2 = sqrtf(0.5f*(1.0f-junction_cos_theta)); // Trig half angle identity. Always positive.
 8004cca:	4651      	mov	r1, sl
        float junction_acceleration = limit_value_by_axis_maximum(settings.acceleration, junction_unit_vec);
 8004ccc:	9000      	str	r0, [sp, #0]
        float sin_theta_d2 = sqrtf(0.5f*(1.0f-junction_cos_theta)); // Trig half angle identity. Always positive.
 8004cce:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8004cd2:	f7fb fee3 	bl	8000a9c <__aeabi_fsub>
 8004cd6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004cda:	f7fb ffe9 	bl	8000cb0 <__aeabi_fmul>
 8004cde:	f006 fd1b 	bl	800b718 <sqrtf>
 8004ce2:	4683      	mov	fp, r0
        block->max_junction_speed_sqr = max( MINIMUM_JUNCTION_SPEED*MINIMUM_JUNCTION_SPEED,
 8004ce4:	9b00      	ldr	r3, [sp, #0]
 8004ce6:	4659      	mov	r1, fp
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f7fb ffe1 	bl	8000cb0 <__aeabi_fmul>
 8004cee:	f8d9 1048 	ldr.w	r1, [r9, #72]	; 0x48
 8004cf2:	f7fb ffdd 	bl	8000cb0 <__aeabi_fmul>
 8004cf6:	4659      	mov	r1, fp
 8004cf8:	4681      	mov	r9, r0
 8004cfa:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8004cfe:	f7fb fecd 	bl	8000a9c <__aeabi_fsub>
 8004d02:	4601      	mov	r1, r0
 8004d04:	4648      	mov	r0, r9
 8004d06:	f7fc f887 	bl	8000e18 <__aeabi_fdiv>
 8004d0a:	eba7 0a06 	sub.w	sl, r7, r6
 8004d0e:	2100      	movs	r1, #0
 8004d10:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 8004d14:	4681      	mov	r9, r0
 8004d16:	f7fc f97d 	bl	8001014 <__aeabi_fcmpge>
 8004d1a:	b908      	cbnz	r0, 8004d20 <plan_buffer_line+0x4b8>
 8004d1c:	f04f 0900 	mov.w	r9, #0
 8004d20:	f8ca 9028 	str.w	r9, [sl, #40]	; 0x28
 8004d24:	e712      	b.n	8004b4c <plan_buffer_line+0x2e4>
 8004d26:	bf00      	nop
 8004d28:	20001424 	.word	0x20001424

08004d2c <plan_sync_position>:


// Reset the planner position vectors. Called by the system abort/initialization routine.
void plan_sync_position()
{
 8004d2c:	b410      	push	{r4}
 8004d2e:	4b03      	ldr	r3, [pc, #12]	; (8004d3c <plan_sync_position+0x10>)
 8004d30:	4c03      	ldr	r4, [pc, #12]	; (8004d40 <plan_sync_position+0x14>)
 8004d32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004d34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
    #else
      pl.position[idx] = sys_position[idx];
    #endif
  }
}
 8004d38:	bc10      	pop	{r4}
 8004d3a:	4770      	bx	lr
 8004d3c:	200010f0 	.word	0x200010f0
 8004d40:	200009f8 	.word	0x200009f8

08004d44 <plan_get_block_buffer_available>:


// Returns the number of available blocks are in the planner buffer.
uint8_t plan_get_block_buffer_available()
{
  if (block_buffer_head >= block_buffer_tail) { return((BLOCK_BUFFER_SIZE-1)-(block_buffer_head-block_buffer_tail)); }
 8004d44:	4a06      	ldr	r2, [pc, #24]	; (8004d60 <plan_get_block_buffer_available+0x1c>)
 8004d46:	4b07      	ldr	r3, [pc, #28]	; (8004d64 <plan_get_block_buffer_available+0x20>)
 8004d48:	7812      	ldrb	r2, [r2, #0]
 8004d4a:	781b      	ldrb	r3, [r3, #0]
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	bf2c      	ite	cs
 8004d50:	f103 0023 	addcs.w	r0, r3, #35	; 0x23
  return((block_buffer_tail-block_buffer_head-1));
 8004d54:	f103 30ff 	addcc.w	r0, r3, #4294967295
 8004d58:	1a80      	subs	r0, r0, r2
 8004d5a:	b2c0      	uxtb	r0, r0
}
 8004d5c:	4770      	bx	lr
 8004d5e:	bf00      	nop
 8004d60:	200009f4 	.word	0x200009f4
 8004d64:	200009f6 	.word	0x200009f6

08004d68 <plan_cycle_reinitialize>:


// Re-initialize buffer plan with a partially completed block, assumed to exist at the buffer tail.
// Called after a steppers have come to a complete stop for a feed hold and the cycle is stopped.
void plan_cycle_reinitialize()
{
 8004d68:	b508      	push	{r3, lr}
  // Re-plan from a complete stop. Reset planner entry speeds and buffer planned pointer.
  st_update_plan_block_parameters();
 8004d6a:	f003 fee1 	bl	8008b30 <st_update_plan_block_parameters>
  block_buffer_planned = block_buffer_tail;
 8004d6e:	4a04      	ldr	r2, [pc, #16]	; (8004d80 <plan_cycle_reinitialize+0x18>)
 8004d70:	4b04      	ldr	r3, [pc, #16]	; (8004d84 <plan_cycle_reinitialize+0x1c>)
 8004d72:	7812      	ldrb	r2, [r2, #0]
 8004d74:	701a      	strb	r2, [r3, #0]
  planner_recalculate();
}
 8004d76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  planner_recalculate();
 8004d7a:	f7ff bb49 	b.w	8004410 <planner_recalculate>
 8004d7e:	bf00      	nop
 8004d80:	200009f6 	.word	0x200009f6
 8004d84:	200009f5 	.word	0x200009f5

08004d88 <printString>:

#include "grbl.h"


void printString(const char *s)
{
 8004d88:	b510      	push	{r4, lr}
 8004d8a:	4604      	mov	r4, r0
  while (*s)
 8004d8c:	7800      	ldrb	r0, [r0, #0]
 8004d8e:	b128      	cbz	r0, 8004d9c <printString+0x14>
    serial_write(*s++);
 8004d90:	f002 fc90 	bl	80076b4 <serial_write>
  while (*s)
 8004d94:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8004d98:	2800      	cmp	r0, #0
 8004d9a:	d1f9      	bne.n	8004d90 <printString+0x8>
 8004d9c:	bd10      	pop	{r4, pc}
 8004d9e:	bf00      	nop

08004da0 <print_uint8_base10>:
// Prints an uint8 variable in base 10.
void print_uint8_base10(uint8_t n)
{
  uint8_t digit_a = 0;
  uint8_t digit_b = 0;
  if (n >= 100) { // 100-255
 8004da0:	2863      	cmp	r0, #99	; 0x63
{
 8004da2:	b570      	push	{r4, r5, r6, lr}
 8004da4:	4605      	mov	r5, r0
  if (n >= 100) { // 100-255
 8004da6:	d920      	bls.n	8004dea <print_uint8_base10+0x4a>
    digit_a = '0' + n % 10;
    n /= 10;
  }
  if (n >= 10) { // 10-99
    digit_b = '0' + n % 10;
    n /= 10;
 8004da8:	481c      	ldr	r0, [pc, #112]	; (8004e1c <print_uint8_base10+0x7c>)
 8004daa:	fba0 3005 	umull	r3, r0, r0, r5
 8004dae:	0940      	lsrs	r0, r0, #5
  }
  serial_write('0' + n);
 8004db0:	3030      	adds	r0, #48	; 0x30
 8004db2:	f002 fc7f 	bl	80076b4 <serial_write>
    n /= 10;
 8004db6:	481a      	ldr	r0, [pc, #104]	; (8004e20 <print_uint8_base10+0x80>)
 8004db8:	fba0 3405 	umull	r3, r4, r0, r5
 8004dbc:	08e4      	lsrs	r4, r4, #3
    digit_b = '0' + n % 10;
 8004dbe:	b2e3      	uxtb	r3, r4
 8004dc0:	fba0 2003 	umull	r2, r0, r0, r3
 8004dc4:	08c0      	lsrs	r0, r0, #3
 8004dc6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004dca:	eba3 0040 	sub.w	r0, r3, r0, lsl #1
 8004dce:	3030      	adds	r0, #48	; 0x30
  if (digit_b) { serial_write(digit_b); }
 8004dd0:	b2c0      	uxtb	r0, r0
 8004dd2:	f002 fc6f 	bl	80076b4 <serial_write>
    digit_a = '0' + n % 10;
 8004dd6:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 8004dda:	eba5 0040 	sub.w	r0, r5, r0, lsl #1
 8004dde:	3030      	adds	r0, #48	; 0x30
  if (digit_a) { serial_write(digit_a); }
 8004de0:	b2c0      	uxtb	r0, r0
}
 8004de2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  if (digit_a) { serial_write(digit_a); }
 8004de6:	f002 bc65 	b.w	80076b4 <serial_write>
  if (n >= 10) { // 10-99
 8004dea:	2809      	cmp	r0, #9
 8004dec:	d805      	bhi.n	8004dfa <print_uint8_base10+0x5a>
}
 8004dee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  serial_write('0' + n);
 8004df2:	3030      	adds	r0, #48	; 0x30
 8004df4:	b2c0      	uxtb	r0, r0
 8004df6:	f002 bc5d 	b.w	80076b4 <serial_write>
    n /= 10;
 8004dfa:	260a      	movs	r6, #10
 8004dfc:	fbb0 f4f6 	udiv	r4, r0, r6
  serial_write('0' + n);
 8004e00:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8004e04:	b2c0      	uxtb	r0, r0
 8004e06:	f002 fc55 	bl	80076b4 <serial_write>
    digit_b = '0' + n % 10;
 8004e0a:	fb06 5014 	mls	r0, r6, r4, r5
}
 8004e0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    digit_b = '0' + n % 10;
 8004e12:	3030      	adds	r0, #48	; 0x30
  if (digit_b) { serial_write(digit_b); }
 8004e14:	b2c0      	uxtb	r0, r0
 8004e16:	f002 bc4d 	b.w	80076b4 <serial_write>
 8004e1a:	bf00      	nop
 8004e1c:	51eb851f 	.word	0x51eb851f
 8004e20:	cccccccd 	.word	0xcccccccd

08004e24 <printFloat>:
// more digits than a float. Number of decimal places, which are tracked by a counter,
// may be set by the user. The integer is then efficiently converted to a string.
// NOTE: AVR '%' and '/' integer operations are very efficient. Bitshifting speed-up
// techniques are actually just slightly slower. Found this out the hard way.
void printFloat(float n, uint8_t decimal_places)
{
 8004e24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e26:	460d      	mov	r5, r1
 8004e28:	b085      	sub	sp, #20
  if (n < 0) {
 8004e2a:	2100      	movs	r1, #0
{
 8004e2c:	4606      	mov	r6, r0
  if (n < 0) {
 8004e2e:	f7fc f8dd 	bl	8000fec <__aeabi_fcmplt>
 8004e32:	2800      	cmp	r0, #0
 8004e34:	d152      	bne.n	8004edc <printFloat+0xb8>
    serial_write('-');
    n = -n;
  }

  uint8_t decimals = decimal_places;
  while (decimals >= 2) { // Quickly convert values expected to be E0 to E-4.
 8004e36:	2d01      	cmp	r5, #1
 8004e38:	d956      	bls.n	8004ee8 <printFloat+0xc4>
 8004e3a:	462c      	mov	r4, r5
    n *= 100;
 8004e3c:	4f2f      	ldr	r7, [pc, #188]	; (8004efc <printFloat+0xd8>)
 8004e3e:	4630      	mov	r0, r6
 8004e40:	4639      	mov	r1, r7
 8004e42:	f7fb ff35 	bl	8000cb0 <__aeabi_fmul>
    decimals -= 2;
 8004e46:	3c02      	subs	r4, #2
 8004e48:	b2e4      	uxtb	r4, r4
  while (decimals >= 2) { // Quickly convert values expected to be E0 to E-4.
 8004e4a:	2c01      	cmp	r4, #1
    n *= 100;
 8004e4c:	4606      	mov	r6, r0
  while (decimals >= 2) { // Quickly convert values expected to be E0 to E-4.
 8004e4e:	d8f6      	bhi.n	8004e3e <printFloat+0x1a>
 8004e50:	f005 0301 	and.w	r3, r5, #1
  }
  if (decimals) { n *= 10; }
 8004e54:	b123      	cbz	r3, 8004e60 <printFloat+0x3c>
 8004e56:	4630      	mov	r0, r6
 8004e58:	4929      	ldr	r1, [pc, #164]	; (8004f00 <printFloat+0xdc>)
 8004e5a:	f7fb ff29 	bl	8000cb0 <__aeabi_fmul>
 8004e5e:	4606      	mov	r6, r0
  n += 0.5; // Add rounding factor. Ensures carryover through entire value.
 8004e60:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004e64:	4630      	mov	r0, r6
 8004e66:	f7fb fe1b 	bl	8000aa0 <__addsf3>

  // Generate digits backwards and store in string.
  unsigned char buf[13];
  uint8_t i = 0;
  uint32_t a = (long)n;
 8004e6a:	f7fc f8fd 	bl	8001068 <__aeabi_f2iz>
  while(a > 0) {
 8004e6e:	2800      	cmp	r0, #0
 8004e70:	d03c      	beq.n	8004eec <printFloat+0xc8>
 8004e72:	2200      	movs	r2, #0
    buf[i++] = (a % 10) + '0'; // Get digit
 8004e74:	4e23      	ldr	r6, [pc, #140]	; (8004f04 <printFloat+0xe0>)
 8004e76:	fba6 1300 	umull	r1, r3, r6, r0
 8004e7a:	08db      	lsrs	r3, r3, #3
 8004e7c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8004e80:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
 8004e84:	1c54      	adds	r4, r2, #1
 8004e86:	a904      	add	r1, sp, #16
 8004e88:	3030      	adds	r0, #48	; 0x30
 8004e8a:	440a      	add	r2, r1
 8004e8c:	b2e4      	uxtb	r4, r4
 8004e8e:	f802 0c10 	strb.w	r0, [r2, #-16]
 8004e92:	4622      	mov	r2, r4
  while(a > 0) {
 8004e94:	4618      	mov	r0, r3
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d1ed      	bne.n	8004e76 <printFloat+0x52>
    a /= 10;
  }
  while (i < decimal_places) {
 8004e9a:	42a5      	cmp	r5, r4
 8004e9c:	d928      	bls.n	8004ef0 <printFloat+0xcc>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004e9e:	1e6a      	subs	r2, r5, #1
 8004ea0:	1b12      	subs	r2, r2, r4
 8004ea2:	b2d2      	uxtb	r2, r2
 8004ea4:	3201      	adds	r2, #1
 8004ea6:	eb0d 0004 	add.w	r0, sp, r4
 8004eaa:	2130      	movs	r1, #48	; 0x30
 8004eac:	f006 fad3 	bl	800b456 <memset>
  }
  if (i == decimal_places) { // Fill in leading zero, if needed.
    buf[i++] = '0';
 8004eb0:	2230      	movs	r2, #48	; 0x30
 8004eb2:	ab04      	add	r3, sp, #16
 8004eb4:	1c6c      	adds	r4, r5, #1
 8004eb6:	442b      	add	r3, r5
 8004eb8:	f803 2c10 	strb.w	r2, [r3, #-16]
 8004ebc:	b2e4      	uxtb	r4, r4
  }

  // Print the generated string.
  for (; i > 0; i--) {
 8004ebe:	b15c      	cbz	r4, 8004ed8 <printFloat+0xb4>
 8004ec0:	eb0d 0604 	add.w	r6, sp, r4
    if (i == decimal_places) { serial_write('.'); } // Insert decimal point in right place.
 8004ec4:	42a5      	cmp	r5, r4
 8004ec6:	d015      	beq.n	8004ef4 <printFloat+0xd0>
    serial_write(buf[i-1]);
 8004ec8:	f816 0d01 	ldrb.w	r0, [r6, #-1]!
  for (; i > 0; i--) {
 8004ecc:	3c01      	subs	r4, #1
    serial_write(buf[i-1]);
 8004ece:	f002 fbf1 	bl	80076b4 <serial_write>
  for (; i > 0; i--) {
 8004ed2:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8004ed6:	d1f5      	bne.n	8004ec4 <printFloat+0xa0>
  }
}
 8004ed8:	b005      	add	sp, #20
 8004eda:	bdf0      	pop	{r4, r5, r6, r7, pc}
    serial_write('-');
 8004edc:	202d      	movs	r0, #45	; 0x2d
 8004ede:	f002 fbe9 	bl	80076b4 <serial_write>
    n = -n;
 8004ee2:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8004ee6:	e7a6      	b.n	8004e36 <printFloat+0x12>
  while (decimals >= 2) { // Quickly convert values expected to be E0 to E-4.
 8004ee8:	462b      	mov	r3, r5
 8004eea:	e7b3      	b.n	8004e54 <printFloat+0x30>
  uint8_t i = 0;
 8004eec:	4604      	mov	r4, r0
 8004eee:	e7d4      	b.n	8004e9a <printFloat+0x76>
  if (i == decimal_places) { // Fill in leading zero, if needed.
 8004ef0:	d1e5      	bne.n	8004ebe <printFloat+0x9a>
 8004ef2:	e7dd      	b.n	8004eb0 <printFloat+0x8c>
    if (i == decimal_places) { serial_write('.'); } // Insert decimal point in right place.
 8004ef4:	202e      	movs	r0, #46	; 0x2e
 8004ef6:	f002 fbdd 	bl	80076b4 <serial_write>
 8004efa:	e7e5      	b.n	8004ec8 <printFloat+0xa4>
 8004efc:	42c80000 	.word	0x42c80000
 8004f00:	41200000 	.word	0x41200000
 8004f04:	cccccccd 	.word	0xcccccccd

08004f08 <printFloat_CoordValue>:

// Floating value printing handlers for special variables types used in Grbl and are defined
// in the config.h.
//  - CoordValue: Handles all position or coordinate values in inches or mm reporting.
//  - RateValue: Handles feed rate and current velocity in inches or mm reporting.
void printFloat_CoordValue(float n) {
 8004f08:	b530      	push	{r4, r5, lr}
  if (bit_istrue(settings.flags,BITFLAG_REPORT_INCHES)) {
 8004f0a:	4b6e      	ldr	r3, [pc, #440]	; (80050c4 <printFloat_CoordValue+0x1bc>)
void printFloat_CoordValue(float n) {
 8004f0c:	b085      	sub	sp, #20
  if (bit_istrue(settings.flags,BITFLAG_REPORT_INCHES)) {
 8004f0e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004f12:	07db      	lsls	r3, r3, #31
 8004f14:	d452      	bmi.n	8004fbc <printFloat_CoordValue+0xb4>
  if (n < 0) {
 8004f16:	2100      	movs	r1, #0
 8004f18:	4604      	mov	r4, r0
 8004f1a:	f7fc f867 	bl	8000fec <__aeabi_fcmplt>
 8004f1e:	2800      	cmp	r0, #0
 8004f20:	f040 80a8 	bne.w	8005074 <printFloat_CoordValue+0x16c>
  if (decimals) { n *= 10; }
 8004f24:	4968      	ldr	r1, [pc, #416]	; (80050c8 <printFloat_CoordValue+0x1c0>)
 8004f26:	4620      	mov	r0, r4
 8004f28:	f7fb fec2 	bl	8000cb0 <__aeabi_fmul>
  n += 0.5; // Add rounding factor. Ensures carryover through entire value.
 8004f2c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004f30:	f7fb fdb6 	bl	8000aa0 <__addsf3>
  uint32_t a = (long)n;
 8004f34:	f7fc f898 	bl	8001068 <__aeabi_f2iz>
  while(a > 0) {
 8004f38:	2800      	cmp	r0, #0
 8004f3a:	f000 80a1 	beq.w	8005080 <printFloat_CoordValue+0x178>
 8004f3e:	2100      	movs	r1, #0
    buf[i++] = (a % 10) + '0'; // Get digit
 8004f40:	4d62      	ldr	r5, [pc, #392]	; (80050cc <printFloat_CoordValue+0x1c4>)
 8004f42:	e000      	b.n	8004f46 <printFloat_CoordValue+0x3e>
 8004f44:	4621      	mov	r1, r4
 8004f46:	fba5 2300 	umull	r2, r3, r5, r0
 8004f4a:	08db      	lsrs	r3, r3, #3
 8004f4c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8004f50:	eba0 0042 	sub.w	r0, r0, r2, lsl #1
 8004f54:	aa04      	add	r2, sp, #16
 8004f56:	3030      	adds	r0, #48	; 0x30
 8004f58:	1c4c      	adds	r4, r1, #1
 8004f5a:	440a      	add	r2, r1
 8004f5c:	f802 0c10 	strb.w	r0, [r2, #-16]
 8004f60:	b2e4      	uxtb	r4, r4
  while(a > 0) {
 8004f62:	4618      	mov	r0, r3
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d1ed      	bne.n	8004f44 <printFloat_CoordValue+0x3c>
  while (i < decimal_places) {
 8004f68:	2c02      	cmp	r4, #2
 8004f6a:	d816      	bhi.n	8004f9a <printFloat_CoordValue+0x92>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004f6c:	2230      	movs	r2, #48	; 0x30
 8004f6e:	1c8b      	adds	r3, r1, #2
 8004f70:	a804      	add	r0, sp, #16
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	4404      	add	r4, r0
  while (i < decimal_places) {
 8004f76:	2b03      	cmp	r3, #3
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004f78:	f804 2c10 	strb.w	r2, [r4, #-16]
  while (i < decimal_places) {
 8004f7c:	d007      	beq.n	8004f8e <printFloat_CoordValue+0x86>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004f7e:	4403      	add	r3, r0
  while (i < decimal_places) {
 8004f80:	29ff      	cmp	r1, #255	; 0xff
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004f82:	f803 2c10 	strb.w	r2, [r3, #-16]
  while (i < decimal_places) {
 8004f86:	d102      	bne.n	8004f8e <printFloat_CoordValue+0x86>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004f88:	2330      	movs	r3, #48	; 0x30
 8004f8a:	f88d 3002 	strb.w	r3, [sp, #2]
    buf[i++] = '0';
 8004f8e:	2330      	movs	r3, #48	; 0x30
 8004f90:	2404      	movs	r4, #4
 8004f92:	461d      	mov	r5, r3
 8004f94:	f88d 3003 	strb.w	r3, [sp, #3]
 8004f98:	e005      	b.n	8004fa6 <printFloat_CoordValue+0x9e>
  if (i == decimal_places) { // Fill in leading zero, if needed.
 8004f9a:	2c03      	cmp	r4, #3
 8004f9c:	d0f7      	beq.n	8004f8e <printFloat_CoordValue+0x86>
 8004f9e:	ab04      	add	r3, sp, #16
 8004fa0:	4423      	add	r3, r4
 8004fa2:	f813 5c11 	ldrb.w	r5, [r3, #-17]
 8004fa6:	3c01      	subs	r4, #1
 8004fa8:	b2e4      	uxtb	r4, r4
    if (i == decimal_places) { serial_write('.'); } // Insert decimal point in right place.
 8004faa:	2c02      	cmp	r4, #2
 8004fac:	d07b      	beq.n	80050a6 <printFloat_CoordValue+0x19e>
    serial_write(buf[i-1]);
 8004fae:	4628      	mov	r0, r5
 8004fb0:	f002 fb80 	bl	80076b4 <serial_write>
  for (; i > 0; i--) {
 8004fb4:	2c00      	cmp	r4, #0
 8004fb6:	d1f2      	bne.n	8004f9e <printFloat_CoordValue+0x96>
    printFloat(n*INCH_PER_MM,N_DECIMAL_COORDVALUE_INCH);
  } else {
    printFloat(n,N_DECIMAL_COORDVALUE_MM);
  }
}
 8004fb8:	b005      	add	sp, #20
 8004fba:	bd30      	pop	{r4, r5, pc}
    printFloat(n*INCH_PER_MM,N_DECIMAL_COORDVALUE_INCH);
 8004fbc:	4944      	ldr	r1, [pc, #272]	; (80050d0 <printFloat_CoordValue+0x1c8>)
 8004fbe:	f7fb fe77 	bl	8000cb0 <__aeabi_fmul>
  if (n < 0) {
 8004fc2:	2100      	movs	r1, #0
    printFloat(n*INCH_PER_MM,N_DECIMAL_COORDVALUE_INCH);
 8004fc4:	4604      	mov	r4, r0
  if (n < 0) {
 8004fc6:	f7fc f811 	bl	8000fec <__aeabi_fcmplt>
 8004fca:	2800      	cmp	r0, #0
 8004fcc:	d15e      	bne.n	800508c <printFloat_CoordValue+0x184>
    n *= 100;
 8004fce:	4941      	ldr	r1, [pc, #260]	; (80050d4 <printFloat_CoordValue+0x1cc>)
 8004fd0:	4620      	mov	r0, r4
 8004fd2:	f7fb fe6d 	bl	8000cb0 <__aeabi_fmul>
  n += 0.5; // Add rounding factor. Ensures carryover through entire value.
 8004fd6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004fda:	f7fb fd61 	bl	8000aa0 <__addsf3>
  uint32_t a = (long)n;
 8004fde:	f7fc f843 	bl	8001068 <__aeabi_f2iz>
  while(a > 0) {
 8004fe2:	2800      	cmp	r0, #0
 8004fe4:	d058      	beq.n	8005098 <printFloat_CoordValue+0x190>
 8004fe6:	2100      	movs	r1, #0
    buf[i++] = (a % 10) + '0'; // Get digit
 8004fe8:	4d38      	ldr	r5, [pc, #224]	; (80050cc <printFloat_CoordValue+0x1c4>)
 8004fea:	e000      	b.n	8004fee <printFloat_CoordValue+0xe6>
 8004fec:	4621      	mov	r1, r4
 8004fee:	fba5 2300 	umull	r2, r3, r5, r0
 8004ff2:	08db      	lsrs	r3, r3, #3
 8004ff4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8004ff8:	eba0 0042 	sub.w	r0, r0, r2, lsl #1
 8004ffc:	aa04      	add	r2, sp, #16
 8004ffe:	3030      	adds	r0, #48	; 0x30
 8005000:	1c4c      	adds	r4, r1, #1
 8005002:	440a      	add	r2, r1
 8005004:	f802 0c10 	strb.w	r0, [r2, #-16]
 8005008:	b2e4      	uxtb	r4, r4
  while(a > 0) {
 800500a:	4618      	mov	r0, r3
 800500c:	2b00      	cmp	r3, #0
 800500e:	d1ed      	bne.n	8004fec <printFloat_CoordValue+0xe4>
  while (i < decimal_places) {
 8005010:	2c03      	cmp	r4, #3
 8005012:	d81e      	bhi.n	8005052 <printFloat_CoordValue+0x14a>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8005014:	2230      	movs	r2, #48	; 0x30
 8005016:	1c8b      	adds	r3, r1, #2
 8005018:	a804      	add	r0, sp, #16
 800501a:	b2db      	uxtb	r3, r3
 800501c:	4404      	add	r4, r0
  while (i < decimal_places) {
 800501e:	2b04      	cmp	r3, #4
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8005020:	f804 2c10 	strb.w	r2, [r4, #-16]
  while (i < decimal_places) {
 8005024:	d00f      	beq.n	8005046 <printFloat_CoordValue+0x13e>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8005026:	3103      	adds	r1, #3
 8005028:	b2c9      	uxtb	r1, r1
 800502a:	4403      	add	r3, r0
  while (i < decimal_places) {
 800502c:	2904      	cmp	r1, #4
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 800502e:	f803 2c10 	strb.w	r2, [r3, #-16]
  while (i < decimal_places) {
 8005032:	d008      	beq.n	8005046 <printFloat_CoordValue+0x13e>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8005034:	2330      	movs	r3, #48	; 0x30
 8005036:	aa04      	add	r2, sp, #16
 8005038:	440a      	add	r2, r1
  while (i < decimal_places) {
 800503a:	2902      	cmp	r1, #2
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 800503c:	f802 3c10 	strb.w	r3, [r2, #-16]
  while (i < decimal_places) {
 8005040:	d101      	bne.n	8005046 <printFloat_CoordValue+0x13e>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8005042:	f88d 3003 	strb.w	r3, [sp, #3]
    buf[i++] = '0';
 8005046:	2330      	movs	r3, #48	; 0x30
 8005048:	2405      	movs	r4, #5
 800504a:	461d      	mov	r5, r3
 800504c:	f88d 3004 	strb.w	r3, [sp, #4]
 8005050:	e005      	b.n	800505e <printFloat_CoordValue+0x156>
  if (i == decimal_places) { // Fill in leading zero, if needed.
 8005052:	2c04      	cmp	r4, #4
 8005054:	d0f7      	beq.n	8005046 <printFloat_CoordValue+0x13e>
 8005056:	ab04      	add	r3, sp, #16
 8005058:	4423      	add	r3, r4
 800505a:	f813 5c11 	ldrb.w	r5, [r3, #-17]
 800505e:	3c01      	subs	r4, #1
 8005060:	b2e4      	uxtb	r4, r4
    if (i == decimal_places) { serial_write('.'); } // Insert decimal point in right place.
 8005062:	2c03      	cmp	r4, #3
 8005064:	d026      	beq.n	80050b4 <printFloat_CoordValue+0x1ac>
    serial_write(buf[i-1]);
 8005066:	4628      	mov	r0, r5
 8005068:	f002 fb24 	bl	80076b4 <serial_write>
  for (; i > 0; i--) {
 800506c:	2c00      	cmp	r4, #0
 800506e:	d1f2      	bne.n	8005056 <printFloat_CoordValue+0x14e>
}
 8005070:	b005      	add	sp, #20
 8005072:	bd30      	pop	{r4, r5, pc}
    serial_write('-');
 8005074:	202d      	movs	r0, #45	; 0x2d
 8005076:	f002 fb1d 	bl	80076b4 <serial_write>
    n = -n;
 800507a:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
 800507e:	e751      	b.n	8004f24 <printFloat_CoordValue+0x1c>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8005080:	2330      	movs	r3, #48	; 0x30
 8005082:	f88d 3000 	strb.w	r3, [sp]
 8005086:	f88d 3001 	strb.w	r3, [sp, #1]
 800508a:	e77d      	b.n	8004f88 <printFloat_CoordValue+0x80>
    serial_write('-');
 800508c:	202d      	movs	r0, #45	; 0x2d
 800508e:	f002 fb11 	bl	80076b4 <serial_write>
    n = -n;
 8005092:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
 8005096:	e79a      	b.n	8004fce <printFloat_CoordValue+0xc6>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8005098:	2330      	movs	r3, #48	; 0x30
 800509a:	2102      	movs	r1, #2
 800509c:	f88d 3000 	strb.w	r3, [sp]
 80050a0:	f88d 3001 	strb.w	r3, [sp, #1]
 80050a4:	e7c6      	b.n	8005034 <printFloat_CoordValue+0x12c>
    if (i == decimal_places) { serial_write('.'); } // Insert decimal point in right place.
 80050a6:	202e      	movs	r0, #46	; 0x2e
 80050a8:	f002 fb04 	bl	80076b4 <serial_write>
    serial_write(buf[i-1]);
 80050ac:	4628      	mov	r0, r5
 80050ae:	f002 fb01 	bl	80076b4 <serial_write>
 80050b2:	e774      	b.n	8004f9e <printFloat_CoordValue+0x96>
    if (i == decimal_places) { serial_write('.'); } // Insert decimal point in right place.
 80050b4:	202e      	movs	r0, #46	; 0x2e
 80050b6:	f002 fafd 	bl	80076b4 <serial_write>
    serial_write(buf[i-1]);
 80050ba:	4628      	mov	r0, r5
 80050bc:	f002 fafa 	bl	80076b4 <serial_write>
 80050c0:	e7c9      	b.n	8005056 <printFloat_CoordValue+0x14e>
 80050c2:	bf00      	nop
 80050c4:	20001404 	.word	0x20001404
 80050c8:	447a0000 	.word	0x447a0000
 80050cc:	cccccccd 	.word	0xcccccccd
 80050d0:	3d21428b 	.word	0x3d21428b
 80050d4:	461c4000 	.word	0x461c4000

080050d8 <printFloat_RateValue>:

void printFloat_RateValue(float n) {
 80050d8:	b570      	push	{r4, r5, r6, lr}
  if (bit_istrue(settings.flags,BITFLAG_REPORT_INCHES)) {
 80050da:	4b4d      	ldr	r3, [pc, #308]	; (8005210 <printFloat_RateValue+0x138>)
void printFloat_RateValue(float n) {
 80050dc:	b084      	sub	sp, #16
  if (bit_istrue(settings.flags,BITFLAG_REPORT_INCHES)) {
 80050de:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80050e2:	07db      	lsls	r3, r3, #31
 80050e4:	d435      	bmi.n	8005152 <printFloat_RateValue+0x7a>
  if (n < 0) {
 80050e6:	2100      	movs	r1, #0
 80050e8:	4604      	mov	r4, r0
 80050ea:	f7fb ff7f 	bl	8000fec <__aeabi_fcmplt>
 80050ee:	2800      	cmp	r0, #0
 80050f0:	d17b      	bne.n	80051ea <printFloat_RateValue+0x112>
  n += 0.5; // Add rounding factor. Ensures carryover through entire value.
 80050f2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80050f6:	4620      	mov	r0, r4
 80050f8:	f7fb fcd2 	bl	8000aa0 <__addsf3>
  uint32_t a = (long)n;
 80050fc:	f7fb ffb4 	bl	8001068 <__aeabi_f2iz>
  while(a > 0) {
 8005100:	2800      	cmp	r0, #0
 8005102:	d06d      	beq.n	80051e0 <printFloat_RateValue+0x108>
 8005104:	2200      	movs	r2, #0
    buf[i++] = (a % 10) + '0'; // Get digit
 8005106:	4d43      	ldr	r5, [pc, #268]	; (8005214 <printFloat_RateValue+0x13c>)
 8005108:	fba5 1300 	umull	r1, r3, r5, r0
 800510c:	08db      	lsrs	r3, r3, #3
 800510e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8005112:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
 8005116:	1c54      	adds	r4, r2, #1
 8005118:	a904      	add	r1, sp, #16
 800511a:	3030      	adds	r0, #48	; 0x30
 800511c:	440a      	add	r2, r1
 800511e:	b2e4      	uxtb	r4, r4
 8005120:	f802 0c10 	strb.w	r0, [r2, #-16]
 8005124:	4622      	mov	r2, r4
  while(a > 0) {
 8005126:	4618      	mov	r0, r3
 8005128:	2b00      	cmp	r3, #0
 800512a:	d1ed      	bne.n	8005108 <printFloat_RateValue+0x30>
  if (i == decimal_places) { // Fill in leading zero, if needed.
 800512c:	2c00      	cmp	r4, #0
 800512e:	d057      	beq.n	80051e0 <printFloat_RateValue+0x108>
 8005130:	ab04      	add	r3, sp, #16
 8005132:	441a      	add	r2, r3
 8005134:	f812 0c11 	ldrb.w	r0, [r2, #-17]
 8005138:	3c01      	subs	r4, #1
 800513a:	b2e4      	uxtb	r4, r4
 800513c:	466d      	mov	r5, sp
 800513e:	446c      	add	r4, sp
 8005140:	e001      	b.n	8005146 <printFloat_RateValue+0x6e>
 8005142:	f814 0d01 	ldrb.w	r0, [r4, #-1]!
    serial_write(buf[i-1]);
 8005146:	f002 fab5 	bl	80076b4 <serial_write>
  for (; i > 0; i--) {
 800514a:	42ac      	cmp	r4, r5
 800514c:	d1f9      	bne.n	8005142 <printFloat_RateValue+0x6a>
    printFloat(n*INCH_PER_MM,N_DECIMAL_RATEVALUE_INCH);
  } else {
    printFloat(n,N_DECIMAL_RATEVALUE_MM);
  }
}
 800514e:	b004      	add	sp, #16
 8005150:	bd70      	pop	{r4, r5, r6, pc}
    printFloat(n*INCH_PER_MM,N_DECIMAL_RATEVALUE_INCH);
 8005152:	4931      	ldr	r1, [pc, #196]	; (8005218 <printFloat_RateValue+0x140>)
 8005154:	f7fb fdac 	bl	8000cb0 <__aeabi_fmul>
  if (n < 0) {
 8005158:	2100      	movs	r1, #0
    printFloat(n*INCH_PER_MM,N_DECIMAL_RATEVALUE_INCH);
 800515a:	4604      	mov	r4, r0
  if (n < 0) {
 800515c:	f7fb ff46 	bl	8000fec <__aeabi_fcmplt>
 8005160:	2800      	cmp	r0, #0
 8005162:	d148      	bne.n	80051f6 <printFloat_RateValue+0x11e>
  if (decimals) { n *= 10; }
 8005164:	492d      	ldr	r1, [pc, #180]	; (800521c <printFloat_RateValue+0x144>)
 8005166:	4620      	mov	r0, r4
 8005168:	f7fb fda2 	bl	8000cb0 <__aeabi_fmul>
  n += 0.5; // Add rounding factor. Ensures carryover through entire value.
 800516c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8005170:	f7fb fc96 	bl	8000aa0 <__addsf3>
  uint32_t a = (long)n;
 8005174:	f7fb ff78 	bl	8001068 <__aeabi_f2iz>
  while(a > 0) {
 8005178:	b1a0      	cbz	r0, 80051a4 <printFloat_RateValue+0xcc>
 800517a:	2100      	movs	r1, #0
    buf[i++] = (a % 10) + '0'; // Get digit
 800517c:	4c25      	ldr	r4, [pc, #148]	; (8005214 <printFloat_RateValue+0x13c>)
 800517e:	fba4 3200 	umull	r3, r2, r4, r0
 8005182:	08d2      	lsrs	r2, r2, #3
 8005184:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8005188:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
 800518c:	ad04      	add	r5, sp, #16
 800518e:	1c4b      	adds	r3, r1, #1
 8005190:	3030      	adds	r0, #48	; 0x30
 8005192:	4429      	add	r1, r5
 8005194:	b2db      	uxtb	r3, r3
 8005196:	f801 0c10 	strb.w	r0, [r1, #-16]
 800519a:	4619      	mov	r1, r3
  while(a > 0) {
 800519c:	4610      	mov	r0, r2
 800519e:	2a00      	cmp	r2, #0
 80051a0:	d1ed      	bne.n	800517e <printFloat_RateValue+0xa6>
  while (i < decimal_places) {
 80051a2:	bb73      	cbnz	r3, 8005202 <printFloat_RateValue+0x12a>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 80051a4:	2330      	movs	r3, #48	; 0x30
 80051a6:	f88d 3000 	strb.w	r3, [sp]
    buf[i++] = '0';
 80051aa:	2230      	movs	r2, #48	; 0x30
 80051ac:	2302      	movs	r3, #2
 80051ae:	4616      	mov	r6, r2
 80051b0:	f88d 2001 	strb.w	r2, [sp, #1]
 80051b4:	1e5c      	subs	r4, r3, #1
 80051b6:	b2e5      	uxtb	r5, r4
 80051b8:	446d      	add	r5, sp
 80051ba:	e000      	b.n	80051be <printFloat_RateValue+0xe6>
 80051bc:	1e5c      	subs	r4, r3, #1
    serial_write(buf[i-1]);
 80051be:	4630      	mov	r0, r6
 80051c0:	f002 fa78 	bl	80076b4 <serial_write>
  for (; i > 0; i--) {
 80051c4:	b2e3      	uxtb	r3, r4
    if (i == decimal_places) { serial_write('.'); } // Insert decimal point in right place.
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	f815 6d01 	ldrb.w	r6, [r5, #-1]!
 80051cc:	d1f6      	bne.n	80051bc <printFloat_RateValue+0xe4>
 80051ce:	202e      	movs	r0, #46	; 0x2e
 80051d0:	f002 fa70 	bl	80076b4 <serial_write>
    serial_write(buf[i-1]);
 80051d4:	4630      	mov	r0, r6
}
 80051d6:	b004      	add	sp, #16
 80051d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    serial_write(buf[i-1]);
 80051dc:	f002 ba6a 	b.w	80076b4 <serial_write>
    buf[i++] = '0';
 80051e0:	2030      	movs	r0, #48	; 0x30
 80051e2:	2401      	movs	r4, #1
 80051e4:	f88d 0000 	strb.w	r0, [sp]
 80051e8:	e7a6      	b.n	8005138 <printFloat_RateValue+0x60>
    serial_write('-');
 80051ea:	202d      	movs	r0, #45	; 0x2d
 80051ec:	f002 fa62 	bl	80076b4 <serial_write>
    n = -n;
 80051f0:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
 80051f4:	e77d      	b.n	80050f2 <printFloat_RateValue+0x1a>
    serial_write('-');
 80051f6:	202d      	movs	r0, #45	; 0x2d
 80051f8:	f002 fa5c 	bl	80076b4 <serial_write>
    n = -n;
 80051fc:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
 8005200:	e7b0      	b.n	8005164 <printFloat_RateValue+0x8c>
  if (i == decimal_places) { // Fill in leading zero, if needed.
 8005202:	2b01      	cmp	r3, #1
 8005204:	d0d1      	beq.n	80051aa <printFloat_RateValue+0xd2>
 8005206:	4429      	add	r1, r5
 8005208:	f811 6c11 	ldrb.w	r6, [r1, #-17]
 800520c:	e7d2      	b.n	80051b4 <printFloat_RateValue+0xdc>
 800520e:	bf00      	nop
 8005210:	20001404 	.word	0x20001404
 8005214:	cccccccd 	.word	0xcccccccd
 8005218:	3d21428b 	.word	0x3d21428b
 800521c:	41200000 	.word	0x41200000

08005220 <probe_init>:
uint16_t probe_invert_mask;


// Probe pin initialization routine.
void probe_init()
{
 8005220:	b510      	push	{r4, lr}
    PROBE_PORT |= PROBE_MASK;    // Enable internal pull-up resistors. Normal high operation.
  #endif
#endif
#ifdef STM32F103C8
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_APB2PeriphClockCmd(RCC_PROBE_PORT, ENABLE);
 8005222:	2101      	movs	r1, #1
{
 8005224:	b082      	sub	sp, #8
#ifdef DISABLE_PROBE_PIN_PULL_UP
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
#else
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
#endif
	GPIO_InitStructure.GPIO_Pin = PROBE_MASK;
 8005226:	f44f 7400 	mov.w	r4, #512	; 0x200
	RCC_APB2PeriphClockCmd(RCC_PROBE_PORT, ENABLE);
 800522a:	2008      	movs	r0, #8
 800522c:	f7fc fb5a 	bl	80018e4 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8005230:	2203      	movs	r2, #3
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 8005232:	2348      	movs	r3, #72	; 0x48
	GPIO_InitStructure.GPIO_Pin = PROBE_MASK;
 8005234:	a902      	add	r1, sp, #8
 8005236:	f821 4d04 	strh.w	r4, [r1, #-4]!
	GPIO_Init(PROBE_PORT, &GPIO_InitStructure);
 800523a:	4809      	ldr	r0, [pc, #36]	; (8005260 <probe_init+0x40>)
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800523c:	f88d 2006 	strb.w	r2, [sp, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 8005240:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_Init(PROBE_PORT, &GPIO_InitStructure);
 8005244:	f7fc f8dc 	bl	8001400 <GPIO_Init>
// Called by probe_init() and the mc_probe() routines. Sets up the probe pin invert mask to
// appropriately set the pin logic according to setting for normal-high/normal-low operation
// and the probing cycle modes for toward-workpiece/away-from-workpiece.
void probe_configure_invert_mask(uint8_t is_probe_away)
{
  probe_invert_mask = 0; // Initialize as zero.
 8005248:	2100      	movs	r1, #0
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_PROBE_PIN)) { probe_invert_mask ^= PROBE_MASK; }
 800524a:	4a06      	ldr	r2, [pc, #24]	; (8005264 <probe_init+0x44>)
  probe_invert_mask = 0; // Initialize as zero.
 800524c:	4b06      	ldr	r3, [pc, #24]	; (8005268 <probe_init+0x48>)
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_PROBE_PIN)) { probe_invert_mask ^= PROBE_MASK; }
 800524e:	f992 2058 	ldrsb.w	r2, [r2, #88]	; 0x58
  probe_invert_mask = 0; // Initialize as zero.
 8005252:	8019      	strh	r1, [r3, #0]
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_PROBE_PIN)) { probe_invert_mask ^= PROBE_MASK; }
 8005254:	428a      	cmp	r2, r1
 8005256:	bfa8      	it	ge
 8005258:	801c      	strhge	r4, [r3, #0]
}
 800525a:	b002      	add	sp, #8
 800525c:	bd10      	pop	{r4, pc}
 800525e:	bf00      	nop
 8005260:	40010c00 	.word	0x40010c00
 8005264:	20001404 	.word	0x20001404
 8005268:	20001102 	.word	0x20001102

0800526c <probe_configure_invert_mask>:
  probe_invert_mask = 0; // Initialize as zero.
 800526c:	2300      	movs	r3, #0
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_PROBE_PIN)) { probe_invert_mask ^= PROBE_MASK; }
 800526e:	4907      	ldr	r1, [pc, #28]	; (800528c <probe_configure_invert_mask+0x20>)
  probe_invert_mask = 0; // Initialize as zero.
 8005270:	4a07      	ldr	r2, [pc, #28]	; (8005290 <probe_configure_invert_mask+0x24>)
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_PROBE_PIN)) { probe_invert_mask ^= PROBE_MASK; }
 8005272:	f991 1058 	ldrsb.w	r1, [r1, #88]	; 0x58
  probe_invert_mask = 0; // Initialize as zero.
 8005276:	8013      	strh	r3, [r2, #0]
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_PROBE_PIN)) { probe_invert_mask ^= PROBE_MASK; }
 8005278:	4299      	cmp	r1, r3
 800527a:	bfaa      	itet	ge
 800527c:	f44f 7100 	movge.w	r1, #512	; 0x200
 8005280:	f44f 7300 	movlt.w	r3, #512	; 0x200
 8005284:	8011      	strhge	r1, [r2, #0]
  if (is_probe_away) { probe_invert_mask ^= PROBE_MASK; }
 8005286:	b100      	cbz	r0, 800528a <probe_configure_invert_mask+0x1e>
 8005288:	8013      	strh	r3, [r2, #0]
 800528a:	4770      	bx	lr
 800528c:	20001404 	.word	0x20001404
 8005290:	20001102 	.word	0x20001102

08005294 <probe_get_state>:
}


// Returns the probe pin state. Triggered = true. Called by gcode parser and probe state monitor.
uint8_t probe_get_state() 
{ 
 8005294:	b508      	push	{r3, lr}
#endif
#ifdef WIN32
	return 0;
#endif
#ifdef STM32F103C8
	return ((GPIO_ReadInputData(PROBE_PORT) & PROBE_MASK) ^ probe_invert_mask) != 0;
 8005296:	4805      	ldr	r0, [pc, #20]	; (80052ac <probe_get_state+0x18>)
 8005298:	f7fc fa68 	bl	800176c <GPIO_ReadInputData>
 800529c:	4b04      	ldr	r3, [pc, #16]	; (80052b0 <probe_get_state+0x1c>)
 800529e:	f400 7000 	and.w	r0, r0, #512	; 0x200
 80052a2:	881b      	ldrh	r3, [r3, #0]
#endif
}
 80052a4:	1a18      	subs	r0, r3, r0
 80052a6:	bf18      	it	ne
 80052a8:	2001      	movne	r0, #1
 80052aa:	bd08      	pop	{r3, pc}
 80052ac:	40010c00 	.word	0x40010c00
 80052b0:	20001102 	.word	0x20001102

080052b4 <probe_state_monitor>:

// Monitors probe pin state and records the system position when detected. Called by the
// stepper ISR per ISR tick.
// NOTE: This function must be extremely efficient as to not bog down the stepper ISR.
void probe_state_monitor()
{
 80052b4:	b538      	push	{r3, r4, r5, lr}
	return ((GPIO_ReadInputData(PROBE_PORT) & PROBE_MASK) ^ probe_invert_mask) != 0;
 80052b6:	480b      	ldr	r0, [pc, #44]	; (80052e4 <probe_state_monitor+0x30>)
 80052b8:	f7fc fa58 	bl	800176c <GPIO_ReadInputData>
 80052bc:	4b0a      	ldr	r3, [pc, #40]	; (80052e8 <probe_state_monitor+0x34>)
  if (probe_get_state()) {
 80052be:	f400 7000 	and.w	r0, r0, #512	; 0x200
 80052c2:	881b      	ldrh	r3, [r3, #0]
 80052c4:	4283      	cmp	r3, r0
 80052c6:	d00c      	beq.n	80052e2 <probe_state_monitor+0x2e>
    sys_probe_state = PROBE_OFF;
 80052c8:	2100      	movs	r1, #0
 80052ca:	4a08      	ldr	r2, [pc, #32]	; (80052ec <probe_state_monitor+0x38>)
    memcpy(sys_probe_position, sys_position, sizeof(sys_position));
    bit_true(sys_rt_exec_state, EXEC_MOTION_CANCEL);
 80052cc:	4d08      	ldr	r5, [pc, #32]	; (80052f0 <probe_state_monitor+0x3c>)
    memcpy(sys_probe_position, sys_position, sizeof(sys_position));
 80052ce:	4b09      	ldr	r3, [pc, #36]	; (80052f4 <probe_state_monitor+0x40>)
 80052d0:	4c09      	ldr	r4, [pc, #36]	; (80052f8 <probe_state_monitor+0x44>)
    sys_probe_state = PROBE_OFF;
 80052d2:	7011      	strb	r1, [r2, #0]
    memcpy(sys_probe_position, sys_position, sizeof(sys_position));
 80052d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80052d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    bit_true(sys_rt_exec_state, EXEC_MOTION_CANCEL);
 80052da:	782b      	ldrb	r3, [r5, #0]
 80052dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052e0:	702b      	strb	r3, [r5, #0]
 80052e2:	bd38      	pop	{r3, r4, r5, pc}
 80052e4:	40010c00 	.word	0x40010c00
 80052e8:	20001102 	.word	0x20001102
 80052ec:	200010de 	.word	0x200010de
 80052f0:	200010dd 	.word	0x200010dd
 80052f4:	200010f0 	.word	0x200010f0
 80052f8:	200010e0 	.word	0x200010e0

080052fc <protocol_auto_cycle_start>:
// NOTE: This function is called from the main loop, buffer sync, and mc_line() only and executes
// when one of these conditions exist respectively: There are no more blocks sent (i.e. streaming
// is finished, single commands), a command that needs to wait for the motions in the buffer to
// execute calls a buffer sync, or the planner buffer is full and ready to go.
void protocol_auto_cycle_start()
{
 80052fc:	b508      	push	{r3, lr}
  if (plan_get_current_block() != NULL) { // Check if there are any blocks in the buffer.
 80052fe:	f7ff f9c5 	bl	800468c <plan_get_current_block>
 8005302:	b120      	cbz	r0, 800530e <protocol_auto_cycle_start+0x12>
    system_set_exec_state_flag(EXEC_CYCLE_START); // If so, execute them!
  }
}
 8005304:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    system_set_exec_state_flag(EXEC_CYCLE_START); // If so, execute them!
 8005308:	2002      	movs	r0, #2
 800530a:	f004 bc97 	b.w	8009c3c <system_set_exec_state_flag>
 800530e:	bd08      	pop	{r3, pc}

08005310 <protocol_exec_rt_system>:

// Executes run-time commands, when required. This function primarily operates as Grbl's state
// machine and controls the various real-time features Grbl has to offer.
// NOTE: Do not alter this unless you know exactly what you are doing!
void protocol_exec_rt_system()
{
 8005310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t rt_exec; // Temp variable to avoid calling volatile multiple times.
  rt_exec = sys_rt_exec_alarm; // Copy volatile sys_rt_exec_alarm.
 8005312:	4bac      	ldr	r3, [pc, #688]	; (80055c4 <protocol_exec_rt_system+0x2b4>)
 8005314:	781b      	ldrb	r3, [r3, #0]
  if (rt_exec) { // Enter only if any bit flag is true
 8005316:	2b00      	cmp	r3, #0
 8005318:	d14f      	bne.n	80053ba <protocol_exec_rt_system+0xaa>
 800531a:	4cab      	ldr	r4, [pc, #684]	; (80055c8 <protocol_exec_rt_system+0x2b8>)
 800531c:	4dab      	ldr	r5, [pc, #684]	; (80055cc <protocol_exec_rt_system+0x2bc>)
      } while (bit_isfalse(sys_rt_exec_state,EXEC_RESET));
    }
    system_clear_exec_alarm(); // Clear alarm
  }

  rt_exec = sys_rt_exec_state; // Copy volatile sys_rt_exec_state.
 800531e:	782b      	ldrb	r3, [r5, #0]
  if (rt_exec) {
 8005320:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8005324:	b393      	cbz	r3, 800538c <protocol_exec_rt_system+0x7c>

    // Execute system abort.
    if (rt_exec & EXEC_RESET) {
 8005326:	06ee      	lsls	r6, r5, #27
 8005328:	f100 80d6 	bmi.w	80054d8 <protocol_exec_rt_system+0x1c8>
      sys.abort = true;  // Only place this is set true.
      return; // Nothing else to do but exit.
    }

    // Execute and serial print status
    if (rt_exec & EXEC_STATUS_REPORT) {
 800532c:	07e8      	lsls	r0, r5, #31
 800532e:	f100 80f1 	bmi.w	8005514 <protocol_exec_rt_system+0x204>
      system_clear_exec_state_flag(EXEC_STATUS_REPORT);
    }

    // NOTE: Once hold is initiated, the system immediately enters a suspend state to block all
    // main program processes until either reset or resumed. This ensures a hold completes safely.
    if (rt_exec & (EXEC_MOTION_CANCEL | EXEC_FEED_HOLD | EXEC_SAFETY_DOOR | EXEC_SLEEP)) {
 8005332:	f015 0fe8 	tst.w	r5, #232	; 0xe8
 8005336:	d00a      	beq.n	800534e <protocol_exec_rt_system+0x3e>

      // State check for allowable states for hold methods.
      if (!(sys.state & (STATE_ALARM | STATE_CHECK_MODE))) {
 8005338:	7823      	ldrb	r3, [r4, #0]
 800533a:	0799      	lsls	r1, r3, #30
 800533c:	f000 80f0 	beq.w	8005520 <protocol_exec_rt_system+0x210>
 8005340:	b26e      	sxtb	r6, r5
          sys.suspend |= SUSPEND_SAFETY_DOOR_AJAR;
        }
        
      }

      if (rt_exec & EXEC_SLEEP) {
 8005342:	2e00      	cmp	r6, #0
 8005344:	f2c0 8161 	blt.w	800560a <protocol_exec_rt_system+0x2fa>
        if (sys.state == STATE_ALARM) { sys.suspend |= (SUSPEND_RETRACT_COMPLETE|SUSPEND_HOLD_COMPLETE); }
        sys.state = STATE_SLEEP; 
      }

      system_clear_exec_state_flag((EXEC_MOTION_CANCEL | EXEC_FEED_HOLD | EXEC_SAFETY_DOOR | EXEC_SLEEP));
 8005348:	20e8      	movs	r0, #232	; 0xe8
 800534a:	f004 fc81 	bl	8009c50 <system_clear_exec_state_flag>
    }

    // Execute a cycle start by starting the stepper interrupt to begin executing the blocks in queue.
    if (rt_exec & EXEC_CYCLE_START) {
 800534e:	07ab      	lsls	r3, r5, #30
 8005350:	d519      	bpl.n	8005386 <protocol_exec_rt_system+0x76>
      // Block if called at same time as the hold commands: feed hold, motion cancel, and safety door.
      // Ensures auto-cycle-start doesn't resume a hold without an explicit user-input.
      if (!(rt_exec & (EXEC_FEED_HOLD | EXEC_MOTION_CANCEL | EXEC_SAFETY_DOOR))) {
 8005352:	f015 0f68 	tst.w	r5, #104	; 0x68
 8005356:	d113      	bne.n	8005380 <protocol_exec_rt_system+0x70>
        // Resume door state when parking motion has retracted and door has been closed.
        if ((sys.state == STATE_SAFETY_DOOR) && !(sys.suspend & SUSPEND_SAFETY_DOOR_AJAR)) {
 8005358:	7823      	ldrb	r3, [r4, #0]
 800535a:	2b40      	cmp	r3, #64	; 0x40
 800535c:	f000 816d 	beq.w	800563a <protocol_exec_rt_system+0x32a>
            // they are complete, it will call CYCLE_START automatically to resume and exit the suspend.
            sys.suspend |= SUSPEND_INITIATE_RESTORE;
          }
        }
        // Cycle start only when IDLE or when a hold is complete and ready to resume.
        if ((sys.state == STATE_IDLE) || ((sys.state & STATE_HOLD) && (sys.suspend & SUSPEND_HOLD_COMPLETE))) {
 8005360:	2b00      	cmp	r3, #0
 8005362:	f040 813b 	bne.w	80055dc <protocol_exec_rt_system+0x2cc>
          if (sys.state == STATE_HOLD && sys.spindle_stop_ovr) {
            sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE_CYCLE; // Set to restore in suspend routine and cycle start after.
          } else {
            // Start cycle only if queued motions exist in planner buffer and the motion is not canceled.
            sys.step_control = STEP_CONTROL_NORMAL_OP; // Restore step control to normal operation
 8005366:	2300      	movs	r3, #0
 8005368:	7123      	strb	r3, [r4, #4]
            if (plan_get_current_block() && bit_isfalse(sys.suspend,SUSPEND_MOTION_CANCEL)) {
 800536a:	f7ff f98f 	bl	800468c <plan_get_current_block>
 800536e:	b120      	cbz	r0, 800537a <protocol_exec_rt_system+0x6a>
 8005370:	78a3      	ldrb	r3, [r4, #2]
 8005372:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8005376:	f000 8198 	beq.w	80056aa <protocol_exec_rt_system+0x39a>
              sys.suspend = SUSPEND_DISABLE; // Break suspend state.
              sys.state = STATE_CYCLE;
              st_prep_buffer(); // Initialize step segment buffer before beginning cycle.
              st_wake_up();
            } else { // Otherwise, do nothing. Set and resume IDLE state.
              sys.suspend = SUSPEND_DISABLE; // Break suspend state.
 800537a:	2300      	movs	r3, #0
 800537c:	70a3      	strb	r3, [r4, #2]
              sys.state = STATE_IDLE;
 800537e:	7023      	strb	r3, [r4, #0]
            }
          }
        }
      }
      system_clear_exec_state_flag(EXEC_CYCLE_START);
 8005380:	2002      	movs	r0, #2
 8005382:	f004 fc65 	bl	8009c50 <system_clear_exec_state_flag>
    }

    if (rt_exec & EXEC_CYCLE_STOP) {
 8005386:	0769      	lsls	r1, r5, #29
 8005388:	f100 80a9 	bmi.w	80054de <protocol_exec_rt_system+0x1ce>
      system_clear_exec_state_flag(EXEC_CYCLE_STOP);
    }
  }

  // Execute overrides.
  rt_exec = sys_rt_exec_motion_override; // Copy volatile sys_rt_exec_motion_override
 800538c:	4b90      	ldr	r3, [pc, #576]	; (80055d0 <protocol_exec_rt_system+0x2c0>)
 800538e:	781b      	ldrb	r3, [r3, #0]
  if (rt_exec) {
 8005390:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8005394:	2b00      	cmp	r3, #0
 8005396:	d167      	bne.n	8005468 <protocol_exec_rt_system+0x158>
      plan_update_velocity_profile_parameters();
      plan_cycle_reinitialize();
    }
  }

  rt_exec = sys_rt_exec_accessory_override;
 8005398:	4b8e      	ldr	r3, [pc, #568]	; (80055d4 <protocol_exec_rt_system+0x2c4>)
 800539a:	781b      	ldrb	r3, [r3, #0]
  if (rt_exec) {
 800539c:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 80053a0:	b9db      	cbnz	r3, 80053da <protocol_exec_rt_system+0xca>
 80053a2:	7823      	ldrb	r3, [r4, #0]
      sys_rt_exec_debug = 0;
    }
  #endif

  // Reload step segment buffer
  if (sys.state & (STATE_CYCLE | STATE_HOLD | STATE_SAFETY_DOOR | STATE_HOMING | STATE_SLEEP| STATE_JOG)) {
 80053a4:	f013 0ffc 	tst.w	r3, #252	; 0xfc
 80053a8:	d103      	bne.n	80053b2 <protocol_exec_rt_system+0xa2>
 80053aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 80053ac:	f015 0fc0 	tst.w	r5, #192	; 0xc0
 80053b0:	d147      	bne.n	8005442 <protocol_exec_rt_system+0x132>
    st_prep_buffer();
  }

}
 80053b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    st_prep_buffer();
 80053b6:	f003 bbd1 	b.w	8008b5c <st_prep_buffer>
    sys.state = STATE_ALARM; // Set system alarm state
 80053ba:	2601      	movs	r6, #1
 80053bc:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 80053c0:	4c81      	ldr	r4, [pc, #516]	; (80055c8 <protocol_exec_rt_system+0x2b8>)
    report_alarm_message(rt_exec);
 80053c2:	4628      	mov	r0, r5
    if ((rt_exec == EXEC_ALARM_HARD_LIMIT) || (rt_exec == EXEC_ALARM_SOFT_LIMIT)) {
 80053c4:	3d01      	subs	r5, #1
    sys.state = STATE_ALARM; // Set system alarm state
 80053c6:	7026      	strb	r6, [r4, #0]
    report_alarm_message(rt_exec);
 80053c8:	f001 f9c4 	bl	8006754 <report_alarm_message>
    if ((rt_exec == EXEC_ALARM_HARD_LIMIT) || (rt_exec == EXEC_ALARM_SOFT_LIMIT)) {
 80053cc:	42b5      	cmp	r5, r6
 80053ce:	f240 8122 	bls.w	8005616 <protocol_exec_rt_system+0x306>
 80053d2:	4d7e      	ldr	r5, [pc, #504]	; (80055cc <protocol_exec_rt_system+0x2bc>)
    system_clear_exec_alarm(); // Clear alarm
 80053d4:	f004 fc4e 	bl	8009c74 <system_clear_exec_alarm>
 80053d8:	e7a1      	b.n	800531e <protocol_exec_rt_system+0xe>
    system_clear_exec_accessory_overrides(); // Clear all accessory override flags.
 80053da:	f004 fc6f 	bl	8009cbc <system_clear_exec_accessory_overrides>
    uint8_t last_s_override =  sys.spindle_speed_ovr;
 80053de:	7aa2      	ldrb	r2, [r4, #10]
 80053e0:	f015 0f01 	tst.w	r5, #1
 80053e4:	bf0c      	ite	eq
 80053e6:	4613      	moveq	r3, r2
 80053e8:	2364      	movne	r3, #100	; 0x64
    if (rt_exec & EXEC_SPINDLE_OVR_COARSE_PLUS) { last_s_override += SPINDLE_OVERRIDE_COARSE_INCREMENT; }
 80053ea:	07a8      	lsls	r0, r5, #30
 80053ec:	bf44      	itt	mi
 80053ee:	330a      	addmi	r3, #10
 80053f0:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_COARSE_MINUS) { last_s_override -= SPINDLE_OVERRIDE_COARSE_INCREMENT; }
 80053f2:	0769      	lsls	r1, r5, #29
 80053f4:	bf44      	itt	mi
 80053f6:	3b0a      	submi	r3, #10
 80053f8:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_FINE_PLUS) { last_s_override += SPINDLE_OVERRIDE_FINE_INCREMENT; }
 80053fa:	072f      	lsls	r7, r5, #28
 80053fc:	bf44      	itt	mi
 80053fe:	3301      	addmi	r3, #1
 8005400:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_FINE_MINUS) { last_s_override -= SPINDLE_OVERRIDE_FINE_INCREMENT; }
 8005402:	06ee      	lsls	r6, r5, #27
 8005404:	bf44      	itt	mi
 8005406:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800540a:	b2db      	uxtbmi	r3, r3
    last_s_override = max(last_s_override,MIN_SPINDLE_SPEED_OVERRIDE);
 800540c:	2bc8      	cmp	r3, #200	; 0xc8
 800540e:	bf28      	it	cs
 8005410:	23c8      	movcs	r3, #200	; 0xc8
 8005412:	2b0a      	cmp	r3, #10
 8005414:	bf38      	it	cc
 8005416:	230a      	movcc	r3, #10
    if (last_s_override != sys.spindle_speed_ovr) {
 8005418:	429a      	cmp	r2, r3
 800541a:	d006      	beq.n	800542a <protocol_exec_rt_system+0x11a>
      sys.report_ovr_counter = 0; // Set to report change immediately
 800541c:	2100      	movs	r1, #0
      bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 800541e:	7922      	ldrb	r2, [r4, #4]
      sys.spindle_speed_ovr = last_s_override;
 8005420:	72a3      	strb	r3, [r4, #10]
      bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 8005422:	f042 0308 	orr.w	r3, r2, #8
 8005426:	7123      	strb	r3, [r4, #4]
      sys.report_ovr_counter = 0; // Set to report change immediately
 8005428:	7321      	strb	r1, [r4, #12]
    if (rt_exec & EXEC_SPINDLE_OVR_STOP) {
 800542a:	06a8      	lsls	r0, r5, #26
      if (sys.state == STATE_HOLD) {
 800542c:	7823      	ldrb	r3, [r4, #0]
    if (rt_exec & EXEC_SPINDLE_OVR_STOP) {
 800542e:	d502      	bpl.n	8005436 <protocol_exec_rt_system+0x126>
      if (sys.state == STATE_HOLD) {
 8005430:	2b10      	cmp	r3, #16
 8005432:	f000 80bd 	beq.w	80055b0 <protocol_exec_rt_system+0x2a0>
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 8005436:	f015 0fc0 	tst.w	r5, #192	; 0xc0
 800543a:	d0b3      	beq.n	80053a4 <protocol_exec_rt_system+0x94>
      if ((sys.state == STATE_IDLE) || (sys.state & (STATE_CYCLE | STATE_HOLD))) {
 800543c:	2b00      	cmp	r3, #0
 800543e:	f040 80df 	bne.w	8005600 <protocol_exec_rt_system+0x2f0>
        uint8_t coolant_state = gc_state.modal.coolant;
 8005442:	4f65      	ldr	r7, [pc, #404]	; (80055d8 <protocol_exec_rt_system+0x2c8>)
          if (rt_exec & EXEC_COOLANT_MIST_OVR_TOGGLE) {
 8005444:	062a      	lsls	r2, r5, #24
        uint8_t coolant_state = gc_state.modal.coolant;
 8005446:	7a3e      	ldrb	r6, [r7, #8]
          if (rt_exec & EXEC_COOLANT_MIST_OVR_TOGGLE) {
 8005448:	f100 80f0 	bmi.w	800562c <protocol_exec_rt_system+0x31c>
          if (rt_exec & EXEC_COOLANT_FLOOD_OVR_TOGGLE) {
 800544c:	0668      	lsls	r0, r5, #25
 800544e:	d505      	bpl.n	800545c <protocol_exec_rt_system+0x14c>
            if (coolant_state & COOLANT_FLOOD_ENABLE) { bit_false(coolant_state,COOLANT_FLOOD_ENABLE); }
 8005450:	0671      	lsls	r1, r6, #25
 8005452:	bf4c      	ite	mi
 8005454:	f006 06bf 	andmi.w	r6, r6, #191	; 0xbf
            else { coolant_state |= COOLANT_FLOOD_ENABLE; }
 8005458:	f046 0640 	orrpl.w	r6, r6, #64	; 0x40
        coolant_set_state(coolant_state); // Report counter set in coolant_set_state().
 800545c:	4630      	mov	r0, r6
 800545e:	f7fc fc11 	bl	8001c84 <coolant_set_state>
 8005462:	7823      	ldrb	r3, [r4, #0]
        gc_state.modal.coolant = coolant_state;
 8005464:	723e      	strb	r6, [r7, #8]
 8005466:	e79d      	b.n	80053a4 <protocol_exec_rt_system+0x94>
    system_clear_exec_motion_overrides(); // Clear all motion override flags.
 8005468:	f004 fc20 	bl	8009cac <system_clear_exec_motion_overrides>
    uint8_t new_f_override =  sys.f_override;
 800546c:	7a21      	ldrb	r1, [r4, #8]
 800546e:	f015 0f01 	tst.w	r5, #1
 8005472:	bf0c      	ite	eq
 8005474:	460b      	moveq	r3, r1
 8005476:	2364      	movne	r3, #100	; 0x64
    if (rt_exec & EXEC_FEED_OVR_COARSE_PLUS) { new_f_override += FEED_OVERRIDE_COARSE_INCREMENT; }
 8005478:	07ae      	lsls	r6, r5, #30
 800547a:	bf44      	itt	mi
 800547c:	330a      	addmi	r3, #10
 800547e:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_FEED_OVR_COARSE_MINUS) { new_f_override -= FEED_OVERRIDE_COARSE_INCREMENT; }
 8005480:	0768      	lsls	r0, r5, #29
 8005482:	bf44      	itt	mi
 8005484:	3b0a      	submi	r3, #10
 8005486:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_FEED_OVR_FINE_PLUS) { new_f_override += FEED_OVERRIDE_FINE_INCREMENT; }
 8005488:	072f      	lsls	r7, r5, #28
 800548a:	bf44      	itt	mi
 800548c:	3301      	addmi	r3, #1
 800548e:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_FEED_OVR_FINE_MINUS) { new_f_override -= FEED_OVERRIDE_FINE_INCREMENT; }
 8005490:	06ee      	lsls	r6, r5, #27
 8005492:	bf44      	itt	mi
 8005494:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8005498:	b2db      	uxtbmi	r3, r3
    new_f_override = max(new_f_override,MIN_FEED_RATE_OVERRIDE);
 800549a:	2bc8      	cmp	r3, #200	; 0xc8
 800549c:	bf28      	it	cs
 800549e:	23c8      	movcs	r3, #200	; 0xc8
 80054a0:	2b0a      	cmp	r3, #10
 80054a2:	bf38      	it	cc
 80054a4:	230a      	movcc	r3, #10
    uint8_t new_r_override = sys.r_override;
 80054a6:	7a60      	ldrb	r0, [r4, #9]
 80054a8:	f015 0f20 	tst.w	r5, #32
 80054ac:	bf14      	ite	ne
 80054ae:	2264      	movne	r2, #100	; 0x64
 80054b0:	4602      	moveq	r2, r0
    if (rt_exec & EXEC_RAPID_OVR_MEDIUM) { new_r_override = RAPID_OVERRIDE_MEDIUM; }
 80054b2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80054b6:	bf18      	it	ne
 80054b8:	2232      	movne	r2, #50	; 0x32
    if (rt_exec & EXEC_RAPID_OVR_LOW) { new_r_override = RAPID_OVERRIDE_LOW; }
 80054ba:	f015 0f80 	tst.w	r5, #128	; 0x80
 80054be:	bf18      	it	ne
 80054c0:	2219      	movne	r2, #25
    if ((new_f_override != sys.f_override) || (new_r_override != sys.r_override)) {
 80054c2:	4299      	cmp	r1, r3
 80054c4:	d023      	beq.n	800550e <protocol_exec_rt_system+0x1fe>
      sys.report_ovr_counter = 0; // Set to report change immediately
 80054c6:	2100      	movs	r1, #0
      sys.f_override = new_f_override;
 80054c8:	7223      	strb	r3, [r4, #8]
      sys.r_override = new_r_override;
 80054ca:	7262      	strb	r2, [r4, #9]
      sys.report_ovr_counter = 0; // Set to report change immediately
 80054cc:	7321      	strb	r1, [r4, #12]
      plan_update_velocity_profile_parameters();
 80054ce:	f7ff f94f 	bl	8004770 <plan_update_velocity_profile_parameters>
      plan_cycle_reinitialize();
 80054d2:	f7ff fc49 	bl	8004d68 <plan_cycle_reinitialize>
 80054d6:	e75f      	b.n	8005398 <protocol_exec_rt_system+0x88>
      sys.abort = true;  // Only place this is set true.
 80054d8:	2301      	movs	r3, #1
 80054da:	7063      	strb	r3, [r4, #1]
      return; // Nothing else to do but exit.
 80054dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((sys.state & (STATE_HOLD|STATE_SAFETY_DOOR|STATE_SLEEP)) && !(sys.soft_limit) && !(sys.suspend & SUSPEND_JOG_CANCEL)) {
 80054de:	7823      	ldrb	r3, [r4, #0]
 80054e0:	f013 0fd0 	tst.w	r3, #208	; 0xd0
 80054e4:	d002      	beq.n	80054ec <protocol_exec_rt_system+0x1dc>
 80054e6:	78e3      	ldrb	r3, [r4, #3]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d051      	beq.n	8005590 <protocol_exec_rt_system+0x280>
        if (sys.suspend & SUSPEND_JOG_CANCEL) {   // For jog cancel, flush buffers and sync positions.
 80054ec:	78a3      	ldrb	r3, [r4, #2]
 80054ee:	061f      	lsls	r7, r3, #24
 80054f0:	d452      	bmi.n	8005598 <protocol_exec_rt_system+0x288>
        if (sys.suspend & SUSPEND_SAFETY_DOOR_AJAR) { // Only occurs when safety door opens during jog.
 80054f2:	f013 0220 	ands.w	r2, r3, #32
 80054f6:	d036      	beq.n	8005566 <protocol_exec_rt_system+0x256>
          sys.state = STATE_SAFETY_DOOR;
 80054f8:	2240      	movs	r2, #64	; 0x40
          sys.suspend &= ~(SUSPEND_JOG_CANCEL);
 80054fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
          sys.suspend |= SUSPEND_HOLD_COMPLETE;
 80054fe:	f043 0301 	orr.w	r3, r3, #1
 8005502:	70a3      	strb	r3, [r4, #2]
          sys.state = STATE_SAFETY_DOOR;
 8005504:	7022      	strb	r2, [r4, #0]
      system_clear_exec_state_flag(EXEC_CYCLE_STOP);
 8005506:	2004      	movs	r0, #4
 8005508:	f004 fba2 	bl	8009c50 <system_clear_exec_state_flag>
 800550c:	e73e      	b.n	800538c <protocol_exec_rt_system+0x7c>
    if ((new_f_override != sys.f_override) || (new_r_override != sys.r_override)) {
 800550e:	4282      	cmp	r2, r0
 8005510:	d1d9      	bne.n	80054c6 <protocol_exec_rt_system+0x1b6>
 8005512:	e741      	b.n	8005398 <protocol_exec_rt_system+0x88>
      report_realtime_status();
 8005514:	f001 feb8 	bl	8007288 <report_realtime_status>
      system_clear_exec_state_flag(EXEC_STATUS_REPORT);
 8005518:	2001      	movs	r0, #1
 800551a:	f004 fb99 	bl	8009c50 <system_clear_exec_state_flag>
 800551e:	e708      	b.n	8005332 <protocol_exec_rt_system+0x22>
        if (sys.state & (STATE_CYCLE | STATE_JOG)) {
 8005520:	f013 0f28 	tst.w	r3, #40	; 0x28
 8005524:	d122      	bne.n	800556c <protocol_exec_rt_system+0x25c>
        if (sys.state == STATE_IDLE) { sys.suspend = SUSPEND_HOLD_COMPLETE; }
 8005526:	bb33      	cbnz	r3, 8005576 <protocol_exec_rt_system+0x266>
 8005528:	2201      	movs	r2, #1
 800552a:	70a2      	strb	r2, [r4, #2]
        if (rt_exec & EXEC_MOTION_CANCEL) {
 800552c:	066a      	lsls	r2, r5, #25
 800552e:	f100 809a 	bmi.w	8005666 <protocol_exec_rt_system+0x356>
        if (rt_exec & EXEC_FEED_HOLD) {
 8005532:	072f      	lsls	r7, r5, #28
 8005534:	b26e      	sxtb	r6, r5
 8005536:	d501      	bpl.n	800553c <protocol_exec_rt_system+0x22c>
          if (!(sys.state & (STATE_SAFETY_DOOR | STATE_JOG | STATE_SLEEP))) { sys.state = STATE_HOLD; }
 8005538:	2310      	movs	r3, #16
 800553a:	7023      	strb	r3, [r4, #0]
        if (rt_exec & EXEC_SAFETY_DOOR) {
 800553c:	06a8      	lsls	r0, r5, #26
 800553e:	f57f af00 	bpl.w	8005342 <protocol_exec_rt_system+0x32>
          report_feedback_message(MESSAGE_SAFETY_DOOR_AJAR);
 8005542:	2006      	movs	r0, #6
 8005544:	f001 f91c 	bl	8006780 <report_feedback_message>
          if (!(sys.suspend & SUSPEND_JOG_CANCEL)) {
 8005548:	78a3      	ldrb	r3, [r4, #2]
 800554a:	0619      	lsls	r1, r3, #24
 800554c:	d407      	bmi.n	800555e <protocol_exec_rt_system+0x24e>
            if (sys.state == STATE_SAFETY_DOOR) {
 800554e:	7822      	ldrb	r2, [r4, #0]
 8005550:	2a40      	cmp	r2, #64	; 0x40
 8005552:	f000 80b9 	beq.w	80056c8 <protocol_exec_rt_system+0x3b8>
            if (sys.state != STATE_SLEEP) { sys.state = STATE_SAFETY_DOOR; }
 8005556:	2a80      	cmp	r2, #128	; 0x80
 8005558:	d001      	beq.n	800555e <protocol_exec_rt_system+0x24e>
 800555a:	2240      	movs	r2, #64	; 0x40
 800555c:	7022      	strb	r2, [r4, #0]
          sys.suspend |= SUSPEND_SAFETY_DOOR_AJAR;
 800555e:	f043 0320 	orr.w	r3, r3, #32
 8005562:	70a3      	strb	r3, [r4, #2]
 8005564:	e6ed      	b.n	8005342 <protocol_exec_rt_system+0x32>
          sys.suspend = SUSPEND_DISABLE;
 8005566:	70a2      	strb	r2, [r4, #2]
          sys.state = STATE_IDLE;
 8005568:	7022      	strb	r2, [r4, #0]
 800556a:	e7cc      	b.n	8005506 <protocol_exec_rt_system+0x1f6>
          if (!(sys.suspend & (SUSPEND_MOTION_CANCEL | SUSPEND_JOG_CANCEL))) { // Block, if already holding.
 800556c:	78a2      	ldrb	r2, [r4, #2]
 800556e:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 8005572:	f000 8089 	beq.w	8005688 <protocol_exec_rt_system+0x378>
 8005576:	b26a      	sxtb	r2, r5
        if (rt_exec & EXEC_MOTION_CANCEL) {
 8005578:	0668      	lsls	r0, r5, #25
 800557a:	4616      	mov	r6, r2
 800557c:	d502      	bpl.n	8005584 <protocol_exec_rt_system+0x274>
          if (!(sys.state & STATE_JOG)) { sys.suspend |= SUSPEND_MOTION_CANCEL; } // NOTE: State is STATE_CYCLE.
 800557e:	0699      	lsls	r1, r3, #26
 8005580:	f140 80aa 	bpl.w	80056d8 <protocol_exec_rt_system+0x3c8>
        if (rt_exec & EXEC_FEED_HOLD) {
 8005584:	072f      	lsls	r7, r5, #28
 8005586:	d5d9      	bpl.n	800553c <protocol_exec_rt_system+0x22c>
          if (!(sys.state & (STATE_SAFETY_DOOR | STATE_JOG | STATE_SLEEP))) { sys.state = STATE_HOLD; }
 8005588:	f013 0fe0 	tst.w	r3, #224	; 0xe0
 800558c:	d1d6      	bne.n	800553c <protocol_exec_rt_system+0x22c>
 800558e:	e7d3      	b.n	8005538 <protocol_exec_rt_system+0x228>
      if ((sys.state & (STATE_HOLD|STATE_SAFETY_DOOR|STATE_SLEEP)) && !(sys.soft_limit) && !(sys.suspend & SUSPEND_JOG_CANCEL)) {
 8005590:	f994 3002 	ldrsb.w	r3, [r4, #2]
 8005594:	2b00      	cmp	r3, #0
 8005596:	da59      	bge.n	800564c <protocol_exec_rt_system+0x33c>
          sys.step_control = STEP_CONTROL_NORMAL_OP;
 8005598:	2300      	movs	r3, #0
 800559a:	7123      	strb	r3, [r4, #4]
          plan_reset();
 800559c:	f7ff f834 	bl	8004608 <plan_reset>
          st_reset();
 80055a0:	f003 f964 	bl	800886c <st_reset>
          gc_sync_position();
 80055a4:	f7fc fc70 	bl	8001e88 <gc_sync_position>
          plan_sync_position();
 80055a8:	f7ff fbc0 	bl	8004d2c <plan_sync_position>
 80055ac:	78a3      	ldrb	r3, [r4, #2]
 80055ae:	e7a0      	b.n	80054f2 <protocol_exec_rt_system+0x1e2>
        if (!(sys.spindle_stop_ovr)) { sys.spindle_stop_ovr = SPINDLE_STOP_OVR_INITIATE; }
 80055b0:	7ae3      	ldrb	r3, [r4, #11]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d15c      	bne.n	8005670 <protocol_exec_rt_system+0x360>
 80055b6:	2302      	movs	r3, #2
 80055b8:	72e3      	strb	r3, [r4, #11]
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 80055ba:	f015 0fc0 	tst.w	r5, #192	; 0xc0
 80055be:	f47f af40 	bne.w	8005442 <protocol_exec_rt_system+0x132>
 80055c2:	e6f6      	b.n	80053b2 <protocol_exec_rt_system+0xa2>
 80055c4:	20001100 	.word	0x20001100
 80055c8:	200010c8 	.word	0x200010c8
 80055cc:	200010dd 	.word	0x200010dd
 80055d0:	200010c4 	.word	0x200010c4
 80055d4:	200010dc 	.word	0x200010dc
 80055d8:	2000102c 	.word	0x2000102c
        if ((sys.state == STATE_IDLE) || ((sys.state & STATE_HOLD) && (sys.suspend & SUSPEND_HOLD_COMPLETE))) {
 80055dc:	06da      	lsls	r2, r3, #27
 80055de:	f57f aecf 	bpl.w	8005380 <protocol_exec_rt_system+0x70>
 80055e2:	78a2      	ldrb	r2, [r4, #2]
 80055e4:	07d0      	lsls	r0, r2, #31
 80055e6:	f57f aecb 	bpl.w	8005380 <protocol_exec_rt_system+0x70>
          if (sys.state == STATE_HOLD && sys.spindle_stop_ovr) {
 80055ea:	2b10      	cmp	r3, #16
 80055ec:	f47f aebb 	bne.w	8005366 <protocol_exec_rt_system+0x56>
 80055f0:	7ae3      	ldrb	r3, [r4, #11]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	f43f aeb7 	beq.w	8005366 <protocol_exec_rt_system+0x56>
            sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE_CYCLE; // Set to restore in suspend routine and cycle start after.
 80055f8:	f043 0308 	orr.w	r3, r3, #8
 80055fc:	72e3      	strb	r3, [r4, #11]
 80055fe:	e6bf      	b.n	8005380 <protocol_exec_rt_system+0x70>
      if ((sys.state == STATE_IDLE) || (sys.state & (STATE_CYCLE | STATE_HOLD))) {
 8005600:	f013 0f18 	tst.w	r3, #24
 8005604:	f43f aece 	beq.w	80053a4 <protocol_exec_rt_system+0x94>
 8005608:	e71b      	b.n	8005442 <protocol_exec_rt_system+0x132>
        if (sys.state == STATE_ALARM) { sys.suspend |= (SUSPEND_RETRACT_COMPLETE|SUSPEND_HOLD_COMPLETE); }
 800560a:	7823      	ldrb	r3, [r4, #0]
 800560c:	2b01      	cmp	r3, #1
 800560e:	d036      	beq.n	800567e <protocol_exec_rt_system+0x36e>
        sys.state = STATE_SLEEP; 
 8005610:	2380      	movs	r3, #128	; 0x80
 8005612:	7023      	strb	r3, [r4, #0]
 8005614:	e698      	b.n	8005348 <protocol_exec_rt_system+0x38>
      report_feedback_message(MESSAGE_CRITICAL_EVENT);
 8005616:	4630      	mov	r0, r6
 8005618:	f001 f8b2 	bl	8006780 <report_feedback_message>
      system_clear_exec_state_flag(EXEC_RESET); // Disable any existing reset
 800561c:	2010      	movs	r0, #16
 800561e:	f004 fb17 	bl	8009c50 <system_clear_exec_state_flag>
 8005622:	4d2f      	ldr	r5, [pc, #188]	; (80056e0 <protocol_exec_rt_system+0x3d0>)
      } while (bit_isfalse(sys_rt_exec_state,EXEC_RESET));
 8005624:	782b      	ldrb	r3, [r5, #0]
 8005626:	06df      	lsls	r7, r3, #27
 8005628:	d5fc      	bpl.n	8005624 <protocol_exec_rt_system+0x314>
 800562a:	e6d3      	b.n	80053d4 <protocol_exec_rt_system+0xc4>
            if (coolant_state & COOLANT_MIST_ENABLE) { bit_false(coolant_state,COOLANT_MIST_ENABLE); }
 800562c:	0633      	lsls	r3, r6, #24
 800562e:	bf4c      	ite	mi
 8005630:	f006 067f 	andmi.w	r6, r6, #127	; 0x7f
            else { coolant_state |= COOLANT_MIST_ENABLE; }
 8005634:	f046 0680 	orrpl.w	r6, r6, #128	; 0x80
 8005638:	e708      	b.n	800544c <protocol_exec_rt_system+0x13c>
        if ((sys.state == STATE_SAFETY_DOOR) && !(sys.suspend & SUSPEND_SAFETY_DOOR_AJAR)) {
 800563a:	78a3      	ldrb	r3, [r4, #2]
 800563c:	f013 0220 	ands.w	r2, r3, #32
 8005640:	f47f ae9e 	bne.w	8005380 <protocol_exec_rt_system+0x70>
          if (sys.suspend & SUSPEND_RESTORE_COMPLETE) {
 8005644:	06df      	lsls	r7, r3, #27
 8005646:	d538      	bpl.n	80056ba <protocol_exec_rt_system+0x3aa>
            sys.state = STATE_IDLE; // Set to IDLE to immediately resume the cycle.
 8005648:	7022      	strb	r2, [r4, #0]
 800564a:	e68c      	b.n	8005366 <protocol_exec_rt_system+0x56>
        plan_cycle_reinitialize();
 800564c:	f7ff fb8c 	bl	8004d68 <plan_cycle_reinitialize>
        if (sys.step_control & STEP_CONTROL_EXECUTE_HOLD) { sys.suspend |= SUSPEND_HOLD_COMPLETE; }
 8005650:	7923      	ldrb	r3, [r4, #4]
 8005652:	079a      	lsls	r2, r3, #30
 8005654:	d503      	bpl.n	800565e <protocol_exec_rt_system+0x34e>
 8005656:	78a2      	ldrb	r2, [r4, #2]
 8005658:	f042 0201 	orr.w	r2, r2, #1
 800565c:	70a2      	strb	r2, [r4, #2]
        bit_false(sys.step_control,(STEP_CONTROL_EXECUTE_HOLD | STEP_CONTROL_EXECUTE_SYS_MOTION));
 800565e:	f023 0306 	bic.w	r3, r3, #6
 8005662:	7123      	strb	r3, [r4, #4]
 8005664:	e74f      	b.n	8005506 <protocol_exec_rt_system+0x1f6>
        if (rt_exec & EXEC_MOTION_CANCEL) {
 8005666:	2141      	movs	r1, #65	; 0x41
 8005668:	b26a      	sxtb	r2, r5
 800566a:	4616      	mov	r6, r2
          if (!(sys.state & STATE_JOG)) { sys.suspend |= SUSPEND_MOTION_CANCEL; } // NOTE: State is STATE_CYCLE.
 800566c:	70a1      	strb	r1, [r4, #2]
 800566e:	e789      	b.n	8005584 <protocol_exec_rt_system+0x274>
        else if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_ENABLED) { sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE; }
 8005670:	07d9      	lsls	r1, r3, #31
 8005672:	f57f ae9b 	bpl.w	80053ac <protocol_exec_rt_system+0x9c>
 8005676:	f043 0304 	orr.w	r3, r3, #4
 800567a:	72e3      	strb	r3, [r4, #11]
 800567c:	e79d      	b.n	80055ba <protocol_exec_rt_system+0x2aa>
        if (sys.state == STATE_ALARM) { sys.suspend |= (SUSPEND_RETRACT_COMPLETE|SUSPEND_HOLD_COMPLETE); }
 800567e:	78a3      	ldrb	r3, [r4, #2]
 8005680:	f043 0305 	orr.w	r3, r3, #5
 8005684:	70a3      	strb	r3, [r4, #2]
 8005686:	e7c3      	b.n	8005610 <protocol_exec_rt_system+0x300>
            st_update_plan_block_parameters(); // Notify stepper module to recompute for hold deceleration.
 8005688:	f003 fa52 	bl	8008b30 <st_update_plan_block_parameters>
            sys.step_control = STEP_CONTROL_EXECUTE_HOLD; // Initiate suspend state with active flag.
 800568c:	2202      	movs	r2, #2
            if (sys.state == STATE_JOG) { // Jog cancelled upon any hold event, except for sleeping.
 800568e:	7823      	ldrb	r3, [r4, #0]
            sys.step_control = STEP_CONTROL_EXECUTE_HOLD; // Initiate suspend state with active flag.
 8005690:	7122      	strb	r2, [r4, #4]
            if (sys.state == STATE_JOG) { // Jog cancelled upon any hold event, except for sleeping.
 8005692:	2b20      	cmp	r3, #32
 8005694:	f47f af47 	bne.w	8005526 <protocol_exec_rt_system+0x216>
              if (!(rt_exec & EXEC_SLEEP)) { sys.suspend |= SUSPEND_JOG_CANCEL; } 
 8005698:	b26e      	sxtb	r6, r5
 800569a:	2e00      	cmp	r6, #0
 800569c:	f6ff af4e 	blt.w	800553c <protocol_exec_rt_system+0x22c>
 80056a0:	78a3      	ldrb	r3, [r4, #2]
 80056a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80056a6:	70a3      	strb	r3, [r4, #2]
 80056a8:	e748      	b.n	800553c <protocol_exec_rt_system+0x22c>
              sys.state = STATE_CYCLE;
 80056aa:	2208      	movs	r2, #8
              sys.suspend = SUSPEND_DISABLE; // Break suspend state.
 80056ac:	70a3      	strb	r3, [r4, #2]
              sys.state = STATE_CYCLE;
 80056ae:	7022      	strb	r2, [r4, #0]
              st_prep_buffer(); // Initialize step segment buffer before beginning cycle.
 80056b0:	f003 fa54 	bl	8008b5c <st_prep_buffer>
              st_wake_up();
 80056b4:	f002 feb6 	bl	8008424 <st_wake_up>
 80056b8:	e662      	b.n	8005380 <protocol_exec_rt_system+0x70>
          } else if (sys.suspend & SUSPEND_RETRACT_COMPLETE) {
 80056ba:	075e      	lsls	r6, r3, #29
 80056bc:	f57f ae60 	bpl.w	8005380 <protocol_exec_rt_system+0x70>
            sys.suspend |= SUSPEND_INITIATE_RESTORE;
 80056c0:	f043 0308 	orr.w	r3, r3, #8
 80056c4:	70a3      	strb	r3, [r4, #2]
 80056c6:	e65b      	b.n	8005380 <protocol_exec_rt_system+0x70>
              if (sys.suspend & SUSPEND_INITIATE_RESTORE) { // Actively restoring
 80056c8:	071a      	lsls	r2, r3, #28
 80056ca:	f57f af46 	bpl.w	800555a <protocol_exec_rt_system+0x24a>
                sys.suspend &= ~(SUSPEND_RETRACT_COMPLETE | SUSPEND_INITIATE_RESTORE | SUSPEND_RESTORE_COMPLETE);
 80056ce:	f023 031c 	bic.w	r3, r3, #28
                sys.suspend |= SUSPEND_RESTART_RETRACT;
 80056d2:	f043 0302 	orr.w	r3, r3, #2
 80056d6:	e740      	b.n	800555a <protocol_exec_rt_system+0x24a>
 80056d8:	78a1      	ldrb	r1, [r4, #2]
 80056da:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80056de:	e7c4      	b.n	800566a <protocol_exec_rt_system+0x35a>
 80056e0:	200010dd 	.word	0x200010dd

080056e4 <protocol_exec_rt_suspend>:
// The system will enter this loop, create local variables for suspend tasks, and return to
// whatever function that invoked the suspend, such that Grbl resumes normal operation.
// This function is written in a way to promote custom parking motions. Simply use this as a
// template
static void protocol_exec_rt_suspend()
{
 80056e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056e8:	b083      	sub	sp, #12
    #ifdef USE_LINE_NUMBERS
      pl_data->line_number = PARKING_MOTION_LINE_NUMBER;
    #endif
  #endif

  plan_block_t *block = plan_get_current_block();
 80056ea:	f7fe ffcf 	bl	800468c <plan_get_current_block>
  uint8_t restore_condition;
  #ifdef VARIABLE_SPINDLE
    float restore_spindle_speed;
    if (block == NULL) {
 80056ee:	2800      	cmp	r0, #0
 80056f0:	f000 82e0 	beq.w	8005cb4 <protocol_exec_rt_suspend+0x5d0>
      restore_condition = (gc_state.modal.spindle | gc_state.modal.coolant);
      restore_spindle_speed = gc_state.spindle_speed;
    } else {
      restore_condition = block->condition;
 80056f4:	7d83      	ldrb	r3, [r0, #22]
      restore_spindle_speed = block->spindle_speed;
 80056f6:	f8d0 8034 	ldr.w	r8, [r0, #52]	; 0x34
      restore_condition = block->condition;
 80056fa:	9301      	str	r3, [sp, #4]
    }
    #ifdef DISABLE_LASER_DURING_HOLD
      if (bit_istrue(settings.flags, BITFLAG_LASER_MODE)) {
 80056fc:	4eba      	ldr	r6, [pc, #744]	; (80059e8 <protocol_exec_rt_suspend+0x304>)
 80056fe:	f896 3058 	ldrb.w	r3, [r6, #88]	; 0x58
 8005702:	079b      	lsls	r3, r3, #30
 8005704:	f100 82a7 	bmi.w	8005c56 <protocol_exec_rt_suspend+0x572>
        // NOTE: Hold ensured as completed by condition check at the beginning of suspend routine.
        if (sys.spindle_stop_ovr) {
          // Handles beginning of spindle stop
          if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_INITIATE) {
            if (gc_state.modal.spindle != SPINDLE_DISABLE) {
              spindle_set_state(SPINDLE_DISABLE,0.0f); // De-energize
 8005708:	2500      	movs	r5, #0
 800570a:	4cb8      	ldr	r4, [pc, #736]	; (80059ec <protocol_exec_rt_suspend+0x308>)
  while (sys.suspend) {
 800570c:	78a3      	ldrb	r3, [r4, #2]
 800570e:	2b00      	cmp	r3, #0
 8005710:	f000 809a 	beq.w	8005848 <protocol_exec_rt_suspend+0x164>
    if (sys.abort) { return; }
 8005714:	7862      	ldrb	r2, [r4, #1]
 8005716:	2a00      	cmp	r2, #0
 8005718:	f040 8096 	bne.w	8005848 <protocol_exec_rt_suspend+0x164>
    if (sys.suspend & SUSPEND_HOLD_COMPLETE) {
 800571c:	07df      	lsls	r7, r3, #31
 800571e:	d51a      	bpl.n	8005756 <protocol_exec_rt_suspend+0x72>
      if (sys.state & (STATE_SAFETY_DOOR | STATE_SLEEP)) {
 8005720:	7821      	ldrb	r1, [r4, #0]
 8005722:	f011 00c0 	ands.w	r0, r1, #192	; 0xc0
 8005726:	f000 8092 	beq.w	800584e <protocol_exec_rt_suspend+0x16a>
        if (bit_isfalse(sys.suspend,SUSPEND_RETRACT_COMPLETE)) {
 800572a:	f013 0b04 	ands.w	fp, r3, #4
 800572e:	f000 817c 	beq.w	8005a2a <protocol_exec_rt_suspend+0x346>
          if (sys.state == STATE_SLEEP) {
 8005732:	2980      	cmp	r1, #128	; 0x80
 8005734:	f000 82d2 	beq.w	8005cdc <protocol_exec_rt_suspend+0x5f8>
          if (sys.state == STATE_SAFETY_DOOR) {
 8005738:	2940      	cmp	r1, #64	; 0x40
 800573a:	f000 8268 	beq.w	8005c0e <protocol_exec_rt_suspend+0x52a>
          if (sys.suspend & SUSPEND_INITIATE_RESTORE) {
 800573e:	0718      	lsls	r0, r3, #28
 8005740:	d509      	bpl.n	8005756 <protocol_exec_rt_suspend+0x72>
            if (gc_state.modal.spindle != SPINDLE_DISABLE) {
 8005742:	f8df a2bc 	ldr.w	sl, [pc, #700]	; 8005a00 <protocol_exec_rt_suspend+0x31c>
 8005746:	f89a 1009 	ldrb.w	r1, [sl, #9]
 800574a:	2900      	cmp	r1, #0
 800574c:	f000 81d5 	beq.w	8005afa <protocol_exec_rt_suspend+0x416>
              if (bit_isfalse(sys.suspend,SUSPEND_RESTART_RETRACT)) {
 8005750:	0799      	lsls	r1, r3, #30
 8005752:	f140 8227 	bpl.w	8005ba4 <protocol_exec_rt_suspend+0x4c0>
  rt_exec = sys_rt_exec_alarm; // Copy volatile sys_rt_exec_alarm.
 8005756:	4ba6      	ldr	r3, [pc, #664]	; (80059f0 <protocol_exec_rt_suspend+0x30c>)
 8005758:	781b      	ldrb	r3, [r3, #0]
  if (rt_exec) { // Enter only if any bit flag is true
 800575a:	f003 0bff 	and.w	fp, r3, #255	; 0xff
 800575e:	2b00      	cmp	r3, #0
 8005760:	f040 808a 	bne.w	8005878 <protocol_exec_rt_suspend+0x194>
 8005764:	4fa3      	ldr	r7, [pc, #652]	; (80059f4 <protocol_exec_rt_suspend+0x310>)
  rt_exec = sys_rt_exec_state; // Copy volatile sys_rt_exec_state.
 8005766:	783b      	ldrb	r3, [r7, #0]
  if (rt_exec) {
 8005768:	f003 0bff 	and.w	fp, r3, #255	; 0xff
 800576c:	2b00      	cmp	r3, #0
 800576e:	d054      	beq.n	800581a <protocol_exec_rt_suspend+0x136>
    if (rt_exec & EXEC_RESET) {
 8005770:	f01b 0f10 	tst.w	fp, #16
 8005774:	f040 8126 	bne.w	80059c4 <protocol_exec_rt_suspend+0x2e0>
    if (rt_exec & EXEC_STATUS_REPORT) {
 8005778:	f01b 0f01 	tst.w	fp, #1
 800577c:	f040 8175 	bne.w	8005a6a <protocol_exec_rt_suspend+0x386>
    if (rt_exec & (EXEC_MOTION_CANCEL | EXEC_FEED_HOLD | EXEC_SAFETY_DOOR | EXEC_SLEEP)) {
 8005780:	f01b 0fe8 	tst.w	fp, #232	; 0xe8
 8005784:	d00c      	beq.n	80057a0 <protocol_exec_rt_suspend+0xbc>
      if (!(sys.state & (STATE_ALARM | STATE_CHECK_MODE))) {
 8005786:	7823      	ldrb	r3, [r4, #0]
 8005788:	0798      	lsls	r0, r3, #30
 800578a:	f000 8174 	beq.w	8005a76 <protocol_exec_rt_suspend+0x392>
 800578e:	fa4f f98b 	sxtb.w	r9, fp
      if (rt_exec & EXEC_SLEEP) {
 8005792:	f1b9 0f00 	cmp.w	r9, #0
 8005796:	f2c0 819d 	blt.w	8005ad4 <protocol_exec_rt_suspend+0x3f0>
      system_clear_exec_state_flag((EXEC_MOTION_CANCEL | EXEC_FEED_HOLD | EXEC_SAFETY_DOOR | EXEC_SLEEP));
 800579a:	20e8      	movs	r0, #232	; 0xe8
 800579c:	f004 fa58 	bl	8009c50 <system_clear_exec_state_flag>
    if (rt_exec & EXEC_CYCLE_START) {
 80057a0:	f01b 0f02 	tst.w	fp, #2
 80057a4:	d019      	beq.n	80057da <protocol_exec_rt_suspend+0xf6>
      if (!(rt_exec & (EXEC_FEED_HOLD | EXEC_MOTION_CANCEL | EXEC_SAFETY_DOOR))) {
 80057a6:	f01b 0f68 	tst.w	fp, #104	; 0x68
 80057aa:	d113      	bne.n	80057d4 <protocol_exec_rt_suspend+0xf0>
        if ((sys.state == STATE_SAFETY_DOOR) && !(sys.suspend & SUSPEND_SAFETY_DOOR_AJAR)) {
 80057ac:	7823      	ldrb	r3, [r4, #0]
 80057ae:	2b40      	cmp	r3, #64	; 0x40
 80057b0:	f000 8248 	beq.w	8005c44 <protocol_exec_rt_suspend+0x560>
        if ((sys.state == STATE_IDLE) || ((sys.state & STATE_HOLD) && (sys.suspend & SUSPEND_HOLD_COMPLETE))) {
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	f040 8202 	bne.w	8005bbe <protocol_exec_rt_suspend+0x4da>
            sys.step_control = STEP_CONTROL_NORMAL_OP; // Restore step control to normal operation
 80057ba:	2300      	movs	r3, #0
 80057bc:	7123      	strb	r3, [r4, #4]
            if (plan_get_current_block() && bit_isfalse(sys.suspend,SUSPEND_MOTION_CANCEL)) {
 80057be:	f7fe ff65 	bl	800468c <plan_get_current_block>
 80057c2:	b120      	cbz	r0, 80057ce <protocol_exec_rt_suspend+0xea>
 80057c4:	78a3      	ldrb	r3, [r4, #2]
 80057c6:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 80057ca:	f000 827c 	beq.w	8005cc6 <protocol_exec_rt_suspend+0x5e2>
              sys.suspend = SUSPEND_DISABLE; // Break suspend state.
 80057ce:	2300      	movs	r3, #0
 80057d0:	70a3      	strb	r3, [r4, #2]
              sys.state = STATE_IDLE;
 80057d2:	7023      	strb	r3, [r4, #0]
      system_clear_exec_state_flag(EXEC_CYCLE_START);
 80057d4:	2002      	movs	r0, #2
 80057d6:	f004 fa3b 	bl	8009c50 <system_clear_exec_state_flag>
    if (rt_exec & EXEC_CYCLE_STOP) {
 80057da:	f01b 0f04 	tst.w	fp, #4
 80057de:	d01c      	beq.n	800581a <protocol_exec_rt_suspend+0x136>
      if ((sys.state & (STATE_HOLD|STATE_SAFETY_DOOR|STATE_SLEEP)) && !(sys.soft_limit) && !(sys.suspend & SUSPEND_JOG_CANCEL)) {
 80057e0:	7823      	ldrb	r3, [r4, #0]
 80057e2:	f013 0fd0 	tst.w	r3, #208	; 0xd0
 80057e6:	f000 810d 	beq.w	8005a04 <protocol_exec_rt_suspend+0x320>
 80057ea:	78e3      	ldrb	r3, [r4, #3]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	f040 8109 	bne.w	8005a04 <protocol_exec_rt_suspend+0x320>
 80057f2:	f994 3002 	ldrsb.w	r3, [r4, #2]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	f2c0 81fd 	blt.w	8005bf6 <protocol_exec_rt_suspend+0x512>
        plan_cycle_reinitialize();
 80057fc:	f7ff fab4 	bl	8004d68 <plan_cycle_reinitialize>
        if (sys.step_control & STEP_CONTROL_EXECUTE_HOLD) { sys.suspend |= SUSPEND_HOLD_COMPLETE; }
 8005800:	7923      	ldrb	r3, [r4, #4]
 8005802:	079f      	lsls	r7, r3, #30
 8005804:	d503      	bpl.n	800580e <protocol_exec_rt_suspend+0x12a>
 8005806:	78a2      	ldrb	r2, [r4, #2]
 8005808:	f042 0201 	orr.w	r2, r2, #1
 800580c:	70a2      	strb	r2, [r4, #2]
        bit_false(sys.step_control,(STEP_CONTROL_EXECUTE_HOLD | STEP_CONTROL_EXECUTE_SYS_MOTION));
 800580e:	f023 0306 	bic.w	r3, r3, #6
      system_clear_exec_state_flag(EXEC_CYCLE_STOP);
 8005812:	2004      	movs	r0, #4
        bit_false(sys.step_control,(STEP_CONTROL_EXECUTE_HOLD | STEP_CONTROL_EXECUTE_SYS_MOTION));
 8005814:	7123      	strb	r3, [r4, #4]
      system_clear_exec_state_flag(EXEC_CYCLE_STOP);
 8005816:	f004 fa1b 	bl	8009c50 <system_clear_exec_state_flag>
  rt_exec = sys_rt_exec_motion_override; // Copy volatile sys_rt_exec_motion_override
 800581a:	4b77      	ldr	r3, [pc, #476]	; (80059f8 <protocol_exec_rt_suspend+0x314>)
 800581c:	781b      	ldrb	r3, [r3, #0]
  if (rt_exec) {
 800581e:	f003 0bff 	and.w	fp, r3, #255	; 0xff
 8005822:	2b00      	cmp	r3, #0
 8005824:	d136      	bne.n	8005894 <protocol_exec_rt_suspend+0x1b0>
  rt_exec = sys_rt_exec_accessory_override;
 8005826:	4b75      	ldr	r3, [pc, #468]	; (80059fc <protocol_exec_rt_suspend+0x318>)
 8005828:	781b      	ldrb	r3, [r3, #0]
  if (rt_exec) {
 800582a:	f003 0bff 	and.w	fp, r3, #255	; 0xff
 800582e:	2b00      	cmp	r3, #0
 8005830:	d174      	bne.n	800591c <protocol_exec_rt_suspend+0x238>
 8005832:	7823      	ldrb	r3, [r4, #0]
  if (sys.state & (STATE_CYCLE | STATE_HOLD | STATE_SAFETY_DOOR | STATE_HOMING | STATE_SLEEP| STATE_JOG)) {
 8005834:	f013 0ffc 	tst.w	r3, #252	; 0xfc
 8005838:	f43f af68 	beq.w	800570c <protocol_exec_rt_suspend+0x28>
    st_prep_buffer();
 800583c:	f003 f98e 	bl	8008b5c <st_prep_buffer>
  while (sys.suspend) {
 8005840:	78a3      	ldrb	r3, [r4, #2]
 8005842:	2b00      	cmp	r3, #0
 8005844:	f47f af66 	bne.w	8005714 <protocol_exec_rt_suspend+0x30>
    }

    protocol_exec_rt_system();

  }
}
 8005848:	b003      	add	sp, #12
 800584a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (sys.spindle_stop_ovr) {
 800584e:	7ae3      	ldrb	r3, [r4, #11]
 8005850:	2b00      	cmp	r3, #0
 8005852:	f000 80ba 	beq.w	80059ca <protocol_exec_rt_suspend+0x2e6>
          if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_INITIATE) {
 8005856:	079f      	lsls	r7, r3, #30
 8005858:	f140 80f7 	bpl.w	8005a4a <protocol_exec_rt_suspend+0x366>
            if (gc_state.modal.spindle != SPINDLE_DISABLE) {
 800585c:	4b68      	ldr	r3, [pc, #416]	; (8005a00 <protocol_exec_rt_suspend+0x31c>)
 800585e:	7a5b      	ldrb	r3, [r3, #9]
 8005860:	2b00      	cmp	r3, #0
 8005862:	f040 81e9 	bne.w	8005c38 <protocol_exec_rt_suspend+0x554>
              sys.spindle_stop_ovr = SPINDLE_STOP_OVR_DISABLED; // Clear stop override state
 8005866:	2300      	movs	r3, #0
 8005868:	72e3      	strb	r3, [r4, #11]
  rt_exec = sys_rt_exec_alarm; // Copy volatile sys_rt_exec_alarm.
 800586a:	4b61      	ldr	r3, [pc, #388]	; (80059f0 <protocol_exec_rt_suspend+0x30c>)
 800586c:	781b      	ldrb	r3, [r3, #0]
  if (rt_exec) { // Enter only if any bit flag is true
 800586e:	f003 0bff 	and.w	fp, r3, #255	; 0xff
 8005872:	2b00      	cmp	r3, #0
 8005874:	f43f af76 	beq.w	8005764 <protocol_exec_rt_suspend+0x80>
    sys.state = STATE_ALARM; // Set system alarm state
 8005878:	2701      	movs	r7, #1
    report_alarm_message(rt_exec);
 800587a:	4658      	mov	r0, fp
    if ((rt_exec == EXEC_ALARM_HARD_LIMIT) || (rt_exec == EXEC_ALARM_SOFT_LIMIT)) {
 800587c:	f10b 3bff 	add.w	fp, fp, #4294967295
    sys.state = STATE_ALARM; // Set system alarm state
 8005880:	7027      	strb	r7, [r4, #0]
    report_alarm_message(rt_exec);
 8005882:	f000 ff67 	bl	8006754 <report_alarm_message>
    if ((rt_exec == EXEC_ALARM_HARD_LIMIT) || (rt_exec == EXEC_ALARM_SOFT_LIMIT)) {
 8005886:	45bb      	cmp	fp, r7
 8005888:	f240 8181 	bls.w	8005b8e <protocol_exec_rt_suspend+0x4aa>
 800588c:	4f59      	ldr	r7, [pc, #356]	; (80059f4 <protocol_exec_rt_suspend+0x310>)
    system_clear_exec_alarm(); // Clear alarm
 800588e:	f004 f9f1 	bl	8009c74 <system_clear_exec_alarm>
 8005892:	e768      	b.n	8005766 <protocol_exec_rt_suspend+0x82>
    system_clear_exec_motion_overrides(); // Clear all motion override flags.
 8005894:	f004 fa0a 	bl	8009cac <system_clear_exec_motion_overrides>
    uint8_t new_f_override =  sys.f_override;
 8005898:	f01b 0f01 	tst.w	fp, #1
 800589c:	bf18      	it	ne
 800589e:	2364      	movne	r3, #100	; 0x64
 80058a0:	7a22      	ldrb	r2, [r4, #8]
    uint8_t new_r_override = sys.r_override;
 80058a2:	7a60      	ldrb	r0, [r4, #9]
    uint8_t new_f_override =  sys.f_override;
 80058a4:	bf08      	it	eq
 80058a6:	4613      	moveq	r3, r2
    if (rt_exec & EXEC_FEED_OVR_COARSE_PLUS) { new_f_override += FEED_OVERRIDE_COARSE_INCREMENT; }
 80058a8:	f01b 0f02 	tst.w	fp, #2
 80058ac:	bf1c      	itt	ne
 80058ae:	330a      	addne	r3, #10
 80058b0:	b2db      	uxtbne	r3, r3
    if (rt_exec & EXEC_FEED_OVR_COARSE_MINUS) { new_f_override -= FEED_OVERRIDE_COARSE_INCREMENT; }
 80058b2:	f01b 0f04 	tst.w	fp, #4
 80058b6:	bf1c      	itt	ne
 80058b8:	3b0a      	subne	r3, #10
 80058ba:	b2db      	uxtbne	r3, r3
    if (rt_exec & EXEC_FEED_OVR_FINE_PLUS) { new_f_override += FEED_OVERRIDE_FINE_INCREMENT; }
 80058bc:	f01b 0f08 	tst.w	fp, #8
 80058c0:	bf1c      	itt	ne
 80058c2:	3301      	addne	r3, #1
 80058c4:	b2db      	uxtbne	r3, r3
    if (rt_exec & EXEC_FEED_OVR_FINE_MINUS) { new_f_override -= FEED_OVERRIDE_FINE_INCREMENT; }
 80058c6:	f01b 0f10 	tst.w	fp, #16
 80058ca:	bf1c      	itt	ne
 80058cc:	f103 33ff 	addne.w	r3, r3, #4294967295
 80058d0:	b2db      	uxtbne	r3, r3
    new_f_override = max(new_f_override,MIN_FEED_RATE_OVERRIDE);
 80058d2:	2bc8      	cmp	r3, #200	; 0xc8
 80058d4:	bf28      	it	cs
 80058d6:	23c8      	movcs	r3, #200	; 0xc8
 80058d8:	2b0a      	cmp	r3, #10
 80058da:	bf38      	it	cc
 80058dc:	230a      	movcc	r3, #10
    uint8_t new_r_override = sys.r_override;
 80058de:	f01b 0f20 	tst.w	fp, #32
 80058e2:	bf14      	ite	ne
 80058e4:	2164      	movne	r1, #100	; 0x64
 80058e6:	4601      	moveq	r1, r0
    if (rt_exec & EXEC_RAPID_OVR_MEDIUM) { new_r_override = RAPID_OVERRIDE_MEDIUM; }
 80058e8:	f01b 0f40 	tst.w	fp, #64	; 0x40
 80058ec:	bf18      	it	ne
 80058ee:	2132      	movne	r1, #50	; 0x32
    if (rt_exec & EXEC_RAPID_OVR_LOW) { new_r_override = RAPID_OVERRIDE_LOW; }
 80058f0:	f01b 0f80 	tst.w	fp, #128	; 0x80
 80058f4:	bf18      	it	ne
 80058f6:	2119      	movne	r1, #25
    if ((new_f_override != sys.f_override) || (new_r_override != sys.r_override)) {
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d101      	bne.n	8005900 <protocol_exec_rt_suspend+0x21c>
 80058fc:	4288      	cmp	r0, r1
 80058fe:	d092      	beq.n	8005826 <protocol_exec_rt_suspend+0x142>
      sys.report_ovr_counter = 0; // Set to report change immediately
 8005900:	2200      	movs	r2, #0
      sys.f_override = new_f_override;
 8005902:	7223      	strb	r3, [r4, #8]
      sys.r_override = new_r_override;
 8005904:	7261      	strb	r1, [r4, #9]
      sys.report_ovr_counter = 0; // Set to report change immediately
 8005906:	7322      	strb	r2, [r4, #12]
      plan_update_velocity_profile_parameters();
 8005908:	f7fe ff32 	bl	8004770 <plan_update_velocity_profile_parameters>
      plan_cycle_reinitialize();
 800590c:	f7ff fa2c 	bl	8004d68 <plan_cycle_reinitialize>
  rt_exec = sys_rt_exec_accessory_override;
 8005910:	4b3a      	ldr	r3, [pc, #232]	; (80059fc <protocol_exec_rt_suspend+0x318>)
 8005912:	781b      	ldrb	r3, [r3, #0]
  if (rt_exec) {
 8005914:	f003 0bff 	and.w	fp, r3, #255	; 0xff
 8005918:	2b00      	cmp	r3, #0
 800591a:	d08a      	beq.n	8005832 <protocol_exec_rt_suspend+0x14e>
    system_clear_exec_accessory_overrides(); // Clear all accessory override flags.
 800591c:	f004 f9ce 	bl	8009cbc <system_clear_exec_accessory_overrides>
    uint8_t last_s_override =  sys.spindle_speed_ovr;
 8005920:	f01b 0f01 	tst.w	fp, #1
 8005924:	bf18      	it	ne
 8005926:	2364      	movne	r3, #100	; 0x64
 8005928:	7aa2      	ldrb	r2, [r4, #10]
 800592a:	bf08      	it	eq
 800592c:	4613      	moveq	r3, r2
    if (rt_exec & EXEC_SPINDLE_OVR_COARSE_PLUS) { last_s_override += SPINDLE_OVERRIDE_COARSE_INCREMENT; }
 800592e:	f01b 0f02 	tst.w	fp, #2
 8005932:	bf1c      	itt	ne
 8005934:	330a      	addne	r3, #10
 8005936:	b2db      	uxtbne	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_COARSE_MINUS) { last_s_override -= SPINDLE_OVERRIDE_COARSE_INCREMENT; }
 8005938:	f01b 0f04 	tst.w	fp, #4
 800593c:	bf1c      	itt	ne
 800593e:	3b0a      	subne	r3, #10
 8005940:	b2db      	uxtbne	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_FINE_PLUS) { last_s_override += SPINDLE_OVERRIDE_FINE_INCREMENT; }
 8005942:	f01b 0f08 	tst.w	fp, #8
 8005946:	bf1c      	itt	ne
 8005948:	3301      	addne	r3, #1
 800594a:	b2db      	uxtbne	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_FINE_MINUS) { last_s_override -= SPINDLE_OVERRIDE_FINE_INCREMENT; }
 800594c:	f01b 0f10 	tst.w	fp, #16
 8005950:	bf1c      	itt	ne
 8005952:	f103 33ff 	addne.w	r3, r3, #4294967295
 8005956:	b2db      	uxtbne	r3, r3
    last_s_override = max(last_s_override,MIN_SPINDLE_SPEED_OVERRIDE);
 8005958:	2bc8      	cmp	r3, #200	; 0xc8
 800595a:	bf28      	it	cs
 800595c:	23c8      	movcs	r3, #200	; 0xc8
 800595e:	2b0a      	cmp	r3, #10
 8005960:	bf38      	it	cc
 8005962:	230a      	movcc	r3, #10
    if (last_s_override != sys.spindle_speed_ovr) {
 8005964:	429a      	cmp	r2, r3
 8005966:	d006      	beq.n	8005976 <protocol_exec_rt_suspend+0x292>
      sys.report_ovr_counter = 0; // Set to report change immediately
 8005968:	2100      	movs	r1, #0
      bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 800596a:	7922      	ldrb	r2, [r4, #4]
      sys.spindle_speed_ovr = last_s_override;
 800596c:	72a3      	strb	r3, [r4, #10]
      bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 800596e:	f042 0308 	orr.w	r3, r2, #8
 8005972:	7123      	strb	r3, [r4, #4]
      sys.report_ovr_counter = 0; // Set to report change immediately
 8005974:	7321      	strb	r1, [r4, #12]
    if (rt_exec & EXEC_SPINDLE_OVR_STOP) {
 8005976:	f01b 0f20 	tst.w	fp, #32
      if (sys.state == STATE_HOLD) {
 800597a:	7823      	ldrb	r3, [r4, #0]
    if (rt_exec & EXEC_SPINDLE_OVR_STOP) {
 800597c:	d002      	beq.n	8005984 <protocol_exec_rt_suspend+0x2a0>
      if (sys.state == STATE_HOLD) {
 800597e:	2b10      	cmp	r3, #16
 8005980:	f000 814f 	beq.w	8005c22 <protocol_exec_rt_suspend+0x53e>
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 8005984:	f01b 0fc0 	tst.w	fp, #192	; 0xc0
 8005988:	f43f af54 	beq.w	8005834 <protocol_exec_rt_suspend+0x150>
      if ((sys.state == STATE_IDLE) || (sys.state & (STATE_CYCLE | STATE_HOLD))) {
 800598c:	2b00      	cmp	r3, #0
 800598e:	f040 80d6 	bne.w	8005b3e <protocol_exec_rt_suspend+0x45a>
        uint8_t coolant_state = gc_state.modal.coolant;
 8005992:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8005a00 <protocol_exec_rt_suspend+0x31c>
          if (rt_exec & EXEC_COOLANT_MIST_OVR_TOGGLE) {
 8005996:	f01b 0f80 	tst.w	fp, #128	; 0x80
        uint8_t coolant_state = gc_state.modal.coolant;
 800599a:	f89a 9008 	ldrb.w	r9, [sl, #8]
          if (rt_exec & EXEC_COOLANT_MIST_OVR_TOGGLE) {
 800599e:	f040 80da 	bne.w	8005b56 <protocol_exec_rt_suspend+0x472>
          if (rt_exec & EXEC_COOLANT_FLOOD_OVR_TOGGLE) {
 80059a2:	f01b 0f40 	tst.w	fp, #64	; 0x40
 80059a6:	d006      	beq.n	80059b6 <protocol_exec_rt_suspend+0x2d2>
            if (coolant_state & COOLANT_FLOOD_ENABLE) { bit_false(coolant_state,COOLANT_FLOOD_ENABLE); }
 80059a8:	f019 0f40 	tst.w	r9, #64	; 0x40
 80059ac:	bf14      	ite	ne
 80059ae:	f009 09bf 	andne.w	r9, r9, #191	; 0xbf
            else { coolant_state |= COOLANT_FLOOD_ENABLE; }
 80059b2:	f049 0940 	orreq.w	r9, r9, #64	; 0x40
        coolant_set_state(coolant_state); // Report counter set in coolant_set_state().
 80059b6:	4648      	mov	r0, r9
 80059b8:	f7fc f964 	bl	8001c84 <coolant_set_state>
 80059bc:	7823      	ldrb	r3, [r4, #0]
        gc_state.modal.coolant = coolant_state;
 80059be:	f88a 9008 	strb.w	r9, [sl, #8]
 80059c2:	e737      	b.n	8005834 <protocol_exec_rt_suspend+0x150>
      sys.abort = true;  // Only place this is set true.
 80059c4:	2301      	movs	r3, #1
 80059c6:	7063      	strb	r3, [r4, #1]
 80059c8:	e6a0      	b.n	800570c <protocol_exec_rt_suspend+0x28>
          if (bit_istrue(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM)) {
 80059ca:	7923      	ldrb	r3, [r4, #4]
 80059cc:	071a      	lsls	r2, r3, #28
 80059ce:	f57f aec2 	bpl.w	8005756 <protocol_exec_rt_suspend+0x72>
            spindle_set_state((restore_condition & (PL_COND_FLAG_SPINDLE_CW | PL_COND_FLAG_SPINDLE_CCW)), restore_spindle_speed);
 80059d2:	9b01      	ldr	r3, [sp, #4]
 80059d4:	4641      	mov	r1, r8
 80059d6:	f003 0030 	and.w	r0, r3, #48	; 0x30
 80059da:	f002 fbe3 	bl	80081a4 <spindle_set_state>
            bit_false(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 80059de:	7923      	ldrb	r3, [r4, #4]
 80059e0:	f023 0308 	bic.w	r3, r3, #8
 80059e4:	7123      	strb	r3, [r4, #4]
 80059e6:	e6b6      	b.n	8005756 <protocol_exec_rt_suspend+0x72>
 80059e8:	20001404 	.word	0x20001404
 80059ec:	200010c8 	.word	0x200010c8
 80059f0:	20001100 	.word	0x20001100
 80059f4:	200010dd 	.word	0x200010dd
 80059f8:	200010c4 	.word	0x200010c4
 80059fc:	200010dc 	.word	0x200010dc
 8005a00:	2000102c 	.word	0x2000102c
        if (sys.suspend & SUSPEND_JOG_CANCEL) {   // For jog cancel, flush buffers and sync positions.
 8005a04:	78a3      	ldrb	r3, [r4, #2]
 8005a06:	0618      	lsls	r0, r3, #24
 8005a08:	f100 80f5 	bmi.w	8005bf6 <protocol_exec_rt_suspend+0x512>
        if (sys.suspend & SUSPEND_SAFETY_DOOR_AJAR) { // Only occurs when safety door opens during jog.
 8005a0c:	f013 0220 	ands.w	r2, r3, #32
 8005a10:	f000 8092 	beq.w	8005b38 <protocol_exec_rt_suspend+0x454>
          sys.state = STATE_SAFETY_DOOR;
 8005a14:	2240      	movs	r2, #64	; 0x40
          sys.suspend &= ~(SUSPEND_JOG_CANCEL);
 8005a16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
          sys.suspend |= SUSPEND_HOLD_COMPLETE;
 8005a1a:	f043 0301 	orr.w	r3, r3, #1
 8005a1e:	70a3      	strb	r3, [r4, #2]
          sys.state = STATE_SAFETY_DOOR;
 8005a20:	7022      	strb	r2, [r4, #0]
      system_clear_exec_state_flag(EXEC_CYCLE_STOP);
 8005a22:	2004      	movs	r0, #4
 8005a24:	f004 f914 	bl	8009c50 <system_clear_exec_state_flag>
 8005a28:	e6f7      	b.n	800581a <protocol_exec_rt_suspend+0x136>
            spindle_set_state(SPINDLE_DISABLE,0.0f); // De-energize
 8005a2a:	4629      	mov	r1, r5
 8005a2c:	4658      	mov	r0, fp
          sys.spindle_stop_ovr = SPINDLE_STOP_OVR_DISABLED;
 8005a2e:	f884 b00b 	strb.w	fp, [r4, #11]
            spindle_set_state(SPINDLE_DISABLE,0.0f); // De-energize
 8005a32:	f002 fbb7 	bl	80081a4 <spindle_set_state>
            coolant_set_state(COOLANT_DISABLE);     // De-energize
 8005a36:	4658      	mov	r0, fp
 8005a38:	f7fc f924 	bl	8001c84 <coolant_set_state>
          sys.suspend &= ~(SUSPEND_RESTART_RETRACT);
 8005a3c:	78a3      	ldrb	r3, [r4, #2]
 8005a3e:	f023 0302 	bic.w	r3, r3, #2
          sys.suspend |= SUSPEND_RETRACT_COMPLETE;
 8005a42:	f043 0304 	orr.w	r3, r3, #4
 8005a46:	70a3      	strb	r3, [r4, #2]
 8005a48:	e685      	b.n	8005756 <protocol_exec_rt_suspend+0x72>
          } else if (sys.spindle_stop_ovr & (SPINDLE_STOP_OVR_RESTORE | SPINDLE_STOP_OVR_RESTORE_CYCLE)) {
 8005a4a:	f013 0f0c 	tst.w	r3, #12
 8005a4e:	f43f ae82 	beq.w	8005756 <protocol_exec_rt_suspend+0x72>
            if (gc_state.modal.spindle != SPINDLE_DISABLE) {
 8005a52:	4abe      	ldr	r2, [pc, #760]	; (8005d4c <protocol_exec_rt_suspend+0x668>)
 8005a54:	7a52      	ldrb	r2, [r2, #9]
 8005a56:	2a00      	cmp	r2, #0
 8005a58:	f040 810d 	bne.w	8005c76 <protocol_exec_rt_suspend+0x592>
            if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_RESTORE_CYCLE) {
 8005a5c:	0719      	lsls	r1, r3, #28
 8005a5e:	f57f af02 	bpl.w	8005866 <protocol_exec_rt_suspend+0x182>
              system_set_exec_state_flag(EXEC_CYCLE_START);  // Set to resume program.
 8005a62:	2002      	movs	r0, #2
 8005a64:	f004 f8ea 	bl	8009c3c <system_set_exec_state_flag>
 8005a68:	e6fd      	b.n	8005866 <protocol_exec_rt_suspend+0x182>
      report_realtime_status();
 8005a6a:	f001 fc0d 	bl	8007288 <report_realtime_status>
      system_clear_exec_state_flag(EXEC_STATUS_REPORT);
 8005a6e:	2001      	movs	r0, #1
 8005a70:	f004 f8ee 	bl	8009c50 <system_clear_exec_state_flag>
 8005a74:	e684      	b.n	8005780 <protocol_exec_rt_suspend+0x9c>
        if (sys.state & (STATE_CYCLE | STATE_JOG)) {
 8005a76:	f013 0f28 	tst.w	r3, #40	; 0x28
 8005a7a:	d07c      	beq.n	8005b76 <protocol_exec_rt_suspend+0x492>
          if (!(sys.suspend & (SUSPEND_MOTION_CANCEL | SUSPEND_JOG_CANCEL))) { // Block, if already holding.
 8005a7c:	78a2      	ldrb	r2, [r4, #2]
 8005a7e:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 8005a82:	d070      	beq.n	8005b66 <protocol_exec_rt_suspend+0x482>
        if (rt_exec & EXEC_MOTION_CANCEL) {
 8005a84:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8005a88:	fa4f f98b 	sxtb.w	r9, fp
 8005a8c:	d002      	beq.n	8005a94 <protocol_exec_rt_suspend+0x3b0>
          if (!(sys.state & STATE_JOG)) { sys.suspend |= SUSPEND_MOTION_CANCEL; } // NOTE: State is STATE_CYCLE.
 8005a8e:	0699      	lsls	r1, r3, #26
 8005a90:	f140 8157 	bpl.w	8005d42 <protocol_exec_rt_suspend+0x65e>
        if (rt_exec & EXEC_FEED_HOLD) {
 8005a94:	f01b 0f08 	tst.w	fp, #8
 8005a98:	d003      	beq.n	8005aa2 <protocol_exec_rt_suspend+0x3be>
          if (!(sys.state & (STATE_SAFETY_DOOR | STATE_JOG | STATE_SLEEP))) { sys.state = STATE_HOLD; }
 8005a9a:	f013 0fe0 	tst.w	r3, #224	; 0xe0
 8005a9e:	f000 80a7 	beq.w	8005bf0 <protocol_exec_rt_suspend+0x50c>
        if (rt_exec & EXEC_SAFETY_DOOR) {
 8005aa2:	f01b 0f20 	tst.w	fp, #32
 8005aa6:	f43f ae74 	beq.w	8005792 <protocol_exec_rt_suspend+0xae>
          report_feedback_message(MESSAGE_SAFETY_DOOR_AJAR);
 8005aaa:	2006      	movs	r0, #6
 8005aac:	f000 fe68 	bl	8006780 <report_feedback_message>
          if (!(sys.suspend & SUSPEND_JOG_CANCEL)) {
 8005ab0:	78a3      	ldrb	r3, [r4, #2]
 8005ab2:	061a      	lsls	r2, r3, #24
 8005ab4:	d407      	bmi.n	8005ac6 <protocol_exec_rt_suspend+0x3e2>
            if (sys.state == STATE_SAFETY_DOOR) {
 8005ab6:	7821      	ldrb	r1, [r4, #0]
 8005ab8:	2940      	cmp	r1, #64	; 0x40
 8005aba:	f000 80f3 	beq.w	8005ca4 <protocol_exec_rt_suspend+0x5c0>
            if (sys.state != STATE_SLEEP) { sys.state = STATE_SAFETY_DOOR; }
 8005abe:	2980      	cmp	r1, #128	; 0x80
 8005ac0:	d001      	beq.n	8005ac6 <protocol_exec_rt_suspend+0x3e2>
 8005ac2:	2140      	movs	r1, #64	; 0x40
 8005ac4:	7021      	strb	r1, [r4, #0]
          sys.suspend |= SUSPEND_SAFETY_DOOR_AJAR;
 8005ac6:	f043 0320 	orr.w	r3, r3, #32
      if (rt_exec & EXEC_SLEEP) {
 8005aca:	f1b9 0f00 	cmp.w	r9, #0
          sys.suspend |= SUSPEND_SAFETY_DOOR_AJAR;
 8005ace:	70a3      	strb	r3, [r4, #2]
      if (rt_exec & EXEC_SLEEP) {
 8005ad0:	f6bf ae63 	bge.w	800579a <protocol_exec_rt_suspend+0xb6>
        if (sys.state == STATE_ALARM) { sys.suspend |= (SUSPEND_RETRACT_COMPLETE|SUSPEND_HOLD_COMPLETE); }
 8005ad4:	7823      	ldrb	r3, [r4, #0]
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	f000 80dd 	beq.w	8005c96 <protocol_exec_rt_suspend+0x5b2>
        sys.state = STATE_SLEEP; 
 8005adc:	2380      	movs	r3, #128	; 0x80
 8005ade:	7023      	strb	r3, [r4, #0]
 8005ae0:	e65b      	b.n	800579a <protocol_exec_rt_suspend+0xb6>
                  spindle_set_state((restore_condition & (PL_COND_FLAG_SPINDLE_CW | PL_COND_FLAG_SPINDLE_CCW)), restore_spindle_speed);
 8005ae2:	9b01      	ldr	r3, [sp, #4]
 8005ae4:	4641      	mov	r1, r8
 8005ae6:	f003 0030 	and.w	r0, r3, #48	; 0x30
 8005aea:	f002 fb5b 	bl	80081a4 <spindle_set_state>
                  delay_sec(SAFETY_DOOR_SPINDLE_DELAY, DELAY_MODE_SYS_SUSPEND);
 8005aee:	2101      	movs	r1, #1
 8005af0:	f04f 4081 	mov.w	r0, #1082130432	; 0x40800000
 8005af4:	f7fe fb74 	bl	80041e0 <delay_sec>
 8005af8:	78a3      	ldrb	r3, [r4, #2]
            if (gc_state.modal.coolant != COOLANT_DISABLE) {
 8005afa:	f89a 2008 	ldrb.w	r2, [sl, #8]
 8005afe:	f003 0102 	and.w	r1, r3, #2
 8005b02:	b17a      	cbz	r2, 8005b24 <protocol_exec_rt_suspend+0x440>
              if (bit_isfalse(sys.suspend,SUSPEND_RESTART_RETRACT)) {
 8005b04:	2900      	cmp	r1, #0
 8005b06:	f47f ae26 	bne.w	8005756 <protocol_exec_rt_suspend+0x72>
                coolant_set_state((restore_condition & (PL_COND_FLAG_COOLANT_FLOOD | PL_COND_FLAG_COOLANT_FLOOD)));
 8005b0a:	9b01      	ldr	r3, [sp, #4]
 8005b0c:	f003 0040 	and.w	r0, r3, #64	; 0x40
 8005b10:	f7fc f8b8 	bl	8001c84 <coolant_set_state>
                delay_sec(SAFETY_DOOR_COOLANT_DELAY, DELAY_MODE_SYS_SUSPEND);
 8005b14:	2101      	movs	r1, #1
 8005b16:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8005b1a:	f7fe fb61 	bl	80041e0 <delay_sec>
 8005b1e:	78a3      	ldrb	r3, [r4, #2]
 8005b20:	f003 0102 	and.w	r1, r3, #2
            if (bit_isfalse(sys.suspend,SUSPEND_RESTART_RETRACT)) {
 8005b24:	2900      	cmp	r1, #0
 8005b26:	f47f ae16 	bne.w	8005756 <protocol_exec_rt_suspend+0x72>
              sys.suspend |= SUSPEND_RESTORE_COMPLETE;
 8005b2a:	f043 0310 	orr.w	r3, r3, #16
              system_set_exec_state_flag(EXEC_CYCLE_START); // Set to resume program.
 8005b2e:	2002      	movs	r0, #2
              sys.suspend |= SUSPEND_RESTORE_COMPLETE;
 8005b30:	70a3      	strb	r3, [r4, #2]
              system_set_exec_state_flag(EXEC_CYCLE_START); // Set to resume program.
 8005b32:	f004 f883 	bl	8009c3c <system_set_exec_state_flag>
 8005b36:	e60e      	b.n	8005756 <protocol_exec_rt_suspend+0x72>
          sys.suspend = SUSPEND_DISABLE;
 8005b38:	70a2      	strb	r2, [r4, #2]
          sys.state = STATE_IDLE;
 8005b3a:	7022      	strb	r2, [r4, #0]
 8005b3c:	e771      	b.n	8005a22 <protocol_exec_rt_suspend+0x33e>
      if ((sys.state == STATE_IDLE) || (sys.state & (STATE_CYCLE | STATE_HOLD))) {
 8005b3e:	f013 0f18 	tst.w	r3, #24
 8005b42:	f43f ae77 	beq.w	8005834 <protocol_exec_rt_suspend+0x150>
        uint8_t coolant_state = gc_state.modal.coolant;
 8005b46:	f8df a204 	ldr.w	sl, [pc, #516]	; 8005d4c <protocol_exec_rt_suspend+0x668>
          if (rt_exec & EXEC_COOLANT_MIST_OVR_TOGGLE) {
 8005b4a:	f01b 0f80 	tst.w	fp, #128	; 0x80
        uint8_t coolant_state = gc_state.modal.coolant;
 8005b4e:	f89a 9008 	ldrb.w	r9, [sl, #8]
          if (rt_exec & EXEC_COOLANT_MIST_OVR_TOGGLE) {
 8005b52:	f43f af26 	beq.w	80059a2 <protocol_exec_rt_suspend+0x2be>
            if (coolant_state & COOLANT_MIST_ENABLE) { bit_false(coolant_state,COOLANT_MIST_ENABLE); }
 8005b56:	f019 0f80 	tst.w	r9, #128	; 0x80
 8005b5a:	bf14      	ite	ne
 8005b5c:	f009 097f 	andne.w	r9, r9, #127	; 0x7f
            else { coolant_state |= COOLANT_MIST_ENABLE; }
 8005b60:	f049 0980 	orreq.w	r9, r9, #128	; 0x80
 8005b64:	e71d      	b.n	80059a2 <protocol_exec_rt_suspend+0x2be>
            st_update_plan_block_parameters(); // Notify stepper module to recompute for hold deceleration.
 8005b66:	f002 ffe3 	bl	8008b30 <st_update_plan_block_parameters>
            sys.step_control = STEP_CONTROL_EXECUTE_HOLD; // Initiate suspend state with active flag.
 8005b6a:	2202      	movs	r2, #2
            if (sys.state == STATE_JOG) { // Jog cancelled upon any hold event, except for sleeping.
 8005b6c:	7823      	ldrb	r3, [r4, #0]
            sys.step_control = STEP_CONTROL_EXECUTE_HOLD; // Initiate suspend state with active flag.
 8005b6e:	7122      	strb	r2, [r4, #4]
            if (sys.state == STATE_JOG) { // Jog cancelled upon any hold event, except for sleeping.
 8005b70:	2b20      	cmp	r3, #32
 8005b72:	f000 80db 	beq.w	8005d2c <protocol_exec_rt_suspend+0x648>
        if (sys.state == STATE_IDLE) { sys.suspend = SUSPEND_HOLD_COMPLETE; }
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d184      	bne.n	8005a84 <protocol_exec_rt_suspend+0x3a0>
 8005b7a:	2201      	movs	r2, #1
        if (rt_exec & EXEC_MOTION_CANCEL) {
 8005b7c:	f01b 0f40 	tst.w	fp, #64	; 0x40
        if (sys.state == STATE_IDLE) { sys.suspend = SUSPEND_HOLD_COMPLETE; }
 8005b80:	70a2      	strb	r2, [r4, #2]
 8005b82:	fa4f f98b 	sxtb.w	r9, fp
        if (rt_exec & EXEC_MOTION_CANCEL) {
 8005b86:	d02f      	beq.n	8005be8 <protocol_exec_rt_suspend+0x504>
 8005b88:	2141      	movs	r1, #65	; 0x41
          if (!(sys.state & STATE_JOG)) { sys.suspend |= SUSPEND_MOTION_CANCEL; } // NOTE: State is STATE_CYCLE.
 8005b8a:	70a1      	strb	r1, [r4, #2]
 8005b8c:	e782      	b.n	8005a94 <protocol_exec_rt_suspend+0x3b0>
      report_feedback_message(MESSAGE_CRITICAL_EVENT);
 8005b8e:	4638      	mov	r0, r7
 8005b90:	f000 fdf6 	bl	8006780 <report_feedback_message>
      system_clear_exec_state_flag(EXEC_RESET); // Disable any existing reset
 8005b94:	2010      	movs	r0, #16
 8005b96:	f004 f85b 	bl	8009c50 <system_clear_exec_state_flag>
 8005b9a:	4f6d      	ldr	r7, [pc, #436]	; (8005d50 <protocol_exec_rt_suspend+0x66c>)
      } while (bit_isfalse(sys_rt_exec_state,EXEC_RESET));
 8005b9c:	783b      	ldrb	r3, [r7, #0]
 8005b9e:	06db      	lsls	r3, r3, #27
 8005ba0:	d5fc      	bpl.n	8005b9c <protocol_exec_rt_suspend+0x4b8>
 8005ba2:	e674      	b.n	800588e <protocol_exec_rt_suspend+0x1aa>
                if (bit_istrue(settings.flags,BITFLAG_LASER_MODE)) {
 8005ba4:	f896 1058 	ldrb.w	r1, [r6, #88]	; 0x58
 8005ba8:	078a      	lsls	r2, r1, #30
 8005baa:	d59a      	bpl.n	8005ae2 <protocol_exec_rt_suspend+0x3fe>
                  bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 8005bac:	7921      	ldrb	r1, [r4, #4]
            if (gc_state.modal.coolant != COOLANT_DISABLE) {
 8005bae:	f89a 0008 	ldrb.w	r0, [sl, #8]
                  bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 8005bb2:	f041 0208 	orr.w	r2, r1, #8
 8005bb6:	7122      	strb	r2, [r4, #4]
            if (gc_state.modal.coolant != COOLANT_DISABLE) {
 8005bb8:	2800      	cmp	r0, #0
 8005bba:	d0b6      	beq.n	8005b2a <protocol_exec_rt_suspend+0x446>
 8005bbc:	e7a5      	b.n	8005b0a <protocol_exec_rt_suspend+0x426>
        if ((sys.state == STATE_IDLE) || ((sys.state & STATE_HOLD) && (sys.suspend & SUSPEND_HOLD_COMPLETE))) {
 8005bbe:	06da      	lsls	r2, r3, #27
 8005bc0:	f57f ae08 	bpl.w	80057d4 <protocol_exec_rt_suspend+0xf0>
 8005bc4:	78a2      	ldrb	r2, [r4, #2]
 8005bc6:	07d2      	lsls	r2, r2, #31
 8005bc8:	f57f ae04 	bpl.w	80057d4 <protocol_exec_rt_suspend+0xf0>
          if (sys.state == STATE_HOLD && sys.spindle_stop_ovr) {
 8005bcc:	2b10      	cmp	r3, #16
 8005bce:	f47f adf4 	bne.w	80057ba <protocol_exec_rt_suspend+0xd6>
 8005bd2:	7ae3      	ldrb	r3, [r4, #11]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	f43f adf0 	beq.w	80057ba <protocol_exec_rt_suspend+0xd6>
            sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE_CYCLE; // Set to restore in suspend routine and cycle start after.
 8005bda:	f043 0308 	orr.w	r3, r3, #8
      system_clear_exec_state_flag(EXEC_CYCLE_START);
 8005bde:	2002      	movs	r0, #2
            sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE_CYCLE; // Set to restore in suspend routine and cycle start after.
 8005be0:	72e3      	strb	r3, [r4, #11]
      system_clear_exec_state_flag(EXEC_CYCLE_START);
 8005be2:	f004 f835 	bl	8009c50 <system_clear_exec_state_flag>
 8005be6:	e5f8      	b.n	80057da <protocol_exec_rt_suspend+0xf6>
        if (rt_exec & EXEC_FEED_HOLD) {
 8005be8:	f01b 0f08 	tst.w	fp, #8
 8005bec:	f43f af59 	beq.w	8005aa2 <protocol_exec_rt_suspend+0x3be>
          if (!(sys.state & (STATE_SAFETY_DOOR | STATE_JOG | STATE_SLEEP))) { sys.state = STATE_HOLD; }
 8005bf0:	2310      	movs	r3, #16
 8005bf2:	7023      	strb	r3, [r4, #0]
 8005bf4:	e755      	b.n	8005aa2 <protocol_exec_rt_suspend+0x3be>
          sys.step_control = STEP_CONTROL_NORMAL_OP;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	7123      	strb	r3, [r4, #4]
          plan_reset();
 8005bfa:	f7fe fd05 	bl	8004608 <plan_reset>
          st_reset();
 8005bfe:	f002 fe35 	bl	800886c <st_reset>
          gc_sync_position();
 8005c02:	f7fc f941 	bl	8001e88 <gc_sync_position>
          plan_sync_position();
 8005c06:	f7ff f891 	bl	8004d2c <plan_sync_position>
 8005c0a:	78a3      	ldrb	r3, [r4, #2]
 8005c0c:	e6fe      	b.n	8005a0c <protocol_exec_rt_suspend+0x328>
            if (!(system_check_safety_door_ajar())) {
 8005c0e:	f003 fda7 	bl	8009760 <system_check_safety_door_ajar>
              sys.suspend &= ~(SUSPEND_SAFETY_DOOR_AJAR); // Reset door ajar flag to denote ready to resume.
 8005c12:	78a3      	ldrb	r3, [r4, #2]
            if (!(system_check_safety_door_ajar())) {
 8005c14:	2800      	cmp	r0, #0
 8005c16:	f47f ad92 	bne.w	800573e <protocol_exec_rt_suspend+0x5a>
              sys.suspend &= ~(SUSPEND_SAFETY_DOOR_AJAR); // Reset door ajar flag to denote ready to resume.
 8005c1a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005c1e:	70a3      	strb	r3, [r4, #2]
 8005c20:	e58d      	b.n	800573e <protocol_exec_rt_suspend+0x5a>
        if (!(sys.spindle_stop_ovr)) { sys.spindle_stop_ovr = SPINDLE_STOP_OVR_INITIATE; }
 8005c22:	7ae3      	ldrb	r3, [r4, #11]
 8005c24:	b9db      	cbnz	r3, 8005c5e <protocol_exec_rt_suspend+0x57a>
 8005c26:	2302      	movs	r3, #2
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 8005c28:	f01b 0fc0 	tst.w	fp, #192	; 0xc0
        if (!(sys.spindle_stop_ovr)) { sys.spindle_stop_ovr = SPINDLE_STOP_OVR_INITIATE; }
 8005c2c:	72e3      	strb	r3, [r4, #11]
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 8005c2e:	f47f aeb0 	bne.w	8005992 <protocol_exec_rt_suspend+0x2ae>
    st_prep_buffer();
 8005c32:	f002 ff93 	bl	8008b5c <st_prep_buffer>
 8005c36:	e603      	b.n	8005840 <protocol_exec_rt_suspend+0x15c>
              spindle_set_state(SPINDLE_DISABLE,0.0f); // De-energize
 8005c38:	4629      	mov	r1, r5
 8005c3a:	f002 fab3 	bl	80081a4 <spindle_set_state>
              sys.spindle_stop_ovr = SPINDLE_STOP_OVR_ENABLED; // Set stop override state to enabled, if de-energized.
 8005c3e:	2301      	movs	r3, #1
 8005c40:	72e3      	strb	r3, [r4, #11]
 8005c42:	e588      	b.n	8005756 <protocol_exec_rt_suspend+0x72>
        if ((sys.state == STATE_SAFETY_DOOR) && !(sys.suspend & SUSPEND_SAFETY_DOOR_AJAR)) {
 8005c44:	78a3      	ldrb	r3, [r4, #2]
 8005c46:	f013 0220 	ands.w	r2, r3, #32
 8005c4a:	f47f adc3 	bne.w	80057d4 <protocol_exec_rt_suspend+0xf0>
          if (sys.suspend & SUSPEND_RESTORE_COMPLETE) {
 8005c4e:	06d8      	lsls	r0, r3, #27
 8005c50:	d55d      	bpl.n	8005d0e <protocol_exec_rt_suspend+0x62a>
            sys.state = STATE_IDLE; // Set to IDLE to immediately resume the cycle.
 8005c52:	7022      	strb	r2, [r4, #0]
 8005c54:	e5b1      	b.n	80057ba <protocol_exec_rt_suspend+0xd6>
        system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_STOP);
 8005c56:	2020      	movs	r0, #32
 8005c58:	f004 f81e 	bl	8009c98 <system_set_exec_accessory_override_flag>
 8005c5c:	e554      	b.n	8005708 <protocol_exec_rt_suspend+0x24>
        else if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_ENABLED) { sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE; }
 8005c5e:	07d9      	lsls	r1, r3, #31
 8005c60:	d502      	bpl.n	8005c68 <protocol_exec_rt_suspend+0x584>
 8005c62:	f043 0304 	orr.w	r3, r3, #4
 8005c66:	72e3      	strb	r3, [r4, #11]
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 8005c68:	f01b 0fc0 	tst.w	fp, #192	; 0xc0
 8005c6c:	f47f ae91 	bne.w	8005992 <protocol_exec_rt_suspend+0x2ae>
    st_prep_buffer();
 8005c70:	f002 ff74 	bl	8008b5c <st_prep_buffer>
 8005c74:	e5e4      	b.n	8005840 <protocol_exec_rt_suspend+0x15c>
              report_feedback_message(MESSAGE_SPINDLE_RESTORE);
 8005c76:	200a      	movs	r0, #10
 8005c78:	f000 fd82 	bl	8006780 <report_feedback_message>
              if (bit_istrue(settings.flags,BITFLAG_LASER_MODE)) {
 8005c7c:	f896 3058 	ldrb.w	r3, [r6, #88]	; 0x58
 8005c80:	0798      	lsls	r0, r3, #30
 8005c82:	d54b      	bpl.n	8005d1c <protocol_exec_rt_suspend+0x638>
                bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 8005c84:	7922      	ldrb	r2, [r4, #4]
 8005c86:	7ae3      	ldrb	r3, [r4, #11]
 8005c88:	f042 0208 	orr.w	r2, r2, #8
            if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_RESTORE_CYCLE) {
 8005c8c:	0719      	lsls	r1, r3, #28
                bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 8005c8e:	7122      	strb	r2, [r4, #4]
            if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_RESTORE_CYCLE) {
 8005c90:	f57f ade9 	bpl.w	8005866 <protocol_exec_rt_suspend+0x182>
 8005c94:	e6e5      	b.n	8005a62 <protocol_exec_rt_suspend+0x37e>
        if (sys.state == STATE_ALARM) { sys.suspend |= (SUSPEND_RETRACT_COMPLETE|SUSPEND_HOLD_COMPLETE); }
 8005c96:	78a3      	ldrb	r3, [r4, #2]
 8005c98:	f043 0305 	orr.w	r3, r3, #5
 8005c9c:	70a3      	strb	r3, [r4, #2]
        sys.state = STATE_SLEEP; 
 8005c9e:	2380      	movs	r3, #128	; 0x80
 8005ca0:	7023      	strb	r3, [r4, #0]
 8005ca2:	e57a      	b.n	800579a <protocol_exec_rt_suspend+0xb6>
              if (sys.suspend & SUSPEND_INITIATE_RESTORE) { // Actively restoring
 8005ca4:	071f      	lsls	r7, r3, #28
 8005ca6:	f57f af0c 	bpl.w	8005ac2 <protocol_exec_rt_suspend+0x3de>
                sys.suspend &= ~(SUSPEND_RETRACT_COMPLETE | SUSPEND_INITIATE_RESTORE | SUSPEND_RESTORE_COMPLETE);
 8005caa:	f023 031c 	bic.w	r3, r3, #28
                sys.suspend |= SUSPEND_RESTART_RETRACT;
 8005cae:	f043 0302 	orr.w	r3, r3, #2
 8005cb2:	e706      	b.n	8005ac2 <protocol_exec_rt_suspend+0x3de>
      restore_condition = (gc_state.modal.spindle | gc_state.modal.coolant);
 8005cb4:	4b25      	ldr	r3, [pc, #148]	; (8005d4c <protocol_exec_rt_suspend+0x668>)
 8005cb6:	7a5f      	ldrb	r7, [r3, #9]
 8005cb8:	7a1a      	ldrb	r2, [r3, #8]
      restore_spindle_speed = gc_state.spindle_speed;
 8005cba:	f8d3 800c 	ldr.w	r8, [r3, #12]
      restore_condition = (gc_state.modal.spindle | gc_state.modal.coolant);
 8005cbe:	ea47 0302 	orr.w	r3, r7, r2
 8005cc2:	9301      	str	r3, [sp, #4]
 8005cc4:	e51a      	b.n	80056fc <protocol_exec_rt_suspend+0x18>
              sys.state = STATE_CYCLE;
 8005cc6:	2208      	movs	r2, #8
              sys.suspend = SUSPEND_DISABLE; // Break suspend state.
 8005cc8:	70a3      	strb	r3, [r4, #2]
              sys.state = STATE_CYCLE;
 8005cca:	7022      	strb	r2, [r4, #0]
              st_prep_buffer(); // Initialize step segment buffer before beginning cycle.
 8005ccc:	f002 ff46 	bl	8008b5c <st_prep_buffer>
              st_wake_up();
 8005cd0:	f002 fba8 	bl	8008424 <st_wake_up>
      system_clear_exec_state_flag(EXEC_CYCLE_START);
 8005cd4:	2002      	movs	r0, #2
 8005cd6:	f003 ffbb 	bl	8009c50 <system_clear_exec_state_flag>
 8005cda:	e57e      	b.n	80057da <protocol_exec_rt_suspend+0xf6>
            report_feedback_message(MESSAGE_SLEEP_MODE);
 8005cdc:	200b      	movs	r0, #11
 8005cde:	9201      	str	r2, [sp, #4]
 8005ce0:	f000 fd4e 	bl	8006780 <report_feedback_message>
            spindle_set_state(SPINDLE_DISABLE,0.0f); // De-energize
 8005ce4:	9a01      	ldr	r2, [sp, #4]
 8005ce6:	2100      	movs	r1, #0
 8005ce8:	4610      	mov	r0, r2
 8005cea:	f002 fa5b 	bl	80081a4 <spindle_set_state>
            coolant_set_state(COOLANT_DISABLE); // De-energize
 8005cee:	9a01      	ldr	r2, [sp, #4]
 8005cf0:	4610      	mov	r0, r2
 8005cf2:	f7fb ffc7 	bl	8001c84 <coolant_set_state>
            st_go_idle(); // Disable steppers
 8005cf6:	f002 fbd5 	bl	80084a4 <st_go_idle>
            while (!(sys.abort)) { protocol_exec_rt_system(); } // Do nothing until reset.
 8005cfa:	7863      	ldrb	r3, [r4, #1]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	f47f ada3 	bne.w	8005848 <protocol_exec_rt_suspend+0x164>
 8005d02:	f7ff fb05 	bl	8005310 <protocol_exec_rt_system>
 8005d06:	7863      	ldrb	r3, [r4, #1]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d0fa      	beq.n	8005d02 <protocol_exec_rt_suspend+0x61e>
 8005d0c:	e59c      	b.n	8005848 <protocol_exec_rt_suspend+0x164>
          } else if (sys.suspend & SUSPEND_RETRACT_COMPLETE) {
 8005d0e:	0759      	lsls	r1, r3, #29
 8005d10:	f57f ad60 	bpl.w	80057d4 <protocol_exec_rt_suspend+0xf0>
            sys.suspend |= SUSPEND_INITIATE_RESTORE;
 8005d14:	f043 0308 	orr.w	r3, r3, #8
 8005d18:	70a3      	strb	r3, [r4, #2]
 8005d1a:	e55b      	b.n	80057d4 <protocol_exec_rt_suspend+0xf0>
                spindle_set_state((restore_condition & (PL_COND_FLAG_SPINDLE_CW | PL_COND_FLAG_SPINDLE_CCW)), restore_spindle_speed);
 8005d1c:	9b01      	ldr	r3, [sp, #4]
 8005d1e:	4641      	mov	r1, r8
 8005d20:	f003 0030 	and.w	r0, r3, #48	; 0x30
 8005d24:	f002 fa3e 	bl	80081a4 <spindle_set_state>
 8005d28:	7ae3      	ldrb	r3, [r4, #11]
 8005d2a:	e697      	b.n	8005a5c <protocol_exec_rt_suspend+0x378>
              if (!(rt_exec & EXEC_SLEEP)) { sys.suspend |= SUSPEND_JOG_CANCEL; } 
 8005d2c:	fa4f f98b 	sxtb.w	r9, fp
 8005d30:	f1b9 0f00 	cmp.w	r9, #0
 8005d34:	f6ff aeb5 	blt.w	8005aa2 <protocol_exec_rt_suspend+0x3be>
 8005d38:	78a3      	ldrb	r3, [r4, #2]
 8005d3a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005d3e:	70a3      	strb	r3, [r4, #2]
 8005d40:	e6af      	b.n	8005aa2 <protocol_exec_rt_suspend+0x3be>
 8005d42:	78a1      	ldrb	r1, [r4, #2]
 8005d44:	f041 0140 	orr.w	r1, r1, #64	; 0x40
          if (!(sys.state & STATE_JOG)) { sys.suspend |= SUSPEND_MOTION_CANCEL; } // NOTE: State is STATE_CYCLE.
 8005d48:	70a1      	strb	r1, [r4, #2]
 8005d4a:	e6a3      	b.n	8005a94 <protocol_exec_rt_suspend+0x3b0>
 8005d4c:	2000102c 	.word	0x2000102c
 8005d50:	200010dd 	.word	0x200010dd

08005d54 <protocol_execute_realtime>:
{
 8005d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  rt_exec = sys_rt_exec_alarm; // Copy volatile sys_rt_exec_alarm.
 8005d56:	4bab      	ldr	r3, [pc, #684]	; (8006004 <protocol_execute_realtime+0x2b0>)
 8005d58:	781b      	ldrb	r3, [r3, #0]
  if (rt_exec) { // Enter only if any bit flag is true
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d156      	bne.n	8005e0c <protocol_execute_realtime+0xb8>
 8005d5e:	4caa      	ldr	r4, [pc, #680]	; (8006008 <protocol_execute_realtime+0x2b4>)
 8005d60:	4daa      	ldr	r5, [pc, #680]	; (800600c <protocol_execute_realtime+0x2b8>)
  rt_exec = sys_rt_exec_state; // Copy volatile sys_rt_exec_state.
 8005d62:	782b      	ldrb	r3, [r5, #0]
  if (rt_exec) {
 8005d64:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8005d68:	b393      	cbz	r3, 8005dd0 <protocol_execute_realtime+0x7c>
    if (rt_exec & EXEC_RESET) {
 8005d6a:	06ee      	lsls	r6, r5, #27
 8005d6c:	f100 80dd 	bmi.w	8005f2a <protocol_execute_realtime+0x1d6>
    if (rt_exec & EXEC_STATUS_REPORT) {
 8005d70:	07e8      	lsls	r0, r5, #31
 8005d72:	f100 80f8 	bmi.w	8005f66 <protocol_execute_realtime+0x212>
    if (rt_exec & (EXEC_MOTION_CANCEL | EXEC_FEED_HOLD | EXEC_SAFETY_DOOR | EXEC_SLEEP)) {
 8005d76:	f015 0fe8 	tst.w	r5, #232	; 0xe8
 8005d7a:	d00a      	beq.n	8005d92 <protocol_execute_realtime+0x3e>
      if (!(sys.state & (STATE_ALARM | STATE_CHECK_MODE))) {
 8005d7c:	7823      	ldrb	r3, [r4, #0]
 8005d7e:	0799      	lsls	r1, r3, #30
 8005d80:	f000 80f7 	beq.w	8005f72 <protocol_execute_realtime+0x21e>
 8005d84:	b26e      	sxtb	r6, r5
      if (rt_exec & EXEC_SLEEP) {
 8005d86:	2e00      	cmp	r6, #0
 8005d88:	f2c0 8169 	blt.w	800605e <protocol_execute_realtime+0x30a>
      system_clear_exec_state_flag((EXEC_MOTION_CANCEL | EXEC_FEED_HOLD | EXEC_SAFETY_DOOR | EXEC_SLEEP));
 8005d8c:	20e8      	movs	r0, #232	; 0xe8
 8005d8e:	f003 ff5f 	bl	8009c50 <system_clear_exec_state_flag>
    if (rt_exec & EXEC_CYCLE_START) {
 8005d92:	07ab      	lsls	r3, r5, #30
 8005d94:	d519      	bpl.n	8005dca <protocol_execute_realtime+0x76>
      if (!(rt_exec & (EXEC_FEED_HOLD | EXEC_MOTION_CANCEL | EXEC_SAFETY_DOOR))) {
 8005d96:	f015 0f68 	tst.w	r5, #104	; 0x68
 8005d9a:	d113      	bne.n	8005dc4 <protocol_execute_realtime+0x70>
        if ((sys.state == STATE_SAFETY_DOOR) && !(sys.suspend & SUSPEND_SAFETY_DOOR_AJAR)) {
 8005d9c:	7823      	ldrb	r3, [r4, #0]
 8005d9e:	2b40      	cmp	r3, #64	; 0x40
 8005da0:	f000 8175 	beq.w	800608e <protocol_execute_realtime+0x33a>
        if ((sys.state == STATE_IDLE) || ((sys.state & STATE_HOLD) && (sys.suspend & SUSPEND_HOLD_COMPLETE))) {
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	f040 8143 	bne.w	8006030 <protocol_execute_realtime+0x2dc>
            sys.step_control = STEP_CONTROL_NORMAL_OP; // Restore step control to normal operation
 8005daa:	2300      	movs	r3, #0
 8005dac:	7123      	strb	r3, [r4, #4]
            if (plan_get_current_block() && bit_isfalse(sys.suspend,SUSPEND_MOTION_CANCEL)) {
 8005dae:	f7fe fc6d 	bl	800468c <plan_get_current_block>
 8005db2:	b120      	cbz	r0, 8005dbe <protocol_execute_realtime+0x6a>
 8005db4:	78a3      	ldrb	r3, [r4, #2]
 8005db6:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8005dba:	f000 81a0 	beq.w	80060fe <protocol_execute_realtime+0x3aa>
              sys.suspend = SUSPEND_DISABLE; // Break suspend state.
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	70a3      	strb	r3, [r4, #2]
              sys.state = STATE_IDLE;
 8005dc2:	7023      	strb	r3, [r4, #0]
      system_clear_exec_state_flag(EXEC_CYCLE_START);
 8005dc4:	2002      	movs	r0, #2
 8005dc6:	f003 ff43 	bl	8009c50 <system_clear_exec_state_flag>
    if (rt_exec & EXEC_CYCLE_STOP) {
 8005dca:	0769      	lsls	r1, r5, #29
 8005dcc:	f100 80b0 	bmi.w	8005f30 <protocol_execute_realtime+0x1dc>
  rt_exec = sys_rt_exec_motion_override; // Copy volatile sys_rt_exec_motion_override
 8005dd0:	4b8f      	ldr	r3, [pc, #572]	; (8006010 <protocol_execute_realtime+0x2bc>)
 8005dd2:	781b      	ldrb	r3, [r3, #0]
  if (rt_exec) {
 8005dd4:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d16e      	bne.n	8005eba <protocol_execute_realtime+0x166>
  rt_exec = sys_rt_exec_accessory_override;
 8005ddc:	4b8d      	ldr	r3, [pc, #564]	; (8006014 <protocol_execute_realtime+0x2c0>)
 8005dde:	781b      	ldrb	r3, [r3, #0]
  if (rt_exec) {
 8005de0:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8005de4:	bb13      	cbnz	r3, 8005e2c <protocol_execute_realtime+0xd8>
 8005de6:	7823      	ldrb	r3, [r4, #0]
  if (sys.state & (STATE_CYCLE | STATE_HOLD | STATE_SAFETY_DOOR | STATE_HOMING | STATE_SLEEP| STATE_JOG)) {
 8005de8:	f013 0ffc 	tst.w	r3, #252	; 0xfc
 8005dec:	d105      	bne.n	8005dfa <protocol_execute_realtime+0xa6>
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 8005dee:	78a3      	ldrb	r3, [r4, #2]
 8005df0:	b943      	cbnz	r3, 8005e04 <protocol_execute_realtime+0xb0>
 8005df2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 8005df4:	f015 0fc0 	tst.w	r5, #192	; 0xc0
 8005df8:	d14c      	bne.n	8005e94 <protocol_execute_realtime+0x140>
    st_prep_buffer();
 8005dfa:	f002 feaf 	bl	8008b5c <st_prep_buffer>
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 8005dfe:	78a3      	ldrb	r3, [r4, #2]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d0f6      	beq.n	8005df2 <protocol_execute_realtime+0x9e>
}
 8005e04:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 8005e08:	f7ff bc6c 	b.w	80056e4 <protocol_exec_rt_suspend>
    sys.state = STATE_ALARM; // Set system alarm state
 8005e0c:	2601      	movs	r6, #1
 8005e0e:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8005e12:	4c7d      	ldr	r4, [pc, #500]	; (8006008 <protocol_execute_realtime+0x2b4>)
    report_alarm_message(rt_exec);
 8005e14:	4628      	mov	r0, r5
    if ((rt_exec == EXEC_ALARM_HARD_LIMIT) || (rt_exec == EXEC_ALARM_SOFT_LIMIT)) {
 8005e16:	3d01      	subs	r5, #1
    sys.state = STATE_ALARM; // Set system alarm state
 8005e18:	7026      	strb	r6, [r4, #0]
    report_alarm_message(rt_exec);
 8005e1a:	f000 fc9b 	bl	8006754 <report_alarm_message>
    if ((rt_exec == EXEC_ALARM_HARD_LIMIT) || (rt_exec == EXEC_ALARM_SOFT_LIMIT)) {
 8005e1e:	42b5      	cmp	r5, r6
 8005e20:	f240 8123 	bls.w	800606a <protocol_execute_realtime+0x316>
 8005e24:	4d79      	ldr	r5, [pc, #484]	; (800600c <protocol_execute_realtime+0x2b8>)
    system_clear_exec_alarm(); // Clear alarm
 8005e26:	f003 ff25 	bl	8009c74 <system_clear_exec_alarm>
 8005e2a:	e79a      	b.n	8005d62 <protocol_execute_realtime+0xe>
    system_clear_exec_accessory_overrides(); // Clear all accessory override flags.
 8005e2c:	f003 ff46 	bl	8009cbc <system_clear_exec_accessory_overrides>
    uint8_t last_s_override =  sys.spindle_speed_ovr;
 8005e30:	7aa2      	ldrb	r2, [r4, #10]
 8005e32:	f015 0f01 	tst.w	r5, #1
 8005e36:	bf0c      	ite	eq
 8005e38:	4613      	moveq	r3, r2
 8005e3a:	2364      	movne	r3, #100	; 0x64
    if (rt_exec & EXEC_SPINDLE_OVR_COARSE_PLUS) { last_s_override += SPINDLE_OVERRIDE_COARSE_INCREMENT; }
 8005e3c:	07a8      	lsls	r0, r5, #30
 8005e3e:	bf44      	itt	mi
 8005e40:	330a      	addmi	r3, #10
 8005e42:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_COARSE_MINUS) { last_s_override -= SPINDLE_OVERRIDE_COARSE_INCREMENT; }
 8005e44:	0769      	lsls	r1, r5, #29
 8005e46:	bf44      	itt	mi
 8005e48:	3b0a      	submi	r3, #10
 8005e4a:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_FINE_PLUS) { last_s_override += SPINDLE_OVERRIDE_FINE_INCREMENT; }
 8005e4c:	072f      	lsls	r7, r5, #28
 8005e4e:	bf44      	itt	mi
 8005e50:	3301      	addmi	r3, #1
 8005e52:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_FINE_MINUS) { last_s_override -= SPINDLE_OVERRIDE_FINE_INCREMENT; }
 8005e54:	06ee      	lsls	r6, r5, #27
 8005e56:	bf44      	itt	mi
 8005e58:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8005e5c:	b2db      	uxtbmi	r3, r3
    last_s_override = max(last_s_override,MIN_SPINDLE_SPEED_OVERRIDE);
 8005e5e:	2bc8      	cmp	r3, #200	; 0xc8
 8005e60:	bf28      	it	cs
 8005e62:	23c8      	movcs	r3, #200	; 0xc8
 8005e64:	2b0a      	cmp	r3, #10
 8005e66:	bf38      	it	cc
 8005e68:	230a      	movcc	r3, #10
    if (last_s_override != sys.spindle_speed_ovr) {
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d006      	beq.n	8005e7c <protocol_execute_realtime+0x128>
      sys.report_ovr_counter = 0; // Set to report change immediately
 8005e6e:	2100      	movs	r1, #0
      bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 8005e70:	7922      	ldrb	r2, [r4, #4]
      sys.spindle_speed_ovr = last_s_override;
 8005e72:	72a3      	strb	r3, [r4, #10]
      bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 8005e74:	f042 0308 	orr.w	r3, r2, #8
 8005e78:	7123      	strb	r3, [r4, #4]
      sys.report_ovr_counter = 0; // Set to report change immediately
 8005e7a:	7321      	strb	r1, [r4, #12]
    if (rt_exec & EXEC_SPINDLE_OVR_STOP) {
 8005e7c:	06a8      	lsls	r0, r5, #26
      if (sys.state == STATE_HOLD) {
 8005e7e:	7823      	ldrb	r3, [r4, #0]
    if (rt_exec & EXEC_SPINDLE_OVR_STOP) {
 8005e80:	d502      	bpl.n	8005e88 <protocol_execute_realtime+0x134>
      if (sys.state == STATE_HOLD) {
 8005e82:	2b10      	cmp	r3, #16
 8005e84:	f000 80ca 	beq.w	800601c <protocol_execute_realtime+0x2c8>
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 8005e88:	f015 0fc0 	tst.w	r5, #192	; 0xc0
 8005e8c:	d0ac      	beq.n	8005de8 <protocol_execute_realtime+0x94>
      if ((sys.state == STATE_IDLE) || (sys.state & (STATE_CYCLE | STATE_HOLD))) {
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	f040 80e0 	bne.w	8006054 <protocol_execute_realtime+0x300>
        uint8_t coolant_state = gc_state.modal.coolant;
 8005e94:	4f60      	ldr	r7, [pc, #384]	; (8006018 <protocol_execute_realtime+0x2c4>)
          if (rt_exec & EXEC_COOLANT_MIST_OVR_TOGGLE) {
 8005e96:	062a      	lsls	r2, r5, #24
        uint8_t coolant_state = gc_state.modal.coolant;
 8005e98:	7a3e      	ldrb	r6, [r7, #8]
          if (rt_exec & EXEC_COOLANT_MIST_OVR_TOGGLE) {
 8005e9a:	f100 80f1 	bmi.w	8006080 <protocol_execute_realtime+0x32c>
          if (rt_exec & EXEC_COOLANT_FLOOD_OVR_TOGGLE) {
 8005e9e:	0668      	lsls	r0, r5, #25
 8005ea0:	d505      	bpl.n	8005eae <protocol_execute_realtime+0x15a>
            if (coolant_state & COOLANT_FLOOD_ENABLE) { bit_false(coolant_state,COOLANT_FLOOD_ENABLE); }
 8005ea2:	0671      	lsls	r1, r6, #25
 8005ea4:	bf4c      	ite	mi
 8005ea6:	f006 06bf 	andmi.w	r6, r6, #191	; 0xbf
            else { coolant_state |= COOLANT_FLOOD_ENABLE; }
 8005eaa:	f046 0640 	orrpl.w	r6, r6, #64	; 0x40
        coolant_set_state(coolant_state); // Report counter set in coolant_set_state().
 8005eae:	4630      	mov	r0, r6
 8005eb0:	f7fb fee8 	bl	8001c84 <coolant_set_state>
 8005eb4:	7823      	ldrb	r3, [r4, #0]
        gc_state.modal.coolant = coolant_state;
 8005eb6:	723e      	strb	r6, [r7, #8]
 8005eb8:	e796      	b.n	8005de8 <protocol_execute_realtime+0x94>
    system_clear_exec_motion_overrides(); // Clear all motion override flags.
 8005eba:	f003 fef7 	bl	8009cac <system_clear_exec_motion_overrides>
    uint8_t new_f_override =  sys.f_override;
 8005ebe:	7a21      	ldrb	r1, [r4, #8]
 8005ec0:	f015 0f01 	tst.w	r5, #1
 8005ec4:	bf0c      	ite	eq
 8005ec6:	460b      	moveq	r3, r1
 8005ec8:	2364      	movne	r3, #100	; 0x64
    if (rt_exec & EXEC_FEED_OVR_COARSE_PLUS) { new_f_override += FEED_OVERRIDE_COARSE_INCREMENT; }
 8005eca:	07ae      	lsls	r6, r5, #30
 8005ecc:	bf44      	itt	mi
 8005ece:	330a      	addmi	r3, #10
 8005ed0:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_FEED_OVR_COARSE_MINUS) { new_f_override -= FEED_OVERRIDE_COARSE_INCREMENT; }
 8005ed2:	0768      	lsls	r0, r5, #29
 8005ed4:	bf44      	itt	mi
 8005ed6:	3b0a      	submi	r3, #10
 8005ed8:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_FEED_OVR_FINE_PLUS) { new_f_override += FEED_OVERRIDE_FINE_INCREMENT; }
 8005eda:	072f      	lsls	r7, r5, #28
 8005edc:	bf44      	itt	mi
 8005ede:	3301      	addmi	r3, #1
 8005ee0:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_FEED_OVR_FINE_MINUS) { new_f_override -= FEED_OVERRIDE_FINE_INCREMENT; }
 8005ee2:	06ee      	lsls	r6, r5, #27
 8005ee4:	bf44      	itt	mi
 8005ee6:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8005eea:	b2db      	uxtbmi	r3, r3
    new_f_override = max(new_f_override,MIN_FEED_RATE_OVERRIDE);
 8005eec:	2bc8      	cmp	r3, #200	; 0xc8
 8005eee:	bf28      	it	cs
 8005ef0:	23c8      	movcs	r3, #200	; 0xc8
 8005ef2:	2b0a      	cmp	r3, #10
 8005ef4:	bf38      	it	cc
 8005ef6:	230a      	movcc	r3, #10
    uint8_t new_r_override = sys.r_override;
 8005ef8:	7a60      	ldrb	r0, [r4, #9]
 8005efa:	f015 0f20 	tst.w	r5, #32
 8005efe:	bf14      	ite	ne
 8005f00:	2264      	movne	r2, #100	; 0x64
 8005f02:	4602      	moveq	r2, r0
    if (rt_exec & EXEC_RAPID_OVR_MEDIUM) { new_r_override = RAPID_OVERRIDE_MEDIUM; }
 8005f04:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005f08:	bf18      	it	ne
 8005f0a:	2232      	movne	r2, #50	; 0x32
    if (rt_exec & EXEC_RAPID_OVR_LOW) { new_r_override = RAPID_OVERRIDE_LOW; }
 8005f0c:	f015 0f80 	tst.w	r5, #128	; 0x80
 8005f10:	bf18      	it	ne
 8005f12:	2219      	movne	r2, #25
    if ((new_f_override != sys.f_override) || (new_r_override != sys.r_override)) {
 8005f14:	4299      	cmp	r1, r3
 8005f16:	d023      	beq.n	8005f60 <protocol_execute_realtime+0x20c>
      sys.report_ovr_counter = 0; // Set to report change immediately
 8005f18:	2100      	movs	r1, #0
      sys.f_override = new_f_override;
 8005f1a:	7223      	strb	r3, [r4, #8]
      sys.r_override = new_r_override;
 8005f1c:	7262      	strb	r2, [r4, #9]
      sys.report_ovr_counter = 0; // Set to report change immediately
 8005f1e:	7321      	strb	r1, [r4, #12]
      plan_update_velocity_profile_parameters();
 8005f20:	f7fe fc26 	bl	8004770 <plan_update_velocity_profile_parameters>
      plan_cycle_reinitialize();
 8005f24:	f7fe ff20 	bl	8004d68 <plan_cycle_reinitialize>
 8005f28:	e758      	b.n	8005ddc <protocol_execute_realtime+0x88>
      sys.abort = true;  // Only place this is set true.
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	7063      	strb	r3, [r4, #1]
 8005f2e:	e75e      	b.n	8005dee <protocol_execute_realtime+0x9a>
      if ((sys.state & (STATE_HOLD|STATE_SAFETY_DOOR|STATE_SLEEP)) && !(sys.soft_limit) && !(sys.suspend & SUSPEND_JOG_CANCEL)) {
 8005f30:	7823      	ldrb	r3, [r4, #0]
 8005f32:	f013 0fd0 	tst.w	r3, #208	; 0xd0
 8005f36:	d002      	beq.n	8005f3e <protocol_execute_realtime+0x1ea>
 8005f38:	78e3      	ldrb	r3, [r4, #3]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d051      	beq.n	8005fe2 <protocol_execute_realtime+0x28e>
        if (sys.suspend & SUSPEND_JOG_CANCEL) {   // For jog cancel, flush buffers and sync positions.
 8005f3e:	78a3      	ldrb	r3, [r4, #2]
 8005f40:	061f      	lsls	r7, r3, #24
 8005f42:	d452      	bmi.n	8005fea <protocol_execute_realtime+0x296>
        if (sys.suspend & SUSPEND_SAFETY_DOOR_AJAR) { // Only occurs when safety door opens during jog.
 8005f44:	f013 0220 	ands.w	r2, r3, #32
 8005f48:	d036      	beq.n	8005fb8 <protocol_execute_realtime+0x264>
          sys.state = STATE_SAFETY_DOOR;
 8005f4a:	2240      	movs	r2, #64	; 0x40
          sys.suspend &= ~(SUSPEND_JOG_CANCEL);
 8005f4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
          sys.suspend |= SUSPEND_HOLD_COMPLETE;
 8005f50:	f043 0301 	orr.w	r3, r3, #1
 8005f54:	70a3      	strb	r3, [r4, #2]
          sys.state = STATE_SAFETY_DOOR;
 8005f56:	7022      	strb	r2, [r4, #0]
      system_clear_exec_state_flag(EXEC_CYCLE_STOP);
 8005f58:	2004      	movs	r0, #4
 8005f5a:	f003 fe79 	bl	8009c50 <system_clear_exec_state_flag>
 8005f5e:	e737      	b.n	8005dd0 <protocol_execute_realtime+0x7c>
    if ((new_f_override != sys.f_override) || (new_r_override != sys.r_override)) {
 8005f60:	4290      	cmp	r0, r2
 8005f62:	d1d9      	bne.n	8005f18 <protocol_execute_realtime+0x1c4>
 8005f64:	e73a      	b.n	8005ddc <protocol_execute_realtime+0x88>
      report_realtime_status();
 8005f66:	f001 f98f 	bl	8007288 <report_realtime_status>
      system_clear_exec_state_flag(EXEC_STATUS_REPORT);
 8005f6a:	2001      	movs	r0, #1
 8005f6c:	f003 fe70 	bl	8009c50 <system_clear_exec_state_flag>
 8005f70:	e701      	b.n	8005d76 <protocol_execute_realtime+0x22>
        if (sys.state & (STATE_CYCLE | STATE_JOG)) {
 8005f72:	f013 0f28 	tst.w	r3, #40	; 0x28
 8005f76:	d122      	bne.n	8005fbe <protocol_execute_realtime+0x26a>
        if (sys.state == STATE_IDLE) { sys.suspend = SUSPEND_HOLD_COMPLETE; }
 8005f78:	bb33      	cbnz	r3, 8005fc8 <protocol_execute_realtime+0x274>
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	70a2      	strb	r2, [r4, #2]
        if (rt_exec & EXEC_MOTION_CANCEL) {
 8005f7e:	066a      	lsls	r2, r5, #25
 8005f80:	f100 809b 	bmi.w	80060ba <protocol_execute_realtime+0x366>
        if (rt_exec & EXEC_FEED_HOLD) {
 8005f84:	072f      	lsls	r7, r5, #28
 8005f86:	b26e      	sxtb	r6, r5
 8005f88:	d501      	bpl.n	8005f8e <protocol_execute_realtime+0x23a>
          if (!(sys.state & (STATE_SAFETY_DOOR | STATE_JOG | STATE_SLEEP))) { sys.state = STATE_HOLD; }
 8005f8a:	2310      	movs	r3, #16
 8005f8c:	7023      	strb	r3, [r4, #0]
        if (rt_exec & EXEC_SAFETY_DOOR) {
 8005f8e:	06a8      	lsls	r0, r5, #26
 8005f90:	f57f aef9 	bpl.w	8005d86 <protocol_execute_realtime+0x32>
          report_feedback_message(MESSAGE_SAFETY_DOOR_AJAR);
 8005f94:	2006      	movs	r0, #6
 8005f96:	f000 fbf3 	bl	8006780 <report_feedback_message>
          if (!(sys.suspend & SUSPEND_JOG_CANCEL)) {
 8005f9a:	78a3      	ldrb	r3, [r4, #2]
 8005f9c:	0619      	lsls	r1, r3, #24
 8005f9e:	d407      	bmi.n	8005fb0 <protocol_execute_realtime+0x25c>
            if (sys.state == STATE_SAFETY_DOOR) {
 8005fa0:	7822      	ldrb	r2, [r4, #0]
 8005fa2:	2a40      	cmp	r2, #64	; 0x40
 8005fa4:	f000 80ba 	beq.w	800611c <protocol_execute_realtime+0x3c8>
            if (sys.state != STATE_SLEEP) { sys.state = STATE_SAFETY_DOOR; }
 8005fa8:	2a80      	cmp	r2, #128	; 0x80
 8005faa:	d001      	beq.n	8005fb0 <protocol_execute_realtime+0x25c>
 8005fac:	2240      	movs	r2, #64	; 0x40
 8005fae:	7022      	strb	r2, [r4, #0]
          sys.suspend |= SUSPEND_SAFETY_DOOR_AJAR;
 8005fb0:	f043 0320 	orr.w	r3, r3, #32
 8005fb4:	70a3      	strb	r3, [r4, #2]
 8005fb6:	e6e6      	b.n	8005d86 <protocol_execute_realtime+0x32>
          sys.suspend = SUSPEND_DISABLE;
 8005fb8:	70a2      	strb	r2, [r4, #2]
          sys.state = STATE_IDLE;
 8005fba:	7022      	strb	r2, [r4, #0]
 8005fbc:	e7cc      	b.n	8005f58 <protocol_execute_realtime+0x204>
          if (!(sys.suspend & (SUSPEND_MOTION_CANCEL | SUSPEND_JOG_CANCEL))) { // Block, if already holding.
 8005fbe:	78a2      	ldrb	r2, [r4, #2]
 8005fc0:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 8005fc4:	f000 808a 	beq.w	80060dc <protocol_execute_realtime+0x388>
 8005fc8:	b26a      	sxtb	r2, r5
        if (rt_exec & EXEC_MOTION_CANCEL) {
 8005fca:	0668      	lsls	r0, r5, #25
 8005fcc:	4616      	mov	r6, r2
 8005fce:	d502      	bpl.n	8005fd6 <protocol_execute_realtime+0x282>
          if (!(sys.state & STATE_JOG)) { sys.suspend |= SUSPEND_MOTION_CANCEL; } // NOTE: State is STATE_CYCLE.
 8005fd0:	0699      	lsls	r1, r3, #26
 8005fd2:	f140 80ab 	bpl.w	800612c <protocol_execute_realtime+0x3d8>
        if (rt_exec & EXEC_FEED_HOLD) {
 8005fd6:	072f      	lsls	r7, r5, #28
 8005fd8:	d5d9      	bpl.n	8005f8e <protocol_execute_realtime+0x23a>
          if (!(sys.state & (STATE_SAFETY_DOOR | STATE_JOG | STATE_SLEEP))) { sys.state = STATE_HOLD; }
 8005fda:	f013 0fe0 	tst.w	r3, #224	; 0xe0
 8005fde:	d1d6      	bne.n	8005f8e <protocol_execute_realtime+0x23a>
 8005fe0:	e7d3      	b.n	8005f8a <protocol_execute_realtime+0x236>
      if ((sys.state & (STATE_HOLD|STATE_SAFETY_DOOR|STATE_SLEEP)) && !(sys.soft_limit) && !(sys.suspend & SUSPEND_JOG_CANCEL)) {
 8005fe2:	f994 3002 	ldrsb.w	r3, [r4, #2]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	da5a      	bge.n	80060a0 <protocol_execute_realtime+0x34c>
          sys.step_control = STEP_CONTROL_NORMAL_OP;
 8005fea:	2300      	movs	r3, #0
 8005fec:	7123      	strb	r3, [r4, #4]
          plan_reset();
 8005fee:	f7fe fb0b 	bl	8004608 <plan_reset>
          st_reset();
 8005ff2:	f002 fc3b 	bl	800886c <st_reset>
          gc_sync_position();
 8005ff6:	f7fb ff47 	bl	8001e88 <gc_sync_position>
          plan_sync_position();
 8005ffa:	f7fe fe97 	bl	8004d2c <plan_sync_position>
 8005ffe:	78a3      	ldrb	r3, [r4, #2]
 8006000:	e7a0      	b.n	8005f44 <protocol_execute_realtime+0x1f0>
 8006002:	bf00      	nop
 8006004:	20001100 	.word	0x20001100
 8006008:	200010c8 	.word	0x200010c8
 800600c:	200010dd 	.word	0x200010dd
 8006010:	200010c4 	.word	0x200010c4
 8006014:	200010dc 	.word	0x200010dc
 8006018:	2000102c 	.word	0x2000102c
        if (!(sys.spindle_stop_ovr)) { sys.spindle_stop_ovr = SPINDLE_STOP_OVR_INITIATE; }
 800601c:	7ae3      	ldrb	r3, [r4, #11]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d150      	bne.n	80060c4 <protocol_execute_realtime+0x370>
 8006022:	2302      	movs	r3, #2
 8006024:	72e3      	strb	r3, [r4, #11]
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 8006026:	f015 0fc0 	tst.w	r5, #192	; 0xc0
 800602a:	f47f af33 	bne.w	8005e94 <protocol_execute_realtime+0x140>
 800602e:	e6e4      	b.n	8005dfa <protocol_execute_realtime+0xa6>
        if ((sys.state == STATE_IDLE) || ((sys.state & STATE_HOLD) && (sys.suspend & SUSPEND_HOLD_COMPLETE))) {
 8006030:	06da      	lsls	r2, r3, #27
 8006032:	f57f aec7 	bpl.w	8005dc4 <protocol_execute_realtime+0x70>
 8006036:	78a2      	ldrb	r2, [r4, #2]
 8006038:	07d0      	lsls	r0, r2, #31
 800603a:	f57f aec3 	bpl.w	8005dc4 <protocol_execute_realtime+0x70>
          if (sys.state == STATE_HOLD && sys.spindle_stop_ovr) {
 800603e:	2b10      	cmp	r3, #16
 8006040:	f47f aeb3 	bne.w	8005daa <protocol_execute_realtime+0x56>
 8006044:	7ae3      	ldrb	r3, [r4, #11]
 8006046:	2b00      	cmp	r3, #0
 8006048:	f43f aeaf 	beq.w	8005daa <protocol_execute_realtime+0x56>
            sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE_CYCLE; // Set to restore in suspend routine and cycle start after.
 800604c:	f043 0308 	orr.w	r3, r3, #8
 8006050:	72e3      	strb	r3, [r4, #11]
 8006052:	e6b7      	b.n	8005dc4 <protocol_execute_realtime+0x70>
      if ((sys.state == STATE_IDLE) || (sys.state & (STATE_CYCLE | STATE_HOLD))) {
 8006054:	f013 0f18 	tst.w	r3, #24
 8006058:	f43f aec6 	beq.w	8005de8 <protocol_execute_realtime+0x94>
 800605c:	e71a      	b.n	8005e94 <protocol_execute_realtime+0x140>
        if (sys.state == STATE_ALARM) { sys.suspend |= (SUSPEND_RETRACT_COMPLETE|SUSPEND_HOLD_COMPLETE); }
 800605e:	7823      	ldrb	r3, [r4, #0]
 8006060:	2b01      	cmp	r3, #1
 8006062:	d036      	beq.n	80060d2 <protocol_execute_realtime+0x37e>
        sys.state = STATE_SLEEP; 
 8006064:	2380      	movs	r3, #128	; 0x80
 8006066:	7023      	strb	r3, [r4, #0]
 8006068:	e690      	b.n	8005d8c <protocol_execute_realtime+0x38>
      report_feedback_message(MESSAGE_CRITICAL_EVENT);
 800606a:	4630      	mov	r0, r6
 800606c:	f000 fb88 	bl	8006780 <report_feedback_message>
      system_clear_exec_state_flag(EXEC_RESET); // Disable any existing reset
 8006070:	2010      	movs	r0, #16
 8006072:	f003 fded 	bl	8009c50 <system_clear_exec_state_flag>
 8006076:	4d2f      	ldr	r5, [pc, #188]	; (8006134 <protocol_execute_realtime+0x3e0>)
      } while (bit_isfalse(sys_rt_exec_state,EXEC_RESET));
 8006078:	782b      	ldrb	r3, [r5, #0]
 800607a:	06df      	lsls	r7, r3, #27
 800607c:	d5fc      	bpl.n	8006078 <protocol_execute_realtime+0x324>
 800607e:	e6d2      	b.n	8005e26 <protocol_execute_realtime+0xd2>
            if (coolant_state & COOLANT_MIST_ENABLE) { bit_false(coolant_state,COOLANT_MIST_ENABLE); }
 8006080:	0633      	lsls	r3, r6, #24
 8006082:	bf4c      	ite	mi
 8006084:	f006 067f 	andmi.w	r6, r6, #127	; 0x7f
            else { coolant_state |= COOLANT_MIST_ENABLE; }
 8006088:	f046 0680 	orrpl.w	r6, r6, #128	; 0x80
 800608c:	e707      	b.n	8005e9e <protocol_execute_realtime+0x14a>
        if ((sys.state == STATE_SAFETY_DOOR) && !(sys.suspend & SUSPEND_SAFETY_DOOR_AJAR)) {
 800608e:	78a3      	ldrb	r3, [r4, #2]
 8006090:	f013 0220 	ands.w	r2, r3, #32
 8006094:	f47f ae96 	bne.w	8005dc4 <protocol_execute_realtime+0x70>
          if (sys.suspend & SUSPEND_RESTORE_COMPLETE) {
 8006098:	06df      	lsls	r7, r3, #27
 800609a:	d538      	bpl.n	800610e <protocol_execute_realtime+0x3ba>
            sys.state = STATE_IDLE; // Set to IDLE to immediately resume the cycle.
 800609c:	7022      	strb	r2, [r4, #0]
 800609e:	e684      	b.n	8005daa <protocol_execute_realtime+0x56>
        plan_cycle_reinitialize();
 80060a0:	f7fe fe62 	bl	8004d68 <plan_cycle_reinitialize>
        if (sys.step_control & STEP_CONTROL_EXECUTE_HOLD) { sys.suspend |= SUSPEND_HOLD_COMPLETE; }
 80060a4:	7923      	ldrb	r3, [r4, #4]
 80060a6:	079a      	lsls	r2, r3, #30
 80060a8:	d503      	bpl.n	80060b2 <protocol_execute_realtime+0x35e>
 80060aa:	78a2      	ldrb	r2, [r4, #2]
 80060ac:	f042 0201 	orr.w	r2, r2, #1
 80060b0:	70a2      	strb	r2, [r4, #2]
        bit_false(sys.step_control,(STEP_CONTROL_EXECUTE_HOLD | STEP_CONTROL_EXECUTE_SYS_MOTION));
 80060b2:	f023 0306 	bic.w	r3, r3, #6
 80060b6:	7123      	strb	r3, [r4, #4]
 80060b8:	e74e      	b.n	8005f58 <protocol_execute_realtime+0x204>
        if (rt_exec & EXEC_MOTION_CANCEL) {
 80060ba:	2141      	movs	r1, #65	; 0x41
 80060bc:	b26a      	sxtb	r2, r5
 80060be:	4616      	mov	r6, r2
          if (!(sys.state & STATE_JOG)) { sys.suspend |= SUSPEND_MOTION_CANCEL; } // NOTE: State is STATE_CYCLE.
 80060c0:	70a1      	strb	r1, [r4, #2]
 80060c2:	e788      	b.n	8005fd6 <protocol_execute_realtime+0x282>
        else if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_ENABLED) { sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE; }
 80060c4:	07d9      	lsls	r1, r3, #31
 80060c6:	f57f ae95 	bpl.w	8005df4 <protocol_execute_realtime+0xa0>
 80060ca:	f043 0304 	orr.w	r3, r3, #4
 80060ce:	72e3      	strb	r3, [r4, #11]
 80060d0:	e7a9      	b.n	8006026 <protocol_execute_realtime+0x2d2>
        if (sys.state == STATE_ALARM) { sys.suspend |= (SUSPEND_RETRACT_COMPLETE|SUSPEND_HOLD_COMPLETE); }
 80060d2:	78a3      	ldrb	r3, [r4, #2]
 80060d4:	f043 0305 	orr.w	r3, r3, #5
 80060d8:	70a3      	strb	r3, [r4, #2]
 80060da:	e7c3      	b.n	8006064 <protocol_execute_realtime+0x310>
            st_update_plan_block_parameters(); // Notify stepper module to recompute for hold deceleration.
 80060dc:	f002 fd28 	bl	8008b30 <st_update_plan_block_parameters>
            sys.step_control = STEP_CONTROL_EXECUTE_HOLD; // Initiate suspend state with active flag.
 80060e0:	2202      	movs	r2, #2
            if (sys.state == STATE_JOG) { // Jog cancelled upon any hold event, except for sleeping.
 80060e2:	7823      	ldrb	r3, [r4, #0]
            sys.step_control = STEP_CONTROL_EXECUTE_HOLD; // Initiate suspend state with active flag.
 80060e4:	7122      	strb	r2, [r4, #4]
            if (sys.state == STATE_JOG) { // Jog cancelled upon any hold event, except for sleeping.
 80060e6:	2b20      	cmp	r3, #32
 80060e8:	f47f af46 	bne.w	8005f78 <protocol_execute_realtime+0x224>
              if (!(rt_exec & EXEC_SLEEP)) { sys.suspend |= SUSPEND_JOG_CANCEL; } 
 80060ec:	b26e      	sxtb	r6, r5
 80060ee:	2e00      	cmp	r6, #0
 80060f0:	f6ff af4d 	blt.w	8005f8e <protocol_execute_realtime+0x23a>
 80060f4:	78a3      	ldrb	r3, [r4, #2]
 80060f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80060fa:	70a3      	strb	r3, [r4, #2]
 80060fc:	e747      	b.n	8005f8e <protocol_execute_realtime+0x23a>
              sys.state = STATE_CYCLE;
 80060fe:	2208      	movs	r2, #8
              sys.suspend = SUSPEND_DISABLE; // Break suspend state.
 8006100:	70a3      	strb	r3, [r4, #2]
              sys.state = STATE_CYCLE;
 8006102:	7022      	strb	r2, [r4, #0]
              st_prep_buffer(); // Initialize step segment buffer before beginning cycle.
 8006104:	f002 fd2a 	bl	8008b5c <st_prep_buffer>
              st_wake_up();
 8006108:	f002 f98c 	bl	8008424 <st_wake_up>
 800610c:	e65a      	b.n	8005dc4 <protocol_execute_realtime+0x70>
          } else if (sys.suspend & SUSPEND_RETRACT_COMPLETE) {
 800610e:	075e      	lsls	r6, r3, #29
 8006110:	f57f ae58 	bpl.w	8005dc4 <protocol_execute_realtime+0x70>
            sys.suspend |= SUSPEND_INITIATE_RESTORE;
 8006114:	f043 0308 	orr.w	r3, r3, #8
 8006118:	70a3      	strb	r3, [r4, #2]
 800611a:	e653      	b.n	8005dc4 <protocol_execute_realtime+0x70>
              if (sys.suspend & SUSPEND_INITIATE_RESTORE) { // Actively restoring
 800611c:	071a      	lsls	r2, r3, #28
 800611e:	f57f af45 	bpl.w	8005fac <protocol_execute_realtime+0x258>
                sys.suspend &= ~(SUSPEND_RETRACT_COMPLETE | SUSPEND_INITIATE_RESTORE | SUSPEND_RESTORE_COMPLETE);
 8006122:	f023 031c 	bic.w	r3, r3, #28
                sys.suspend |= SUSPEND_RESTART_RETRACT;
 8006126:	f043 0302 	orr.w	r3, r3, #2
 800612a:	e73f      	b.n	8005fac <protocol_execute_realtime+0x258>
 800612c:	78a1      	ldrb	r1, [r4, #2]
 800612e:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8006132:	e7c4      	b.n	80060be <protocol_execute_realtime+0x36a>
 8006134:	200010dd 	.word	0x200010dd

08006138 <protocol_buffer_synchronize>:
{
 8006138:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (plan_get_current_block() != NULL) { // Check if there are any blocks in the buffer.
 800613c:	f7fe faa6 	bl	800468c <plan_get_current_block>
 8006140:	b110      	cbz	r0, 8006148 <protocol_buffer_synchronize+0x10>
    system_set_exec_state_flag(EXEC_CYCLE_START); // If so, execute them!
 8006142:	2002      	movs	r0, #2
 8006144:	f003 fd7a 	bl	8009c3c <system_set_exec_state_flag>
 8006148:	4eab      	ldr	r6, [pc, #684]	; (80063f8 <protocol_buffer_synchronize+0x2c0>)
 800614a:	4cac      	ldr	r4, [pc, #688]	; (80063fc <protocol_buffer_synchronize+0x2c4>)
 800614c:	4dac      	ldr	r5, [pc, #688]	; (8006400 <protocol_buffer_synchronize+0x2c8>)
  rt_exec = sys_rt_exec_motion_override; // Copy volatile sys_rt_exec_motion_override
 800614e:	f8df 82b8 	ldr.w	r8, [pc, #696]	; 8006408 <protocol_buffer_synchronize+0x2d0>
  rt_exec = sys_rt_exec_accessory_override;
 8006152:	4fac      	ldr	r7, [pc, #688]	; (8006404 <protocol_buffer_synchronize+0x2cc>)
        uint8_t coolant_state = gc_state.modal.coolant;
 8006154:	f8df 92b4 	ldr.w	r9, [pc, #692]	; 800640c <protocol_buffer_synchronize+0x2d4>
  rt_exec = sys_rt_exec_alarm; // Copy volatile sys_rt_exec_alarm.
 8006158:	7833      	ldrb	r3, [r6, #0]
  if (rt_exec) { // Enter only if any bit flag is true
 800615a:	f003 0aff 	and.w	sl, r3, #255	; 0xff
 800615e:	2b00      	cmp	r3, #0
 8006160:	f040 808b 	bne.w	800627a <protocol_buffer_synchronize+0x142>
  rt_exec = sys_rt_exec_state; // Copy volatile sys_rt_exec_state.
 8006164:	782b      	ldrb	r3, [r5, #0]
  if (rt_exec) {
 8006166:	f003 0aff 	and.w	sl, r3, #255	; 0xff
 800616a:	2b00      	cmp	r3, #0
 800616c:	d054      	beq.n	8006218 <protocol_buffer_synchronize+0xe0>
    if (rt_exec & EXEC_RESET) {
 800616e:	f01a 0f10 	tst.w	sl, #16
 8006172:	f040 8121 	bne.w	80063b8 <protocol_buffer_synchronize+0x280>
    if (rt_exec & EXEC_STATUS_REPORT) {
 8006176:	f01a 0f01 	tst.w	sl, #1
 800617a:	f040 8137 	bne.w	80063ec <protocol_buffer_synchronize+0x2b4>
    if (rt_exec & (EXEC_MOTION_CANCEL | EXEC_FEED_HOLD | EXEC_SAFETY_DOOR | EXEC_SLEEP)) {
 800617e:	f01a 0fe8 	tst.w	sl, #232	; 0xe8
 8006182:	d00c      	beq.n	800619e <protocol_buffer_synchronize+0x66>
      if (!(sys.state & (STATE_ALARM | STATE_CHECK_MODE))) {
 8006184:	7823      	ldrb	r3, [r4, #0]
 8006186:	0798      	lsls	r0, r3, #30
 8006188:	f000 8142 	beq.w	8006410 <protocol_buffer_synchronize+0x2d8>
 800618c:	fa4f fb8a 	sxtb.w	fp, sl
      if (rt_exec & EXEC_SLEEP) {
 8006190:	f1bb 0f00 	cmp.w	fp, #0
 8006194:	f2c0 8167 	blt.w	8006466 <protocol_buffer_synchronize+0x32e>
      system_clear_exec_state_flag((EXEC_MOTION_CANCEL | EXEC_FEED_HOLD | EXEC_SAFETY_DOOR | EXEC_SLEEP));
 8006198:	20e8      	movs	r0, #232	; 0xe8
 800619a:	f003 fd59 	bl	8009c50 <system_clear_exec_state_flag>
    if (rt_exec & EXEC_CYCLE_START) {
 800619e:	f01a 0f02 	tst.w	sl, #2
 80061a2:	d019      	beq.n	80061d8 <protocol_buffer_synchronize+0xa0>
      if (!(rt_exec & (EXEC_FEED_HOLD | EXEC_MOTION_CANCEL | EXEC_SAFETY_DOOR))) {
 80061a4:	f01a 0f68 	tst.w	sl, #104	; 0x68
 80061a8:	d113      	bne.n	80061d2 <protocol_buffer_synchronize+0x9a>
        if ((sys.state == STATE_SAFETY_DOOR) && !(sys.suspend & SUSPEND_SAFETY_DOOR_AJAR)) {
 80061aa:	7823      	ldrb	r3, [r4, #0]
 80061ac:	2b40      	cmp	r3, #64	; 0x40
 80061ae:	f000 81ca 	beq.w	8006546 <protocol_buffer_synchronize+0x40e>
        if ((sys.state == STATE_IDLE) || ((sys.state & STATE_HOLD) && (sys.suspend & SUSPEND_HOLD_COMPLETE))) {
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	f040 81b5 	bne.w	8006522 <protocol_buffer_synchronize+0x3ea>
            sys.step_control = STEP_CONTROL_NORMAL_OP; // Restore step control to normal operation
 80061b8:	2300      	movs	r3, #0
 80061ba:	7123      	strb	r3, [r4, #4]
            if (plan_get_current_block() && bit_isfalse(sys.suspend,SUSPEND_MOTION_CANCEL)) {
 80061bc:	f7fe fa66 	bl	800468c <plan_get_current_block>
 80061c0:	b120      	cbz	r0, 80061cc <protocol_buffer_synchronize+0x94>
 80061c2:	78a3      	ldrb	r3, [r4, #2]
 80061c4:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 80061c8:	f000 81d0 	beq.w	800656c <protocol_buffer_synchronize+0x434>
              sys.suspend = SUSPEND_DISABLE; // Break suspend state.
 80061cc:	2300      	movs	r3, #0
 80061ce:	70a3      	strb	r3, [r4, #2]
              sys.state = STATE_IDLE;
 80061d0:	7023      	strb	r3, [r4, #0]
      system_clear_exec_state_flag(EXEC_CYCLE_START);
 80061d2:	2002      	movs	r0, #2
 80061d4:	f003 fd3c 	bl	8009c50 <system_clear_exec_state_flag>
    if (rt_exec & EXEC_CYCLE_STOP) {
 80061d8:	f01a 0f04 	tst.w	sl, #4
 80061dc:	d01c      	beq.n	8006218 <protocol_buffer_synchronize+0xe0>
      if ((sys.state & (STATE_HOLD|STATE_SAFETY_DOOR|STATE_SLEEP)) && !(sys.soft_limit) && !(sys.suspend & SUSPEND_JOG_CANCEL)) {
 80061de:	7823      	ldrb	r3, [r4, #0]
 80061e0:	f013 0fd0 	tst.w	r3, #208	; 0xd0
 80061e4:	f000 80f0 	beq.w	80063c8 <protocol_buffer_synchronize+0x290>
 80061e8:	78e3      	ldrb	r3, [r4, #3]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	f040 80ec 	bne.w	80063c8 <protocol_buffer_synchronize+0x290>
 80061f0:	f994 3002 	ldrsb.w	r3, [r4, #2]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	f2c0 8178 	blt.w	80064ea <protocol_buffer_synchronize+0x3b2>
        plan_cycle_reinitialize();
 80061fa:	f7fe fdb5 	bl	8004d68 <plan_cycle_reinitialize>
        if (sys.step_control & STEP_CONTROL_EXECUTE_HOLD) { sys.suspend |= SUSPEND_HOLD_COMPLETE; }
 80061fe:	7923      	ldrb	r3, [r4, #4]
 8006200:	079a      	lsls	r2, r3, #30
 8006202:	d503      	bpl.n	800620c <protocol_buffer_synchronize+0xd4>
 8006204:	78a2      	ldrb	r2, [r4, #2]
 8006206:	f042 0201 	orr.w	r2, r2, #1
 800620a:	70a2      	strb	r2, [r4, #2]
        bit_false(sys.step_control,(STEP_CONTROL_EXECUTE_HOLD | STEP_CONTROL_EXECUTE_SYS_MOTION));
 800620c:	f023 0306 	bic.w	r3, r3, #6
      system_clear_exec_state_flag(EXEC_CYCLE_STOP);
 8006210:	2004      	movs	r0, #4
        bit_false(sys.step_control,(STEP_CONTROL_EXECUTE_HOLD | STEP_CONTROL_EXECUTE_SYS_MOTION));
 8006212:	7123      	strb	r3, [r4, #4]
      system_clear_exec_state_flag(EXEC_CYCLE_STOP);
 8006214:	f003 fd1c 	bl	8009c50 <system_clear_exec_state_flag>
  rt_exec = sys_rt_exec_motion_override; // Copy volatile sys_rt_exec_motion_override
 8006218:	f898 3000 	ldrb.w	r3, [r8]
  if (rt_exec) {
 800621c:	f003 0aff 	and.w	sl, r3, #255	; 0xff
 8006220:	2b00      	cmp	r3, #0
 8006222:	f040 8089 	bne.w	8006338 <protocol_buffer_synchronize+0x200>
  rt_exec = sys_rt_exec_accessory_override;
 8006226:	783b      	ldrb	r3, [r7, #0]
  if (rt_exec) {
 8006228:	f003 0aff 	and.w	sl, r3, #255	; 0xff
 800622c:	2b00      	cmp	r3, #0
 800622e:	d133      	bne.n	8006298 <protocol_buffer_synchronize+0x160>
 8006230:	7823      	ldrb	r3, [r4, #0]
  if (sys.state & (STATE_CYCLE | STATE_HOLD | STATE_SAFETY_DOOR | STATE_HOMING | STATE_SLEEP| STATE_JOG)) {
 8006232:	f013 0ffc 	tst.w	r3, #252	; 0xfc
 8006236:	d118      	bne.n	800626a <protocol_buffer_synchronize+0x132>
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 8006238:	78a3      	ldrb	r3, [r4, #2]
 800623a:	b9db      	cbnz	r3, 8006274 <protocol_buffer_synchronize+0x13c>
    if (sys.abort) { return; } // Check for system abort
 800623c:	7863      	ldrb	r3, [r4, #1]
 800623e:	2b00      	cmp	r3, #0
 8006240:	f040 80c0 	bne.w	80063c4 <protocol_buffer_synchronize+0x28c>
  } while (plan_get_current_block() || (sys.state == STATE_CYCLE));
 8006244:	f7fe fa22 	bl	800468c <plan_get_current_block>
 8006248:	2800      	cmp	r0, #0
 800624a:	d185      	bne.n	8006158 <protocol_buffer_synchronize+0x20>
 800624c:	7823      	ldrb	r3, [r4, #0]
 800624e:	2b08      	cmp	r3, #8
 8006250:	d082      	beq.n	8006158 <protocol_buffer_synchronize+0x20>
 8006252:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (!(sys.spindle_stop_ovr)) { sys.spindle_stop_ovr = SPINDLE_STOP_OVR_INITIATE; }
 8006256:	7ae3      	ldrb	r3, [r4, #11]
 8006258:	2b00      	cmp	r3, #0
 800625a:	f000 8159 	beq.w	8006510 <protocol_buffer_synchronize+0x3d8>
        else if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_ENABLED) { sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE; }
 800625e:	07d9      	lsls	r1, r3, #31
 8006260:	f100 818c 	bmi.w	800657c <protocol_buffer_synchronize+0x444>
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 8006264:	f01a 0fc0 	tst.w	sl, #192	; 0xc0
 8006268:	d14f      	bne.n	800630a <protocol_buffer_synchronize+0x1d2>
    st_prep_buffer();
 800626a:	f002 fc77 	bl	8008b5c <st_prep_buffer>
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 800626e:	78a3      	ldrb	r3, [r4, #2]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d0e3      	beq.n	800623c <protocol_buffer_synchronize+0x104>
 8006274:	f7ff fa36 	bl	80056e4 <protocol_exec_rt_suspend>
 8006278:	e7e0      	b.n	800623c <protocol_buffer_synchronize+0x104>
    sys.state = STATE_ALARM; // Set system alarm state
 800627a:	f04f 0b01 	mov.w	fp, #1
    report_alarm_message(rt_exec);
 800627e:	4650      	mov	r0, sl
    if ((rt_exec == EXEC_ALARM_HARD_LIMIT) || (rt_exec == EXEC_ALARM_SOFT_LIMIT)) {
 8006280:	f10a 3aff 	add.w	sl, sl, #4294967295
    sys.state = STATE_ALARM; // Set system alarm state
 8006284:	f884 b000 	strb.w	fp, [r4]
    report_alarm_message(rt_exec);
 8006288:	f000 fa64 	bl	8006754 <report_alarm_message>
    if ((rt_exec == EXEC_ALARM_HARD_LIMIT) || (rt_exec == EXEC_ALARM_SOFT_LIMIT)) {
 800628c:	45da      	cmp	sl, fp
 800628e:	f240 8118 	bls.w	80064c2 <protocol_buffer_synchronize+0x38a>
    system_clear_exec_alarm(); // Clear alarm
 8006292:	f003 fcef 	bl	8009c74 <system_clear_exec_alarm>
 8006296:	e765      	b.n	8006164 <protocol_buffer_synchronize+0x2c>
    system_clear_exec_accessory_overrides(); // Clear all accessory override flags.
 8006298:	f003 fd10 	bl	8009cbc <system_clear_exec_accessory_overrides>
    uint8_t last_s_override =  sys.spindle_speed_ovr;
 800629c:	f01a 0f01 	tst.w	sl, #1
 80062a0:	bf18      	it	ne
 80062a2:	2364      	movne	r3, #100	; 0x64
 80062a4:	7aa2      	ldrb	r2, [r4, #10]
 80062a6:	bf08      	it	eq
 80062a8:	4613      	moveq	r3, r2
    if (rt_exec & EXEC_SPINDLE_OVR_COARSE_PLUS) { last_s_override += SPINDLE_OVERRIDE_COARSE_INCREMENT; }
 80062aa:	f01a 0f02 	tst.w	sl, #2
 80062ae:	bf1c      	itt	ne
 80062b0:	330a      	addne	r3, #10
 80062b2:	b2db      	uxtbne	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_COARSE_MINUS) { last_s_override -= SPINDLE_OVERRIDE_COARSE_INCREMENT; }
 80062b4:	f01a 0f04 	tst.w	sl, #4
 80062b8:	bf1c      	itt	ne
 80062ba:	3b0a      	subne	r3, #10
 80062bc:	b2db      	uxtbne	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_FINE_PLUS) { last_s_override += SPINDLE_OVERRIDE_FINE_INCREMENT; }
 80062be:	f01a 0f08 	tst.w	sl, #8
 80062c2:	bf1c      	itt	ne
 80062c4:	3301      	addne	r3, #1
 80062c6:	b2db      	uxtbne	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_FINE_MINUS) { last_s_override -= SPINDLE_OVERRIDE_FINE_INCREMENT; }
 80062c8:	f01a 0f10 	tst.w	sl, #16
 80062cc:	bf1c      	itt	ne
 80062ce:	f103 33ff 	addne.w	r3, r3, #4294967295
 80062d2:	b2db      	uxtbne	r3, r3
    last_s_override = max(last_s_override,MIN_SPINDLE_SPEED_OVERRIDE);
 80062d4:	2bc8      	cmp	r3, #200	; 0xc8
 80062d6:	bf28      	it	cs
 80062d8:	23c8      	movcs	r3, #200	; 0xc8
 80062da:	2b0a      	cmp	r3, #10
 80062dc:	bf38      	it	cc
 80062de:	230a      	movcc	r3, #10
    if (last_s_override != sys.spindle_speed_ovr) {
 80062e0:	429a      	cmp	r2, r3
 80062e2:	d006      	beq.n	80062f2 <protocol_buffer_synchronize+0x1ba>
      sys.report_ovr_counter = 0; // Set to report change immediately
 80062e4:	2100      	movs	r1, #0
      bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 80062e6:	7922      	ldrb	r2, [r4, #4]
      sys.spindle_speed_ovr = last_s_override;
 80062e8:	72a3      	strb	r3, [r4, #10]
      bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 80062ea:	f042 0308 	orr.w	r3, r2, #8
 80062ee:	7123      	strb	r3, [r4, #4]
      sys.report_ovr_counter = 0; // Set to report change immediately
 80062f0:	7321      	strb	r1, [r4, #12]
    if (rt_exec & EXEC_SPINDLE_OVR_STOP) {
 80062f2:	f01a 0f20 	tst.w	sl, #32
      if (sys.state == STATE_HOLD) {
 80062f6:	7823      	ldrb	r3, [r4, #0]
    if (rt_exec & EXEC_SPINDLE_OVR_STOP) {
 80062f8:	d001      	beq.n	80062fe <protocol_buffer_synchronize+0x1c6>
      if (sys.state == STATE_HOLD) {
 80062fa:	2b10      	cmp	r3, #16
 80062fc:	d0ab      	beq.n	8006256 <protocol_buffer_synchronize+0x11e>
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 80062fe:	f01a 0fc0 	tst.w	sl, #192	; 0xc0
 8006302:	d096      	beq.n	8006232 <protocol_buffer_synchronize+0xfa>
      if ((sys.state == STATE_IDLE) || (sys.state & (STATE_CYCLE | STATE_HOLD))) {
 8006304:	2b00      	cmp	r3, #0
 8006306:	f040 80b7 	bne.w	8006478 <protocol_buffer_synchronize+0x340>
          if (rt_exec & EXEC_COOLANT_MIST_OVR_TOGGLE) {
 800630a:	f01a 0f80 	tst.w	sl, #128	; 0x80
        uint8_t coolant_state = gc_state.modal.coolant;
 800630e:	f899 b008 	ldrb.w	fp, [r9, #8]
          if (rt_exec & EXEC_COOLANT_MIST_OVR_TOGGLE) {
 8006312:	f040 80bb 	bne.w	800648c <protocol_buffer_synchronize+0x354>
          if (rt_exec & EXEC_COOLANT_FLOOD_OVR_TOGGLE) {
 8006316:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800631a:	d006      	beq.n	800632a <protocol_buffer_synchronize+0x1f2>
            if (coolant_state & COOLANT_FLOOD_ENABLE) { bit_false(coolant_state,COOLANT_FLOOD_ENABLE); }
 800631c:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8006320:	bf14      	ite	ne
 8006322:	f00b 0bbf 	andne.w	fp, fp, #191	; 0xbf
            else { coolant_state |= COOLANT_FLOOD_ENABLE; }
 8006326:	f04b 0b40 	orreq.w	fp, fp, #64	; 0x40
        coolant_set_state(coolant_state); // Report counter set in coolant_set_state().
 800632a:	4658      	mov	r0, fp
 800632c:	f7fb fcaa 	bl	8001c84 <coolant_set_state>
 8006330:	7823      	ldrb	r3, [r4, #0]
        gc_state.modal.coolant = coolant_state;
 8006332:	f889 b008 	strb.w	fp, [r9, #8]
 8006336:	e77c      	b.n	8006232 <protocol_buffer_synchronize+0xfa>
    system_clear_exec_motion_overrides(); // Clear all motion override flags.
 8006338:	f003 fcb8 	bl	8009cac <system_clear_exec_motion_overrides>
    uint8_t new_f_override =  sys.f_override;
 800633c:	f01a 0f01 	tst.w	sl, #1
 8006340:	bf18      	it	ne
 8006342:	2364      	movne	r3, #100	; 0x64
 8006344:	7a22      	ldrb	r2, [r4, #8]
    uint8_t new_r_override = sys.r_override;
 8006346:	7a60      	ldrb	r0, [r4, #9]
    uint8_t new_f_override =  sys.f_override;
 8006348:	bf08      	it	eq
 800634a:	4613      	moveq	r3, r2
    if (rt_exec & EXEC_FEED_OVR_COARSE_PLUS) { new_f_override += FEED_OVERRIDE_COARSE_INCREMENT; }
 800634c:	f01a 0f02 	tst.w	sl, #2
 8006350:	bf1c      	itt	ne
 8006352:	330a      	addne	r3, #10
 8006354:	b2db      	uxtbne	r3, r3
    if (rt_exec & EXEC_FEED_OVR_COARSE_MINUS) { new_f_override -= FEED_OVERRIDE_COARSE_INCREMENT; }
 8006356:	f01a 0f04 	tst.w	sl, #4
 800635a:	bf1c      	itt	ne
 800635c:	3b0a      	subne	r3, #10
 800635e:	b2db      	uxtbne	r3, r3
    if (rt_exec & EXEC_FEED_OVR_FINE_PLUS) { new_f_override += FEED_OVERRIDE_FINE_INCREMENT; }
 8006360:	f01a 0f08 	tst.w	sl, #8
 8006364:	bf1c      	itt	ne
 8006366:	3301      	addne	r3, #1
 8006368:	b2db      	uxtbne	r3, r3
    if (rt_exec & EXEC_FEED_OVR_FINE_MINUS) { new_f_override -= FEED_OVERRIDE_FINE_INCREMENT; }
 800636a:	f01a 0f10 	tst.w	sl, #16
 800636e:	bf1c      	itt	ne
 8006370:	f103 33ff 	addne.w	r3, r3, #4294967295
 8006374:	b2db      	uxtbne	r3, r3
    new_f_override = max(new_f_override,MIN_FEED_RATE_OVERRIDE);
 8006376:	2bc8      	cmp	r3, #200	; 0xc8
 8006378:	bf28      	it	cs
 800637a:	23c8      	movcs	r3, #200	; 0xc8
 800637c:	2b0a      	cmp	r3, #10
 800637e:	bf38      	it	cc
 8006380:	230a      	movcc	r3, #10
    uint8_t new_r_override = sys.r_override;
 8006382:	f01a 0f20 	tst.w	sl, #32
 8006386:	bf14      	ite	ne
 8006388:	2164      	movne	r1, #100	; 0x64
 800638a:	4601      	moveq	r1, r0
    if (rt_exec & EXEC_RAPID_OVR_MEDIUM) { new_r_override = RAPID_OVERRIDE_MEDIUM; }
 800638c:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8006390:	bf18      	it	ne
 8006392:	2132      	movne	r1, #50	; 0x32
    if (rt_exec & EXEC_RAPID_OVR_LOW) { new_r_override = RAPID_OVERRIDE_LOW; }
 8006394:	f01a 0f80 	tst.w	sl, #128	; 0x80
 8006398:	bf18      	it	ne
 800639a:	2119      	movne	r1, #25
    if ((new_f_override != sys.f_override) || (new_r_override != sys.r_override)) {
 800639c:	429a      	cmp	r2, r3
 800639e:	d102      	bne.n	80063a6 <protocol_buffer_synchronize+0x26e>
 80063a0:	4288      	cmp	r0, r1
 80063a2:	f43f af40 	beq.w	8006226 <protocol_buffer_synchronize+0xee>
      sys.report_ovr_counter = 0; // Set to report change immediately
 80063a6:	2200      	movs	r2, #0
      sys.f_override = new_f_override;
 80063a8:	7223      	strb	r3, [r4, #8]
      sys.r_override = new_r_override;
 80063aa:	7261      	strb	r1, [r4, #9]
      sys.report_ovr_counter = 0; // Set to report change immediately
 80063ac:	7322      	strb	r2, [r4, #12]
      plan_update_velocity_profile_parameters();
 80063ae:	f7fe f9df 	bl	8004770 <plan_update_velocity_profile_parameters>
      plan_cycle_reinitialize();
 80063b2:	f7fe fcd9 	bl	8004d68 <plan_cycle_reinitialize>
 80063b6:	e736      	b.n	8006226 <protocol_buffer_synchronize+0xee>
      sys.abort = true;  // Only place this is set true.
 80063b8:	2201      	movs	r2, #1
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 80063ba:	78a3      	ldrb	r3, [r4, #2]
      sys.abort = true;  // Only place this is set true.
 80063bc:	7062      	strb	r2, [r4, #1]
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 80063be:	2b00      	cmp	r3, #0
 80063c0:	f47f af58 	bne.w	8006274 <protocol_buffer_synchronize+0x13c>
 80063c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (sys.suspend & SUSPEND_JOG_CANCEL) {   // For jog cancel, flush buffers and sync positions.
 80063c8:	78a3      	ldrb	r3, [r4, #2]
 80063ca:	0618      	lsls	r0, r3, #24
 80063cc:	f100 808d 	bmi.w	80064ea <protocol_buffer_synchronize+0x3b2>
        if (sys.suspend & SUSPEND_SAFETY_DOOR_AJAR) { // Only occurs when safety door opens during jog.
 80063d0:	f013 0220 	ands.w	r2, r3, #32
 80063d4:	d04d      	beq.n	8006472 <protocol_buffer_synchronize+0x33a>
          sys.state = STATE_SAFETY_DOOR;
 80063d6:	2240      	movs	r2, #64	; 0x40
          sys.suspend &= ~(SUSPEND_JOG_CANCEL);
 80063d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
          sys.suspend |= SUSPEND_HOLD_COMPLETE;
 80063dc:	f043 0301 	orr.w	r3, r3, #1
 80063e0:	70a3      	strb	r3, [r4, #2]
          sys.state = STATE_SAFETY_DOOR;
 80063e2:	7022      	strb	r2, [r4, #0]
      system_clear_exec_state_flag(EXEC_CYCLE_STOP);
 80063e4:	2004      	movs	r0, #4
 80063e6:	f003 fc33 	bl	8009c50 <system_clear_exec_state_flag>
 80063ea:	e715      	b.n	8006218 <protocol_buffer_synchronize+0xe0>
      report_realtime_status();
 80063ec:	f000 ff4c 	bl	8007288 <report_realtime_status>
      system_clear_exec_state_flag(EXEC_STATUS_REPORT);
 80063f0:	2001      	movs	r0, #1
 80063f2:	f003 fc2d 	bl	8009c50 <system_clear_exec_state_flag>
 80063f6:	e6c2      	b.n	800617e <protocol_buffer_synchronize+0x46>
 80063f8:	20001100 	.word	0x20001100
 80063fc:	200010c8 	.word	0x200010c8
 8006400:	200010dd 	.word	0x200010dd
 8006404:	200010dc 	.word	0x200010dc
 8006408:	200010c4 	.word	0x200010c4
 800640c:	2000102c 	.word	0x2000102c
        if (sys.state & (STATE_CYCLE | STATE_JOG)) {
 8006410:	f013 0f28 	tst.w	r3, #40	; 0x28
 8006414:	d049      	beq.n	80064aa <protocol_buffer_synchronize+0x372>
          if (!(sys.suspend & (SUSPEND_MOTION_CANCEL | SUSPEND_JOG_CANCEL))) { // Block, if already holding.
 8006416:	78a2      	ldrb	r2, [r4, #2]
 8006418:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 800641c:	d03e      	beq.n	800649c <protocol_buffer_synchronize+0x364>
        if (rt_exec & EXEC_MOTION_CANCEL) {
 800641e:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8006422:	fa4f fb8a 	sxtb.w	fp, sl
 8006426:	d16c      	bne.n	8006502 <protocol_buffer_synchronize+0x3ca>
        if (rt_exec & EXEC_FEED_HOLD) {
 8006428:	f01a 0f08 	tst.w	sl, #8
 800642c:	d002      	beq.n	8006434 <protocol_buffer_synchronize+0x2fc>
          if (!(sys.state & (STATE_SAFETY_DOOR | STATE_JOG | STATE_SLEEP))) { sys.state = STATE_HOLD; }
 800642e:	f013 0fe0 	tst.w	r3, #224	; 0xe0
 8006432:	d053      	beq.n	80064dc <protocol_buffer_synchronize+0x3a4>
        if (rt_exec & EXEC_SAFETY_DOOR) {
 8006434:	f01a 0f20 	tst.w	sl, #32
 8006438:	f43f aeaa 	beq.w	8006190 <protocol_buffer_synchronize+0x58>
          report_feedback_message(MESSAGE_SAFETY_DOOR_AJAR);
 800643c:	2006      	movs	r0, #6
 800643e:	f000 f99f 	bl	8006780 <report_feedback_message>
          if (!(sys.suspend & SUSPEND_JOG_CANCEL)) {
 8006442:	78a3      	ldrb	r3, [r4, #2]
 8006444:	061a      	lsls	r2, r3, #24
 8006446:	d407      	bmi.n	8006458 <protocol_buffer_synchronize+0x320>
            if (sys.state == STATE_SAFETY_DOOR) {
 8006448:	7822      	ldrb	r2, [r4, #0]
 800644a:	2a40      	cmp	r2, #64	; 0x40
 800644c:	f000 80a7 	beq.w	800659e <protocol_buffer_synchronize+0x466>
            if (sys.state != STATE_SLEEP) { sys.state = STATE_SAFETY_DOOR; }
 8006450:	2a80      	cmp	r2, #128	; 0x80
 8006452:	d001      	beq.n	8006458 <protocol_buffer_synchronize+0x320>
 8006454:	2240      	movs	r2, #64	; 0x40
 8006456:	7022      	strb	r2, [r4, #0]
          sys.suspend |= SUSPEND_SAFETY_DOOR_AJAR;
 8006458:	f043 0320 	orr.w	r3, r3, #32
      if (rt_exec & EXEC_SLEEP) {
 800645c:	f1bb 0f00 	cmp.w	fp, #0
          sys.suspend |= SUSPEND_SAFETY_DOOR_AJAR;
 8006460:	70a3      	strb	r3, [r4, #2]
      if (rt_exec & EXEC_SLEEP) {
 8006462:	f6bf ae99 	bge.w	8006198 <protocol_buffer_synchronize+0x60>
        if (sys.state == STATE_ALARM) { sys.suspend |= (SUSPEND_RETRACT_COMPLETE|SUSPEND_HOLD_COMPLETE); }
 8006466:	7823      	ldrb	r3, [r4, #0]
 8006468:	2b01      	cmp	r3, #1
 800646a:	d07a      	beq.n	8006562 <protocol_buffer_synchronize+0x42a>
        sys.state = STATE_SLEEP; 
 800646c:	2380      	movs	r3, #128	; 0x80
 800646e:	7023      	strb	r3, [r4, #0]
 8006470:	e692      	b.n	8006198 <protocol_buffer_synchronize+0x60>
          sys.suspend = SUSPEND_DISABLE;
 8006472:	70a2      	strb	r2, [r4, #2]
          sys.state = STATE_IDLE;
 8006474:	7022      	strb	r2, [r4, #0]
 8006476:	e7b5      	b.n	80063e4 <protocol_buffer_synchronize+0x2ac>
      if ((sys.state == STATE_IDLE) || (sys.state & (STATE_CYCLE | STATE_HOLD))) {
 8006478:	f013 0f18 	tst.w	r3, #24
 800647c:	f43f aed9 	beq.w	8006232 <protocol_buffer_synchronize+0xfa>
          if (rt_exec & EXEC_COOLANT_MIST_OVR_TOGGLE) {
 8006480:	f01a 0f80 	tst.w	sl, #128	; 0x80
        uint8_t coolant_state = gc_state.modal.coolant;
 8006484:	f899 b008 	ldrb.w	fp, [r9, #8]
          if (rt_exec & EXEC_COOLANT_MIST_OVR_TOGGLE) {
 8006488:	f43f af45 	beq.w	8006316 <protocol_buffer_synchronize+0x1de>
            if (coolant_state & COOLANT_MIST_ENABLE) { bit_false(coolant_state,COOLANT_MIST_ENABLE); }
 800648c:	f01b 0f80 	tst.w	fp, #128	; 0x80
 8006490:	bf14      	ite	ne
 8006492:	f00b 0b7f 	andne.w	fp, fp, #127	; 0x7f
            else { coolant_state |= COOLANT_MIST_ENABLE; }
 8006496:	f04b 0b80 	orreq.w	fp, fp, #128	; 0x80
 800649a:	e73c      	b.n	8006316 <protocol_buffer_synchronize+0x1de>
            st_update_plan_block_parameters(); // Notify stepper module to recompute for hold deceleration.
 800649c:	f002 fb48 	bl	8008b30 <st_update_plan_block_parameters>
            sys.step_control = STEP_CONTROL_EXECUTE_HOLD; // Initiate suspend state with active flag.
 80064a0:	2202      	movs	r2, #2
            if (sys.state == STATE_JOG) { // Jog cancelled upon any hold event, except for sleeping.
 80064a2:	7823      	ldrb	r3, [r4, #0]
            sys.step_control = STEP_CONTROL_EXECUTE_HOLD; // Initiate suspend state with active flag.
 80064a4:	7122      	strb	r2, [r4, #4]
            if (sys.state == STATE_JOG) { // Jog cancelled upon any hold event, except for sleeping.
 80064a6:	2b20      	cmp	r3, #32
 80064a8:	d06e      	beq.n	8006588 <protocol_buffer_synchronize+0x450>
        if (sys.state == STATE_IDLE) { sys.suspend = SUSPEND_HOLD_COMPLETE; }
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d1b7      	bne.n	800641e <protocol_buffer_synchronize+0x2e6>
 80064ae:	2201      	movs	r2, #1
        if (rt_exec & EXEC_MOTION_CANCEL) {
 80064b0:	f01a 0f40 	tst.w	sl, #64	; 0x40
        if (sys.state == STATE_IDLE) { sys.suspend = SUSPEND_HOLD_COMPLETE; }
 80064b4:	70a2      	strb	r2, [r4, #2]
 80064b6:	fa4f fb8a 	sxtb.w	fp, sl
        if (rt_exec & EXEC_MOTION_CANCEL) {
 80064ba:	d00c      	beq.n	80064d6 <protocol_buffer_synchronize+0x39e>
 80064bc:	2241      	movs	r2, #65	; 0x41
          if (!(sys.state & STATE_JOG)) { sys.suspend |= SUSPEND_MOTION_CANCEL; } // NOTE: State is STATE_CYCLE.
 80064be:	70a2      	strb	r2, [r4, #2]
 80064c0:	e7b2      	b.n	8006428 <protocol_buffer_synchronize+0x2f0>
      report_feedback_message(MESSAGE_CRITICAL_EVENT);
 80064c2:	4658      	mov	r0, fp
 80064c4:	f000 f95c 	bl	8006780 <report_feedback_message>
      system_clear_exec_state_flag(EXEC_RESET); // Disable any existing reset
 80064c8:	2010      	movs	r0, #16
 80064ca:	f003 fbc1 	bl	8009c50 <system_clear_exec_state_flag>
      } while (bit_isfalse(sys_rt_exec_state,EXEC_RESET));
 80064ce:	782b      	ldrb	r3, [r5, #0]
 80064d0:	06db      	lsls	r3, r3, #27
 80064d2:	d5fc      	bpl.n	80064ce <protocol_buffer_synchronize+0x396>
 80064d4:	e6dd      	b.n	8006292 <protocol_buffer_synchronize+0x15a>
        if (rt_exec & EXEC_FEED_HOLD) {
 80064d6:	f01a 0f08 	tst.w	sl, #8
 80064da:	d0ab      	beq.n	8006434 <protocol_buffer_synchronize+0x2fc>
          if (!(sys.state & (STATE_SAFETY_DOOR | STATE_JOG | STATE_SLEEP))) { sys.state = STATE_HOLD; }
 80064dc:	2310      	movs	r3, #16
        if (rt_exec & EXEC_SAFETY_DOOR) {
 80064de:	f01a 0f20 	tst.w	sl, #32
          if (!(sys.state & (STATE_SAFETY_DOOR | STATE_JOG | STATE_SLEEP))) { sys.state = STATE_HOLD; }
 80064e2:	7023      	strb	r3, [r4, #0]
        if (rt_exec & EXEC_SAFETY_DOOR) {
 80064e4:	f43f ae54 	beq.w	8006190 <protocol_buffer_synchronize+0x58>
 80064e8:	e7a8      	b.n	800643c <protocol_buffer_synchronize+0x304>
          sys.step_control = STEP_CONTROL_NORMAL_OP;
 80064ea:	2300      	movs	r3, #0
 80064ec:	7123      	strb	r3, [r4, #4]
          plan_reset();
 80064ee:	f7fe f88b 	bl	8004608 <plan_reset>
          st_reset();
 80064f2:	f002 f9bb 	bl	800886c <st_reset>
          gc_sync_position();
 80064f6:	f7fb fcc7 	bl	8001e88 <gc_sync_position>
          plan_sync_position();
 80064fa:	f7fe fc17 	bl	8004d2c <plan_sync_position>
 80064fe:	78a3      	ldrb	r3, [r4, #2]
 8006500:	e766      	b.n	80063d0 <protocol_buffer_synchronize+0x298>
          if (!(sys.state & STATE_JOG)) { sys.suspend |= SUSPEND_MOTION_CANCEL; } // NOTE: State is STATE_CYCLE.
 8006502:	0699      	lsls	r1, r3, #26
 8006504:	d490      	bmi.n	8006428 <protocol_buffer_synchronize+0x2f0>
 8006506:	78a2      	ldrb	r2, [r4, #2]
 8006508:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800650c:	70a2      	strb	r2, [r4, #2]
 800650e:	e78b      	b.n	8006428 <protocol_buffer_synchronize+0x2f0>
        if (!(sys.spindle_stop_ovr)) { sys.spindle_stop_ovr = SPINDLE_STOP_OVR_INITIATE; }
 8006510:	2302      	movs	r3, #2
 8006512:	72e3      	strb	r3, [r4, #11]
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 8006514:	f01a 0fc0 	tst.w	sl, #192	; 0xc0
 8006518:	f47f aef7 	bne.w	800630a <protocol_buffer_synchronize+0x1d2>
    st_prep_buffer();
 800651c:	f002 fb1e 	bl	8008b5c <st_prep_buffer>
 8006520:	e6a5      	b.n	800626e <protocol_buffer_synchronize+0x136>
        if ((sys.state == STATE_IDLE) || ((sys.state & STATE_HOLD) && (sys.suspend & SUSPEND_HOLD_COMPLETE))) {
 8006522:	06da      	lsls	r2, r3, #27
 8006524:	f57f ae55 	bpl.w	80061d2 <protocol_buffer_synchronize+0x9a>
 8006528:	78a2      	ldrb	r2, [r4, #2]
 800652a:	07d1      	lsls	r1, r2, #31
 800652c:	f57f ae51 	bpl.w	80061d2 <protocol_buffer_synchronize+0x9a>
          if (sys.state == STATE_HOLD && sys.spindle_stop_ovr) {
 8006530:	2b10      	cmp	r3, #16
 8006532:	f47f ae41 	bne.w	80061b8 <protocol_buffer_synchronize+0x80>
 8006536:	7ae3      	ldrb	r3, [r4, #11]
 8006538:	2b00      	cmp	r3, #0
 800653a:	f43f ae3d 	beq.w	80061b8 <protocol_buffer_synchronize+0x80>
            sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE_CYCLE; // Set to restore in suspend routine and cycle start after.
 800653e:	f043 0308 	orr.w	r3, r3, #8
 8006542:	72e3      	strb	r3, [r4, #11]
 8006544:	e645      	b.n	80061d2 <protocol_buffer_synchronize+0x9a>
        if ((sys.state == STATE_SAFETY_DOOR) && !(sys.suspend & SUSPEND_SAFETY_DOOR_AJAR)) {
 8006546:	78a3      	ldrb	r3, [r4, #2]
 8006548:	f013 0220 	ands.w	r2, r3, #32
 800654c:	f47f ae41 	bne.w	80061d2 <protocol_buffer_synchronize+0x9a>
          if (sys.suspend & SUSPEND_RESTORE_COMPLETE) {
 8006550:	06d9      	lsls	r1, r3, #27
 8006552:	d417      	bmi.n	8006584 <protocol_buffer_synchronize+0x44c>
          } else if (sys.suspend & SUSPEND_RETRACT_COMPLETE) {
 8006554:	0758      	lsls	r0, r3, #29
 8006556:	f57f ae3c 	bpl.w	80061d2 <protocol_buffer_synchronize+0x9a>
            sys.suspend |= SUSPEND_INITIATE_RESTORE;
 800655a:	f043 0308 	orr.w	r3, r3, #8
 800655e:	70a3      	strb	r3, [r4, #2]
 8006560:	e637      	b.n	80061d2 <protocol_buffer_synchronize+0x9a>
        if (sys.state == STATE_ALARM) { sys.suspend |= (SUSPEND_RETRACT_COMPLETE|SUSPEND_HOLD_COMPLETE); }
 8006562:	78a3      	ldrb	r3, [r4, #2]
 8006564:	f043 0305 	orr.w	r3, r3, #5
 8006568:	70a3      	strb	r3, [r4, #2]
 800656a:	e77f      	b.n	800646c <protocol_buffer_synchronize+0x334>
              sys.state = STATE_CYCLE;
 800656c:	2208      	movs	r2, #8
              sys.suspend = SUSPEND_DISABLE; // Break suspend state.
 800656e:	70a3      	strb	r3, [r4, #2]
              sys.state = STATE_CYCLE;
 8006570:	7022      	strb	r2, [r4, #0]
              st_prep_buffer(); // Initialize step segment buffer before beginning cycle.
 8006572:	f002 faf3 	bl	8008b5c <st_prep_buffer>
              st_wake_up();
 8006576:	f001 ff55 	bl	8008424 <st_wake_up>
 800657a:	e62a      	b.n	80061d2 <protocol_buffer_synchronize+0x9a>
        else if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_ENABLED) { sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE; }
 800657c:	f043 0304 	orr.w	r3, r3, #4
 8006580:	72e3      	strb	r3, [r4, #11]
 8006582:	e7c7      	b.n	8006514 <protocol_buffer_synchronize+0x3dc>
            sys.state = STATE_IDLE; // Set to IDLE to immediately resume the cycle.
 8006584:	7022      	strb	r2, [r4, #0]
 8006586:	e617      	b.n	80061b8 <protocol_buffer_synchronize+0x80>
              if (!(rt_exec & EXEC_SLEEP)) { sys.suspend |= SUSPEND_JOG_CANCEL; } 
 8006588:	fa4f fb8a 	sxtb.w	fp, sl
 800658c:	f1bb 0f00 	cmp.w	fp, #0
 8006590:	f6ff af50 	blt.w	8006434 <protocol_buffer_synchronize+0x2fc>
 8006594:	78a3      	ldrb	r3, [r4, #2]
 8006596:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800659a:	70a3      	strb	r3, [r4, #2]
 800659c:	e74a      	b.n	8006434 <protocol_buffer_synchronize+0x2fc>
              if (sys.suspend & SUSPEND_INITIATE_RESTORE) { // Actively restoring
 800659e:	0718      	lsls	r0, r3, #28
 80065a0:	f57f af58 	bpl.w	8006454 <protocol_buffer_synchronize+0x31c>
                sys.suspend &= ~(SUSPEND_RETRACT_COMPLETE | SUSPEND_INITIATE_RESTORE | SUSPEND_RESTORE_COMPLETE);
 80065a4:	f023 031c 	bic.w	r3, r3, #28
                sys.suspend |= SUSPEND_RESTART_RETRACT;
 80065a8:	f043 0302 	orr.w	r3, r3, #2
 80065ac:	e752      	b.n	8006454 <protocol_buffer_synchronize+0x31c>
 80065ae:	bf00      	nop

080065b0 <protocol_main_loop>:
{
 80065b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (bit_istrue(settings.flags, BITFLAG_HARD_LIMIT_ENABLE)) {
 80065b4:	4b57      	ldr	r3, [pc, #348]	; (8006714 <protocol_main_loop+0x164>)
 80065b6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80065ba:	071a      	lsls	r2, r3, #28
 80065bc:	f100 8091 	bmi.w	80066e2 <protocol_main_loop+0x132>
 80065c0:	4e55      	ldr	r6, [pc, #340]	; (8006718 <protocol_main_loop+0x168>)
  if (sys.state & (STATE_ALARM | STATE_SLEEP)) {
 80065c2:	7833      	ldrb	r3, [r6, #0]
 80065c4:	f013 0381 	ands.w	r3, r3, #129	; 0x81
 80065c8:	f000 8083 	beq.w	80066d2 <protocol_main_loop+0x122>
    report_feedback_message(MESSAGE_ALARM_LOCK);
 80065cc:	2002      	movs	r0, #2
 80065ce:	f000 f8d7 	bl	8006780 <report_feedback_message>
    sys.state = STATE_ALARM; // Ensure alarm state is set.
 80065d2:	2301      	movs	r3, #1
 80065d4:	7033      	strb	r3, [r6, #0]
        line_flags = 0;
 80065d6:	2500      	movs	r5, #0
 80065d8:	462c      	mov	r4, r5
        line[char_counter] = 0; // Set string termination character.
 80065da:	f8df 8140 	ldr.w	r8, [pc, #320]	; 800671c <protocol_main_loop+0x16c>
    while((c = serial_read()) != SERIAL_NO_DATA) {
 80065de:	f001 f893 	bl	8007708 <serial_read>
 80065e2:	28ff      	cmp	r0, #255	; 0xff
 80065e4:	d00f      	beq.n	8006606 <protocol_main_loop+0x56>
      if ((c == '\n') || (c == '\r')) { // End of line reached
 80065e6:	280a      	cmp	r0, #10
 80065e8:	d01d      	beq.n	8006626 <protocol_main_loop+0x76>
 80065ea:	280d      	cmp	r0, #13
 80065ec:	d01b      	beq.n	8006626 <protocol_main_loop+0x76>
        if (line_flags) {
 80065ee:	2c00      	cmp	r4, #0
 80065f0:	d035      	beq.n	800665e <protocol_main_loop+0xae>
          if (c == ')') {
 80065f2:	2829      	cmp	r0, #41	; 0x29
 80065f4:	d1f3      	bne.n	80065de <protocol_main_loop+0x2e>
            if (line_flags & LINE_FLAG_COMMENT_PARENTHESES) { line_flags &= ~(LINE_FLAG_COMMENT_PARENTHESES); }
 80065f6:	07a3      	lsls	r3, r4, #30
 80065f8:	d5f1      	bpl.n	80065de <protocol_main_loop+0x2e>
    while((c = serial_read()) != SERIAL_NO_DATA) {
 80065fa:	f001 f885 	bl	8007708 <serial_read>
 80065fe:	28ff      	cmp	r0, #255	; 0xff
            if (line_flags & LINE_FLAG_COMMENT_PARENTHESES) { line_flags &= ~(LINE_FLAG_COMMENT_PARENTHESES); }
 8006600:	f004 04fd 	and.w	r4, r4, #253	; 0xfd
    while((c = serial_read()) != SERIAL_NO_DATA) {
 8006604:	d1ef      	bne.n	80065e6 <protocol_main_loop+0x36>
  if (plan_get_current_block() != NULL) { // Check if there are any blocks in the buffer.
 8006606:	f7fe f841 	bl	800468c <plan_get_current_block>
 800660a:	b110      	cbz	r0, 8006612 <protocol_main_loop+0x62>
    system_set_exec_state_flag(EXEC_CYCLE_START); // If so, execute them!
 800660c:	2002      	movs	r0, #2
 800660e:	f003 fb15 	bl	8009c3c <system_set_exec_state_flag>
  protocol_exec_rt_system();
 8006612:	f7fe fe7d 	bl	8005310 <protocol_exec_rt_system>
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 8006616:	78b3      	ldrb	r3, [r6, #2]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d14a      	bne.n	80066b2 <protocol_main_loop+0x102>
    if (sys.abort) { return; } // Bail to main() program loop to reset system.
 800661c:	7873      	ldrb	r3, [r6, #1]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d0dd      	beq.n	80065de <protocol_main_loop+0x2e>
 8006622:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  protocol_exec_rt_system();
 8006626:	f7fe fe73 	bl	8005310 <protocol_exec_rt_system>
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 800662a:	78b3      	ldrb	r3, [r6, #2]
 800662c:	bb63      	cbnz	r3, 8006688 <protocol_main_loop+0xd8>
        if (sys.abort) { return; } // Bail to calling function upon system abort
 800662e:	7877      	ldrb	r7, [r6, #1]
 8006630:	2f00      	cmp	r7, #0
 8006632:	d1f6      	bne.n	8006622 <protocol_main_loop+0x72>
        line[char_counter] = 0; // Set string termination character.
 8006634:	f808 7005 	strb.w	r7, [r8, r5]
				LedBlink();
 8006638:	f7fd fa00 	bl	8003a3c <LedBlink>
        if (line_flags & LINE_FLAG_OVERFLOW) {
 800663c:	f014 0401 	ands.w	r4, r4, #1
 8006640:	d125      	bne.n	800668e <protocol_main_loop+0xde>
        } else if (line[0] == 0) {
 8006642:	f898 0000 	ldrb.w	r0, [r8]
 8006646:	b378      	cbz	r0, 80066a8 <protocol_main_loop+0xf8>
        } else if (line[0] == '$') {
 8006648:	2824      	cmp	r0, #36	; 0x24
 800664a:	d039      	beq.n	80066c0 <protocol_main_loop+0x110>
        } else if (sys.state & (STATE_ALARM | STATE_JOG)) {
 800664c:	7833      	ldrb	r3, [r6, #0]
 800664e:	f013 0521 	ands.w	r5, r3, #33	; 0x21
 8006652:	d022      	beq.n	800669a <protocol_main_loop+0xea>
          report_status_message(STATUS_SYSTEM_GC_LOCK);
 8006654:	2009      	movs	r0, #9
        char_counter = 0;
 8006656:	4625      	mov	r5, r4
          report_status_message(STATUS_SYSTEM_GC_LOCK);
 8006658:	f000 f864 	bl	8006724 <report_status_message>
 800665c:	e7bf      	b.n	80065de <protocol_main_loop+0x2e>
          if (c <= ' ') {
 800665e:	2820      	cmp	r0, #32
 8006660:	d9bd      	bls.n	80065de <protocol_main_loop+0x2e>
          } else if (c == '/') {
 8006662:	282f      	cmp	r0, #47	; 0x2f
 8006664:	d0bb      	beq.n	80065de <protocol_main_loop+0x2e>
          } else if (c == '(') {
 8006666:	2828      	cmp	r0, #40	; 0x28
 8006668:	d026      	beq.n	80066b8 <protocol_main_loop+0x108>
          } else if (c == ';') {
 800666a:	283b      	cmp	r0, #59	; 0x3b
 800666c:	d02f      	beq.n	80066ce <protocol_main_loop+0x11e>
          } else if (char_counter >= (LINE_BUFFER_SIZE-1)) {
 800666e:	2d4e      	cmp	r5, #78	; 0x4e
 8006670:	d824      	bhi.n	80066bc <protocol_main_loop+0x10c>
          } else if (c >= 'a' && c <= 'z') { // Upcase lowercase
 8006672:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006676:	b2db      	uxtb	r3, r3
 8006678:	2b19      	cmp	r3, #25
            line[char_counter++] = c-'a'+'A';
 800667a:	bf98      	it	ls
 800667c:	3820      	subls	r0, #32
            line[char_counter++] = c;
 800667e:	1c6b      	adds	r3, r5, #1
 8006680:	f808 0005 	strb.w	r0, [r8, r5]
 8006684:	b2dd      	uxtb	r5, r3
 8006686:	e7aa      	b.n	80065de <protocol_main_loop+0x2e>
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 8006688:	f7ff f82c 	bl	80056e4 <protocol_exec_rt_suspend>
 800668c:	e7cf      	b.n	800662e <protocol_main_loop+0x7e>
          report_status_message(STATUS_OVERFLOW);
 800668e:	200b      	movs	r0, #11
        char_counter = 0;
 8006690:	463d      	mov	r5, r7
        line_flags = 0;
 8006692:	463c      	mov	r4, r7
          report_status_message(STATUS_OVERFLOW);
 8006694:	f000 f846 	bl	8006724 <report_status_message>
 8006698:	e7a1      	b.n	80065de <protocol_main_loop+0x2e>
          report_status_message(gc_execute_line(line));
 800669a:	4640      	mov	r0, r8
 800669c:	f7fb fbfc 	bl	8001e98 <gc_execute_line>
 80066a0:	f000 f840 	bl	8006724 <report_status_message>
        line_flags = 0;
 80066a4:	462c      	mov	r4, r5
 80066a6:	e79a      	b.n	80065de <protocol_main_loop+0x2e>
        char_counter = 0;
 80066a8:	4605      	mov	r5, r0
          report_status_message(STATUS_OK);
 80066aa:	f000 f83b 	bl	8006724 <report_status_message>
        line_flags = 0;
 80066ae:	462c      	mov	r4, r5
 80066b0:	e795      	b.n	80065de <protocol_main_loop+0x2e>
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 80066b2:	f7ff f817 	bl	80056e4 <protocol_exec_rt_suspend>
 80066b6:	e7b1      	b.n	800661c <protocol_main_loop+0x6c>
            line_flags |= LINE_FLAG_COMMENT_PARENTHESES;
 80066b8:	2402      	movs	r4, #2
 80066ba:	e790      	b.n	80065de <protocol_main_loop+0x2e>
            line_flags |= LINE_FLAG_OVERFLOW;
 80066bc:	2401      	movs	r4, #1
 80066be:	e78e      	b.n	80065de <protocol_main_loop+0x2e>
          report_status_message(system_execute_line(line));
 80066c0:	4640      	mov	r0, r8
        char_counter = 0;
 80066c2:	4625      	mov	r5, r4
          report_status_message(system_execute_line(line));
 80066c4:	f003 f86a 	bl	800979c <system_execute_line>
 80066c8:	f000 f82c 	bl	8006724 <report_status_message>
 80066cc:	e787      	b.n	80065de <protocol_main_loop+0x2e>
            line_flags |= LINE_FLAG_COMMENT_SEMICOLON;
 80066ce:	2404      	movs	r4, #4
 80066d0:	e785      	b.n	80065de <protocol_main_loop+0x2e>
    sys.state = STATE_IDLE;
 80066d2:	7033      	strb	r3, [r6, #0]
    if (system_check_safety_door_ajar()) {
 80066d4:	f003 f844 	bl	8009760 <system_check_safety_door_ajar>
 80066d8:	b978      	cbnz	r0, 80066fa <protocol_main_loop+0x14a>
    system_execute_startup(line); // Execute startup script.
 80066da:	4810      	ldr	r0, [pc, #64]	; (800671c <protocol_main_loop+0x16c>)
 80066dc:	f003 f842 	bl	8009764 <system_execute_startup>
 80066e0:	e779      	b.n	80065d6 <protocol_main_loop+0x26>
      if (limits_get_state()) {
 80066e2:	f7fc fdf3 	bl	80032cc <limits_get_state>
 80066e6:	2800      	cmp	r0, #0
 80066e8:	f43f af6a 	beq.w	80065c0 <protocol_main_loop+0x10>
        sys.state = STATE_ALARM; // Ensure alarm state is active.
 80066ec:	2301      	movs	r3, #1
 80066ee:	4e0a      	ldr	r6, [pc, #40]	; (8006718 <protocol_main_loop+0x168>)
        report_feedback_message(MESSAGE_CHECK_LIMITS);
 80066f0:	2007      	movs	r0, #7
        sys.state = STATE_ALARM; // Ensure alarm state is active.
 80066f2:	7033      	strb	r3, [r6, #0]
        report_feedback_message(MESSAGE_CHECK_LIMITS);
 80066f4:	f000 f844 	bl	8006780 <report_feedback_message>
 80066f8:	e763      	b.n	80065c2 <protocol_main_loop+0x12>
      bit_true(sys_rt_exec_state, EXEC_SAFETY_DOOR);
 80066fa:	4a09      	ldr	r2, [pc, #36]	; (8006720 <protocol_main_loop+0x170>)
 80066fc:	7813      	ldrb	r3, [r2, #0]
 80066fe:	f043 0320 	orr.w	r3, r3, #32
 8006702:	7013      	strb	r3, [r2, #0]
  protocol_exec_rt_system();
 8006704:	f7fe fe04 	bl	8005310 <protocol_exec_rt_system>
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 8006708:	78b3      	ldrb	r3, [r6, #2]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d0e5      	beq.n	80066da <protocol_main_loop+0x12a>
 800670e:	f7fe ffe9 	bl	80056e4 <protocol_exec_rt_suspend>
 8006712:	e7e2      	b.n	80066da <protocol_main_loop+0x12a>
 8006714:	20001404 	.word	0x20001404
 8006718:	200010c8 	.word	0x200010c8
 800671c:	20000a1c 	.word	0x20000a1c
 8006720:	200010dd 	.word	0x200010dd

08006724 <report_status_message>:
// operation. Errors events can originate from the g-code parser, settings module, or asynchronously
// from a critical error, such as a triggered hard limit. Interface should always monitor for these
// responses.
void report_status_message(uint8_t status_code)
{
  switch(status_code) {
 8006724:	b160      	cbz	r0, 8006740 <report_status_message+0x1c>
{
 8006726:	b510      	push	{r4, lr}
 8006728:	4604      	mov	r4, r0
    case STATUS_OK: // STATUS_OK
      printPgmString(PSTR("ok\r\n")); break;
    default:
      printPgmString(PSTR("error:"));
 800672a:	4807      	ldr	r0, [pc, #28]	; (8006748 <report_status_message+0x24>)
 800672c:	f7fe fb2c 	bl	8004d88 <printString>
      print_uint8_base10(status_code);
 8006730:	4620      	mov	r0, r4
 8006732:	f7fe fb35 	bl	8004da0 <print_uint8_base10>
      report_util_line_feed();
  }
}
 8006736:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 800673a:	4804      	ldr	r0, [pc, #16]	; (800674c <report_status_message+0x28>)
 800673c:	f7fe bb24 	b.w	8004d88 <printString>
      printPgmString(PSTR("ok\r\n")); break;
 8006740:	4803      	ldr	r0, [pc, #12]	; (8006750 <report_status_message+0x2c>)
 8006742:	f7fe bb21 	b.w	8004d88 <printString>
 8006746:	bf00      	nop
 8006748:	0800c85c 	.word	0x0800c85c
 800674c:	0800c864 	.word	0x0800c864
 8006750:	0800c854 	.word	0x0800c854

08006754 <report_alarm_message>:

// Prints alarm messages.
void report_alarm_message(uint8_t alarm_code)
{
 8006754:	b510      	push	{r4, lr}
 8006756:	4604      	mov	r4, r0
  printPgmString(PSTR("ALARM:"));
 8006758:	4807      	ldr	r0, [pc, #28]	; (8006778 <report_alarm_message+0x24>)
 800675a:	f7fe fb15 	bl	8004d88 <printString>
  print_uint8_base10(alarm_code);
 800675e:	4620      	mov	r0, r4
 8006760:	f7fe fb1e 	bl	8004da0 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006764:	4805      	ldr	r0, [pc, #20]	; (800677c <report_alarm_message+0x28>)
 8006766:	f7fe fb0f 	bl	8004d88 <printString>
  report_util_line_feed();
  delay_ms(500); // Force delay to ensure message clears serial write buffer.
}
 800676a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  delay_ms(500); // Force delay to ensure message clears serial write buffer.
 800676e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006772:	f7fd bd6d 	b.w	8004250 <delay_ms>
 8006776:	bf00      	nop
 8006778:	0800c644 	.word	0x0800c644
 800677c:	0800c864 	.word	0x0800c864

08006780 <report_feedback_message>:
// user feedback for things that are not of the status/alarm message protocol. These are
// messages such as setup warnings, switch toggling, and how to exit alarms.
// NOTE: For interfaces, messages are always placed within brackets. And if silent mode
// is installed, the message number codes are less than zero.
void report_feedback_message(uint8_t message_code)
{
 8006780:	b510      	push	{r4, lr}
 8006782:	4604      	mov	r4, r0
  printPgmString(PSTR("[MSG:"));
 8006784:	4820      	ldr	r0, [pc, #128]	; (8006808 <report_feedback_message+0x88>)
 8006786:	f7fe faff 	bl	8004d88 <printString>
  switch(message_code) {
 800678a:	1e60      	subs	r0, r4, #1
 800678c:	280a      	cmp	r0, #10
 800678e:	d80a      	bhi.n	80067a6 <report_feedback_message+0x26>
 8006790:	e8df f000 	tbb	[pc, r0]
 8006794:	1d191511 	.word	0x1d191511
 8006798:	2d292521 	.word	0x2d292521
 800679c:	3531      	.short	0x3531
 800679e:	06          	.byte	0x06
 800679f:	00          	.byte	0x00
    case MESSAGE_RESTORE_DEFAULTS:
      printPgmString(PSTR("Restoring defaults")); break;
    case MESSAGE_SPINDLE_RESTORE:
      printPgmString(PSTR("Restoring spindle")); break;
    case MESSAGE_SLEEP_MODE:
      printPgmString(PSTR("Sleeping")); break;
 80067a0:	481a      	ldr	r0, [pc, #104]	; (800680c <report_feedback_message+0x8c>)
 80067a2:	f7fe faf1 	bl	8004d88 <printString>
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 80067a6:	205d      	movs	r0, #93	; 0x5d
 80067a8:	f000 ff84 	bl	80076b4 <serial_write>
  }
  report_util_feedback_line_feed();
}
 80067ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80067b0:	4817      	ldr	r0, [pc, #92]	; (8006810 <report_feedback_message+0x90>)
 80067b2:	f7fe bae9 	b.w	8004d88 <printString>
      printPgmString(PSTR("Reset to continue")); break;
 80067b6:	4817      	ldr	r0, [pc, #92]	; (8006814 <report_feedback_message+0x94>)
 80067b8:	f7fe fae6 	bl	8004d88 <printString>
 80067bc:	e7f3      	b.n	80067a6 <report_feedback_message+0x26>
      printPgmString(PSTR("'$H'|'$X' to unlock")); break;
 80067be:	4816      	ldr	r0, [pc, #88]	; (8006818 <report_feedback_message+0x98>)
 80067c0:	f7fe fae2 	bl	8004d88 <printString>
 80067c4:	e7ef      	b.n	80067a6 <report_feedback_message+0x26>
      printPgmString(PSTR("Caution: Unlocked")); break;
 80067c6:	4815      	ldr	r0, [pc, #84]	; (800681c <report_feedback_message+0x9c>)
 80067c8:	f7fe fade 	bl	8004d88 <printString>
 80067cc:	e7eb      	b.n	80067a6 <report_feedback_message+0x26>
      printPgmString(PSTR("Enabled")); break;
 80067ce:	4814      	ldr	r0, [pc, #80]	; (8006820 <report_feedback_message+0xa0>)
 80067d0:	f7fe fada 	bl	8004d88 <printString>
 80067d4:	e7e7      	b.n	80067a6 <report_feedback_message+0x26>
      printPgmString(PSTR("Disabled")); break;
 80067d6:	4813      	ldr	r0, [pc, #76]	; (8006824 <report_feedback_message+0xa4>)
 80067d8:	f7fe fad6 	bl	8004d88 <printString>
 80067dc:	e7e3      	b.n	80067a6 <report_feedback_message+0x26>
      printPgmString(PSTR("Check Door")); break;
 80067de:	4812      	ldr	r0, [pc, #72]	; (8006828 <report_feedback_message+0xa8>)
 80067e0:	f7fe fad2 	bl	8004d88 <printString>
 80067e4:	e7df      	b.n	80067a6 <report_feedback_message+0x26>
      printPgmString(PSTR("Check Limits")); break;
 80067e6:	4811      	ldr	r0, [pc, #68]	; (800682c <report_feedback_message+0xac>)
 80067e8:	f7fe face 	bl	8004d88 <printString>
 80067ec:	e7db      	b.n	80067a6 <report_feedback_message+0x26>
      printPgmString(PSTR("Pgm End")); break;
 80067ee:	4810      	ldr	r0, [pc, #64]	; (8006830 <report_feedback_message+0xb0>)
 80067f0:	f7fe faca 	bl	8004d88 <printString>
 80067f4:	e7d7      	b.n	80067a6 <report_feedback_message+0x26>
      printPgmString(PSTR("Restoring defaults")); break;
 80067f6:	480f      	ldr	r0, [pc, #60]	; (8006834 <report_feedback_message+0xb4>)
 80067f8:	f7fe fac6 	bl	8004d88 <printString>
 80067fc:	e7d3      	b.n	80067a6 <report_feedback_message+0x26>
      printPgmString(PSTR("Restoring spindle")); break;
 80067fe:	480e      	ldr	r0, [pc, #56]	; (8006838 <report_feedback_message+0xb8>)
 8006800:	f7fe fac2 	bl	8004d88 <printString>
 8006804:	e7cf      	b.n	80067a6 <report_feedback_message+0x26>
 8006806:	bf00      	nop
 8006808:	0800c670 	.word	0x0800c670
 800680c:	0800c714 	.word	0x0800c714
 8006810:	0800c864 	.word	0x0800c864
 8006814:	0800c678 	.word	0x0800c678
 8006818:	0800c68c 	.word	0x0800c68c
 800681c:	0800c6a0 	.word	0x0800c6a0
 8006820:	0800c6b4 	.word	0x0800c6b4
 8006824:	0800c6bc 	.word	0x0800c6bc
 8006828:	0800c6c8 	.word	0x0800c6c8
 800682c:	0800c6d4 	.word	0x0800c6d4
 8006830:	0800c6e4 	.word	0x0800c6e4
 8006834:	0800c6ec 	.word	0x0800c6ec
 8006838:	0800c700 	.word	0x0800c700

0800683c <report_init_message>:


// Welcome message
void report_init_message()
{
  printPgmString(PSTR("\r\nGrbl " GRBL_VERSION " ['$' for help]\r\n"));
 800683c:	4801      	ldr	r0, [pc, #4]	; (8006844 <report_init_message+0x8>)
 800683e:	f7fe baa3 	b.w	8004d88 <printString>
 8006842:	bf00      	nop
 8006844:	0800c78c 	.word	0x0800c78c

08006848 <report_grbl_help>:
}

// Grbl help message
void report_grbl_help() {
  printPgmString(PSTR("[HLP:$$ $# $G $I $N $x=val $Nx=line $J=line $SLP $C $X $H ~ ! ? ctrl-x]\r\n"));    
 8006848:	4801      	ldr	r0, [pc, #4]	; (8006850 <report_grbl_help+0x8>)
 800684a:	f7fe ba9d 	b.w	8004d88 <printString>
 800684e:	bf00      	nop
 8006850:	0800c740 	.word	0x0800c740

08006854 <report_grbl_settings>:
}


// Grbl global settings print out.
// NOTE: The numbering scheme here must correlate to storing in settings.c
void report_grbl_settings() {
 8006854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  // Print Grbl settings.
  report_util_uint8_setting(0,settings.pulse_microseconds);
 8006858:	4cc7      	ldr	r4, [pc, #796]	; (8006b78 <report_grbl_settings+0x324>)
void report_grbl_settings() {
 800685a:	b083      	sub	sp, #12
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 800685c:	2024      	movs	r0, #36	; 0x24
  report_util_uint8_setting(0,settings.pulse_microseconds);
 800685e:	f894 5040 	ldrb.w	r5, [r4, #64]	; 0x40
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006862:	f000 ff27 	bl	80076b4 <serial_write>
 8006866:	2000      	movs	r0, #0
 8006868:	f7fe fa9a 	bl	8004da0 <print_uint8_base10>
 800686c:	203d      	movs	r0, #61	; 0x3d
 800686e:	f000 ff21 	bl	80076b4 <serial_write>
  print_uint8_base10(val);
 8006872:	4628      	mov	r0, r5
 8006874:	f7fe fa94 	bl	8004da0 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006878:	48c0      	ldr	r0, [pc, #768]	; (8006b7c <report_grbl_settings+0x328>)
 800687a:	f7fe fa85 	bl	8004d88 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 800687e:	2024      	movs	r0, #36	; 0x24
  report_util_uint8_setting(1,settings.stepper_idle_lock_time);
 8006880:	f894 5046 	ldrb.w	r5, [r4, #70]	; 0x46
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006884:	f000 ff16 	bl	80076b4 <serial_write>
 8006888:	2001      	movs	r0, #1
 800688a:	f7fe fa89 	bl	8004da0 <print_uint8_base10>
 800688e:	203d      	movs	r0, #61	; 0x3d
 8006890:	f000 ff10 	bl	80076b4 <serial_write>
  print_uint8_base10(val);
 8006894:	4628      	mov	r0, r5
 8006896:	f7fe fa83 	bl	8004da0 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 800689a:	48b8      	ldr	r0, [pc, #736]	; (8006b7c <report_grbl_settings+0x328>)
 800689c:	f7fe fa74 	bl	8004d88 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80068a0:	2024      	movs	r0, #36	; 0x24
  report_util_uint8_setting(2,settings.step_invert_mask);
 80068a2:	f8b4 5042 	ldrh.w	r5, [r4, #66]	; 0x42
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80068a6:	f000 ff05 	bl	80076b4 <serial_write>
 80068aa:	2002      	movs	r0, #2
 80068ac:	f7fe fa78 	bl	8004da0 <print_uint8_base10>
 80068b0:	203d      	movs	r0, #61	; 0x3d
 80068b2:	f000 feff 	bl	80076b4 <serial_write>
  print_uint8_base10(val);
 80068b6:	b2e8      	uxtb	r0, r5
 80068b8:	f7fe fa72 	bl	8004da0 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80068bc:	48af      	ldr	r0, [pc, #700]	; (8006b7c <report_grbl_settings+0x328>)
 80068be:	f7fe fa63 	bl	8004d88 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80068c2:	2024      	movs	r0, #36	; 0x24
  report_util_uint8_setting(3,settings.dir_invert_mask);
 80068c4:	f8b4 5044 	ldrh.w	r5, [r4, #68]	; 0x44
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80068c8:	f000 fef4 	bl	80076b4 <serial_write>
 80068cc:	2003      	movs	r0, #3
 80068ce:	f7fe fa67 	bl	8004da0 <print_uint8_base10>
 80068d2:	203d      	movs	r0, #61	; 0x3d
 80068d4:	f000 feee 	bl	80076b4 <serial_write>
  print_uint8_base10(val);
 80068d8:	b2e8      	uxtb	r0, r5
 80068da:	f7fe fa61 	bl	8004da0 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80068de:	48a7      	ldr	r0, [pc, #668]	; (8006b7c <report_grbl_settings+0x328>)
 80068e0:	f7fe fa52 	bl	8004d88 <printString>
  report_util_uint8_setting(4,bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE));
 80068e4:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80068e8:	2024      	movs	r0, #36	; 0x24
 80068ea:	f000 fee3 	bl	80076b4 <serial_write>
 80068ee:	2004      	movs	r0, #4
 80068f0:	f7fe fa56 	bl	8004da0 <print_uint8_base10>
  report_util_uint8_setting(4,bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE));
 80068f4:	f3c5 0580 	ubfx	r5, r5, #2, #1
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80068f8:	203d      	movs	r0, #61	; 0x3d
 80068fa:	f000 fedb 	bl	80076b4 <serial_write>
  print_uint8_base10(val);
 80068fe:	4628      	mov	r0, r5
 8006900:	f7fe fa4e 	bl	8004da0 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006904:	489d      	ldr	r0, [pc, #628]	; (8006b7c <report_grbl_settings+0x328>)
 8006906:	f7fe fa3f 	bl	8004d88 <printString>
  report_util_uint8_setting(5,bit_istrue(settings.flags,BITFLAG_INVERT_LIMIT_PINS));
 800690a:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 800690e:	2024      	movs	r0, #36	; 0x24
 8006910:	f000 fed0 	bl	80076b4 <serial_write>
 8006914:	2005      	movs	r0, #5
 8006916:	f7fe fa43 	bl	8004da0 <print_uint8_base10>
  report_util_uint8_setting(5,bit_istrue(settings.flags,BITFLAG_INVERT_LIMIT_PINS));
 800691a:	f3c5 1580 	ubfx	r5, r5, #6, #1
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 800691e:	203d      	movs	r0, #61	; 0x3d
 8006920:	f000 fec8 	bl	80076b4 <serial_write>
  print_uint8_base10(val);
 8006924:	4628      	mov	r0, r5
 8006926:	f7fe fa3b 	bl	8004da0 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 800692a:	4894      	ldr	r0, [pc, #592]	; (8006b7c <report_grbl_settings+0x328>)
 800692c:	f7fe fa2c 	bl	8004d88 <printString>
  report_util_uint8_setting(6,bit_istrue(settings.flags,BITFLAG_INVERT_PROBE_PIN));
 8006930:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006934:	2024      	movs	r0, #36	; 0x24
 8006936:	f000 febd 	bl	80076b4 <serial_write>
 800693a:	2006      	movs	r0, #6
  report_util_uint8_setting(6,bit_istrue(settings.flags,BITFLAG_INVERT_PROBE_PIN));
 800693c:	09ed      	lsrs	r5, r5, #7
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 800693e:	f7fe fa2f 	bl	8004da0 <print_uint8_base10>
 8006942:	203d      	movs	r0, #61	; 0x3d
 8006944:	f000 feb6 	bl	80076b4 <serial_write>
  print_uint8_base10(val);
 8006948:	4628      	mov	r0, r5
 800694a:	f7fe fa29 	bl	8004da0 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 800694e:	488b      	ldr	r0, [pc, #556]	; (8006b7c <report_grbl_settings+0x328>)
 8006950:	f7fe fa1a 	bl	8004d88 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006954:	2024      	movs	r0, #36	; 0x24
  report_util_uint8_setting(10,settings.status_report_mask);
 8006956:	f894 5047 	ldrb.w	r5, [r4, #71]	; 0x47
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 800695a:	f000 feab 	bl	80076b4 <serial_write>
 800695e:	200a      	movs	r0, #10
 8006960:	f7fe fa1e 	bl	8004da0 <print_uint8_base10>
 8006964:	203d      	movs	r0, #61	; 0x3d
 8006966:	f000 fea5 	bl	80076b4 <serial_write>
  print_uint8_base10(val);
 800696a:	4628      	mov	r0, r5
 800696c:	f7fe fa18 	bl	8004da0 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006970:	4882      	ldr	r0, [pc, #520]	; (8006b7c <report_grbl_settings+0x328>)
 8006972:	f7fe fa09 	bl	8004d88 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006976:	2024      	movs	r0, #36	; 0x24
  report_util_float_setting(11,settings.junction_deviation,N_DECIMAL_SETTINGVALUE);
 8006978:	6ca5      	ldr	r5, [r4, #72]	; 0x48
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 800697a:	f000 fe9b 	bl	80076b4 <serial_write>
 800697e:	200b      	movs	r0, #11
 8006980:	f7fe fa0e 	bl	8004da0 <print_uint8_base10>
 8006984:	203d      	movs	r0, #61	; 0x3d
 8006986:	f000 fe95 	bl	80076b4 <serial_write>
  printFloat(val, n_decimal);
 800698a:	2103      	movs	r1, #3
 800698c:	4628      	mov	r0, r5
 800698e:	f7fe fa49 	bl	8004e24 <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006992:	487a      	ldr	r0, [pc, #488]	; (8006b7c <report_grbl_settings+0x328>)
 8006994:	f7fe f9f8 	bl	8004d88 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006998:	2024      	movs	r0, #36	; 0x24
  report_util_float_setting(12,settings.arc_tolerance,N_DECIMAL_SETTINGVALUE);
 800699a:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 800699c:	f000 fe8a 	bl	80076b4 <serial_write>
 80069a0:	200c      	movs	r0, #12
 80069a2:	f7fe f9fd 	bl	8004da0 <print_uint8_base10>
 80069a6:	203d      	movs	r0, #61	; 0x3d
 80069a8:	f000 fe84 	bl	80076b4 <serial_write>
  printFloat(val, n_decimal);
 80069ac:	2103      	movs	r1, #3
 80069ae:	4628      	mov	r0, r5
 80069b0:	f7fe fa38 	bl	8004e24 <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80069b4:	4871      	ldr	r0, [pc, #452]	; (8006b7c <report_grbl_settings+0x328>)
 80069b6:	f7fe f9e7 	bl	8004d88 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80069ba:	2024      	movs	r0, #36	; 0x24
  report_util_uint8_setting(13,bit_istrue(settings.flags,BITFLAG_REPORT_INCHES));
 80069bc:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80069c0:	f000 fe78 	bl	80076b4 <serial_write>
 80069c4:	200d      	movs	r0, #13
 80069c6:	f7fe f9eb 	bl	8004da0 <print_uint8_base10>
 80069ca:	203d      	movs	r0, #61	; 0x3d
 80069cc:	f000 fe72 	bl	80076b4 <serial_write>
  print_uint8_base10(val);
 80069d0:	f005 0001 	and.w	r0, r5, #1
 80069d4:	f7fe f9e4 	bl	8004da0 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80069d8:	4868      	ldr	r0, [pc, #416]	; (8006b7c <report_grbl_settings+0x328>)
 80069da:	f7fe f9d5 	bl	8004d88 <printString>
  report_util_uint8_setting(20,bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE));
 80069de:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80069e2:	2024      	movs	r0, #36	; 0x24
 80069e4:	f000 fe66 	bl	80076b4 <serial_write>
 80069e8:	2014      	movs	r0, #20
 80069ea:	f7fe f9d9 	bl	8004da0 <print_uint8_base10>
  report_util_uint8_setting(20,bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE));
 80069ee:	f3c5 1540 	ubfx	r5, r5, #5, #1
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80069f2:	203d      	movs	r0, #61	; 0x3d
 80069f4:	f000 fe5e 	bl	80076b4 <serial_write>
  print_uint8_base10(val);
 80069f8:	4628      	mov	r0, r5
 80069fa:	f7fe f9d1 	bl	8004da0 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80069fe:	485f      	ldr	r0, [pc, #380]	; (8006b7c <report_grbl_settings+0x328>)
 8006a00:	f7fe f9c2 	bl	8004d88 <printString>
  report_util_uint8_setting(21,bit_istrue(settings.flags,BITFLAG_HARD_LIMIT_ENABLE));
 8006a04:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006a08:	2024      	movs	r0, #36	; 0x24
 8006a0a:	f000 fe53 	bl	80076b4 <serial_write>
 8006a0e:	2015      	movs	r0, #21
 8006a10:	f7fe f9c6 	bl	8004da0 <print_uint8_base10>
  report_util_uint8_setting(21,bit_istrue(settings.flags,BITFLAG_HARD_LIMIT_ENABLE));
 8006a14:	f3c5 05c0 	ubfx	r5, r5, #3, #1
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006a18:	203d      	movs	r0, #61	; 0x3d
 8006a1a:	f000 fe4b 	bl	80076b4 <serial_write>
  print_uint8_base10(val);
 8006a1e:	4628      	mov	r0, r5
 8006a20:	f7fe f9be 	bl	8004da0 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006a24:	4855      	ldr	r0, [pc, #340]	; (8006b7c <report_grbl_settings+0x328>)
 8006a26:	f7fe f9af 	bl	8004d88 <printString>
  report_util_uint8_setting(22,bit_istrue(settings.flags,BITFLAG_HOMING_ENABLE));
 8006a2a:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006a2e:	2024      	movs	r0, #36	; 0x24
 8006a30:	f000 fe40 	bl	80076b4 <serial_write>
 8006a34:	2016      	movs	r0, #22
 8006a36:	f7fe f9b3 	bl	8004da0 <print_uint8_base10>
  report_util_uint8_setting(22,bit_istrue(settings.flags,BITFLAG_HOMING_ENABLE));
 8006a3a:	f3c5 1500 	ubfx	r5, r5, #4, #1
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006a3e:	203d      	movs	r0, #61	; 0x3d
 8006a40:	f000 fe38 	bl	80076b4 <serial_write>
  print_uint8_base10(val);
 8006a44:	4628      	mov	r0, r5
 8006a46:	f7fe f9ab 	bl	8004da0 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006a4a:	484c      	ldr	r0, [pc, #304]	; (8006b7c <report_grbl_settings+0x328>)
 8006a4c:	f7fe f99c 	bl	8004d88 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006a50:	2024      	movs	r0, #36	; 0x24
  report_util_uint8_setting(23,settings.homing_dir_mask);
 8006a52:	f8b4 505a 	ldrh.w	r5, [r4, #90]	; 0x5a
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006a56:	f000 fe2d 	bl	80076b4 <serial_write>
 8006a5a:	2017      	movs	r0, #23
 8006a5c:	f7fe f9a0 	bl	8004da0 <print_uint8_base10>
 8006a60:	203d      	movs	r0, #61	; 0x3d
 8006a62:	f000 fe27 	bl	80076b4 <serial_write>
  print_uint8_base10(val);
 8006a66:	b2e8      	uxtb	r0, r5
 8006a68:	f7fe f99a 	bl	8004da0 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006a6c:	4843      	ldr	r0, [pc, #268]	; (8006b7c <report_grbl_settings+0x328>)
 8006a6e:	f7fe f98b 	bl	8004d88 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006a72:	2024      	movs	r0, #36	; 0x24
  report_util_float_setting(24,settings.homing_feed_rate,N_DECIMAL_SETTINGVALUE);
 8006a74:	6de5      	ldr	r5, [r4, #92]	; 0x5c
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006a76:	f000 fe1d 	bl	80076b4 <serial_write>
 8006a7a:	2018      	movs	r0, #24
 8006a7c:	f7fe f990 	bl	8004da0 <print_uint8_base10>
 8006a80:	203d      	movs	r0, #61	; 0x3d
 8006a82:	f000 fe17 	bl	80076b4 <serial_write>
  printFloat(val, n_decimal);
 8006a86:	2103      	movs	r1, #3
 8006a88:	4628      	mov	r0, r5
 8006a8a:	f7fe f9cb 	bl	8004e24 <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006a8e:	483b      	ldr	r0, [pc, #236]	; (8006b7c <report_grbl_settings+0x328>)
 8006a90:	f7fe f97a 	bl	8004d88 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006a94:	2024      	movs	r0, #36	; 0x24
  report_util_float_setting(25,settings.homing_seek_rate,N_DECIMAL_SETTINGVALUE);
 8006a96:	6e25      	ldr	r5, [r4, #96]	; 0x60
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006a98:	f000 fe0c 	bl	80076b4 <serial_write>
 8006a9c:	2019      	movs	r0, #25
 8006a9e:	f7fe f97f 	bl	8004da0 <print_uint8_base10>
 8006aa2:	203d      	movs	r0, #61	; 0x3d
 8006aa4:	f000 fe06 	bl	80076b4 <serial_write>
  printFloat(val, n_decimal);
 8006aa8:	2103      	movs	r1, #3
 8006aaa:	4628      	mov	r0, r5
 8006aac:	f7fe f9ba 	bl	8004e24 <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006ab0:	4832      	ldr	r0, [pc, #200]	; (8006b7c <report_grbl_settings+0x328>)
 8006ab2:	f7fe f969 	bl	8004d88 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006ab6:	2024      	movs	r0, #36	; 0x24
  report_util_uint8_setting(26,settings.homing_debounce_delay);
 8006ab8:	f8b4 5064 	ldrh.w	r5, [r4, #100]	; 0x64
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006abc:	f000 fdfa 	bl	80076b4 <serial_write>
 8006ac0:	201a      	movs	r0, #26
 8006ac2:	f7fe f96d 	bl	8004da0 <print_uint8_base10>
 8006ac6:	203d      	movs	r0, #61	; 0x3d
 8006ac8:	f000 fdf4 	bl	80076b4 <serial_write>
  print_uint8_base10(val);
 8006acc:	b2e8      	uxtb	r0, r5
 8006ace:	f7fe f967 	bl	8004da0 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006ad2:	482a      	ldr	r0, [pc, #168]	; (8006b7c <report_grbl_settings+0x328>)
 8006ad4:	f7fe f958 	bl	8004d88 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006ad8:	2024      	movs	r0, #36	; 0x24
  report_util_float_setting(27,settings.homing_pulloff,N_DECIMAL_SETTINGVALUE);
 8006ada:	6ea5      	ldr	r5, [r4, #104]	; 0x68
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006adc:	f000 fdea 	bl	80076b4 <serial_write>
 8006ae0:	201b      	movs	r0, #27
 8006ae2:	f7fe f95d 	bl	8004da0 <print_uint8_base10>
 8006ae6:	203d      	movs	r0, #61	; 0x3d
 8006ae8:	f000 fde4 	bl	80076b4 <serial_write>
  printFloat(val, n_decimal);
 8006aec:	2103      	movs	r1, #3
 8006aee:	4628      	mov	r0, r5
 8006af0:	f7fe f998 	bl	8004e24 <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006af4:	4821      	ldr	r0, [pc, #132]	; (8006b7c <report_grbl_settings+0x328>)
 8006af6:	f7fe f947 	bl	8004d88 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006afa:	2024      	movs	r0, #36	; 0x24
  report_util_float_setting(30,settings.rpm_max,N_DECIMAL_RPMVALUE);
 8006afc:	6d25      	ldr	r5, [r4, #80]	; 0x50
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006afe:	f000 fdd9 	bl	80076b4 <serial_write>
 8006b02:	201e      	movs	r0, #30
 8006b04:	f7fe f94c 	bl	8004da0 <print_uint8_base10>
 8006b08:	203d      	movs	r0, #61	; 0x3d
 8006b0a:	f000 fdd3 	bl	80076b4 <serial_write>
  printFloat(val, n_decimal);
 8006b0e:	2100      	movs	r1, #0
 8006b10:	4628      	mov	r0, r5
 8006b12:	f7fe f987 	bl	8004e24 <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006b16:	4819      	ldr	r0, [pc, #100]	; (8006b7c <report_grbl_settings+0x328>)
 8006b18:	f7fe f936 	bl	8004d88 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006b1c:	2024      	movs	r0, #36	; 0x24
  report_util_float_setting(31,settings.rpm_min,N_DECIMAL_RPMVALUE);
 8006b1e:	6d65      	ldr	r5, [r4, #84]	; 0x54
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006b20:	f000 fdc8 	bl	80076b4 <serial_write>
 8006b24:	201f      	movs	r0, #31
 8006b26:	f7fe f93b 	bl	8004da0 <print_uint8_base10>
 8006b2a:	203d      	movs	r0, #61	; 0x3d
 8006b2c:	f000 fdc2 	bl	80076b4 <serial_write>
  printFloat(val, n_decimal);
 8006b30:	2100      	movs	r1, #0
 8006b32:	4628      	mov	r0, r5
 8006b34:	f7fe f976 	bl	8004e24 <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006b38:	4810      	ldr	r0, [pc, #64]	; (8006b7c <report_grbl_settings+0x328>)
 8006b3a:	f7fe f925 	bl	8004d88 <printString>
  #ifdef VARIABLE_SPINDLE
    report_util_uint8_setting(32,bit_istrue(settings.flags,BITFLAG_LASER_MODE));
 8006b3e:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006b42:	2024      	movs	r0, #36	; 0x24
 8006b44:	f000 fdb6 	bl	80076b4 <serial_write>
 8006b48:	2020      	movs	r0, #32
 8006b4a:	f7fe f929 	bl	8004da0 <print_uint8_base10>
    report_util_uint8_setting(32,bit_istrue(settings.flags,BITFLAG_LASER_MODE));
 8006b4e:	f3c5 0540 	ubfx	r5, r5, #1, #1
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006b52:	203d      	movs	r0, #61	; 0x3d
 8006b54:	f000 fdae 	bl	80076b4 <serial_write>
  print_uint8_base10(val);
 8006b58:	4628      	mov	r0, r5
 8006b5a:	f7fe f921 	bl	8004da0 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006b5e:	4807      	ldr	r0, [pc, #28]	; (8006b7c <report_grbl_settings+0x328>)
 8006b60:	f7fe f912 	bl	8004d88 <printString>
 8006b64:	f04f 0965 	mov.w	r9, #101	; 0x65
 8006b68:	f04f 0866 	mov.w	r8, #102	; 0x66
 8006b6c:	2667      	movs	r6, #103	; 0x67
 8006b6e:	2701      	movs	r7, #1
 8006b70:	f8df a008 	ldr.w	sl, [pc, #8]	; 8006b7c <report_grbl_settings+0x328>
 8006b74:	e004      	b.n	8006b80 <report_grbl_settings+0x32c>
 8006b76:	bf00      	nop
 8006b78:	20001404 	.word	0x20001404
 8006b7c:	0800c864 	.word	0x0800c864
 8006b80:	1e7d      	subs	r5, r7, #1
 8006b82:	b2ed      	uxtb	r5, r5
 8006b84:	1ef3      	subs	r3, r6, #3
  // Print axis settings
  uint8_t idx, set_idx;
  uint8_t val = AXIS_SETTINGS_START_VAL;
  for (set_idx=0; set_idx<AXIS_N_SETTINGS; set_idx++) {
    for (idx=0; idx<N_AXIS; idx++) {
      switch (set_idx) {
 8006b86:	2d02      	cmp	r5, #2
 8006b88:	fa5f fb83 	uxtb.w	fp, r3
 8006b8c:	d075      	beq.n	8006c7a <report_grbl_settings+0x426>
 8006b8e:	2d03      	cmp	r5, #3
 8006b90:	f000 80fe 	beq.w	8006d90 <report_grbl_settings+0x53c>
 8006b94:	2d01      	cmp	r5, #1
 8006b96:	f000 80c5 	beq.w	8006d24 <report_grbl_settings+0x4d0>
        case 0: report_util_float_setting(val+idx,settings.steps_per_mm[idx],N_DECIMAL_SETTINGVALUE); break;
 8006b9a:	6822      	ldr	r2, [r4, #0]
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006b9c:	2024      	movs	r0, #36	; 0x24
        case 0: report_util_float_setting(val+idx,settings.steps_per_mm[idx],N_DECIMAL_SETTINGVALUE); break;
 8006b9e:	9201      	str	r2, [sp, #4]
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006ba0:	f000 fd88 	bl	80076b4 <serial_write>
 8006ba4:	4658      	mov	r0, fp
 8006ba6:	f7fe f8fb 	bl	8004da0 <print_uint8_base10>
 8006baa:	203d      	movs	r0, #61	; 0x3d
 8006bac:	f000 fd82 	bl	80076b4 <serial_write>
  printFloat(val, n_decimal);
 8006bb0:	9a01      	ldr	r2, [sp, #4]
 8006bb2:	2103      	movs	r1, #3
 8006bb4:	4610      	mov	r0, r2
 8006bb6:	f7fe f935 	bl	8004e24 <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006bba:	4650      	mov	r0, sl
 8006bbc:	f7fe f8e4 	bl	8004d88 <printString>
      switch (set_idx) {
 8006bc0:	2d02      	cmp	r5, #2
 8006bc2:	d06f      	beq.n	8006ca4 <report_grbl_settings+0x450>
 8006bc4:	2d03      	cmp	r5, #3
 8006bc6:	f000 80f6 	beq.w	8006db6 <report_grbl_settings+0x562>
 8006bca:	2d01      	cmp	r5, #1
 8006bcc:	f000 80bb 	beq.w	8006d46 <report_grbl_settings+0x4f2>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006bd0:	2024      	movs	r0, #36	; 0x24
        case 0: report_util_float_setting(val+idx,settings.steps_per_mm[idx],N_DECIMAL_SETTINGVALUE); break;
 8006bd2:	f8d4 b004 	ldr.w	fp, [r4, #4]
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006bd6:	f000 fd6d 	bl	80076b4 <serial_write>
 8006bda:	4648      	mov	r0, r9
 8006bdc:	f7fe f8e0 	bl	8004da0 <print_uint8_base10>
 8006be0:	203d      	movs	r0, #61	; 0x3d
 8006be2:	f000 fd67 	bl	80076b4 <serial_write>
  printFloat(val, n_decimal);
 8006be6:	4658      	mov	r0, fp
 8006be8:	2103      	movs	r1, #3
 8006bea:	f7fe f91b 	bl	8004e24 <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006bee:	4650      	mov	r0, sl
 8006bf0:	f7fe f8ca 	bl	8004d88 <printString>
      switch (set_idx) {
 8006bf4:	2d02      	cmp	r5, #2
 8006bf6:	d06a      	beq.n	8006cce <report_grbl_settings+0x47a>
 8006bf8:	2d03      	cmp	r5, #3
 8006bfa:	f000 80f0 	beq.w	8006dde <report_grbl_settings+0x58a>
 8006bfe:	2d01      	cmp	r5, #1
 8006c00:	f000 80b2 	beq.w	8006d68 <report_grbl_settings+0x514>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006c04:	2024      	movs	r0, #36	; 0x24
        case 0: report_util_float_setting(val+idx,settings.steps_per_mm[idx],N_DECIMAL_SETTINGVALUE); break;
 8006c06:	f8d4 b008 	ldr.w	fp, [r4, #8]
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006c0a:	f000 fd53 	bl	80076b4 <serial_write>
 8006c0e:	4640      	mov	r0, r8
 8006c10:	f7fe f8c6 	bl	8004da0 <print_uint8_base10>
 8006c14:	203d      	movs	r0, #61	; 0x3d
 8006c16:	f000 fd4d 	bl	80076b4 <serial_write>
  printFloat(val, n_decimal);
 8006c1a:	4658      	mov	r0, fp
 8006c1c:	2103      	movs	r1, #3
 8006c1e:	f7fe f901 	bl	8004e24 <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006c22:	4650      	mov	r0, sl
 8006c24:	f7fe f8b0 	bl	8004d88 <printString>
      switch (set_idx) {
 8006c28:	2d02      	cmp	r5, #2
 8006c2a:	d065      	beq.n	8006cf8 <report_grbl_settings+0x4a4>
 8006c2c:	2d03      	cmp	r5, #3
 8006c2e:	f000 80ea 	beq.w	8006e06 <report_grbl_settings+0x5b2>
 8006c32:	2d01      	cmp	r5, #1
 8006c34:	f000 80a9 	beq.w	8006d8a <report_grbl_settings+0x536>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006c38:	2024      	movs	r0, #36	; 0x24
        case 0: report_util_float_setting(val+idx,settings.steps_per_mm[idx],N_DECIMAL_SETTINGVALUE); break;
 8006c3a:	68e5      	ldr	r5, [r4, #12]
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006c3c:	f000 fd3a 	bl	80076b4 <serial_write>
 8006c40:	4630      	mov	r0, r6
 8006c42:	f7fe f8ad 	bl	8004da0 <print_uint8_base10>
 8006c46:	203d      	movs	r0, #61	; 0x3d
 8006c48:	f000 fd34 	bl	80076b4 <serial_write>
  printFloat(val, n_decimal);
 8006c4c:	4628      	mov	r0, r5
 8006c4e:	2103      	movs	r1, #3
 8006c50:	f7fe f8e8 	bl	8004e24 <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006c54:	4650      	mov	r0, sl
 8006c56:	f7fe f897 	bl	8004d88 <printString>
  for (set_idx=0; set_idx<AXIS_N_SETTINGS; set_idx++) {
 8006c5a:	2f04      	cmp	r7, #4
 8006c5c:	f000 80e9 	beq.w	8006e32 <report_grbl_settings+0x5de>
 8006c60:	3701      	adds	r7, #1
 8006c62:	360a      	adds	r6, #10
 8006c64:	f108 080a 	add.w	r8, r8, #10
 8006c68:	f109 090a 	add.w	r9, r9, #10
 8006c6c:	b2ff      	uxtb	r7, r7
 8006c6e:	b2f6      	uxtb	r6, r6
 8006c70:	fa5f f888 	uxtb.w	r8, r8
 8006c74:	fa5f f989 	uxtb.w	r9, r9
 8006c78:	e782      	b.n	8006b80 <report_grbl_settings+0x32c>
        case 1: report_util_float_setting(val+idx,settings.max_rate[idx],N_DECIMAL_SETTINGVALUE); break;
        case 2: report_util_float_setting(val+idx,settings.acceleration[idx]/(60*60),N_DECIMAL_SETTINGVALUE); break;
 8006c7a:	496f      	ldr	r1, [pc, #444]	; (8006e38 <report_grbl_settings+0x5e4>)
 8006c7c:	6a20      	ldr	r0, [r4, #32]
 8006c7e:	f7fa f817 	bl	8000cb0 <__aeabi_fmul>
 8006c82:	4605      	mov	r5, r0
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006c84:	2024      	movs	r0, #36	; 0x24
 8006c86:	f000 fd15 	bl	80076b4 <serial_write>
 8006c8a:	4658      	mov	r0, fp
 8006c8c:	f7fe f888 	bl	8004da0 <print_uint8_base10>
 8006c90:	203d      	movs	r0, #61	; 0x3d
 8006c92:	f000 fd0f 	bl	80076b4 <serial_write>
  printFloat(val, n_decimal);
 8006c96:	4628      	mov	r0, r5
 8006c98:	2103      	movs	r1, #3
 8006c9a:	f7fe f8c3 	bl	8004e24 <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006c9e:	4650      	mov	r0, sl
 8006ca0:	f7fe f872 	bl	8004d88 <printString>
        case 2: report_util_float_setting(val+idx,settings.acceleration[idx]/(60*60),N_DECIMAL_SETTINGVALUE); break;
 8006ca4:	4964      	ldr	r1, [pc, #400]	; (8006e38 <report_grbl_settings+0x5e4>)
 8006ca6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006ca8:	f7fa f802 	bl	8000cb0 <__aeabi_fmul>
 8006cac:	4605      	mov	r5, r0
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006cae:	2024      	movs	r0, #36	; 0x24
 8006cb0:	f000 fd00 	bl	80076b4 <serial_write>
 8006cb4:	4648      	mov	r0, r9
 8006cb6:	f7fe f873 	bl	8004da0 <print_uint8_base10>
 8006cba:	203d      	movs	r0, #61	; 0x3d
 8006cbc:	f000 fcfa 	bl	80076b4 <serial_write>
  printFloat(val, n_decimal);
 8006cc0:	4628      	mov	r0, r5
 8006cc2:	2103      	movs	r1, #3
 8006cc4:	f7fe f8ae 	bl	8004e24 <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006cc8:	4650      	mov	r0, sl
 8006cca:	f7fe f85d 	bl	8004d88 <printString>
        case 2: report_util_float_setting(val+idx,settings.acceleration[idx]/(60*60),N_DECIMAL_SETTINGVALUE); break;
 8006cce:	495a      	ldr	r1, [pc, #360]	; (8006e38 <report_grbl_settings+0x5e4>)
 8006cd0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8006cd2:	f7f9 ffed 	bl	8000cb0 <__aeabi_fmul>
 8006cd6:	4605      	mov	r5, r0
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006cd8:	2024      	movs	r0, #36	; 0x24
 8006cda:	f000 fceb 	bl	80076b4 <serial_write>
 8006cde:	4640      	mov	r0, r8
 8006ce0:	f7fe f85e 	bl	8004da0 <print_uint8_base10>
 8006ce4:	203d      	movs	r0, #61	; 0x3d
 8006ce6:	f000 fce5 	bl	80076b4 <serial_write>
  printFloat(val, n_decimal);
 8006cea:	4628      	mov	r0, r5
 8006cec:	2103      	movs	r1, #3
 8006cee:	f7fe f899 	bl	8004e24 <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006cf2:	4650      	mov	r0, sl
 8006cf4:	f7fe f848 	bl	8004d88 <printString>
        case 2: report_util_float_setting(val+idx,settings.acceleration[idx]/(60*60),N_DECIMAL_SETTINGVALUE); break;
 8006cf8:	494f      	ldr	r1, [pc, #316]	; (8006e38 <report_grbl_settings+0x5e4>)
 8006cfa:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8006cfc:	f7f9 ffd8 	bl	8000cb0 <__aeabi_fmul>
 8006d00:	4605      	mov	r5, r0
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006d02:	2024      	movs	r0, #36	; 0x24
 8006d04:	f000 fcd6 	bl	80076b4 <serial_write>
 8006d08:	4630      	mov	r0, r6
 8006d0a:	f7fe f849 	bl	8004da0 <print_uint8_base10>
 8006d0e:	203d      	movs	r0, #61	; 0x3d
 8006d10:	f000 fcd0 	bl	80076b4 <serial_write>
  printFloat(val, n_decimal);
 8006d14:	4628      	mov	r0, r5
 8006d16:	2103      	movs	r1, #3
 8006d18:	f7fe f884 	bl	8004e24 <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006d1c:	4650      	mov	r0, sl
 8006d1e:	f7fe f833 	bl	8004d88 <printString>
 8006d22:	e79d      	b.n	8006c60 <report_grbl_settings+0x40c>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006d24:	2024      	movs	r0, #36	; 0x24
        case 1: report_util_float_setting(val+idx,settings.max_rate[idx],N_DECIMAL_SETTINGVALUE); break;
 8006d26:	6925      	ldr	r5, [r4, #16]
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006d28:	f000 fcc4 	bl	80076b4 <serial_write>
 8006d2c:	4658      	mov	r0, fp
 8006d2e:	f7fe f837 	bl	8004da0 <print_uint8_base10>
 8006d32:	203d      	movs	r0, #61	; 0x3d
 8006d34:	f000 fcbe 	bl	80076b4 <serial_write>
  printFloat(val, n_decimal);
 8006d38:	4628      	mov	r0, r5
 8006d3a:	2103      	movs	r1, #3
 8006d3c:	f7fe f872 	bl	8004e24 <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006d40:	4650      	mov	r0, sl
 8006d42:	f7fe f821 	bl	8004d88 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006d46:	2024      	movs	r0, #36	; 0x24
        case 1: report_util_float_setting(val+idx,settings.max_rate[idx],N_DECIMAL_SETTINGVALUE); break;
 8006d48:	6965      	ldr	r5, [r4, #20]
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006d4a:	f000 fcb3 	bl	80076b4 <serial_write>
 8006d4e:	4648      	mov	r0, r9
 8006d50:	f7fe f826 	bl	8004da0 <print_uint8_base10>
 8006d54:	203d      	movs	r0, #61	; 0x3d
 8006d56:	f000 fcad 	bl	80076b4 <serial_write>
  printFloat(val, n_decimal);
 8006d5a:	4628      	mov	r0, r5
 8006d5c:	2103      	movs	r1, #3
 8006d5e:	f7fe f861 	bl	8004e24 <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006d62:	4650      	mov	r0, sl
 8006d64:	f7fe f810 	bl	8004d88 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006d68:	2024      	movs	r0, #36	; 0x24
        case 1: report_util_float_setting(val+idx,settings.max_rate[idx],N_DECIMAL_SETTINGVALUE); break;
 8006d6a:	69a5      	ldr	r5, [r4, #24]
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006d6c:	f000 fca2 	bl	80076b4 <serial_write>
 8006d70:	4640      	mov	r0, r8
 8006d72:	f7fe f815 	bl	8004da0 <print_uint8_base10>
 8006d76:	203d      	movs	r0, #61	; 0x3d
 8006d78:	f000 fc9c 	bl	80076b4 <serial_write>
  printFloat(val, n_decimal);
 8006d7c:	4628      	mov	r0, r5
 8006d7e:	2103      	movs	r1, #3
 8006d80:	f7fe f850 	bl	8004e24 <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006d84:	4650      	mov	r0, sl
 8006d86:	f7fd ffff 	bl	8004d88 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006d8a:	2024      	movs	r0, #36	; 0x24
        case 1: report_util_float_setting(val+idx,settings.max_rate[idx],N_DECIMAL_SETTINGVALUE); break;
 8006d8c:	69e5      	ldr	r5, [r4, #28]
 8006d8e:	e7b9      	b.n	8006d04 <report_grbl_settings+0x4b0>
        case 3: report_util_float_setting(val+idx,-settings.max_travel[idx],N_DECIMAL_SETTINGVALUE); break;
 8006d90:	6b22      	ldr	r2, [r4, #48]	; 0x30
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006d92:	2024      	movs	r0, #36	; 0x24
        case 3: report_util_float_setting(val+idx,-settings.max_travel[idx],N_DECIMAL_SETTINGVALUE); break;
 8006d94:	f102 4700 	add.w	r7, r2, #2147483648	; 0x80000000
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006d98:	f000 fc8c 	bl	80076b4 <serial_write>
 8006d9c:	4658      	mov	r0, fp
 8006d9e:	f7fd ffff 	bl	8004da0 <print_uint8_base10>
 8006da2:	203d      	movs	r0, #61	; 0x3d
 8006da4:	f000 fc86 	bl	80076b4 <serial_write>
  printFloat(val, n_decimal);
 8006da8:	4638      	mov	r0, r7
 8006daa:	4629      	mov	r1, r5
 8006dac:	f7fe f83a 	bl	8004e24 <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006db0:	4822      	ldr	r0, [pc, #136]	; (8006e3c <report_grbl_settings+0x5e8>)
 8006db2:	f7fd ffe9 	bl	8004d88 <printString>
        case 3: report_util_float_setting(val+idx,-settings.max_travel[idx],N_DECIMAL_SETTINGVALUE); break;
 8006db6:	6b63      	ldr	r3, [r4, #52]	; 0x34
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006db8:	2024      	movs	r0, #36	; 0x24
        case 3: report_util_float_setting(val+idx,-settings.max_travel[idx],N_DECIMAL_SETTINGVALUE); break;
 8006dba:	f103 4500 	add.w	r5, r3, #2147483648	; 0x80000000
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006dbe:	f000 fc79 	bl	80076b4 <serial_write>
        case 3: report_util_float_setting(val+idx,-settings.max_travel[idx],N_DECIMAL_SETTINGVALUE); break;
 8006dc2:	1eb0      	subs	r0, r6, #2
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006dc4:	b2c0      	uxtb	r0, r0
 8006dc6:	f7fd ffeb 	bl	8004da0 <print_uint8_base10>
 8006dca:	203d      	movs	r0, #61	; 0x3d
 8006dcc:	f000 fc72 	bl	80076b4 <serial_write>
  printFloat(val, n_decimal);
 8006dd0:	4628      	mov	r0, r5
 8006dd2:	2103      	movs	r1, #3
 8006dd4:	f7fe f826 	bl	8004e24 <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006dd8:	4818      	ldr	r0, [pc, #96]	; (8006e3c <report_grbl_settings+0x5e8>)
 8006dda:	f7fd ffd5 	bl	8004d88 <printString>
        case 3: report_util_float_setting(val+idx,-settings.max_travel[idx],N_DECIMAL_SETTINGVALUE); break;
 8006dde:	6ba3      	ldr	r3, [r4, #56]	; 0x38
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006de0:	2024      	movs	r0, #36	; 0x24
        case 3: report_util_float_setting(val+idx,-settings.max_travel[idx],N_DECIMAL_SETTINGVALUE); break;
 8006de2:	f103 4500 	add.w	r5, r3, #2147483648	; 0x80000000
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006de6:	f000 fc65 	bl	80076b4 <serial_write>
        case 3: report_util_float_setting(val+idx,-settings.max_travel[idx],N_DECIMAL_SETTINGVALUE); break;
 8006dea:	1e70      	subs	r0, r6, #1
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006dec:	b2c0      	uxtb	r0, r0
 8006dee:	f7fd ffd7 	bl	8004da0 <print_uint8_base10>
 8006df2:	203d      	movs	r0, #61	; 0x3d
 8006df4:	f000 fc5e 	bl	80076b4 <serial_write>
  printFloat(val, n_decimal);
 8006df8:	4628      	mov	r0, r5
 8006dfa:	2103      	movs	r1, #3
 8006dfc:	f7fe f812 	bl	8004e24 <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006e00:	480e      	ldr	r0, [pc, #56]	; (8006e3c <report_grbl_settings+0x5e8>)
 8006e02:	f7fd ffc1 	bl	8004d88 <printString>
        case 3: report_util_float_setting(val+idx,-settings.max_travel[idx],N_DECIMAL_SETTINGVALUE); break;
 8006e06:	6be4      	ldr	r4, [r4, #60]	; 0x3c
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006e08:	2024      	movs	r0, #36	; 0x24
 8006e0a:	f000 fc53 	bl	80076b4 <serial_write>
 8006e0e:	4630      	mov	r0, r6
 8006e10:	f7fd ffc6 	bl	8004da0 <print_uint8_base10>
        case 3: report_util_float_setting(val+idx,-settings.max_travel[idx],N_DECIMAL_SETTINGVALUE); break;
 8006e14:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006e18:	203d      	movs	r0, #61	; 0x3d
 8006e1a:	f000 fc4b 	bl	80076b4 <serial_write>
  printFloat(val, n_decimal);
 8006e1e:	4620      	mov	r0, r4
 8006e20:	2103      	movs	r1, #3
 8006e22:	f7fd ffff 	bl	8004e24 <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006e26:	4805      	ldr	r0, [pc, #20]	; (8006e3c <report_grbl_settings+0x5e8>)
      }
    }
    val += AXIS_SETTINGS_INCREMENT;
  }
}
 8006e28:	b003      	add	sp, #12
 8006e2a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006e2e:	f7fd bfab 	b.w	8004d88 <printString>
}
 8006e32:	b003      	add	sp, #12
 8006e34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e38:	3991a2b4 	.word	0x3991a2b4
 8006e3c:	0800c864 	.word	0x0800c864

08006e40 <report_probe_parameters>:

// Prints current probe parameters. Upon a probe command, these parameters are updated upon a
// successful probe or upon a failed probe with the G38.3 without errors command (if supported).
// These values are retained until Grbl is power-cycled, whereby they will be re-zeroed.
void report_probe_parameters()
{
 8006e40:	b500      	push	{lr}
  // Report in terms of machine position.
  printPgmString(PSTR("[PRB:"));
 8006e42:	4816      	ldr	r0, [pc, #88]	; (8006e9c <report_probe_parameters+0x5c>)
{
 8006e44:	b085      	sub	sp, #20
  printPgmString(PSTR("[PRB:"));
 8006e46:	f7fd ff9f 	bl	8004d88 <printString>
  float print_position[N_AXIS];
  system_convert_array_steps_to_mpos(print_position,sys_probe_position);
 8006e4a:	4915      	ldr	r1, [pc, #84]	; (8006ea0 <report_probe_parameters+0x60>)
 8006e4c:	4668      	mov	r0, sp
 8006e4e:	f002 fe53 	bl	8009af8 <system_convert_array_steps_to_mpos>
    printFloat_CoordValue(axis_value[idx]);
 8006e52:	9800      	ldr	r0, [sp, #0]
 8006e54:	f7fe f858 	bl	8004f08 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8006e58:	202c      	movs	r0, #44	; 0x2c
 8006e5a:	f000 fc2b 	bl	80076b4 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8006e5e:	9801      	ldr	r0, [sp, #4]
 8006e60:	f7fe f852 	bl	8004f08 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8006e64:	202c      	movs	r0, #44	; 0x2c
 8006e66:	f000 fc25 	bl	80076b4 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8006e6a:	9802      	ldr	r0, [sp, #8]
 8006e6c:	f7fe f84c 	bl	8004f08 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8006e70:	202c      	movs	r0, #44	; 0x2c
 8006e72:	f000 fc1f 	bl	80076b4 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8006e76:	9803      	ldr	r0, [sp, #12]
 8006e78:	f7fe f846 	bl	8004f08 <printFloat_CoordValue>
  report_util_axis_values(print_position);
  serial_write(':');
 8006e7c:	203a      	movs	r0, #58	; 0x3a
 8006e7e:	f000 fc19 	bl	80076b4 <serial_write>
  print_uint8_base10(sys.probe_succeeded);
 8006e82:	4b08      	ldr	r3, [pc, #32]	; (8006ea4 <report_probe_parameters+0x64>)
 8006e84:	7958      	ldrb	r0, [r3, #5]
 8006e86:	f7fd ff8b 	bl	8004da0 <print_uint8_base10>
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 8006e8a:	205d      	movs	r0, #93	; 0x5d
 8006e8c:	f000 fc12 	bl	80076b4 <serial_write>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006e90:	4805      	ldr	r0, [pc, #20]	; (8006ea8 <report_probe_parameters+0x68>)
 8006e92:	f7fd ff79 	bl	8004d88 <printString>
  report_util_feedback_line_feed();
}
 8006e96:	b005      	add	sp, #20
 8006e98:	f85d fb04 	ldr.w	pc, [sp], #4
 8006e9c:	0800c7cc 	.word	0x0800c7cc
 8006ea0:	200010e0 	.word	0x200010e0
 8006ea4:	200010c8 	.word	0x200010c8
 8006ea8:	0800c864 	.word	0x0800c864

08006eac <report_ngc_parameters>:


// Prints Grbl NGC parameters (coordinate offsets, probing)
void report_ngc_parameters()
{
 8006eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006eb0:	2400      	movs	r4, #0
 8006eb2:	b088      	sub	sp, #32
  for (coord_select = 0; coord_select <= SETTING_INDEX_NCOORD; coord_select++) {
    if (!(settings_read_coord_data(coord_select,coord_data))) {
      report_status_message(STATUS_SETTING_READ_FAIL);
      return;
    }
    printPgmString(PSTR("[G"));
 8006eb4:	4e51      	ldr	r6, [pc, #324]	; (8006ffc <report_ngc_parameters+0x150>)
    switch (coord_select) {
      case 6: printPgmString(PSTR("28")); break;
 8006eb6:	f8df 816c 	ldr.w	r8, [pc, #364]	; 8007024 <report_ngc_parameters+0x178>
      case 7: printPgmString(PSTR("30")); break;
 8006eba:	4f51      	ldr	r7, [pc, #324]	; (8007000 <report_ngc_parameters+0x154>)
 8006ebc:	e025      	b.n	8006f0a <report_ngc_parameters+0x5e>
    switch (coord_select) {
 8006ebe:	2d07      	cmp	r5, #7
 8006ec0:	d133      	bne.n	8006f2a <report_ngc_parameters+0x7e>
      case 7: printPgmString(PSTR("30")); break;
 8006ec2:	4638      	mov	r0, r7
 8006ec4:	f7fd ff60 	bl	8004d88 <printString>
      default: print_uint8_base10(coord_select+54); break; // G54-G59
    }
    serial_write(':');
 8006ec8:	203a      	movs	r0, #58	; 0x3a
 8006eca:	f000 fbf3 	bl	80076b4 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8006ece:	9800      	ldr	r0, [sp, #0]
 8006ed0:	f7fe f81a 	bl	8004f08 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8006ed4:	202c      	movs	r0, #44	; 0x2c
 8006ed6:	f000 fbed 	bl	80076b4 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8006eda:	9801      	ldr	r0, [sp, #4]
 8006edc:	f7fe f814 	bl	8004f08 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8006ee0:	202c      	movs	r0, #44	; 0x2c
 8006ee2:	f000 fbe7 	bl	80076b4 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8006ee6:	9802      	ldr	r0, [sp, #8]
 8006ee8:	f7fe f80e 	bl	8004f08 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8006eec:	202c      	movs	r0, #44	; 0x2c
 8006eee:	f000 fbe1 	bl	80076b4 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8006ef2:	9803      	ldr	r0, [sp, #12]
 8006ef4:	f7fe f808 	bl	8004f08 <printFloat_CoordValue>
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 8006ef8:	205d      	movs	r0, #93	; 0x5d
 8006efa:	f000 fbdb 	bl	80076b4 <serial_write>
 8006efe:	3401      	adds	r4, #1
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006f00:	4840      	ldr	r0, [pc, #256]	; (8007004 <report_ngc_parameters+0x158>)
 8006f02:	f7fd ff41 	bl	8004d88 <printString>
  for (coord_select = 0; coord_select <= SETTING_INDEX_NCOORD; coord_select++) {
 8006f06:	2c08      	cmp	r4, #8
 8006f08:	d015      	beq.n	8006f36 <report_ngc_parameters+0x8a>
 8006f0a:	b2e5      	uxtb	r5, r4
    if (!(settings_read_coord_data(coord_select,coord_data))) {
 8006f0c:	4628      	mov	r0, r5
 8006f0e:	4669      	mov	r1, sp
 8006f10:	f000 fe2c 	bl	8007b6c <settings_read_coord_data>
 8006f14:	2800      	cmp	r0, #0
 8006f16:	d065      	beq.n	8006fe4 <report_ngc_parameters+0x138>
    printPgmString(PSTR("[G"));
 8006f18:	4630      	mov	r0, r6
 8006f1a:	f7fd ff35 	bl	8004d88 <printString>
    switch (coord_select) {
 8006f1e:	2d06      	cmp	r5, #6
 8006f20:	d1cd      	bne.n	8006ebe <report_ngc_parameters+0x12>
      case 6: printPgmString(PSTR("28")); break;
 8006f22:	4640      	mov	r0, r8
 8006f24:	f7fd ff30 	bl	8004d88 <printString>
 8006f28:	e7ce      	b.n	8006ec8 <report_ngc_parameters+0x1c>
      default: print_uint8_base10(coord_select+54); break; // G54-G59
 8006f2a:	f105 0036 	add.w	r0, r5, #54	; 0x36
 8006f2e:	b2c0      	uxtb	r0, r0
 8006f30:	f7fd ff36 	bl	8004da0 <print_uint8_base10>
 8006f34:	e7c8      	b.n	8006ec8 <report_ngc_parameters+0x1c>
    printFloat_CoordValue(axis_value[idx]);
 8006f36:	4c34      	ldr	r4, [pc, #208]	; (8007008 <report_ngc_parameters+0x15c>)
    report_util_axis_values(coord_data);
    report_util_feedback_line_feed();
  }
  printPgmString(PSTR("[G92:")); // Print G92,G92.1 which are not persistent in memory
 8006f38:	4834      	ldr	r0, [pc, #208]	; (800700c <report_ngc_parameters+0x160>)
 8006f3a:	f7fd ff25 	bl	8004d88 <printString>
    printFloat_CoordValue(axis_value[idx]);
 8006f3e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8006f40:	f7fd ffe2 	bl	8004f08 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8006f44:	202c      	movs	r0, #44	; 0x2c
 8006f46:	f000 fbb5 	bl	80076b4 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8006f4a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8006f4c:	f7fd ffdc 	bl	8004f08 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8006f50:	202c      	movs	r0, #44	; 0x2c
 8006f52:	f000 fbaf 	bl	80076b4 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8006f56:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8006f58:	f7fd ffd6 	bl	8004f08 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8006f5c:	202c      	movs	r0, #44	; 0x2c
 8006f5e:	f000 fba9 	bl	80076b4 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8006f62:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006f64:	f7fd ffd0 	bl	8004f08 <printFloat_CoordValue>
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 8006f68:	205d      	movs	r0, #93	; 0x5d
 8006f6a:	f000 fba3 	bl	80076b4 <serial_write>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006f6e:	4825      	ldr	r0, [pc, #148]	; (8007004 <report_ngc_parameters+0x158>)
 8006f70:	f7fd ff0a 	bl	8004d88 <printString>
  report_util_axis_values(gc_state.coord_offset);
  report_util_feedback_line_feed();
  printPgmString(PSTR("[TLO:")); // Print tool length offset value
 8006f74:	4826      	ldr	r0, [pc, #152]	; (8007010 <report_ngc_parameters+0x164>)
 8006f76:	f7fd ff07 	bl	8004d88 <printString>
  printFloat_CoordValue(gc_state.tool_length_offset);
 8006f7a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8006f7c:	f7fd ffc4 	bl	8004f08 <printFloat_CoordValue>
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 8006f80:	205d      	movs	r0, #93	; 0x5d
 8006f82:	f000 fb97 	bl	80076b4 <serial_write>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006f86:	481f      	ldr	r0, [pc, #124]	; (8007004 <report_ngc_parameters+0x158>)
 8006f88:	f7fd fefe 	bl	8004d88 <printString>
  printPgmString(PSTR("[PRB:"));
 8006f8c:	4821      	ldr	r0, [pc, #132]	; (8007014 <report_ngc_parameters+0x168>)
 8006f8e:	f7fd fefb 	bl	8004d88 <printString>
  system_convert_array_steps_to_mpos(print_position,sys_probe_position);
 8006f92:	4921      	ldr	r1, [pc, #132]	; (8007018 <report_ngc_parameters+0x16c>)
 8006f94:	a804      	add	r0, sp, #16
 8006f96:	f002 fdaf 	bl	8009af8 <system_convert_array_steps_to_mpos>
    printFloat_CoordValue(axis_value[idx]);
 8006f9a:	9804      	ldr	r0, [sp, #16]
 8006f9c:	f7fd ffb4 	bl	8004f08 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8006fa0:	202c      	movs	r0, #44	; 0x2c
 8006fa2:	f000 fb87 	bl	80076b4 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8006fa6:	9805      	ldr	r0, [sp, #20]
 8006fa8:	f7fd ffae 	bl	8004f08 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8006fac:	202c      	movs	r0, #44	; 0x2c
 8006fae:	f000 fb81 	bl	80076b4 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8006fb2:	9806      	ldr	r0, [sp, #24]
 8006fb4:	f7fd ffa8 	bl	8004f08 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8006fb8:	202c      	movs	r0, #44	; 0x2c
 8006fba:	f000 fb7b 	bl	80076b4 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8006fbe:	9807      	ldr	r0, [sp, #28]
 8006fc0:	f7fd ffa2 	bl	8004f08 <printFloat_CoordValue>
  serial_write(':');
 8006fc4:	203a      	movs	r0, #58	; 0x3a
 8006fc6:	f000 fb75 	bl	80076b4 <serial_write>
  print_uint8_base10(sys.probe_succeeded);
 8006fca:	4b14      	ldr	r3, [pc, #80]	; (800701c <report_ngc_parameters+0x170>)
 8006fcc:	7958      	ldrb	r0, [r3, #5]
 8006fce:	f7fd fee7 	bl	8004da0 <print_uint8_base10>
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 8006fd2:	205d      	movs	r0, #93	; 0x5d
 8006fd4:	f000 fb6e 	bl	80076b4 <serial_write>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006fd8:	480a      	ldr	r0, [pc, #40]	; (8007004 <report_ngc_parameters+0x158>)
 8006fda:	f7fd fed5 	bl	8004d88 <printString>
  report_util_feedback_line_feed();
  report_probe_parameters(); // Print probe parameters. Not persistent in memory.
}
 8006fde:	b008      	add	sp, #32
 8006fe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      printPgmString(PSTR("error:"));
 8006fe4:	480e      	ldr	r0, [pc, #56]	; (8007020 <report_ngc_parameters+0x174>)
 8006fe6:	f7fd fecf 	bl	8004d88 <printString>
      print_uint8_base10(status_code);
 8006fea:	2007      	movs	r0, #7
 8006fec:	f7fd fed8 	bl	8004da0 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006ff0:	4804      	ldr	r0, [pc, #16]	; (8007004 <report_ngc_parameters+0x158>)
 8006ff2:	f7fd fec9 	bl	8004d88 <printString>
}
 8006ff6:	b008      	add	sp, #32
 8006ff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ffc:	0800c7b0 	.word	0x0800c7b0
 8007000:	0800c7b8 	.word	0x0800c7b8
 8007004:	0800c864 	.word	0x0800c864
 8007008:	2000102c 	.word	0x2000102c
 800700c:	0800c7bc 	.word	0x0800c7bc
 8007010:	0800c7c4 	.word	0x0800c7c4
 8007014:	0800c7cc 	.word	0x0800c7cc
 8007018:	200010e0 	.word	0x200010e0
 800701c:	200010c8 	.word	0x200010c8
 8007020:	0800c85c 	.word	0x0800c85c
 8007024:	0800c7b4 	.word	0x0800c7b4

08007028 <report_gcode_modes>:


// Print current gcode parser mode state
void report_gcode_modes()
{
 8007028:	b510      	push	{r4, lr}
  printPgmString(PSTR("[GC:G"));
  if (gc_state.modal.motion >= MOTION_MODE_PROBE_TOWARD) {
 800702a:	4c52      	ldr	r4, [pc, #328]	; (8007174 <report_gcode_modes+0x14c>)
  printPgmString(PSTR("[GC:G"));
 800702c:	4852      	ldr	r0, [pc, #328]	; (8007178 <report_gcode_modes+0x150>)
 800702e:	f7fd feab 	bl	8004d88 <printString>
  if (gc_state.modal.motion >= MOTION_MODE_PROBE_TOWARD) {
 8007032:	7820      	ldrb	r0, [r4, #0]
 8007034:	288b      	cmp	r0, #139	; 0x8b
 8007036:	d961      	bls.n	80070fc <report_gcode_modes+0xd4>
    printPgmString(PSTR("38."));
 8007038:	4850      	ldr	r0, [pc, #320]	; (800717c <report_gcode_modes+0x154>)
 800703a:	f7fd fea5 	bl	8004d88 <printString>
    print_uint8_base10(gc_state.modal.motion - (MOTION_MODE_PROBE_TOWARD-2));
 800703e:	7820      	ldrb	r0, [r4, #0]
 8007040:	3076      	adds	r0, #118	; 0x76
 8007042:	b2c0      	uxtb	r0, r0
 8007044:	f7fd feac 	bl	8004da0 <print_uint8_base10>
static void report_util_gcode_modes_G() { printPgmString(PSTR(" G")); }
 8007048:	484d      	ldr	r0, [pc, #308]	; (8007180 <report_gcode_modes+0x158>)
 800704a:	f7fd fe9d 	bl	8004d88 <printString>
  } else {
    print_uint8_base10(gc_state.modal.motion);
  }

  report_util_gcode_modes_G();
  print_uint8_base10(gc_state.modal.coord_select+54);
 800704e:	79a0      	ldrb	r0, [r4, #6]
 8007050:	3036      	adds	r0, #54	; 0x36
 8007052:	b2c0      	uxtb	r0, r0
 8007054:	f7fd fea4 	bl	8004da0 <print_uint8_base10>
static void report_util_gcode_modes_G() { printPgmString(PSTR(" G")); }
 8007058:	4849      	ldr	r0, [pc, #292]	; (8007180 <report_gcode_modes+0x158>)
 800705a:	f7fd fe95 	bl	8004d88 <printString>

  report_util_gcode_modes_G();
  print_uint8_base10(gc_state.modal.plane_select+17);
 800705e:	7920      	ldrb	r0, [r4, #4]
 8007060:	3011      	adds	r0, #17
 8007062:	b2c0      	uxtb	r0, r0
 8007064:	f7fd fe9c 	bl	8004da0 <print_uint8_base10>
static void report_util_gcode_modes_G() { printPgmString(PSTR(" G")); }
 8007068:	4845      	ldr	r0, [pc, #276]	; (8007180 <report_gcode_modes+0x158>)
 800706a:	f7fd fe8d 	bl	8004d88 <printString>

  report_util_gcode_modes_G();
  print_uint8_base10(21-gc_state.modal.units);
 800706e:	78a0      	ldrb	r0, [r4, #2]
 8007070:	f1c0 0015 	rsb	r0, r0, #21
 8007074:	b2c0      	uxtb	r0, r0
 8007076:	f7fd fe93 	bl	8004da0 <print_uint8_base10>
static void report_util_gcode_modes_G() { printPgmString(PSTR(" G")); }
 800707a:	4841      	ldr	r0, [pc, #260]	; (8007180 <report_gcode_modes+0x158>)
 800707c:	f7fd fe84 	bl	8004d88 <printString>

  report_util_gcode_modes_G();
  print_uint8_base10(gc_state.modal.distance+90);
 8007080:	78e0      	ldrb	r0, [r4, #3]
 8007082:	305a      	adds	r0, #90	; 0x5a
 8007084:	b2c0      	uxtb	r0, r0
 8007086:	f7fd fe8b 	bl	8004da0 <print_uint8_base10>
static void report_util_gcode_modes_G() { printPgmString(PSTR(" G")); }
 800708a:	483d      	ldr	r0, [pc, #244]	; (8007180 <report_gcode_modes+0x158>)
 800708c:	f7fd fe7c 	bl	8004d88 <printString>

  report_util_gcode_modes_G();
  print_uint8_base10(94-gc_state.modal.feed_rate);
 8007090:	7860      	ldrb	r0, [r4, #1]
 8007092:	f1c0 005e 	rsb	r0, r0, #94	; 0x5e
 8007096:	b2c0      	uxtb	r0, r0
 8007098:	f7fd fe82 	bl	8004da0 <print_uint8_base10>

  if (gc_state.modal.program_flow) {
 800709c:	79e3      	ldrb	r3, [r4, #7]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d13f      	bne.n	8007122 <report_gcode_modes+0xfa>
static void report_util_gcode_modes_M() { printPgmString(PSTR(" M")); }
 80070a2:	4838      	ldr	r0, [pc, #224]	; (8007184 <report_gcode_modes+0x15c>)
 80070a4:	f7fd fe70 	bl	8004d88 <printString>
        break;
    }
  }

  report_util_gcode_modes_M();
  switch (gc_state.modal.spindle) {
 80070a8:	7a63      	ldrb	r3, [r4, #9]
 80070aa:	2b10      	cmp	r3, #16
 80070ac:	d04a      	beq.n	8007144 <report_gcode_modes+0x11c>
 80070ae:	2b20      	cmp	r3, #32
 80070b0:	d044      	beq.n	800713c <report_gcode_modes+0x114>
 80070b2:	b333      	cbz	r3, 8007102 <report_gcode_modes+0xda>
static void report_util_gcode_modes_M() { printPgmString(PSTR(" M")); }
 80070b4:	4833      	ldr	r0, [pc, #204]	; (8007184 <report_gcode_modes+0x15c>)
 80070b6:	f7fd fe67 	bl	8004d88 <printString>
    case SPINDLE_DISABLE : serial_write('5'); break;
  }

  report_util_gcode_modes_M();
  #ifdef ENABLE_M7
    if (gc_state.modal.coolant) { // Note: Multiple coolant states may be active at the same time.
 80070ba:	7a23      	ldrb	r3, [r4, #8]
 80070bc:	b353      	cbz	r3, 8007114 <report_gcode_modes+0xec>
      if (gc_state.modal.coolant & PL_COND_FLAG_COOLANT_MIST) { report_util_gcode_modes_M(); serial_write('7'); }
 80070be:	061a      	lsls	r2, r3, #24
 80070c0:	d44f      	bmi.n	8007162 <report_gcode_modes+0x13a>
      if (gc_state.modal.coolant & PL_COND_FLAG_COOLANT_FLOOD) { report_util_gcode_modes_M(); serial_write('8'); }
 80070c2:	065b      	lsls	r3, r3, #25
 80070c4:	d442      	bmi.n	800714c <report_gcode_modes+0x124>
			report_util_gcode_modes_M();
			print_uint8_base10(56);
		}
	#endif

  printPgmString(PSTR(" T"));
 80070c6:	4830      	ldr	r0, [pc, #192]	; (8007188 <report_gcode_modes+0x160>)
 80070c8:	f7fd fe5e 	bl	8004d88 <printString>
  print_uint8_base10(gc_state.tool);
 80070cc:	7d20      	ldrb	r0, [r4, #20]
 80070ce:	f7fd fe67 	bl	8004da0 <print_uint8_base10>

  printPgmString(PSTR(" F"));
 80070d2:	482e      	ldr	r0, [pc, #184]	; (800718c <report_gcode_modes+0x164>)
 80070d4:	f7fd fe58 	bl	8004d88 <printString>
  printFloat_RateValue(gc_state.feed_rate);
 80070d8:	6920      	ldr	r0, [r4, #16]
 80070da:	f7fd fffd 	bl	80050d8 <printFloat_RateValue>

  #ifdef VARIABLE_SPINDLE
    printPgmString(PSTR(" S"));
 80070de:	482c      	ldr	r0, [pc, #176]	; (8007190 <report_gcode_modes+0x168>)
 80070e0:	f7fd fe52 	bl	8004d88 <printString>
    printFloat(gc_state.spindle_speed,N_DECIMAL_RPMVALUE);
 80070e4:	68e0      	ldr	r0, [r4, #12]
 80070e6:	2100      	movs	r1, #0
 80070e8:	f7fd fe9c 	bl	8004e24 <printFloat>
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 80070ec:	205d      	movs	r0, #93	; 0x5d
 80070ee:	f000 fae1 	bl	80076b4 <serial_write>
  #endif

  report_util_feedback_line_feed();
}
 80070f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80070f6:	4827      	ldr	r0, [pc, #156]	; (8007194 <report_gcode_modes+0x16c>)
 80070f8:	f7fd be46 	b.w	8004d88 <printString>
    print_uint8_base10(gc_state.modal.motion);
 80070fc:	f7fd fe50 	bl	8004da0 <print_uint8_base10>
 8007100:	e7a2      	b.n	8007048 <report_gcode_modes+0x20>
    case SPINDLE_DISABLE : serial_write('5'); break;
 8007102:	2035      	movs	r0, #53	; 0x35
 8007104:	f000 fad6 	bl	80076b4 <serial_write>
static void report_util_gcode_modes_M() { printPgmString(PSTR(" M")); }
 8007108:	481e      	ldr	r0, [pc, #120]	; (8007184 <report_gcode_modes+0x15c>)
 800710a:	f7fd fe3d 	bl	8004d88 <printString>
    if (gc_state.modal.coolant) { // Note: Multiple coolant states may be active at the same time.
 800710e:	7a23      	ldrb	r3, [r4, #8]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d1d4      	bne.n	80070be <report_gcode_modes+0x96>
static void report_util_gcode_modes_M() { printPgmString(PSTR(" M")); }
 8007114:	481b      	ldr	r0, [pc, #108]	; (8007184 <report_gcode_modes+0x15c>)
 8007116:	f7fd fe37 	bl	8004d88 <printString>
    } else { report_util_gcode_modes_M(); serial_write('9'); }
 800711a:	2039      	movs	r0, #57	; 0x39
 800711c:	f000 faca 	bl	80076b4 <serial_write>
 8007120:	e7d1      	b.n	80070c6 <report_gcode_modes+0x9e>
static void report_util_gcode_modes_M() { printPgmString(PSTR(" M")); }
 8007122:	4818      	ldr	r0, [pc, #96]	; (8007184 <report_gcode_modes+0x15c>)
 8007124:	f7fd fe30 	bl	8004d88 <printString>
    switch (gc_state.modal.program_flow) {
 8007128:	79e0      	ldrb	r0, [r4, #7]
 800712a:	2803      	cmp	r0, #3
 800712c:	d015      	beq.n	800715a <report_gcode_modes+0x132>
 800712e:	281e      	cmp	r0, #30
 8007130:	d001      	beq.n	8007136 <report_gcode_modes+0x10e>
 8007132:	2802      	cmp	r0, #2
 8007134:	d1b5      	bne.n	80070a2 <report_gcode_modes+0x7a>
        print_uint8_base10(gc_state.modal.program_flow);
 8007136:	f7fd fe33 	bl	8004da0 <print_uint8_base10>
        break;
 800713a:	e7b2      	b.n	80070a2 <report_gcode_modes+0x7a>
    case SPINDLE_ENABLE_CCW : serial_write('4'); break;
 800713c:	2034      	movs	r0, #52	; 0x34
 800713e:	f000 fab9 	bl	80076b4 <serial_write>
 8007142:	e7b7      	b.n	80070b4 <report_gcode_modes+0x8c>
    case SPINDLE_ENABLE_CW : serial_write('3'); break;
 8007144:	2033      	movs	r0, #51	; 0x33
 8007146:	f000 fab5 	bl	80076b4 <serial_write>
 800714a:	e7b3      	b.n	80070b4 <report_gcode_modes+0x8c>
static void report_util_gcode_modes_M() { printPgmString(PSTR(" M")); }
 800714c:	480d      	ldr	r0, [pc, #52]	; (8007184 <report_gcode_modes+0x15c>)
 800714e:	f7fd fe1b 	bl	8004d88 <printString>
      if (gc_state.modal.coolant & PL_COND_FLAG_COOLANT_FLOOD) { report_util_gcode_modes_M(); serial_write('8'); }
 8007152:	2038      	movs	r0, #56	; 0x38
 8007154:	f000 faae 	bl	80076b4 <serial_write>
 8007158:	e7b5      	b.n	80070c6 <report_gcode_modes+0x9e>
      case PROGRAM_FLOW_PAUSED : serial_write('0'); break;
 800715a:	2030      	movs	r0, #48	; 0x30
 800715c:	f000 faaa 	bl	80076b4 <serial_write>
 8007160:	e79f      	b.n	80070a2 <report_gcode_modes+0x7a>
static void report_util_gcode_modes_M() { printPgmString(PSTR(" M")); }
 8007162:	4808      	ldr	r0, [pc, #32]	; (8007184 <report_gcode_modes+0x15c>)
 8007164:	f7fd fe10 	bl	8004d88 <printString>
      if (gc_state.modal.coolant & PL_COND_FLAG_COOLANT_MIST) { report_util_gcode_modes_M(); serial_write('7'); }
 8007168:	2037      	movs	r0, #55	; 0x37
 800716a:	f000 faa3 	bl	80076b4 <serial_write>
 800716e:	7a23      	ldrb	r3, [r4, #8]
 8007170:	e7a7      	b.n	80070c2 <report_gcode_modes+0x9a>
 8007172:	bf00      	nop
 8007174:	2000102c 	.word	0x2000102c
 8007178:	0800c720 	.word	0x0800c720
 800717c:	0800c728 	.word	0x0800c728
 8007180:	0800c72c 	.word	0x0800c72c
 8007184:	0800c730 	.word	0x0800c730
 8007188:	0800c734 	.word	0x0800c734
 800718c:	0800c738 	.word	0x0800c738
 8007190:	0800c73c 	.word	0x0800c73c
 8007194:	0800c864 	.word	0x0800c864

08007198 <report_startup_line>:

// Prints specified startup line
void report_startup_line(uint8_t n, char *line)
{
 8007198:	b538      	push	{r3, r4, r5, lr}
 800719a:	4605      	mov	r5, r0
 800719c:	460c      	mov	r4, r1
  printPgmString(PSTR("$N"));
 800719e:	4808      	ldr	r0, [pc, #32]	; (80071c0 <report_startup_line+0x28>)
 80071a0:	f7fd fdf2 	bl	8004d88 <printString>
  print_uint8_base10(n);
 80071a4:	4628      	mov	r0, r5
 80071a6:	f7fd fdfb 	bl	8004da0 <print_uint8_base10>
  serial_write('=');
 80071aa:	203d      	movs	r0, #61	; 0x3d
 80071ac:	f000 fa82 	bl	80076b4 <serial_write>
  printString(line);
 80071b0:	4620      	mov	r0, r4
 80071b2:	f7fd fde9 	bl	8004d88 <printString>
  report_util_line_feed();
}
 80071b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80071ba:	4802      	ldr	r0, [pc, #8]	; (80071c4 <report_startup_line+0x2c>)
 80071bc:	f7fd bde4 	b.w	8004d88 <printString>
 80071c0:	0800c850 	.word	0x0800c850
 80071c4:	0800c864 	.word	0x0800c864

080071c8 <report_execute_startup_message>:

void report_execute_startup_message(char *line, uint8_t status_code)
{
 80071c8:	b538      	push	{r3, r4, r5, lr}
 80071ca:	4605      	mov	r5, r0
 80071cc:	460c      	mov	r4, r1
  serial_write('>');
 80071ce:	203e      	movs	r0, #62	; 0x3e
 80071d0:	f000 fa70 	bl	80076b4 <serial_write>
  printString(line);
 80071d4:	4628      	mov	r0, r5
 80071d6:	f7fd fdd7 	bl	8004d88 <printString>
  serial_write(':');
 80071da:	203a      	movs	r0, #58	; 0x3a
 80071dc:	f000 fa6a 	bl	80076b4 <serial_write>
  switch(status_code) {
 80071e0:	b154      	cbz	r4, 80071f8 <report_execute_startup_message+0x30>
      printPgmString(PSTR("error:"));
 80071e2:	4808      	ldr	r0, [pc, #32]	; (8007204 <report_execute_startup_message+0x3c>)
 80071e4:	f7fd fdd0 	bl	8004d88 <printString>
      print_uint8_base10(status_code);
 80071e8:	4620      	mov	r0, r4
 80071ea:	f7fd fdd9 	bl	8004da0 <print_uint8_base10>
  report_status_message(status_code);
}
 80071ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80071f2:	4805      	ldr	r0, [pc, #20]	; (8007208 <report_execute_startup_message+0x40>)
 80071f4:	f7fd bdc8 	b.w	8004d88 <printString>
      printPgmString(PSTR("ok\r\n")); break;
 80071f8:	4804      	ldr	r0, [pc, #16]	; (800720c <report_execute_startup_message+0x44>)
}
 80071fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      printPgmString(PSTR("ok\r\n")); break;
 80071fe:	f7fd bdc3 	b.w	8004d88 <printString>
 8007202:	bf00      	nop
 8007204:	0800c85c 	.word	0x0800c85c
 8007208:	0800c864 	.word	0x0800c864
 800720c:	0800c854 	.word	0x0800c854

08007210 <report_build_info>:

// Prints build info line
void report_build_info(char *line)
{
 8007210:	b510      	push	{r4, lr}
 8007212:	4604      	mov	r4, r0
  printPgmString(PSTR("[VER:" GRBL_VERSION "." GRBL_VERSION_BUILD ":"));
 8007214:	4819      	ldr	r0, [pc, #100]	; (800727c <report_build_info+0x6c>)
 8007216:	f7fd fdb7 	bl	8004d88 <printString>
  printString(line);
 800721a:	4620      	mov	r0, r4
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 800721c:	4c18      	ldr	r4, [pc, #96]	; (8007280 <report_build_info+0x70>)
  printString(line);
 800721e:	f7fd fdb3 	bl	8004d88 <printString>
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 8007222:	205d      	movs	r0, #93	; 0x5d
 8007224:	f000 fa46 	bl	80076b4 <serial_write>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8007228:	4620      	mov	r0, r4
 800722a:	f7fd fdad 	bl	8004d88 <printString>
  report_util_feedback_line_feed();
  printPgmString(PSTR("[OPT:")); // Generate compile-time build option list
 800722e:	4815      	ldr	r0, [pc, #84]	; (8007284 <report_build_info+0x74>)
 8007230:	f7fd fdaa 	bl	8004d88 <printString>
  #ifdef VARIABLE_SPINDLE
    serial_write('V');
 8007234:	2056      	movs	r0, #86	; 0x56
 8007236:	f000 fa3d 	bl	80076b4 <serial_write>
  #endif
  #ifdef USE_LINE_NUMBERS
    serial_write('N');
  #endif
  #ifdef ENABLE_M7
    serial_write('M');
 800723a:	204d      	movs	r0, #77	; 0x4d
 800723c:	f000 fa3a 	bl	80076b4 <serial_write>
  #endif
  #ifdef PARKING_ENABLE
    serial_write('P');
  #endif
  #ifdef HOMING_FORCE_SET_ORIGIN
    serial_write('Z');
 8007240:	205a      	movs	r0, #90	; 0x5a
 8007242:	f000 fa37 	bl	80076b4 <serial_write>
  #endif
  #ifdef HOMING_SINGLE_AXIS_COMMANDS
    serial_write('H');
 8007246:	2048      	movs	r0, #72	; 0x48
 8007248:	f000 fa34 	bl	80076b4 <serial_write>
  #endif
  #ifndef FORCE_BUFFER_SYNC_DURING_WCO_CHANGE // NOTE: Shown when disabled.
    serial_write('W');
  #endif
	#ifndef HOMING_INIT_LOCK
		serial_write('L');
 800724c:	204c      	movs	r0, #76	; 0x4c
 800724e:	f000 fa31 	bl	80076b4 <serial_write>
	#endif

  // NOTE: Compiled values, like override increments/max/min values, may be added at some point later.
	serial_write(',');
 8007252:	202c      	movs	r0, #44	; 0x2c
 8007254:	f000 fa2e 	bl	80076b4 <serial_write>
	print_uint8_base10(BLOCK_BUFFER_SIZE - 1);
 8007258:	2023      	movs	r0, #35	; 0x23
 800725a:	f7fd fda1 	bl	8004da0 <print_uint8_base10>
	serial_write(',');
 800725e:	202c      	movs	r0, #44	; 0x2c
 8007260:	f000 fa28 	bl	80076b4 <serial_write>
	print_uint8_base10(RX_BUFFER_SIZE);
 8007264:	20fe      	movs	r0, #254	; 0xfe
 8007266:	f7fd fd9b 	bl	8004da0 <print_uint8_base10>
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 800726a:	205d      	movs	r0, #93	; 0x5d
 800726c:	f000 fa22 	bl	80076b4 <serial_write>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8007270:	4620      	mov	r0, r4

	report_util_feedback_line_feed();
}
 8007272:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8007276:	f7fd bd87 	b.w	8004d88 <printString>
 800727a:	bf00      	nop
 800727c:	0800c64c 	.word	0x0800c64c
 8007280:	0800c864 	.word	0x0800c864
 8007284:	0800c668 	.word	0x0800c668

08007288 <report_realtime_status>:
 // and the actual location of the CNC machine. Users may change the following function to their
 // specific needs, but the desired real-time data report must be as short as possible. This is
 // requires as it minimizes the computational overhead and allows grbl to keep running smoothly,
 // especially during g-code programs with fast, short line segments and high frequency reports (5-20Hz).
void report_realtime_status()
{
 8007288:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t idx;
  int32_t current_position[N_AXIS]; // Copy current state of the system position variable
  memcpy(current_position, sys_position, sizeof(sys_position));
 800728a:	4ba8      	ldr	r3, [pc, #672]	; (800752c <report_realtime_status+0x2a4>)
{
 800728c:	b08d      	sub	sp, #52	; 0x34
  memcpy(current_position, sys_position, sizeof(sys_position));
 800728e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  float print_position[N_AXIS];
  system_convert_array_steps_to_mpos(print_position, current_position);

  // Report current machine state and sub-states
  serial_write('<');
  switch (sys.state) {
 8007290:	4ca7      	ldr	r4, [pc, #668]	; (8007530 <report_realtime_status+0x2a8>)
  memcpy(current_position, sys_position, sizeof(sys_position));
 8007292:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
  system_convert_array_steps_to_mpos(print_position, current_position);
 8007296:	4669      	mov	r1, sp
 8007298:	a804      	add	r0, sp, #16
 800729a:	f002 fc2d 	bl	8009af8 <system_convert_array_steps_to_mpos>
  serial_write('<');
 800729e:	203c      	movs	r0, #60	; 0x3c
 80072a0:	f000 fa08 	bl	80076b4 <serial_write>
  switch (sys.state) {
 80072a4:	7823      	ldrb	r3, [r4, #0]
 80072a6:	2b08      	cmp	r3, #8
 80072a8:	f000 81a9 	beq.w	80075fe <report_realtime_status+0x376>
 80072ac:	d946      	bls.n	800733c <report_realtime_status+0xb4>
 80072ae:	2b20      	cmp	r3, #32
 80072b0:	f000 8199 	beq.w	80075e6 <report_realtime_status+0x35e>
 80072b4:	f240 80fd 	bls.w	80074b2 <report_realtime_status+0x22a>
 80072b8:	2b40      	cmp	r3, #64	; 0x40
 80072ba:	f000 80e6 	beq.w	800748a <report_realtime_status+0x202>
 80072be:	2b80      	cmp	r3, #128	; 0x80
 80072c0:	d149      	bne.n	8007356 <report_realtime_status+0xce>
    break;
  case STATE_SLEEP: printPgmString(PSTR("Sleep")); break;
  }

  float wco[N_AXIS];
  if (bit_isfalse(settings.status_report_mask, BITFLAG_RT_STATUS_POSITION_TYPE) ||
 80072c2:	4e9c      	ldr	r6, [pc, #624]	; (8007534 <report_realtime_status+0x2ac>)
  case STATE_SLEEP: printPgmString(PSTR("Sleep")); break;
 80072c4:	489c      	ldr	r0, [pc, #624]	; (8007538 <report_realtime_status+0x2b0>)
 80072c6:	f7fd fd5f 	bl	8004d88 <printString>
  if (bit_isfalse(settings.status_report_mask, BITFLAG_RT_STATUS_POSITION_TYPE) ||
 80072ca:	f896 3047 	ldrb.w	r3, [r6, #71]	; 0x47
 80072ce:	07dd      	lsls	r5, r3, #31
 80072d0:	d446      	bmi.n	8007360 <report_realtime_status+0xd8>
    (sys.report_wco_counter == 0)) {
    for (idx = 0; idx< N_AXIS; idx++) {
      // Apply work coordinate offsets and tool length offset to current position.
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 80072d2:	4d9a      	ldr	r5, [pc, #616]	; (800753c <report_realtime_status+0x2b4>)
 80072d4:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 80072d6:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80072d8:	f7f9 fbe2 	bl	8000aa0 <__addsf3>
 80072dc:	4603      	mov	r3, r0
      if (idx == TOOL_LENGTH_OFFSET_AXIS) { wco[idx] += gc_state.tool_length_offset; }
      if (bit_isfalse(settings.status_report_mask, BITFLAG_RT_STATUS_POSITION_TYPE)) {
        print_position[idx] -= wco[idx];
 80072de:	9804      	ldr	r0, [sp, #16]
 80072e0:	4619      	mov	r1, r3
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 80072e2:	9308      	str	r3, [sp, #32]
        print_position[idx] -= wco[idx];
 80072e4:	f7f9 fbda 	bl	8000a9c <__aeabi_fsub>
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 80072e8:	6c29      	ldr	r1, [r5, #64]	; 0x40
        print_position[idx] -= wco[idx];
 80072ea:	9004      	str	r0, [sp, #16]
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 80072ec:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80072ee:	f7f9 fbd7 	bl	8000aa0 <__addsf3>
 80072f2:	4603      	mov	r3, r0
        print_position[idx] -= wco[idx];
 80072f4:	9805      	ldr	r0, [sp, #20]
 80072f6:	4619      	mov	r1, r3
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 80072f8:	9309      	str	r3, [sp, #36]	; 0x24
        print_position[idx] -= wco[idx];
 80072fa:	f7f9 fbcf 	bl	8000a9c <__aeabi_fsub>
      if (idx == TOOL_LENGTH_OFFSET_AXIS) { wco[idx] += gc_state.tool_length_offset; }
 80072fe:	6cef      	ldr	r7, [r5, #76]	; 0x4c
        print_position[idx] -= wco[idx];
 8007300:	9005      	str	r0, [sp, #20]
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 8007302:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8007304:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8007306:	f7f9 fbcb 	bl	8000aa0 <__addsf3>
      if (idx == TOOL_LENGTH_OFFSET_AXIS) { wco[idx] += gc_state.tool_length_offset; }
 800730a:	4639      	mov	r1, r7
 800730c:	f7f9 fbc8 	bl	8000aa0 <__addsf3>
 8007310:	4603      	mov	r3, r0
        print_position[idx] -= wco[idx];
 8007312:	9806      	ldr	r0, [sp, #24]
 8007314:	4619      	mov	r1, r3
      if (idx == TOOL_LENGTH_OFFSET_AXIS) { wco[idx] += gc_state.tool_length_offset; }
 8007316:	930a      	str	r3, [sp, #40]	; 0x28
        print_position[idx] -= wco[idx];
 8007318:	f7f9 fbc0 	bl	8000a9c <__aeabi_fsub>
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 800731c:	6ca9      	ldr	r1, [r5, #72]	; 0x48
        print_position[idx] -= wco[idx];
 800731e:	9006      	str	r0, [sp, #24]
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 8007320:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8007322:	f7f9 fbbd 	bl	8000aa0 <__addsf3>
 8007326:	4603      	mov	r3, r0
        print_position[idx] -= wco[idx];
 8007328:	9807      	ldr	r0, [sp, #28]
 800732a:	4619      	mov	r1, r3
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 800732c:	930b      	str	r3, [sp, #44]	; 0x2c
        print_position[idx] -= wco[idx];
 800732e:	f7f9 fbb5 	bl	8000a9c <__aeabi_fsub>
 8007332:	9007      	str	r0, [sp, #28]
  // Report machine position
  if (bit_istrue(settings.status_report_mask, BITFLAG_RT_STATUS_POSITION_TYPE)) {
    printPgmString(PSTR("|MPos:"));
  }
  else {
    printPgmString(PSTR("|WPos:"));
 8007334:	4882      	ldr	r0, [pc, #520]	; (8007540 <report_realtime_status+0x2b8>)
 8007336:	f7fd fd27 	bl	8004d88 <printString>
 800733a:	e02f      	b.n	800739c <report_realtime_status+0x114>
  switch (sys.state) {
 800733c:	2b01      	cmp	r3, #1
 800733e:	f000 815a 	beq.w	80075f6 <report_realtime_status+0x36e>
 8007342:	f0c0 8154 	bcc.w	80075ee <report_realtime_status+0x366>
 8007346:	2b02      	cmp	r3, #2
 8007348:	f000 80af 	beq.w	80074aa <report_realtime_status+0x222>
 800734c:	2b04      	cmp	r3, #4
 800734e:	d102      	bne.n	8007356 <report_realtime_status+0xce>
  case STATE_HOMING: printPgmString(PSTR("Home")); break;
 8007350:	487c      	ldr	r0, [pc, #496]	; (8007544 <report_realtime_status+0x2bc>)
 8007352:	f7fd fd19 	bl	8004d88 <printString>
  if (bit_isfalse(settings.status_report_mask, BITFLAG_RT_STATUS_POSITION_TYPE) ||
 8007356:	4e77      	ldr	r6, [pc, #476]	; (8007534 <report_realtime_status+0x2ac>)
 8007358:	f896 3047 	ldrb.w	r3, [r6, #71]	; 0x47
 800735c:	07dd      	lsls	r5, r3, #31
 800735e:	d5b8      	bpl.n	80072d2 <report_realtime_status+0x4a>
 8007360:	7b63      	ldrb	r3, [r4, #13]
 8007362:	b9c3      	cbnz	r3, 8007396 <report_realtime_status+0x10e>
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 8007364:	4d75      	ldr	r5, [pc, #468]	; (800753c <report_realtime_status+0x2b4>)
 8007366:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8007368:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800736a:	f7f9 fb99 	bl	8000aa0 <__addsf3>
 800736e:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8007370:	9008      	str	r0, [sp, #32]
 8007372:	6c28      	ldr	r0, [r5, #64]	; 0x40
 8007374:	f7f9 fb94 	bl	8000aa0 <__addsf3>
      if (idx == TOOL_LENGTH_OFFSET_AXIS) { wco[idx] += gc_state.tool_length_offset; }
 8007378:	6cef      	ldr	r7, [r5, #76]	; 0x4c
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 800737a:	9009      	str	r0, [sp, #36]	; 0x24
 800737c:	6c69      	ldr	r1, [r5, #68]	; 0x44
 800737e:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8007380:	f7f9 fb8e 	bl	8000aa0 <__addsf3>
      if (idx == TOOL_LENGTH_OFFSET_AXIS) { wco[idx] += gc_state.tool_length_offset; }
 8007384:	4639      	mov	r1, r7
 8007386:	f7f9 fb8b 	bl	8000aa0 <__addsf3>
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 800738a:	6ca9      	ldr	r1, [r5, #72]	; 0x48
      if (idx == TOOL_LENGTH_OFFSET_AXIS) { wco[idx] += gc_state.tool_length_offset; }
 800738c:	900a      	str	r0, [sp, #40]	; 0x28
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 800738e:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8007390:	f7f9 fb86 	bl	8000aa0 <__addsf3>
 8007394:	900b      	str	r0, [sp, #44]	; 0x2c
    printPgmString(PSTR("|MPos:"));
 8007396:	486c      	ldr	r0, [pc, #432]	; (8007548 <report_realtime_status+0x2c0>)
 8007398:	f7fd fcf6 	bl	8004d88 <printString>
    printFloat_CoordValue(axis_value[idx]);
 800739c:	9804      	ldr	r0, [sp, #16]
 800739e:	f7fd fdb3 	bl	8004f08 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 80073a2:	202c      	movs	r0, #44	; 0x2c
 80073a4:	f000 f986 	bl	80076b4 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 80073a8:	9805      	ldr	r0, [sp, #20]
 80073aa:	f7fd fdad 	bl	8004f08 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 80073ae:	202c      	movs	r0, #44	; 0x2c
 80073b0:	f000 f980 	bl	80076b4 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 80073b4:	9806      	ldr	r0, [sp, #24]
 80073b6:	f7fd fda7 	bl	8004f08 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 80073ba:	202c      	movs	r0, #44	; 0x2c
 80073bc:	f000 f97a 	bl	80076b4 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 80073c0:	9807      	ldr	r0, [sp, #28]
 80073c2:	f7fd fda1 	bl	8004f08 <printFloat_CoordValue>
  }
  report_util_axis_values(print_position);

  // Returns planner and serial read buffer states.
#ifdef REPORT_FIELD_BUFFER_STATE
  if (bit_istrue(settings.status_report_mask, BITFLAG_RT_STATUS_BUFFER_STATE)) {
 80073c6:	f896 3047 	ldrb.w	r3, [r6, #71]	; 0x47
 80073ca:	0798      	lsls	r0, r3, #30
 80073cc:	f100 80ed 	bmi.w	80075aa <report_realtime_status+0x322>
#endif

  // Report realtime feed speed
#ifdef REPORT_FIELD_CURRENT_FEED_SPEED
#ifdef VARIABLE_SPINDLE
  printPgmString(PSTR("|FS:"));
 80073d0:	485e      	ldr	r0, [pc, #376]	; (800754c <report_realtime_status+0x2c4>)
 80073d2:	f7fd fcd9 	bl	8004d88 <printString>
  printFloat_RateValue(st_get_realtime_rate());
 80073d6:	f002 f917 	bl	8009608 <st_get_realtime_rate>
 80073da:	f7fd fe7d 	bl	80050d8 <printFloat_RateValue>
  serial_write(',');
 80073de:	202c      	movs	r0, #44	; 0x2c
 80073e0:	f000 f968 	bl	80076b4 <serial_write>
  printFloat(sys.spindle_speed, N_DECIMAL_RPMVALUE);
 80073e4:	2100      	movs	r1, #0
 80073e6:	6920      	ldr	r0, [r4, #16]
 80073e8:	f7fd fd1c 	bl	8004e24 <printFloat>
  printFloat_RateValue(st_get_realtime_rate());
#endif      
#endif

#ifdef REPORT_FIELD_PIN_STATE
  uint8_t lim_pin_state = limits_get_state();
 80073ec:	f7fb ff6e 	bl	80032cc <limits_get_state>
 80073f0:	4605      	mov	r5, r0
  uint8_t ctrl_pin_state = system_control_get_state();
 80073f2:	f002 f95b 	bl	80096ac <system_control_get_state>
 80073f6:	4606      	mov	r6, r0
  uint8_t prb_pin_state = probe_get_state();
 80073f8:	f7fd ff4c 	bl	8005294 <probe_get_state>
  if (lim_pin_state | ctrl_pin_state | prb_pin_state) {
 80073fc:	ea45 0306 	orr.w	r3, r5, r6
 8007400:	4303      	orrs	r3, r0
 8007402:	f013 0fff 	tst.w	r3, #255	; 0xff
  uint8_t prb_pin_state = probe_get_state();
 8007406:	4607      	mov	r7, r0
  if (lim_pin_state | ctrl_pin_state | prb_pin_state) {
 8007408:	f040 80b0 	bne.w	800756c <report_realtime_status+0x2e4>
    }
  }
#endif

#ifdef REPORT_FIELD_WORK_COORD_OFFSET
  if (sys.report_wco_counter > 0) { sys.report_wco_counter--; }
 800740c:	7b63      	ldrb	r3, [r4, #13]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d061      	beq.n	80074d6 <report_realtime_status+0x24e>
 8007412:	3b01      	subs	r3, #1
 8007414:	7363      	strb	r3, [r4, #13]
    report_util_axis_values(wco);
  }
#endif

  #ifdef REPORT_FIELD_OVERRIDES
    if (sys.report_ovr_counter > 0) { sys.report_ovr_counter--; }
 8007416:	7b23      	ldrb	r3, [r4, #12]
 8007418:	2b00      	cmp	r3, #0
 800741a:	f040 8083 	bne.w	8007524 <report_realtime_status+0x29c>
    else {
      if (sys.state & (STATE_HOMING | STATE_CYCLE | STATE_HOLD | STATE_JOG | STATE_SAFETY_DOOR)) {
 800741e:	7823      	ldrb	r3, [r4, #0]
        sys.report_ovr_counter = (REPORT_OVR_REFRESH_BUSY_COUNT - 1); // Reset counter for slow refresh
      }
      else { sys.report_ovr_counter = (REPORT_OVR_REFRESH_IDLE_COUNT - 1); }
      printPgmString(PSTR("|Ov:"));
 8007420:	484b      	ldr	r0, [pc, #300]	; (8007550 <report_realtime_status+0x2c8>)
      else { sys.report_ovr_counter = (REPORT_OVR_REFRESH_IDLE_COUNT - 1); }
 8007422:	f013 0f7c 	tst.w	r3, #124	; 0x7c
 8007426:	bf14      	ite	ne
 8007428:	2313      	movne	r3, #19
 800742a:	2309      	moveq	r3, #9
 800742c:	7323      	strb	r3, [r4, #12]
      printPgmString(PSTR("|Ov:"));
 800742e:	f7fd fcab 	bl	8004d88 <printString>
      print_uint8_base10(sys.f_override);
 8007432:	7a20      	ldrb	r0, [r4, #8]
 8007434:	f7fd fcb4 	bl	8004da0 <print_uint8_base10>
      serial_write(',');
 8007438:	202c      	movs	r0, #44	; 0x2c
 800743a:	f000 f93b 	bl	80076b4 <serial_write>
      print_uint8_base10(sys.r_override);
 800743e:	7a60      	ldrb	r0, [r4, #9]
 8007440:	f7fd fcae 	bl	8004da0 <print_uint8_base10>
      serial_write(',');
 8007444:	202c      	movs	r0, #44	; 0x2c
 8007446:	f000 f935 	bl	80076b4 <serial_write>
      print_uint8_base10(sys.spindle_speed_ovr);
 800744a:	7aa0      	ldrb	r0, [r4, #10]
 800744c:	f7fd fca8 	bl	8004da0 <print_uint8_base10>

      uint8_t sp_state = spindle_get_state();
 8007450:	f000 fe36 	bl	80080c0 <spindle_get_state>
 8007454:	4605      	mov	r5, r0
      uint8_t cl_state = coolant_get_state();
 8007456:	f7fa fbf5 	bl	8001c44 <coolant_get_state>
 800745a:	4604      	mov	r4, r0
      if (sp_state || cl_state) {
 800745c:	2d00      	cmp	r5, #0
 800745e:	f040 80b3 	bne.w	80075c8 <report_realtime_status+0x340>
 8007462:	b150      	cbz	r0, 800747a <report_realtime_status+0x1f2>
        printPgmString(PSTR("|A:"));
 8007464:	483b      	ldr	r0, [pc, #236]	; (8007554 <report_realtime_status+0x2cc>)
 8007466:	f7fd fc8f 	bl	8004d88 <printString>
          #else
            if (sp_state & SPINDLE_STATE_CW) { serial_write('S'); } // CW
            else { serial_write('C'); } // CCW
          #endif
        }
        if (cl_state & COOLANT_STATE_FLOOD) { serial_write('F'); }
 800746a:	07e2      	lsls	r2, r4, #31
 800746c:	f100 80b7 	bmi.w	80075de <report_realtime_status+0x356>
        #ifdef ENABLE_M7
          if (cl_state & COOLANT_STATE_MIST) { serial_write('M'); }
 8007470:	07a3      	lsls	r3, r4, #30
 8007472:	d502      	bpl.n	800747a <report_realtime_status+0x1f2>
 8007474:	204d      	movs	r0, #77	; 0x4d
 8007476:	f000 f91d 	bl	80076b4 <serial_write>
        #endif
      }
    }
  #endif

  serial_write('>');
 800747a:	203e      	movs	r0, #62	; 0x3e
 800747c:	f000 f91a 	bl	80076b4 <serial_write>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8007480:	4835      	ldr	r0, [pc, #212]	; (8007558 <report_realtime_status+0x2d0>)
 8007482:	f7fd fc81 	bl	8004d88 <printString>
  report_util_line_feed();
}
 8007486:	b00d      	add	sp, #52	; 0x34
 8007488:	bdf0      	pop	{r4, r5, r6, r7, pc}
    printPgmString(PSTR("Door:"));
 800748a:	4834      	ldr	r0, [pc, #208]	; (800755c <report_realtime_status+0x2d4>)
 800748c:	f7fd fc7c 	bl	8004d88 <printString>
    if (sys.suspend & SUSPEND_INITIATE_RESTORE) {
 8007490:	78a3      	ldrb	r3, [r4, #2]
 8007492:	071a      	lsls	r2, r3, #28
 8007494:	f100 80d3 	bmi.w	800763e <report_realtime_status+0x3b6>
      if (sys.suspend & SUSPEND_RETRACT_COMPLETE) {
 8007498:	075f      	lsls	r7, r3, #29
 800749a:	f140 80d4 	bpl.w	8007646 <report_realtime_status+0x3be>
        if (sys.suspend & SUSPEND_SAFETY_DOOR_AJAR) {
 800749e:	069e      	lsls	r6, r3, #26
 80074a0:	d515      	bpl.n	80074ce <report_realtime_status+0x246>
      else { serial_write('1'); } // Actively holding
 80074a2:	2031      	movs	r0, #49	; 0x31
 80074a4:	f000 f906 	bl	80076b4 <serial_write>
 80074a8:	e755      	b.n	8007356 <report_realtime_status+0xce>
  case STATE_CHECK_MODE: printPgmString(PSTR("Check")); break;
 80074aa:	482d      	ldr	r0, [pc, #180]	; (8007560 <report_realtime_status+0x2d8>)
 80074ac:	f7fd fc6c 	bl	8004d88 <printString>
 80074b0:	e751      	b.n	8007356 <report_realtime_status+0xce>
  switch (sys.state) {
 80074b2:	2b10      	cmp	r3, #16
 80074b4:	f47f af4f 	bne.w	8007356 <report_realtime_status+0xce>
    if (!(sys.suspend & SUSPEND_JOG_CANCEL)) {
 80074b8:	f994 3002 	ldrsb.w	r3, [r4, #2]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	f2c0 8092 	blt.w	80075e6 <report_realtime_status+0x35e>
      printPgmString(PSTR("Hold:"));
 80074c2:	4828      	ldr	r0, [pc, #160]	; (8007564 <report_realtime_status+0x2dc>)
 80074c4:	f7fd fc60 	bl	8004d88 <printString>
      if (sys.suspend & SUSPEND_HOLD_COMPLETE) { serial_write('0'); } // Ready to resume
 80074c8:	78a3      	ldrb	r3, [r4, #2]
 80074ca:	07d9      	lsls	r1, r3, #31
 80074cc:	d5e9      	bpl.n	80074a2 <report_realtime_status+0x21a>
 80074ce:	2030      	movs	r0, #48	; 0x30
 80074d0:	f000 f8f0 	bl	80076b4 <serial_write>
 80074d4:	e73f      	b.n	8007356 <report_realtime_status+0xce>
    if (sys.state & (STATE_HOMING | STATE_CYCLE | STATE_HOLD | STATE_JOG | STATE_SAFETY_DOOR)) {
 80074d6:	7822      	ldrb	r2, [r4, #0]
    if (sys.report_ovr_counter == 0) { sys.report_ovr_counter = 1; } // Set override on next report.
 80074d8:	7b23      	ldrb	r3, [r4, #12]
    else { sys.report_wco_counter = (REPORT_WCO_REFRESH_IDLE_COUNT - 1); }
 80074da:	f012 0f7c 	tst.w	r2, #124	; 0x7c
 80074de:	bf14      	ite	ne
 80074e0:	221d      	movne	r2, #29
 80074e2:	2209      	moveq	r2, #9
 80074e4:	7362      	strb	r2, [r4, #13]
    if (sys.report_ovr_counter == 0) { sys.report_ovr_counter = 1; } // Set override on next report.
 80074e6:	b90b      	cbnz	r3, 80074ec <report_realtime_status+0x264>
 80074e8:	2301      	movs	r3, #1
 80074ea:	7323      	strb	r3, [r4, #12]
    printPgmString(PSTR("|WCO:"));
 80074ec:	481e      	ldr	r0, [pc, #120]	; (8007568 <report_realtime_status+0x2e0>)
 80074ee:	f7fd fc4b 	bl	8004d88 <printString>
    printFloat_CoordValue(axis_value[idx]);
 80074f2:	9808      	ldr	r0, [sp, #32]
 80074f4:	f7fd fd08 	bl	8004f08 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 80074f8:	202c      	movs	r0, #44	; 0x2c
 80074fa:	f000 f8db 	bl	80076b4 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 80074fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007500:	f7fd fd02 	bl	8004f08 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8007504:	202c      	movs	r0, #44	; 0x2c
 8007506:	f000 f8d5 	bl	80076b4 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 800750a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800750c:	f7fd fcfc 	bl	8004f08 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8007510:	202c      	movs	r0, #44	; 0x2c
 8007512:	f000 f8cf 	bl	80076b4 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8007516:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007518:	f7fd fcf6 	bl	8004f08 <printFloat_CoordValue>
    if (sys.report_ovr_counter > 0) { sys.report_ovr_counter--; }
 800751c:	7b23      	ldrb	r3, [r4, #12]
 800751e:	2b00      	cmp	r3, #0
 8007520:	f43f af7d 	beq.w	800741e <report_realtime_status+0x196>
 8007524:	3b01      	subs	r3, #1
 8007526:	7323      	strb	r3, [r4, #12]
 8007528:	e7a7      	b.n	800747a <report_realtime_status+0x1f2>
 800752a:	bf00      	nop
 800752c:	200010f0 	.word	0x200010f0
 8007530:	200010c8 	.word	0x200010c8
 8007534:	20001404 	.word	0x20001404
 8007538:	0800c80c 	.word	0x0800c80c
 800753c:	2000102c 	.word	0x2000102c
 8007540:	0800c848 	.word	0x0800c848
 8007544:	0800c7ec 	.word	0x0800c7ec
 8007548:	0800c814 	.word	0x0800c814
 800754c:	0800c824 	.word	0x0800c824
 8007550:	0800c83c 	.word	0x0800c83c
 8007554:	0800c844 	.word	0x0800c844
 8007558:	0800c864 	.word	0x0800c864
 800755c:	0800c804 	.word	0x0800c804
 8007560:	0800c7fc 	.word	0x0800c7fc
 8007564:	0800c7e0 	.word	0x0800c7e0
 8007568:	0800c834 	.word	0x0800c834
    printPgmString(PSTR("|Pn:"));
 800756c:	4838      	ldr	r0, [pc, #224]	; (8007650 <report_realtime_status+0x3c8>)
 800756e:	f7fd fc0b 	bl	8004d88 <printString>
    if (prb_pin_state) { serial_write('P'); }
 8007572:	b9b7      	cbnz	r7, 80075a2 <report_realtime_status+0x31a>
    if (lim_pin_state) {
 8007574:	b13d      	cbz	r5, 8007586 <report_realtime_status+0x2fe>
      if (bit_istrue(lim_pin_state, bit(X_AXIS))) { serial_write('X'); }
 8007576:	07e9      	lsls	r1, r5, #31
 8007578:	d45d      	bmi.n	8007636 <report_realtime_status+0x3ae>
      if (bit_istrue(lim_pin_state, bit(Y_AXIS))) { serial_write('Y'); }
 800757a:	07aa      	lsls	r2, r5, #30
 800757c:	d457      	bmi.n	800762e <report_realtime_status+0x3a6>
      if (bit_istrue(lim_pin_state, bit(Z_AXIS))) { serial_write('Z'); }
 800757e:	076b      	lsls	r3, r5, #29
 8007580:	d449      	bmi.n	8007616 <report_realtime_status+0x38e>
	  if (bit_istrue(lim_pin_state, bit(A_AXIS))) { serial_write('A'); }
 8007582:	072f      	lsls	r7, r5, #28
 8007584:	d443      	bmi.n	800760e <report_realtime_status+0x386>
    if (ctrl_pin_state) {
 8007586:	2e00      	cmp	r6, #0
 8007588:	f43f af40 	beq.w	800740c <report_realtime_status+0x184>
      if (bit_istrue(ctrl_pin_state, CONTROL_PIN_INDEX_RESET)) { serial_write('R'); }
 800758c:	07f5      	lsls	r5, r6, #31
 800758e:	d44a      	bmi.n	8007626 <report_realtime_status+0x39e>
      if (bit_istrue(ctrl_pin_state, CONTROL_PIN_INDEX_FEED_HOLD)) { serial_write('H'); }
 8007590:	07b0      	lsls	r0, r6, #30
 8007592:	d444      	bmi.n	800761e <report_realtime_status+0x396>
      if (bit_istrue(ctrl_pin_state, CONTROL_PIN_INDEX_CYCLE_START)) { serial_write('S'); }
 8007594:	0771      	lsls	r1, r6, #29
 8007596:	f57f af39 	bpl.w	800740c <report_realtime_status+0x184>
 800759a:	2053      	movs	r0, #83	; 0x53
 800759c:	f000 f88a 	bl	80076b4 <serial_write>
 80075a0:	e734      	b.n	800740c <report_realtime_status+0x184>
    if (prb_pin_state) { serial_write('P'); }
 80075a2:	2050      	movs	r0, #80	; 0x50
 80075a4:	f000 f886 	bl	80076b4 <serial_write>
 80075a8:	e7e4      	b.n	8007574 <report_realtime_status+0x2ec>
    printPgmString(PSTR("|Bf:"));
 80075aa:	482a      	ldr	r0, [pc, #168]	; (8007654 <report_realtime_status+0x3cc>)
 80075ac:	f7fd fbec 	bl	8004d88 <printString>
    print_uint8_base10(plan_get_block_buffer_available());
 80075b0:	f7fd fbc8 	bl	8004d44 <plan_get_block_buffer_available>
 80075b4:	f7fd fbf4 	bl	8004da0 <print_uint8_base10>
    serial_write(',');
 80075b8:	202c      	movs	r0, #44	; 0x2c
 80075ba:	f000 f87b 	bl	80076b4 <serial_write>
    print_uint8_base10(serial_get_rx_buffer_available());
 80075be:	f000 f855 	bl	800766c <serial_get_rx_buffer_available>
 80075c2:	f7fd fbed 	bl	8004da0 <print_uint8_base10>
 80075c6:	e703      	b.n	80073d0 <report_realtime_status+0x148>
        printPgmString(PSTR("|A:"));
 80075c8:	4823      	ldr	r0, [pc, #140]	; (8007658 <report_realtime_status+0x3d0>)
 80075ca:	f7fd fbdd 	bl	8004d88 <printString>
              if (sp_state == SPINDLE_STATE_CW) { serial_write('S'); } // CW
 80075ce:	2d01      	cmp	r5, #1
 80075d0:	d019      	beq.n	8007606 <report_realtime_status+0x37e>
              else { serial_write('C'); } // CCW
 80075d2:	2043      	movs	r0, #67	; 0x43
 80075d4:	f000 f86e 	bl	80076b4 <serial_write>
        if (cl_state & COOLANT_STATE_FLOOD) { serial_write('F'); }
 80075d8:	07e2      	lsls	r2, r4, #31
 80075da:	f57f af49 	bpl.w	8007470 <report_realtime_status+0x1e8>
 80075de:	2046      	movs	r0, #70	; 0x46
 80075e0:	f000 f868 	bl	80076b4 <serial_write>
 80075e4:	e744      	b.n	8007470 <report_realtime_status+0x1e8>
  case STATE_JOG: printPgmString(PSTR("Jog")); break;
 80075e6:	481d      	ldr	r0, [pc, #116]	; (800765c <report_realtime_status+0x3d4>)
 80075e8:	f7fd fbce 	bl	8004d88 <printString>
 80075ec:	e6b3      	b.n	8007356 <report_realtime_status+0xce>
  case STATE_IDLE: printPgmString(PSTR("Idle")); break;
 80075ee:	481c      	ldr	r0, [pc, #112]	; (8007660 <report_realtime_status+0x3d8>)
 80075f0:	f7fd fbca 	bl	8004d88 <printString>
 80075f4:	e6af      	b.n	8007356 <report_realtime_status+0xce>
  case STATE_ALARM: printPgmString(PSTR("Alarm")); break;
 80075f6:	481b      	ldr	r0, [pc, #108]	; (8007664 <report_realtime_status+0x3dc>)
 80075f8:	f7fd fbc6 	bl	8004d88 <printString>
 80075fc:	e6ab      	b.n	8007356 <report_realtime_status+0xce>
  case STATE_CYCLE: printPgmString(PSTR("Run")); break;
 80075fe:	481a      	ldr	r0, [pc, #104]	; (8007668 <report_realtime_status+0x3e0>)
 8007600:	f7fd fbc2 	bl	8004d88 <printString>
 8007604:	e6a7      	b.n	8007356 <report_realtime_status+0xce>
              if (sp_state == SPINDLE_STATE_CW) { serial_write('S'); } // CW
 8007606:	2053      	movs	r0, #83	; 0x53
 8007608:	f000 f854 	bl	80076b4 <serial_write>
 800760c:	e72d      	b.n	800746a <report_realtime_status+0x1e2>
	  if (bit_istrue(lim_pin_state, bit(A_AXIS))) { serial_write('A'); }
 800760e:	2041      	movs	r0, #65	; 0x41
 8007610:	f000 f850 	bl	80076b4 <serial_write>
 8007614:	e7b7      	b.n	8007586 <report_realtime_status+0x2fe>
      if (bit_istrue(lim_pin_state, bit(Z_AXIS))) { serial_write('Z'); }
 8007616:	205a      	movs	r0, #90	; 0x5a
 8007618:	f000 f84c 	bl	80076b4 <serial_write>
 800761c:	e7b1      	b.n	8007582 <report_realtime_status+0x2fa>
      if (bit_istrue(ctrl_pin_state, CONTROL_PIN_INDEX_FEED_HOLD)) { serial_write('H'); }
 800761e:	2048      	movs	r0, #72	; 0x48
 8007620:	f000 f848 	bl	80076b4 <serial_write>
 8007624:	e7b6      	b.n	8007594 <report_realtime_status+0x30c>
      if (bit_istrue(ctrl_pin_state, CONTROL_PIN_INDEX_RESET)) { serial_write('R'); }
 8007626:	2052      	movs	r0, #82	; 0x52
 8007628:	f000 f844 	bl	80076b4 <serial_write>
 800762c:	e7b0      	b.n	8007590 <report_realtime_status+0x308>
      if (bit_istrue(lim_pin_state, bit(Y_AXIS))) { serial_write('Y'); }
 800762e:	2059      	movs	r0, #89	; 0x59
 8007630:	f000 f840 	bl	80076b4 <serial_write>
 8007634:	e7a3      	b.n	800757e <report_realtime_status+0x2f6>
      if (bit_istrue(lim_pin_state, bit(X_AXIS))) { serial_write('X'); }
 8007636:	2058      	movs	r0, #88	; 0x58
 8007638:	f000 f83c 	bl	80076b4 <serial_write>
 800763c:	e79d      	b.n	800757a <report_realtime_status+0x2f2>
      serial_write('3'); // Restoring
 800763e:	2033      	movs	r0, #51	; 0x33
 8007640:	f000 f838 	bl	80076b4 <serial_write>
 8007644:	e687      	b.n	8007356 <report_realtime_status+0xce>
        serial_write('2'); // Retracting
 8007646:	2032      	movs	r0, #50	; 0x32
 8007648:	f000 f834 	bl	80076b4 <serial_write>
 800764c:	e683      	b.n	8007356 <report_realtime_status+0xce>
 800764e:	bf00      	nop
 8007650:	0800c82c 	.word	0x0800c82c
 8007654:	0800c81c 	.word	0x0800c81c
 8007658:	0800c844 	.word	0x0800c844
 800765c:	0800c7e8 	.word	0x0800c7e8
 8007660:	0800c7d4 	.word	0x0800c7d4
 8007664:	0800c7f4 	.word	0x0800c7f4
 8007668:	0800c7dc 	.word	0x0800c7dc

0800766c <serial_get_rx_buffer_available>:


// Returns the number of bytes available in the RX serial buffer.
uint8_t serial_get_rx_buffer_available()
{
  uint8_t rtail = serial_rx_buffer_tail; // Copy to limit multiple calls to volatile
 800766c:	4b06      	ldr	r3, [pc, #24]	; (8007688 <serial_get_rx_buffer_available+0x1c>)
  if (serial_rx_buffer_head >= rtail) { return(RX_BUFFER_SIZE - (serial_rx_buffer_head-rtail)); }
 800766e:	4a07      	ldr	r2, [pc, #28]	; (800768c <serial_get_rx_buffer_available+0x20>)
  uint8_t rtail = serial_rx_buffer_tail; // Copy to limit multiple calls to volatile
 8007670:	781b      	ldrb	r3, [r3, #0]
  if (serial_rx_buffer_head >= rtail) { return(RX_BUFFER_SIZE - (serial_rx_buffer_head-rtail)); }
 8007672:	7812      	ldrb	r2, [r2, #0]
  uint8_t rtail = serial_rx_buffer_tail; // Copy to limit multiple calls to volatile
 8007674:	b2db      	uxtb	r3, r3
  if (serial_rx_buffer_head >= rtail) { return(RX_BUFFER_SIZE - (serial_rx_buffer_head-rtail)); }
 8007676:	4293      	cmp	r3, r2
 8007678:	bf94      	ite	ls
 800767a:	1e98      	subls	r0, r3, #2
  return((rtail-serial_rx_buffer_head-1));
 800767c:	f103 30ff 	addhi.w	r0, r3, #4294967295
 8007680:	1a80      	subs	r0, r0, r2
 8007682:	b2c0      	uxtb	r0, r0
}
 8007684:	4770      	bx	lr
 8007686:	bf00      	nop
 8007688:	20000a6f 	.word	0x20000a6f
 800768c:	20000a6e 	.word	0x20000a6e

08007690 <serial3_get_rx_buffer_count>:
  return (RX_BUFFER_SIZE - (rtail-serial_rx_buffer_head));
}

uint8_t serial3_get_rx_buffer_count()
{
  uint8_t rtail = serial3_rx_buffer_tail; // Copy to limit multiple calls to volatile
 8007690:	4b05      	ldr	r3, [pc, #20]	; (80076a8 <serial3_get_rx_buffer_count+0x18>)
  if (serial3_rx_buffer_head >= rtail) { return(serial3_rx_buffer_head-rtail); }
 8007692:	4a06      	ldr	r2, [pc, #24]	; (80076ac <serial3_get_rx_buffer_count+0x1c>)
  uint8_t rtail = serial3_rx_buffer_tail; // Copy to limit multiple calls to volatile
 8007694:	781b      	ldrb	r3, [r3, #0]
  if (serial3_rx_buffer_head >= rtail) { return(serial3_rx_buffer_head-rtail); }
 8007696:	7810      	ldrb	r0, [r2, #0]
  uint8_t rtail = serial3_rx_buffer_tail; // Copy to limit multiple calls to volatile
 8007698:	b2db      	uxtb	r3, r3
  if (serial3_rx_buffer_head >= rtail) { return(serial3_rx_buffer_head-rtail); }
 800769a:	4283      	cmp	r3, r0
  return (RX_BUFFER_SIZE - (rtail-serial3_rx_buffer_head));
 800769c:	bf88      	it	hi
 800769e:	3802      	subhi	r0, #2
 80076a0:	1ac0      	subs	r0, r0, r3
 80076a2:	b2c0      	uxtb	r0, r0
}
 80076a4:	4770      	bx	lr
 80076a6:	bf00      	nop
 80076a8:	20000a6d 	.word	0x20000a6d
 80076ac:	20000a6c 	.word	0x20000a6c

080076b0 <serial_init>:
  return (TX_RING_BUFFER - (ttail-serial_tx_buffer_head));
}


void serial_init()
{
 80076b0:	4770      	bx	lr
 80076b2:	bf00      	nop

080076b4 <serial_write>:
}
#endif


// Writes one byte to the TX serial buffer. Called by main program.
void serial_write(uint8_t data) {
 80076b4:	b470      	push	{r4, r5, r6}
  // Calculate next head
  uint8_t next_head = serial_tx_buffer_head + 1;
 80076b6:	4e0f      	ldr	r6, [pc, #60]	; (80076f4 <serial_write+0x40>)
 80076b8:	490f      	ldr	r1, [pc, #60]	; (80076f8 <serial_write+0x44>)
 80076ba:	7835      	ldrb	r5, [r6, #0]
  if (next_head == TX_RING_BUFFER) { next_head = 0; }

  // Wait until there is space in the buffer
  while (next_head == serial_tx_buffer_tail) {
    // TODO: Restructure st_prep_buffer() calls to be executed here during a long print.
    if (sys_rt_exec_state & EXEC_RESET) { return; } // Only check for abort to avoid an endless loop.
 80076bc:	4c0f      	ldr	r4, [pc, #60]	; (80076fc <serial_write+0x48>)
  uint8_t next_head = serial_tx_buffer_head + 1;
 80076be:	1c6a      	adds	r2, r5, #1
 80076c0:	b2d2      	uxtb	r2, r2
  if (next_head == TX_RING_BUFFER) { next_head = 0; }
 80076c2:	2a80      	cmp	r2, #128	; 0x80
 80076c4:	bf08      	it	eq
 80076c6:	2200      	moveq	r2, #0
 80076c8:	e002      	b.n	80076d0 <serial_write+0x1c>
    if (sys_rt_exec_state & EXEC_RESET) { return; } // Only check for abort to avoid an endless loop.
 80076ca:	7823      	ldrb	r3, [r4, #0]
 80076cc:	06db      	lsls	r3, r3, #27
 80076ce:	d40e      	bmi.n	80076ee <serial_write+0x3a>
  while (next_head == serial_tx_buffer_tail) {
 80076d0:	780b      	ldrb	r3, [r1, #0]
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d0f9      	beq.n	80076ca <serial_write+0x16>
     Sleep(1);
#endif
  }

  // Store data and advance head
  serial_tx_buffer[serial_tx_buffer_head] = data;
 80076d6:	4b0a      	ldr	r3, [pc, #40]	; (8007700 <serial_write+0x4c>)
 80076d8:	490a      	ldr	r1, [pc, #40]	; (8007704 <serial_write+0x50>)
 80076da:	5558      	strb	r0, [r3, r5]
#ifdef USB_CHANGED_DEBUG
  while(txUsbLock) { // lock until txUsbLock to 0 on EP1_callback and change serial_tx_buffer_head variable
	  if (sys_rt_exec_state & EXEC_RESET) { return; } // Only check for abort to avoid an endless loop. }
 80076dc:	4807      	ldr	r0, [pc, #28]	; (80076fc <serial_write+0x48>)
  while(txUsbLock) { // lock until txUsbLock to 0 on EP1_callback and change serial_tx_buffer_head variable
 80076de:	e002      	b.n	80076e6 <serial_write+0x32>
	  if (sys_rt_exec_state & EXEC_RESET) { return; } // Only check for abort to avoid an endless loop. }
 80076e0:	7803      	ldrb	r3, [r0, #0]
 80076e2:	06db      	lsls	r3, r3, #27
 80076e4:	d403      	bmi.n	80076ee <serial_write+0x3a>
  while(txUsbLock) { // lock until txUsbLock to 0 on EP1_callback and change serial_tx_buffer_head variable
 80076e6:	780b      	ldrb	r3, [r1, #0]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d1f9      	bne.n	80076e0 <serial_write+0x2c>
  }
#endif
  serial_tx_buffer_head = next_head;
 80076ec:	7032      	strb	r2, [r6, #0]

#ifdef AVRTARGET
  // Enable Data Register Empty Interrupt to make sure tx-streaming is running
  UCSR0B |=  (1 << UDRIE0);
#endif
}
 80076ee:	bc70      	pop	{r4, r5, r6}
 80076f0:	4770      	bx	lr
 80076f2:	bf00      	nop
 80076f4:	20000a70 	.word	0x20000a70
 80076f8:	20000a71 	.word	0x20000a71
 80076fc:	200010dd 	.word	0x200010dd
 8007700:	20001204 	.word	0x20001204
 8007704:	20000c24 	.word	0x20000c24

08007708 <serial_read>:
#endif

// Fetches the first byte in the serial read buffer. Called by main program.
uint8_t serial_read()
{
  uint8_t tail = serial_rx_buffer_tail; // Temporary serial_rx_buffer_tail (to optimize for volatile)
 8007708:	4908      	ldr	r1, [pc, #32]	; (800772c <serial_read+0x24>)
  if (serial_rx_buffer_head == tail) {
 800770a:	4a09      	ldr	r2, [pc, #36]	; (8007730 <serial_read+0x28>)
  uint8_t tail = serial_rx_buffer_tail; // Temporary serial_rx_buffer_tail (to optimize for volatile)
 800770c:	780b      	ldrb	r3, [r1, #0]
  if (serial_rx_buffer_head == tail) {
 800770e:	7812      	ldrb	r2, [r2, #0]
  uint8_t tail = serial_rx_buffer_tail; // Temporary serial_rx_buffer_tail (to optimize for volatile)
 8007710:	b2db      	uxtb	r3, r3
  if (serial_rx_buffer_head == tail) {
 8007712:	429a      	cmp	r2, r3
 8007714:	d008      	beq.n	8007728 <serial_read+0x20>
    return SERIAL_NO_DATA;
  } else {
    uint8_t data = serial_rx_buffer[tail];

    tail++;
 8007716:	1c5a      	adds	r2, r3, #1
 8007718:	b2d2      	uxtb	r2, r2
    if (tail == RX_RING_BUFFER) { tail = 0; }
 800771a:	2afe      	cmp	r2, #254	; 0xfe
 800771c:	bf08      	it	eq
 800771e:	2200      	moveq	r2, #0
    uint8_t data = serial_rx_buffer[tail];
 8007720:	4804      	ldr	r0, [pc, #16]	; (8007734 <serial_read+0x2c>)
    serial_rx_buffer_tail = tail;
 8007722:	700a      	strb	r2, [r1, #0]
    uint8_t data = serial_rx_buffer[tail];
 8007724:	5cc0      	ldrb	r0, [r0, r3]

    return data;
 8007726:	4770      	bx	lr
    return SERIAL_NO_DATA;
 8007728:	20ff      	movs	r0, #255	; 0xff
  }
}
 800772a:	4770      	bx	lr
 800772c:	20000a6f 	.word	0x20000a6f
 8007730:	20000a6e 	.word	0x20000a6e
 8007734:	20001284 	.word	0x20001284

08007738 <serial3_read>:

// Fetches the first byte in the serial read buffer. Called by main program.
uint8_t serial3_read()
{
  uint8_t tail = serial3_rx_buffer_tail; // Temporary serial_rx_buffer_tail (to optimize for volatile)
 8007738:	4908      	ldr	r1, [pc, #32]	; (800775c <serial3_read+0x24>)
  if (serial3_rx_buffer_head == tail) {
 800773a:	4a09      	ldr	r2, [pc, #36]	; (8007760 <serial3_read+0x28>)
  uint8_t tail = serial3_rx_buffer_tail; // Temporary serial_rx_buffer_tail (to optimize for volatile)
 800773c:	780b      	ldrb	r3, [r1, #0]
  if (serial3_rx_buffer_head == tail) {
 800773e:	7812      	ldrb	r2, [r2, #0]
  uint8_t tail = serial3_rx_buffer_tail; // Temporary serial_rx_buffer_tail (to optimize for volatile)
 8007740:	b2db      	uxtb	r3, r3
  if (serial3_rx_buffer_head == tail) {
 8007742:	429a      	cmp	r2, r3
 8007744:	d008      	beq.n	8007758 <serial3_read+0x20>
    return SERIAL_NO_DATA;
  } else {
    uint8_t data = serial3_rx_buffer[tail];

    tail++;
 8007746:	1c5a      	adds	r2, r3, #1
 8007748:	b2d2      	uxtb	r2, r2
    if (tail == RX_RING_BUFFER) { tail = 0; }
 800774a:	2afe      	cmp	r2, #254	; 0xfe
 800774c:	bf08      	it	eq
 800774e:	2200      	moveq	r2, #0
    uint8_t data = serial3_rx_buffer[tail];
 8007750:	4804      	ldr	r0, [pc, #16]	; (8007764 <serial3_read+0x2c>)
    serial3_rx_buffer_tail = tail;
 8007752:	700a      	strb	r2, [r1, #0]
    uint8_t data = serial3_rx_buffer[tail];
 8007754:	5cc0      	ldrb	r0, [r0, r3]

    return data;
 8007756:	4770      	bx	lr
    return SERIAL_NO_DATA;
 8007758:	20ff      	movs	r0, #255	; 0xff
  }
}
 800775a:	4770      	bx	lr
 800775c:	20000a6d 	.word	0x20000a6d
 8007760:	20000a6c 	.word	0x20000a6c
 8007764:	20001104 	.word	0x20001104

08007768 <OnUsbDataRx>:
	//lcd_write_char(*dataIn);
	uint8_t next_head;
    uint8_t data;

	// Write data to buffer unless it is full.
	while (length != 0)
 8007768:	2900      	cmp	r1, #0
 800776a:	d079      	beq.n	8007860 <OnUsbDataRx+0xf8>
{
 800776c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007770:	1e4d      	subs	r5, r1, #1
 8007772:	b2ed      	uxtb	r5, r5
            case CMD_COOLANT_MIST_OVR_TOGGLE: system_set_exec_accessory_override_flag(EXEC_COOLANT_MIST_OVR_TOGGLE); break;
          #endif
        }
        // Throw away any unfound extended-ASCII character by not passing it to the serial buffer.
      } else { // Write character to buffer
        next_head = serial_rx_buffer_head + 1;
 8007774:	4e61      	ldr	r6, [pc, #388]	; (80078fc <OnUsbDataRx+0x194>)
        if (next_head == RX_RING_BUFFER) { next_head = 0; }

        // Write data to buffer unless it is full.
        if (next_head != serial_rx_buffer_tail) {
 8007776:	4f62      	ldr	r7, [pc, #392]	; (8007900 <OnUsbDataRx+0x198>)
          serial_rx_buffer[serial_rx_buffer_head] = data;
 8007778:	f8df 818c 	ldr.w	r8, [pc, #396]	; 8007908 <OnUsbDataRx+0x1a0>
 800777c:	4405      	add	r5, r0
 800777e:	1e44      	subs	r4, r0, #1
 8007780:	e008      	b.n	8007794 <OnUsbDataRx+0x2c>
  switch (data) {
 8007782:	2b3f      	cmp	r3, #63	; 0x3f
 8007784:	d026      	beq.n	80077d4 <OnUsbDataRx+0x6c>
 8007786:	2b7e      	cmp	r3, #126	; 0x7e
 8007788:	d115      	bne.n	80077b6 <OnUsbDataRx+0x4e>
    case CMD_CYCLE_START:   system_set_exec_state_flag(EXEC_CYCLE_START); break; // Set as true
 800778a:	2002      	movs	r0, #2
 800778c:	f002 fa56 	bl	8009c3c <system_set_exec_state_flag>
	while (length != 0)
 8007790:	42ac      	cmp	r4, r5
 8007792:	d00a      	beq.n	80077aa <OnUsbDataRx+0x42>
        data = *dataIn ++;
 8007794:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  switch (data) {
 8007798:	2b21      	cmp	r3, #33	; 0x21
 800779a:	d008      	beq.n	80077ae <OnUsbDataRx+0x46>
 800779c:	d8f1      	bhi.n	8007782 <OnUsbDataRx+0x1a>
 800779e:	2b18      	cmp	r3, #24
 80077a0:	d109      	bne.n	80077b6 <OnUsbDataRx+0x4e>
    case CMD_RESET:         mc_reset(); break; // Call motion control reset routine.
 80077a2:	f7fc fc65 	bl	8004070 <mc_reset>
	while (length != 0)
 80077a6:	42ac      	cmp	r4, r5
 80077a8:	d1f4      	bne.n	8007794 <OnUsbDataRx+0x2c>
 80077aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    case CMD_FEED_HOLD:     system_set_exec_state_flag(EXEC_FEED_HOLD); break; // Set as true
 80077ae:	2008      	movs	r0, #8
 80077b0:	f002 fa44 	bl	8009c3c <system_set_exec_state_flag>
 80077b4:	e7ec      	b.n	8007790 <OnUsbDataRx+0x28>
      if (data > 0x7F) { // Real-time control characters are extended ACSII only.
 80077b6:	061a      	lsls	r2, r3, #24
 80077b8:	d410      	bmi.n	80077dc <OnUsbDataRx+0x74>
        next_head = serial_rx_buffer_head + 1;
 80077ba:	7831      	ldrb	r1, [r6, #0]
        if (next_head != serial_rx_buffer_tail) {
 80077bc:	7838      	ldrb	r0, [r7, #0]
        next_head = serial_rx_buffer_head + 1;
 80077be:	1c4a      	adds	r2, r1, #1
 80077c0:	b2d2      	uxtb	r2, r2
        if (next_head == RX_RING_BUFFER) { next_head = 0; }
 80077c2:	2afe      	cmp	r2, #254	; 0xfe
 80077c4:	bf08      	it	eq
 80077c6:	2200      	moveq	r2, #0
        if (next_head != serial_rx_buffer_tail) {
 80077c8:	4282      	cmp	r2, r0
          serial_rx_buffer[serial_rx_buffer_head] = data;
 80077ca:	bf1c      	itt	ne
 80077cc:	f808 3001 	strbne.w	r3, [r8, r1]
          serial_rx_buffer_head = next_head;
 80077d0:	7032      	strbne	r2, [r6, #0]
 80077d2:	e7dd      	b.n	8007790 <OnUsbDataRx+0x28>
    case CMD_STATUS_REPORT: system_set_exec_state_flag(EXEC_STATUS_REPORT); break; // Set as true
 80077d4:	2001      	movs	r0, #1
 80077d6:	f002 fa31 	bl	8009c3c <system_set_exec_state_flag>
 80077da:	e7d9      	b.n	8007790 <OnUsbDataRx+0x28>
        switch(data) {
 80077dc:	3b84      	subs	r3, #132	; 0x84
 80077de:	2b1d      	cmp	r3, #29
 80077e0:	d8d6      	bhi.n	8007790 <OnUsbDataRx+0x28>
 80077e2:	a201      	add	r2, pc, #4	; (adr r2, 80077e8 <OnUsbDataRx+0x80>)
 80077e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077e8:	080078f5 	.word	0x080078f5
 80077ec:	080078e3 	.word	0x080078e3
 80077f0:	08007791 	.word	0x08007791
 80077f4:	08007791 	.word	0x08007791
 80077f8:	08007791 	.word	0x08007791
 80077fc:	08007791 	.word	0x08007791
 8007800:	08007791 	.word	0x08007791
 8007804:	08007791 	.word	0x08007791
 8007808:	08007791 	.word	0x08007791
 800780c:	08007791 	.word	0x08007791
 8007810:	08007791 	.word	0x08007791
 8007814:	08007791 	.word	0x08007791
 8007818:	080078db 	.word	0x080078db
 800781c:	080078d3 	.word	0x080078d3
 8007820:	080078cb 	.word	0x080078cb
 8007824:	080078c3 	.word	0x080078c3
 8007828:	080078bb 	.word	0x080078bb
 800782c:	080078b3 	.word	0x080078b3
 8007830:	080078ab 	.word	0x080078ab
 8007834:	080078a3 	.word	0x080078a3
 8007838:	08007791 	.word	0x08007791
 800783c:	0800789b 	.word	0x0800789b
 8007840:	08007893 	.word	0x08007893
 8007844:	0800788b 	.word	0x0800788b
 8007848:	08007883 	.word	0x08007883
 800784c:	0800787b 	.word	0x0800787b
 8007850:	08007873 	.word	0x08007873
 8007854:	08007791 	.word	0x08007791
 8007858:	0800786b 	.word	0x0800786b
 800785c:	08007863 	.word	0x08007863
 8007860:	4770      	bx	lr
            case CMD_COOLANT_MIST_OVR_TOGGLE: system_set_exec_accessory_override_flag(EXEC_COOLANT_MIST_OVR_TOGGLE); break;
 8007862:	2080      	movs	r0, #128	; 0x80
 8007864:	f002 fa18 	bl	8009c98 <system_set_exec_accessory_override_flag>
 8007868:	e792      	b.n	8007790 <OnUsbDataRx+0x28>
          case CMD_COOLANT_FLOOD_OVR_TOGGLE: system_set_exec_accessory_override_flag(EXEC_COOLANT_FLOOD_OVR_TOGGLE); break;
 800786a:	2040      	movs	r0, #64	; 0x40
 800786c:	f002 fa14 	bl	8009c98 <system_set_exec_accessory_override_flag>
 8007870:	e78e      	b.n	8007790 <OnUsbDataRx+0x28>
          case CMD_SPINDLE_OVR_STOP: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_STOP); break;
 8007872:	2020      	movs	r0, #32
 8007874:	f002 fa10 	bl	8009c98 <system_set_exec_accessory_override_flag>
 8007878:	e78a      	b.n	8007790 <OnUsbDataRx+0x28>
          case CMD_SPINDLE_OVR_FINE_MINUS: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_FINE_MINUS); break;
 800787a:	2010      	movs	r0, #16
 800787c:	f002 fa0c 	bl	8009c98 <system_set_exec_accessory_override_flag>
 8007880:	e786      	b.n	8007790 <OnUsbDataRx+0x28>
          case CMD_SPINDLE_OVR_FINE_PLUS: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_FINE_PLUS); break;
 8007882:	2008      	movs	r0, #8
 8007884:	f002 fa08 	bl	8009c98 <system_set_exec_accessory_override_flag>
 8007888:	e782      	b.n	8007790 <OnUsbDataRx+0x28>
          case CMD_SPINDLE_OVR_COARSE_MINUS: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_COARSE_MINUS); break;
 800788a:	2004      	movs	r0, #4
 800788c:	f002 fa04 	bl	8009c98 <system_set_exec_accessory_override_flag>
 8007890:	e77e      	b.n	8007790 <OnUsbDataRx+0x28>
          case CMD_SPINDLE_OVR_COARSE_PLUS: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_COARSE_PLUS); break;
 8007892:	2002      	movs	r0, #2
 8007894:	f002 fa00 	bl	8009c98 <system_set_exec_accessory_override_flag>
 8007898:	e77a      	b.n	8007790 <OnUsbDataRx+0x28>
          case CMD_SPINDLE_OVR_RESET: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_RESET); break;
 800789a:	2001      	movs	r0, #1
 800789c:	f002 f9fc 	bl	8009c98 <system_set_exec_accessory_override_flag>
 80078a0:	e776      	b.n	8007790 <OnUsbDataRx+0x28>
          case CMD_RAPID_OVR_LOW: system_set_exec_motion_override_flag(EXEC_RAPID_OVR_LOW); break;
 80078a2:	2080      	movs	r0, #128	; 0x80
 80078a4:	f002 f9ee 	bl	8009c84 <system_set_exec_motion_override_flag>
 80078a8:	e772      	b.n	8007790 <OnUsbDataRx+0x28>
          case CMD_RAPID_OVR_MEDIUM: system_set_exec_motion_override_flag(EXEC_RAPID_OVR_MEDIUM); break;
 80078aa:	2040      	movs	r0, #64	; 0x40
 80078ac:	f002 f9ea 	bl	8009c84 <system_set_exec_motion_override_flag>
 80078b0:	e76e      	b.n	8007790 <OnUsbDataRx+0x28>
          case CMD_RAPID_OVR_RESET: system_set_exec_motion_override_flag(EXEC_RAPID_OVR_RESET); break;
 80078b2:	2020      	movs	r0, #32
 80078b4:	f002 f9e6 	bl	8009c84 <system_set_exec_motion_override_flag>
 80078b8:	e76a      	b.n	8007790 <OnUsbDataRx+0x28>
          case CMD_FEED_OVR_FINE_MINUS: system_set_exec_motion_override_flag(EXEC_FEED_OVR_FINE_MINUS); break;
 80078ba:	2010      	movs	r0, #16
 80078bc:	f002 f9e2 	bl	8009c84 <system_set_exec_motion_override_flag>
 80078c0:	e766      	b.n	8007790 <OnUsbDataRx+0x28>
          case CMD_FEED_OVR_FINE_PLUS: system_set_exec_motion_override_flag(EXEC_FEED_OVR_FINE_PLUS); break;
 80078c2:	2008      	movs	r0, #8
 80078c4:	f002 f9de 	bl	8009c84 <system_set_exec_motion_override_flag>
 80078c8:	e762      	b.n	8007790 <OnUsbDataRx+0x28>
          case CMD_FEED_OVR_COARSE_MINUS: system_set_exec_motion_override_flag(EXEC_FEED_OVR_COARSE_MINUS); break;
 80078ca:	2004      	movs	r0, #4
 80078cc:	f002 f9da 	bl	8009c84 <system_set_exec_motion_override_flag>
 80078d0:	e75e      	b.n	8007790 <OnUsbDataRx+0x28>
          case CMD_FEED_OVR_COARSE_PLUS: system_set_exec_motion_override_flag(EXEC_FEED_OVR_COARSE_PLUS); break;
 80078d2:	2002      	movs	r0, #2
 80078d4:	f002 f9d6 	bl	8009c84 <system_set_exec_motion_override_flag>
 80078d8:	e75a      	b.n	8007790 <OnUsbDataRx+0x28>
          case CMD_FEED_OVR_RESET: system_set_exec_motion_override_flag(EXEC_FEED_OVR_RESET); break;
 80078da:	2001      	movs	r0, #1
 80078dc:	f002 f9d2 	bl	8009c84 <system_set_exec_motion_override_flag>
 80078e0:	e756      	b.n	8007790 <OnUsbDataRx+0x28>
            if (sys.state & STATE_JOG) { // Block all other states from invoking motion cancel.
 80078e2:	4b08      	ldr	r3, [pc, #32]	; (8007904 <OnUsbDataRx+0x19c>)
 80078e4:	781b      	ldrb	r3, [r3, #0]
 80078e6:	069b      	lsls	r3, r3, #26
 80078e8:	f57f af52 	bpl.w	8007790 <OnUsbDataRx+0x28>
              system_set_exec_state_flag(EXEC_MOTION_CANCEL); 
 80078ec:	2040      	movs	r0, #64	; 0x40
 80078ee:	f002 f9a5 	bl	8009c3c <system_set_exec_state_flag>
 80078f2:	e74d      	b.n	8007790 <OnUsbDataRx+0x28>
          case CMD_SAFETY_DOOR:   system_set_exec_state_flag(EXEC_SAFETY_DOOR); break; // Set as true
 80078f4:	2020      	movs	r0, #32
 80078f6:	f002 f9a1 	bl	8009c3c <system_set_exec_state_flag>
 80078fa:	e749      	b.n	8007790 <OnUsbDataRx+0x28>
 80078fc:	20000a6e 	.word	0x20000a6e
 8007900:	20000a6f 	.word	0x20000a6f
 8007904:	200010c8 	.word	0x200010c8
 8007908:	20001284 	.word	0x20001284

0800790c <USART3_IRQHandler>:
/*----------------------------------------------------------------------------
  USART3_IRQHandler
  Handles USART3 global interrupt request.
 *----------------------------------------------------------------------------*/
void USART3_IRQHandler (void)
{
 800790c:	b410      	push	{r4}
    volatile unsigned int IIR;
    uint8_t data;
    uint8_t next_head;

    IIR = USART3->SR;
 800790e:	4a11      	ldr	r2, [pc, #68]	; (8007954 <USART3_IRQHandler+0x48>)
{
 8007910:	b083      	sub	sp, #12
    IIR = USART3->SR;
 8007912:	8813      	ldrh	r3, [r2, #0]
 8007914:	b29b      	uxth	r3, r3
 8007916:	9301      	str	r3, [sp, #4]
    if (IIR & USART_FLAG_RXNE)
 8007918:	9b01      	ldr	r3, [sp, #4]
 800791a:	069b      	lsls	r3, r3, #26
 800791c:	d516      	bpl.n	800794c <USART3_IRQHandler+0x40>
    {                  // read interrupt
        data = USART3->DR & 0x1FF;

        next_head = serial3_rx_buffer_head + 1;
 800791e:	480e      	ldr	r0, [pc, #56]	; (8007958 <USART3_IRQHandler+0x4c>)
        if (next_head == RX_RING_BUFFER) { next_head = 0; }

        // Write data to buffer unless it is full.
        if (next_head != serial3_rx_buffer_tail)
 8007920:	4c0e      	ldr	r4, [pc, #56]	; (800795c <USART3_IRQHandler+0x50>)
        next_head = serial3_rx_buffer_head + 1;
 8007922:	7801      	ldrb	r1, [r0, #0]
        data = USART3->DR & 0x1FF;
 8007924:	8892      	ldrh	r2, [r2, #4]
        next_head = serial3_rx_buffer_head + 1;
 8007926:	1c4b      	adds	r3, r1, #1
 8007928:	b2db      	uxtb	r3, r3
        if (next_head == RX_RING_BUFFER) { next_head = 0; }
 800792a:	2bfe      	cmp	r3, #254	; 0xfe
 800792c:	bf08      	it	eq
 800792e:	2300      	moveq	r3, #0
        if (next_head != serial3_rx_buffer_tail)
 8007930:	7824      	ldrb	r4, [r4, #0]
        data = USART3->DR & 0x1FF;
 8007932:	b292      	uxth	r2, r2
        if (next_head != serial3_rx_buffer_tail)
 8007934:	42a3      	cmp	r3, r4
 8007936:	d002      	beq.n	800793e <USART3_IRQHandler+0x32>
        {
          serial3_rx_buffer[serial3_rx_buffer_head] = data;
 8007938:	4c09      	ldr	r4, [pc, #36]	; (8007960 <USART3_IRQHandler+0x54>)
          serial3_rx_buffer_head = next_head;
 800793a:	7003      	strb	r3, [r0, #0]
        data = USART3->DR & 0x1FF;
 800793c:	5462      	strb	r2, [r4, r1]
        }
        USART3->SR &= ~USART_FLAG_RXNE;	          // clear interrupt
 800793e:	4a05      	ldr	r2, [pc, #20]	; (8007954 <USART3_IRQHandler+0x48>)
 8007940:	8813      	ldrh	r3, [r2, #0]
 8007942:	f023 0320 	bic.w	r3, r3, #32
 8007946:	041b      	lsls	r3, r3, #16
 8007948:	0c1b      	lsrs	r3, r3, #16
 800794a:	8013      	strh	r3, [r2, #0]
   }

}
 800794c:	b003      	add	sp, #12
 800794e:	bc10      	pop	{r4}
 8007950:	4770      	bx	lr
 8007952:	bf00      	nop
 8007954:	40004800 	.word	0x40004800
 8007958:	20000a6c 	.word	0x20000a6c
 800795c:	20000a6d 	.word	0x20000a6d
 8007960:	20001104 	.word	0x20001104

08007964 <serial_reset_read_buffer>:



void serial_reset_read_buffer()
{
  serial_rx_buffer_tail = serial_rx_buffer_head;
 8007964:	4a02      	ldr	r2, [pc, #8]	; (8007970 <serial_reset_read_buffer+0xc>)
 8007966:	4b03      	ldr	r3, [pc, #12]	; (8007974 <serial_reset_read_buffer+0x10>)
 8007968:	7812      	ldrb	r2, [r2, #0]
 800796a:	701a      	strb	r2, [r3, #0]
 800796c:	4770      	bx	lr
 800796e:	bf00      	nop
 8007970:	20000a6e 	.word	0x20000a6e
 8007974:	20000a6f 	.word	0x20000a6f

08007978 <serial3_reset_read_buffer>:
}

void serial3_reset_read_buffer()
{
  serial3_rx_buffer_tail = serial3_rx_buffer_head;
 8007978:	4a02      	ldr	r2, [pc, #8]	; (8007984 <serial3_reset_read_buffer+0xc>)
 800797a:	4b03      	ldr	r3, [pc, #12]	; (8007988 <serial3_reset_read_buffer+0x10>)
 800797c:	7812      	ldrb	r2, [r2, #0]
 800797e:	701a      	strb	r2, [r3, #0]
 8007980:	4770      	bx	lr
 8007982:	bf00      	nop
 8007984:	20000a6c 	.word	0x20000a6c
 8007988:	20000a6d 	.word	0x20000a6d

0800798c <settings_store_startup_line>:
settings_t settings;


// Method to store startup lines into EEPROM
void settings_store_startup_line(uint8_t n, char *line)
{
 800798c:	b538      	push	{r3, r4, r5, lr}
 800798e:	4604      	mov	r4, r0
 8007990:	460d      	mov	r5, r1
  #ifdef FORCE_BUFFER_SYNC_DURING_EEPROM_WRITE
    protocol_buffer_synchronize(); // A startup line may contain a motion and be executing. 
  #endif
  uint32_t addr = n*(LINE_BUFFER_SIZE+1)+EEPROM_ADDR_STARTUP_BLOCK;
 8007992:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
 8007996:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
    protocol_buffer_synchronize(); // A startup line may contain a motion and be executing. 
 800799a:	f7fe fbcd 	bl	8006138 <protocol_buffer_synchronize>
  memcpy_to_eeprom_with_checksum(addr,(char*)line, LINE_BUFFER_SIZE);
 800799e:	f504 7040 	add.w	r0, r4, #768	; 0x300
 80079a2:	4629      	mov	r1, r5
}
 80079a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memcpy_to_eeprom_with_checksum(addr,(char*)line, LINE_BUFFER_SIZE);
 80079a8:	2250      	movs	r2, #80	; 0x50
 80079aa:	f7fa b9e3 	b.w	8001d74 <memcpy_to_eeprom_with_checksum>
 80079ae:	bf00      	nop

080079b0 <settings_store_build_info>:
// Method to store build info into EEPROM
// NOTE: This function can only be called in IDLE state.
void settings_store_build_info(char *line)
{
  // Build info can only be stored when state is IDLE.
  memcpy_to_eeprom_with_checksum(EEPROM_ADDR_BUILD_INFO,(char*)line, LINE_BUFFER_SIZE);
 80079b0:	4601      	mov	r1, r0
 80079b2:	2250      	movs	r2, #80	; 0x50
 80079b4:	f44f 7070 	mov.w	r0, #960	; 0x3c0
 80079b8:	f7fa b9dc 	b.w	8001d74 <memcpy_to_eeprom_with_checksum>

080079bc <settings_write_coord_data>:
}


// Method to store coord data parameters into EEPROM
void settings_write_coord_data(uint8_t coord_select, float *coord_data)
{
 80079bc:	b538      	push	{r3, r4, r5, lr}
 80079be:	4604      	mov	r4, r0
 80079c0:	460d      	mov	r5, r1
  #ifdef FORCE_BUFFER_SYNC_DURING_EEPROM_WRITE
    protocol_buffer_synchronize();
  #endif
  uint32_t addr = coord_select*(sizeof(float)*N_AXIS+1) + EEPROM_ADDR_PARAMETERS;
 80079c2:	eb04 1404 	add.w	r4, r4, r4, lsl #4
    protocol_buffer_synchronize();
 80079c6:	f7fe fbb7 	bl	8006138 <protocol_buffer_synchronize>
  memcpy_to_eeprom_with_checksum(addr,(char*)coord_data, sizeof(float)*N_AXIS);
 80079ca:	f504 7000 	add.w	r0, r4, #512	; 0x200
 80079ce:	4629      	mov	r1, r5
}
 80079d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memcpy_to_eeprom_with_checksum(addr,(char*)coord_data, sizeof(float)*N_AXIS);
 80079d4:	2210      	movs	r2, #16
 80079d6:	f7fa b9cd 	b.w	8001d74 <memcpy_to_eeprom_with_checksum>
 80079da:	bf00      	nop

080079dc <settings_restore>:
  memcpy_to_eeprom_with_checksum(EEPROM_ADDR_GLOBAL, (char*)&settings, sizeof(settings_t));
}


// Method to restore EEPROM-saved Grbl global settings back to defaults.
void settings_restore(uint8_t restore_flag) {
 80079dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079de:	4605      	mov	r5, r0
  if (restore_flag & SETTINGS_RESTORE_DEFAULTS) {
 80079e0:	07c0      	lsls	r0, r0, #31
void settings_restore(uint8_t restore_flag) {
 80079e2:	b085      	sub	sp, #20
  if (restore_flag & SETTINGS_RESTORE_DEFAULTS) {
 80079e4:	d439      	bmi.n	8007a5a <settings_restore+0x7e>
	#endif
// ---
    write_global_settings();
  }

  if (restore_flag & SETTINGS_RESTORE_PARAMETERS) {
 80079e6:	07a9      	lsls	r1, r5, #30
 80079e8:	d424      	bmi.n	8007a34 <settings_restore+0x58>
    float coord_data[N_AXIS];
    memset(&coord_data, 0, sizeof(coord_data));
    for (idx=0; idx <= SETTING_INDEX_NCOORD; idx++) { settings_write_coord_data(idx, coord_data); }
  }

  if (restore_flag & SETTINGS_RESTORE_STARTUP_LINES) {
 80079ea:	076a      	lsls	r2, r5, #29
 80079ec:	d40d      	bmi.n	8007a0a <settings_restore+0x2e>
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK+(LINE_BUFFER_SIZE+1), 0);
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK+(LINE_BUFFER_SIZE+2), 0); // Checksum
    #endif
  }

  if (restore_flag & SETTINGS_RESTORE_BUILD_INFO) {
 80079ee:	072b      	lsls	r3, r5, #28
 80079f0:	d509      	bpl.n	8007a06 <settings_restore+0x2a>
    eeprom_put_char(EEPROM_ADDR_BUILD_INFO , 0);
 80079f2:	2100      	movs	r1, #0
 80079f4:	f44f 7070 	mov.w	r0, #960	; 0x3c0
 80079f8:	f7fa f9b6 	bl	8001d68 <eeprom_put_char>
    eeprom_put_char(EEPROM_ADDR_BUILD_INFO+1 , 0); // Checksum
 80079fc:	2100      	movs	r1, #0
 80079fe:	f240 30c1 	movw	r0, #961	; 0x3c1
 8007a02:	f7fa f9b1 	bl	8001d68 <eeprom_put_char>
  }
}
 8007a06:	b005      	add	sp, #20
 8007a08:	bdf0      	pop	{r4, r5, r6, r7, pc}
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK, 0);
 8007a0a:	2100      	movs	r1, #0
 8007a0c:	f44f 7040 	mov.w	r0, #768	; 0x300
 8007a10:	f7fa f9aa 	bl	8001d68 <eeprom_put_char>
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK+1, 0); // Checksum
 8007a14:	2100      	movs	r1, #0
 8007a16:	f240 3001 	movw	r0, #769	; 0x301
 8007a1a:	f7fa f9a5 	bl	8001d68 <eeprom_put_char>
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK+(LINE_BUFFER_SIZE+1), 0);
 8007a1e:	2100      	movs	r1, #0
 8007a20:	f240 3051 	movw	r0, #849	; 0x351
 8007a24:	f7fa f9a0 	bl	8001d68 <eeprom_put_char>
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK+(LINE_BUFFER_SIZE+2), 0); // Checksum
 8007a28:	2100      	movs	r1, #0
 8007a2a:	f240 3052 	movw	r0, #850	; 0x352
 8007a2e:	f7fa f99b 	bl	8001d68 <eeprom_put_char>
 8007a32:	e7dc      	b.n	80079ee <settings_restore+0x12>
    memset(&coord_data, 0, sizeof(coord_data));
 8007a34:	2300      	movs	r3, #0
 8007a36:	f44f 7400 	mov.w	r4, #512	; 0x200
 8007a3a:	9300      	str	r3, [sp, #0]
 8007a3c:	9301      	str	r3, [sp, #4]
 8007a3e:	9302      	str	r3, [sp, #8]
 8007a40:	9303      	str	r3, [sp, #12]
    protocol_buffer_synchronize();
 8007a42:	f7fe fb79 	bl	8006138 <protocol_buffer_synchronize>
  memcpy_to_eeprom_with_checksum(addr,(char*)coord_data, sizeof(float)*N_AXIS);
 8007a46:	4620      	mov	r0, r4
 8007a48:	2210      	movs	r2, #16
 8007a4a:	4669      	mov	r1, sp
 8007a4c:	3411      	adds	r4, #17
 8007a4e:	f7fa f991 	bl	8001d74 <memcpy_to_eeprom_with_checksum>
    for (idx=0; idx <= SETTING_INDEX_NCOORD; idx++) { settings_write_coord_data(idx, coord_data); }
 8007a52:	f5b4 7f22 	cmp.w	r4, #648	; 0x288
 8007a56:	d1f4      	bne.n	8007a42 <settings_restore+0x66>
 8007a58:	e7c7      	b.n	80079ea <settings_restore+0xe>
    settings.stepper_idle_lock_time = DEFAULT_STEPPER_IDLE_LOCK_TIME;
 8007a5a:	2300      	movs	r3, #0
    settings.pulse_microseconds = DEFAULT_STEP_PULSE_MICROSECONDS;
 8007a5c:	4c21      	ldr	r4, [pc, #132]	; (8007ae4 <settings_restore+0x108>)
  eeprom_put_char(0, SETTINGS_VERSION);
 8007a5e:	4618      	mov	r0, r3
    settings.stepper_idle_lock_time = DEFAULT_STEPPER_IDLE_LOCK_TIME;
 8007a60:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
    settings.status_report_mask = DEFAULT_STATUS_REPORT_MASK;
 8007a64:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
    settings.arc_tolerance = DEFAULT_ARC_TOLERANCE;
 8007a68:	4b1f      	ldr	r3, [pc, #124]	; (8007ae8 <settings_restore+0x10c>)
    settings.pulse_microseconds = DEFAULT_STEP_PULSE_MICROSECONDS;
 8007a6a:	2606      	movs	r6, #6
    settings.arc_tolerance = DEFAULT_ARC_TOLERANCE;
 8007a6c:	64e3      	str	r3, [r4, #76]	; 0x4c
    settings.rpm_min = DEFAULT_SPINDLE_RPM_MIN;
 8007a6e:	2300      	movs	r3, #0
    settings.step_invert_mask = DEFAULT_STEPPING_INVERT_MASK;
 8007a70:	f44f 17f8 	mov.w	r7, #2031616	; 0x1f0000
    settings.rpm_min = DEFAULT_SPINDLE_RPM_MIN;
 8007a74:	6563      	str	r3, [r4, #84]	; 0x54
    settings.homing_debounce_delay = DEFAULT_HOMING_DEBOUNCE_DELAY;
 8007a76:	22fa      	movs	r2, #250	; 0xfa
    settings.homing_pulloff = DEFAULT_HOMING_PULLOFF;
 8007a78:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
    if (DEFAULT_INVERT_LIMIT_PINS) { settings.flags |= BITFLAG_INVERT_LIMIT_PINS; }
 8007a7c:	2144      	movs	r1, #68	; 0x44
    settings.homing_dir_mask = DEFAULT_HOMING_DIR_MASK;
 8007a7e:	f04f 0e1f 	mov.w	lr, #31
    settings.pulse_microseconds = DEFAULT_STEP_PULSE_MICROSECONDS;
 8007a82:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
    settings.junction_deviation = DEFAULT_JUNCTION_DEVIATION;
 8007a86:	4e19      	ldr	r6, [pc, #100]	; (8007aec <settings_restore+0x110>)
    settings.step_invert_mask = DEFAULT_STEPPING_INVERT_MASK;
 8007a88:	f8c4 7042 	str.w	r7, [r4, #66]	; 0x42
    settings.junction_deviation = DEFAULT_JUNCTION_DEVIATION;
 8007a8c:	64a6      	str	r6, [r4, #72]	; 0x48
    settings.rpm_max = DEFAULT_SPINDLE_RPM_MAX;
 8007a8e:	4e18      	ldr	r6, [pc, #96]	; (8007af0 <settings_restore+0x114>)
    settings.homing_feed_rate = DEFAULT_HOMING_FEED_RATE;
 8007a90:	4f18      	ldr	r7, [pc, #96]	; (8007af4 <settings_restore+0x118>)
    settings.rpm_max = DEFAULT_SPINDLE_RPM_MAX;
 8007a92:	6526      	str	r6, [r4, #80]	; 0x50
    settings.homing_seek_rate = DEFAULT_HOMING_SEEK_RATE;
 8007a94:	4e18      	ldr	r6, [pc, #96]	; (8007af8 <settings_restore+0x11c>)
    settings.homing_feed_rate = DEFAULT_HOMING_FEED_RATE;
 8007a96:	65e7      	str	r7, [r4, #92]	; 0x5c
    settings.homing_seek_rate = DEFAULT_HOMING_SEEK_RATE;
 8007a98:	6626      	str	r6, [r4, #96]	; 0x60
    settings.steps_per_mm[X_AXIS] = DEFAULT_X_STEPS_PER_MM;
 8007a9a:	4f18      	ldr	r7, [pc, #96]	; (8007afc <settings_restore+0x120>)
    settings.max_rate[X_AXIS] = DEFAULT_X_MAX_RATE;
 8007a9c:	4e18      	ldr	r6, [pc, #96]	; (8007b00 <settings_restore+0x124>)
    settings.homing_debounce_delay = DEFAULT_HOMING_DEBOUNCE_DELAY;
 8007a9e:	f8a4 2064 	strh.w	r2, [r4, #100]	; 0x64
    settings.homing_pulloff = DEFAULT_HOMING_PULLOFF;
 8007aa2:	66a3      	str	r3, [r4, #104]	; 0x68
    settings.acceleration[X_AXIS] = DEFAULT_X_ACCELERATION;
 8007aa4:	4a17      	ldr	r2, [pc, #92]	; (8007b04 <settings_restore+0x128>)
    settings.max_travel[X_AXIS] = (-DEFAULT_X_MAX_TRAVEL);
 8007aa6:	4b18      	ldr	r3, [pc, #96]	; (8007b08 <settings_restore+0x12c>)
    if (DEFAULT_INVERT_LIMIT_PINS) { settings.flags |= BITFLAG_INVERT_LIMIT_PINS; }
 8007aa8:	f884 1058 	strb.w	r1, [r4, #88]	; 0x58
  eeprom_put_char(0, SETTINGS_VERSION);
 8007aac:	210a      	movs	r1, #10
    settings.acceleration[X_AXIS] = DEFAULT_X_ACCELERATION;
 8007aae:	6222      	str	r2, [r4, #32]
    settings.acceleration[Y_AXIS] = DEFAULT_Y_ACCELERATION;
 8007ab0:	6262      	str	r2, [r4, #36]	; 0x24
    settings.acceleration[Z_AXIS] = DEFAULT_Z_ACCELERATION;
 8007ab2:	62a2      	str	r2, [r4, #40]	; 0x28
    settings.acceleration[A_AXIS] = DEFAULT_A_ACCELERATION;
 8007ab4:	62e2      	str	r2, [r4, #44]	; 0x2c
    settings.homing_dir_mask = DEFAULT_HOMING_DIR_MASK;
 8007ab6:	f8a4 e05a 	strh.w	lr, [r4, #90]	; 0x5a
    settings.steps_per_mm[X_AXIS] = DEFAULT_X_STEPS_PER_MM;
 8007aba:	6027      	str	r7, [r4, #0]
    settings.steps_per_mm[Y_AXIS] = DEFAULT_Y_STEPS_PER_MM;
 8007abc:	6067      	str	r7, [r4, #4]
    settings.steps_per_mm[Z_AXIS] = DEFAULT_Z_STEPS_PER_MM;
 8007abe:	60a7      	str	r7, [r4, #8]
    settings.steps_per_mm[A_AXIS] = DEFAULT_A_STEPS_PER_MM;
 8007ac0:	60e7      	str	r7, [r4, #12]
    settings.max_rate[X_AXIS] = DEFAULT_X_MAX_RATE;
 8007ac2:	6126      	str	r6, [r4, #16]
    settings.max_rate[Y_AXIS] = DEFAULT_Y_MAX_RATE;
 8007ac4:	6166      	str	r6, [r4, #20]
    settings.max_rate[Z_AXIS] = DEFAULT_Z_MAX_RATE;
 8007ac6:	61a6      	str	r6, [r4, #24]
    settings.max_rate[A_AXIS] = DEFAULT_A_MAX_RATE;
 8007ac8:	61e6      	str	r6, [r4, #28]
    settings.max_travel[X_AXIS] = (-DEFAULT_X_MAX_TRAVEL);
 8007aca:	6323      	str	r3, [r4, #48]	; 0x30
    settings.max_travel[Y_AXIS] = (-DEFAULT_Y_MAX_TRAVEL);
 8007acc:	6363      	str	r3, [r4, #52]	; 0x34
    settings.max_travel[Z_AXIS] = (-DEFAULT_Z_MAX_TRAVEL);
 8007ace:	63a3      	str	r3, [r4, #56]	; 0x38
    settings.max_travel[A_AXIS] = (-DEFAULT_A_MAX_TRAVEL);
 8007ad0:	63e3      	str	r3, [r4, #60]	; 0x3c
  eeprom_put_char(0, SETTINGS_VERSION);
 8007ad2:	f7fa f949 	bl	8001d68 <eeprom_put_char>
  memcpy_to_eeprom_with_checksum(EEPROM_ADDR_GLOBAL, (char*)&settings, sizeof(settings_t));
 8007ad6:	4621      	mov	r1, r4
 8007ad8:	226c      	movs	r2, #108	; 0x6c
 8007ada:	2001      	movs	r0, #1
 8007adc:	f7fa f94a 	bl	8001d74 <memcpy_to_eeprom_with_checksum>
 8007ae0:	e781      	b.n	80079e6 <settings_restore+0xa>
 8007ae2:	bf00      	nop
 8007ae4:	20001404 	.word	0x20001404
 8007ae8:	3b03126f 	.word	0x3b03126f
 8007aec:	3c23d70a 	.word	0x3c23d70a
 8007af0:	447a0000 	.word	0x447a0000
 8007af4:	41200000 	.word	0x41200000
 8007af8:	42c80000 	.word	0x42c80000
 8007afc:	45a00000 	.word	0x45a00000
 8007b00:	44fa0000 	.word	0x44fa0000
 8007b04:	4bdbba00 	.word	0x4bdbba00
 8007b08:	c38c0000 	.word	0xc38c0000

08007b0c <settings_read_startup_line>:


// Reads startup line from EEPROM. Updated pointed line string data.
uint8_t settings_read_startup_line(uint8_t n, char *line)
{
 8007b0c:	b570      	push	{r4, r5, r6, lr}
 8007b0e:	460e      	mov	r6, r1
  uint32_t addr = n*(LINE_BUFFER_SIZE+1)+EEPROM_ADDR_STARTUP_BLOCK;
 8007b10:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8007b14:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8007b18:	f500 7440 	add.w	r4, r0, #768	; 0x300
  if (!(memcpy_from_eeprom_with_checksum((char*)line, addr, LINE_BUFFER_SIZE))) {
 8007b1c:	4621      	mov	r1, r4
 8007b1e:	4630      	mov	r0, r6
 8007b20:	2250      	movs	r2, #80	; 0x50
 8007b22:	f7fa f979 	bl	8001e18 <memcpy_from_eeprom_with_checksum>
 8007b26:	b108      	cbz	r0, 8007b2c <settings_read_startup_line+0x20>
    // Reset line with default value
    line[0] = 0; // Empty line
    settings_store_startup_line(n, line);
    return(false);
  }
  return(true);
 8007b28:	2001      	movs	r0, #1
}
 8007b2a:	bd70      	pop	{r4, r5, r6, pc}
 8007b2c:	4605      	mov	r5, r0
    line[0] = 0; // Empty line
 8007b2e:	7030      	strb	r0, [r6, #0]
    protocol_buffer_synchronize(); // A startup line may contain a motion and be executing. 
 8007b30:	f7fe fb02 	bl	8006138 <protocol_buffer_synchronize>
  memcpy_to_eeprom_with_checksum(addr,(char*)line, LINE_BUFFER_SIZE);
 8007b34:	4620      	mov	r0, r4
 8007b36:	4631      	mov	r1, r6
 8007b38:	2250      	movs	r2, #80	; 0x50
 8007b3a:	f7fa f91b 	bl	8001d74 <memcpy_to_eeprom_with_checksum>
    return(false);
 8007b3e:	4628      	mov	r0, r5
 8007b40:	bd70      	pop	{r4, r5, r6, pc}
 8007b42:	bf00      	nop

08007b44 <settings_read_build_info>:


// Reads startup line from EEPROM. Updated pointed line string data.
uint8_t settings_read_build_info(char *line)
{
 8007b44:	b538      	push	{r3, r4, r5, lr}
  if (!(memcpy_from_eeprom_with_checksum((char*)line, EEPROM_ADDR_BUILD_INFO, LINE_BUFFER_SIZE))) {
 8007b46:	2250      	movs	r2, #80	; 0x50
 8007b48:	f44f 7170 	mov.w	r1, #960	; 0x3c0
{
 8007b4c:	4605      	mov	r5, r0
  if (!(memcpy_from_eeprom_with_checksum((char*)line, EEPROM_ADDR_BUILD_INFO, LINE_BUFFER_SIZE))) {
 8007b4e:	f7fa f963 	bl	8001e18 <memcpy_from_eeprom_with_checksum>
 8007b52:	b108      	cbz	r0, 8007b58 <settings_read_build_info+0x14>
    // Reset line with default value
    line[0] = 0; // Empty line
    settings_store_build_info(line);
    return(false);
  }
  return(true);
 8007b54:	2001      	movs	r0, #1
}
 8007b56:	bd38      	pop	{r3, r4, r5, pc}
 8007b58:	4604      	mov	r4, r0
    line[0] = 0; // Empty line
 8007b5a:	7028      	strb	r0, [r5, #0]
  memcpy_to_eeprom_with_checksum(EEPROM_ADDR_BUILD_INFO,(char*)line, LINE_BUFFER_SIZE);
 8007b5c:	4629      	mov	r1, r5
 8007b5e:	2250      	movs	r2, #80	; 0x50
 8007b60:	f44f 7070 	mov.w	r0, #960	; 0x3c0
 8007b64:	f7fa f906 	bl	8001d74 <memcpy_to_eeprom_with_checksum>
    return(false);
 8007b68:	4620      	mov	r0, r4
 8007b6a:	bd38      	pop	{r3, r4, r5, pc}

08007b6c <settings_read_coord_data>:


// Read selected coordinate data from EEPROM. Updates pointed coord_data value.
uint8_t settings_read_coord_data(uint8_t coord_select, float *coord_data)
{
 8007b6c:	b570      	push	{r4, r5, r6, lr}
 8007b6e:	460e      	mov	r6, r1
  uint32_t addr = coord_select*(sizeof(float)*N_AXIS+1) + EEPROM_ADDR_PARAMETERS;
 8007b70:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8007b74:	f500 7400 	add.w	r4, r0, #512	; 0x200
  if (!(memcpy_from_eeprom_with_checksum((char*)coord_data, addr, sizeof(float)*N_AXIS))) {
 8007b78:	4621      	mov	r1, r4
 8007b7a:	4630      	mov	r0, r6
 8007b7c:	2210      	movs	r2, #16
 8007b7e:	f7fa f94b 	bl	8001e18 <memcpy_from_eeprom_with_checksum>
 8007b82:	b108      	cbz	r0, 8007b88 <settings_read_coord_data+0x1c>
		#endif
// ---
		settings_write_coord_data(coord_select,coord_data);
    return(false);
  }
  return(true);
 8007b84:	2001      	movs	r0, #1
}
 8007b86:	bd70      	pop	{r4, r5, r6, pc}
		coord_data[X_AXIS] = 0.0f;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	4605      	mov	r5, r0
 8007b8c:	6033      	str	r3, [r6, #0]
		coord_data[Y_AXIS] = 0.0f;
 8007b8e:	6073      	str	r3, [r6, #4]
		coord_data[Z_AXIS] = 0.0f;
 8007b90:	60b3      	str	r3, [r6, #8]
		coord_data[A_AXIS] = 0.0f;
 8007b92:	60f3      	str	r3, [r6, #12]
    protocol_buffer_synchronize();
 8007b94:	f7fe fad0 	bl	8006138 <protocol_buffer_synchronize>
  memcpy_to_eeprom_with_checksum(addr,(char*)coord_data, sizeof(float)*N_AXIS);
 8007b98:	4620      	mov	r0, r4
 8007b9a:	4631      	mov	r1, r6
 8007b9c:	2210      	movs	r2, #16
 8007b9e:	f7fa f8e9 	bl	8001d74 <memcpy_to_eeprom_with_checksum>
    return(false);
 8007ba2:	4628      	mov	r0, r5
 8007ba4:	bd70      	pop	{r4, r5, r6, pc}
 8007ba6:	bf00      	nop

08007ba8 <settings_store_global_setting>:
  return(true);
}


// A helper method to set settings from command line
uint8_t settings_store_global_setting(uint8_t parameter, float value) {
 8007ba8:	b538      	push	{r3, r4, r5, lr}
 8007baa:	460d      	mov	r5, r1
 8007bac:	4604      	mov	r4, r0
  if (value < 0.0f) { return(STATUS_NEGATIVE_VALUE); }
 8007bae:	2100      	movs	r1, #0
 8007bb0:	4628      	mov	r0, r5
 8007bb2:	f7f9 fa1b 	bl	8000fec <__aeabi_fcmplt>
 8007bb6:	2800      	cmp	r0, #0
 8007bb8:	d16c      	bne.n	8007c94 <settings_store_global_setting+0xec>
  if (parameter >= AXIS_SETTINGS_START_VAL) {
 8007bba:	2c63      	cmp	r4, #99	; 0x63
 8007bbc:	d91e      	bls.n	8007bfc <settings_store_global_setting+0x54>
    // Store axis configuration. Axis numbering sequence set by AXIS_SETTING defines.
    // NOTE: Ensure the setting index corresponds to the report.c settings printout.
    parameter -= AXIS_SETTINGS_START_VAL;
 8007bbe:	f1a4 0364 	sub.w	r3, r4, #100	; 0x64
 8007bc2:	b2db      	uxtb	r3, r3
    uint8_t set_idx = 0;
    while (set_idx < AXIS_N_SETTINGS) {
      if (parameter < N_AXIS) {
 8007bc4:	2b03      	cmp	r3, #3
 8007bc6:	f240 813b 	bls.w	8007e40 <settings_store_global_setting+0x298>
        }
        break; // Exit while-loop after setting has been configured and proceed to the EEPROM write call.
      } else {
        set_idx++;
        // If axis index greater than N_AXIS or setting index greater than number of axis settings, error out.
        if ((parameter < AXIS_SETTINGS_INCREMENT) || (set_idx == AXIS_N_SETTINGS)) { return(STATUS_INVALID_STATEMENT); }
 8007bca:	2b09      	cmp	r3, #9
 8007bcc:	d914      	bls.n	8007bf8 <settings_store_global_setting+0x50>
        parameter -= AXIS_SETTINGS_INCREMENT;
 8007bce:	f1a4 036e 	sub.w	r3, r4, #110	; 0x6e
 8007bd2:	b2db      	uxtb	r3, r3
      if (parameter < N_AXIS) {
 8007bd4:	2b03      	cmp	r3, #3
 8007bd6:	f240 8119 	bls.w	8007e0c <settings_store_global_setting+0x264>
        if ((parameter < AXIS_SETTINGS_INCREMENT) || (set_idx == AXIS_N_SETTINGS)) { return(STATUS_INVALID_STATEMENT); }
 8007bda:	2b09      	cmp	r3, #9
 8007bdc:	d90c      	bls.n	8007bf8 <settings_store_global_setting+0x50>
        parameter -= AXIS_SETTINGS_INCREMENT;
 8007bde:	f1a4 0378 	sub.w	r3, r4, #120	; 0x78
 8007be2:	b2db      	uxtb	r3, r3
      if (parameter < N_AXIS) {
 8007be4:	2b03      	cmp	r3, #3
 8007be6:	f240 811a 	bls.w	8007e1e <settings_store_global_setting+0x276>
        if ((parameter < AXIS_SETTINGS_INCREMENT) || (set_idx == AXIS_N_SETTINGS)) { return(STATUS_INVALID_STATEMENT); }
 8007bea:	2b09      	cmp	r3, #9
 8007bec:	d904      	bls.n	8007bf8 <settings_store_global_setting+0x50>
        parameter -= AXIS_SETTINGS_INCREMENT;
 8007bee:	347e      	adds	r4, #126	; 0x7e
 8007bf0:	b2e4      	uxtb	r4, r4
      if (parameter < N_AXIS) {
 8007bf2:	2c03      	cmp	r4, #3
 8007bf4:	f240 811d 	bls.w	8007e32 <settings_store_global_setting+0x28a>
        #else
				return(STATUS_SETTING_DISABLED_LASER);
        #endif
        break;
      default:
        return(STATUS_INVALID_STATEMENT);
 8007bf8:	2003      	movs	r0, #3
 8007bfa:	bd38      	pop	{r3, r4, r5, pc}
    uint8_t int_value = truncf(value);
 8007bfc:	4628      	mov	r0, r5
 8007bfe:	f7f9 fa59 	bl	80010b4 <__aeabi_f2uiz>
 8007c02:	b2c0      	uxtb	r0, r0
    switch(parameter) {
 8007c04:	2c20      	cmp	r4, #32
 8007c06:	d8f7      	bhi.n	8007bf8 <settings_store_global_setting+0x50>
 8007c08:	a301      	add	r3, pc, #4	; (adr r3, 8007c10 <settings_store_global_setting+0x68>)
 8007c0a:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
 8007c0e:	bf00      	nop
 8007c10:	08007cc3 	.word	0x08007cc3
 8007c14:	08007ccd 	.word	0x08007ccd
 8007c18:	08007cf5 	.word	0x08007cf5
 8007c1c:	08007cd5 	.word	0x08007cd5
 8007c20:	08007ce1 	.word	0x08007ce1
 8007c24:	08007d01 	.word	0x08007d01
 8007c28:	08007d15 	.word	0x08007d15
 8007c2c:	08007bf9 	.word	0x08007bf9
 8007c30:	08007bf9 	.word	0x08007bf9
 8007c34:	08007bf9 	.word	0x08007bf9
 8007c38:	08007d7f 	.word	0x08007d7f
 8007c3c:	08007d87 	.word	0x08007d87
 8007c40:	08007d43 	.word	0x08007d43
 8007c44:	08007db3 	.word	0x08007db3
 8007c48:	08007bf9 	.word	0x08007bf9
 8007c4c:	08007bf9 	.word	0x08007bf9
 8007c50:	08007bf9 	.word	0x08007bf9
 8007c54:	08007bf9 	.word	0x08007bf9
 8007c58:	08007bf9 	.word	0x08007bf9
 8007c5c:	08007bf9 	.word	0x08007bf9
 8007c60:	08007d8d 	.word	0x08007d8d
 8007c64:	08007d9d 	.word	0x08007d9d
 8007c68:	08007d2f 	.word	0x08007d2f
 8007c6c:	08007d77 	.word	0x08007d77
 8007c70:	08007d6b 	.word	0x08007d6b
 8007c74:	08007d71 	.word	0x08007d71
 8007c78:	08007d49 	.word	0x08007d49
 8007c7c:	08007d51 	.word	0x08007d51
 8007c80:	08007bf9 	.word	0x08007bf9
 8007c84:	08007bf9 	.word	0x08007bf9
 8007c88:	08007d57 	.word	0x08007d57
 8007c8c:	08007d61 	.word	0x08007d61
 8007c90:	08007c99 	.word	0x08007c99
  if (value < 0.0f) { return(STATUS_NEGATIVE_VALUE); }
 8007c94:	2004      	movs	r0, #4
 8007c96:	bd38      	pop	{r3, r4, r5, pc}
          if (int_value) { settings.flags |= BITFLAG_LASER_MODE; }
 8007c98:	4a6e      	ldr	r2, [pc, #440]	; (8007e54 <settings_store_global_setting+0x2ac>)
 8007c9a:	f892 3058 	ldrb.w	r3, [r2, #88]	; 0x58
 8007c9e:	2800      	cmp	r0, #0
 8007ca0:	f000 8098 	beq.w	8007dd4 <settings_store_global_setting+0x22c>
 8007ca4:	f043 0302 	orr.w	r3, r3, #2
 8007ca8:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
  eeprom_put_char(0, SETTINGS_VERSION);
 8007cac:	210a      	movs	r1, #10
 8007cae:	2000      	movs	r0, #0
 8007cb0:	f7fa f85a 	bl	8001d68 <eeprom_put_char>
  memcpy_to_eeprom_with_checksum(EEPROM_ADDR_GLOBAL, (char*)&settings, sizeof(settings_t));
 8007cb4:	226c      	movs	r2, #108	; 0x6c
 8007cb6:	4967      	ldr	r1, [pc, #412]	; (8007e54 <settings_store_global_setting+0x2ac>)
 8007cb8:	2001      	movs	r0, #1
 8007cba:	f7fa f85b 	bl	8001d74 <memcpy_to_eeprom_with_checksum>
    }
  }
  write_global_settings();
  return(STATUS_OK);
 8007cbe:	2000      	movs	r0, #0
 8007cc0:	bd38      	pop	{r3, r4, r5, pc}
        if (int_value < 3) { return(STATUS_SETTING_STEP_PULSE_MIN); }
 8007cc2:	2802      	cmp	r0, #2
 8007cc4:	f200 80a7 	bhi.w	8007e16 <settings_store_global_setting+0x26e>
 8007cc8:	2006      	movs	r0, #6
 8007cca:	bd38      	pop	{r3, r4, r5, pc}
      case 1: settings.stepper_idle_lock_time = int_value; break;
 8007ccc:	4b61      	ldr	r3, [pc, #388]	; (8007e54 <settings_store_global_setting+0x2ac>)
 8007cce:	f883 0046 	strb.w	r0, [r3, #70]	; 0x46
 8007cd2:	e7eb      	b.n	8007cac <settings_store_global_setting+0x104>
        settings.dir_invert_mask = int_value;
 8007cd4:	4b5f      	ldr	r3, [pc, #380]	; (8007e54 <settings_store_global_setting+0x2ac>)
 8007cd6:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
        st_generate_step_dir_invert_masks(); // Regenerate step and direction port invert masks.
 8007cda:	f000 fd93 	bl	8008804 <st_generate_step_dir_invert_masks>
        break;
 8007cde:	e7e5      	b.n	8007cac <settings_store_global_setting+0x104>
        if (int_value) { settings.flags |= BITFLAG_INVERT_ST_ENABLE; }
 8007ce0:	4a5c      	ldr	r2, [pc, #368]	; (8007e54 <settings_store_global_setting+0x2ac>)
 8007ce2:	f892 3058 	ldrb.w	r3, [r2, #88]	; 0x58
 8007ce6:	2800      	cmp	r0, #0
 8007ce8:	d079      	beq.n	8007dde <settings_store_global_setting+0x236>
 8007cea:	f043 0304 	orr.w	r3, r3, #4
 8007cee:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
 8007cf2:	e7db      	b.n	8007cac <settings_store_global_setting+0x104>
        settings.step_invert_mask = int_value;
 8007cf4:	4b57      	ldr	r3, [pc, #348]	; (8007e54 <settings_store_global_setting+0x2ac>)
 8007cf6:	f8a3 0042 	strh.w	r0, [r3, #66]	; 0x42
        st_generate_step_dir_invert_masks(); // Regenerate step and direction port invert masks.
 8007cfa:	f000 fd83 	bl	8008804 <st_generate_step_dir_invert_masks>
        break;
 8007cfe:	e7d5      	b.n	8007cac <settings_store_global_setting+0x104>
        if (int_value) { settings.flags |= BITFLAG_INVERT_LIMIT_PINS; }
 8007d00:	4a54      	ldr	r2, [pc, #336]	; (8007e54 <settings_store_global_setting+0x2ac>)
 8007d02:	f892 3058 	ldrb.w	r3, [r2, #88]	; 0x58
 8007d06:	2800      	cmp	r0, #0
 8007d08:	d06e      	beq.n	8007de8 <settings_store_global_setting+0x240>
 8007d0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d0e:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
 8007d12:	e7cb      	b.n	8007cac <settings_store_global_setting+0x104>
        if (int_value) { settings.flags |= BITFLAG_INVERT_PROBE_PIN; }
 8007d14:	4b4f      	ldr	r3, [pc, #316]	; (8007e54 <settings_store_global_setting+0x2ac>)
 8007d16:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8007d1a:	2800      	cmp	r0, #0
 8007d1c:	d054      	beq.n	8007dc8 <settings_store_global_setting+0x220>
 8007d1e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
        probe_configure_invert_mask(false);
 8007d22:	2000      	movs	r0, #0
 8007d24:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8007d28:	f7fd faa0 	bl	800526c <probe_configure_invert_mask>
        break;
 8007d2c:	e7be      	b.n	8007cac <settings_store_global_setting+0x104>
        if (int_value) { settings.flags |= BITFLAG_HOMING_ENABLE; }
 8007d2e:	4a49      	ldr	r2, [pc, #292]	; (8007e54 <settings_store_global_setting+0x2ac>)
 8007d30:	f892 3058 	ldrb.w	r3, [r2, #88]	; 0x58
 8007d34:	2800      	cmp	r0, #0
 8007d36:	d061      	beq.n	8007dfc <settings_store_global_setting+0x254>
 8007d38:	f043 0310 	orr.w	r3, r3, #16
 8007d3c:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
 8007d40:	e7b4      	b.n	8007cac <settings_store_global_setting+0x104>
      case 12: settings.arc_tolerance = value; break;
 8007d42:	4b44      	ldr	r3, [pc, #272]	; (8007e54 <settings_store_global_setting+0x2ac>)
 8007d44:	64dd      	str	r5, [r3, #76]	; 0x4c
 8007d46:	e7b1      	b.n	8007cac <settings_store_global_setting+0x104>
      case 26: settings.homing_debounce_delay = int_value; break;
 8007d48:	4b42      	ldr	r3, [pc, #264]	; (8007e54 <settings_store_global_setting+0x2ac>)
 8007d4a:	f8a3 0064 	strh.w	r0, [r3, #100]	; 0x64
 8007d4e:	e7ad      	b.n	8007cac <settings_store_global_setting+0x104>
      case 27: settings.homing_pulloff = value; break;
 8007d50:	4b40      	ldr	r3, [pc, #256]	; (8007e54 <settings_store_global_setting+0x2ac>)
 8007d52:	669d      	str	r5, [r3, #104]	; 0x68
 8007d54:	e7aa      	b.n	8007cac <settings_store_global_setting+0x104>
      case 30: settings.rpm_max = value; spindle_init(); break; // Re-initialize spindle rpm calibration
 8007d56:	4b3f      	ldr	r3, [pc, #252]	; (8007e54 <settings_store_global_setting+0x2ac>)
 8007d58:	651d      	str	r5, [r3, #80]	; 0x50
 8007d5a:	f000 f91b 	bl	8007f94 <spindle_init>
 8007d5e:	e7a5      	b.n	8007cac <settings_store_global_setting+0x104>
      case 31: settings.rpm_min = value; spindle_init(); break; // Re-initialize spindle rpm calibration
 8007d60:	4b3c      	ldr	r3, [pc, #240]	; (8007e54 <settings_store_global_setting+0x2ac>)
 8007d62:	655d      	str	r5, [r3, #84]	; 0x54
 8007d64:	f000 f916 	bl	8007f94 <spindle_init>
 8007d68:	e7a0      	b.n	8007cac <settings_store_global_setting+0x104>
      case 24: settings.homing_feed_rate = value; break;
 8007d6a:	4b3a      	ldr	r3, [pc, #232]	; (8007e54 <settings_store_global_setting+0x2ac>)
 8007d6c:	65dd      	str	r5, [r3, #92]	; 0x5c
 8007d6e:	e79d      	b.n	8007cac <settings_store_global_setting+0x104>
      case 25: settings.homing_seek_rate = value; break;
 8007d70:	4b38      	ldr	r3, [pc, #224]	; (8007e54 <settings_store_global_setting+0x2ac>)
 8007d72:	661d      	str	r5, [r3, #96]	; 0x60
 8007d74:	e79a      	b.n	8007cac <settings_store_global_setting+0x104>
      case 23: settings.homing_dir_mask = int_value; break;
 8007d76:	4b37      	ldr	r3, [pc, #220]	; (8007e54 <settings_store_global_setting+0x2ac>)
 8007d78:	f8a3 005a 	strh.w	r0, [r3, #90]	; 0x5a
 8007d7c:	e796      	b.n	8007cac <settings_store_global_setting+0x104>
      case 10: settings.status_report_mask = int_value; break;
 8007d7e:	4b35      	ldr	r3, [pc, #212]	; (8007e54 <settings_store_global_setting+0x2ac>)
 8007d80:	f883 0047 	strb.w	r0, [r3, #71]	; 0x47
 8007d84:	e792      	b.n	8007cac <settings_store_global_setting+0x104>
      case 11: settings.junction_deviation = value; break;
 8007d86:	4b33      	ldr	r3, [pc, #204]	; (8007e54 <settings_store_global_setting+0x2ac>)
 8007d88:	649d      	str	r5, [r3, #72]	; 0x48
 8007d8a:	e78f      	b.n	8007cac <settings_store_global_setting+0x104>
          if (bit_isfalse(settings.flags, BITFLAG_HOMING_ENABLE)) { return(STATUS_SOFT_LIMIT_ERROR); }
 8007d8c:	4a31      	ldr	r2, [pc, #196]	; (8007e54 <settings_store_global_setting+0x2ac>)
 8007d8e:	f892 3058 	ldrb.w	r3, [r2, #88]	; 0x58
        if (int_value) {
 8007d92:	b370      	cbz	r0, 8007df2 <settings_store_global_setting+0x24a>
          if (bit_isfalse(settings.flags, BITFLAG_HOMING_ENABLE)) { return(STATUS_SOFT_LIMIT_ERROR); }
 8007d94:	06d9      	lsls	r1, r3, #27
 8007d96:	d457      	bmi.n	8007e48 <settings_store_global_setting+0x2a0>
 8007d98:	200a      	movs	r0, #10
 8007d9a:	bd38      	pop	{r3, r4, r5, pc}
        if (int_value) { settings.flags |= BITFLAG_HARD_LIMIT_ENABLE; }
 8007d9c:	4b2d      	ldr	r3, [pc, #180]	; (8007e54 <settings_store_global_setting+0x2ac>)
 8007d9e:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8007da2:	b380      	cbz	r0, 8007e06 <settings_store_global_setting+0x25e>
 8007da4:	f042 0208 	orr.w	r2, r2, #8
 8007da8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
        limits_init(); // Re-init to immediately change. NOTE: Nice to have but could be problematic later.
 8007dac:	f7fb fa30 	bl	8003210 <limits_init>
        break;
 8007db0:	e77c      	b.n	8007cac <settings_store_global_setting+0x104>
        if (int_value) { settings.flags |= BITFLAG_REPORT_INCHES; }
 8007db2:	4b28      	ldr	r3, [pc, #160]	; (8007e54 <settings_store_global_setting+0x2ac>)
 8007db4:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8007db8:	b148      	cbz	r0, 8007dce <settings_store_global_setting+0x226>
 8007dba:	f042 0201 	orr.w	r2, r2, #1
 8007dbe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
        system_flag_wco_change(); // Make sure WCO is immediately updated.
 8007dc2:	f001 fe8f 	bl	8009ae4 <system_flag_wco_change>
        break;
 8007dc6:	e771      	b.n	8007cac <settings_store_global_setting+0x104>
        else { settings.flags &= ~BITFLAG_INVERT_PROBE_PIN; }
 8007dc8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007dcc:	e7a9      	b.n	8007d22 <settings_store_global_setting+0x17a>
        else { settings.flags &= ~BITFLAG_REPORT_INCHES; }
 8007dce:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007dd2:	e7f4      	b.n	8007dbe <settings_store_global_setting+0x216>
          else { settings.flags &= ~BITFLAG_LASER_MODE; }
 8007dd4:	f023 0302 	bic.w	r3, r3, #2
 8007dd8:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
 8007ddc:	e766      	b.n	8007cac <settings_store_global_setting+0x104>
        else { settings.flags &= ~BITFLAG_INVERT_ST_ENABLE; }
 8007dde:	f023 0304 	bic.w	r3, r3, #4
 8007de2:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
 8007de6:	e761      	b.n	8007cac <settings_store_global_setting+0x104>
        else { settings.flags &= ~BITFLAG_INVERT_LIMIT_PINS; }
 8007de8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007dec:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
 8007df0:	e75c      	b.n	8007cac <settings_store_global_setting+0x104>
        } else { settings.flags &= ~BITFLAG_SOFT_LIMIT_ENABLE; }
 8007df2:	f023 0320 	bic.w	r3, r3, #32
 8007df6:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
 8007dfa:	e757      	b.n	8007cac <settings_store_global_setting+0x104>
          settings.flags &= ~BITFLAG_SOFT_LIMIT_ENABLE; // Force disable soft-limits.
 8007dfc:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8007e00:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
 8007e04:	e752      	b.n	8007cac <settings_store_global_setting+0x104>
        else { settings.flags &= ~BITFLAG_HARD_LIMIT_ENABLE; }
 8007e06:	f002 02f7 	and.w	r2, r2, #247	; 0xf7
 8007e0a:	e7cd      	b.n	8007da8 <settings_store_global_setting+0x200>
            settings.max_rate[parameter] = value;
 8007e0c:	4a11      	ldr	r2, [pc, #68]	; (8007e54 <settings_store_global_setting+0x2ac>)
 8007e0e:	3304      	adds	r3, #4
 8007e10:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
            break;
 8007e14:	e74a      	b.n	8007cac <settings_store_global_setting+0x104>
        settings.pulse_microseconds = int_value; break;
 8007e16:	4b0f      	ldr	r3, [pc, #60]	; (8007e54 <settings_store_global_setting+0x2ac>)
 8007e18:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
 8007e1c:	e746      	b.n	8007cac <settings_store_global_setting+0x104>
          case 2: settings.acceleration[parameter] = value*60*60; break; // Convert to mm/min^2 for grbl internal use.
 8007e1e:	4628      	mov	r0, r5
 8007e20:	490d      	ldr	r1, [pc, #52]	; (8007e58 <settings_store_global_setting+0x2b0>)
 8007e22:	f103 0408 	add.w	r4, r3, #8
 8007e26:	f7f8 ff43 	bl	8000cb0 <__aeabi_fmul>
 8007e2a:	4b0a      	ldr	r3, [pc, #40]	; (8007e54 <settings_store_global_setting+0x2ac>)
 8007e2c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007e30:	e73c      	b.n	8007cac <settings_store_global_setting+0x104>
          case 3: settings.max_travel[parameter] = -value; break;  // Store as negative for grbl internal use.
 8007e32:	4b08      	ldr	r3, [pc, #32]	; (8007e54 <settings_store_global_setting+0x2ac>)
 8007e34:	340c      	adds	r4, #12
 8007e36:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8007e3a:	f843 5024 	str.w	r5, [r3, r4, lsl #2]
 8007e3e:	e735      	b.n	8007cac <settings_store_global_setting+0x104>
            settings.steps_per_mm[parameter] = value;
 8007e40:	4a04      	ldr	r2, [pc, #16]	; (8007e54 <settings_store_global_setting+0x2ac>)
 8007e42:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
            break;
 8007e46:	e731      	b.n	8007cac <settings_store_global_setting+0x104>
          settings.flags |= BITFLAG_SOFT_LIMIT_ENABLE;
 8007e48:	f043 0320 	orr.w	r3, r3, #32
 8007e4c:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
 8007e50:	e72c      	b.n	8007cac <settings_store_global_setting+0x104>
 8007e52:	bf00      	nop
 8007e54:	20001404 	.word	0x20001404
 8007e58:	45610000 	.word	0x45610000

08007e5c <settings_init>:
}


// Initialize the config subsystem
void settings_init() {
 8007e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t version = eeprom_get_char(0);
 8007e5e:	2000      	movs	r0, #0
void settings_init() {
 8007e60:	b085      	sub	sp, #20
  uint8_t version = eeprom_get_char(0);
 8007e62:	f7f9 ff7b 	bl	8001d5c <eeprom_get_char>
  if (version == SETTINGS_VERSION) {
 8007e66:	280a      	cmp	r0, #10
 8007e68:	d077      	beq.n	8007f5a <settings_init+0xfe>
    settings.step_invert_mask = DEFAULT_STEPPING_INVERT_MASK;
 8007e6a:	f44f 16f8 	mov.w	r6, #2031616	; 0x1f0000
  if(!read_global_settings()) {
    report_status_message(STATUS_SETTING_READ_FAIL);
 8007e6e:	2007      	movs	r0, #7
 8007e70:	f7fe fc58 	bl	8006724 <report_status_message>
    settings.homing_dir_mask = DEFAULT_HOMING_DIR_MASK;
 8007e74:	231f      	movs	r3, #31
    settings.pulse_microseconds = DEFAULT_STEP_PULSE_MICROSECONDS;
 8007e76:	4c3d      	ldr	r4, [pc, #244]	; (8007f6c <settings_init+0x110>)
 8007e78:	2706      	movs	r7, #6
    settings.step_invert_mask = DEFAULT_STEPPING_INVERT_MASK;
 8007e7a:	f8c4 6042 	str.w	r6, [r4, #66]	; 0x42
    settings.arc_tolerance = DEFAULT_ARC_TOLERANCE;
 8007e7e:	4e3c      	ldr	r6, [pc, #240]	; (8007f70 <settings_init+0x114>)
    settings.homing_dir_mask = DEFAULT_HOMING_DIR_MASK;
 8007e80:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
    settings.arc_tolerance = DEFAULT_ARC_TOLERANCE;
 8007e84:	64e6      	str	r6, [r4, #76]	; 0x4c
    settings.rpm_min = DEFAULT_SPINDLE_RPM_MIN;
 8007e86:	2600      	movs	r6, #0
    settings.homing_debounce_delay = DEFAULT_HOMING_DEBOUNCE_DELAY;
 8007e88:	22fa      	movs	r2, #250	; 0xfa
    settings.homing_pulloff = DEFAULT_HOMING_PULLOFF;
 8007e8a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
    settings.stepper_idle_lock_time = DEFAULT_STEPPER_IDLE_LOCK_TIME;
 8007e8e:	2500      	movs	r5, #0
    if (DEFAULT_INVERT_LIMIT_PINS) { settings.flags |= BITFLAG_INVERT_LIMIT_PINS; }
 8007e90:	2144      	movs	r1, #68	; 0x44
    settings.pulse_microseconds = DEFAULT_STEP_PULSE_MICROSECONDS;
 8007e92:	f884 7040 	strb.w	r7, [r4, #64]	; 0x40
    settings.junction_deviation = DEFAULT_JUNCTION_DEVIATION;
 8007e96:	4f37      	ldr	r7, [pc, #220]	; (8007f74 <settings_init+0x118>)
    settings.rpm_min = DEFAULT_SPINDLE_RPM_MIN;
 8007e98:	6566      	str	r6, [r4, #84]	; 0x54
    settings.junction_deviation = DEFAULT_JUNCTION_DEVIATION;
 8007e9a:	64a7      	str	r7, [r4, #72]	; 0x48
    settings.rpm_max = DEFAULT_SPINDLE_RPM_MAX;
 8007e9c:	4f36      	ldr	r7, [pc, #216]	; (8007f78 <settings_init+0x11c>)
    settings.homing_seek_rate = DEFAULT_HOMING_SEEK_RATE;
 8007e9e:	4e37      	ldr	r6, [pc, #220]	; (8007f7c <settings_init+0x120>)
    settings.rpm_max = DEFAULT_SPINDLE_RPM_MAX;
 8007ea0:	6527      	str	r7, [r4, #80]	; 0x50
    settings.homing_feed_rate = DEFAULT_HOMING_FEED_RATE;
 8007ea2:	4f37      	ldr	r7, [pc, #220]	; (8007f80 <settings_init+0x124>)
    settings.homing_seek_rate = DEFAULT_HOMING_SEEK_RATE;
 8007ea4:	6626      	str	r6, [r4, #96]	; 0x60
    settings.homing_feed_rate = DEFAULT_HOMING_FEED_RATE;
 8007ea6:	65e7      	str	r7, [r4, #92]	; 0x5c
    settings.max_rate[X_AXIS] = DEFAULT_X_MAX_RATE;
 8007ea8:	4e36      	ldr	r6, [pc, #216]	; (8007f84 <settings_init+0x128>)
    settings.steps_per_mm[X_AXIS] = DEFAULT_X_STEPS_PER_MM;
 8007eaa:	4f37      	ldr	r7, [pc, #220]	; (8007f88 <settings_init+0x12c>)
    settings.homing_debounce_delay = DEFAULT_HOMING_DEBOUNCE_DELAY;
 8007eac:	f8a4 2064 	strh.w	r2, [r4, #100]	; 0x64
    settings.homing_pulloff = DEFAULT_HOMING_PULLOFF;
 8007eb0:	66a3      	str	r3, [r4, #104]	; 0x68
    settings.acceleration[X_AXIS] = DEFAULT_X_ACCELERATION;
 8007eb2:	4a36      	ldr	r2, [pc, #216]	; (8007f8c <settings_init+0x130>)
    settings.max_travel[X_AXIS] = (-DEFAULT_X_MAX_TRAVEL);
 8007eb4:	4b36      	ldr	r3, [pc, #216]	; (8007f90 <settings_init+0x134>)
    if (DEFAULT_INVERT_LIMIT_PINS) { settings.flags |= BITFLAG_INVERT_LIMIT_PINS; }
 8007eb6:	f884 1058 	strb.w	r1, [r4, #88]	; 0x58
  eeprom_put_char(0, SETTINGS_VERSION);
 8007eba:	4628      	mov	r0, r5
 8007ebc:	210a      	movs	r1, #10
    settings.acceleration[X_AXIS] = DEFAULT_X_ACCELERATION;
 8007ebe:	6222      	str	r2, [r4, #32]
    settings.acceleration[Y_AXIS] = DEFAULT_Y_ACCELERATION;
 8007ec0:	6262      	str	r2, [r4, #36]	; 0x24
    settings.acceleration[Z_AXIS] = DEFAULT_Z_ACCELERATION;
 8007ec2:	62a2      	str	r2, [r4, #40]	; 0x28
    settings.acceleration[A_AXIS] = DEFAULT_A_ACCELERATION;
 8007ec4:	62e2      	str	r2, [r4, #44]	; 0x2c
    settings.max_travel[X_AXIS] = (-DEFAULT_X_MAX_TRAVEL);
 8007ec6:	6323      	str	r3, [r4, #48]	; 0x30
    settings.max_travel[Y_AXIS] = (-DEFAULT_Y_MAX_TRAVEL);
 8007ec8:	6363      	str	r3, [r4, #52]	; 0x34
    settings.max_travel[Z_AXIS] = (-DEFAULT_Z_MAX_TRAVEL);
 8007eca:	63a3      	str	r3, [r4, #56]	; 0x38
    settings.max_travel[A_AXIS] = (-DEFAULT_A_MAX_TRAVEL);
 8007ecc:	63e3      	str	r3, [r4, #60]	; 0x3c
    settings.stepper_idle_lock_time = DEFAULT_STEPPER_IDLE_LOCK_TIME;
 8007ece:	f884 5046 	strb.w	r5, [r4, #70]	; 0x46
    settings.status_report_mask = DEFAULT_STATUS_REPORT_MASK;
 8007ed2:	f884 5047 	strb.w	r5, [r4, #71]	; 0x47
    settings.steps_per_mm[X_AXIS] = DEFAULT_X_STEPS_PER_MM;
 8007ed6:	6027      	str	r7, [r4, #0]
    settings.steps_per_mm[Y_AXIS] = DEFAULT_Y_STEPS_PER_MM;
 8007ed8:	6067      	str	r7, [r4, #4]
    settings.steps_per_mm[Z_AXIS] = DEFAULT_Z_STEPS_PER_MM;
 8007eda:	60a7      	str	r7, [r4, #8]
    settings.steps_per_mm[A_AXIS] = DEFAULT_A_STEPS_PER_MM;
 8007edc:	60e7      	str	r7, [r4, #12]
    settings.max_rate[X_AXIS] = DEFAULT_X_MAX_RATE;
 8007ede:	6126      	str	r6, [r4, #16]
    settings.max_rate[Y_AXIS] = DEFAULT_Y_MAX_RATE;
 8007ee0:	6166      	str	r6, [r4, #20]
    settings.max_rate[Z_AXIS] = DEFAULT_Z_MAX_RATE;
 8007ee2:	61a6      	str	r6, [r4, #24]
    settings.max_rate[A_AXIS] = DEFAULT_A_MAX_RATE;
 8007ee4:	61e6      	str	r6, [r4, #28]
  eeprom_put_char(0, SETTINGS_VERSION);
 8007ee6:	f7f9 ff3f 	bl	8001d68 <eeprom_put_char>
  memcpy_to_eeprom_with_checksum(EEPROM_ADDR_GLOBAL, (char*)&settings, sizeof(settings_t));
 8007eea:	4621      	mov	r1, r4
    memset(&coord_data, 0, sizeof(coord_data));
 8007eec:	f44f 7400 	mov.w	r4, #512	; 0x200
  memcpy_to_eeprom_with_checksum(EEPROM_ADDR_GLOBAL, (char*)&settings, sizeof(settings_t));
 8007ef0:	226c      	movs	r2, #108	; 0x6c
 8007ef2:	2001      	movs	r0, #1
 8007ef4:	f7f9 ff3e 	bl	8001d74 <memcpy_to_eeprom_with_checksum>
    memset(&coord_data, 0, sizeof(coord_data));
 8007ef8:	9500      	str	r5, [sp, #0]
 8007efa:	9501      	str	r5, [sp, #4]
 8007efc:	9502      	str	r5, [sp, #8]
 8007efe:	9503      	str	r5, [sp, #12]
    protocol_buffer_synchronize();
 8007f00:	f7fe f91a 	bl	8006138 <protocol_buffer_synchronize>
  memcpy_to_eeprom_with_checksum(addr,(char*)coord_data, sizeof(float)*N_AXIS);
 8007f04:	4620      	mov	r0, r4
 8007f06:	2210      	movs	r2, #16
 8007f08:	4669      	mov	r1, sp
 8007f0a:	3411      	adds	r4, #17
 8007f0c:	f7f9 ff32 	bl	8001d74 <memcpy_to_eeprom_with_checksum>
    for (idx=0; idx <= SETTING_INDEX_NCOORD; idx++) { settings_write_coord_data(idx, coord_data); }
 8007f10:	f5b4 7f22 	cmp.w	r4, #648	; 0x288
 8007f14:	d1f4      	bne.n	8007f00 <settings_init+0xa4>
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK, 0);
 8007f16:	2100      	movs	r1, #0
 8007f18:	f44f 7040 	mov.w	r0, #768	; 0x300
 8007f1c:	f7f9 ff24 	bl	8001d68 <eeprom_put_char>
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK+1, 0); // Checksum
 8007f20:	2100      	movs	r1, #0
 8007f22:	f240 3001 	movw	r0, #769	; 0x301
 8007f26:	f7f9 ff1f 	bl	8001d68 <eeprom_put_char>
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK+(LINE_BUFFER_SIZE+1), 0);
 8007f2a:	2100      	movs	r1, #0
 8007f2c:	f240 3051 	movw	r0, #849	; 0x351
 8007f30:	f7f9 ff1a 	bl	8001d68 <eeprom_put_char>
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK+(LINE_BUFFER_SIZE+2), 0); // Checksum
 8007f34:	2100      	movs	r1, #0
 8007f36:	f240 3052 	movw	r0, #850	; 0x352
 8007f3a:	f7f9 ff15 	bl	8001d68 <eeprom_put_char>
    eeprom_put_char(EEPROM_ADDR_BUILD_INFO , 0);
 8007f3e:	2100      	movs	r1, #0
 8007f40:	f44f 7070 	mov.w	r0, #960	; 0x3c0
 8007f44:	f7f9 ff10 	bl	8001d68 <eeprom_put_char>
    eeprom_put_char(EEPROM_ADDR_BUILD_INFO+1 , 0); // Checksum
 8007f48:	2100      	movs	r1, #0
 8007f4a:	f240 30c1 	movw	r0, #961	; 0x3c1
 8007f4e:	f7f9 ff0b 	bl	8001d68 <eeprom_put_char>
    settings_restore(SETTINGS_RESTORE_ALL); // Force restore all EEPROM data.
    report_grbl_settings();
 8007f52:	f7fe fc7f 	bl	8006854 <report_grbl_settings>
  }
}
 8007f56:	b005      	add	sp, #20
 8007f58:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!(memcpy_from_eeprom_with_checksum((char*)&settings, EEPROM_ADDR_GLOBAL, sizeof(settings_t)))) {
 8007f5a:	226c      	movs	r2, #108	; 0x6c
 8007f5c:	2101      	movs	r1, #1
 8007f5e:	4803      	ldr	r0, [pc, #12]	; (8007f6c <settings_init+0x110>)
 8007f60:	f7f9 ff5a 	bl	8001e18 <memcpy_from_eeprom_with_checksum>
 8007f64:	2800      	cmp	r0, #0
 8007f66:	d080      	beq.n	8007e6a <settings_init+0xe>
}
 8007f68:	b005      	add	sp, #20
 8007f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f6c:	20001404 	.word	0x20001404
 8007f70:	3b03126f 	.word	0x3b03126f
 8007f74:	3c23d70a 	.word	0x3c23d70a
 8007f78:	447a0000 	.word	0x447a0000
 8007f7c:	42c80000 	.word	0x42c80000
 8007f80:	41200000 	.word	0x41200000
 8007f84:	44fa0000 	.word	0x44fa0000
 8007f88:	45a00000 	.word	0x45a00000
 8007f8c:	4bdbba00 	.word	0x4bdbba00
 8007f90:	c38c0000 	.word	0xc38c0000

08007f94 <spindle_init>:
  static float pwm_gradient; // Precalulated value to speed up rpm to PWM conversions.
#endif


void spindle_init()
{
 8007f94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
#ifdef VARIABLE_SPINDLE
  pwm_gradient = SPINDLE_PWM_RANGE / (settings.rpm_max - settings.rpm_min);
 8007f98:	4b40      	ldr	r3, [pc, #256]	; (800809c <spindle_init+0x108>)
{
 8007f9a:	b088      	sub	sp, #32
  pwm_gradient = SPINDLE_PWM_RANGE / (settings.rpm_max - settings.rpm_min);
 8007f9c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007f9e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8007fa0:	f7f8 fd7c 	bl	8000a9c <__aeabi_fsub>
 8007fa4:	4601      	mov	r1, r0
 8007fa6:	483e      	ldr	r0, [pc, #248]	; (80080a0 <spindle_init+0x10c>)
 8007fa8:	f7f8 ff36 	bl	8000e18 <__aeabi_fdiv>
#if defined (STM32F103C8)
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_APB2PeriphClockCmd(RCC_SPINDLE_ENABLE_PORT, ENABLE); // there is no RCC_SPINDLE_DIRECTION_PORT defined!
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Pin = 1 << SPINDLE_DIRECTION_BIT;
 8007fac:	2601      	movs	r6, #1
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8007fae:	f04f 0803 	mov.w	r8, #3
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8007fb2:	2510      	movs	r5, #16
	GPIO_Init(SPINDLE_DIRECTION_PORT, &GPIO_InitStructure);

#ifdef USE_SPINDLE_ENABLE_PIN
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Pin = 1 << SPINDLE_ENABLE_BIT;
 8007fb4:	f04f 0902 	mov.w	r9, #2
#endif

#ifdef VARIABLE_SPINDLE
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
  TIM_TimeBaseInitTypeDef timerInitStructure;
  TIM_OCInitTypeDef outputChannelInit = { 0 };
 8007fb8:	2400      	movs	r4, #0
  pwm_gradient = SPINDLE_PWM_RANGE / (settings.rpm_max - settings.rpm_min);
 8007fba:	4b3a      	ldr	r3, [pc, #232]	; (80080a4 <spindle_init+0x110>)
	GPIO_InitStructure.GPIO_Pin = 1 << SPINDLE_DIRECTION_BIT;
 8007fbc:	f10d 0a20 	add.w	sl, sp, #32
  pwm_gradient = SPINDLE_PWM_RANGE / (settings.rpm_max - settings.rpm_min);
 8007fc0:	6018      	str	r0, [r3, #0]
	GPIO_Init(SPINDLE_DIRECTION_PORT, &GPIO_InitStructure);
 8007fc2:	4f39      	ldr	r7, [pc, #228]	; (80080a8 <spindle_init+0x114>)
	RCC_APB2PeriphClockCmd(RCC_SPINDLE_ENABLE_PORT, ENABLE); // there is no RCC_SPINDLE_DIRECTION_PORT defined!
 8007fc4:	4631      	mov	r1, r6
 8007fc6:	2008      	movs	r0, #8
 8007fc8:	f7f9 fc8c 	bl	80018e4 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Pin = 1 << SPINDLE_DIRECTION_BIT;
 8007fcc:	f82a 6d20 	strh.w	r6, [sl, #-32]!
	GPIO_Init(SPINDLE_DIRECTION_PORT, &GPIO_InitStructure);
 8007fd0:	4651      	mov	r1, sl
 8007fd2:	4638      	mov	r0, r7
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8007fd4:	f88d 5003 	strb.w	r5, [sp, #3]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8007fd8:	f88d 8002 	strb.w	r8, [sp, #2]
	GPIO_Init(SPINDLE_DIRECTION_PORT, &GPIO_InitStructure);
 8007fdc:	f7f9 fa10 	bl	8001400 <GPIO_Init>
	GPIO_Init(SPINDLE_ENABLE_PORT, &GPIO_InitStructure);
 8007fe0:	4651      	mov	r1, sl
 8007fe2:	4638      	mov	r0, r7
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8007fe4:	f88d 5003 	strb.w	r5, [sp, #3]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8007fe8:	f88d 8002 	strb.w	r8, [sp, #2]
	GPIO_InitStructure.GPIO_Pin = 1 << SPINDLE_ENABLE_BIT;
 8007fec:	f8ad 9000 	strh.w	r9, [sp]
	GPIO_Init(SPINDLE_ENABLE_PORT, &GPIO_InitStructure);
 8007ff0:	f7f9 fa06 	bl	8001400 <GPIO_Init>
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 8007ff4:	4631      	mov	r1, r6
 8007ff6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007ffa:	f7f9 fc73 	bl	80018e4 <RCC_APB2PeriphClockCmd>
  TIM_TimeBaseStructInit(&timerInitStructure);
 8007ffe:	a801      	add	r0, sp, #4
  TIM_OCInitTypeDef outputChannelInit = { 0 };
 8008000:	9404      	str	r4, [sp, #16]
 8008002:	9405      	str	r4, [sp, #20]
 8008004:	9406      	str	r4, [sp, #24]
 8008006:	9407      	str	r4, [sp, #28]
  TIM_TimeBaseStructInit(&timerInitStructure);
 8008008:	f7f9 fd22 	bl	8001a50 <TIM_TimeBaseStructInit>

  timerInitStructure.TIM_Prescaler = F_CPU / 1000000 - 1; // 1000
  timerInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
  timerInitStructure.TIM_Period = SPINDLE_PWM_MAX_VALUE - 1;
 800800c:	2263      	movs	r2, #99	; 0x63
  timerInitStructure.TIM_Prescaler = F_CPU / 1000000 - 1; // 1000
 800800e:	4b27      	ldr	r3, [pc, #156]	; (80080ac <spindle_init+0x118>)
 8008010:	4827      	ldr	r0, [pc, #156]	; (80080b0 <spindle_init+0x11c>)
 8008012:	681b      	ldr	r3, [r3, #0]
  timerInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
  timerInitStructure.TIM_RepetitionCounter = 0;
  TIM_TimeBaseInit(TIM1, &timerInitStructure);
 8008014:	4d27      	ldr	r5, [pc, #156]	; (80080b4 <spindle_init+0x120>)
  timerInitStructure.TIM_Prescaler = F_CPU / 1000000 - 1; // 1000
 8008016:	fba0 0303 	umull	r0, r3, r0, r3
 800801a:	0c9b      	lsrs	r3, r3, #18
  TIM_TimeBaseInit(TIM1, &timerInitStructure);
 800801c:	a901      	add	r1, sp, #4
  timerInitStructure.TIM_Prescaler = F_CPU / 1000000 - 1; // 1000
 800801e:	3b01      	subs	r3, #1
  TIM_TimeBaseInit(TIM1, &timerInitStructure);
 8008020:	4628      	mov	r0, r5
  timerInitStructure.TIM_Period = SPINDLE_PWM_MAX_VALUE - 1;
 8008022:	f8ad 2008 	strh.w	r2, [sp, #8]
  timerInitStructure.TIM_Prescaler = F_CPU / 1000000 - 1; // 1000
 8008026:	f8ad 3004 	strh.w	r3, [sp, #4]
  timerInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
 800802a:	f8ad 4006 	strh.w	r4, [sp, #6]
  timerInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 800802e:	f8ad 400a 	strh.w	r4, [sp, #10]
  timerInitStructure.TIM_RepetitionCounter = 0;
 8008032:	f88d 400c 	strb.w	r4, [sp, #12]
  TIM_TimeBaseInit(TIM1, &timerInitStructure);
 8008036:	f7f9 fc6d 	bl	8001914 <TIM_TimeBaseInit>

  outputChannelInit.TIM_OCMode = TIM_OCMode_PWM1;
 800803a:	4b1f      	ldr	r3, [pc, #124]	; (80080b8 <spindle_init+0x124>)
  outputChannelInit.TIM_Pulse = 0;     // initi speed is 0
  outputChannelInit.TIM_OutputState = TIM_OutputState_Enable;
  outputChannelInit.TIM_OCPolarity = TIM_OCPolarity_High;

  TIM_OC1Init(TIM1, &outputChannelInit);
 800803c:	a904      	add	r1, sp, #16
 800803e:	4628      	mov	r0, r5
  outputChannelInit.TIM_OCMode = TIM_OCMode_PWM1;
 8008040:	9304      	str	r3, [sp, #16]
  outputChannelInit.TIM_Pulse = 0;     // initi speed is 0
 8008042:	f8cd 4016 	str.w	r4, [sp, #22]
  TIM_OC1Init(TIM1, &outputChannelInit);
 8008046:	f7f9 fcbb 	bl	80019c0 <TIM_OC1Init>
  TIM_OC1PreloadConfig(TIM1, TIM_OCPreload_Enable);
 800804a:	4628      	mov	r0, r5
 800804c:	2108      	movs	r1, #8
 800804e:	f7f9 fd2f 	bl	8001ab0 <TIM_OC1PreloadConfig>
  TIM_CtrlPWMOutputs(TIM1, DISABLE);
 8008052:	4621      	mov	r1, r4
 8008054:	4628      	mov	r0, r5
 8008056:	f7f9 fd11 	bl	8001a7c <TIM_CtrlPWMOutputs>
  TIM_Cmd(TIM1, ENABLE);
 800805a:	4631      	mov	r1, r6
 800805c:	4628      	mov	r0, r5
 800805e:	f7f9 fcff 	bl	8001a60 <TIM_Cmd>

  RCC_APB2PeriphClockCmd(RCC_SPINDLE_PWM_PORT, ENABLE);
 8008062:	4631      	mov	r1, r6
 8008064:	2004      	movs	r0, #4
 8008066:	f7f9 fc3d 	bl	80018e4 <RCC_APB2PeriphClockCmd>
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
  GPIO_InitStructure.GPIO_Pin = 1 << SPINDLE_PWM_BIT;
 800806a:	f44f 7380 	mov.w	r3, #256	; 0x100
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 800806e:	2218      	movs	r2, #24
  GPIO_Init(SPINDLE_PWM_PORT, &GPIO_InitStructure);
 8008070:	4651      	mov	r1, sl
 8008072:	4812      	ldr	r0, [pc, #72]	; (80080bc <spindle_init+0x128>)
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8008074:	f88d 2003 	strb.w	r2, [sp, #3]
  GPIO_InitStructure.GPIO_Pin = 1 << SPINDLE_PWM_BIT;
 8008078:	f8ad 3000 	strh.w	r3, [sp]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800807c:	f88d 8002 	strb.w	r8, [sp, #2]
  GPIO_Init(SPINDLE_PWM_PORT, &GPIO_InitStructure);
 8008080:	f7f9 f9be 	bl	8001400 <GPIO_Init>
#endif
#endif

#if defined (STM32F103C8)
	#ifdef VARIABLE_SPINDLE
    TIM_CtrlPWMOutputs(TIM1, DISABLE);
 8008084:	4621      	mov	r1, r4
 8008086:	4628      	mov	r0, r5
 8008088:	f7f9 fcf8 	bl	8001a7c <TIM_CtrlPWMOutputs>
	#endif
    #ifdef USE_SPINDLE_ENABLE_PIN
      #ifdef INVERT_SPINDLE_ENABLE_PIN
        SetSpindleEnablebit();
      #else
        ResetSpindleEnablebit();
 800808c:	4622      	mov	r2, r4
 800808e:	4649      	mov	r1, r9
 8008090:	4638      	mov	r0, r7
 8008092:	f7f9 fb77 	bl	8001784 <GPIO_WriteBit>
}
 8008096:	b008      	add	sp, #32
 8008098:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800809c:	20001404 	.word	0x20001404
 80080a0:	42c60000 	.word	0x42c60000
 80080a4:	20000a74 	.word	0x20000a74
 80080a8:	40010c00 	.word	0x40010c00
 80080ac:	20000018 	.word	0x20000018
 80080b0:	431bde83 	.word	0x431bde83
 80080b4:	40012c00 	.word	0x40012c00
 80080b8:	00010060 	.word	0x00010060
 80080bc:	40010800 	.word	0x40010800

080080c0 <spindle_get_state>:
{
 80080c0:	b508      	push	{r3, lr}
  pin = GPIO_ReadInputData(SPINDLE_ENABLE_PORT);
 80080c2:	4807      	ldr	r0, [pc, #28]	; (80080e0 <spindle_get_state+0x20>)
 80080c4:	f7f9 fb52 	bl	800176c <GPIO_ReadInputData>
 80080c8:	b2c0      	uxtb	r0, r0
		  if (bit_istrue(pin,(1<<SPINDLE_ENABLE_BIT)))
 80080ca:	f010 0302 	ands.w	r3, r0, #2
 80080ce:	d005      	beq.n	80080dc <spindle_get_state+0x1c>
		  if (pin & (1 << SPINDLE_DIRECTION_BIT)) { return(SPINDLE_STATE_CCW); }
 80080d0:	f010 0f01 	tst.w	r0, #1
		  else { return(SPINDLE_STATE_CW); }
 80080d4:	bf14      	ite	ne
 80080d6:	2002      	movne	r0, #2
 80080d8:	2001      	moveq	r0, #1
 80080da:	bd08      	pop	{r3, pc}
		} else { return(SPINDLE_STATE_DISABLE); }
 80080dc:	4618      	mov	r0, r3
}
 80080de:	bd08      	pop	{r3, pc}
 80080e0:	40010c00 	.word	0x40010c00

080080e4 <spindle_stop>:
{
 80080e4:	b508      	push	{r3, lr}
    TIM_CtrlPWMOutputs(TIM1, DISABLE);
 80080e6:	2100      	movs	r1, #0
 80080e8:	4804      	ldr	r0, [pc, #16]	; (80080fc <spindle_stop+0x18>)
 80080ea:	f7f9 fcc7 	bl	8001a7c <TIM_CtrlPWMOutputs>
      #endif
    #endif
#endif
}
 80080ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        ResetSpindleEnablebit();
 80080f2:	2200      	movs	r2, #0
 80080f4:	2102      	movs	r1, #2
 80080f6:	4802      	ldr	r0, [pc, #8]	; (8008100 <spindle_stop+0x1c>)
 80080f8:	f7f9 bb44 	b.w	8001784 <GPIO_WriteBit>
 80080fc:	40012c00 	.word	0x40012c00
 8008100:	40010c00 	.word	0x40010c00

08008104 <spindle_set_speed>:

#ifdef VARIABLE_SPINDLE
  // Sets spindle speed PWM output and enable pin, if configured. Called by spindle_set_state()
  // and stepper ISR. Keep routine small and efficient.
  void spindle_set_speed(SPINDLE_PWM_TYPE pwm_value)
  {
 8008104:	4601      	mov	r1, r0
#ifdef AVRTARGET
		SPINDLE_OCR_REGISTER = pwm_value; // Set PWM output level.
#endif
#if defined (STM32F103C8)
		TIM1->CCR1 = pwm_value;
 8008106:	4803      	ldr	r0, [pc, #12]	; (8008114 <spindle_set_speed+0x10>)
 8008108:	8681      	strh	r1, [r0, #52]	; 0x34
					SetSpindleEnablebit();
				  #endif
				#endif
		 }
		#else
			if (pwm_value == SPINDLE_PWM_OFF_VALUE) {
 800810a:	b101      	cbz	r1, 800810e <spindle_set_speed+0xa>
			} else {
			#ifdef AVRTARGET
      SPINDLE_TCCRA_REGISTER |= (1<<SPINDLE_COMB_BIT); // Ensure PWM output is enabled.
			#endif
			#if defined (STM32F103C8)
      TIM_CtrlPWMOutputs(TIM1, ENABLE);
 800810c:	2101      	movs	r1, #1
 800810e:	f7f9 bcb5 	b.w	8001a7c <TIM_CtrlPWMOutputs>
 8008112:	bf00      	nop
 8008114:	40012c00 	.word	0x40012c00

08008118 <spindle_compute_pwm_value>:
		return(pwm_value);
	}
  #else
	// Called by spindle_set_state() and step segment generator. Keep routine small and efficient.
	SPINDLE_PWM_TYPE spindle_compute_pwm_value(float rpm) // 328p PWM register is 8-bit.
	{
 8008118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		SPINDLE_PWM_TYPE pwm_value;
		rpm *= (0.010f*sys.spindle_speed_ovr); // Scale by spindle speed override value.
																					 // Calculate PWM register value based on rpm max/min settings and programmed rpm.
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 800811a:	4b1e      	ldr	r3, [pc, #120]	; (8008194 <spindle_compute_pwm_value+0x7c>)
	{
 800811c:	4607      	mov	r7, r0
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 800811e:	6d5e      	ldr	r6, [r3, #84]	; 0x54
 8008120:	6d1c      	ldr	r4, [r3, #80]	; 0x50
 8008122:	4630      	mov	r0, r6
 8008124:	4621      	mov	r1, r4
 8008126:	f7f8 ff75 	bl	8001014 <__aeabi_fcmpge>
 800812a:	4d1b      	ldr	r5, [pc, #108]	; (8008198 <spindle_compute_pwm_value+0x80>)
 800812c:	b110      	cbz	r0, 8008134 <spindle_compute_pwm_value+0x1c>
			// No PWM range possible. Set simple on/off spindle control pin state.
			sys.spindle_speed = settings.rpm_max;
 800812e:	612c      	str	r4, [r5, #16]
			pwm_value = SPINDLE_PWM_MAX_VALUE;
 8008130:	2064      	movs	r0, #100	; 0x64
 8008132:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rpm *= (0.010f*sys.spindle_speed_ovr); // Scale by spindle speed override value.
 8008134:	7aa8      	ldrb	r0, [r5, #10]
 8008136:	f7f8 fd67 	bl	8000c08 <__aeabi_i2f>
 800813a:	4639      	mov	r1, r7
 800813c:	f7f8 fdb8 	bl	8000cb0 <__aeabi_fmul>
 8008140:	4916      	ldr	r1, [pc, #88]	; (800819c <spindle_compute_pwm_value+0x84>)
 8008142:	f7f8 fdb5 	bl	8000cb0 <__aeabi_fmul>
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 8008146:	4621      	mov	r1, r4
		rpm *= (0.010f*sys.spindle_speed_ovr); // Scale by spindle speed override value.
 8008148:	4607      	mov	r7, r0
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 800814a:	f7f8 ff63 	bl	8001014 <__aeabi_fcmpge>
 800814e:	2800      	cmp	r0, #0
 8008150:	d1ed      	bne.n	800812e <spindle_compute_pwm_value+0x16>
		}
		else if (rpm <= settings.rpm_min) {
 8008152:	4631      	mov	r1, r6
 8008154:	4638      	mov	r0, r7
 8008156:	f7f8 ff53 	bl	8001000 <__aeabi_fcmple>
 800815a:	b140      	cbz	r0, 800816e <spindle_compute_pwm_value+0x56>
			if (rpm == 0.0f) { // S0 disables spindle
 800815c:	2400      	movs	r4, #0
 800815e:	4638      	mov	r0, r7
 8008160:	4621      	mov	r1, r4
 8008162:	f7f8 ff39 	bl	8000fd8 <__aeabi_fcmpeq>
 8008166:	b190      	cbz	r0, 800818e <spindle_compute_pwm_value+0x76>
				sys.spindle_speed = 0.0f;
 8008168:	612c      	str	r4, [r5, #16]
				pwm_value = SPINDLE_PWM_OFF_VALUE;
 800816a:	2000      	movs	r0, #0
 800816c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		else {
			// Compute intermediate PWM value with linear spindle speed model.
			// NOTE: A nonlinear model could be installed here, if required, but keep it VERY light-weight.
			sys.spindle_speed = rpm;
			pwm_value = (SPINDLE_PWM_TYPE)floorf((rpm - settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
 800816e:	4631      	mov	r1, r6
			sys.spindle_speed = rpm;
 8008170:	612f      	str	r7, [r5, #16]
			pwm_value = (SPINDLE_PWM_TYPE)floorf((rpm - settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
 8008172:	4638      	mov	r0, r7
 8008174:	f7f8 fc92 	bl	8000a9c <__aeabi_fsub>
 8008178:	4b09      	ldr	r3, [pc, #36]	; (80081a0 <spindle_compute_pwm_value+0x88>)
 800817a:	6819      	ldr	r1, [r3, #0]
 800817c:	f7f8 fd98 	bl	8000cb0 <__aeabi_fmul>
 8008180:	f003 fa26 	bl	800b5d0 <floorf>
 8008184:	f7f8 ff96 	bl	80010b4 <__aeabi_f2uiz>
 8008188:	3001      	adds	r0, #1
 800818a:	b280      	uxth	r0, r0
		}
		return(pwm_value);
	}
 800818c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				sys.spindle_speed = settings.rpm_min;
 800818e:	612e      	str	r6, [r5, #16]
				pwm_value = SPINDLE_PWM_MIN_VALUE;
 8008190:	2001      	movs	r0, #1
 8008192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008194:	20001404 	.word	0x20001404
 8008198:	200010c8 	.word	0x200010c8
 800819c:	3c23d70a 	.word	0x3c23d70a
 80081a0:	20000a74 	.word	0x20000a74

080081a4 <spindle_set_state>:
#ifdef VARIABLE_SPINDLE
  void spindle_set_state(uint8_t state, float rpm)
#else
  void _spindle_set_state(uint8_t state)
#endif
{
 80081a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (sys.abort) { return; } // Block during abort.
 80081a6:	4c3e      	ldr	r4, [pc, #248]	; (80082a0 <spindle_set_state+0xfc>)
 80081a8:	7862      	ldrb	r2, [r4, #1]
 80081aa:	bb2a      	cbnz	r2, 80081f8 <spindle_set_state+0x54>
 80081ac:	4605      	mov	r5, r0
  if (state == SPINDLE_DISABLE) { // Halt or set spindle direction and rpm.
 80081ae:	b320      	cbz	r0, 80081fa <spindle_set_state+0x56>
    #endif
    spindle_stop();
  
  } else {
    #if !(defined(AVRTARGET) && defined(USE_SPINDLE_DIR_AS_ENABLE_PIN))
      if (state == SPINDLE_ENABLE_CW) {
 80081b0:	2810      	cmp	r0, #16
 80081b2:	460e      	mov	r6, r1
 80081b4:	d056      	beq.n	8008264 <spindle_set_state+0xc0>
        ResetSpindleDirectionBit();
	  }
	  else {
      SetSpindleDirectionBit();
 80081b6:	2201      	movs	r2, #1
 80081b8:	483a      	ldr	r0, [pc, #232]	; (80082a4 <spindle_set_state+0x100>)
 80081ba:	4611      	mov	r1, r2
 80081bc:	f7f9 fae2 	bl	8001784 <GPIO_WriteBit>
      }
    #endif
  
    #ifdef VARIABLE_SPINDLE
      // NOTE: Assumes all calls to this function is when Grbl is not moving or must remain off.
      if (settings.flags & BITFLAG_LASER_MODE) {
 80081c0:	4b39      	ldr	r3, [pc, #228]	; (80082a8 <spindle_set_state+0x104>)
 80081c2:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80081c6:	0792      	lsls	r2, r2, #30
 80081c8:	d425      	bmi.n	8008216 <spindle_set_state+0x72>
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 80081ca:	6d5f      	ldr	r7, [r3, #84]	; 0x54
 80081cc:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 80081ce:	4638      	mov	r0, r7
 80081d0:	4629      	mov	r1, r5
 80081d2:	f7f8 ff1f 	bl	8001014 <__aeabi_fcmpge>
 80081d6:	b310      	cbz	r0, 800821e <spindle_set_state+0x7a>
			pwm_value = SPINDLE_PWM_MAX_VALUE;
 80081d8:	2264      	movs	r2, #100	; 0x64
			sys.spindle_speed = settings.rpm_max;
 80081da:	6125      	str	r5, [r4, #16]
		TIM1->CCR1 = pwm_value;
 80081dc:	4b33      	ldr	r3, [pc, #204]	; (80082ac <spindle_set_state+0x108>)
 80081de:	869a      	strh	r2, [r3, #52]	; 0x34
      TIM_CtrlPWMOutputs(TIM1, ENABLE);
 80081e0:	2101      	movs	r1, #1
 80081e2:	4832      	ldr	r0, [pc, #200]	; (80082ac <spindle_set_state+0x108>)
 80081e4:	f7f9 fc4a 	bl	8001a7c <TIM_CtrlPWMOutputs>
#if (defined(USE_SPINDLE_ENABLE_PIN) && \
        !defined(SPINDLE_ENABLE_OFF_WITH_ZERO_SPEED)) || !defined(VARIABLE_SPINDLE)
	  #ifdef INVERT_SPINDLE_ENABLE_PIN
		ResetSpindleEnablebit();
	  #else
		SetSpindleEnablebit();
 80081e8:	2201      	movs	r2, #1
 80081ea:	2102      	movs	r1, #2
 80081ec:	482d      	ldr	r0, [pc, #180]	; (80082a4 <spindle_set_state+0x100>)
 80081ee:	f7f9 fac9 	bl	8001784 <GPIO_WriteBit>
	  #endif
	#endif
	#endif
  }
  
  sys.report_ovr_counter = 0; // Set to report change immediately
 80081f2:	2300      	movs	r3, #0
 80081f4:	7323      	strb	r3, [r4, #12]
 80081f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      sys.spindle_speed = 0.0f;
 80081fa:	2300      	movs	r3, #0
    TIM_CtrlPWMOutputs(TIM1, DISABLE);
 80081fc:	4601      	mov	r1, r0
 80081fe:	482b      	ldr	r0, [pc, #172]	; (80082ac <spindle_set_state+0x108>)
      sys.spindle_speed = 0.0f;
 8008200:	6123      	str	r3, [r4, #16]
    TIM_CtrlPWMOutputs(TIM1, DISABLE);
 8008202:	f7f9 fc3b 	bl	8001a7c <TIM_CtrlPWMOutputs>
        ResetSpindleEnablebit();
 8008206:	462a      	mov	r2, r5
 8008208:	2102      	movs	r1, #2
 800820a:	4826      	ldr	r0, [pc, #152]	; (80082a4 <spindle_set_state+0x100>)
 800820c:	f7f9 faba 	bl	8001784 <GPIO_WriteBit>
  sys.report_ovr_counter = 0; // Set to report change immediately
 8008210:	2300      	movs	r3, #0
 8008212:	7323      	strb	r3, [r4, #12]
 8008214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (state == SPINDLE_ENABLE_CCW) { rpm = 0.0f; } // TODO: May need to be rpm_min*(100/MAX_SPINDLE_SPEED_OVERRIDE);
 8008216:	2d20      	cmp	r5, #32
 8008218:	bf08      	it	eq
 800821a:	2600      	moveq	r6, #0
 800821c:	e7d5      	b.n	80081ca <spindle_set_state+0x26>
		rpm *= (0.010f*sys.spindle_speed_ovr); // Scale by spindle speed override value.
 800821e:	7aa0      	ldrb	r0, [r4, #10]
 8008220:	f7f8 fcf2 	bl	8000c08 <__aeabi_i2f>
 8008224:	4922      	ldr	r1, [pc, #136]	; (80082b0 <spindle_set_state+0x10c>)
 8008226:	f7f8 fd43 	bl	8000cb0 <__aeabi_fmul>
 800822a:	4631      	mov	r1, r6
 800822c:	f7f8 fd40 	bl	8000cb0 <__aeabi_fmul>
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 8008230:	4629      	mov	r1, r5
		rpm *= (0.010f*sys.spindle_speed_ovr); // Scale by spindle speed override value.
 8008232:	4606      	mov	r6, r0
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 8008234:	f7f8 feee 	bl	8001014 <__aeabi_fcmpge>
 8008238:	2800      	cmp	r0, #0
 800823a:	d1cd      	bne.n	80081d8 <spindle_set_state+0x34>
		else if (rpm <= settings.rpm_min) {
 800823c:	4639      	mov	r1, r7
 800823e:	4630      	mov	r0, r6
 8008240:	f7f8 fede 	bl	8001000 <__aeabi_fcmple>
 8008244:	b1a0      	cbz	r0, 8008270 <spindle_set_state+0xcc>
			if (rpm == 0.0f) { // S0 disables spindle
 8008246:	2500      	movs	r5, #0
 8008248:	4630      	mov	r0, r6
 800824a:	4629      	mov	r1, r5
 800824c:	f7f8 fec4 	bl	8000fd8 <__aeabi_fcmpeq>
 8008250:	b310      	cbz	r0, 8008298 <spindle_set_state+0xf4>
		TIM1->CCR1 = pwm_value;
 8008252:	2200      	movs	r2, #0
 8008254:	4b15      	ldr	r3, [pc, #84]	; (80082ac <spindle_set_state+0x108>)
				sys.spindle_speed = 0.0f;
 8008256:	6125      	str	r5, [r4, #16]
		TIM1->CCR1 = pwm_value;
 8008258:	869a      	strh	r2, [r3, #52]	; 0x34
				TIM_CtrlPWMOutputs(TIM1, DISABLE);
 800825a:	2100      	movs	r1, #0
 800825c:	4813      	ldr	r0, [pc, #76]	; (80082ac <spindle_set_state+0x108>)
 800825e:	f7f9 fc0d 	bl	8001a7c <TIM_CtrlPWMOutputs>
 8008262:	e7c1      	b.n	80081e8 <spindle_set_state+0x44>
        ResetSpindleDirectionBit();
 8008264:	2101      	movs	r1, #1
 8008266:	480f      	ldr	r0, [pc, #60]	; (80082a4 <spindle_set_state+0x100>)
 8008268:	f7f9 fa8c 	bl	8001784 <GPIO_WriteBit>
 800826c:	4b0e      	ldr	r3, [pc, #56]	; (80082a8 <spindle_set_state+0x104>)
 800826e:	e7ac      	b.n	80081ca <spindle_set_state+0x26>
			pwm_value = (SPINDLE_PWM_TYPE)floorf((rpm - settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
 8008270:	4639      	mov	r1, r7
 8008272:	4630      	mov	r0, r6
			sys.spindle_speed = rpm;
 8008274:	6126      	str	r6, [r4, #16]
			pwm_value = (SPINDLE_PWM_TYPE)floorf((rpm - settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
 8008276:	f7f8 fc11 	bl	8000a9c <__aeabi_fsub>
 800827a:	4b0e      	ldr	r3, [pc, #56]	; (80082b4 <spindle_set_state+0x110>)
 800827c:	6819      	ldr	r1, [r3, #0]
 800827e:	f7f8 fd17 	bl	8000cb0 <__aeabi_fmul>
 8008282:	f003 f9a5 	bl	800b5d0 <floorf>
 8008286:	f7f8 ff15 	bl	80010b4 <__aeabi_f2uiz>
		TIM1->CCR1 = pwm_value;
 800828a:	4b08      	ldr	r3, [pc, #32]	; (80082ac <spindle_set_state+0x108>)
			pwm_value = (SPINDLE_PWM_TYPE)floorf((rpm - settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
 800828c:	3001      	adds	r0, #1
 800828e:	b280      	uxth	r0, r0
		TIM1->CCR1 = pwm_value;
 8008290:	8698      	strh	r0, [r3, #52]	; 0x34
			if (pwm_value == SPINDLE_PWM_OFF_VALUE) {
 8008292:	2800      	cmp	r0, #0
 8008294:	d0e1      	beq.n	800825a <spindle_set_state+0xb6>
 8008296:	e7a3      	b.n	80081e0 <spindle_set_state+0x3c>
				sys.spindle_speed = settings.rpm_min;
 8008298:	6127      	str	r7, [r4, #16]
				pwm_value = SPINDLE_PWM_MIN_VALUE;
 800829a:	2201      	movs	r2, #1
 800829c:	e79e      	b.n	80081dc <spindle_set_state+0x38>
 800829e:	bf00      	nop
 80082a0:	200010c8 	.word	0x200010c8
 80082a4:	40010c00 	.word	0x40010c00
 80082a8:	20001404 	.word	0x20001404
 80082ac:	40012c00 	.word	0x40012c00
 80082b0:	3c23d70a 	.word	0x3c23d70a
 80082b4:	20000a74 	.word	0x20000a74

080082b8 <spindle_sync>:

// G-code parser entry-point for setting spindle state. Forces a planner buffer sync and bails 
// if an abort or check-mode is active.
#ifdef VARIABLE_SPINDLE
  void spindle_sync(uint8_t state, float rpm)
  {
 80082b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (sys.state == STATE_CHECK_MODE) { return; }
 80082ba:	4c3f      	ldr	r4, [pc, #252]	; (80083b8 <spindle_sync+0x100>)
 80082bc:	7823      	ldrb	r3, [r4, #0]
 80082be:	2b02      	cmp	r3, #2
 80082c0:	d005      	beq.n	80082ce <spindle_sync+0x16>
 80082c2:	4605      	mov	r5, r0
 80082c4:	460e      	mov	r6, r1
    protocol_buffer_synchronize(); // Empty planner buffer to ensure spindle is set when programmed.
 80082c6:	f7fd ff37 	bl	8006138 <protocol_buffer_synchronize>
  if (sys.abort) { return; } // Block during abort.
 80082ca:	7862      	ldrb	r2, [r4, #1]
 80082cc:	b102      	cbz	r2, 80082d0 <spindle_sync+0x18>
 80082ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (state == SPINDLE_DISABLE) { // Halt or set spindle direction and rpm.
 80082d0:	b32d      	cbz	r5, 800831e <spindle_sync+0x66>
      if (state == SPINDLE_ENABLE_CW) {
 80082d2:	2d10      	cmp	r5, #16
 80082d4:	d052      	beq.n	800837c <spindle_sync+0xc4>
      SetSpindleDirectionBit();
 80082d6:	2201      	movs	r2, #1
 80082d8:	4838      	ldr	r0, [pc, #224]	; (80083bc <spindle_sync+0x104>)
 80082da:	4611      	mov	r1, r2
 80082dc:	f7f9 fa52 	bl	8001784 <GPIO_WriteBit>
      if (settings.flags & BITFLAG_LASER_MODE) {
 80082e0:	4b37      	ldr	r3, [pc, #220]	; (80083c0 <spindle_sync+0x108>)
 80082e2:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80082e6:	0792      	lsls	r2, r2, #30
 80082e8:	d502      	bpl.n	80082f0 <spindle_sync+0x38>
        if (state == SPINDLE_ENABLE_CCW) { rpm = 0.0f; } // TODO: May need to be rpm_min*(100/MAX_SPINDLE_SPEED_OVERRIDE);
 80082ea:	2d20      	cmp	r5, #32
 80082ec:	bf08      	it	eq
 80082ee:	2600      	moveq	r6, #0
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 80082f0:	6d5f      	ldr	r7, [r3, #84]	; 0x54
 80082f2:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 80082f4:	4638      	mov	r0, r7
 80082f6:	4629      	mov	r1, r5
 80082f8:	f7f8 fe8c 	bl	8001014 <__aeabi_fcmpge>
 80082fc:	b1d8      	cbz	r0, 8008336 <spindle_sync+0x7e>
			pwm_value = SPINDLE_PWM_MAX_VALUE;
 80082fe:	2264      	movs	r2, #100	; 0x64
			sys.spindle_speed = settings.rpm_max;
 8008300:	6125      	str	r5, [r4, #16]
		TIM1->CCR1 = pwm_value;
 8008302:	4b30      	ldr	r3, [pc, #192]	; (80083c4 <spindle_sync+0x10c>)
 8008304:	869a      	strh	r2, [r3, #52]	; 0x34
      TIM_CtrlPWMOutputs(TIM1, ENABLE);
 8008306:	2101      	movs	r1, #1
 8008308:	482e      	ldr	r0, [pc, #184]	; (80083c4 <spindle_sync+0x10c>)
 800830a:	f7f9 fbb7 	bl	8001a7c <TIM_CtrlPWMOutputs>
		SetSpindleEnablebit();
 800830e:	2201      	movs	r2, #1
 8008310:	2102      	movs	r1, #2
 8008312:	482a      	ldr	r0, [pc, #168]	; (80083bc <spindle_sync+0x104>)
 8008314:	f7f9 fa36 	bl	8001784 <GPIO_WriteBit>
  sys.report_ovr_counter = 0; // Set to report change immediately
 8008318:	2300      	movs	r3, #0
 800831a:	7323      	strb	r3, [r4, #12]
 800831c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      sys.spindle_speed = 0.0f;
 800831e:	2300      	movs	r3, #0
    TIM_CtrlPWMOutputs(TIM1, DISABLE);
 8008320:	4629      	mov	r1, r5
 8008322:	4828      	ldr	r0, [pc, #160]	; (80083c4 <spindle_sync+0x10c>)
      sys.spindle_speed = 0.0f;
 8008324:	6123      	str	r3, [r4, #16]
    TIM_CtrlPWMOutputs(TIM1, DISABLE);
 8008326:	f7f9 fba9 	bl	8001a7c <TIM_CtrlPWMOutputs>
        ResetSpindleEnablebit();
 800832a:	462a      	mov	r2, r5
 800832c:	2102      	movs	r1, #2
 800832e:	4823      	ldr	r0, [pc, #140]	; (80083bc <spindle_sync+0x104>)
 8008330:	f7f9 fa28 	bl	8001784 <GPIO_WriteBit>
 8008334:	e7f0      	b.n	8008318 <spindle_sync+0x60>
		rpm *= (0.010f*sys.spindle_speed_ovr); // Scale by spindle speed override value.
 8008336:	7aa0      	ldrb	r0, [r4, #10]
 8008338:	f7f8 fc66 	bl	8000c08 <__aeabi_i2f>
 800833c:	4922      	ldr	r1, [pc, #136]	; (80083c8 <spindle_sync+0x110>)
 800833e:	f7f8 fcb7 	bl	8000cb0 <__aeabi_fmul>
 8008342:	4631      	mov	r1, r6
 8008344:	f7f8 fcb4 	bl	8000cb0 <__aeabi_fmul>
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 8008348:	4629      	mov	r1, r5
		rpm *= (0.010f*sys.spindle_speed_ovr); // Scale by spindle speed override value.
 800834a:	4606      	mov	r6, r0
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 800834c:	f7f8 fe62 	bl	8001014 <__aeabi_fcmpge>
 8008350:	2800      	cmp	r0, #0
 8008352:	d1d4      	bne.n	80082fe <spindle_sync+0x46>
		else if (rpm <= settings.rpm_min) {
 8008354:	4639      	mov	r1, r7
 8008356:	4630      	mov	r0, r6
 8008358:	f7f8 fe52 	bl	8001000 <__aeabi_fcmple>
 800835c:	b1a0      	cbz	r0, 8008388 <spindle_sync+0xd0>
			if (rpm == 0.0f) { // S0 disables spindle
 800835e:	2500      	movs	r5, #0
 8008360:	4630      	mov	r0, r6
 8008362:	4629      	mov	r1, r5
 8008364:	f7f8 fe38 	bl	8000fd8 <__aeabi_fcmpeq>
 8008368:	b310      	cbz	r0, 80083b0 <spindle_sync+0xf8>
		TIM1->CCR1 = pwm_value;
 800836a:	2200      	movs	r2, #0
 800836c:	4b15      	ldr	r3, [pc, #84]	; (80083c4 <spindle_sync+0x10c>)
				sys.spindle_speed = 0.0f;
 800836e:	6125      	str	r5, [r4, #16]
		TIM1->CCR1 = pwm_value;
 8008370:	869a      	strh	r2, [r3, #52]	; 0x34
				TIM_CtrlPWMOutputs(TIM1, DISABLE);
 8008372:	2100      	movs	r1, #0
 8008374:	4813      	ldr	r0, [pc, #76]	; (80083c4 <spindle_sync+0x10c>)
 8008376:	f7f9 fb81 	bl	8001a7c <TIM_CtrlPWMOutputs>
 800837a:	e7c8      	b.n	800830e <spindle_sync+0x56>
        ResetSpindleDirectionBit();
 800837c:	2101      	movs	r1, #1
 800837e:	480f      	ldr	r0, [pc, #60]	; (80083bc <spindle_sync+0x104>)
 8008380:	f7f9 fa00 	bl	8001784 <GPIO_WriteBit>
 8008384:	4b0e      	ldr	r3, [pc, #56]	; (80083c0 <spindle_sync+0x108>)
 8008386:	e7b3      	b.n	80082f0 <spindle_sync+0x38>
			pwm_value = (SPINDLE_PWM_TYPE)floorf((rpm - settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
 8008388:	4639      	mov	r1, r7
 800838a:	4630      	mov	r0, r6
			sys.spindle_speed = rpm;
 800838c:	6126      	str	r6, [r4, #16]
			pwm_value = (SPINDLE_PWM_TYPE)floorf((rpm - settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
 800838e:	f7f8 fb85 	bl	8000a9c <__aeabi_fsub>
 8008392:	4b0e      	ldr	r3, [pc, #56]	; (80083cc <spindle_sync+0x114>)
 8008394:	6819      	ldr	r1, [r3, #0]
 8008396:	f7f8 fc8b 	bl	8000cb0 <__aeabi_fmul>
 800839a:	f003 f919 	bl	800b5d0 <floorf>
 800839e:	f7f8 fe89 	bl	80010b4 <__aeabi_f2uiz>
		TIM1->CCR1 = pwm_value;
 80083a2:	4a08      	ldr	r2, [pc, #32]	; (80083c4 <spindle_sync+0x10c>)
			pwm_value = (SPINDLE_PWM_TYPE)floorf((rpm - settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
 80083a4:	1c43      	adds	r3, r0, #1
 80083a6:	b29b      	uxth	r3, r3
		TIM1->CCR1 = pwm_value;
 80083a8:	8693      	strh	r3, [r2, #52]	; 0x34
			if (pwm_value == SPINDLE_PWM_OFF_VALUE) {
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d0e1      	beq.n	8008372 <spindle_sync+0xba>
 80083ae:	e7aa      	b.n	8008306 <spindle_sync+0x4e>
				sys.spindle_speed = settings.rpm_min;
 80083b0:	6127      	str	r7, [r4, #16]
				pwm_value = SPINDLE_PWM_MIN_VALUE;
 80083b2:	2201      	movs	r2, #1
 80083b4:	e7a5      	b.n	8008302 <spindle_sync+0x4a>
 80083b6:	bf00      	nop
 80083b8:	200010c8 	.word	0x200010c8
 80083bc:	40010c00 	.word	0x40010c00
 80083c0:	20001404 	.word	0x20001404
 80083c4:	40012c00 	.word	0x40012c00
 80083c8:	3c23d70a 	.word	0x3c23d70a
 80083cc:	20000a74 	.word	0x20000a74

080083d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80083d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008408 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80083d4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80083d6:	e003      	b.n	80083e0 <LoopCopyDataInit>

080083d8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80083d8:	4b0c      	ldr	r3, [pc, #48]	; (800840c <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 80083da:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80083dc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80083de:	3104      	adds	r1, #4

080083e0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80083e0:	480b      	ldr	r0, [pc, #44]	; (8008410 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 80083e2:	4b0c      	ldr	r3, [pc, #48]	; (8008414 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 80083e4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80083e6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80083e8:	d3f6      	bcc.n	80083d8 <CopyDataInit>
	ldr	r2, =_sbss
 80083ea:	4a0b      	ldr	r2, [pc, #44]	; (8008418 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 80083ec:	e002      	b.n	80083f4 <LoopFillZerobss>

080083ee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80083ee:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80083f0:	f842 3b04 	str.w	r3, [r2], #4

080083f4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80083f4:	4b09      	ldr	r3, [pc, #36]	; (800841c <LoopFillZerobss+0x28>)
	cmp	r2, r3
 80083f6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80083f8:	d3f9      	bcc.n	80083ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80083fa:	f001 fc67 	bl	8009ccc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80083fe:	f002 ffdd 	bl	800b3bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8008402:	f7fb fa77 	bl	80038f4 <main>
	bx	lr
 8008406:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8008408:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 800840c:	0800cd44 	.word	0x0800cd44
	ldr	r0, =_sdata
 8008410:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8008414:	200001f8 	.word	0x200001f8
	ldr	r2, =_sbss
 8008418:	200001f8 	.word	0x200001f8
	ldr	r3, = _ebss
 800841c:	200014f0 	.word	0x200014f0

08008420 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8008420:	e7fe      	b.n	8008420 <ADC1_2_IRQHandler>
	...

08008424 <st_wake_up>:


// Stepper state initialization. Cycle should only start if the st.cycle_start flag is
// enabled. Startup init and limits call this function but shouldn't start the cycle.
void st_wake_up()
{
 8008424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		mc_reset();
		return;
	}
#endif
  // Enable stepper drivers.
  if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE)) 
 8008426:	4d18      	ldr	r5, [pc, #96]	; (8008488 <st_wake_up+0x64>)
  {
	  SetStepperDisableBit();
 8008428:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE)) 
 800842c:	f895 3058 	ldrb.w	r3, [r5, #88]	; 0x58
	  SetStepperDisableBit();
 8008430:	4816      	ldr	r0, [pc, #88]	; (800848c <st_wake_up+0x68>)
  if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE)) 
 8008432:	075b      	lsls	r3, r3, #29
 8008434:	d425      	bmi.n	8008482 <st_wake_up+0x5e>
  }
  else 
  { 
	  ResetStepperDisableBit();
 8008436:	f7f9 f9a3 	bl	8001780 <GPIO_ResetBits>
#ifdef WIN32
  nTimer1Out = 1;
#endif
#if defined (STM32F103C8)
  TIM3->ARR = st.step_pulse_time; // don't subtract 1!
  TIM3->EGR = TIM_PSCReloadMode_Immediate;
 800843a:	2401      	movs	r4, #1
  TIM3->SR = ~TIM_SR_UIF;
 800843c:	f64f 77fe 	movw	r7, #65534	; 0xfffe

  TIM2->ARR = st.exec_segment->cycles_per_tick - 1;
 8008440:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  	st.step_pulse_time = (settings.pulse_microseconds)*TICKS_PER_MICROSECOND;
 8008444:	4b12      	ldr	r3, [pc, #72]	; (8008490 <st_wake_up+0x6c>)
 8008446:	4813      	ldr	r0, [pc, #76]	; (8008494 <st_wake_up+0x70>)
 8008448:	681a      	ldr	r2, [r3, #0]
 800844a:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
 800844e:	fba0 0202 	umull	r0, r2, r0, r2
 8008452:	0c92      	lsrs	r2, r2, #18
 8008454:	fb03 f302 	mul.w	r3, r3, r2
  st.step_outbits = step_port_invert_mask;
 8008458:	480f      	ldr	r0, [pc, #60]	; (8008498 <st_wake_up+0x74>)
  TIM3->ARR = st.step_pulse_time; // don't subtract 1!
 800845a:	4a10      	ldr	r2, [pc, #64]	; (800849c <st_wake_up+0x78>)
  st.step_outbits = step_port_invert_mask;
 800845c:	4d10      	ldr	r5, [pc, #64]	; (80084a0 <st_wake_up+0x7c>)
  TIM2->ARR = st.exec_segment->cycles_per_tick - 1;
 800845e:	6b06      	ldr	r6, [r0, #48]	; 0x30
  	st.step_pulse_time = (settings.pulse_microseconds)*TICKS_PER_MICROSECOND;
 8008460:	b29b      	uxth	r3, r3
  st.step_outbits = step_port_invert_mask;
 8008462:	882d      	ldrh	r5, [r5, #0]
  TIM3->ARR = st.step_pulse_time; // don't subtract 1!
 8008464:	8593      	strh	r3, [r2, #44]	; 0x2c
  TIM3->EGR = TIM_PSCReloadMode_Immediate;
 8008466:	8294      	strh	r4, [r2, #20]
  TIM3->SR = ~TIM_SR_UIF;
 8008468:	8217      	strh	r7, [r2, #16]
  TIM2->ARR = st.exec_segment->cycles_per_tick - 1;
 800846a:	8872      	ldrh	r2, [r6, #2]
  	st.step_pulse_time = (settings.pulse_microseconds)*TICKS_PER_MICROSECOND;
 800846c:	8243      	strh	r3, [r0, #18]
  TIM2->ARR = st.exec_segment->cycles_per_tick - 1;
 800846e:	1e53      	subs	r3, r2, #1
 8008470:	b29b      	uxth	r3, r3
 8008472:	858b      	strh	r3, [r1, #44]	; 0x2c
  /* Set the Autoreload value */
#ifndef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING        
  TIM2->PSC = st.exec_segment->prescaler;
#endif
  TIM2->EGR = TIM_PSCReloadMode_Immediate;
 8008474:	828c      	strh	r4, [r1, #20]
  TIM2->CR1 |= TIM_CR1_CEN;
 8008476:	880b      	ldrh	r3, [r1, #0]
  st.step_outbits = step_port_invert_mask;
 8008478:	8285      	strh	r5, [r0, #20]
  TIM2->CR1 |= TIM_CR1_CEN;
 800847a:	b29b      	uxth	r3, r3
 800847c:	4323      	orrs	r3, r4
 800847e:	800b      	strh	r3, [r1, #0]
 8008480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  SetStepperDisableBit();
 8008482:	f7f9 f97b 	bl	800177c <GPIO_SetBits>
 8008486:	e7d8      	b.n	800843a <st_wake_up+0x16>
 8008488:	20001404 	.word	0x20001404
 800848c:	40010800 	.word	0x40010800
 8008490:	20000018 	.word	0x20000018
 8008494:	431bde83 	.word	0x431bde83
 8008498:	20000b0c 	.word	0x20000b0c
 800849c:	40000400 	.word	0x40000400
 80084a0:	20000c1c 	.word	0x20000c1c

080084a4 <st_go_idle>:
#endif
#ifdef WIN32
  nTimer1Out = 0;
#endif
#ifdef STM32F103C8
  TIM2->CR1 &= ~TIM_CR1_CEN;
 80084a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  TIM2->CNT = 0;
 80084a8:	2100      	movs	r1, #0
{
 80084aa:	b538      	push	{r3, r4, r5, lr}
  TIM2->CR1 &= ~TIM_CR1_CEN;
 80084ac:	8813      	ldrh	r3, [r2, #0]

  busy = false;

  // Set stepper driver idle state, disabled or enabled, depending on settings and circumstances.
  bool pin_state = false; // Keep enabled.
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 80084ae:	4c18      	ldr	r4, [pc, #96]	; (8008510 <st_go_idle+0x6c>)
  TIM2->CR1 &= ~TIM_CR1_CEN;
 80084b0:	f023 0301 	bic.w	r3, r3, #1
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 80084b4:	f894 0046 	ldrb.w	r0, [r4, #70]	; 0x46
  TIM2->CR1 &= ~TIM_CR1_CEN;
 80084b8:	041b      	lsls	r3, r3, #16
  busy = false;
 80084ba:	4d16      	ldr	r5, [pc, #88]	; (8008514 <st_go_idle+0x70>)
  TIM2->CR1 &= ~TIM_CR1_CEN;
 80084bc:	0c1b      	lsrs	r3, r3, #16
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 80084be:	28ff      	cmp	r0, #255	; 0xff
  TIM2->CR1 &= ~TIM_CR1_CEN;
 80084c0:	8013      	strh	r3, [r2, #0]
  TIM2->CNT = 0;
 80084c2:	8491      	strh	r1, [r2, #36]	; 0x24
  busy = false;
 80084c4:	7029      	strb	r1, [r5, #0]
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 80084c6:	d00e      	beq.n	80084e6 <st_go_idle+0x42>
 80084c8:	4b13      	ldr	r3, [pc, #76]	; (8008518 <st_go_idle+0x74>)
 80084ca:	781b      	ldrb	r3, [r3, #0]
 80084cc:	2b04      	cmp	r3, #4
 80084ce:	d112      	bne.n	80084f6 <st_go_idle+0x52>
    // Force stepper dwell to lock axes for a defined amount of time to ensure the axes come to a complete
    // stop and not drift from residual inertial forces at the end of the last movement.
    delay_ms(settings.stepper_idle_lock_time);
    pin_state = true; // Override. Disable steppers.
  }
  if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE)) { pin_state = !pin_state; } // Apply pin invert.
 80084d0:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 80084d4:	075b      	lsls	r3, r3, #29
 80084d6:	d414      	bmi.n	8008502 <st_go_idle+0x5e>
  }
  else 
  { 
	  ResetStepperDisableBit();
  }
}
 80084d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	  ResetStepperDisableBit();
 80084dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80084e0:	480e      	ldr	r0, [pc, #56]	; (800851c <st_go_idle+0x78>)
 80084e2:	f7f9 b94d 	b.w	8001780 <GPIO_ResetBits>
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 80084e6:	4b0e      	ldr	r3, [pc, #56]	; (8008520 <st_go_idle+0x7c>)
 80084e8:	781b      	ldrb	r3, [r3, #0]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d1ec      	bne.n	80084c8 <st_go_idle+0x24>
 80084ee:	4b0a      	ldr	r3, [pc, #40]	; (8008518 <st_go_idle+0x74>)
 80084f0:	781b      	ldrb	r3, [r3, #0]
 80084f2:	2b80      	cmp	r3, #128	; 0x80
 80084f4:	d1ec      	bne.n	80084d0 <st_go_idle+0x2c>
    delay_ms(settings.stepper_idle_lock_time);
 80084f6:	f7fb feab 	bl	8004250 <delay_ms>
  if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE)) { pin_state = !pin_state; } // Apply pin invert.
 80084fa:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 80084fe:	075a      	lsls	r2, r3, #29
 8008500:	d4ea      	bmi.n	80084d8 <st_go_idle+0x34>
	  SetStepperDisableBit();
 8008502:	f44f 4100 	mov.w	r1, #32768	; 0x8000
}
 8008506:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	  SetStepperDisableBit();
 800850a:	4804      	ldr	r0, [pc, #16]	; (800851c <st_go_idle+0x78>)
 800850c:	f7f9 b936 	b.w	800177c <GPIO_SetBits>
 8008510:	20001404 	.word	0x20001404
 8008514:	20000a78 	.word	0x20000a78
 8008518:	200010c8 	.word	0x200010c8
 800851c:	40010800 	.word	0x40010800
 8008520:	20001100 	.word	0x20001100

08008524 <TIM2_IRQHandler>:
ISR(TIMER1_COMPA_vect)
#endif
#ifdef WIN32
void Timer1Proc()
#endif
{
 8008524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifdef STM32F103C8
	if ((TIM2->SR & TIM_SR_UIF) != 0)                  // check interrupt source
 8008526:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800852a:	8a1a      	ldrh	r2, [r3, #16]
 800852c:	07d2      	lsls	r2, r2, #31
 800852e:	f140 808f 	bpl.w	8008650 <TIM2_IRQHandler+0x12c>
	{
		TIM2->SR = ~TIM_SR_UIF; // clear UIF flag
		TIM2->CNT = 0;
 8008532:	2200      	movs	r2, #0
		TIM2->SR = ~TIM_SR_UIF; // clear UIF flag
 8008534:	f64f 71fe 	movw	r1, #65534	; 0xfffe
	{
		return;
	}
#endif

  if (busy) {return; } // The busy-flag is used to avoid reentering this interrupt
 8008538:	4d93      	ldr	r5, [pc, #588]	; (8008788 <TIM2_IRQHandler+0x264>)
		TIM2->SR = ~TIM_SR_UIF; // clear UIF flag
 800853a:	8219      	strh	r1, [r3, #16]
		TIM2->CNT = 0;
 800853c:	849a      	strh	r2, [r3, #36]	; 0x24
  if (busy) {return; } // The busy-flag is used to avoid reentering this interrupt
 800853e:	782a      	ldrb	r2, [r5, #0]
 8008540:	2a00      	cmp	r2, #0
 8008542:	f040 8085 	bne.w	8008650 <TIM2_IRQHandler+0x12c>
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (st.dir_outbits & DIRECTION_MASK);
#endif
#ifdef STM32F103C8
  //GPIO_Write(DIRECTION_PORT, (GPIO_ReadOutputData(DIRECTION_PORT) & ~DIRECTION_MASK) | (st.dir_outbits & DIRECTION_MASK));
  DIRECTION_PORT->ODR = ((DIRECTION_PORT->ODR & ~DIRECTION_MASK) | (st.dir_outbits & DIRECTION_MASK));
  TIM3->SR = ~( TIM_SR_UIF | TIM_SR_CC1IF);
 8008546:	f64f 77fc 	movw	r7, #65532	; 0xfffc
  nTimer0Out = st.step_pulse_time;
#endif
#ifdef STM32F103C8
  TIM3->CR1 |= TIM_CR1_CEN;
#endif
  busy = true;
 800854a:	2001      	movs	r0, #1
  DIRECTION_PORT->ODR = ((DIRECTION_PORT->ODR & ~DIRECTION_MASK) | (st.dir_outbits & DIRECTION_MASK));
 800854c:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8008550:	4c8e      	ldr	r4, [pc, #568]	; (800878c <TIM2_IRQHandler+0x268>)
 8008552:	f601 0102 	addw	r1, r1, #2050	; 0x802
 8008556:	68ce      	ldr	r6, [r1, #12]
 8008558:	8ae2      	ldrh	r2, [r4, #22]
 800855a:	f026 06f0 	bic.w	r6, r6, #240	; 0xf0
 800855e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8008562:	4332      	orrs	r2, r6
  TIM3->SR = ~( TIM_SR_UIF | TIM_SR_CC1IF);
 8008564:	4e8a      	ldr	r6, [pc, #552]	; (8008790 <TIM2_IRQHandler+0x26c>)
  DIRECTION_PORT->ODR = ((DIRECTION_PORT->ODR & ~DIRECTION_MASK) | (st.dir_outbits & DIRECTION_MASK));
 8008566:	60ca      	str	r2, [r1, #12]
  TIM3->SR = ~( TIM_SR_UIF | TIM_SR_CC1IF);
 8008568:	8237      	strh	r7, [r6, #16]
      STEP_PORT->ODR = ((STEP_PORT->ODR & ~STEP_MASK) | st.step_outbits);
 800856a:	68ca      	ldr	r2, [r1, #12]
 800856c:	8aa7      	ldrh	r7, [r4, #20]
 800856e:	f022 020f 	bic.w	r2, r2, #15
 8008572:	433a      	orrs	r2, r7
 8008574:	60ca      	str	r2, [r1, #12]
  TIM3->CR1 |= TIM_CR1_CEN;
 8008576:	8832      	ldrh	r2, [r6, #0]
  sei(); // Re-enable interrupts to allow Stepper Port Reset Interrupt to fire on-time.
         // NOTE: The remaining code in this ISR will finish before returning to main program.
#endif

  // If there is no step segment, attempt to pop one from the stepper buffer
  if (st.exec_segment == NULL) {
 8008578:	6b21      	ldr	r1, [r4, #48]	; 0x30
  TIM3->CR1 |= TIM_CR1_CEN;
 800857a:	b292      	uxth	r2, r2
 800857c:	4302      	orrs	r2, r0
 800857e:	8032      	strh	r2, [r6, #0]
  busy = true;
 8008580:	7028      	strb	r0, [r5, #0]
  if (st.exec_segment == NULL) {
 8008582:	2900      	cmp	r1, #0
 8008584:	d07f      	beq.n	8008686 <TIM2_IRQHandler+0x162>
    }
  }


  // Check probing state.
  if (sys_probe_state == PROBE_ACTIVE) { probe_state_monitor(); }
 8008586:	4b83      	ldr	r3, [pc, #524]	; (8008794 <TIM2_IRQHandler+0x270>)
 8008588:	781b      	ldrb	r3, [r3, #0]
 800858a:	2b01      	cmp	r3, #1
 800858c:	f000 80bd 	beq.w	800870a <TIM2_IRQHandler+0x1e6>

  // Reset step out bits.
  st.step_outbits = 0;
 8008590:	2300      	movs	r3, #0
  #ifdef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
    st.counter_x += st.steps[X_AXIS];
  #else
    st.counter_x += st.exec_block->steps[X_AXIS];
  #endif
  if (st.counter_x > st.exec_block->step_event_count) {
 8008592:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    st.counter_x += st.steps[X_AXIS];
 8008594:	6821      	ldr	r1, [r4, #0]
 8008596:	69a6      	ldr	r6, [r4, #24]
  if (st.counter_x > st.exec_block->step_event_count) {
 8008598:	6902      	ldr	r2, [r0, #16]
    st.counter_x += st.steps[X_AXIS];
 800859a:	4431      	add	r1, r6
  if (st.counter_x > st.exec_block->step_event_count) {
 800859c:	4291      	cmp	r1, r2
    st.counter_x += st.steps[X_AXIS];
 800859e:	6021      	str	r1, [r4, #0]
  st.step_outbits = 0;
 80085a0:	82a3      	strh	r3, [r4, #20]
  if (st.counter_x > st.exec_block->step_event_count) {
 80085a2:	d856      	bhi.n	8008652 <TIM2_IRQHandler+0x12e>
 80085a4:	2602      	movs	r6, #2
    st.counter_x -= st.exec_block->step_event_count;
    if (st.exec_block->direction_bits & (1<<X_DIRECTION_BIT)) { sys_position[X_AXIS]--; }
    else { sys_position[X_AXIS]++; }
  }
  #ifdef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
    st.counter_y += st.steps[Y_AXIS];
 80085a6:	6861      	ldr	r1, [r4, #4]
 80085a8:	69e7      	ldr	r7, [r4, #28]
 80085aa:	4439      	add	r1, r7
  #else
    st.counter_y += st.exec_block->steps[Y_AXIS];
  #endif
  if (st.counter_y > st.exec_block->step_event_count) {
 80085ac:	428a      	cmp	r2, r1
    st.counter_y += st.steps[Y_AXIS];
 80085ae:	6061      	str	r1, [r4, #4]
  if (st.counter_y > st.exec_block->step_event_count) {
 80085b0:	d20a      	bcs.n	80085c8 <TIM2_IRQHandler+0xa4>
    st.step_outbits |= (1<<Y_STEP_BIT);
    st.counter_y -= st.exec_block->step_event_count;
    if (st.exec_block->direction_bits & (1<<Y_DIRECTION_BIT)) { sys_position[Y_AXIS]--; }
 80085b2:	8a83      	ldrh	r3, [r0, #20]
    st.counter_y -= st.exec_block->step_event_count;
 80085b4:	1a89      	subs	r1, r1, r2
    if (st.exec_block->direction_bits & (1<<Y_DIRECTION_BIT)) { sys_position[Y_AXIS]--; }
 80085b6:	069f      	lsls	r7, r3, #26
    st.counter_y -= st.exec_block->step_event_count;
 80085b8:	6061      	str	r1, [r4, #4]
    st.step_outbits |= (1<<Y_STEP_BIT);
 80085ba:	82a6      	strh	r6, [r4, #20]
    if (st.exec_block->direction_bits & (1<<Y_DIRECTION_BIT)) { sys_position[Y_AXIS]--; }
 80085bc:	d55d      	bpl.n	800867a <TIM2_IRQHandler+0x156>
 80085be:	4633      	mov	r3, r6
 80085c0:	4f75      	ldr	r7, [pc, #468]	; (8008798 <TIM2_IRQHandler+0x274>)
 80085c2:	6879      	ldr	r1, [r7, #4]
 80085c4:	3901      	subs	r1, #1
 80085c6:	6079      	str	r1, [r7, #4]
    else { sys_position[Y_AXIS]++; }
  }
  #ifdef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
    st.counter_z += st.steps[Z_AXIS];
 80085c8:	68a1      	ldr	r1, [r4, #8]
 80085ca:	6a26      	ldr	r6, [r4, #32]
 80085cc:	4431      	add	r1, r6
  #else
    st.counter_z += st.exec_block->steps[Z_AXIS];
  #endif
  if (st.counter_z > st.exec_block->step_event_count) {
 80085ce:	428a      	cmp	r2, r1
    st.counter_z += st.steps[Z_AXIS];
 80085d0:	60a1      	str	r1, [r4, #8]
  if (st.counter_z > st.exec_block->step_event_count) {
 80085d2:	d20f      	bcs.n	80085f4 <TIM2_IRQHandler+0xd0>
    st.step_outbits |= (1<<Z_STEP_BIT);
    st.counter_z -= st.exec_block->step_event_count;
    if (st.exec_block->direction_bits & (1<<Z_DIRECTION_BIT)) { sys_position[Z_AXIS]--; }
 80085d4:	8a86      	ldrh	r6, [r0, #20]
    st.counter_z -= st.exec_block->step_event_count;
 80085d6:	1a89      	subs	r1, r1, r2
    if (st.exec_block->direction_bits & (1<<Z_DIRECTION_BIT)) { sys_position[Z_AXIS]--; }
 80085d8:	f016 0f40 	tst.w	r6, #64	; 0x40
 80085dc:	4e6e      	ldr	r6, [pc, #440]	; (8008798 <TIM2_IRQHandler+0x274>)
    st.counter_z -= st.exec_block->step_event_count;
 80085de:	60a1      	str	r1, [r4, #8]
    if (st.exec_block->direction_bits & (1<<Z_DIRECTION_BIT)) { sys_position[Z_AXIS]--; }
 80085e0:	68b1      	ldr	r1, [r6, #8]
    st.step_outbits |= (1<<Z_STEP_BIT);
 80085e2:	f043 0304 	orr.w	r3, r3, #4
 80085e6:	b29b      	uxth	r3, r3
    if (st.exec_block->direction_bits & (1<<Z_DIRECTION_BIT)) { sys_position[Z_AXIS]--; }
 80085e8:	bf14      	ite	ne
 80085ea:	f101 31ff 	addne.w	r1, r1, #4294967295
    else { sys_position[Z_AXIS]++; }
 80085ee:	3101      	addeq	r1, #1
    st.step_outbits |= (1<<Z_STEP_BIT);
 80085f0:	82a3      	strh	r3, [r4, #20]
    else { sys_position[Z_AXIS]++; }
 80085f2:	60b1      	str	r1, [r6, #8]
  }
// --- YSV 22-06-2018
  #if defined(AA_AXIS) || defined(AB_AXIS) || defined(ABC_AXIS)
  #ifdef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
    st.counter_a += st.steps[A_AXIS];
 80085f4:	68e1      	ldr	r1, [r4, #12]
 80085f6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80085f8:	4431      	add	r1, r6
  #else
    st.counter_a += st.exec_block->steps[A_AXIS];
  #endif
  if (st.counter_a > st.exec_block->step_event_count) {
 80085fa:	428a      	cmp	r2, r1
    st.counter_a += st.steps[A_AXIS];
 80085fc:	60e1      	str	r1, [r4, #12]
  if (st.counter_a > st.exec_block->step_event_count) {
 80085fe:	d20e      	bcs.n	800861e <TIM2_IRQHandler+0xfa>
    st.step_outbits |= (1<<A_STEP_BIT);
    st.counter_a -= st.exec_block->step_event_count;
 8008600:	1a8a      	subs	r2, r1, r2
    if (st.exec_block->direction_bits & (1<<A_DIRECTION_BIT)) { sys_position[A_AXIS]--; }
 8008602:	4965      	ldr	r1, [pc, #404]	; (8008798 <TIM2_IRQHandler+0x274>)
 8008604:	8a80      	ldrh	r0, [r0, #20]
    st.counter_a -= st.exec_block->step_event_count;
 8008606:	60e2      	str	r2, [r4, #12]
    if (st.exec_block->direction_bits & (1<<A_DIRECTION_BIT)) { sys_position[A_AXIS]--; }
 8008608:	68ca      	ldr	r2, [r1, #12]
 800860a:	0600      	lsls	r0, r0, #24
    st.step_outbits |= (1<<A_STEP_BIT);
 800860c:	f043 0308 	orr.w	r3, r3, #8
 8008610:	b29b      	uxth	r3, r3
    if (st.exec_block->direction_bits & (1<<A_DIRECTION_BIT)) { sys_position[A_AXIS]--; }
 8008612:	bf4c      	ite	mi
 8008614:	f102 32ff 	addmi.w	r2, r2, #4294967295
    else { sys_position[A_AXIS]++; }
 8008618:	3201      	addpl	r2, #1
    st.step_outbits |= (1<<A_STEP_BIT);
 800861a:	82a3      	strh	r3, [r4, #20]
    else { sys_position[A_AXIS]++; }
 800861c:	60ca      	str	r2, [r1, #12]
    else { sys_position[C_AXIS]++; }
  }
  #endif
// ---
  // During a homing cycle, lock out and prevent desired axes from moving.
  if (sys.state == STATE_HOMING) { st.step_outbits &= sys.homing_axis_lock; }
 800861e:	4a5f      	ldr	r2, [pc, #380]	; (800879c <TIM2_IRQHandler+0x278>)
 8008620:	7811      	ldrb	r1, [r2, #0]
 8008622:	2904      	cmp	r1, #4
 8008624:	d025      	beq.n	8008672 <TIM2_IRQHandler+0x14e>

  st.step_count--; // Decrement step events count
 8008626:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8008628:	3a01      	subs	r2, #1
 800862a:	b292      	uxth	r2, r2
 800862c:	8522      	strh	r2, [r4, #40]	; 0x28
  if (st.step_count == 0) {
 800862e:	b942      	cbnz	r2, 8008642 <TIM2_IRQHandler+0x11e>
    // Segment is complete. Discard current segment and advance segment indexing.
    st.exec_segment = NULL;
#ifndef WIN32
	uint8_t segment_tail_next = segment_buffer_tail + 1;
 8008630:	495b      	ldr	r1, [pc, #364]	; (80087a0 <TIM2_IRQHandler+0x27c>)
    st.exec_segment = NULL;
 8008632:	6322      	str	r2, [r4, #48]	; 0x30
	uint8_t segment_tail_next = segment_buffer_tail + 1;
 8008634:	780a      	ldrb	r2, [r1, #0]
 8008636:	3201      	adds	r2, #1
 8008638:	b2d2      	uxtb	r2, r2
	if (segment_tail_next == SEGMENT_BUFFER_SIZE)
		segment_tail_next = 0;
 800863a:	2a0a      	cmp	r2, #10
 800863c:	bf08      	it	eq
 800863e:	2200      	moveq	r2, #0
	segment_buffer_tail = segment_tail_next;
 8008640:	700a      	strb	r2, [r1, #0]
	}
#endif
  }

  st.step_outbits ^= step_port_invert_mask;  // Apply step port invert mask
  busy = false;
 8008642:	2100      	movs	r1, #0
  st.step_outbits ^= step_port_invert_mask;  // Apply step port invert mask
 8008644:	4a57      	ldr	r2, [pc, #348]	; (80087a4 <TIM2_IRQHandler+0x280>)
  busy = false;
 8008646:	7029      	strb	r1, [r5, #0]
  st.step_outbits ^= step_port_invert_mask;  // Apply step port invert mask
 8008648:	8812      	ldrh	r2, [r2, #0]
 800864a:	4053      	eors	r3, r2
 800864c:	82a3      	strh	r3, [r4, #20]
 800864e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    st.step_outbits |= (1<<X_STEP_BIT);
 8008652:	2301      	movs	r3, #1
    if (st.exec_block->direction_bits & (1<<X_DIRECTION_BIT)) { sys_position[X_AXIS]--; }
 8008654:	4f50      	ldr	r7, [pc, #320]	; (8008798 <TIM2_IRQHandler+0x274>)
 8008656:	8a86      	ldrh	r6, [r0, #20]
    st.counter_x -= st.exec_block->step_event_count;
 8008658:	1a89      	subs	r1, r1, r2
 800865a:	6021      	str	r1, [r4, #0]
    if (st.exec_block->direction_bits & (1<<X_DIRECTION_BIT)) { sys_position[X_AXIS]--; }
 800865c:	6839      	ldr	r1, [r7, #0]
 800865e:	f016 0f10 	tst.w	r6, #16
 8008662:	bf14      	ite	ne
 8008664:	f101 31ff 	addne.w	r1, r1, #4294967295
    else { sys_position[X_AXIS]++; }
 8008668:	3101      	addeq	r1, #1
    st.step_outbits |= (1<<X_STEP_BIT);
 800866a:	82a3      	strh	r3, [r4, #20]
 800866c:	2603      	movs	r6, #3
    else { sys_position[X_AXIS]++; }
 800866e:	6039      	str	r1, [r7, #0]
 8008670:	e799      	b.n	80085a6 <TIM2_IRQHandler+0x82>
  if (sys.state == STATE_HOMING) { st.step_outbits &= sys.homing_axis_lock; }
 8008672:	88d2      	ldrh	r2, [r2, #6]
 8008674:	4013      	ands	r3, r2
 8008676:	82a3      	strh	r3, [r4, #20]
 8008678:	e7d5      	b.n	8008626 <TIM2_IRQHandler+0x102>
    else { sys_position[Y_AXIS]++; }
 800867a:	4633      	mov	r3, r6
 800867c:	4e46      	ldr	r6, [pc, #280]	; (8008798 <TIM2_IRQHandler+0x274>)
 800867e:	6871      	ldr	r1, [r6, #4]
 8008680:	3101      	adds	r1, #1
 8008682:	6071      	str	r1, [r6, #4]
 8008684:	e7a0      	b.n	80085c8 <TIM2_IRQHandler+0xa4>
    if (segment_buffer_head != segment_buffer_tail) {
 8008686:	4a46      	ldr	r2, [pc, #280]	; (80087a0 <TIM2_IRQHandler+0x27c>)
 8008688:	4e47      	ldr	r6, [pc, #284]	; (80087a8 <TIM2_IRQHandler+0x284>)
 800868a:	7810      	ldrb	r0, [r2, #0]
 800868c:	7836      	ldrb	r6, [r6, #0]
 800868e:	4286      	cmp	r6, r0
 8008690:	d03e      	beq.n	8008710 <TIM2_IRQHandler+0x1ec>
      st.exec_segment = &segment_buffer[segment_buffer_tail];
 8008692:	7810      	ldrb	r0, [r2, #0]
 8008694:	4a45      	ldr	r2, [pc, #276]	; (80087ac <TIM2_IRQHandler+0x288>)
 8008696:	b2c0      	uxtb	r0, r0
 8008698:	00c7      	lsls	r7, r0, #3
 800869a:	19d6      	adds	r6, r2, r7
	  TIM2->ARR = st.exec_segment->cycles_per_tick - 1;
 800869c:	8871      	ldrh	r1, [r6, #2]
      st.exec_segment = &segment_buffer[segment_buffer_tail];
 800869e:	6326      	str	r6, [r4, #48]	; 0x30
	  TIM2->ARR = st.exec_segment->cycles_per_tick - 1;
 80086a0:	3901      	subs	r1, #1
 80086a2:	b289      	uxth	r1, r1
 80086a4:	8599      	strh	r1, [r3, #44]	; 0x2c
      st.step_count = st.exec_segment->n_step; // NOTE: Can sometimes be zero when moving slow.
 80086a6:	f832 1030 	ldrh.w	r1, [r2, r0, lsl #3]
      if ( st.exec_block_index != st.exec_segment->st_block_index ) {
 80086aa:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 80086ae:	7930      	ldrb	r0, [r6, #4]
      st.step_count = st.exec_segment->n_step; // NOTE: Can sometimes be zero when moving slow.
 80086b0:	8521      	strh	r1, [r4, #40]	; 0x28
      if ( st.exec_block_index != st.exec_segment->st_block_index ) {
 80086b2:	4283      	cmp	r3, r0
 80086b4:	d053      	beq.n	800875e <TIM2_IRQHandler+0x23a>
        st.exec_block = &st_block_buffer[st.exec_block_index];
 80086b6:	4b3e      	ldr	r3, [pc, #248]	; (80087b0 <TIM2_IRQHandler+0x28c>)
 80086b8:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 80086bc:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
        st.counter_x = st.counter_y = st.counter_z = st.counter_a = (st.exec_block->step_event_count >> 1);
 80086c0:	6919      	ldr	r1, [r3, #16]
        st.exec_block_index = st.exec_segment->st_block_index;
 80086c2:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
        st.counter_x = st.counter_y = st.counter_z = st.counter_a = (st.exec_block->step_event_count >> 1);
 80086c6:	0849      	lsrs	r1, r1, #1
        st.exec_block = &st_block_buffer[st.exec_block_index];
 80086c8:	62e3      	str	r3, [r4, #44]	; 0x2c
        st.counter_x = st.counter_y = st.counter_z = st.counter_a = (st.exec_block->step_event_count >> 1);
 80086ca:	60e1      	str	r1, [r4, #12]
 80086cc:	60a1      	str	r1, [r4, #8]
 80086ce:	6061      	str	r1, [r4, #4]
 80086d0:	6021      	str	r1, [r4, #0]
      st.dir_outbits = st.exec_block->direction_bits ^ dir_port_invert_mask;
 80086d2:	4838      	ldr	r0, [pc, #224]	; (80087b4 <TIM2_IRQHandler+0x290>)
        st.steps[X_AXIS] = st.exec_block->steps[X_AXIS] >> st.exec_segment->amass_level;
 80086d4:	443a      	add	r2, r7
 80086d6:	7951      	ldrb	r1, [r2, #5]
      st.dir_outbits = st.exec_block->direction_bits ^ dir_port_invert_mask;
 80086d8:	f8b0 c000 	ldrh.w	ip, [r0]
        spindle_set_speed(st.exec_segment->spindle_pwm);
 80086dc:	7990      	ldrb	r0, [r2, #6]
        st.steps[X_AXIS] = st.exec_block->steps[X_AXIS] >> st.exec_segment->amass_level;
 80086de:	681a      	ldr	r2, [r3, #0]
      st.dir_outbits = st.exec_block->direction_bits ^ dir_port_invert_mask;
 80086e0:	8a9f      	ldrh	r7, [r3, #20]
        st.steps[Y_AXIS] = st.exec_block->steps[Y_AXIS] >> st.exec_segment->amass_level;
 80086e2:	685e      	ldr	r6, [r3, #4]
        st.steps[X_AXIS] = st.exec_block->steps[X_AXIS] >> st.exec_segment->amass_level;
 80086e4:	fa22 fe01 	lsr.w	lr, r2, r1
        st.steps[Z_AXIS] = st.exec_block->steps[Z_AXIS] >> st.exec_segment->amass_level;
 80086e8:	689a      	ldr	r2, [r3, #8]
		st.steps[A_AXIS] = st.exec_block->steps[A_AXIS] >> st.exec_segment->amass_level;
 80086ea:	68db      	ldr	r3, [r3, #12]
        st.steps[Y_AXIS] = st.exec_block->steps[Y_AXIS] >> st.exec_segment->amass_level;
 80086ec:	40ce      	lsrs	r6, r1
        st.steps[Z_AXIS] = st.exec_block->steps[Z_AXIS] >> st.exec_segment->amass_level;
 80086ee:	40ca      	lsrs	r2, r1
      st.dir_outbits = st.exec_block->direction_bits ^ dir_port_invert_mask;
 80086f0:	ea87 070c 	eor.w	r7, r7, ip
		st.steps[A_AXIS] = st.exec_block->steps[A_AXIS] >> st.exec_segment->amass_level;
 80086f4:	fa23 f101 	lsr.w	r1, r3, r1
        st.steps[X_AXIS] = st.exec_block->steps[X_AXIS] >> st.exec_segment->amass_level;
 80086f8:	f8c4 e018 	str.w	lr, [r4, #24]
      st.dir_outbits = st.exec_block->direction_bits ^ dir_port_invert_mask;
 80086fc:	82e7      	strh	r7, [r4, #22]
        st.steps[Y_AXIS] = st.exec_block->steps[Y_AXIS] >> st.exec_segment->amass_level;
 80086fe:	61e6      	str	r6, [r4, #28]
        st.steps[Z_AXIS] = st.exec_block->steps[Z_AXIS] >> st.exec_segment->amass_level;
 8008700:	6222      	str	r2, [r4, #32]
		st.steps[A_AXIS] = st.exec_block->steps[A_AXIS] >> st.exec_segment->amass_level;
 8008702:	6261      	str	r1, [r4, #36]	; 0x24
        spindle_set_speed(st.exec_segment->spindle_pwm);
 8008704:	f7ff fcfe 	bl	8008104 <spindle_set_speed>
 8008708:	e73d      	b.n	8008586 <TIM2_IRQHandler+0x62>
  if (sys_probe_state == PROBE_ACTIVE) { probe_state_monitor(); }
 800870a:	f7fc fdd3 	bl	80052b4 <probe_state_monitor>
 800870e:	e73f      	b.n	8008590 <TIM2_IRQHandler+0x6c>
  TIM2->CR1 &= ~TIM_CR1_CEN;
 8008710:	881a      	ldrh	r2, [r3, #0]
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 8008712:	4e29      	ldr	r6, [pc, #164]	; (80087b8 <TIM2_IRQHandler+0x294>)
  TIM2->CR1 &= ~TIM_CR1_CEN;
 8008714:	f022 0201 	bic.w	r2, r2, #1
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 8008718:	f896 0046 	ldrb.w	r0, [r6, #70]	; 0x46
  TIM2->CR1 &= ~TIM_CR1_CEN;
 800871c:	0412      	lsls	r2, r2, #16
 800871e:	0c12      	lsrs	r2, r2, #16
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 8008720:	28ff      	cmp	r0, #255	; 0xff
  TIM2->CR1 &= ~TIM_CR1_CEN;
 8008722:	801a      	strh	r2, [r3, #0]
  TIM2->CNT = 0;
 8008724:	8499      	strh	r1, [r3, #36]	; 0x24
  busy = false;
 8008726:	7029      	strb	r1, [r5, #0]
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 8008728:	d01b      	beq.n	8008762 <TIM2_IRQHandler+0x23e>
 800872a:	4b1c      	ldr	r3, [pc, #112]	; (800879c <TIM2_IRQHandler+0x278>)
 800872c:	781b      	ldrb	r3, [r3, #0]
 800872e:	2b04      	cmp	r3, #4
 8008730:	d01f      	beq.n	8008772 <TIM2_IRQHandler+0x24e>
    delay_ms(settings.stepper_idle_lock_time);
 8008732:	f7fb fd8d 	bl	8004250 <delay_ms>
  if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE)) { pin_state = !pin_state; } // Apply pin invert.
 8008736:	f896 3058 	ldrb.w	r3, [r6, #88]	; 0x58
 800873a:	075b      	lsls	r3, r3, #29
 800873c:	d51d      	bpl.n	800877a <TIM2_IRQHandler+0x256>
	  ResetStepperDisableBit();
 800873e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008742:	481e      	ldr	r0, [pc, #120]	; (80087bc <TIM2_IRQHandler+0x298>)
 8008744:	f7f9 f81c 	bl	8001780 <GPIO_ResetBits>
      if (st.exec_block->is_pwm_rate_adjusted) { spindle_set_speed(SPINDLE_PWM_OFF_VALUE); }
 8008748:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800874a:	7d9b      	ldrb	r3, [r3, #22]
 800874c:	b113      	cbz	r3, 8008754 <TIM2_IRQHandler+0x230>
 800874e:	2000      	movs	r0, #0
 8008750:	f7ff fcd8 	bl	8008104 <spindle_set_speed>
}
 8008754:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      system_set_exec_state_flag(EXEC_CYCLE_STOP); // Flag main program for cycle end
 8008758:	2004      	movs	r0, #4
 800875a:	f001 ba6f 	b.w	8009c3c <system_set_exec_state_flag>
 800875e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008760:	e7b7      	b.n	80086d2 <TIM2_IRQHandler+0x1ae>
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 8008762:	4b17      	ldr	r3, [pc, #92]	; (80087c0 <TIM2_IRQHandler+0x29c>)
 8008764:	781b      	ldrb	r3, [r3, #0]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d1df      	bne.n	800872a <TIM2_IRQHandler+0x206>
 800876a:	4b0c      	ldr	r3, [pc, #48]	; (800879c <TIM2_IRQHandler+0x278>)
 800876c:	781b      	ldrb	r3, [r3, #0]
 800876e:	2b80      	cmp	r3, #128	; 0x80
 8008770:	d0df      	beq.n	8008732 <TIM2_IRQHandler+0x20e>
  if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE)) { pin_state = !pin_state; } // Apply pin invert.
 8008772:	f896 3058 	ldrb.w	r3, [r6, #88]	; 0x58
 8008776:	075b      	lsls	r3, r3, #29
 8008778:	d5e1      	bpl.n	800873e <TIM2_IRQHandler+0x21a>
	  SetStepperDisableBit();
 800877a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800877e:	480f      	ldr	r0, [pc, #60]	; (80087bc <TIM2_IRQHandler+0x298>)
 8008780:	f7f8 fffc 	bl	800177c <GPIO_SetBits>
 8008784:	e7e0      	b.n	8008748 <TIM2_IRQHandler+0x224>
 8008786:	bf00      	nop
 8008788:	20000a78 	.word	0x20000a78
 800878c:	20000b0c 	.word	0x20000b0c
 8008790:	40000400 	.word	0x40000400
 8008794:	200010de 	.word	0x200010de
 8008798:	200010f0 	.word	0x200010f0
 800879c:	200010c8 	.word	0x200010c8
 80087a0:	20000b09 	.word	0x20000b09
 80087a4:	20000c1c 	.word	0x20000c1c
 80087a8:	20000b08 	.word	0x20000b08
 80087ac:	20000ab8 	.word	0x20000ab8
 80087b0:	20000b40 	.word	0x20000b40
 80087b4:	20000a7a 	.word	0x20000a7a
 80087b8:	20001404 	.word	0x20001404
 80087bc:	40010800 	.word	0x40010800
 80087c0:	20001100 	.word	0x20001100

080087c4 <TIM3_IRQHandler>:
ISR(TIMER0_OVF_vect)
#endif
#ifdef WIN32
void Timer0Proc()
#endif
{
 80087c4:	b410      	push	{r4}
#endif
	{
		STEP_PORT->ODR = ((STEP_PORT->ODR & ~STEP_MASK) | (step_port_invert_mask & STEP_MASK));
		TIM3->CR1 &= ~TIM_CR1_CEN;
		TIM3->SR = ~(TIM_SR_UIF | TIM_SR_CC1IF); // clear UIF flag
		TIM3->CNT = 0;
 80087c6:	2000      	movs	r0, #0
		TIM3->SR = ~(TIM_SR_UIF | TIM_SR_CC1IF); // clear UIF flag
 80087c8:	f64f 74fc 	movw	r4, #65532	; 0xfffc
		STEP_PORT->ODR = ((STEP_PORT->ODR & ~STEP_MASK) | (step_port_invert_mask & STEP_MASK));
 80087cc:	490a      	ldr	r1, [pc, #40]	; (80087f8 <TIM3_IRQHandler+0x34>)
 80087ce:	4b0b      	ldr	r3, [pc, #44]	; (80087fc <TIM3_IRQHandler+0x38>)
 80087d0:	68ca      	ldr	r2, [r1, #12]
 80087d2:	881b      	ldrh	r3, [r3, #0]
 80087d4:	f022 020f 	bic.w	r2, r2, #15
 80087d8:	f003 030f 	and.w	r3, r3, #15
 80087dc:	4313      	orrs	r3, r2
		TIM3->CR1 &= ~TIM_CR1_CEN;
 80087de:	4a08      	ldr	r2, [pc, #32]	; (8008800 <TIM3_IRQHandler+0x3c>)
		STEP_PORT->ODR = ((STEP_PORT->ODR & ~STEP_MASK) | (step_port_invert_mask & STEP_MASK));
 80087e0:	60cb      	str	r3, [r1, #12]
		TIM3->CR1 &= ~TIM_CR1_CEN;
 80087e2:	8813      	ldrh	r3, [r2, #0]
 80087e4:	f023 0301 	bic.w	r3, r3, #1
 80087e8:	041b      	lsls	r3, r3, #16
 80087ea:	0c1b      	lsrs	r3, r3, #16
 80087ec:	8013      	strh	r3, [r2, #0]
		TIM3->SR = ~(TIM_SR_UIF | TIM_SR_CC1IF); // clear UIF flag
 80087ee:	8214      	strh	r4, [r2, #16]
		TIM3->CNT = 0;
 80087f0:	8490      	strh	r0, [r2, #36]	; 0x24
  TCCR0B = 0; // Disable Timer0 to prevent re-entering this interrupt when it's not needed.
#endif
#ifdef WIN32
  nTimer0Out = 0;
#endif
}
 80087f2:	bc10      	pop	{r4}
 80087f4:	4770      	bx	lr
 80087f6:	bf00      	nop
 80087f8:	40010800 	.word	0x40010800
 80087fc:	20000c1c 	.word	0x20000c1c
 8008800:	40000400 	.word	0x40000400

08008804 <st_generate_step_dir_invert_masks>:



// Generates the step and direction port invert masks used in the Stepper Interrupt Driver.
void st_generate_step_dir_invert_masks()
{
 8008804:	4b16      	ldr	r3, [pc, #88]	; (8008860 <st_generate_step_dir_invert_masks+0x5c>)
 8008806:	f8b3 1044 	ldrh.w	r1, [r3, #68]	; 0x44
 800880a:	f8b3 0042 	ldrh.w	r0, [r3, #66]	; 0x42
  uint8_t idx;
  step_port_invert_mask = 0;
  dir_port_invert_mask = 0;
  for (idx=0; idx<N_AXIS; idx++) {
    if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 800880e:	f011 0f01 	tst.w	r1, #1
 8008812:	bf14      	ite	ne
 8008814:	2310      	movne	r3, #16
 8008816:	2300      	moveq	r3, #0
    if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 8008818:	f000 0201 	and.w	r2, r0, #1
 800881c:	f010 0f02 	tst.w	r0, #2
 8008820:	bf18      	it	ne
 8008822:	f042 0202 	orrne.w	r2, r2, #2
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 8008826:	f011 0f02 	tst.w	r1, #2
 800882a:	bf18      	it	ne
 800882c:	f043 0320 	orrne.w	r3, r3, #32
    if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 8008830:	f010 0f04 	tst.w	r0, #4
 8008834:	bf18      	it	ne
 8008836:	f042 0204 	orrne.w	r2, r2, #4
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 800883a:	f011 0f04 	tst.w	r1, #4
 800883e:	bf18      	it	ne
 8008840:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
    if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 8008844:	0700      	lsls	r0, r0, #28
 8008846:	bf48      	it	mi
 8008848:	f042 0208 	orrmi.w	r2, r2, #8
 800884c:	4805      	ldr	r0, [pc, #20]	; (8008864 <st_generate_step_dir_invert_masks+0x60>)
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 800884e:	0709      	lsls	r1, r1, #28
 8008850:	4905      	ldr	r1, [pc, #20]	; (8008868 <st_generate_step_dir_invert_masks+0x64>)
 8008852:	bf48      	it	mi
 8008854:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 8008858:	8002      	strh	r2, [r0, #0]
 800885a:	800b      	strh	r3, [r1, #0]
 800885c:	4770      	bx	lr
 800885e:	bf00      	nop
 8008860:	20001404 	.word	0x20001404
 8008864:	20000c1c 	.word	0x20000c1c
 8008868:	20000a7a 	.word	0x20000a7a

0800886c <st_reset>:
  TIM2->CR1 &= ~TIM_CR1_CEN;
 800886c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  TIM2->CNT = 0;
 8008870:	2100      	movs	r1, #0
}


// Reset and clear stepper subsystem variables
void st_reset()
{
 8008872:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  TIM2->CR1 &= ~TIM_CR1_CEN;
 8008874:	8813      	ldrh	r3, [r2, #0]
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 8008876:	4c41      	ldr	r4, [pc, #260]	; (800897c <st_reset+0x110>)
  TIM2->CR1 &= ~TIM_CR1_CEN;
 8008878:	f023 0301 	bic.w	r3, r3, #1
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 800887c:	f894 0046 	ldrb.w	r0, [r4, #70]	; 0x46
  TIM2->CR1 &= ~TIM_CR1_CEN;
 8008880:	041b      	lsls	r3, r3, #16
  busy = false;
 8008882:	4d3f      	ldr	r5, [pc, #252]	; (8008980 <st_reset+0x114>)
  TIM2->CR1 &= ~TIM_CR1_CEN;
 8008884:	0c1b      	lsrs	r3, r3, #16
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 8008886:	28ff      	cmp	r0, #255	; 0xff
  TIM2->CR1 &= ~TIM_CR1_CEN;
 8008888:	8013      	strh	r3, [r2, #0]
  TIM2->CNT = 0;
 800888a:	8491      	strh	r1, [r2, #36]	; 0x24
  busy = false;
 800888c:	7029      	strb	r1, [r5, #0]
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 800888e:	d060      	beq.n	8008952 <st_reset+0xe6>
 8008890:	4b3c      	ldr	r3, [pc, #240]	; (8008984 <st_reset+0x118>)
 8008892:	781b      	ldrb	r3, [r3, #0]
 8008894:	2b04      	cmp	r3, #4
 8008896:	d164      	bne.n	8008962 <st_reset+0xf6>
  if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE)) { pin_state = !pin_state; } // Apply pin invert.
 8008898:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 800889c:	075b      	lsls	r3, r3, #29
 800889e:	d466      	bmi.n	800896e <st_reset+0x102>
	  ResetStepperDisableBit();
 80088a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80088a4:	4838      	ldr	r0, [pc, #224]	; (8008988 <st_reset+0x11c>)
 80088a6:	f7f8 ff6b 	bl	8001780 <GPIO_ResetBits>
  // Initialize stepper driver idle state.
  st_go_idle();
  // Initialize stepper algorithm variables.
  memset(&prep, 0, sizeof(st_prep_t));
 80088aa:	2238      	movs	r2, #56	; 0x38
 80088ac:	2100      	movs	r1, #0
 80088ae:	4837      	ldr	r0, [pc, #220]	; (800898c <st_reset+0x120>)
 80088b0:	f002 fdd1 	bl	800b456 <memset>
  memset(&st, 0, sizeof(stepper_t));
 80088b4:	2234      	movs	r2, #52	; 0x34
 80088b6:	2100      	movs	r1, #0
 80088b8:	4835      	ldr	r0, [pc, #212]	; (8008990 <st_reset+0x124>)
 80088ba:	f002 fdcc 	bl	800b456 <memset>
  st.exec_segment = NULL;
  pl_block = NULL;  // Planner block pointer used by segment buffer
 80088be:	2100      	movs	r1, #0
 80088c0:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
  segment_buffer_tail = 0;
  segment_buffer_head = 0; // empty = tail
  segment_next_head = 1;
 80088c4:	2601      	movs	r6, #1
  pl_block = NULL;  // Planner block pointer used by segment buffer
 80088c6:	4f33      	ldr	r7, [pc, #204]	; (8008994 <st_reset+0x128>)
  segment_buffer_head = 0; // empty = tail
 80088c8:	4833      	ldr	r0, [pc, #204]	; (8008998 <st_reset+0x12c>)
  segment_buffer_tail = 0;
 80088ca:	f8df e0e4 	ldr.w	lr, [pc, #228]	; 80089b0 <st_reset+0x144>
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 80088ce:	f013 0f01 	tst.w	r3, #1
  segment_buffer_tail = 0;
 80088d2:	f88e 1000 	strb.w	r1, [lr]
  pl_block = NULL;  // Planner block pointer used by segment buffer
 80088d6:	6039      	str	r1, [r7, #0]
  busy = false;
 80088d8:	7029      	strb	r1, [r5, #0]
  segment_buffer_head = 0; // empty = tail
 80088da:	7001      	strb	r1, [r0, #0]
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 80088dc:	bf18      	it	ne
 80088de:	2110      	movne	r1, #16
 80088e0:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
  segment_next_head = 1;
 80088e4:	4c2d      	ldr	r4, [pc, #180]	; (800899c <st_reset+0x130>)
    if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 80088e6:	ea02 0006 	and.w	r0, r2, r6
  segment_next_head = 1;
 80088ea:	7026      	strb	r6, [r4, #0]
    if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 80088ec:	0796      	lsls	r6, r2, #30
 80088ee:	bf48      	it	mi
 80088f0:	f040 0002 	orrmi.w	r0, r0, #2
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 80088f4:	079d      	lsls	r5, r3, #30
 80088f6:	bf48      	it	mi
 80088f8:	f041 0120 	orrmi.w	r1, r1, #32
    if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 80088fc:	0754      	lsls	r4, r2, #29
 80088fe:	bf48      	it	mi
 8008900:	f040 0004 	orrmi.w	r0, r0, #4
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 8008904:	075f      	lsls	r7, r3, #29
 8008906:	bf48      	it	mi
 8008908:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
    if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 800890c:	0716      	lsls	r6, r2, #28
 800890e:	bf48      	it	mi
 8008910:	f040 0008 	orrmi.w	r0, r0, #8
 8008914:	4c22      	ldr	r4, [pc, #136]	; (80089a0 <st_reset+0x134>)
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 8008916:	071d      	lsls	r5, r3, #28
 8008918:	4d22      	ldr	r5, [pc, #136]	; (80089a4 <st_reset+0x138>)

  st_generate_step_dir_invert_masks();
  st.dir_outbits = dir_port_invert_mask; // Initialize direction bits to default.
 800891a:	4b1d      	ldr	r3, [pc, #116]	; (8008990 <st_reset+0x124>)
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 800891c:	bf48      	it	mi
 800891e:	f041 0180 	orrmi.w	r1, r1, #128	; 0x80
#ifdef AVRTARGET
  STEP_PORT = (STEP_PORT & ~STEP_MASK) | step_port_invert_mask;
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | dir_port_invert_mask;
#endif
#ifdef STM32F103C8
  while(TIM3->CR1 & TIM_CR1_CEN); // wait for end of tim3 work to prevent cutoff last step pulse
 8008922:	4a21      	ldr	r2, [pc, #132]	; (80089a8 <st_reset+0x13c>)
 8008924:	8029      	strh	r1, [r5, #0]
 8008926:	8020      	strh	r0, [r4, #0]
  st.dir_outbits = dir_port_invert_mask; // Initialize direction bits to default.
 8008928:	82d9      	strh	r1, [r3, #22]
  while(TIM3->CR1 & TIM_CR1_CEN); // wait for end of tim3 work to prevent cutoff last step pulse
 800892a:	8813      	ldrh	r3, [r2, #0]
 800892c:	07dc      	lsls	r4, r3, #31
 800892e:	d4fc      	bmi.n	800892a <st_reset+0xbe>
//#ifdef STEP_PULSE_DELAY
//	TIM3->DIER &= ~TIM_DIER_CC1IE; //compare interrupt disable
//#endif
  TIM3->SR = ~(TIM_SR_UIF | TIM_SR_CC1IF); // clear UIF and CC1IF flags
 8008930:	f64f 73fc 	movw	r3, #65532	; 0xfffc
  STEP_PORT->ODR = ((STEP_PORT->ODR & ~STEP_MASK) | (step_port_invert_mask & STEP_MASK));
 8008934:	4c14      	ldr	r4, [pc, #80]	; (8008988 <st_reset+0x11c>)
  TIM3->SR = ~(TIM_SR_UIF | TIM_SR_CC1IF); // clear UIF and CC1IF flags
 8008936:	8213      	strh	r3, [r2, #16]
  STEP_PORT->ODR = ((STEP_PORT->ODR & ~STEP_MASK) | (step_port_invert_mask & STEP_MASK));
 8008938:	68e3      	ldr	r3, [r4, #12]
  DIRECTION_PORT->ODR = ((DIRECTION_PORT->ODR & ~DIRECTION_MASK) | (dir_port_invert_mask & DIRECTION_MASK));
 800893a:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
  STEP_PORT->ODR = ((STEP_PORT->ODR & ~STEP_MASK) | (step_port_invert_mask & STEP_MASK));
 800893e:	f023 030f 	bic.w	r3, r3, #15
 8008942:	4303      	orrs	r3, r0
 8008944:	60e3      	str	r3, [r4, #12]
  DIRECTION_PORT->ODR = ((DIRECTION_PORT->ODR & ~DIRECTION_MASK) | (dir_port_invert_mask & DIRECTION_MASK));
 8008946:	68e3      	ldr	r3, [r4, #12]
 8008948:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800894c:	4319      	orrs	r1, r3
 800894e:	60e1      	str	r1, [r4, #12]
  //GPIO_Write(DIRECTION_PORT, (GPIO_ReadOutputData(DIRECTION_PORT) & ~DIRECTION_MASK) | (dir_port_invert_mask & DIRECTION_MASK));
//#ifdef STEP_PULSE_DELAY
//	TIM3->DIER |= TIM_DIER_CC1IE; //compare interrupt enable
//#endif
#endif
}
 8008950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 8008952:	4b16      	ldr	r3, [pc, #88]	; (80089ac <st_reset+0x140>)
 8008954:	781b      	ldrb	r3, [r3, #0]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d19a      	bne.n	8008890 <st_reset+0x24>
 800895a:	4b0a      	ldr	r3, [pc, #40]	; (8008984 <st_reset+0x118>)
 800895c:	781b      	ldrb	r3, [r3, #0]
 800895e:	2b80      	cmp	r3, #128	; 0x80
 8008960:	d19a      	bne.n	8008898 <st_reset+0x2c>
    delay_ms(settings.stepper_idle_lock_time);
 8008962:	f7fb fc75 	bl	8004250 <delay_ms>
  if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE)) { pin_state = !pin_state; } // Apply pin invert.
 8008966:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 800896a:	075f      	lsls	r7, r3, #29
 800896c:	d498      	bmi.n	80088a0 <st_reset+0x34>
	  SetStepperDisableBit();
 800896e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008972:	4805      	ldr	r0, [pc, #20]	; (8008988 <st_reset+0x11c>)
 8008974:	f7f8 ff02 	bl	800177c <GPIO_SetBits>
 8008978:	e797      	b.n	80088aa <st_reset+0x3e>
 800897a:	bf00      	nop
 800897c:	20001404 	.word	0x20001404
 8008980:	20000a78 	.word	0x20000a78
 8008984:	200010c8 	.word	0x200010c8
 8008988:	40010800 	.word	0x40010800
 800898c:	20000a80 	.word	0x20000a80
 8008990:	20000b0c 	.word	0x20000b0c
 8008994:	20000a7c 	.word	0x20000a7c
 8008998:	20000b08 	.word	0x20000b08
 800899c:	20000b0a 	.word	0x20000b0a
 80089a0:	20000c1c 	.word	0x20000c1c
 80089a4:	20000a7a 	.word	0x20000a7a
 80089a8:	40000400 	.word	0x40000400
 80089ac:	20001100 	.word	0x20001100
 80089b0:	20000b09 	.word	0x20000b09

080089b4 <stepper_init>:

#endif

// Initialize and start the stepper motor subsystem
void stepper_init()
{
 80089b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // Configure step and direction interface pins
#ifdef STM32F103C8
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_APB2PeriphClockCmd(RCC_STEPPERS_DISABLE_PORT, ENABLE);
 80089b8:	2101      	movs	r1, #1
{
 80089ba:	b086      	sub	sp, #24
	RCC_APB2PeriphClockCmd(RCC_STEPPERS_DISABLE_PORT, ENABLE);
 80089bc:	2004      	movs	r0, #4
 80089be:	f7f8 ff91 	bl	80018e4 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Pin = STEPPERS_DISABLE_MASK;
 80089c2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 80089c6:	2610      	movs	r6, #16
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80089c8:	2303      	movs	r3, #3
	GPIO_InitStructure.GPIO_Pin = STEPPERS_DISABLE_MASK;
 80089ca:	ad06      	add	r5, sp, #24
	GPIO_Init(STEPPERS_DISABLE_PORT, &GPIO_InitStructure);
 80089cc:	4f52      	ldr	r7, [pc, #328]	; (8008b18 <stepper_init+0x164>)
	GPIO_InitStructure.GPIO_Pin = STEPPERS_DISABLE_MASK;
 80089ce:	f825 2d14 	strh.w	r2, [r5, #-20]!
	GPIO_Init(STEPPERS_DISABLE_PORT, &GPIO_InitStructure);
 80089d2:	4629      	mov	r1, r5
 80089d4:	4638      	mov	r0, r7
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80089d6:	f88d 3006 	strb.w	r3, [sp, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 80089da:	f88d 6007 	strb.w	r6, [sp, #7]
	GPIO_Init(STEPPERS_DISABLE_PORT, &GPIO_InitStructure);
 80089de:	f7f8 fd0f 	bl	8001400 <GPIO_Init>

	RCC_APB2PeriphClockCmd(RCC_STEP_PORT, ENABLE);
 80089e2:	2101      	movs	r1, #1
 80089e4:	2004      	movs	r0, #4
 80089e6:	f7f8 ff7d 	bl	80018e4 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Pin = STEP_MASK;
 80089ea:	230f      	movs	r3, #15
	GPIO_Init(STEP_PORT, &GPIO_InitStructure);
 80089ec:	4629      	mov	r1, r5
 80089ee:	4638      	mov	r0, r7
	GPIO_InitStructure.GPIO_Pin = STEP_MASK;
 80089f0:	f8ad 3004 	strh.w	r3, [sp, #4]
	GPIO_Init(STEP_PORT, &GPIO_InitStructure);
 80089f4:	f7f8 fd04 	bl	8001400 <GPIO_Init>

	RCC_APB2PeriphClockCmd(RCC_DIRECTION_PORT, ENABLE);
 80089f8:	2101      	movs	r1, #1
 80089fa:	2004      	movs	r0, #4
 80089fc:	f7f8 ff72 	bl	80018e4 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Pin = DIRECTION_MASK;
 8008a00:	23f0      	movs	r3, #240	; 0xf0
void TIM_Configuration(TIM_TypeDef* TIMER, u16 Period, u16 Prescaler, u8 PP)
{
	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
	NVIC_InitTypeDef NVIC_InitStructure;

	TIM_TimeBaseStructure.TIM_Period = Period - 1;
 8008a02:	2400      	movs	r4, #0
	RCC->APB1ENR |= RCC_APB1Periph_TIM2;
 8008a04:	f8df 8124 	ldr.w	r8, [pc, #292]	; 8008b2c <stepper_init+0x178>
	GPIO_Init(DIRECTION_PORT, &GPIO_InitStructure);
 8008a08:	4629      	mov	r1, r5
 8008a0a:	4638      	mov	r0, r7
	GPIO_InitStructure.GPIO_Pin = DIRECTION_MASK;
 8008a0c:	f8ad 3004 	strh.w	r3, [sp, #4]
	GPIO_Init(DIRECTION_PORT, &GPIO_InitStructure);
 8008a10:	f7f8 fcf6 	bl	8001400 <GPIO_Init>
	RCC->APB1ENR |= RCC_APB1Periph_TIM2;
 8008a14:	f8d8 301c 	ldr.w	r3, [r8, #28]
	TIM_TimeBaseStructure.TIM_Prescaler = Prescaler - 1;
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
	TIM_TimeBaseInit(TIMER, &TIM_TimeBaseStructure);
 8008a18:	a903      	add	r1, sp, #12
	RCC->APB1ENR |= RCC_APB1Periph_TIM2;
 8008a1a:	f043 0301 	orr.w	r3, r3, #1
 8008a1e:	f8c8 301c 	str.w	r3, [r8, #28]
	TIM_TimeBaseInit(TIMER, &TIM_TimeBaseStructure);
 8008a22:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	TIM_TimeBaseStructure.TIM_Period = Period - 1;
 8008a26:	f8ad 4010 	strh.w	r4, [sp, #16]
	TIM_TimeBaseStructure.TIM_Prescaler = Prescaler - 1;
 8008a2a:	f8ad 400c 	strh.w	r4, [sp, #12]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 8008a2e:	f8ad 4012 	strh.w	r4, [sp, #18]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8008a32:	f8ad 400e 	strh.w	r4, [sp, #14]
	TIM_TimeBaseInit(TIMER, &TIM_TimeBaseStructure);
 8008a36:	f7f8 ff6d 	bl	8001914 <TIM_TimeBaseInit>

	TIM_ClearITPendingBit(TIMER, TIM_IT_Update);
 8008a3a:	2101      	movs	r1, #1
 8008a3c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8008a40:	f7f9 f83e 	bl	8001ac0 <TIM_ClearITPendingBit>
	TIM_ITConfig(TIMER, TIM_IT_Update, ENABLE);
 8008a44:	2201      	movs	r2, #1
 8008a46:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8008a4a:	4611      	mov	r1, r2
 8008a4c:	f7f9 f826 	bl	8001a9c <TIM_ITConfig>
	TIM_Cmd(TIMER, ENABLE);
 8008a50:	2101      	movs	r1, #1
 8008a52:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8008a56:	f7f9 f803 	bl	8001a60 <TIM_Cmd>

	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
 8008a5a:	f44f 7040 	mov.w	r0, #768	; 0x300
 8008a5e:	f7f8 fb49 	bl	80010f4 <NVIC_PriorityGroupConfig>
	if (TIMER == TIM2) { NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn; }
 8008a62:	4b2e      	ldr	r3, [pc, #184]	; (8008b1c <stepper_init+0x168>)
 8008a64:	af06      	add	r7, sp, #24
 8008a66:	f847 3d10 	str.w	r3, [r7, #-16]!
	else if (TIMER == TIM4) { NVIC_InitStructure.NVIC_IRQChannel = TIM4_IRQn; }

	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = PP;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
 8008a6a:	4638      	mov	r0, r7
 8008a6c:	f7f8 fb4c 	bl	8001108 <NVIC_Init>
	RCC->APB1ENR |= RCC_APB1Periph_TIM3;
 8008a70:	f8d8 301c 	ldr.w	r3, [r8, #28]
	TIM_TimeBaseInit(TIMER, &TIM_TimeBaseStructure);
 8008a74:	4d2a      	ldr	r5, [pc, #168]	; (8008b20 <stepper_init+0x16c>)
	RCC->APB1ENR |= RCC_APB1Periph_TIM3;
 8008a76:	f043 0302 	orr.w	r3, r3, #2
 8008a7a:	f8c8 301c 	str.w	r3, [r8, #28]
	TIM_TimeBaseInit(TIMER, &TIM_TimeBaseStructure);
 8008a7e:	a903      	add	r1, sp, #12
 8008a80:	4628      	mov	r0, r5
	TIM_TimeBaseStructure.TIM_Period = Period - 1;
 8008a82:	f8ad 4010 	strh.w	r4, [sp, #16]
	TIM_TimeBaseStructure.TIM_Prescaler = Prescaler - 1;
 8008a86:	f8ad 400c 	strh.w	r4, [sp, #12]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 8008a8a:	f8ad 4012 	strh.w	r4, [sp, #18]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8008a8e:	f8ad 400e 	strh.w	r4, [sp, #14]
	TIM_TimeBaseInit(TIMER, &TIM_TimeBaseStructure);
 8008a92:	f7f8 ff3f 	bl	8001914 <TIM_TimeBaseInit>
	TIM_ClearITPendingBit(TIMER, TIM_IT_Update);
 8008a96:	4628      	mov	r0, r5
 8008a98:	2101      	movs	r1, #1
 8008a9a:	f7f9 f811 	bl	8001ac0 <TIM_ClearITPendingBit>
	TIM_ITConfig(TIMER, TIM_IT_Update, ENABLE);
 8008a9e:	2201      	movs	r2, #1
 8008aa0:	4628      	mov	r0, r5
 8008aa2:	4611      	mov	r1, r2
 8008aa4:	f7f8 fffa 	bl	8001a9c <TIM_ITConfig>
	TIM_Cmd(TIMER, ENABLE);
 8008aa8:	2101      	movs	r1, #1
 8008aaa:	4628      	mov	r0, r5
 8008aac:	f7f8 ffd8 	bl	8001a60 <TIM_Cmd>
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
 8008ab0:	f44f 7040 	mov.w	r0, #768	; 0x300
 8008ab4:	f7f8 fb1e 	bl	80010f4 <NVIC_PriorityGroupConfig>
	NVIC_Init(&NVIC_InitStructure);
 8008ab8:	4638      	mov	r0, r7
	TIM2->CR1 &= ~TIM_CR1_CEN;
 8008aba:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
	else if (TIMER == TIM3) { NVIC_InitStructure.NVIC_IRQChannel = TIM3_IRQn; }
 8008abe:	4b19      	ldr	r3, [pc, #100]	; (8008b24 <stepper_init+0x170>)
 8008ac0:	9302      	str	r3, [sp, #8]
	NVIC_Init(&NVIC_InitStructure);
 8008ac2:	f7f8 fb21 	bl	8001108 <NVIC_Init>
 8008ac6:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8008aca:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
	TIM2->CR1 &= ~TIM_CR1_CEN;
 8008ace:	883b      	ldrh	r3, [r7, #0]
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8008ad0:	4a15      	ldr	r2, [pc, #84]	; (8008b28 <stepper_init+0x174>)
 8008ad2:	f023 0301 	bic.w	r3, r3, #1
 8008ad6:	40b3      	lsls	r3, r6
 8008ad8:	40f3      	lsrs	r3, r6
 8008ada:	803b      	strh	r3, [r7, #0]
	TIM2->SR &= ~TIM_SR_UIF;
 8008adc:	8a3b      	ldrh	r3, [r7, #16]
 8008ade:	f023 0301 	bic.w	r3, r3, #1
 8008ae2:	40b3      	lsls	r3, r6
 8008ae4:	40f3      	lsrs	r3, r6
 8008ae6:	823b      	strh	r3, [r7, #16]
	TIM2->CNT = 0;
 8008ae8:	84bc      	strh	r4, [r7, #36]	; 0x24
	TIM3->CR1 &= ~TIM_CR1_CEN;
 8008aea:	882b      	ldrh	r3, [r5, #0]
 8008aec:	f023 0301 	bic.w	r3, r3, #1
 8008af0:	40b3      	lsls	r3, r6
 8008af2:	40f3      	lsrs	r3, r6
 8008af4:	802b      	strh	r3, [r5, #0]
	TIM3->SR &= ~(TIM_SR_UIF | TIM_SR_CC1IF);
 8008af6:	8a2b      	ldrh	r3, [r5, #16]
 8008af8:	f023 0303 	bic.w	r3, r3, #3
 8008afc:	40b3      	lsls	r3, r6
 8008afe:	40f3      	lsrs	r3, r6
 8008b00:	822b      	strh	r3, [r5, #16]
	TIM3->CNT = 0;
 8008b02:	84ac      	strh	r4, [r5, #36]	; 0x24
 8008b04:	f882 431d 	strb.w	r4, [r2, #797]	; 0x31d
 8008b08:	f882 631c 	strb.w	r6, [r2, #796]	; 0x31c
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 8008b0c:	6010      	str	r0, [r2, #0]
 8008b0e:	6011      	str	r1, [r2, #0]
}
 8008b10:	b006      	add	sp, #24
 8008b12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b16:	bf00      	nop
 8008b18:	40010800 	.word	0x40010800
 8008b1c:	0101011c 	.word	0x0101011c
 8008b20:	40000400 	.word	0x40000400
 8008b24:	0101011d 	.word	0x0101011d
 8008b28:	e000e100 	.word	0xe000e100
 8008b2c:	40021000 	.word	0x40021000

08008b30 <st_update_plan_block_parameters>:
{
 8008b30:	b538      	push	{r3, r4, r5, lr}
  if (pl_block != NULL) { // Ignore if at start of a new block.
 8008b32:	4c08      	ldr	r4, [pc, #32]	; (8008b54 <st_update_plan_block_parameters+0x24>)
 8008b34:	6825      	ldr	r5, [r4, #0]
 8008b36:	b15d      	cbz	r5, 8008b50 <st_update_plan_block_parameters+0x20>
    prep.recalculate_flag |= PREP_FLAG_RECALCULATE;
 8008b38:	4b07      	ldr	r3, [pc, #28]	; (8008b58 <st_update_plan_block_parameters+0x28>)
 8008b3a:	785a      	ldrb	r2, [r3, #1]
    pl_block->entry_speed_sqr = prep.current_speed*prep.current_speed; // Update entry speed.
 8008b3c:	69d9      	ldr	r1, [r3, #28]
    prep.recalculate_flag |= PREP_FLAG_RECALCULATE;
 8008b3e:	f042 0201 	orr.w	r2, r2, #1
 8008b42:	705a      	strb	r2, [r3, #1]
    pl_block->entry_speed_sqr = prep.current_speed*prep.current_speed; // Update entry speed.
 8008b44:	4608      	mov	r0, r1
 8008b46:	f7f8 f8b3 	bl	8000cb0 <__aeabi_fmul>
    pl_block = NULL; // Flag st_prep_segment() to load and check active velocity profile.
 8008b4a:	2300      	movs	r3, #0
    pl_block->entry_speed_sqr = prep.current_speed*prep.current_speed; // Update entry speed.
 8008b4c:	61a8      	str	r0, [r5, #24]
    pl_block = NULL; // Flag st_prep_segment() to load and check active velocity profile.
 8008b4e:	6023      	str	r3, [r4, #0]
 8008b50:	bd38      	pop	{r3, r4, r5, pc}
 8008b52:	bf00      	nop
 8008b54:	20000a7c 	.word	0x20000a7c
 8008b58:	20000a80 	.word	0x20000a80

08008b5c <st_prep_buffer>:
  if (bit_istrue(sys.step_control,STEP_CONTROL_END_MOTION)) { return; }
 8008b5c:	4b35      	ldr	r3, [pc, #212]	; (8008c34 <st_prep_buffer+0xd8>)
 8008b5e:	791b      	ldrb	r3, [r3, #4]
 8008b60:	07db      	lsls	r3, r3, #31
 8008b62:	f100 84c4 	bmi.w	80094ee <st_prep_buffer+0x992>
{
 8008b66:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b6a:	b091      	sub	sp, #68	; 0x44
 8008b6c:	4b32      	ldr	r3, [pc, #200]	; (8008c38 <st_prep_buffer+0xdc>)
 8008b6e:	781f      	ldrb	r7, [r3, #0]
  while (segment_buffer_tail != segment_next_head) { // Check if we need to fill the buffer.
 8008b70:	4b32      	ldr	r3, [pc, #200]	; (8008c3c <st_prep_buffer+0xe0>)
 8008b72:	781b      	ldrb	r3, [r3, #0]
 8008b74:	42bb      	cmp	r3, r7
 8008b76:	f000 8318 	beq.w	80091aa <st_prep_buffer+0x64e>
    if (pl_block == NULL) {
 8008b7a:	4b31      	ldr	r3, [pc, #196]	; (8008c40 <st_prep_buffer+0xe4>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	9300      	str	r3, [sp, #0]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	f000 833a 	beq.w	80091fa <st_prep_buffer+0x69e>
 8008b86:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 8008c54 <st_prep_buffer+0xf8>
 8008b8a:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
 8008b8e:	f89a 3014 	ldrb.w	r3, [sl, #20]
 8008b92:	9301      	str	r3, [sp, #4]
 8008b94:	4b2b      	ldr	r3, [pc, #172]	; (8008c44 <st_prep_buffer+0xe8>)
 8008b96:	930e      	str	r3, [sp, #56]	; 0x38
    segment_t *prep_segment = &segment_buffer[segment_buffer_head];
 8008b98:	4b2b      	ldr	r3, [pc, #172]	; (8008c48 <st_prep_buffer+0xec>)
    prep_segment->st_block_index = prep.st_block_index;
 8008b9a:	492c      	ldr	r1, [pc, #176]	; (8008c4c <st_prep_buffer+0xf0>)
    segment_t *prep_segment = &segment_buffer[segment_buffer_head];
 8008b9c:	781b      	ldrb	r3, [r3, #0]
    prep_segment->st_block_index = prep.st_block_index;
 8008b9e:	f89a 2000 	ldrb.w	r2, [sl]
    segment_t *prep_segment = &segment_buffer[segment_buffer_head];
 8008ba2:	930c      	str	r3, [sp, #48]	; 0x30
    prep_segment->st_block_index = prep.st_block_index;
 8008ba4:	00db      	lsls	r3, r3, #3
 8008ba6:	9307      	str	r3, [sp, #28]
 8008ba8:	18cb      	adds	r3, r1, r3
 8008baa:	711a      	strb	r2, [r3, #4]
    float minimum_mm = mm_remaining-prep.req_mm_increment; // Guarantee at least one step.
 8008bac:	f8da 1010 	ldr.w	r1, [sl, #16]
 8008bb0:	4658      	mov	r0, fp
 8008bb2:	f7f7 ff73 	bl	8000a9c <__aeabi_fsub>
 8008bb6:	2100      	movs	r1, #0
 8008bb8:	9004      	str	r0, [sp, #16]
 8008bba:	f7f8 fa2b 	bl	8001014 <__aeabi_fcmpge>
 8008bbe:	b908      	cbnz	r0, 8008bc4 <st_prep_buffer+0x68>
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	9304      	str	r3, [sp, #16]
						mm_remaining = prep.accelerate_until;
 8008bc4:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
            time_var = 2.0f*(pl_block->millimeters-mm_remaining)/(prep.current_speed+prep.maximum_speed);
 8008bc8:	4658      	mov	r0, fp
 8008bca:	4619      	mov	r1, r3
						mm_remaining = prep.accelerate_until;
 8008bcc:	461c      	mov	r4, r3
 8008bce:	9302      	str	r3, [sp, #8]
            time_var = 2.0f*(pl_block->millimeters-mm_remaining)/(prep.current_speed+prep.maximum_speed);
 8008bd0:	f7f7 ff64 	bl	8000a9c <__aeabi_fsub>
					if (prep.current_speed-prep.maximum_speed <= speed_var) {
 8008bd4:	f8da 3020 	ldr.w	r3, [sl, #32]
            time_var = 2.0f*(pl_block->millimeters-mm_remaining)/(prep.current_speed+prep.maximum_speed);
 8008bd8:	4601      	mov	r1, r0
					if (prep.current_speed-prep.maximum_speed <= speed_var) {
 8008bda:	461d      	mov	r5, r3
 8008bdc:	930d      	str	r3, [sp, #52]	; 0x34
            time_var = 2.0f*(pl_block->millimeters-mm_remaining)/(prep.current_speed+prep.maximum_speed);
 8008bde:	f7f7 ff5f 	bl	8000aa0 <__addsf3>
          if (mm_var < prep.decelerate_after) { // End of cruise.
 8008be2:	f8da 302c 	ldr.w	r3, [sl, #44]	; 0x2c
            time_var = 2.0f*(pl_block->millimeters-mm_remaining)/(prep.current_speed+prep.maximum_speed);
 8008be6:	9006      	str	r0, [sp, #24]
 8008be8:	4629      	mov	r1, r5
 8008bea:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
          if (mm_var < prep.decelerate_after) { // End of cruise.
 8008bee:	461e      	mov	r6, r3
 8008bf0:	9305      	str	r3, [sp, #20]
 8008bf2:	f7f8 f911 	bl	8000e18 <__aeabi_fdiv>
 8008bf6:	f89a 3014 	ldrb.w	r3, [sl, #20]
 8008bfa:	900a      	str	r0, [sp, #40]	; 0x28
 8008bfc:	9303      	str	r3, [sp, #12]
          time_var = 2.0f*(mm_remaining-prep.mm_complete)/(prep.current_speed+prep.exit_speed);
 8008bfe:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8008c02:	4631      	mov	r1, r6
 8008c04:	4620      	mov	r0, r4
 8008c06:	f8da 701c 	ldr.w	r7, [sl, #28]
 8008c0a:	f8da 8018 	ldr.w	r8, [sl, #24]
 8008c0e:	9308      	str	r3, [sp, #32]
 8008c10:	f7f8 f9e2 	bl	8000fd8 <__aeabi_fcmpeq>
 8008c14:	2800      	cmp	r0, #0
 8008c16:	f000 827f 	beq.w	8009118 <st_prep_buffer+0x5bc>
 8008c1a:	f04f 0302 	mov.w	r3, #2
 8008c1e:	4d0c      	ldr	r5, [pc, #48]	; (8008c50 <st_prep_buffer+0xf4>)
 8008c20:	b2db      	uxtb	r3, r3
 8008c22:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 8008c26:	2400      	movs	r4, #0
 8008c28:	462e      	mov	r6, r5
 8008c2a:	9309      	str	r3, [sp, #36]	; 0x24
 8008c2c:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 8008c30:	e01e      	b.n	8008c70 <st_prep_buffer+0x114>
 8008c32:	bf00      	nop
 8008c34:	200010c8 	.word	0x200010c8
 8008c38:	20000b0a 	.word	0x20000b0a
 8008c3c:	20000b09 	.word	0x20000b09
 8008c40:	20000a7c 	.word	0x20000a7c
 8008c44:	20000c18 	.word	0x20000c18
 8008c48:	20000b08 	.word	0x20000b08
 8008c4c:	20000ab8 	.word	0x20000ab8
 8008c50:	392ec33e 	.word	0x392ec33e
 8008c54:	20000a80 	.word	0x20000a80
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 8008c58:	4621      	mov	r1, r4
 8008c5a:	4630      	mov	r0, r6
 8008c5c:	f7f7 ff1e 	bl	8000a9c <__aeabi_fsub>
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8008c60:	4641      	mov	r1, r8
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 8008c62:	4605      	mov	r5, r0
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8008c64:	4658      	mov	r0, fp
 8008c66:	f7f8 f9df 	bl	8001028 <__aeabi_fcmpgt>
 8008c6a:	2800      	cmp	r0, #0
 8008c6c:	f000 80cf 	beq.w	8008e0e <st_prep_buffer+0x2b2>
      switch (prep.ramp_type) {
 8008c70:	9b01      	ldr	r3, [sp, #4]
 8008c72:	2b01      	cmp	r3, #1
 8008c74:	d044      	beq.n	8008d00 <st_prep_buffer+0x1a4>
 8008c76:	f0c0 81a4 	bcc.w	8008fc2 <st_prep_buffer+0x466>
 8008c7a:	2b03      	cmp	r3, #3
 8008c7c:	d17f      	bne.n	8008d7e <st_prep_buffer+0x222>
          speed_var = pl_block->acceleration*time_var;
 8008c7e:	9b00      	ldr	r3, [sp, #0]
 8008c80:	4628      	mov	r0, r5
 8008c82:	6a19      	ldr	r1, [r3, #32]
 8008c84:	f7f8 f814 	bl	8000cb0 <__aeabi_fmul>
					if (prep.current_speed-prep.maximum_speed <= speed_var) {
 8008c88:	4651      	mov	r1, sl
          speed_var = pl_block->acceleration*time_var;
 8008c8a:	4681      	mov	r9, r0
					if (prep.current_speed-prep.maximum_speed <= speed_var) {
 8008c8c:	4638      	mov	r0, r7
 8008c8e:	f7f7 ff05 	bl	8000a9c <__aeabi_fsub>
 8008c92:	4601      	mov	r1, r0
 8008c94:	4648      	mov	r0, r9
 8008c96:	f7f8 f9bd 	bl	8001014 <__aeabi_fcmpge>
 8008c9a:	2800      	cmp	r0, #0
 8008c9c:	f000 81d0 	beq.w	8009040 <st_prep_buffer+0x4e4>
            time_var = 2.0f*(pl_block->millimeters-mm_remaining)/(prep.current_speed+prep.maximum_speed);
 8008ca0:	4639      	mov	r1, r7
 8008ca2:	4650      	mov	r0, sl
 8008ca4:	f7f7 fefc 	bl	8000aa0 <__addsf3>
 8008ca8:	4601      	mov	r1, r0
 8008caa:	9806      	ldr	r0, [sp, #24]
 8008cac:	f7f8 f8b4 	bl	8000e18 <__aeabi_fdiv>
      dt += time_var; // Add computed ramp time to total segment time.
 8008cb0:	4601      	mov	r1, r0
 8008cb2:	4620      	mov	r0, r4
 8008cb4:	f7f7 fef4 	bl	8000aa0 <__addsf3>
 8008cb8:	4604      	mov	r4, r0
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 8008cba:	4601      	mov	r1, r0
 8008cbc:	4630      	mov	r0, r6
 8008cbe:	f7f8 f9b3 	bl	8001028 <__aeabi_fcmpgt>
 8008cc2:	2800      	cmp	r0, #0
 8008cc4:	f040 8207 	bne.w	80090d6 <st_prep_buffer+0x57a>
        if (mm_remaining > minimum_mm) { // Check for very slow segments with zero steps.
 8008cc8:	9f02      	ldr	r7, [sp, #8]
 8008cca:	9904      	ldr	r1, [sp, #16]
 8008ccc:	4638      	mov	r0, r7
 8008cce:	f7f8 f9ab 	bl	8001028 <__aeabi_fcmpgt>
 8008cd2:	2800      	cmp	r0, #0
 8008cd4:	f000 83cc 	beq.w	8009470 <st_prep_buffer+0x914>
          dt_max += DT_SEGMENT;
 8008cd8:	4630      	mov	r0, r6
 8008cda:	49a0      	ldr	r1, [pc, #640]	; (8008f5c <st_prep_buffer+0x400>)
 8008cdc:	f7f7 fee0 	bl	8000aa0 <__addsf3>
          time_var = dt_max - dt;
 8008ce0:	4621      	mov	r1, r4
          dt_max += DT_SEGMENT;
 8008ce2:	4606      	mov	r6, r0
          time_var = dt_max - dt;
 8008ce4:	f7f7 feda 	bl	8000a9c <__aeabi_fsub>
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8008ce8:	4641      	mov	r1, r8
          time_var = dt_max - dt;
 8008cea:	4605      	mov	r5, r0
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8008cec:	4638      	mov	r0, r7
 8008cee:	f7f8 f99b 	bl	8001028 <__aeabi_fcmpgt>
 8008cf2:	46bb      	mov	fp, r7
 8008cf4:	2800      	cmp	r0, #0
 8008cf6:	f000 81fc 	beq.w	80090f2 <st_prep_buffer+0x596>
            prep.ramp_type = RAMP_CRUISE;
 8008cfa:	2301      	movs	r3, #1
            prep.current_speed = prep.maximum_speed;
 8008cfc:	4657      	mov	r7, sl
            prep.ramp_type = RAMP_CRUISE;
 8008cfe:	9303      	str	r3, [sp, #12]
          mm_var = mm_remaining - prep.maximum_speed*time_var;
 8008d00:	4629      	mov	r1, r5
 8008d02:	4650      	mov	r0, sl
 8008d04:	f7f7 ffd4 	bl	8000cb0 <__aeabi_fmul>
 8008d08:	4601      	mov	r1, r0
 8008d0a:	4658      	mov	r0, fp
 8008d0c:	f7f7 fec6 	bl	8000a9c <__aeabi_fsub>
          if (mm_var < prep.decelerate_after) { // End of cruise.
 8008d10:	9905      	ldr	r1, [sp, #20]
            mm_remaining = mm_var;
 8008d12:	46d9      	mov	r9, fp
          mm_var = mm_remaining - prep.maximum_speed*time_var;
 8008d14:	4683      	mov	fp, r0
          if (mm_var < prep.decelerate_after) { // End of cruise.
 8008d16:	f7f8 f969 	bl	8000fec <__aeabi_fcmplt>
 8008d1a:	2800      	cmp	r0, #0
 8008d1c:	f000 81bd 	beq.w	800909a <st_prep_buffer+0x53e>
            time_var = (mm_remaining - prep.decelerate_after)/prep.maximum_speed;
 8008d20:	f8dd b014 	ldr.w	fp, [sp, #20]
 8008d24:	4648      	mov	r0, r9
 8008d26:	4659      	mov	r1, fp
 8008d28:	f7f7 feb8 	bl	8000a9c <__aeabi_fsub>
 8008d2c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008d2e:	f7f7 ffbf 	bl	8000cb0 <__aeabi_fmul>
      dt += time_var; // Add computed ramp time to total segment time.
 8008d32:	4601      	mov	r1, r0
 8008d34:	4620      	mov	r0, r4
 8008d36:	f7f7 feb3 	bl	8000aa0 <__addsf3>
 8008d3a:	4604      	mov	r4, r0
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 8008d3c:	4601      	mov	r1, r0
 8008d3e:	4630      	mov	r0, r6
 8008d40:	f7f8 f972 	bl	8001028 <__aeabi_fcmpgt>
 8008d44:	2800      	cmp	r0, #0
 8008d46:	f040 81b5 	bne.w	80090b4 <st_prep_buffer+0x558>
        if (mm_remaining > minimum_mm) { // Check for very slow segments with zero steps.
 8008d4a:	9904      	ldr	r1, [sp, #16]
 8008d4c:	4658      	mov	r0, fp
 8008d4e:	f7f8 f96b 	bl	8001028 <__aeabi_fcmpgt>
 8008d52:	2800      	cmp	r0, #0
 8008d54:	f000 81ba 	beq.w	80090cc <st_prep_buffer+0x570>
          dt_max += DT_SEGMENT;
 8008d58:	4630      	mov	r0, r6
 8008d5a:	4980      	ldr	r1, [pc, #512]	; (8008f5c <st_prep_buffer+0x400>)
 8008d5c:	f7f7 fea0 	bl	8000aa0 <__addsf3>
          time_var = dt_max - dt;
 8008d60:	4621      	mov	r1, r4
          dt_max += DT_SEGMENT;
 8008d62:	4606      	mov	r6, r0
          time_var = dt_max - dt;
 8008d64:	f7f7 fe9a 	bl	8000a9c <__aeabi_fsub>
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8008d68:	4641      	mov	r1, r8
          time_var = dt_max - dt;
 8008d6a:	4605      	mov	r5, r0
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8008d6c:	4658      	mov	r0, fp
 8008d6e:	f7f8 f95b 	bl	8001028 <__aeabi_fcmpgt>
 8008d72:	2800      	cmp	r0, #0
 8008d74:	f000 81aa 	beq.w	80090cc <st_prep_buffer+0x570>
 8008d78:	2302      	movs	r3, #2
 8008d7a:	9303      	str	r3, [sp, #12]
            prep.ramp_type = RAMP_DECEL;
 8008d7c:	9301      	str	r3, [sp, #4]
          speed_var = pl_block->acceleration*time_var; // Used as delta speed (mm/min)
 8008d7e:	9b00      	ldr	r3, [sp, #0]
 8008d80:	4628      	mov	r0, r5
 8008d82:	6a19      	ldr	r1, [r3, #32]
 8008d84:	f7f7 ff94 	bl	8000cb0 <__aeabi_fmul>
          if (prep.current_speed > speed_var) { // Check if at or below zero speed.
 8008d88:	4639      	mov	r1, r7
          speed_var = pl_block->acceleration*time_var; // Used as delta speed (mm/min)
 8008d8a:	4681      	mov	r9, r0
          if (prep.current_speed > speed_var) { // Check if at or below zero speed.
 8008d8c:	f7f8 f92e 	bl	8000fec <__aeabi_fcmplt>
 8008d90:	2800      	cmp	r0, #0
 8008d92:	f000 8141 	beq.w	8009018 <st_prep_buffer+0x4bc>
            mm_var = mm_remaining - time_var*(prep.current_speed - 0.5f*speed_var); // (mm)
 8008d96:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8008d9a:	4648      	mov	r0, r9
 8008d9c:	f7f7 ff88 	bl	8000cb0 <__aeabi_fmul>
 8008da0:	4639      	mov	r1, r7
 8008da2:	f7f7 fe7b 	bl	8000a9c <__aeabi_fsub>
 8008da6:	4629      	mov	r1, r5
 8008da8:	f7f7 ff82 	bl	8000cb0 <__aeabi_fmul>
 8008dac:	4659      	mov	r1, fp
 8008dae:	f7f7 fe77 	bl	8000aa0 <__addsf3>
            if (mm_var > prep.mm_complete) { // Typical case. In deceleration ramp.
 8008db2:	4641      	mov	r1, r8
            mm_var = mm_remaining - time_var*(prep.current_speed - 0.5f*speed_var); // (mm)
 8008db4:	900b      	str	r0, [sp, #44]	; 0x2c
            if (mm_var > prep.mm_complete) { // Typical case. In deceleration ramp.
 8008db6:	f7f8 f937 	bl	8001028 <__aeabi_fcmpgt>
 8008dba:	2800      	cmp	r0, #0
 8008dbc:	f000 812c 	beq.w	8009018 <st_prep_buffer+0x4bc>
              prep.current_speed -= speed_var;
 8008dc0:	4638      	mov	r0, r7
 8008dc2:	4649      	mov	r1, r9
 8008dc4:	f7f7 fe6a 	bl	8000a9c <__aeabi_fsub>
 8008dc8:	4607      	mov	r7, r0
              mm_remaining = mm_var;
 8008dca:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
      dt += time_var; // Add computed ramp time to total segment time.
 8008dce:	4629      	mov	r1, r5
 8008dd0:	4620      	mov	r0, r4
 8008dd2:	f7f7 fe65 	bl	8000aa0 <__addsf3>
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 8008dd6:	4631      	mov	r1, r6
      dt += time_var; // Add computed ramp time to total segment time.
 8008dd8:	4604      	mov	r4, r0
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 8008dda:	f7f8 f907 	bl	8000fec <__aeabi_fcmplt>
 8008dde:	2800      	cmp	r0, #0
 8008de0:	f47f af3a 	bne.w	8008c58 <st_prep_buffer+0xfc>
        if (mm_remaining > minimum_mm) { // Check for very slow segments with zero steps.
 8008de4:	4659      	mov	r1, fp
 8008de6:	9804      	ldr	r0, [sp, #16]
 8008de8:	f7f8 f900 	bl	8000fec <__aeabi_fcmplt>
 8008dec:	b178      	cbz	r0, 8008e0e <st_prep_buffer+0x2b2>
          dt_max += DT_SEGMENT;
 8008dee:	4630      	mov	r0, r6
 8008df0:	495a      	ldr	r1, [pc, #360]	; (8008f5c <st_prep_buffer+0x400>)
 8008df2:	f7f7 fe55 	bl	8000aa0 <__addsf3>
          time_var = dt_max - dt;
 8008df6:	4621      	mov	r1, r4
          dt_max += DT_SEGMENT;
 8008df8:	4606      	mov	r6, r0
          time_var = dt_max - dt;
 8008dfa:	f7f7 fe4f 	bl	8000a9c <__aeabi_fsub>
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8008dfe:	4641      	mov	r1, r8
          time_var = dt_max - dt;
 8008e00:	4605      	mov	r5, r0
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8008e02:	4658      	mov	r0, fp
 8008e04:	f7f8 f910 	bl	8001028 <__aeabi_fcmpgt>
 8008e08:	2800      	cmp	r0, #0
 8008e0a:	f47f af31 	bne.w	8008c70 <st_prep_buffer+0x114>
 8008e0e:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 8008e12:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8008e16:	f8ca 701c 	str.w	r7, [sl, #28]
 8008e1a:	f88a 3014 	strb.w	r3, [sl, #20]
      if (st_prep_block->is_pwm_rate_adjusted || (sys.step_control & STEP_CONTROL_UPDATE_SPINDLE_PWM)) {
 8008e1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	7d9b      	ldrb	r3, [r3, #22]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	f040 817a 	bne.w	800911e <st_prep_buffer+0x5c2>
 8008e2a:	4b4d      	ldr	r3, [pc, #308]	; (8008f60 <st_prep_buffer+0x404>)
 8008e2c:	f893 8004 	ldrb.w	r8, [r3, #4]
 8008e30:	f018 0f08 	tst.w	r8, #8
 8008e34:	f040 81bc 	bne.w	80091b0 <st_prep_buffer+0x654>
 8008e38:	f89a 0034 	ldrb.w	r0, [sl, #52]	; 0x34
      prep_segment->spindle_pwm = prep.current_spindle_pwm; // Reload segment PWM value
 8008e3c:	9a07      	ldr	r2, [sp, #28]
 8008e3e:	4b49      	ldr	r3, [pc, #292]	; (8008f64 <st_prep_buffer+0x408>)
    float step_dist_remaining = prep.step_per_mm*mm_remaining; // Convert mm_remaining to steps
 8008e40:	f8da 100c 	ldr.w	r1, [sl, #12]
      prep_segment->spindle_pwm = prep.current_spindle_pwm; // Reload segment PWM value
 8008e44:	4413      	add	r3, r2
 8008e46:	7198      	strb	r0, [r3, #6]
    float step_dist_remaining = prep.step_per_mm*mm_remaining; // Convert mm_remaining to steps
 8008e48:	4658      	mov	r0, fp
 8008e4a:	f7f7 ff31 	bl	8000cb0 <__aeabi_fmul>
 8008e4e:	4606      	mov	r6, r0
    float n_steps_remaining = ceilf(step_dist_remaining); // Round-up current steps remaining
 8008e50:	f002 fb4a 	bl	800b4e8 <ceilf>
 8008e54:	4605      	mov	r5, r0
    float last_n_steps_remaining = ceilf(prep.steps_remaining); // Round-up last steps remaining
 8008e56:	f8da 0008 	ldr.w	r0, [sl, #8]
 8008e5a:	f002 fb45 	bl	800b4e8 <ceilf>
	prep_segment->n_step = (uint16_t)(last_n_steps_remaining - n_steps_remaining); // Compute number of steps to execute.
 8008e5e:	4629      	mov	r1, r5
    float last_n_steps_remaining = ceilf(prep.steps_remaining); // Round-up last steps remaining
 8008e60:	4607      	mov	r7, r0
	prep_segment->n_step = (uint16_t)(last_n_steps_remaining - n_steps_remaining); // Compute number of steps to execute.
 8008e62:	f7f7 fe1b 	bl	8000a9c <__aeabi_fsub>
 8008e66:	f7f8 f925 	bl	80010b4 <__aeabi_f2uiz>
 8008e6a:	4b3e      	ldr	r3, [pc, #248]	; (8008f64 <st_prep_buffer+0x408>)
 8008e6c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008e6e:	fa1f f980 	uxth.w	r9, r0
 8008e72:	f823 9032 	strh.w	r9, [r3, r2, lsl #3]
    if (prep_segment->n_step == 0) {
 8008e76:	f1b9 0f00 	cmp.w	r9, #0
 8008e7a:	d103      	bne.n	8008e84 <st_prep_buffer+0x328>
      if (sys.step_control & STEP_CONTROL_EXECUTE_HOLD) {
 8008e7c:	f018 0f02 	tst.w	r8, #2
 8008e80:	f040 83a1 	bne.w	80095c6 <st_prep_buffer+0xa6a>
    dt += prep.dt_remainder; // Apply previous segment partial step execute time
 8008e84:	4620      	mov	r0, r4
 8008e86:	f8da 1004 	ldr.w	r1, [sl, #4]
 8008e8a:	f7f7 fe09 	bl	8000aa0 <__addsf3>
    float inv_rate = dt/(last_n_steps_remaining - step_dist_remaining); // Compute adjusted step rate inverse
 8008e8e:	4631      	mov	r1, r6
    dt += prep.dt_remainder; // Apply previous segment partial step execute time
 8008e90:	4604      	mov	r4, r0
    float inv_rate = dt/(last_n_steps_remaining - step_dist_remaining); // Compute adjusted step rate inverse
 8008e92:	4638      	mov	r0, r7
 8008e94:	f7f7 fe02 	bl	8000a9c <__aeabi_fsub>
 8008e98:	4601      	mov	r1, r0
 8008e9a:	4620      	mov	r0, r4
 8008e9c:	f7f7 ffbc 	bl	8000e18 <__aeabi_fdiv>
 8008ea0:	4604      	mov	r4, r0
	uint32_t cycles = (uint32_t)ceilf((TICKS_PER_MICROSECOND * 1000000) *inv_rate * 60); // (cycles/step)
 8008ea2:	4a31      	ldr	r2, [pc, #196]	; (8008f68 <st_prep_buffer+0x40c>)
 8008ea4:	4b31      	ldr	r3, [pc, #196]	; (8008f6c <st_prep_buffer+0x410>)
 8008ea6:	6817      	ldr	r7, [r2, #0]
 8008ea8:	4831      	ldr	r0, [pc, #196]	; (8008f70 <st_prep_buffer+0x414>)
 8008eaa:	fba3 2307 	umull	r2, r3, r3, r7
 8008eae:	0c9b      	lsrs	r3, r3, #18
 8008eb0:	fb00 f003 	mul.w	r0, r0, r3
 8008eb4:	f7f7 fea4 	bl	8000c00 <__aeabi_ui2f>
 8008eb8:	492e      	ldr	r1, [pc, #184]	; (8008f74 <st_prep_buffer+0x418>)
 8008eba:	f7f7 fef9 	bl	8000cb0 <__aeabi_fmul>
 8008ebe:	4621      	mov	r1, r4
 8008ec0:	f7f7 fef6 	bl	8000cb0 <__aeabi_fmul>
 8008ec4:	f002 fb10 	bl	800b4e8 <ceilf>
 8008ec8:	f7f8 f8f4 	bl	80010b4 <__aeabi_f2uiz>
      if (cycles < AMASS_LEVEL1) { prep_segment->amass_level = 0; }
 8008ecc:	4b2a      	ldr	r3, [pc, #168]	; (8008f78 <st_prep_buffer+0x41c>)
 8008ece:	fba3 3707 	umull	r3, r7, r3, r7
 8008ed2:	ebb0 2f57 	cmp.w	r0, r7, lsr #9
 8008ed6:	f080 8137 	bcs.w	8009148 <st_prep_buffer+0x5ec>
 8008eda:	2200      	movs	r2, #0
 8008edc:	9907      	ldr	r1, [sp, #28]
 8008ede:	4b21      	ldr	r3, [pc, #132]	; (8008f64 <st_prep_buffer+0x408>)
 8008ee0:	440b      	add	r3, r1
 8008ee2:	715a      	strb	r2, [r3, #5]
 8008ee4:	460a      	mov	r2, r1
 8008ee6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008eea:	4298      	cmp	r0, r3
 8008eec:	bf28      	it	cs
 8008eee:	4618      	movcs	r0, r3
    segment_buffer_head = segment_next_head;
 8008ef0:	4b22      	ldr	r3, [pc, #136]	; (8008f7c <st_prep_buffer+0x420>)
 8008ef2:	491c      	ldr	r1, [pc, #112]	; (8008f64 <st_prep_buffer+0x408>)
 8008ef4:	781b      	ldrb	r3, [r3, #0]
 8008ef6:	440a      	add	r2, r1
    if ( ++segment_next_head == SEGMENT_BUFFER_SIZE ) { segment_next_head = 0; }
 8008ef8:	1c5f      	adds	r7, r3, #1
 8008efa:	b2ff      	uxtb	r7, r7
 8008efc:	8050      	strh	r0, [r2, #2]
    segment_buffer_head = segment_next_head;
 8008efe:	4a20      	ldr	r2, [pc, #128]	; (8008f80 <st_prep_buffer+0x424>)
    if ( ++segment_next_head == SEGMENT_BUFFER_SIZE ) { segment_next_head = 0; }
 8008f00:	2f0a      	cmp	r7, #10
    segment_buffer_head = segment_next_head;
 8008f02:	7013      	strb	r3, [r2, #0]
    if ( ++segment_next_head == SEGMENT_BUFFER_SIZE ) { segment_next_head = 0; }
 8008f04:	f000 8131 	beq.w	800916a <st_prep_buffer+0x60e>
    pl_block->millimeters = mm_remaining;
 8008f08:	4b1e      	ldr	r3, [pc, #120]	; (8008f84 <st_prep_buffer+0x428>)
    if ( ++segment_next_head == SEGMENT_BUFFER_SIZE ) { segment_next_head = 0; }
 8008f0a:	4a1c      	ldr	r2, [pc, #112]	; (8008f7c <st_prep_buffer+0x420>)
    pl_block->millimeters = mm_remaining;
 8008f0c:	681b      	ldr	r3, [r3, #0]
    if ( ++segment_next_head == SEGMENT_BUFFER_SIZE ) { segment_next_head = 0; }
 8008f0e:	7017      	strb	r7, [r2, #0]
    prep.dt_remainder = (n_steps_remaining - step_dist_remaining)*inv_rate;
 8008f10:	4631      	mov	r1, r6
    pl_block->millimeters = mm_remaining;
 8008f12:	f8c3 b024 	str.w	fp, [r3, #36]	; 0x24
    prep.steps_remaining = n_steps_remaining;
 8008f16:	f8ca 5008 	str.w	r5, [sl, #8]
    prep.dt_remainder = (n_steps_remaining - step_dist_remaining)*inv_rate;
 8008f1a:	4628      	mov	r0, r5
 8008f1c:	f7f7 fdbe 	bl	8000a9c <__aeabi_fsub>
 8008f20:	4621      	mov	r1, r4
 8008f22:	f7f7 fec5 	bl	8000cb0 <__aeabi_fmul>
    if (mm_remaining == prep.mm_complete) {
 8008f26:	f8da 1018 	ldr.w	r1, [sl, #24]
    prep.dt_remainder = (n_steps_remaining - step_dist_remaining)*inv_rate;
 8008f2a:	f8ca 0004 	str.w	r0, [sl, #4]
    if (mm_remaining == prep.mm_complete) {
 8008f2e:	4658      	mov	r0, fp
 8008f30:	f7f8 f852 	bl	8000fd8 <__aeabi_fcmpeq>
 8008f34:	2800      	cmp	r0, #0
 8008f36:	f43f ae1b 	beq.w	8008b70 <st_prep_buffer+0x14>
      if (mm_remaining > 0.0f) { // At end of forced-termination.
 8008f3a:	4658      	mov	r0, fp
 8008f3c:	2100      	movs	r1, #0
 8008f3e:	f7f8 f873 	bl	8001028 <__aeabi_fcmpgt>
 8008f42:	2800      	cmp	r0, #0
 8008f44:	f040 833f 	bne.w	80095c6 <st_prep_buffer+0xa6a>
        if (sys.step_control & STEP_CONTROL_EXECUTE_SYS_MOTION) {
 8008f48:	f018 0304 	ands.w	r3, r8, #4
 8008f4c:	f040 833b 	bne.w	80095c6 <st_prep_buffer+0xa6a>
        pl_block = NULL; // Set pointer to indicate check and load next planner block.
 8008f50:	4a0c      	ldr	r2, [pc, #48]	; (8008f84 <st_prep_buffer+0x428>)
 8008f52:	6013      	str	r3, [r2, #0]
        plan_discard_current_block();
 8008f54:	f7fb fb74 	bl	8004640 <plan_discard_current_block>
 8008f58:	e608      	b.n	8008b6c <st_prep_buffer+0x10>
 8008f5a:	bf00      	nop
 8008f5c:	392ec33e 	.word	0x392ec33e
 8008f60:	200010c8 	.word	0x200010c8
 8008f64:	20000ab8 	.word	0x20000ab8
 8008f68:	20000018 	.word	0x20000018
 8008f6c:	431bde83 	.word	0x431bde83
 8008f70:	000f4240 	.word	0x000f4240
 8008f74:	42700000 	.word	0x42700000
 8008f78:	10624dd3 	.word	0x10624dd3
 8008f7c:	20000b0a 	.word	0x20000b0a
 8008f80:	20000b08 	.word	0x20000b08
 8008f84:	20000a7c 	.word	0x20000a7c
            prep.current_speed += speed_var;
 8008f88:	4649      	mov	r1, r9
 8008f8a:	4638      	mov	r0, r7
 8008f8c:	f7f7 fd88 	bl	8000aa0 <__addsf3>
      dt += time_var; // Add computed ramp time to total segment time.
 8008f90:	4629      	mov	r1, r5
            prep.current_speed += speed_var;
 8008f92:	4607      	mov	r7, r0
      dt += time_var; // Add computed ramp time to total segment time.
 8008f94:	4620      	mov	r0, r4
 8008f96:	f7f7 fd83 	bl	8000aa0 <__addsf3>
 8008f9a:	4604      	mov	r4, r0
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 8008f9c:	4601      	mov	r1, r0
 8008f9e:	4630      	mov	r0, r6
 8008fa0:	f7f8 f842 	bl	8001028 <__aeabi_fcmpgt>
 8008fa4:	2800      	cmp	r0, #0
 8008fa6:	f43f af1d 	beq.w	8008de4 <st_prep_buffer+0x288>
 8008faa:	4621      	mov	r1, r4
 8008fac:	4630      	mov	r0, r6
 8008fae:	f7f7 fd75 	bl	8000a9c <__aeabi_fsub>
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8008fb2:	4641      	mov	r1, r8
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 8008fb4:	4605      	mov	r5, r0
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8008fb6:	4658      	mov	r0, fp
 8008fb8:	f7f8 f836 	bl	8001028 <__aeabi_fcmpgt>
 8008fbc:	2800      	cmp	r0, #0
 8008fbe:	f43f af26 	beq.w	8008e0e <st_prep_buffer+0x2b2>
          speed_var = pl_block->acceleration*time_var;
 8008fc2:	9b00      	ldr	r3, [sp, #0]
 8008fc4:	4628      	mov	r0, r5
 8008fc6:	6a19      	ldr	r1, [r3, #32]
 8008fc8:	f7f7 fe72 	bl	8000cb0 <__aeabi_fmul>
          mm_remaining -= time_var*(prep.current_speed + 0.5f*speed_var);
 8008fcc:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
          speed_var = pl_block->acceleration*time_var;
 8008fd0:	4681      	mov	r9, r0
          mm_remaining -= time_var*(prep.current_speed + 0.5f*speed_var);
 8008fd2:	f7f7 fe6d 	bl	8000cb0 <__aeabi_fmul>
 8008fd6:	4639      	mov	r1, r7
 8008fd8:	f7f7 fd62 	bl	8000aa0 <__addsf3>
 8008fdc:	4629      	mov	r1, r5
 8008fde:	f7f7 fe67 	bl	8000cb0 <__aeabi_fmul>
 8008fe2:	4601      	mov	r1, r0
 8008fe4:	4658      	mov	r0, fp
 8008fe6:	f7f7 fd59 	bl	8000a9c <__aeabi_fsub>
 8008fea:	4683      	mov	fp, r0
          if (mm_remaining < prep.accelerate_until) { // End of acceleration ramp.
 8008fec:	4601      	mov	r1, r0
 8008fee:	9802      	ldr	r0, [sp, #8]
 8008ff0:	f7f8 f81a 	bl	8001028 <__aeabi_fcmpgt>
 8008ff4:	2800      	cmp	r0, #0
 8008ff6:	d0c7      	beq.n	8008f88 <st_prep_buffer+0x42c>
            time_var = 2.0f*(pl_block->millimeters-mm_remaining)/(prep.current_speed+prep.maximum_speed);
 8008ff8:	4639      	mov	r1, r7
 8008ffa:	4650      	mov	r0, sl
 8008ffc:	f7f7 fd50 	bl	8000aa0 <__addsf3>
 8009000:	4601      	mov	r1, r0
 8009002:	9806      	ldr	r0, [sp, #24]
 8009004:	f7f7 ff08 	bl	8000e18 <__aeabi_fdiv>
 8009008:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800900a:	4605      	mov	r5, r0
            prep.current_speed = prep.maximum_speed;
 800900c:	4657      	mov	r7, sl
 800900e:	9303      	str	r3, [sp, #12]
 8009010:	9301      	str	r3, [sp, #4]
            mm_remaining = prep.accelerate_until; // NOTE: 0.0 at EOB
 8009012:	f8dd b008 	ldr.w	fp, [sp, #8]
 8009016:	e6da      	b.n	8008dce <st_prep_buffer+0x272>
          time_var = 2.0f*(mm_remaining-prep.mm_complete)/(prep.current_speed+prep.exit_speed);
 8009018:	4658      	mov	r0, fp
 800901a:	4641      	mov	r1, r8
 800901c:	f7f7 fd3e 	bl	8000a9c <__aeabi_fsub>
 8009020:	4601      	mov	r1, r0
 8009022:	f7f7 fd3d 	bl	8000aa0 <__addsf3>
 8009026:	4639      	mov	r1, r7
 8009028:	9f08      	ldr	r7, [sp, #32]
 800902a:	4605      	mov	r5, r0
 800902c:	4638      	mov	r0, r7
 800902e:	f7f7 fd37 	bl	8000aa0 <__addsf3>
 8009032:	4601      	mov	r1, r0
 8009034:	4628      	mov	r0, r5
 8009036:	f7f7 feef 	bl	8000e18 <__aeabi_fdiv>
          mm_remaining = prep.mm_complete;
 800903a:	46c3      	mov	fp, r8
          time_var = 2.0f*(mm_remaining-prep.mm_complete)/(prep.current_speed+prep.exit_speed);
 800903c:	4605      	mov	r5, r0
 800903e:	e6c6      	b.n	8008dce <st_prep_buffer+0x272>
						mm_remaining -= time_var*(prep.current_speed - 0.5f*speed_var);
 8009040:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8009044:	4648      	mov	r0, r9
 8009046:	f7f7 fe33 	bl	8000cb0 <__aeabi_fmul>
 800904a:	4639      	mov	r1, r7
 800904c:	f7f7 fd26 	bl	8000a9c <__aeabi_fsub>
 8009050:	4629      	mov	r1, r5
 8009052:	f7f7 fe2d 	bl	8000cb0 <__aeabi_fmul>
 8009056:	4601      	mov	r1, r0
 8009058:	4658      	mov	r0, fp
 800905a:	f7f7 fd21 	bl	8000aa0 <__addsf3>
            prep.current_speed -= speed_var;
 800905e:	4649      	mov	r1, r9
						mm_remaining -= time_var*(prep.current_speed - 0.5f*speed_var);
 8009060:	4683      	mov	fp, r0
            prep.current_speed -= speed_var;
 8009062:	4638      	mov	r0, r7
 8009064:	f7f7 fd1a 	bl	8000a9c <__aeabi_fsub>
      dt += time_var; // Add computed ramp time to total segment time.
 8009068:	4629      	mov	r1, r5
            prep.current_speed -= speed_var;
 800906a:	4607      	mov	r7, r0
      dt += time_var; // Add computed ramp time to total segment time.
 800906c:	4620      	mov	r0, r4
 800906e:	f7f7 fd17 	bl	8000aa0 <__addsf3>
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 8009072:	4631      	mov	r1, r6
      dt += time_var; // Add computed ramp time to total segment time.
 8009074:	4604      	mov	r4, r0
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 8009076:	f7f7 ffb9 	bl	8000fec <__aeabi_fcmplt>
 800907a:	2800      	cmp	r0, #0
 800907c:	f43f aeb2 	beq.w	8008de4 <st_prep_buffer+0x288>
 8009080:	4621      	mov	r1, r4
 8009082:	4630      	mov	r0, r6
 8009084:	f7f7 fd0a 	bl	8000a9c <__aeabi_fsub>
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8009088:	4641      	mov	r1, r8
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 800908a:	4605      	mov	r5, r0
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 800908c:	4658      	mov	r0, fp
 800908e:	f7f7 ffcb 	bl	8001028 <__aeabi_fcmpgt>
 8009092:	2800      	cmp	r0, #0
 8009094:	f47f adf3 	bne.w	8008c7e <st_prep_buffer+0x122>
 8009098:	e6b9      	b.n	8008e0e <st_prep_buffer+0x2b2>
      dt += time_var; // Add computed ramp time to total segment time.
 800909a:	4629      	mov	r1, r5
 800909c:	4620      	mov	r0, r4
 800909e:	f7f7 fcff 	bl	8000aa0 <__addsf3>
 80090a2:	4604      	mov	r4, r0
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 80090a4:	4601      	mov	r1, r0
 80090a6:	4630      	mov	r0, r6
 80090a8:	f7f7 ffbe 	bl	8001028 <__aeabi_fcmpgt>
 80090ac:	bb38      	cbnz	r0, 80090fe <st_prep_buffer+0x5a2>
 80090ae:	2301      	movs	r3, #1
 80090b0:	9301      	str	r3, [sp, #4]
 80090b2:	e697      	b.n	8008de4 <st_prep_buffer+0x288>
 80090b4:	4621      	mov	r1, r4
 80090b6:	4630      	mov	r0, r6
 80090b8:	f7f7 fcf0 	bl	8000a9c <__aeabi_fsub>
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 80090bc:	4641      	mov	r1, r8
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 80090be:	4605      	mov	r5, r0
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 80090c0:	4658      	mov	r0, fp
 80090c2:	f7f7 ffb1 	bl	8001028 <__aeabi_fcmpgt>
 80090c6:	2800      	cmp	r0, #0
 80090c8:	f47f ae56 	bne.w	8008d78 <st_prep_buffer+0x21c>
            prep.ramp_type = RAMP_DECEL;
 80090cc:	2302      	movs	r3, #2
 80090ce:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 80090d2:	9303      	str	r3, [sp, #12]
 80090d4:	e69d      	b.n	8008e12 <st_prep_buffer+0x2b6>
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 80090d6:	4621      	mov	r1, r4
 80090d8:	4630      	mov	r0, r6
 80090da:	f7f7 fcdf 	bl	8000a9c <__aeabi_fsub>
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 80090de:	f8dd b008 	ldr.w	fp, [sp, #8]
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 80090e2:	4605      	mov	r5, r0
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 80090e4:	4641      	mov	r1, r8
 80090e6:	4658      	mov	r0, fp
 80090e8:	f7f7 ff9e 	bl	8001028 <__aeabi_fcmpgt>
 80090ec:	2800      	cmp	r0, #0
 80090ee:	f47f ae04 	bne.w	8008cfa <st_prep_buffer+0x19e>
            prep.ramp_type = RAMP_CRUISE;
 80090f2:	2301      	movs	r3, #1
 80090f4:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
            prep.current_speed = prep.maximum_speed;
 80090f8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
            prep.ramp_type = RAMP_CRUISE;
 80090fa:	9303      	str	r3, [sp, #12]
 80090fc:	e689      	b.n	8008e12 <st_prep_buffer+0x2b6>
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 80090fe:	4621      	mov	r1, r4
 8009100:	4630      	mov	r0, r6
 8009102:	f7f7 fccb 	bl	8000a9c <__aeabi_fsub>
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8009106:	4641      	mov	r1, r8
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 8009108:	4605      	mov	r5, r0
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 800910a:	4658      	mov	r0, fp
 800910c:	f7f7 ff8c 	bl	8001028 <__aeabi_fcmpgt>
 8009110:	2800      	cmp	r0, #0
 8009112:	f47f adf5 	bne.w	8008d00 <st_prep_buffer+0x1a4>
 8009116:	e67a      	b.n	8008e0e <st_prep_buffer+0x2b2>
 8009118:	f04f 0301 	mov.w	r3, #1
 800911c:	e57f      	b.n	8008c1e <st_prep_buffer+0xc2>
        if (pl_block->condition & (PL_COND_FLAG_SPINDLE_CW | PL_COND_FLAG_SPINDLE_CCW)) {
 800911e:	9b00      	ldr	r3, [sp, #0]
 8009120:	7d9b      	ldrb	r3, [r3, #22]
 8009122:	f013 0f30 	tst.w	r3, #48	; 0x30
 8009126:	d15c      	bne.n	80091e2 <st_prep_buffer+0x686>
 8009128:	4bb2      	ldr	r3, [pc, #712]	; (80093f4 <st_prep_buffer+0x898>)
 800912a:	f893 8004 	ldrb.w	r8, [r3, #4]
          prep.current_spindle_pwm = SPINDLE_PWM_OFF_VALUE;
 800912e:	2300      	movs	r3, #0
          sys.spindle_speed = 0.0;
 8009130:	2100      	movs	r1, #0
          prep.current_spindle_pwm = SPINDLE_PWM_OFF_VALUE;
 8009132:	4618      	mov	r0, r3
          sys.spindle_speed = 0.0;
 8009134:	4aaf      	ldr	r2, [pc, #700]	; (80093f4 <st_prep_buffer+0x898>)
          prep.current_spindle_pwm = SPINDLE_PWM_OFF_VALUE;
 8009136:	f88a 3034 	strb.w	r3, [sl, #52]	; 0x34
          sys.spindle_speed = 0.0;
 800913a:	6111      	str	r1, [r2, #16]
        bit_false(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 800913c:	4bad      	ldr	r3, [pc, #692]	; (80093f4 <st_prep_buffer+0x898>)
 800913e:	f008 08f7 	and.w	r8, r8, #247	; 0xf7
 8009142:	f883 8004 	strb.w	r8, [r3, #4]
 8009146:	e679      	b.n	8008e3c <st_prep_buffer+0x2e0>
        if (cycles < AMASS_LEVEL2) { prep_segment->amass_level = 1; }
 8009148:	ebb0 2f17 	cmp.w	r0, r7, lsr #8
 800914c:	d240      	bcs.n	80091d0 <st_prep_buffer+0x674>
 800914e:	2301      	movs	r3, #1
 8009150:	4aa9      	ldr	r2, [pc, #676]	; (80093f8 <st_prep_buffer+0x89c>)
 8009152:	9907      	ldr	r1, [sp, #28]
 8009154:	440a      	add	r2, r1
 8009156:	7153      	strb	r3, [r2, #5]
        prep_segment->n_step <<= prep_segment->amass_level;
 8009158:	4aa7      	ldr	r2, [pc, #668]	; (80093f8 <st_prep_buffer+0x89c>)
 800915a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800915c:	fa09 f903 	lsl.w	r9, r9, r3
 8009160:	f822 9031 	strh.w	r9, [r2, r1, lsl #3]
        cycles >>= prep_segment->amass_level;
 8009164:	40d8      	lsrs	r0, r3
 8009166:	9a07      	ldr	r2, [sp, #28]
 8009168:	e6bd      	b.n	8008ee6 <st_prep_buffer+0x38a>
    if ( ++segment_next_head == SEGMENT_BUFFER_SIZE ) { segment_next_head = 0; }
 800916a:	2200      	movs	r2, #0
    pl_block->millimeters = mm_remaining;
 800916c:	4ba3      	ldr	r3, [pc, #652]	; (80093fc <st_prep_buffer+0x8a0>)
    prep.steps_remaining = n_steps_remaining;
 800916e:	f8ca 5008 	str.w	r5, [sl, #8]
    pl_block->millimeters = mm_remaining;
 8009172:	681b      	ldr	r3, [r3, #0]
    prep.dt_remainder = (n_steps_remaining - step_dist_remaining)*inv_rate;
 8009174:	4628      	mov	r0, r5
    if ( ++segment_next_head == SEGMENT_BUFFER_SIZE ) { segment_next_head = 0; }
 8009176:	4da2      	ldr	r5, [pc, #648]	; (8009400 <st_prep_buffer+0x8a4>)
    prep.dt_remainder = (n_steps_remaining - step_dist_remaining)*inv_rate;
 8009178:	4631      	mov	r1, r6
    if ( ++segment_next_head == SEGMENT_BUFFER_SIZE ) { segment_next_head = 0; }
 800917a:	702a      	strb	r2, [r5, #0]
    pl_block->millimeters = mm_remaining;
 800917c:	f8c3 b024 	str.w	fp, [r3, #36]	; 0x24
    prep.dt_remainder = (n_steps_remaining - step_dist_remaining)*inv_rate;
 8009180:	f7f7 fc8c 	bl	8000a9c <__aeabi_fsub>
 8009184:	4621      	mov	r1, r4
 8009186:	f7f7 fd93 	bl	8000cb0 <__aeabi_fmul>
    if (mm_remaining == prep.mm_complete) {
 800918a:	4659      	mov	r1, fp
    prep.dt_remainder = (n_steps_remaining - step_dist_remaining)*inv_rate;
 800918c:	f8ca 0004 	str.w	r0, [sl, #4]
    if (mm_remaining == prep.mm_complete) {
 8009190:	f8da 0018 	ldr.w	r0, [sl, #24]
 8009194:	f7f7 ff20 	bl	8000fd8 <__aeabi_fcmpeq>
 8009198:	2800      	cmp	r0, #0
 800919a:	f47f aece 	bne.w	8008f3a <st_prep_buffer+0x3de>
 800919e:	4607      	mov	r7, r0
  while (segment_buffer_tail != segment_next_head) { // Check if we need to fill the buffer.
 80091a0:	4b98      	ldr	r3, [pc, #608]	; (8009404 <st_prep_buffer+0x8a8>)
 80091a2:	781b      	ldrb	r3, [r3, #0]
 80091a4:	42bb      	cmp	r3, r7
 80091a6:	f47f ace8 	bne.w	8008b7a <st_prep_buffer+0x1e>
}
 80091aa:	b011      	add	sp, #68	; 0x44
 80091ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (pl_block->condition & (PL_COND_FLAG_SPINDLE_CW | PL_COND_FLAG_SPINDLE_CCW)) {
 80091b0:	9b00      	ldr	r3, [sp, #0]
 80091b2:	7d9b      	ldrb	r3, [r3, #22]
 80091b4:	f013 0f30 	tst.w	r3, #48	; 0x30
 80091b8:	d0b9      	beq.n	800912e <st_prep_buffer+0x5d2>
          float rpm = pl_block->spindle_speed;
 80091ba:	9b00      	ldr	r3, [sp, #0]
 80091bc:	6b58      	ldr	r0, [r3, #52]	; 0x34
          prep.current_spindle_pwm = spindle_compute_pwm_value(rpm);
 80091be:	f7fe ffab 	bl	8008118 <spindle_compute_pwm_value>
 80091c2:	4b8c      	ldr	r3, [pc, #560]	; (80093f4 <st_prep_buffer+0x898>)
 80091c4:	b2c0      	uxtb	r0, r0
 80091c6:	f88a 0034 	strb.w	r0, [sl, #52]	; 0x34
 80091ca:	f893 8004 	ldrb.w	r8, [r3, #4]
 80091ce:	e7b5      	b.n	800913c <st_prep_buffer+0x5e0>
        else if (cycles < AMASS_LEVEL3) { prep_segment->amass_level = 2; }
 80091d0:	ebb0 1fd7 	cmp.w	r0, r7, lsr #7
 80091d4:	d25d      	bcs.n	8009292 <st_prep_buffer+0x736>
 80091d6:	2302      	movs	r3, #2
 80091d8:	4a87      	ldr	r2, [pc, #540]	; (80093f8 <st_prep_buffer+0x89c>)
 80091da:	9907      	ldr	r1, [sp, #28]
 80091dc:	440a      	add	r2, r1
 80091de:	7153      	strb	r3, [r2, #5]
 80091e0:	e7ba      	b.n	8009158 <st_prep_buffer+0x5fc>
          float rpm = pl_block->spindle_speed;
 80091e2:	9b00      	ldr	r3, [sp, #0]
          if (st_prep_block->is_pwm_rate_adjusted) { rpm *= (prep.current_speed * prep.inv_rate); }
 80091e4:	f8da 1030 	ldr.w	r1, [sl, #48]	; 0x30
          float rpm = pl_block->spindle_speed;
 80091e8:	6b5d      	ldr	r5, [r3, #52]	; 0x34
          if (st_prep_block->is_pwm_rate_adjusted) { rpm *= (prep.current_speed * prep.inv_rate); }
 80091ea:	f8da 001c 	ldr.w	r0, [sl, #28]
 80091ee:	f7f7 fd5f 	bl	8000cb0 <__aeabi_fmul>
 80091f2:	4629      	mov	r1, r5
 80091f4:	f7f7 fd5c 	bl	8000cb0 <__aeabi_fmul>
 80091f8:	e7e1      	b.n	80091be <st_prep_buffer+0x662>
      if (sys.step_control & STEP_CONTROL_EXECUTE_SYS_MOTION) { pl_block = plan_get_system_motion_block(); }
 80091fa:	4b7e      	ldr	r3, [pc, #504]	; (80093f4 <st_prep_buffer+0x898>)
 80091fc:	791b      	ldrb	r3, [r3, #4]
 80091fe:	075c      	lsls	r4, r3, #29
 8009200:	d54e      	bpl.n	80092a0 <st_prep_buffer+0x744>
 8009202:	f7fb fa37 	bl	8004674 <plan_get_system_motion_block>
 8009206:	4602      	mov	r2, r0
 8009208:	4b7c      	ldr	r3, [pc, #496]	; (80093fc <st_prep_buffer+0x8a0>)
 800920a:	9000      	str	r0, [sp, #0]
 800920c:	6018      	str	r0, [r3, #0]
      if (pl_block == NULL) { return; } // No planner blocks. Exit.
 800920e:	2a00      	cmp	r2, #0
 8009210:	d0cb      	beq.n	80091aa <st_prep_buffer+0x64e>
      if (prep.recalculate_flag & PREP_FLAG_RECALCULATE) {
 8009212:	f8df a204 	ldr.w	sl, [pc, #516]	; 8009418 <st_prep_buffer+0x8bc>
 8009216:	f89a 4001 	ldrb.w	r4, [sl, #1]
 800921a:	f014 0101 	ands.w	r1, r4, #1
 800921e:	d046      	beq.n	80092ae <st_prep_buffer+0x752>
          prep.recalculate_flag = false;
 8009220:	2300      	movs	r3, #0
 8009222:	4974      	ldr	r1, [pc, #464]	; (80093f4 <st_prep_buffer+0x898>)
 8009224:	f88a 3001 	strb.w	r3, [sl, #1]
 8009228:	790d      	ldrb	r5, [r1, #4]
 800922a:	4b77      	ldr	r3, [pc, #476]	; (8009408 <st_prep_buffer+0x8ac>)
 800922c:	f8d2 b024 	ldr.w	fp, [r2, #36]	; 0x24
 8009230:	f005 0602 	and.w	r6, r5, #2
 8009234:	930e      	str	r3, [sp, #56]	; 0x38
			prep.mm_complete = 0.0f; // Default velocity profile complete at 0.0mm from end of block.
 8009236:	2200      	movs	r2, #0
			float inv_2_accel = 0.5f/pl_block->acceleration;
 8009238:	9b00      	ldr	r3, [sp, #0]
			prep.mm_complete = 0.0f; // Default velocity profile complete at 0.0mm from end of block.
 800923a:	f8ca 2018 	str.w	r2, [sl, #24]
			float inv_2_accel = 0.5f/pl_block->acceleration;
 800923e:	6a1f      	ldr	r7, [r3, #32]
 8009240:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8009244:	4639      	mov	r1, r7
 8009246:	f7f7 fde7 	bl	8000e18 <__aeabi_fdiv>
 800924a:	4604      	mov	r4, r0
			if (sys.step_control & STEP_CONTROL_EXECUTE_HOLD) { // [Forced Deceleration to Zero Velocity]
 800924c:	2e00      	cmp	r6, #0
 800924e:	f000 808e 	beq.w	800936e <st_prep_buffer+0x812>
				prep.ramp_type = RAMP_DECEL;
 8009252:	f04f 0802 	mov.w	r8, #2
				float decel_dist = pl_block->millimeters - inv_2_accel*pl_block->entry_speed_sqr;
 8009256:	9b00      	ldr	r3, [sp, #0]
				prep.ramp_type = RAMP_DECEL;
 8009258:	f88a 8014 	strb.w	r8, [sl, #20]
				float decel_dist = pl_block->millimeters - inv_2_accel*pl_block->entry_speed_sqr;
 800925c:	699c      	ldr	r4, [r3, #24]
 800925e:	4621      	mov	r1, r4
 8009260:	f7f7 fd26 	bl	8000cb0 <__aeabi_fmul>
 8009264:	4601      	mov	r1, r0
 8009266:	4658      	mov	r0, fp
 8009268:	f7f7 fc18 	bl	8000a9c <__aeabi_fsub>
				if (decel_dist < 0.0f) {
 800926c:	2100      	movs	r1, #0
				float decel_dist = pl_block->millimeters - inv_2_accel*pl_block->entry_speed_sqr;
 800926e:	4606      	mov	r6, r0
				if (decel_dist < 0.0f) {
 8009270:	f7f7 febc 	bl	8000fec <__aeabi_fcmplt>
 8009274:	2800      	cmp	r0, #0
 8009276:	f040 814a 	bne.w	800950e <st_prep_buffer+0x9b2>
					prep.exit_speed = 0.0f;
 800927a:	2300      	movs	r3, #0
					prep.mm_complete = decel_dist; // End of feed hold.
 800927c:	f8ca 6018 	str.w	r6, [sl, #24]
					prep.exit_speed = 0.0f;
 8009280:	f8ca 3024 	str.w	r3, [sl, #36]	; 0x24
 8009284:	f8cd 8004 	str.w	r8, [sp, #4]
        bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM); // Force update whenever updating block.
 8009288:	4b5a      	ldr	r3, [pc, #360]	; (80093f4 <st_prep_buffer+0x898>)
 800928a:	f045 0508 	orr.w	r5, r5, #8
 800928e:	711d      	strb	r5, [r3, #4]
 8009290:	e482      	b.n	8008b98 <st_prep_buffer+0x3c>
        else { prep_segment->amass_level = 3; }
 8009292:	2203      	movs	r2, #3
 8009294:	4958      	ldr	r1, [pc, #352]	; (80093f8 <st_prep_buffer+0x89c>)
 8009296:	9f07      	ldr	r7, [sp, #28]
 8009298:	4613      	mov	r3, r2
 800929a:	4439      	add	r1, r7
 800929c:	714a      	strb	r2, [r1, #5]
 800929e:	e75b      	b.n	8009158 <st_prep_buffer+0x5fc>
      else { pl_block = plan_get_current_block(); }
 80092a0:	f7fb f9f4 	bl	800468c <plan_get_current_block>
 80092a4:	4b55      	ldr	r3, [pc, #340]	; (80093fc <st_prep_buffer+0x8a0>)
 80092a6:	4602      	mov	r2, r0
 80092a8:	9000      	str	r0, [sp, #0]
 80092aa:	6018      	str	r0, [r3, #0]
 80092ac:	e7af      	b.n	800920e <st_prep_buffer+0x6b2>
  block_index++;
 80092ae:	f89a 2000 	ldrb.w	r2, [sl]
  if ( block_index == (SEGMENT_BUFFER_SIZE-1) ) { return(0); }
 80092b2:	4b56      	ldr	r3, [pc, #344]	; (800940c <st_prep_buffer+0x8b0>)
  block_index++;
 80092b4:	3201      	adds	r2, #1
 80092b6:	b2d2      	uxtb	r2, r2
  if ( block_index == (SEGMENT_BUFFER_SIZE-1) ) { return(0); }
 80092b8:	2a09      	cmp	r2, #9
 80092ba:	f000 8119 	beq.w	80094f0 <st_prep_buffer+0x994>
 80092be:	4611      	mov	r1, r2
 80092c0:	eb02 0742 	add.w	r7, r2, r2, lsl #1
 80092c4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
          for (idx=0; idx<N_AXIS; idx++) { st_prep_block->steps[idx] = pl_block->steps[idx] << MAX_AMASS_LEVEL; }
 80092c8:	9e00      	ldr	r6, [sp, #0]
        prep.st_block_index = st_next_block_index(prep.st_block_index);
 80092ca:	f88a 2000 	strb.w	r2, [sl]
          for (idx=0; idx<N_AXIS; idx++) { st_prep_block->steps[idx] = pl_block->steps[idx] << MAX_AMASS_LEVEL; }
 80092ce:	4635      	mov	r5, r6
 80092d0:	6830      	ldr	r0, [r6, #0]
 80092d2:	6872      	ldr	r2, [r6, #4]
        st_prep_block->direction_bits = pl_block->direction_bits;
 80092d4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
          for (idx=0; idx<N_AXIS; idx++) { st_prep_block->steps[idx] = pl_block->steps[idx] << MAX_AMASS_LEVEL; }
 80092d8:	00c0      	lsls	r0, r0, #3
 80092da:	68ad      	ldr	r5, [r5, #8]
        st_prep_block->direction_bits = pl_block->direction_bits;
 80092dc:	8ab6      	ldrh	r6, [r6, #20]
          for (idx=0; idx<N_AXIS; idx++) { st_prep_block->steps[idx] = pl_block->steps[idx] << MAX_AMASS_LEVEL; }
 80092de:	f843 0031 	str.w	r0, [r3, r1, lsl #3]
 80092e2:	9800      	ldr	r0, [sp, #0]
        st_prep_block->direction_bits = pl_block->direction_bits;
 80092e4:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
          for (idx=0; idx<N_AXIS; idx++) { st_prep_block->steps[idx] = pl_block->steps[idx] << MAX_AMASS_LEVEL; }
 80092e8:	00d2      	lsls	r2, r2, #3
 80092ea:	68c1      	ldr	r1, [r0, #12]
          st_prep_block->step_event_count = pl_block->step_event_count << MAX_AMASS_LEVEL;
 80092ec:	6900      	ldr	r0, [r0, #16]
          for (idx=0; idx<N_AXIS; idx++) { st_prep_block->steps[idx] = pl_block->steps[idx] << MAX_AMASS_LEVEL; }
 80092ee:	605a      	str	r2, [r3, #4]
        st_prep_block = &st_block_buffer[prep.st_block_index];
 80092f0:	4a45      	ldr	r2, [pc, #276]	; (8009408 <st_prep_buffer+0x8ac>)
        st_prep_block->direction_bits = pl_block->direction_bits;
 80092f2:	829e      	strh	r6, [r3, #20]
        st_prep_block = &st_block_buffer[prep.st_block_index];
 80092f4:	4616      	mov	r6, r2
          for (idx=0; idx<N_AXIS; idx++) { st_prep_block->steps[idx] = pl_block->steps[idx] << MAX_AMASS_LEVEL; }
 80092f6:	00c9      	lsls	r1, r1, #3
 80092f8:	00ed      	lsls	r5, r5, #3
        st_prep_block = &st_block_buffer[prep.st_block_index];
 80092fa:	920e      	str	r2, [sp, #56]	; 0x38
          st_prep_block->step_event_count = pl_block->step_event_count << MAX_AMASS_LEVEL;
 80092fc:	00c2      	lsls	r2, r0, #3
          for (idx=0; idx<N_AXIS; idx++) { st_prep_block->steps[idx] = pl_block->steps[idx] << MAX_AMASS_LEVEL; }
 80092fe:	609d      	str	r5, [r3, #8]
 8009300:	60d9      	str	r1, [r3, #12]
          st_prep_block->step_event_count = pl_block->step_event_count << MAX_AMASS_LEVEL;
 8009302:	611a      	str	r2, [r3, #16]
        st_prep_block = &st_block_buffer[prep.st_block_index];
 8009304:	6037      	str	r7, [r6, #0]
        prep.steps_remaining = (float)pl_block->step_event_count;
 8009306:	f7f7 fc7b 	bl	8000c00 <__aeabi_ui2f>
        prep.step_per_mm = prep.steps_remaining/pl_block->millimeters;
 800930a:	9d00      	ldr	r5, [sp, #0]
        prep.steps_remaining = (float)pl_block->step_event_count;
 800930c:	f8ca 0008 	str.w	r0, [sl, #8]
        prep.step_per_mm = prep.steps_remaining/pl_block->millimeters;
 8009310:	f8d5 b024 	ldr.w	fp, [r5, #36]	; 0x24
 8009314:	4659      	mov	r1, fp
 8009316:	f7f7 fd7f 	bl	8000e18 <__aeabi_fdiv>
 800931a:	4601      	mov	r1, r0
        prep.req_mm_increment = REQ_MM_INCREMENT_SCALAR/prep.step_per_mm;
 800931c:	483c      	ldr	r0, [pc, #240]	; (8009410 <st_prep_buffer+0x8b4>)
        prep.step_per_mm = prep.steps_remaining/pl_block->millimeters;
 800931e:	f8ca 100c 	str.w	r1, [sl, #12]
        prep.req_mm_increment = REQ_MM_INCREMENT_SCALAR/prep.step_per_mm;
 8009322:	f7f7 fd79 	bl	8000e18 <__aeabi_fdiv>
        if ((sys.step_control & STEP_CONTROL_EXECUTE_HOLD) || (prep.recalculate_flag & PREP_FLAG_DECEL_OVERRIDE)) {
 8009326:	4b33      	ldr	r3, [pc, #204]	; (80093f4 <st_prep_buffer+0x898>)
        prep.req_mm_increment = REQ_MM_INCREMENT_SCALAR/prep.step_per_mm;
 8009328:	f8ca 0010 	str.w	r0, [sl, #16]
        if ((sys.step_control & STEP_CONTROL_EXECUTE_HOLD) || (prep.recalculate_flag & PREP_FLAG_DECEL_OVERRIDE)) {
 800932c:	791d      	ldrb	r5, [r3, #4]
        prep.dt_remainder = 0.0f; // Reset for new segment block
 800932e:	2300      	movs	r3, #0
        if ((sys.step_control & STEP_CONTROL_EXECUTE_HOLD) || (prep.recalculate_flag & PREP_FLAG_DECEL_OVERRIDE)) {
 8009330:	f015 0602 	ands.w	r6, r5, #2
        prep.dt_remainder = 0.0f; // Reset for new segment block
 8009334:	f8ca 3004 	str.w	r3, [sl, #4]
        if ((sys.step_control & STEP_CONTROL_EXECUTE_HOLD) || (prep.recalculate_flag & PREP_FLAG_DECEL_OVERRIDE)) {
 8009338:	d170      	bne.n	800941c <st_prep_buffer+0x8c0>
 800933a:	f014 0808 	ands.w	r8, r4, #8
 800933e:	d16d      	bne.n	800941c <st_prep_buffer+0x8c0>
          prep.current_speed = sqrtf(pl_block->entry_speed_sqr);
 8009340:	9b00      	ldr	r3, [sp, #0]
 8009342:	6998      	ldr	r0, [r3, #24]
 8009344:	f002 f9e8 	bl	800b718 <sqrtf>
        if (settings.flags & BITFLAG_LASER_MODE) {
 8009348:	4b32      	ldr	r3, [pc, #200]	; (8009414 <st_prep_buffer+0x8b8>)
          prep.current_speed = sqrtf(pl_block->entry_speed_sqr);
 800934a:	f8ca 001c 	str.w	r0, [sl, #28]
        if (settings.flags & BITFLAG_LASER_MODE) {
 800934e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
        st_prep_block->is_pwm_rate_adjusted = false;
 8009352:	f887 8016 	strb.w	r8, [r7, #22]
        if (settings.flags & BITFLAG_LASER_MODE) {
 8009356:	0799      	lsls	r1, r3, #30
 8009358:	d475      	bmi.n	8009446 <st_prep_buffer+0x8ea>
			prep.mm_complete = 0.0f; // Default velocity profile complete at 0.0mm from end of block.
 800935a:	2300      	movs	r3, #0
 800935c:	f8ca 3018 	str.w	r3, [sl, #24]
			float inv_2_accel = 0.5f/pl_block->acceleration;
 8009360:	9b00      	ldr	r3, [sp, #0]
 8009362:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8009366:	6a19      	ldr	r1, [r3, #32]
 8009368:	f7f7 fd56 	bl	8000e18 <__aeabi_fdiv>
 800936c:	4604      	mov	r4, r0
				prep.ramp_type = RAMP_ACCEL; // Initialize as acceleration ramp.
 800936e:	2300      	movs	r3, #0
 8009370:	f88a 3014 	strb.w	r3, [sl, #20]
        if (sys.step_control & STEP_CONTROL_EXECUTE_SYS_MOTION) {
 8009374:	076b      	lsls	r3, r5, #29
				prep.accelerate_until = pl_block->millimeters;
 8009376:	f8ca b028 	str.w	fp, [sl, #40]	; 0x28
        if (sys.step_control & STEP_CONTROL_EXECUTE_SYS_MOTION) {
 800937a:	f140 80bc 	bpl.w	80094f6 <st_prep_buffer+0x99a>
          prep.exit_speed = exit_speed_sqr = 0.0f; // Enforce stop at end of system motion.
 800937e:	2300      	movs	r3, #0
 8009380:	4698      	mov	r8, r3
 8009382:	9800      	ldr	r0, [sp, #0]
 8009384:	f8ca 3024 	str.w	r3, [sl, #36]	; 0x24
        nominal_speed = plan_compute_profile_nominal_speed(pl_block);
 8009388:	f7fb f9bc 	bl	8004704 <plan_compute_profile_nominal_speed>
				float nominal_speed_sqr = nominal_speed*nominal_speed;
 800938c:	4601      	mov	r1, r0
        nominal_speed = plan_compute_profile_nominal_speed(pl_block);
 800938e:	4681      	mov	r9, r0
				float nominal_speed_sqr = nominal_speed*nominal_speed;
 8009390:	f7f7 fc8e 	bl	8000cb0 <__aeabi_fmul>
								0.5f*(pl_block->millimeters+inv_2_accel*(pl_block->entry_speed_sqr-exit_speed_sqr));
 8009394:	4b19      	ldr	r3, [pc, #100]	; (80093fc <st_prep_buffer+0x8a0>)
				float nominal_speed_sqr = nominal_speed*nominal_speed;
 8009396:	4606      	mov	r6, r0
								0.5f*(pl_block->millimeters+inv_2_accel*(pl_block->entry_speed_sqr-exit_speed_sqr));
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	699d      	ldr	r5, [r3, #24]
 800939c:	9300      	str	r3, [sp, #0]
        if (pl_block->entry_speed_sqr > nominal_speed_sqr) { // Only occurs during override reductions.
 800939e:	4629      	mov	r1, r5
								0.5f*(pl_block->millimeters+inv_2_accel*(pl_block->entry_speed_sqr-exit_speed_sqr));
 80093a0:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
        if (pl_block->entry_speed_sqr > nominal_speed_sqr) { // Only occurs during override reductions.
 80093a4:	f7f7 fe22 	bl	8000fec <__aeabi_fcmplt>
 80093a8:	2800      	cmp	r0, #0
 80093aa:	d068      	beq.n	800947e <st_prep_buffer+0x922>
          prep.accelerate_until = pl_block->millimeters - inv_2_accel*(pl_block->entry_speed_sqr-nominal_speed_sqr);
 80093ac:	4629      	mov	r1, r5
 80093ae:	4630      	mov	r0, r6
 80093b0:	f7f7 fb74 	bl	8000a9c <__aeabi_fsub>
 80093b4:	4621      	mov	r1, r4
 80093b6:	f7f7 fc7b 	bl	8000cb0 <__aeabi_fmul>
 80093ba:	4659      	mov	r1, fp
 80093bc:	f7f7 fb70 	bl	8000aa0 <__addsf3>
          if (prep.accelerate_until <= 0.0f) { // Deceleration-only.
 80093c0:	2100      	movs	r1, #0
          prep.accelerate_until = pl_block->millimeters - inv_2_accel*(pl_block->entry_speed_sqr-nominal_speed_sqr);
 80093c2:	f8ca 0028 	str.w	r0, [sl, #40]	; 0x28
          if (prep.accelerate_until <= 0.0f) { // Deceleration-only.
 80093c6:	f7f7 fe1b 	bl	8001000 <__aeabi_fcmple>
 80093ca:	2800      	cmp	r0, #0
 80093cc:	f040 80c5 	bne.w	800955a <st_prep_buffer+0x9fe>
            prep.decelerate_after = inv_2_accel*(nominal_speed_sqr-exit_speed_sqr); // Should always be >= 0.0 due to planner reinit.
 80093d0:	4641      	mov	r1, r8
 80093d2:	4630      	mov	r0, r6
 80093d4:	f7f7 fb62 	bl	8000a9c <__aeabi_fsub>
 80093d8:	4621      	mov	r1, r4
 80093da:	f7f7 fc69 	bl	8000cb0 <__aeabi_fmul>
            prep.ramp_type = RAMP_DECEL_OVERRIDE;
 80093de:	2303      	movs	r3, #3
 80093e0:	f88a 3014 	strb.w	r3, [sl, #20]
 80093e4:	9301      	str	r3, [sp, #4]
 80093e6:	4b03      	ldr	r3, [pc, #12]	; (80093f4 <st_prep_buffer+0x898>)
            prep.decelerate_after = inv_2_accel*(nominal_speed_sqr-exit_speed_sqr); // Should always be >= 0.0 due to planner reinit.
 80093e8:	f8ca 002c 	str.w	r0, [sl, #44]	; 0x2c
						prep.maximum_speed = nominal_speed;
 80093ec:	f8ca 9020 	str.w	r9, [sl, #32]
 80093f0:	791d      	ldrb	r5, [r3, #4]
 80093f2:	e749      	b.n	8009288 <st_prep_buffer+0x72c>
 80093f4:	200010c8 	.word	0x200010c8
 80093f8:	20000ab8 	.word	0x20000ab8
 80093fc:	20000a7c 	.word	0x20000a7c
 8009400:	20000b0a 	.word	0x20000b0a
 8009404:	20000b09 	.word	0x20000b09
 8009408:	20000c18 	.word	0x20000c18
 800940c:	20000b40 	.word	0x20000b40
 8009410:	3fa00000 	.word	0x3fa00000
 8009414:	20001404 	.word	0x20001404
 8009418:	20000a80 	.word	0x20000a80
          prep.current_speed = prep.exit_speed;
 800941c:	f8da 1024 	ldr.w	r1, [sl, #36]	; 0x24
          prep.recalculate_flag &= ~(PREP_FLAG_DECEL_OVERRIDE);
 8009420:	f024 0408 	bic.w	r4, r4, #8
          prep.current_speed = prep.exit_speed;
 8009424:	f8ca 101c 	str.w	r1, [sl, #28]
          pl_block->entry_speed_sqr = prep.exit_speed*prep.exit_speed;
 8009428:	4608      	mov	r0, r1
 800942a:	f7f7 fc41 	bl	8000cb0 <__aeabi_fmul>
        st_prep_block->is_pwm_rate_adjusted = false;
 800942e:	2200      	movs	r2, #0
          pl_block->entry_speed_sqr = prep.exit_speed*prep.exit_speed;
 8009430:	9900      	ldr	r1, [sp, #0]
        if (settings.flags & BITFLAG_LASER_MODE) {
 8009432:	4b72      	ldr	r3, [pc, #456]	; (80095fc <st_prep_buffer+0xaa0>)
          pl_block->entry_speed_sqr = prep.exit_speed*prep.exit_speed;
 8009434:	6188      	str	r0, [r1, #24]
        if (settings.flags & BITFLAG_LASER_MODE) {
 8009436:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
          prep.recalculate_flag &= ~(PREP_FLAG_DECEL_OVERRIDE);
 800943a:	f88a 4001 	strb.w	r4, [sl, #1]
        if (settings.flags & BITFLAG_LASER_MODE) {
 800943e:	0798      	lsls	r0, r3, #30
        st_prep_block->is_pwm_rate_adjusted = false;
 8009440:	75ba      	strb	r2, [r7, #22]
        if (settings.flags & BITFLAG_LASER_MODE) {
 8009442:	f57f aef8 	bpl.w	8009236 <st_prep_buffer+0x6da>
          if (pl_block->condition & PL_COND_FLAG_SPINDLE_CCW) {
 8009446:	9c00      	ldr	r4, [sp, #0]
 8009448:	7da3      	ldrb	r3, [r4, #22]
 800944a:	069a      	lsls	r2, r3, #26
 800944c:	f57f aef3 	bpl.w	8009236 <st_prep_buffer+0x6da>
            prep.inv_rate = 1.0f / pl_block->programmed_rate;
 8009450:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009452:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8009456:	f7f7 fcdf 	bl	8000e18 <__aeabi_fdiv>
            st_prep_block->is_pwm_rate_adjusted = true;
 800945a:	2301      	movs	r3, #1
 800945c:	75bb      	strb	r3, [r7, #22]
 800945e:	4b68      	ldr	r3, [pc, #416]	; (8009600 <st_prep_buffer+0xaa4>)
 8009460:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 8009464:	791d      	ldrb	r5, [r3, #4]
            prep.inv_rate = 1.0f / pl_block->programmed_rate;
 8009466:	f8ca 0030 	str.w	r0, [sl, #48]	; 0x30
 800946a:	f005 0602 	and.w	r6, r5, #2
 800946e:	e6e2      	b.n	8009236 <st_prep_buffer+0x6da>
            prep.ramp_type = RAMP_CRUISE;
 8009470:	2301      	movs	r3, #1
 8009472:	46bb      	mov	fp, r7
 8009474:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
            prep.current_speed = prep.maximum_speed;
 8009478:	9f0d      	ldr	r7, [sp, #52]	; 0x34
            prep.ramp_type = RAMP_CRUISE;
 800947a:	9303      	str	r3, [sp, #12]
 800947c:	e4c9      	b.n	8008e12 <st_prep_buffer+0x2b6>
								0.5f*(pl_block->millimeters+inv_2_accel*(pl_block->entry_speed_sqr-exit_speed_sqr));
 800947e:	4641      	mov	r1, r8
 8009480:	4628      	mov	r0, r5
 8009482:	f7f7 fb0b 	bl	8000a9c <__aeabi_fsub>
 8009486:	4621      	mov	r1, r4
 8009488:	f7f7 fc12 	bl	8000cb0 <__aeabi_fmul>
 800948c:	4659      	mov	r1, fp
 800948e:	f7f7 fb07 	bl	8000aa0 <__addsf3>
				float intersect_distance =
 8009492:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8009496:	f7f7 fc0b 	bl	8000cb0 <__aeabi_fmul>
				} else if (intersect_distance > 0.0f) {
 800949a:	2100      	movs	r1, #0
				float intersect_distance =
 800949c:	4607      	mov	r7, r0
				} else if (intersect_distance > 0.0f) {
 800949e:	f7f7 fdc3 	bl	8001028 <__aeabi_fcmpgt>
 80094a2:	2800      	cmp	r0, #0
 80094a4:	d04c      	beq.n	8009540 <st_prep_buffer+0x9e4>
					if (intersect_distance < pl_block->millimeters) { // Either trapezoid or triangle types
 80094a6:	4639      	mov	r1, r7
 80094a8:	4658      	mov	r0, fp
 80094aa:	f7f7 fdbd 	bl	8001028 <__aeabi_fcmpgt>
 80094ae:	2800      	cmp	r0, #0
 80094b0:	d03f      	beq.n	8009532 <st_prep_buffer+0x9d6>
						prep.decelerate_after = inv_2_accel*(nominal_speed_sqr-exit_speed_sqr);
 80094b2:	4641      	mov	r1, r8
 80094b4:	4630      	mov	r0, r6
 80094b6:	f7f7 faf1 	bl	8000a9c <__aeabi_fsub>
 80094ba:	4621      	mov	r1, r4
 80094bc:	f7f7 fbf8 	bl	8000cb0 <__aeabi_fmul>
 80094c0:	4601      	mov	r1, r0
						if (prep.decelerate_after < intersect_distance) { // Trapezoid type
 80094c2:	4638      	mov	r0, r7
						prep.decelerate_after = inv_2_accel*(nominal_speed_sqr-exit_speed_sqr);
 80094c4:	f8ca 102c 	str.w	r1, [sl, #44]	; 0x2c
						if (prep.decelerate_after < intersect_distance) { // Trapezoid type
 80094c8:	f7f7 fdae 	bl	8001028 <__aeabi_fcmpgt>
 80094cc:	2800      	cmp	r0, #0
 80094ce:	d061      	beq.n	8009594 <st_prep_buffer+0xa38>
							prep.maximum_speed = nominal_speed;
 80094d0:	f8ca 9020 	str.w	r9, [sl, #32]
							if (pl_block->entry_speed_sqr == nominal_speed_sqr) {
 80094d4:	4629      	mov	r1, r5
 80094d6:	4630      	mov	r0, r6
 80094d8:	f7f7 fd7e 	bl	8000fd8 <__aeabi_fcmpeq>
 80094dc:	2800      	cmp	r0, #0
 80094de:	d07a      	beq.n	80095d6 <st_prep_buffer+0xa7a>
								prep.ramp_type = RAMP_CRUISE;
 80094e0:	2301      	movs	r3, #1
 80094e2:	4a47      	ldr	r2, [pc, #284]	; (8009600 <st_prep_buffer+0xaa4>)
 80094e4:	f88a 3014 	strb.w	r3, [sl, #20]
 80094e8:	7915      	ldrb	r5, [r2, #4]
 80094ea:	9301      	str	r3, [sp, #4]
 80094ec:	e6cc      	b.n	8009288 <st_prep_buffer+0x72c>
 80094ee:	4770      	bx	lr
  if ( block_index == (SEGMENT_BUFFER_SIZE-1) ) { return(0); }
 80094f0:	460a      	mov	r2, r1
 80094f2:	461f      	mov	r7, r3
 80094f4:	e6e8      	b.n	80092c8 <st_prep_buffer+0x76c>
          exit_speed_sqr = plan_get_exec_block_exit_speed_sqr();
 80094f6:	f7fb f8dd 	bl	80046b4 <plan_get_exec_block_exit_speed_sqr>
 80094fa:	4680      	mov	r8, r0
          prep.exit_speed = sqrtf(exit_speed_sqr);
 80094fc:	f002 f90c 	bl	800b718 <sqrtf>
 8009500:	4b40      	ldr	r3, [pc, #256]	; (8009604 <st_prep_buffer+0xaa8>)
 8009502:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	9300      	str	r3, [sp, #0]
 800950a:	4618      	mov	r0, r3
 800950c:	e73c      	b.n	8009388 <st_prep_buffer+0x82c>
					prep.exit_speed = sqrtf(pl_block->entry_speed_sqr-2*pl_block->acceleration*pl_block->millimeters);
 800950e:	4639      	mov	r1, r7
 8009510:	4638      	mov	r0, r7
 8009512:	f7f7 fac5 	bl	8000aa0 <__addsf3>
 8009516:	4659      	mov	r1, fp
 8009518:	f7f7 fbca 	bl	8000cb0 <__aeabi_fmul>
 800951c:	4601      	mov	r1, r0
 800951e:	4620      	mov	r0, r4
 8009520:	f7f7 fabc 	bl	8000a9c <__aeabi_fsub>
 8009524:	f002 f8f8 	bl	800b718 <sqrtf>
 8009528:	f8cd 8004 	str.w	r8, [sp, #4]
 800952c:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
 8009530:	e6aa      	b.n	8009288 <st_prep_buffer+0x72c>
            prep.ramp_type = RAMP_DECEL;
 8009532:	2302      	movs	r3, #2
 8009534:	4a32      	ldr	r2, [pc, #200]	; (8009600 <st_prep_buffer+0xaa4>)
 8009536:	f88a 3014 	strb.w	r3, [sl, #20]
 800953a:	7915      	ldrb	r5, [r2, #4]
 800953c:	9301      	str	r3, [sp, #4]
 800953e:	e6a3      	b.n	8009288 <st_prep_buffer+0x72c>
 8009540:	4a2f      	ldr	r2, [pc, #188]	; (8009600 <st_prep_buffer+0xaa4>)
					prep.maximum_speed = prep.exit_speed;
 8009542:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8009546:	7915      	ldrb	r5, [r2, #4]
 8009548:	f89a 2014 	ldrb.w	r2, [sl, #20]
 800954c:	f8ca 3020 	str.w	r3, [sl, #32]
 8009550:	9201      	str	r2, [sp, #4]
					prep.accelerate_until = 0.0f;
 8009552:	2200      	movs	r2, #0
 8009554:	f8ca 2028 	str.w	r2, [sl, #40]	; 0x28
 8009558:	e696      	b.n	8009288 <st_prep_buffer+0x72c>
            prep.ramp_type = RAMP_DECEL;
 800955a:	2402      	movs	r4, #2
            prep.exit_speed = sqrtf(pl_block->entry_speed_sqr - 2*pl_block->acceleration*pl_block->millimeters);
 800955c:	9b00      	ldr	r3, [sp, #0]
            prep.ramp_type = RAMP_DECEL;
 800955e:	f88a 4014 	strb.w	r4, [sl, #20]
            prep.exit_speed = sqrtf(pl_block->entry_speed_sqr - 2*pl_block->acceleration*pl_block->millimeters);
 8009562:	6a19      	ldr	r1, [r3, #32]
 8009564:	4658      	mov	r0, fp
 8009566:	f7f7 fba3 	bl	8000cb0 <__aeabi_fmul>
 800956a:	4601      	mov	r1, r0
 800956c:	f7f7 fa98 	bl	8000aa0 <__addsf3>
 8009570:	4601      	mov	r1, r0
 8009572:	4628      	mov	r0, r5
 8009574:	f7f7 fa92 	bl	8000a9c <__aeabi_fsub>
 8009578:	f002 f8ce 	bl	800b718 <sqrtf>
            prep.recalculate_flag |= PREP_FLAG_DECEL_OVERRIDE; // Flag to load next block as deceleration override.
 800957c:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8009580:	9401      	str	r4, [sp, #4]
 8009582:	f043 0308 	orr.w	r3, r3, #8
 8009586:	f88a 3001 	strb.w	r3, [sl, #1]
 800958a:	4b1d      	ldr	r3, [pc, #116]	; (8009600 <st_prep_buffer+0xaa4>)
            prep.exit_speed = sqrtf(pl_block->entry_speed_sqr - 2*pl_block->acceleration*pl_block->millimeters);
 800958c:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
 8009590:	791d      	ldrb	r5, [r3, #4]
 8009592:	e679      	b.n	8009288 <st_prep_buffer+0x72c>
							prep.maximum_speed = sqrtf(2.0f*pl_block->acceleration*intersect_distance+exit_speed_sqr);
 8009594:	9b00      	ldr	r3, [sp, #0]
 8009596:	6a19      	ldr	r1, [r3, #32]
							prep.accelerate_until = intersect_distance;
 8009598:	f8ca 7028 	str.w	r7, [sl, #40]	; 0x28
							prep.maximum_speed = sqrtf(2.0f*pl_block->acceleration*intersect_distance+exit_speed_sqr);
 800959c:	4608      	mov	r0, r1
							prep.decelerate_after = intersect_distance;
 800959e:	f8ca 702c 	str.w	r7, [sl, #44]	; 0x2c
							prep.maximum_speed = sqrtf(2.0f*pl_block->acceleration*intersect_distance+exit_speed_sqr);
 80095a2:	f7f7 fa7d 	bl	8000aa0 <__addsf3>
 80095a6:	4639      	mov	r1, r7
 80095a8:	f7f7 fb82 	bl	8000cb0 <__aeabi_fmul>
 80095ac:	4641      	mov	r1, r8
 80095ae:	f7f7 fa77 	bl	8000aa0 <__addsf3>
 80095b2:	f002 f8b1 	bl	800b718 <sqrtf>
 80095b6:	4b12      	ldr	r3, [pc, #72]	; (8009600 <st_prep_buffer+0xaa4>)
 80095b8:	f8ca 0020 	str.w	r0, [sl, #32]
 80095bc:	791d      	ldrb	r5, [r3, #4]
 80095be:	f89a 3014 	ldrb.w	r3, [sl, #20]
 80095c2:	9301      	str	r3, [sp, #4]
 80095c4:	e660      	b.n	8009288 <st_prep_buffer+0x72c>
          bit_true(sys.step_control,STEP_CONTROL_END_MOTION);
 80095c6:	4b0e      	ldr	r3, [pc, #56]	; (8009600 <st_prep_buffer+0xaa4>)
 80095c8:	f048 0901 	orr.w	r9, r8, #1
 80095cc:	f883 9004 	strb.w	r9, [r3, #4]
}
 80095d0:	b011      	add	sp, #68	; 0x44
 80095d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
								prep.accelerate_until -= inv_2_accel*(nominal_speed_sqr-pl_block->entry_speed_sqr);
 80095d6:	4631      	mov	r1, r6
 80095d8:	4628      	mov	r0, r5
 80095da:	f7f7 fa5f 	bl	8000a9c <__aeabi_fsub>
 80095de:	4621      	mov	r1, r4
 80095e0:	f7f7 fb66 	bl	8000cb0 <__aeabi_fmul>
 80095e4:	f8da 1028 	ldr.w	r1, [sl, #40]	; 0x28
 80095e8:	f7f7 fa5a 	bl	8000aa0 <__addsf3>
 80095ec:	4b04      	ldr	r3, [pc, #16]	; (8009600 <st_prep_buffer+0xaa4>)
 80095ee:	f8ca 0028 	str.w	r0, [sl, #40]	; 0x28
 80095f2:	791d      	ldrb	r5, [r3, #4]
 80095f4:	f89a 3014 	ldrb.w	r3, [sl, #20]
 80095f8:	9301      	str	r3, [sp, #4]
 80095fa:	e645      	b.n	8009288 <st_prep_buffer+0x72c>
 80095fc:	20001404 	.word	0x20001404
 8009600:	200010c8 	.word	0x200010c8
 8009604:	20000a7c 	.word	0x20000a7c

08009608 <st_get_realtime_rate>:
  if (sys.state & (STATE_CYCLE | STATE_HOMING | STATE_HOLD | STATE_JOG | STATE_SAFETY_DOOR)){
 8009608:	4b04      	ldr	r3, [pc, #16]	; (800961c <st_get_realtime_rate+0x14>)
 800960a:	781b      	ldrb	r3, [r3, #0]
 800960c:	f013 0f7c 	tst.w	r3, #124	; 0x7c
    return prep.current_speed;
 8009610:	bf1a      	itte	ne
 8009612:	4b03      	ldrne	r3, [pc, #12]	; (8009620 <st_get_realtime_rate+0x18>)
 8009614:	69d8      	ldrne	r0, [r3, #28]
  return 0.0f;
 8009616:	2000      	moveq	r0, #0
}
 8009618:	4770      	bx	lr
 800961a:	bf00      	nop
 800961c:	200010c8 	.word	0x200010c8
 8009620:	20000a80 	.word	0x20000a80

08009624 <system_init>:

#include "grbl.h"


void system_init()
{
 8009624:	b510      	push	{r4, lr}
  CONTROL_PCMSK |= CONTROL_MASK;  // Enable specific pins of the Pin Change Interrupt
  PCICR |= (1 << CONTROL_INT);   // Enable Pin Change Interrupt
#endif
#ifdef STM32F103C8
  GPIO_InitTypeDef GPIO_InitStructure;
  RCC_APB2PeriphClockCmd(RCC_CONTROL_PORT | RCC_APB2Periph_AFIO, ENABLE);
 8009626:	2101      	movs	r1, #1
{
 8009628:	b084      	sub	sp, #16
  RCC_APB2PeriphClockCmd(RCC_CONTROL_PORT | RCC_APB2Periph_AFIO, ENABLE);
 800962a:	2009      	movs	r0, #9
 800962c:	f7f8 f95a 	bl	80018e4 <RCC_APB2PeriphClockCmd>
#ifdef DISABLE_CONTROL_PIN_PULL_UP
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
#else
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
#endif
  GPIO_InitStructure.GPIO_Pin = CONTROL_MASK;
 8009630:	f44f 74f0 	mov.w	r4, #480	; 0x1e0
  GPIO_PinRemapConfig(GPIO_Remap_SWJ_JTAGDisable, ENABLE); // to enable PA15, PB3, PB4 pins
 8009634:	2101      	movs	r1, #1
 8009636:	481a      	ldr	r0, [pc, #104]	; (80096a0 <system_init+0x7c>)
 8009638:	f7f8 f8aa 	bl	8001790 <GPIO_PinRemapConfig>
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800963c:	2203      	movs	r2, #3
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 800963e:	2348      	movs	r3, #72	; 0x48
  GPIO_InitStructure.GPIO_Pin = CONTROL_MASK;
 8009640:	a904      	add	r1, sp, #16
 8009642:	f821 4d10 	strh.w	r4, [r1, #-16]!
  GPIO_Init(CONTROL_PORT, &GPIO_InitStructure);
 8009646:	4817      	ldr	r0, [pc, #92]	; (80096a4 <system_init+0x80>)
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8009648:	f88d 2002 	strb.w	r2, [sp, #2]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 800964c:	f88d 3003 	strb.w	r3, [sp, #3]
  GPIO_Init(CONTROL_PORT, &GPIO_InitStructure);
 8009650:	f7f7 fed6 	bl	8001400 <GPIO_Init>

  GPIO_EXTILineConfig(GPIO_CONTROL_PORT, CONTROL_RESET_BIT);
 8009654:	2105      	movs	r1, #5
 8009656:	2001      	movs	r0, #1
 8009658:	f7f8 f8d0 	bl	80017fc <GPIO_EXTILineConfig>
  GPIO_EXTILineConfig(GPIO_CONTROL_PORT, CONTROL_FEED_HOLD_BIT);
 800965c:	2106      	movs	r1, #6
 800965e:	2001      	movs	r0, #1
 8009660:	f7f8 f8cc 	bl	80017fc <GPIO_EXTILineConfig>
  GPIO_EXTILineConfig(GPIO_CONTROL_PORT, CONTROL_CYCLE_START_BIT);
 8009664:	2107      	movs	r1, #7
 8009666:	2001      	movs	r0, #1
 8009668:	f7f8 f8c8 	bl	80017fc <GPIO_EXTILineConfig>
  GPIO_EXTILineConfig(GPIO_CONTROL_PORT, CONTROL_SAFETY_DOOR_BIT);
 800966c:	2108      	movs	r1, #8
 800966e:	2001      	movs	r0, #1
 8009670:	f7f8 f8c4 	bl	80017fc <GPIO_EXTILineConfig>

  EXTI_InitTypeDef EXTI_InitStructure;
  EXTI_InitStructure.EXTI_Line = CONTROL_MASK;    //
  EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt; //Interrupt mode, optional values for the interrupt EXTI_Mode_Interrupt and event EXTI_Mode_Event.
 8009674:	2100      	movs	r1, #0
  EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising_Falling; //Trigger mode, can be a falling edge trigger EXTI_Trigger_Falling, the rising edge triggered EXTI_Trigger_Rising, or any level (rising edge and falling edge trigger EXTI_Trigger_Rising_Falling)
 8009676:	2210      	movs	r2, #16
  EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8009678:	2301      	movs	r3, #1
  EXTI_Init(&EXTI_InitStructure);
 800967a:	a802      	add	r0, sp, #8
  EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt; //Interrupt mode, optional values for the interrupt EXTI_Mode_Interrupt and event EXTI_Mode_Event.
 800967c:	f88d 100c 	strb.w	r1, [sp, #12]
  EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising_Falling; //Trigger mode, can be a falling edge trigger EXTI_Trigger_Falling, the rising edge triggered EXTI_Trigger_Rising, or any level (rising edge and falling edge trigger EXTI_Trigger_Rising_Falling)
 8009680:	f88d 200d 	strb.w	r2, [sp, #13]
  EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8009684:	f88d 300e 	strb.w	r3, [sp, #14]
  EXTI_InitStructure.EXTI_Line = CONTROL_MASK;    //
 8009688:	9402      	str	r4, [sp, #8]
  EXTI_Init(&EXTI_InitStructure);
 800968a:	f7f7 fd6f 	bl	800116c <EXTI_Init>

  NVIC_InitTypeDef NVIC_InitStructure;
  NVIC_InitStructure.NVIC_IRQChannel = EXTI9_5_IRQn; //Enable keypad external interrupt channel
 800968e:	4b06      	ldr	r3, [pc, #24]	; (80096a8 <system_init+0x84>)
 8009690:	a804      	add	r0, sp, #16
 8009692:	f840 3d0c 	str.w	r3, [r0, #-12]!
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x02; //Priority 2,
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x02; //Sub priority 2
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE; //Enable external interrupt channel
  NVIC_Init(&NVIC_InitStructure);
 8009696:	f7f7 fd37 	bl	8001108 <NVIC_Init>
#endif
}
 800969a:	b004      	add	sp, #16
 800969c:	bd10      	pop	{r4, pc}
 800969e:	bf00      	nop
 80096a0:	00300200 	.word	0x00300200
 80096a4:	40010c00 	.word	0x40010c00
 80096a8:	01020217 	.word	0x01020217

080096ac <system_control_get_state>:

// Returns control pin state as a uint8 bitfield. Each bit indicates the input pin state, where
// triggered is 1 and not triggered is 0. Invert mask is applied. Bitfield organization is
// defined by the CONTROL_PIN_INDEX in the header file.
uint8_t system_control_get_state()
{
 80096ac:	b508      	push	{r3, lr}
#endif
#ifdef WIN32
  uint8_t pin = 0;
#endif
#ifdef STM32F103C8
  uint16_t pin= GPIO_ReadInputData(CONTROL_PIN_PORT);
 80096ae:	480a      	ldr	r0, [pc, #40]	; (80096d8 <system_control_get_state+0x2c>)
 80096b0:	f7f8 f85c 	bl	800176c <GPIO_ReadInputData>
#endif
  #ifdef INVERT_CONTROL_PIN_MASK
    pin ^= INVERT_CONTROL_PIN_MASK;
  #endif
  if (pin) {
 80096b4:	b168      	cbz	r0, 80096d2 <system_control_get_state+0x26>
    #ifdef ENABLE_SAFETY_DOOR_INPUT_PIN
      if (bit_isfalse(pin,(1<<CONTROL_SAFETY_DOOR_BIT))) { control_state |= CONTROL_PIN_INDEX_SAFETY_DOOR; }
    #endif
    if (bit_isfalse(pin,(1<<CONTROL_RESET_BIT))) { control_state |= CONTROL_PIN_INDEX_RESET; }
 80096b6:	f080 0320 	eor.w	r3, r0, #32
    if (bit_isfalse(pin,(1<<CONTROL_FEED_HOLD_BIT))) { control_state |= CONTROL_PIN_INDEX_FEED_HOLD; }
 80096ba:	0641      	lsls	r1, r0, #25
  uint8_t control_state = 0;
 80096bc:	f3c3 1340 	ubfx	r3, r3, #5, #1
    if (bit_isfalse(pin,(1<<CONTROL_FEED_HOLD_BIT))) { control_state |= CONTROL_PIN_INDEX_FEED_HOLD; }
 80096c0:	bf58      	it	pl
 80096c2:	f043 0302 	orrpl.w	r3, r3, #2
    if (bit_isfalse(pin,(1<<CONTROL_CYCLE_START_BIT))) { control_state |= CONTROL_PIN_INDEX_CYCLE_START; }
 80096c6:	0602      	lsls	r2, r0, #24
 80096c8:	d401      	bmi.n	80096ce <system_control_get_state+0x22>
 80096ca:	f043 0304 	orr.w	r3, r3, #4
  }
  return(control_state);
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	bd08      	pop	{r3, pc}
  uint8_t control_state = 0;
 80096d2:	4603      	mov	r3, r0
}
 80096d4:	4618      	mov	r0, r3
 80096d6:	bd08      	pop	{r3, pc}
 80096d8:	40010c00 	.word	0x40010c00

080096dc <EXTI9_5_IRQHandler>:
  }
}
#endif
#if defined (STM32F103C8)
void EXTI9_5_IRQHandler(void)
{
 80096dc:	b508      	push	{r3, lr}
    EXTI_ClearITPendingBit((1 << CONTROL_RESET_BIT) | (1 << CONTROL_FEED_HOLD_BIT) | (1 << CONTROL_CYCLE_START_BIT) | (1 << CONTROL_SAFETY_DOOR_BIT));
 80096de:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80096e2:	f7f7 fd8f 	bl	8001204 <EXTI_ClearITPendingBit>
  uint16_t pin= GPIO_ReadInputData(CONTROL_PIN_PORT);
 80096e6:	481b      	ldr	r0, [pc, #108]	; (8009754 <EXTI9_5_IRQHandler+0x78>)
 80096e8:	f7f8 f840 	bl	800176c <GPIO_ReadInputData>
  if (pin) {
 80096ec:	b1b8      	cbz	r0, 800971e <EXTI9_5_IRQHandler+0x42>
    if (bit_isfalse(pin,(1<<CONTROL_RESET_BIT))) { control_state |= CONTROL_PIN_INDEX_RESET; }
 80096ee:	f010 0220 	ands.w	r2, r0, #32
  uint8_t control_state = 0;
 80096f2:	bf0c      	ite	eq
 80096f4:	2301      	moveq	r3, #1
 80096f6:	2300      	movne	r3, #0
    if (bit_isfalse(pin,(1<<CONTROL_FEED_HOLD_BIT))) { control_state |= CONTROL_PIN_INDEX_FEED_HOLD; }
 80096f8:	0641      	lsls	r1, r0, #25
 80096fa:	d411      	bmi.n	8009720 <EXTI9_5_IRQHandler+0x44>
    if (bit_isfalse(pin,(1<<CONTROL_CYCLE_START_BIT))) { control_state |= CONTROL_PIN_INDEX_CYCLE_START; }
 80096fc:	0600      	lsls	r0, r0, #24
    if (bit_isfalse(pin,(1<<CONTROL_FEED_HOLD_BIT))) { control_state |= CONTROL_PIN_INDEX_FEED_HOLD; }
 80096fe:	f043 0302 	orr.w	r3, r3, #2
    if (bit_isfalse(pin,(1<<CONTROL_CYCLE_START_BIT))) { control_state |= CONTROL_PIN_INDEX_CYCLE_START; }
 8009702:	d419      	bmi.n	8009738 <EXTI9_5_IRQHandler+0x5c>
	uint8_t pin = system_control_get_state();
	if (pin) 
	{ 
		if (bit_istrue(pin,CONTROL_PIN_INDEX_RESET)) 
 8009704:	07db      	lsls	r3, r3, #31
 8009706:	d40f      	bmi.n	8009728 <EXTI9_5_IRQHandler+0x4c>
		{
			mc_reset();
		}
		else if (bit_istrue(pin, CONTROL_PIN_INDEX_CYCLE_START))
		{
			bit_true(sys_rt_exec_state, EXEC_CYCLE_START);
 8009708:	4a13      	ldr	r2, [pc, #76]	; (8009758 <EXTI9_5_IRQHandler+0x7c>)
 800970a:	7813      	ldrb	r3, [r2, #0]
 800970c:	f043 0302 	orr.w	r3, r3, #2
 8009710:	7013      	strb	r3, [r2, #0]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
 8009712:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8009716:	4b11      	ldr	r3, [pc, #68]	; (800975c <EXTI9_5_IRQHandler+0x80>)
 8009718:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
			bit_true(sys_rt_exec_state, EXEC_SAFETY_DOOR);
		}
#endif
		NVIC_ClearPendingIRQ(EXTI9_5_IRQn);
}
}
 800971c:	bd08      	pop	{r3, pc}
 800971e:	bd08      	pop	{r3, pc}
    if (bit_isfalse(pin,(1<<CONTROL_CYCLE_START_BIT))) { control_state |= CONTROL_PIN_INDEX_CYCLE_START; }
 8009720:	0601      	lsls	r1, r0, #24
 8009722:	d5ef      	bpl.n	8009704 <EXTI9_5_IRQHandler+0x28>
	if (pin) 
 8009724:	2a00      	cmp	r2, #0
 8009726:	d1fa      	bne.n	800971e <EXTI9_5_IRQHandler+0x42>
			mc_reset();
 8009728:	f7fa fca2 	bl	8004070 <mc_reset>
 800972c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8009730:	4b0a      	ldr	r3, [pc, #40]	; (800975c <EXTI9_5_IRQHandler+0x80>)
 8009732:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
 8009736:	bd08      	pop	{r3, pc}
		if (bit_istrue(pin,CONTROL_PIN_INDEX_RESET)) 
 8009738:	2a00      	cmp	r2, #0
 800973a:	d0f5      	beq.n	8009728 <EXTI9_5_IRQHandler+0x4c>
			bit_true(sys_rt_exec_state, EXEC_FEED_HOLD);
 800973c:	4a06      	ldr	r2, [pc, #24]	; (8009758 <EXTI9_5_IRQHandler+0x7c>)
 800973e:	7813      	ldrb	r3, [r2, #0]
 8009740:	f043 0308 	orr.w	r3, r3, #8
 8009744:	7013      	strb	r3, [r2, #0]
 8009746:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800974a:	4b04      	ldr	r3, [pc, #16]	; (800975c <EXTI9_5_IRQHandler+0x80>)
 800974c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
 8009750:	bd08      	pop	{r3, pc}
 8009752:	bf00      	nop
 8009754:	40010c00 	.word	0x40010c00
 8009758:	200010dd 	.word	0x200010dd
 800975c:	e000e100 	.word	0xe000e100

08009760 <system_check_safety_door_ajar>:
  #ifdef ENABLE_SAFETY_DOOR_INPUT_PIN
    return(system_control_get_state() & CONTROL_PIN_INDEX_SAFETY_DOOR);
  #else
    return(false); // Input pin not enabled, so just return that it's closed.
  #endif
}
 8009760:	2000      	movs	r0, #0
 8009762:	4770      	bx	lr

08009764 <system_execute_startup>:


// Executes user startup script, if stored.
void system_execute_startup(char *line)
{
 8009764:	b538      	push	{r3, r4, r5, lr}
 8009766:	4605      	mov	r5, r0
 8009768:	2400      	movs	r4, #0
  uint8_t n;
  for (n=0; n < N_STARTUP_LINE; n++) {
    if (!(settings_read_startup_line(n, line))) {
 800976a:	4629      	mov	r1, r5
 800976c:	b2e0      	uxtb	r0, r4
 800976e:	f7fe f9cd 	bl	8007b0c <settings_read_startup_line>
 8009772:	b128      	cbz	r0, 8009780 <system_execute_startup+0x1c>
      line[0] = 0;
      report_execute_startup_message(line,STATUS_SETTING_READ_FAIL);
    } else {
      if (line[0] != 0) {
 8009774:	782b      	ldrb	r3, [r5, #0]
 8009776:	b94b      	cbnz	r3, 800978c <system_execute_startup+0x28>
 8009778:	3401      	adds	r4, #1
  for (n=0; n < N_STARTUP_LINE; n++) {
 800977a:	2c02      	cmp	r4, #2
 800977c:	d1f5      	bne.n	800976a <system_execute_startup+0x6>
        uint8_t status_code = gc_execute_line(line);
        report_execute_startup_message(line,status_code);
      }
    }
  }
}
 800977e:	bd38      	pop	{r3, r4, r5, pc}
      line[0] = 0;
 8009780:	7028      	strb	r0, [r5, #0]
      report_execute_startup_message(line,STATUS_SETTING_READ_FAIL);
 8009782:	2107      	movs	r1, #7
 8009784:	4628      	mov	r0, r5
 8009786:	f7fd fd1f 	bl	80071c8 <report_execute_startup_message>
 800978a:	e7f5      	b.n	8009778 <system_execute_startup+0x14>
        uint8_t status_code = gc_execute_line(line);
 800978c:	4628      	mov	r0, r5
 800978e:	f7f8 fb83 	bl	8001e98 <gc_execute_line>
        report_execute_startup_message(line,status_code);
 8009792:	4601      	mov	r1, r0
 8009794:	4628      	mov	r0, r5
 8009796:	f7fd fd17 	bl	80071c8 <report_execute_startup_message>
 800979a:	e7ed      	b.n	8009778 <system_execute_startup+0x14>

0800979c <system_execute_line>:
// the lines that are processed afterward, not necessarily real-time during a cycle,
// since there are motions already stored in the buffer. However, this 'lag' should not
// be an issue, since these commands are not typically used during a cycle.
uint8_t system_execute_line(char *line)
{
  uint8_t char_counter = 1;
 800979c:	2301      	movs	r3, #1
{
 800979e:	b570      	push	{r4, r5, r6, lr}
  uint8_t helper_var = 0; // Helper variable
  float parameter, value;
  switch( line[char_counter] ) {
 80097a0:	7844      	ldrb	r4, [r0, #1]
{
 80097a2:	b084      	sub	sp, #16
  switch( line[char_counter] ) {
 80097a4:	2c43      	cmp	r4, #67	; 0x43
{
 80097a6:	4605      	mov	r5, r0
  uint8_t char_counter = 1;
 80097a8:	f88d 3007 	strb.w	r3, [sp, #7]
  switch( line[char_counter] ) {
 80097ac:	d034      	beq.n	8009818 <system_execute_line+0x7c>
 80097ae:	d939      	bls.n	8009824 <system_execute_line+0x88>
 80097b0:	2c4a      	cmp	r4, #74	; 0x4a
 80097b2:	d108      	bne.n	80097c6 <system_execute_line+0x2a>
    case 0 : report_grbl_help(); break;
    case 'J' : // Jogging
      // Execute only if in IDLE or JOG states.
      if (sys.state != STATE_IDLE && sys.state != STATE_JOG) { return(STATUS_IDLE_ERROR); }
 80097b4:	4b93      	ldr	r3, [pc, #588]	; (8009a04 <system_execute_line+0x268>)
 80097b6:	781b      	ldrb	r3, [r3, #0]
 80097b8:	f013 0fdf 	tst.w	r3, #223	; 0xdf
 80097bc:	d039      	beq.n	8009832 <system_execute_line+0x96>
                report_startup_line(helper_var,line);
              }
            }
            break;
          } else { // Store startup line [IDLE Only] Prevents motion during ALARM.
            if (sys.state != STATE_IDLE) { return(STATUS_IDLE_ERROR); } // Store only when idle.
 80097be:	2408      	movs	r4, #8
            return(settings_store_global_setting((uint8_t)parameter, value));
          }
      }
  }
  return(STATUS_OK); // If '$' command makes it to here, then everything's ok.
}
 80097c0:	4620      	mov	r0, r4
 80097c2:	b004      	add	sp, #16
 80097c4:	bd70      	pop	{r4, r5, r6, pc}
  switch( line[char_counter] ) {
 80097c6:	2c58      	cmp	r4, #88	; 0x58
 80097c8:	d026      	beq.n	8009818 <system_execute_line+0x7c>
 80097ca:	2c47      	cmp	r4, #71	; 0x47
 80097cc:	d024      	beq.n	8009818 <system_execute_line+0x7c>
      if ( !(sys.state == STATE_IDLE || sys.state == STATE_ALARM) ) { return(STATUS_IDLE_ERROR); }
 80097ce:	4e8d      	ldr	r6, [pc, #564]	; (8009a04 <system_execute_line+0x268>)
 80097d0:	7833      	ldrb	r3, [r6, #0]
 80097d2:	2b01      	cmp	r3, #1
 80097d4:	d8f3      	bhi.n	80097be <system_execute_line+0x22>
      switch( line[1] ) {
 80097d6:	3c23      	subs	r4, #35	; 0x23
 80097d8:	2c30      	cmp	r4, #48	; 0x30
 80097da:	f200 80b6 	bhi.w	800994a <system_execute_line+0x1ae>
 80097de:	e8df f004 	tbb	[pc, r4]
 80097e2:	b4ad      	.short	0xb4ad
 80097e4:	b4b4b4b4 	.word	0xb4b4b4b4
 80097e8:	b4b4b4b4 	.word	0xb4b4b4b4
 80097ec:	b4b4b4b4 	.word	0xb4b4b4b4
 80097f0:	b4b4b4b4 	.word	0xb4b4b4b4
 80097f4:	b4b4b4b4 	.word	0xb4b4b4b4
 80097f8:	b4b4b4b4 	.word	0xb4b4b4b4
 80097fc:	b4b4b4b4 	.word	0xb4b4b4b4
 8009800:	b4b4b4b4 	.word	0xb4b4b4b4
 8009804:	a6b4b4b4 	.word	0xa6b4b4b4
 8009808:	b4b4b48d 	.word	0xb4b4b48d
 800980c:	b4b468b4 	.word	0xb4b468b4
 8009810:	49b4      	.short	0x49b4
 8009812:	7c          	.byte	0x7c
 8009813:	00          	.byte	0x00
  switch( line[char_counter] ) {
 8009814:	2c24      	cmp	r4, #36	; 0x24
 8009816:	d1da      	bne.n	80097ce <system_execute_line+0x32>
      if ( line[2] != 0 ) { return(STATUS_INVALID_STATEMENT); }
 8009818:	78ad      	ldrb	r5, [r5, #2]
 800981a:	b18d      	cbz	r5, 8009840 <system_execute_line+0xa4>
            default: return(STATUS_INVALID_STATEMENT);
 800981c:	2403      	movs	r4, #3
}
 800981e:	4620      	mov	r0, r4
 8009820:	b004      	add	sp, #16
 8009822:	bd70      	pop	{r4, r5, r6, pc}
  switch( line[char_counter] ) {
 8009824:	2c00      	cmp	r4, #0
 8009826:	d1f5      	bne.n	8009814 <system_execute_line+0x78>
    case 0 : report_grbl_help(); break;
 8009828:	f7fd f80e 	bl	8006848 <report_grbl_help>
}
 800982c:	4620      	mov	r0, r4
 800982e:	b004      	add	sp, #16
 8009830:	bd70      	pop	{r4, r5, r6, pc}
      if(line[2] != '=') { return(STATUS_INVALID_STATEMENT); }
 8009832:	7883      	ldrb	r3, [r0, #2]
 8009834:	2b3d      	cmp	r3, #61	; 0x3d
 8009836:	d1f1      	bne.n	800981c <system_execute_line+0x80>
      return(gc_execute_line(line)); // NOTE: $J= is ignored inside g-code parser and used to detect jog motions.
 8009838:	f7f8 fb2e 	bl	8001e98 <gc_execute_line>
 800983c:	4604      	mov	r4, r0
 800983e:	e7bf      	b.n	80097c0 <system_execute_line+0x24>
      switch( line[1] ) {
 8009840:	2c43      	cmp	r4, #67	; 0x43
 8009842:	f000 80a0 	beq.w	8009986 <system_execute_line+0x1ea>
 8009846:	d90b      	bls.n	8009860 <system_execute_line+0xc4>
 8009848:	2c47      	cmp	r4, #71	; 0x47
 800984a:	f000 80a9 	beq.w	80099a0 <system_execute_line+0x204>
 800984e:	2c58      	cmp	r4, #88	; 0x58
 8009850:	d104      	bne.n	800985c <system_execute_line+0xc0>
          if (sys.state == STATE_ALARM) {
 8009852:	4e6c      	ldr	r6, [pc, #432]	; (8009a04 <system_execute_line+0x268>)
 8009854:	7833      	ldrb	r3, [r6, #0]
 8009856:	2b01      	cmp	r3, #1
 8009858:	f000 80a6 	beq.w	80099a8 <system_execute_line+0x20c>
  return(STATUS_OK); // If '$' command makes it to here, then everything's ok.
 800985c:	2400      	movs	r4, #0
 800985e:	e7af      	b.n	80097c0 <system_execute_line+0x24>
      switch( line[1] ) {
 8009860:	2c24      	cmp	r4, #36	; 0x24
 8009862:	d1fb      	bne.n	800985c <system_execute_line+0xc0>
          if ( sys.state & (STATE_CYCLE | STATE_HOLD) ) { return(STATUS_IDLE_ERROR); } // Block during cycle. Takes too long to print.
 8009864:	4b67      	ldr	r3, [pc, #412]	; (8009a04 <system_execute_line+0x268>)
 8009866:	781c      	ldrb	r4, [r3, #0]
 8009868:	f014 0418 	ands.w	r4, r4, #24
 800986c:	d1a7      	bne.n	80097be <system_execute_line+0x22>
          else { report_grbl_settings(); }
 800986e:	f7fc fff1 	bl	8006854 <report_grbl_settings>
          break;
 8009872:	e7a5      	b.n	80097c0 <system_execute_line+0x24>
          if ((line[2] != 'S') || (line[3] != 'T') || (line[4] != '=') || (line[6] != 0)) { return(STATUS_INVALID_STATEMENT); }
 8009874:	78ab      	ldrb	r3, [r5, #2]
 8009876:	2b53      	cmp	r3, #83	; 0x53
 8009878:	d1d0      	bne.n	800981c <system_execute_line+0x80>
 800987a:	78eb      	ldrb	r3, [r5, #3]
 800987c:	2b54      	cmp	r3, #84	; 0x54
 800987e:	d1cd      	bne.n	800981c <system_execute_line+0x80>
 8009880:	792b      	ldrb	r3, [r5, #4]
 8009882:	2b3d      	cmp	r3, #61	; 0x3d
 8009884:	d1ca      	bne.n	800981c <system_execute_line+0x80>
 8009886:	79ab      	ldrb	r3, [r5, #6]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d1c7      	bne.n	800981c <system_execute_line+0x80>
          switch (line[5]) {
 800988c:	796b      	ldrb	r3, [r5, #5]
 800988e:	2b24      	cmp	r3, #36	; 0x24
 8009890:	f000 8122 	beq.w	8009ad8 <system_execute_line+0x33c>
 8009894:	2b2a      	cmp	r3, #42	; 0x2a
 8009896:	f000 811b 	beq.w	8009ad0 <system_execute_line+0x334>
 800989a:	2b23      	cmp	r3, #35	; 0x23
 800989c:	d1be      	bne.n	800981c <system_execute_line+0x80>
              case '#': settings_restore(SETTINGS_RESTORE_PARAMETERS); break;
 800989e:	2002      	movs	r0, #2
 80098a0:	f7fe f89c 	bl	80079dc <settings_restore>
          report_feedback_message(MESSAGE_RESTORE_DEFAULTS);
 80098a4:	2009      	movs	r0, #9
 80098a6:	f7fc ff6b 	bl	8006780 <report_feedback_message>
  return(STATUS_OK); // If '$' command makes it to here, then everything's ok.
 80098aa:	2400      	movs	r4, #0
          mc_reset(); // Force reset to ensure settings are initialized correctly.
 80098ac:	f7fa fbe0 	bl	8004070 <mc_reset>
          break;
 80098b0:	e786      	b.n	80097c0 <system_execute_line+0x24>
          if ( line[++char_counter] == 0 ) { // Print startup lines
 80098b2:	2202      	movs	r2, #2
 80098b4:	78ac      	ldrb	r4, [r5, #2]
 80098b6:	f88d 2007 	strb.w	r2, [sp, #7]
 80098ba:	2c00      	cmp	r4, #0
 80098bc:	d047      	beq.n	800994e <system_execute_line+0x1b2>
            if (sys.state != STATE_IDLE) { return(STATUS_IDLE_ERROR); } // Store only when idle.
 80098be:	2b00      	cmp	r3, #0
 80098c0:	f47f af7d 	bne.w	80097be <system_execute_line+0x22>
            helper_var = true;  // Set helper_var to flag storing method.
 80098c4:	2401      	movs	r4, #1
          if(!read_float(line, &char_counter, &parameter)) { return(STATUS_BAD_NUMBER_FORMAT); }
 80098c6:	f10d 0107 	add.w	r1, sp, #7
 80098ca:	aa02      	add	r2, sp, #8
 80098cc:	4628      	mov	r0, r5
 80098ce:	f7fa fbff 	bl	80040d0 <read_float>
 80098d2:	2800      	cmp	r0, #0
 80098d4:	d16e      	bne.n	80099b4 <system_execute_line+0x218>
 80098d6:	2402      	movs	r4, #2
 80098d8:	e772      	b.n	80097c0 <system_execute_line+0x24>
          if ((line[2] != 'L') || (line[3] != 'P') || (line[4] != 0)) { return(STATUS_INVALID_STATEMENT); }
 80098da:	78ab      	ldrb	r3, [r5, #2]
 80098dc:	2b4c      	cmp	r3, #76	; 0x4c
 80098de:	d19d      	bne.n	800981c <system_execute_line+0x80>
 80098e0:	78eb      	ldrb	r3, [r5, #3]
 80098e2:	2b50      	cmp	r3, #80	; 0x50
 80098e4:	d19a      	bne.n	800981c <system_execute_line+0x80>
 80098e6:	792c      	ldrb	r4, [r5, #4]
 80098e8:	2c00      	cmp	r4, #0
 80098ea:	d197      	bne.n	800981c <system_execute_line+0x80>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 80098ec:	b672      	cpsid	i
  sys_rt_exec_state |= (mask);
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_state |= (mask);
 80098ee:	4a46      	ldr	r2, [pc, #280]	; (8009a08 <system_execute_line+0x26c>)
 80098f0:	7813      	ldrb	r3, [r2, #0]
 80098f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098f6:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("cpsie i");
 80098f8:	b662      	cpsie	i
 80098fa:	e761      	b.n	80097c0 <system_execute_line+0x24>
          if ( line[++char_counter] == 0 ) {
 80098fc:	2302      	movs	r3, #2
 80098fe:	78ac      	ldrb	r4, [r5, #2]
 8009900:	f88d 3007 	strb.w	r3, [sp, #7]
 8009904:	2c00      	cmp	r4, #0
 8009906:	f000 80ab 	beq.w	8009a60 <system_execute_line+0x2c4>
              if(line[char_counter++] != '=') { return(STATUS_INVALID_STATEMENT); }
 800990a:	2c3d      	cmp	r4, #61	; 0x3d
 800990c:	f04f 0303 	mov.w	r3, #3
 8009910:	d184      	bne.n	800981c <system_execute_line+0x80>
                line[char_counter-helper_var] = line[char_counter];
 8009912:	5cec      	ldrb	r4, [r5, r3]
 8009914:	18ea      	adds	r2, r5, r3
              } while (line[char_counter++] != 0);
 8009916:	3301      	adds	r3, #1
                line[char_counter-helper_var] = line[char_counter];
 8009918:	f802 4c03 	strb.w	r4, [r2, #-3]
              } while (line[char_counter++] != 0);
 800991c:	b2db      	uxtb	r3, r3
 800991e:	2c00      	cmp	r4, #0
 8009920:	d1f7      	bne.n	8009912 <system_execute_line+0x176>
              settings_store_build_info(line);
 8009922:	4628      	mov	r0, r5
 8009924:	f88d 3007 	strb.w	r3, [sp, #7]
 8009928:	f7fe f842 	bl	80079b0 <settings_store_build_info>
 800992c:	e748      	b.n	80097c0 <system_execute_line+0x24>
          if (bit_isfalse(settings.flags,BITFLAG_HOMING_ENABLE)) {return(STATUS_SETTING_DISABLED); }
 800992e:	4b37      	ldr	r3, [pc, #220]	; (8009a0c <system_execute_line+0x270>)
 8009930:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8009934:	06db      	lsls	r3, r3, #27
 8009936:	d46b      	bmi.n	8009a10 <system_execute_line+0x274>
 8009938:	2405      	movs	r4, #5
 800993a:	e741      	b.n	80097c0 <system_execute_line+0x24>
          if ( line[2] != 0 ) { return(STATUS_INVALID_STATEMENT); }
 800993c:	78ac      	ldrb	r4, [r5, #2]
 800993e:	2c00      	cmp	r4, #0
 8009940:	f47f af6c 	bne.w	800981c <system_execute_line+0x80>
          else { report_ngc_parameters(); }
 8009944:	f7fd fab2 	bl	8006eac <report_ngc_parameters>
          break;
 8009948:	e73a      	b.n	80097c0 <system_execute_line+0x24>
  uint8_t helper_var = 0; // Helper variable
 800994a:	2400      	movs	r4, #0
 800994c:	e7bb      	b.n	80098c6 <system_execute_line+0x12a>
 800994e:	b2e6      	uxtb	r6, r4
              if (!(settings_read_startup_line(helper_var, line))) {
 8009950:	4630      	mov	r0, r6
 8009952:	4629      	mov	r1, r5
 8009954:	f7fe f8da 	bl	8007b0c <settings_read_startup_line>
 8009958:	b968      	cbnz	r0, 8009976 <system_execute_line+0x1da>
                report_status_message(STATUS_SETTING_READ_FAIL);
 800995a:	2007      	movs	r0, #7
 800995c:	f7fc fee2 	bl	8006724 <report_status_message>
            for (helper_var=0; helper_var < N_STARTUP_LINE; helper_var++) {
 8009960:	2c00      	cmp	r4, #0
 8009962:	f47f af7b 	bne.w	800985c <system_execute_line+0xc0>
 8009966:	2401      	movs	r4, #1
 8009968:	b2e6      	uxtb	r6, r4
              if (!(settings_read_startup_line(helper_var, line))) {
 800996a:	4630      	mov	r0, r6
 800996c:	4629      	mov	r1, r5
 800996e:	f7fe f8cd 	bl	8007b0c <settings_read_startup_line>
 8009972:	2800      	cmp	r0, #0
 8009974:	d0f1      	beq.n	800995a <system_execute_line+0x1be>
                report_startup_line(helper_var,line);
 8009976:	4630      	mov	r0, r6
 8009978:	4629      	mov	r1, r5
 800997a:	f7fd fc0d 	bl	8007198 <report_startup_line>
            for (helper_var=0; helper_var < N_STARTUP_LINE; helper_var++) {
 800997e:	2c00      	cmp	r4, #0
 8009980:	f47f af6c 	bne.w	800985c <system_execute_line+0xc0>
 8009984:	e7ef      	b.n	8009966 <system_execute_line+0x1ca>
          if ( sys.state == STATE_CHECK_MODE ) {
 8009986:	4b1f      	ldr	r3, [pc, #124]	; (8009a04 <system_execute_line+0x268>)
 8009988:	781c      	ldrb	r4, [r3, #0]
 800998a:	2c02      	cmp	r4, #2
 800998c:	d061      	beq.n	8009a52 <system_execute_line+0x2b6>
            if (sys.state) { return(STATUS_IDLE_ERROR); } // Requires no alarm mode.
 800998e:	2c00      	cmp	r4, #0
 8009990:	f47f af15 	bne.w	80097be <system_execute_line+0x22>
            sys.state = STATE_CHECK_MODE;
 8009994:	2202      	movs	r2, #2
            report_feedback_message(MESSAGE_ENABLED);
 8009996:	2004      	movs	r0, #4
            sys.state = STATE_CHECK_MODE;
 8009998:	701a      	strb	r2, [r3, #0]
            report_feedback_message(MESSAGE_ENABLED);
 800999a:	f7fc fef1 	bl	8006780 <report_feedback_message>
 800999e:	e70f      	b.n	80097c0 <system_execute_line+0x24>
          report_gcode_modes();
 80099a0:	f7fd fb42 	bl	8007028 <report_gcode_modes>
  return(STATUS_OK); // If '$' command makes it to here, then everything's ok.
 80099a4:	462c      	mov	r4, r5
          break;
 80099a6:	e70b      	b.n	80097c0 <system_execute_line+0x24>
            report_feedback_message(MESSAGE_ALARM_UNLOCK);
 80099a8:	2003      	movs	r0, #3
 80099aa:	f7fc fee9 	bl	8006780 <report_feedback_message>
  return(STATUS_OK); // If '$' command makes it to here, then everything's ok.
 80099ae:	462c      	mov	r4, r5
            sys.state = STATE_IDLE;
 80099b0:	7035      	strb	r5, [r6, #0]
 80099b2:	e705      	b.n	80097c0 <system_execute_line+0x24>
          if(line[char_counter++] != '=') { return(STATUS_INVALID_STATEMENT); }
 80099b4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80099b8:	1c53      	adds	r3, r2, #1
 80099ba:	5caa      	ldrb	r2, [r5, r2]
 80099bc:	b2db      	uxtb	r3, r3
 80099be:	2a3d      	cmp	r2, #61	; 0x3d
 80099c0:	f88d 3007 	strb.w	r3, [sp, #7]
 80099c4:	f47f af2a 	bne.w	800981c <system_execute_line+0x80>
          if (helper_var) { // Store startup line
 80099c8:	2c00      	cmp	r4, #0
 80099ca:	d054      	beq.n	8009a76 <system_execute_line+0x2da>
 80099cc:	4618      	mov	r0, r3
              line[char_counter-helper_var] = line[char_counter];
 80099ce:	5ce9      	ldrb	r1, [r5, r3]
 80099d0:	1a1a      	subs	r2, r3, r0
 80099d2:	54a9      	strb	r1, [r5, r2]
 80099d4:	18ea      	adds	r2, r5, r3
            } while (line[char_counter++] != 0);
 80099d6:	7812      	ldrb	r2, [r2, #0]
 80099d8:	3301      	adds	r3, #1
 80099da:	b2db      	uxtb	r3, r3
 80099dc:	2a00      	cmp	r2, #0
 80099de:	d1f6      	bne.n	80099ce <system_execute_line+0x232>
            helper_var = gc_execute_line(line); // Set helper_var to returned status code.
 80099e0:	4628      	mov	r0, r5
 80099e2:	f88d 3007 	strb.w	r3, [sp, #7]
 80099e6:	f7f8 fa57 	bl	8001e98 <gc_execute_line>
            if (helper_var) { return(helper_var); }
 80099ea:	4604      	mov	r4, r0
 80099ec:	2800      	cmp	r0, #0
 80099ee:	f47f aee7 	bne.w	80097c0 <system_execute_line+0x24>
              helper_var = truncf(parameter); // Set helper_var to int value of parameter
 80099f2:	9802      	ldr	r0, [sp, #8]
 80099f4:	f7f7 fb5e 	bl	80010b4 <__aeabi_f2uiz>
              settings_store_startup_line(helper_var,line);
 80099f8:	4629      	mov	r1, r5
 80099fa:	b2c0      	uxtb	r0, r0
 80099fc:	f7fd ffc6 	bl	800798c <settings_store_startup_line>
 8009a00:	e6de      	b.n	80097c0 <system_execute_line+0x24>
 8009a02:	bf00      	nop
 8009a04:	200010c8 	.word	0x200010c8
 8009a08:	200010dd 	.word	0x200010dd
 8009a0c:	20001404 	.word	0x20001404
          sys.state = STATE_HOMING; // Set system state variable
 8009a10:	2004      	movs	r0, #4
          if (line[2] == 0) {
 8009a12:	78ab      	ldrb	r3, [r5, #2]
          sys.state = STATE_HOMING; // Set system state variable
 8009a14:	7030      	strb	r0, [r6, #0]
          if (line[2] == 0) {
 8009a16:	b353      	cbz	r3, 8009a6e <system_execute_line+0x2d2>
            } else if (line[3] == 0) {
 8009a18:	78ea      	ldrb	r2, [r5, #3]
 8009a1a:	2a00      	cmp	r2, #0
 8009a1c:	f47f aefe 	bne.w	800981c <system_execute_line+0x80>
              switch (line[2]) {
 8009a20:	2b58      	cmp	r3, #88	; 0x58
 8009a22:	d048      	beq.n	8009ab6 <system_execute_line+0x31a>
 8009a24:	d94f      	bls.n	8009ac6 <system_execute_line+0x32a>
 8009a26:	2b59      	cmp	r3, #89	; 0x59
 8009a28:	d049      	beq.n	8009abe <system_execute_line+0x322>
 8009a2a:	2b5a      	cmp	r3, #90	; 0x5a
 8009a2c:	f47f aef6 	bne.w	800981c <system_execute_line+0x80>
				case 'A': mc_homing_cycle(HOMING_CYCLE_A); break;
 8009a30:	f7fa fa62 	bl	8003ef8 <mc_homing_cycle>
          if (!sys.abort) {  // Execute startup scripts after successful homing.
 8009a34:	7874      	ldrb	r4, [r6, #1]
 8009a36:	2c00      	cmp	r4, #0
 8009a38:	f47f af10 	bne.w	800985c <system_execute_line+0xc0>
            sys.state = STATE_IDLE; // Set to IDLE when complete.
 8009a3c:	7034      	strb	r4, [r6, #0]
            st_go_idle(); // Set steppers to the settings idle state before returning.
 8009a3e:	f7fe fd31 	bl	80084a4 <st_go_idle>
            if (line[2] == 0) { system_execute_startup(line); }
 8009a42:	78ab      	ldrb	r3, [r5, #2]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	f47f af09 	bne.w	800985c <system_execute_line+0xc0>
 8009a4a:	4628      	mov	r0, r5
 8009a4c:	f7ff fe8a 	bl	8009764 <system_execute_startup>
 8009a50:	e6b6      	b.n	80097c0 <system_execute_line+0x24>
            mc_reset();
 8009a52:	f7fa fb0d 	bl	8004070 <mc_reset>
            report_feedback_message(MESSAGE_DISABLED);
 8009a56:	2005      	movs	r0, #5
  return(STATUS_OK); // If '$' command makes it to here, then everything's ok.
 8009a58:	462c      	mov	r4, r5
            report_feedback_message(MESSAGE_DISABLED);
 8009a5a:	f7fc fe91 	bl	8006780 <report_feedback_message>
 8009a5e:	e6af      	b.n	80097c0 <system_execute_line+0x24>
            settings_read_build_info(line);
 8009a60:	4628      	mov	r0, r5
 8009a62:	f7fe f86f 	bl	8007b44 <settings_read_build_info>
            report_build_info(line);
 8009a66:	4628      	mov	r0, r5
 8009a68:	f7fd fbd2 	bl	8007210 <report_build_info>
 8009a6c:	e6a8      	b.n	80097c0 <system_execute_line+0x24>
            mc_homing_cycle(HOMING_CYCLE_ALL);
 8009a6e:	4618      	mov	r0, r3
 8009a70:	f7fa fa42 	bl	8003ef8 <mc_homing_cycle>
 8009a74:	e7de      	b.n	8009a34 <system_execute_line+0x298>
            if(!read_float(line, &char_counter, &value)) { return(STATUS_BAD_NUMBER_FORMAT); }
 8009a76:	f10d 0107 	add.w	r1, sp, #7
 8009a7a:	aa03      	add	r2, sp, #12
 8009a7c:	4628      	mov	r0, r5
 8009a7e:	f7fa fb27 	bl	80040d0 <read_float>
 8009a82:	2800      	cmp	r0, #0
 8009a84:	f43f af27 	beq.w	80098d6 <system_execute_line+0x13a>
            if((line[char_counter] != 0) || (parameter > 255)) { return(STATUS_INVALID_STATEMENT); }
 8009a88:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009a8c:	5ceb      	ldrb	r3, [r5, r3]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	f47f aec4 	bne.w	800981c <system_execute_line+0x80>
 8009a94:	9c02      	ldr	r4, [sp, #8]
 8009a96:	4912      	ldr	r1, [pc, #72]	; (8009ae0 <system_execute_line+0x344>)
 8009a98:	4620      	mov	r0, r4
 8009a9a:	f7f7 fac5 	bl	8001028 <__aeabi_fcmpgt>
 8009a9e:	2800      	cmp	r0, #0
 8009aa0:	f47f aebc 	bne.w	800981c <system_execute_line+0x80>
            return(settings_store_global_setting((uint8_t)parameter, value));
 8009aa4:	4620      	mov	r0, r4
 8009aa6:	f7f7 fb05 	bl	80010b4 <__aeabi_f2uiz>
 8009aaa:	9903      	ldr	r1, [sp, #12]
 8009aac:	b2c0      	uxtb	r0, r0
 8009aae:	f7fe f87b 	bl	8007ba8 <settings_store_global_setting>
 8009ab2:	4604      	mov	r4, r0
 8009ab4:	e684      	b.n	80097c0 <system_execute_line+0x24>
                case 'X': mc_homing_cycle(HOMING_CYCLE_X); break;
 8009ab6:	2001      	movs	r0, #1
 8009ab8:	f7fa fa1e 	bl	8003ef8 <mc_homing_cycle>
 8009abc:	e7ba      	b.n	8009a34 <system_execute_line+0x298>
                case 'Y': mc_homing_cycle(HOMING_CYCLE_Y); break;
 8009abe:	2002      	movs	r0, #2
 8009ac0:	f7fa fa1a 	bl	8003ef8 <mc_homing_cycle>
 8009ac4:	e7b6      	b.n	8009a34 <system_execute_line+0x298>
              switch (line[2]) {
 8009ac6:	2b41      	cmp	r3, #65	; 0x41
 8009ac8:	f47f aea8 	bne.w	800981c <system_execute_line+0x80>
				case 'A': mc_homing_cycle(HOMING_CYCLE_A); break;
 8009acc:	2008      	movs	r0, #8
 8009ace:	e7af      	b.n	8009a30 <system_execute_line+0x294>
              case '*': settings_restore(SETTINGS_RESTORE_ALL); break;
 8009ad0:	20ff      	movs	r0, #255	; 0xff
 8009ad2:	f7fd ff83 	bl	80079dc <settings_restore>
 8009ad6:	e6e5      	b.n	80098a4 <system_execute_line+0x108>
              case '$': settings_restore(SETTINGS_RESTORE_DEFAULTS); break;
 8009ad8:	2001      	movs	r0, #1
 8009ada:	f7fd ff7f 	bl	80079dc <settings_restore>
 8009ade:	e6e1      	b.n	80098a4 <system_execute_line+0x108>
 8009ae0:	437f0000 	.word	0x437f0000

08009ae4 <system_flag_wco_change>:
{
 8009ae4:	b508      	push	{r3, lr}
    protocol_buffer_synchronize();
 8009ae6:	f7fc fb27 	bl	8006138 <protocol_buffer_synchronize>
  sys.report_wco_counter = 0;
 8009aea:	2200      	movs	r2, #0
 8009aec:	4b01      	ldr	r3, [pc, #4]	; (8009af4 <system_flag_wco_change+0x10>)
 8009aee:	735a      	strb	r2, [r3, #13]
 8009af0:	bd08      	pop	{r3, pc}
 8009af2:	bf00      	nop
 8009af4:	200010c8 	.word	0x200010c8

08009af8 <system_convert_array_steps_to_mpos>:
{
 8009af8:	b570      	push	{r4, r5, r6, lr}
    pos = steps[idx]/settings.steps_per_mm[idx];
 8009afa:	4d10      	ldr	r5, [pc, #64]	; (8009b3c <system_convert_array_steps_to_mpos+0x44>)
{
 8009afc:	4604      	mov	r4, r0
    pos = steps[idx]/settings.steps_per_mm[idx];
 8009afe:	6808      	ldr	r0, [r1, #0]
{
 8009b00:	460e      	mov	r6, r1
    pos = steps[idx]/settings.steps_per_mm[idx];
 8009b02:	f7f7 f881 	bl	8000c08 <__aeabi_i2f>
 8009b06:	6829      	ldr	r1, [r5, #0]
 8009b08:	f7f7 f986 	bl	8000e18 <__aeabi_fdiv>
    position[idx] = system_convert_axis_steps_to_mpos(steps, idx);
 8009b0c:	6020      	str	r0, [r4, #0]
    pos = steps[idx]/settings.steps_per_mm[idx];
 8009b0e:	6870      	ldr	r0, [r6, #4]
 8009b10:	f7f7 f87a 	bl	8000c08 <__aeabi_i2f>
 8009b14:	6869      	ldr	r1, [r5, #4]
 8009b16:	f7f7 f97f 	bl	8000e18 <__aeabi_fdiv>
    position[idx] = system_convert_axis_steps_to_mpos(steps, idx);
 8009b1a:	6060      	str	r0, [r4, #4]
    pos = steps[idx]/settings.steps_per_mm[idx];
 8009b1c:	68b0      	ldr	r0, [r6, #8]
 8009b1e:	f7f7 f873 	bl	8000c08 <__aeabi_i2f>
 8009b22:	68a9      	ldr	r1, [r5, #8]
 8009b24:	f7f7 f978 	bl	8000e18 <__aeabi_fdiv>
    position[idx] = system_convert_axis_steps_to_mpos(steps, idx);
 8009b28:	60a0      	str	r0, [r4, #8]
    pos = steps[idx]/settings.steps_per_mm[idx];
 8009b2a:	68f0      	ldr	r0, [r6, #12]
 8009b2c:	f7f7 f86c 	bl	8000c08 <__aeabi_i2f>
 8009b30:	68e9      	ldr	r1, [r5, #12]
 8009b32:	f7f7 f971 	bl	8000e18 <__aeabi_fdiv>
    position[idx] = system_convert_axis_steps_to_mpos(steps, idx);
 8009b36:	60e0      	str	r0, [r4, #12]
 8009b38:	bd70      	pop	{r4, r5, r6, pc}
 8009b3a:	bf00      	nop
 8009b3c:	20001404 	.word	0x20001404

08009b40 <system_check_travel_limits>:
{
 8009b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b42:	4c3d      	ldr	r4, [pc, #244]	; (8009c38 <system_check_travel_limits+0xf8>)
        if (target[idx] < 0 || target[idx] > -settings.max_travel[idx]) { return(true); }
 8009b44:	6807      	ldr	r7, [r0, #0]
 8009b46:	f8b4 505a 	ldrh.w	r5, [r4, #90]	; 0x5a
{
 8009b4a:	4606      	mov	r6, r0
      if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8009b4c:	07eb      	lsls	r3, r5, #31
        if (target[idx] < 0 || target[idx] > -settings.max_travel[idx]) { return(true); }
 8009b4e:	f04f 0100 	mov.w	r1, #0
 8009b52:	4638      	mov	r0, r7
      if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8009b54:	d409      	bmi.n	8009b6a <system_check_travel_limits+0x2a>
        if (target[idx] > 0 || target[idx] < settings.max_travel[idx]) { return(true); }
 8009b56:	f7f7 fa67 	bl	8001028 <__aeabi_fcmpgt>
 8009b5a:	b920      	cbnz	r0, 8009b66 <system_check_travel_limits+0x26>
 8009b5c:	4639      	mov	r1, r7
 8009b5e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8009b60:	f7f7 fa62 	bl	8001028 <__aeabi_fcmpgt>
 8009b64:	b168      	cbz	r0, 8009b82 <system_check_travel_limits+0x42>
        if (target[idx] < 0 || target[idx] > -settings.max_travel[idx]) { return(true); }
 8009b66:	2001      	movs	r0, #1
}
 8009b68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (target[idx] < 0 || target[idx] > -settings.max_travel[idx]) { return(true); }
 8009b6a:	f7f7 fa3f 	bl	8000fec <__aeabi_fcmplt>
 8009b6e:	2800      	cmp	r0, #0
 8009b70:	d1f9      	bne.n	8009b66 <system_check_travel_limits+0x26>
 8009b72:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8009b74:	4639      	mov	r1, r7
 8009b76:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8009b7a:	f7f7 fa37 	bl	8000fec <__aeabi_fcmplt>
 8009b7e:	2800      	cmp	r0, #0
 8009b80:	d1f1      	bne.n	8009b66 <system_check_travel_limits+0x26>
 8009b82:	6877      	ldr	r7, [r6, #4]
      if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8009b84:	07aa      	lsls	r2, r5, #30
        if (target[idx] < 0 || target[idx] > -settings.max_travel[idx]) { return(true); }
 8009b86:	f04f 0100 	mov.w	r1, #0
 8009b8a:	4638      	mov	r0, r7
      if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8009b8c:	d42e      	bmi.n	8009bec <system_check_travel_limits+0xac>
        if (target[idx] > 0 || target[idx] < settings.max_travel[idx]) { return(true); }
 8009b8e:	f7f7 fa4b 	bl	8001028 <__aeabi_fcmpgt>
 8009b92:	2800      	cmp	r0, #0
 8009b94:	d1e7      	bne.n	8009b66 <system_check_travel_limits+0x26>
 8009b96:	4638      	mov	r0, r7
 8009b98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b9a:	f7f7 fa27 	bl	8000fec <__aeabi_fcmplt>
 8009b9e:	2800      	cmp	r0, #0
 8009ba0:	d1e1      	bne.n	8009b66 <system_check_travel_limits+0x26>
        if (target[idx] < 0 || target[idx] > -settings.max_travel[idx]) { return(true); }
 8009ba2:	68b7      	ldr	r7, [r6, #8]
      if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8009ba4:	076b      	lsls	r3, r5, #29
        if (target[idx] < 0 || target[idx] > -settings.max_travel[idx]) { return(true); }
 8009ba6:	f04f 0100 	mov.w	r1, #0
 8009baa:	4638      	mov	r0, r7
      if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8009bac:	d42b      	bmi.n	8009c06 <system_check_travel_limits+0xc6>
        if (target[idx] > 0 || target[idx] < settings.max_travel[idx]) { return(true); }
 8009bae:	f7f7 fa3b 	bl	8001028 <__aeabi_fcmpgt>
 8009bb2:	2800      	cmp	r0, #0
 8009bb4:	d1d7      	bne.n	8009b66 <system_check_travel_limits+0x26>
 8009bb6:	4638      	mov	r0, r7
 8009bb8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009bba:	f7f7 fa17 	bl	8000fec <__aeabi_fcmplt>
 8009bbe:	2800      	cmp	r0, #0
 8009bc0:	d1d1      	bne.n	8009b66 <system_check_travel_limits+0x26>
      if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8009bc2:	f015 0f08 	tst.w	r5, #8
        if (target[idx] < 0 || target[idx] > -settings.max_travel[idx]) { return(true); }
 8009bc6:	68f5      	ldr	r5, [r6, #12]
 8009bc8:	f04f 0100 	mov.w	r1, #0
 8009bcc:	4628      	mov	r0, r5
      if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8009bce:	d027      	beq.n	8009c20 <system_check_travel_limits+0xe0>
        if (target[idx] < 0 || target[idx] > -settings.max_travel[idx]) { return(true); }
 8009bd0:	f7f7 fa0c 	bl	8000fec <__aeabi_fcmplt>
 8009bd4:	2800      	cmp	r0, #0
 8009bd6:	d1c6      	bne.n	8009b66 <system_check_travel_limits+0x26>
 8009bd8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8009bda:	4628      	mov	r0, r5
 8009bdc:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8009be0:	f7f7 fa22 	bl	8001028 <__aeabi_fcmpgt>
  return(false);
 8009be4:	3000      	adds	r0, #0
 8009be6:	bf18      	it	ne
 8009be8:	2001      	movne	r0, #1
 8009bea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (target[idx] < 0 || target[idx] > -settings.max_travel[idx]) { return(true); }
 8009bec:	f7f7 f9fe 	bl	8000fec <__aeabi_fcmplt>
 8009bf0:	2800      	cmp	r0, #0
 8009bf2:	d1b8      	bne.n	8009b66 <system_check_travel_limits+0x26>
 8009bf4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009bf6:	4638      	mov	r0, r7
 8009bf8:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8009bfc:	f7f7 fa14 	bl	8001028 <__aeabi_fcmpgt>
 8009c00:	2800      	cmp	r0, #0
 8009c02:	d0ce      	beq.n	8009ba2 <system_check_travel_limits+0x62>
 8009c04:	e7af      	b.n	8009b66 <system_check_travel_limits+0x26>
 8009c06:	f7f7 f9f1 	bl	8000fec <__aeabi_fcmplt>
 8009c0a:	2800      	cmp	r0, #0
 8009c0c:	d1ab      	bne.n	8009b66 <system_check_travel_limits+0x26>
 8009c0e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009c10:	4638      	mov	r0, r7
 8009c12:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8009c16:	f7f7 fa07 	bl	8001028 <__aeabi_fcmpgt>
 8009c1a:	2800      	cmp	r0, #0
 8009c1c:	d0d1      	beq.n	8009bc2 <system_check_travel_limits+0x82>
 8009c1e:	e7a2      	b.n	8009b66 <system_check_travel_limits+0x26>
        if (target[idx] > 0 || target[idx] < settings.max_travel[idx]) { return(true); }
 8009c20:	f7f7 fa02 	bl	8001028 <__aeabi_fcmpgt>
 8009c24:	2800      	cmp	r0, #0
 8009c26:	d19e      	bne.n	8009b66 <system_check_travel_limits+0x26>
 8009c28:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8009c2a:	4628      	mov	r0, r5
 8009c2c:	f7f7 f9de 	bl	8000fec <__aeabi_fcmplt>
  return(false);
 8009c30:	3000      	adds	r0, #0
 8009c32:	bf18      	it	ne
 8009c34:	2001      	movne	r0, #1
 8009c36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c38:	20001404 	.word	0x20001404

08009c3c <system_set_exec_state_flag>:
  __ASM volatile ("cpsid i");
 8009c3c:	b672      	cpsid	i
  sys_rt_exec_state |= (mask);
 8009c3e:	4a03      	ldr	r2, [pc, #12]	; (8009c4c <system_set_exec_state_flag+0x10>)
 8009c40:	7813      	ldrb	r3, [r2, #0]
 8009c42:	4318      	orrs	r0, r3
 8009c44:	7010      	strb	r0, [r2, #0]
  __ASM volatile ("cpsie i");
 8009c46:	b662      	cpsie	i
 8009c48:	4770      	bx	lr
 8009c4a:	bf00      	nop
 8009c4c:	200010dd 	.word	0x200010dd

08009c50 <system_clear_exec_state_flag>:
  __ASM volatile ("cpsid i");
 8009c50:	b672      	cpsid	i
  sys_rt_exec_state &= ~(mask);
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_state &= ~(mask);
 8009c52:	4a03      	ldr	r2, [pc, #12]	; (8009c60 <system_clear_exec_state_flag+0x10>)
 8009c54:	7813      	ldrb	r3, [r2, #0]
 8009c56:	ea23 0000 	bic.w	r0, r3, r0
 8009c5a:	7010      	strb	r0, [r2, #0]
  __ASM volatile ("cpsie i");
 8009c5c:	b662      	cpsie	i
 8009c5e:	4770      	bx	lr
 8009c60:	200010dd 	.word	0x200010dd

08009c64 <system_set_exec_alarm>:
  __ASM volatile ("cpsid i");
 8009c64:	b672      	cpsid	i
  sys_rt_exec_alarm = (code);
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_alarm = (code);
 8009c66:	4b02      	ldr	r3, [pc, #8]	; (8009c70 <system_set_exec_alarm+0xc>)
 8009c68:	7018      	strb	r0, [r3, #0]
  __ASM volatile ("cpsie i");
 8009c6a:	b662      	cpsie	i
 8009c6c:	4770      	bx	lr
 8009c6e:	bf00      	nop
 8009c70:	20001100 	.word	0x20001100

08009c74 <system_clear_exec_alarm>:
  __ASM volatile ("cpsid i");
 8009c74:	b672      	cpsid	i
  sys_rt_exec_alarm = 0;
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_alarm = 0;
 8009c76:	2200      	movs	r2, #0
 8009c78:	4b01      	ldr	r3, [pc, #4]	; (8009c80 <system_clear_exec_alarm+0xc>)
 8009c7a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i");
 8009c7c:	b662      	cpsie	i
 8009c7e:	4770      	bx	lr
 8009c80:	20001100 	.word	0x20001100

08009c84 <system_set_exec_motion_override_flag>:
  __ASM volatile ("cpsid i");
 8009c84:	b672      	cpsid	i
  sys_rt_exec_motion_override |= (mask);
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_motion_override |= (mask);
 8009c86:	4a03      	ldr	r2, [pc, #12]	; (8009c94 <system_set_exec_motion_override_flag+0x10>)
 8009c88:	7813      	ldrb	r3, [r2, #0]
 8009c8a:	4318      	orrs	r0, r3
 8009c8c:	7010      	strb	r0, [r2, #0]
  __ASM volatile ("cpsie i");
 8009c8e:	b662      	cpsie	i
 8009c90:	4770      	bx	lr
 8009c92:	bf00      	nop
 8009c94:	200010c4 	.word	0x200010c4

08009c98 <system_set_exec_accessory_override_flag>:
  __ASM volatile ("cpsid i");
 8009c98:	b672      	cpsid	i
  sys_rt_exec_accessory_override |= (mask);
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_accessory_override |= (mask);
 8009c9a:	4a03      	ldr	r2, [pc, #12]	; (8009ca8 <system_set_exec_accessory_override_flag+0x10>)
 8009c9c:	7813      	ldrb	r3, [r2, #0]
 8009c9e:	4318      	orrs	r0, r3
 8009ca0:	7010      	strb	r0, [r2, #0]
  __ASM volatile ("cpsie i");
 8009ca2:	b662      	cpsie	i
 8009ca4:	4770      	bx	lr
 8009ca6:	bf00      	nop
 8009ca8:	200010dc 	.word	0x200010dc

08009cac <system_clear_exec_motion_overrides>:
  __ASM volatile ("cpsid i");
 8009cac:	b672      	cpsid	i
  sys_rt_exec_motion_override = 0;
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_motion_override = 0;
 8009cae:	2200      	movs	r2, #0
 8009cb0:	4b01      	ldr	r3, [pc, #4]	; (8009cb8 <system_clear_exec_motion_overrides+0xc>)
 8009cb2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i");
 8009cb4:	b662      	cpsie	i
 8009cb6:	4770      	bx	lr
 8009cb8:	200010c4 	.word	0x200010c4

08009cbc <system_clear_exec_accessory_overrides>:
  __ASM volatile ("cpsid i");
 8009cbc:	b672      	cpsid	i
  sys_rt_exec_accessory_override = 0;
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_accessory_override = 0;
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	4b01      	ldr	r3, [pc, #4]	; (8009cc8 <system_clear_exec_accessory_overrides+0xc>)
 8009cc2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i");
 8009cc4:	b662      	cpsie	i
 8009cc6:	4770      	bx	lr
 8009cc8:	200010dc 	.word	0x200010dc

08009ccc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8009ccc:	b430      	push	{r4, r5}
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8009cce:	2400      	movs	r4, #0
  RCC->CIR = 0x009F0000;
 8009cd0:	f44f 051f 	mov.w	r5, #10420224	; 0x9f0000
  RCC->CR |= (uint32_t)0x00000001;
 8009cd4:	4b3a      	ldr	r3, [pc, #232]	; (8009dc0 <SystemInit+0xf4>)
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8009cd6:	493b      	ldr	r1, [pc, #236]	; (8009dc4 <SystemInit+0xf8>)
  RCC->CR |= (uint32_t)0x00000001;
 8009cd8:	6818      	ldr	r0, [r3, #0]
{
 8009cda:	b082      	sub	sp, #8
  RCC->CR |= (uint32_t)0x00000001;
 8009cdc:	f040 0001 	orr.w	r0, r0, #1
 8009ce0:	6018      	str	r0, [r3, #0]
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8009ce2:	6858      	ldr	r0, [r3, #4]
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8009ce4:	461a      	mov	r2, r3
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8009ce6:	4001      	ands	r1, r0
 8009ce8:	6059      	str	r1, [r3, #4]
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8009cea:	6819      	ldr	r1, [r3, #0]
 8009cec:	f021 7184 	bic.w	r1, r1, #17301504	; 0x1080000
 8009cf0:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8009cf4:	6019      	str	r1, [r3, #0]
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8009cf6:	6819      	ldr	r1, [r3, #0]
 8009cf8:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8009cfc:	6019      	str	r1, [r3, #0]
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8009cfe:	6859      	ldr	r1, [r3, #4]
 8009d00:	f421 01fe 	bic.w	r1, r1, #8323072	; 0x7f0000
 8009d04:	6059      	str	r1, [r3, #4]
  RCC->CIR = 0x009F0000;
 8009d06:	609d      	str	r5, [r3, #8]
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8009d08:	9400      	str	r4, [sp, #0]
 8009d0a:	9401      	str	r4, [sp, #4]
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8009d0c:	6819      	ldr	r1, [r3, #0]
 8009d0e:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8009d12:	6019      	str	r1, [r3, #0]
 8009d14:	e003      	b.n	8009d1e <SystemInit+0x52>
    StartUpCounter++;  
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8009d16:	9b00      	ldr	r3, [sp, #0]
 8009d18:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8009d1c:	d009      	beq.n	8009d32 <SystemInit+0x66>
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8009d1e:	6813      	ldr	r3, [r2, #0]
 8009d20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d24:	9301      	str	r3, [sp, #4]
    StartUpCounter++;  
 8009d26:	9b00      	ldr	r3, [sp, #0]
 8009d28:	3301      	adds	r3, #1
 8009d2a:	9300      	str	r3, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8009d2c:	9b01      	ldr	r3, [sp, #4]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d0f1      	beq.n	8009d16 <SystemInit+0x4a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8009d32:	4b23      	ldr	r3, [pc, #140]	; (8009dc0 <SystemInit+0xf4>)
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
 8009d3a:	bf18      	it	ne
 8009d3c:	2301      	movne	r3, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8009d3e:	9301      	str	r3, [sp, #4]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8009d40:	9b01      	ldr	r3, [sp, #4]
 8009d42:	2b01      	cmp	r3, #1
 8009d44:	d006      	beq.n	8009d54 <SystemInit+0x88>
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8009d46:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009d4a:	4b1f      	ldr	r3, [pc, #124]	; (8009dc8 <SystemInit+0xfc>)
 8009d4c:	609a      	str	r2, [r3, #8]
}
 8009d4e:	b002      	add	sp, #8
 8009d50:	bc30      	pop	{r4, r5}
 8009d52:	4770      	bx	lr
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8009d54:	491d      	ldr	r1, [pc, #116]	; (8009dcc <SystemInit+0x100>)
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8009d56:	4b1a      	ldr	r3, [pc, #104]	; (8009dc0 <SystemInit+0xf4>)
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8009d58:	6808      	ldr	r0, [r1, #0]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8009d5a:	461a      	mov	r2, r3
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8009d5c:	f040 0010 	orr.w	r0, r0, #16
 8009d60:	6008      	str	r0, [r1, #0]
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8009d62:	6808      	ldr	r0, [r1, #0]
 8009d64:	f020 0003 	bic.w	r0, r0, #3
 8009d68:	6008      	str	r0, [r1, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8009d6a:	6808      	ldr	r0, [r1, #0]
 8009d6c:	f040 0002 	orr.w	r0, r0, #2
 8009d70:	6008      	str	r0, [r1, #0]
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8009d72:	6859      	ldr	r1, [r3, #4]
 8009d74:	6059      	str	r1, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8009d76:	6859      	ldr	r1, [r3, #4]
 8009d78:	6059      	str	r1, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8009d7a:	6859      	ldr	r1, [r3, #4]
 8009d7c:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8009d80:	6059      	str	r1, [r3, #4]
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8009d82:	6859      	ldr	r1, [r3, #4]
 8009d84:	f421 117c 	bic.w	r1, r1, #4128768	; 0x3f0000
 8009d88:	6059      	str	r1, [r3, #4]
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL6); // SCE2
 8009d8a:	6859      	ldr	r1, [r3, #4]
 8009d8c:	f441 1188 	orr.w	r1, r1, #1114112	; 0x110000
 8009d90:	6059      	str	r1, [r3, #4]
    RCC->CR |= RCC_CR_PLLON;
 8009d92:	6819      	ldr	r1, [r3, #0]
 8009d94:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8009d98:	6019      	str	r1, [r3, #0]
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8009d9a:	6813      	ldr	r3, [r2, #0]
 8009d9c:	019b      	lsls	r3, r3, #6
 8009d9e:	d5fc      	bpl.n	8009d9a <SystemInit+0xce>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8009da0:	6853      	ldr	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8009da2:	4907      	ldr	r1, [pc, #28]	; (8009dc0 <SystemInit+0xf4>)
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8009da4:	f023 0303 	bic.w	r3, r3, #3
 8009da8:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8009daa:	6853      	ldr	r3, [r2, #4]
 8009dac:	f043 0302 	orr.w	r3, r3, #2
 8009db0:	6053      	str	r3, [r2, #4]
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8009db2:	684b      	ldr	r3, [r1, #4]
 8009db4:	f003 030c 	and.w	r3, r3, #12
 8009db8:	2b08      	cmp	r3, #8
 8009dba:	d1fa      	bne.n	8009db2 <SystemInit+0xe6>
 8009dbc:	e7c3      	b.n	8009d46 <SystemInit+0x7a>
 8009dbe:	bf00      	nop
 8009dc0:	40021000 	.word	0x40021000
 8009dc4:	f8ff0000 	.word	0xf8ff0000
 8009dc8:	e000ed00 	.word	0xe000ed00
 8009dcc:	40022000 	.word	0x40022000

08009dd0 <tmc_set>:
		while (!(USART3->SR & USART_FLAG_TXE));
	}
}

void tmc_set(unsigned char motor, unsigned char d3, unsigned char d2, unsigned char d1, unsigned char d0)
{
 8009dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
	*crc = 0;
 8009dd2:	2700      	movs	r7, #0
{
 8009dd4:	b083      	sub	sp, #12
	unsigned char cmd1[] = {0x05, motor, 0x90, d3, d2, d1, d0, 0xFF}; // set CRC to FF and calculate in next step
 8009dd6:	f04f 0c05 	mov.w	ip, #5
 8009dda:	f04f 0e90 	mov.w	lr, #144	; 0x90
 8009dde:	f10d 35ff 	add.w	r5, sp, #4294967295
	*crc = 0;
 8009de2:	463c      	mov	r4, r7
 8009de4:	462e      	mov	r6, r5
	unsigned char cmd1[] = {0x05, motor, 0x90, d3, d2, d1, d0, 0xFF}; // set CRC to FF and calculate in next step
 8009de6:	f88d 2004 	strb.w	r2, [sp, #4]
{
 8009dea:	f89d 2020 	ldrb.w	r2, [sp, #32]
	unsigned char cmd1[] = {0x05, motor, 0x90, d3, d2, d1, d0, 0xFF}; // set CRC to FF and calculate in next step
 8009dee:	f88d 0001 	strb.w	r0, [sp, #1]
 8009df2:	f88d 1003 	strb.w	r1, [sp, #3]
 8009df6:	f88d 3005 	strb.w	r3, [sp, #5]
	*crc = 0;
 8009dfa:	f88d 7007 	strb.w	r7, [sp, #7]
	unsigned char cmd1[] = {0x05, motor, 0x90, d3, d2, d1, d0, 0xFF}; // set CRC to FF and calculate in next step
 8009dfe:	f88d c000 	strb.w	ip, [sp]
 8009e02:	f88d e002 	strb.w	lr, [sp, #2]
 8009e06:	f88d 2006 	strb.w	r2, [sp, #6]
 8009e0a:	f10d 0006 	add.w	r0, sp, #6
		currentByte = datagram[i];  // Retrieve a byte to be sent from Array
 8009e0e:	f816 3f01 	ldrb.w	r3, [r6, #1]!
				*crc = (*crc << 1);
 8009e12:	0061      	lsls	r1, r4, #1
 8009e14:	f003 0201 	and.w	r2, r3, #1
 8009e18:	ebb2 1fd4 	cmp.w	r2, r4, lsr #7
				*crc = (*crc << 1) ^ 0x07;
 8009e1c:	f081 0207 	eor.w	r2, r1, #7
 8009e20:	bf18      	it	ne
 8009e22:	4611      	movne	r1, r2
 8009e24:	b2c9      	uxtb	r1, r1
 8009e26:	f3c3 0440 	ubfx	r4, r3, #1, #1
				*crc = (*crc << 1);
 8009e2a:	004a      	lsls	r2, r1, #1
 8009e2c:	ebb4 1fd1 	cmp.w	r4, r1, lsr #7
				*crc = (*crc << 1) ^ 0x07;
 8009e30:	f082 0107 	eor.w	r1, r2, #7
 8009e34:	bf18      	it	ne
 8009e36:	460a      	movne	r2, r1
 8009e38:	b2d2      	uxtb	r2, r2
 8009e3a:	f3c3 0480 	ubfx	r4, r3, #2, #1
				*crc = (*crc << 1);
 8009e3e:	0051      	lsls	r1, r2, #1
 8009e40:	ebb4 1fd2 	cmp.w	r4, r2, lsr #7
				*crc = (*crc << 1) ^ 0x07;
 8009e44:	f081 0207 	eor.w	r2, r1, #7
 8009e48:	bf18      	it	ne
 8009e4a:	4611      	movne	r1, r2
 8009e4c:	b2c9      	uxtb	r1, r1
 8009e4e:	f3c3 04c0 	ubfx	r4, r3, #3, #1
				*crc = (*crc << 1);
 8009e52:	004a      	lsls	r2, r1, #1
 8009e54:	ebb4 1fd1 	cmp.w	r4, r1, lsr #7
				*crc = (*crc << 1) ^ 0x07;
 8009e58:	f082 0107 	eor.w	r1, r2, #7
 8009e5c:	bf18      	it	ne
 8009e5e:	460a      	movne	r2, r1
 8009e60:	b2d2      	uxtb	r2, r2
 8009e62:	f3c3 1400 	ubfx	r4, r3, #4, #1
				*crc = (*crc << 1);
 8009e66:	0051      	lsls	r1, r2, #1
 8009e68:	ebb4 1fd2 	cmp.w	r4, r2, lsr #7
				*crc = (*crc << 1) ^ 0x07;
 8009e6c:	f081 0207 	eor.w	r2, r1, #7
 8009e70:	bf18      	it	ne
 8009e72:	4611      	movne	r1, r2
 8009e74:	b2c9      	uxtb	r1, r1
 8009e76:	f3c3 1440 	ubfx	r4, r3, #5, #1
				*crc = (*crc << 1);
 8009e7a:	004a      	lsls	r2, r1, #1
 8009e7c:	ebb4 1fd1 	cmp.w	r4, r1, lsr #7
				*crc = (*crc << 1) ^ 0x07;
 8009e80:	f082 0107 	eor.w	r1, r2, #7
 8009e84:	bf18      	it	ne
 8009e86:	460a      	movne	r2, r1
 8009e88:	b2d2      	uxtb	r2, r2
				*crc = (*crc << 1);
 8009e8a:	0054      	lsls	r4, r2, #1
 8009e8c:	f3c3 1180 	ubfx	r1, r3, #6, #1
 8009e90:	ebb1 1fd2 	cmp.w	r1, r2, lsr #7
				*crc = (*crc << 1) ^ 0x07;
 8009e94:	f084 0207 	eor.w	r2, r4, #7
 8009e98:	bf18      	it	ne
 8009e9a:	4614      	movne	r4, r2
 8009e9c:	b2e4      	uxtb	r4, r4
 8009e9e:	09e2      	lsrs	r2, r4, #7
				*crc = (*crc << 1);
 8009ea0:	0064      	lsls	r4, r4, #1
 8009ea2:	ebb2 1fd3 	cmp.w	r2, r3, lsr #7
				*crc = (*crc << 1) ^ 0x07;
 8009ea6:	f084 0307 	eor.w	r3, r4, #7
 8009eaa:	bf18      	it	ne
 8009eac:	461c      	movne	r4, r3
	for (i=0; i<(datagramLength-1); i++)
 8009eae:	42b0      	cmp	r0, r6
 8009eb0:	b2e4      	uxtb	r4, r4
 8009eb2:	f88d 4007 	strb.w	r4, [sp, #7]
 8009eb6:	d1aa      	bne.n	8009e0e <tmc_set+0x3e>
	swuart_calcCRC(cmd1, 8);

	for(int i=0; i<8; i++)
	{
		USART_SendData(USART3, cmd1[i]);
 8009eb8:	4c07      	ldr	r4, [pc, #28]	; (8009ed8 <tmc_set+0x108>)
 8009eba:	f10d 0607 	add.w	r6, sp, #7
 8009ebe:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8009ec2:	4620      	mov	r0, r4
 8009ec4:	f7f7 fe88 	bl	8001bd8 <USART_SendData>
		while (!(USART3->SR & USART_FLAG_TXE));
 8009ec8:	8823      	ldrh	r3, [r4, #0]
 8009eca:	061b      	lsls	r3, r3, #24
 8009ecc:	d5fc      	bpl.n	8009ec8 <tmc_set+0xf8>
	for(int i=0; i<8; i++)
 8009ece:	42ae      	cmp	r6, r5
 8009ed0:	d1f5      	bne.n	8009ebe <tmc_set+0xee>
	}
}
 8009ed2:	b003      	add	sp, #12
 8009ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ed6:	bf00      	nop
 8009ed8:	40004800 	.word	0x40004800

08009edc <tmc_read>:
	}
}


void tmc_read(unsigned char motor, unsigned char reg)
{
 8009edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ee0:	4606      	mov	r6, r0
 8009ee2:	b08a      	sub	sp, #40	; 0x28
 8009ee4:	460d      	mov	r5, r1
	  char buffer[30];

	  serial3_reset_read_buffer();
 8009ee6:	f7fd fd47 	bl	8007978 <serial3_reset_read_buffer>
 8009eea:	f016 0f01 	tst.w	r6, #1
				*crc = (*crc << 1) ^ 0x07;
 8009eee:	bf14      	ite	ne
 8009ef0:	f44f 72d5 	movne.w	r2, #426	; 0x1aa
 8009ef4:	f44f 72d2 	moveq.w	r2, #420	; 0x1a4
 8009ef8:	f016 0f02 	tst.w	r6, #2
 8009efc:	f082 0307 	eor.w	r3, r2, #7
 8009f00:	bf18      	it	ne
 8009f02:	4613      	movne	r3, r2
 8009f04:	b2db      	uxtb	r3, r3
 8009f06:	005a      	lsls	r2, r3, #1
 8009f08:	f016 0f04 	tst.w	r6, #4
 8009f0c:	f082 0307 	eor.w	r3, r2, #7
 8009f10:	bf18      	it	ne
 8009f12:	4613      	movne	r3, r2
 8009f14:	b2db      	uxtb	r3, r3
 8009f16:	005b      	lsls	r3, r3, #1
 8009f18:	f016 0f08 	tst.w	r6, #8
 8009f1c:	f083 0207 	eor.w	r2, r3, #7
 8009f20:	bf18      	it	ne
 8009f22:	4613      	movne	r3, r2
 8009f24:	f016 0f10 	tst.w	r6, #16
 8009f28:	ea4f 0243 	mov.w	r2, r3, lsl #1
 8009f2c:	f082 0307 	eor.w	r3, r2, #7
 8009f30:	bf18      	it	ne
 8009f32:	4613      	movne	r3, r2
 8009f34:	b2db      	uxtb	r3, r3
 8009f36:	005b      	lsls	r3, r3, #1
 8009f38:	f016 0f20 	tst.w	r6, #32
 8009f3c:	f083 0207 	eor.w	r2, r3, #7
 8009f40:	bf18      	it	ne
 8009f42:	4613      	movne	r3, r2
 8009f44:	f3c6 1180 	ubfx	r1, r6, #6, #1
 8009f48:	ebb1 1fd3 	cmp.w	r1, r3, lsr #7
 8009f4c:	ea4f 0243 	mov.w	r2, r3, lsl #1
 8009f50:	f082 0307 	eor.w	r3, r2, #7
 8009f54:	bf08      	it	eq
 8009f56:	4613      	moveq	r3, r2
 8009f58:	b2db      	uxtb	r3, r3
 8009f5a:	09da      	lsrs	r2, r3, #7
 8009f5c:	005b      	lsls	r3, r3, #1
 8009f5e:	ebb2 1fd6 	cmp.w	r2, r6, lsr #7
 8009f62:	f083 0207 	eor.w	r2, r3, #7
 8009f66:	bf18      	it	ne
 8009f68:	4613      	movne	r3, r2
 8009f6a:	b2da      	uxtb	r2, r3
				*crc = (*crc << 1);
 8009f6c:	0053      	lsls	r3, r2, #1
 8009f6e:	f005 0101 	and.w	r1, r5, #1
 8009f72:	ebb1 1fd2 	cmp.w	r1, r2, lsr #7
				*crc = (*crc << 1) ^ 0x07;
 8009f76:	f083 0207 	eor.w	r2, r3, #7
 8009f7a:	bf18      	it	ne
 8009f7c:	4613      	movne	r3, r2
 8009f7e:	b2da      	uxtb	r2, r3
				*crc = (*crc << 1);
 8009f80:	0053      	lsls	r3, r2, #1
 8009f82:	f3c5 0140 	ubfx	r1, r5, #1, #1
 8009f86:	ebb1 1fd2 	cmp.w	r1, r2, lsr #7
				*crc = (*crc << 1) ^ 0x07;
 8009f8a:	f083 0207 	eor.w	r2, r3, #7
 8009f8e:	bf18      	it	ne
 8009f90:	4613      	movne	r3, r2
 8009f92:	b2da      	uxtb	r2, r3
				*crc = (*crc << 1);
 8009f94:	0053      	lsls	r3, r2, #1
 8009f96:	f3c5 0180 	ubfx	r1, r5, #2, #1
 8009f9a:	ebb1 1fd2 	cmp.w	r1, r2, lsr #7
				*crc = (*crc << 1) ^ 0x07;
 8009f9e:	f083 0207 	eor.w	r2, r3, #7
 8009fa2:	bf18      	it	ne
 8009fa4:	4613      	movne	r3, r2
 8009fa6:	b2da      	uxtb	r2, r3
				*crc = (*crc << 1);
 8009fa8:	0053      	lsls	r3, r2, #1
 8009faa:	f3c5 01c0 	ubfx	r1, r5, #3, #1
 8009fae:	ebb1 1fd2 	cmp.w	r1, r2, lsr #7
				*crc = (*crc << 1) ^ 0x07;
 8009fb2:	f083 0207 	eor.w	r2, r3, #7
 8009fb6:	bf18      	it	ne
 8009fb8:	4613      	movne	r3, r2
 8009fba:	b2da      	uxtb	r2, r3
				*crc = (*crc << 1);
 8009fbc:	0053      	lsls	r3, r2, #1
 8009fbe:	f3c5 1100 	ubfx	r1, r5, #4, #1
 8009fc2:	ebb1 1fd2 	cmp.w	r1, r2, lsr #7
				*crc = (*crc << 1) ^ 0x07;
 8009fc6:	f083 0207 	eor.w	r2, r3, #7
 8009fca:	bf18      	it	ne
 8009fcc:	4613      	movne	r3, r2
 8009fce:	b2da      	uxtb	r2, r3
				*crc = (*crc << 1);
 8009fd0:	0053      	lsls	r3, r2, #1
 8009fd2:	f3c5 1140 	ubfx	r1, r5, #5, #1
 8009fd6:	ebb1 1fd2 	cmp.w	r1, r2, lsr #7
				*crc = (*crc << 1) ^ 0x07;
 8009fda:	f083 0207 	eor.w	r2, r3, #7
 8009fde:	bf18      	it	ne
 8009fe0:	4613      	movne	r3, r2
 8009fe2:	b2da      	uxtb	r2, r3
				*crc = (*crc << 1);
 8009fe4:	0053      	lsls	r3, r2, #1
 8009fe6:	f3c5 1180 	ubfx	r1, r5, #6, #1
 8009fea:	ebb1 1fd2 	cmp.w	r1, r2, lsr #7
				*crc = (*crc << 1) ^ 0x07;
 8009fee:	f083 0207 	eor.w	r2, r3, #7
 8009ff2:	bf18      	it	ne
 8009ff4:	4613      	movne	r3, r2
 8009ff6:	b2db      	uxtb	r3, r3
 8009ff8:	09da      	lsrs	r2, r3, #7
				*crc = (*crc << 1);
 8009ffa:	005b      	lsls	r3, r3, #1
 8009ffc:	ebb2 1fd5 	cmp.w	r2, r5, lsr #7
				*crc = (*crc << 1) ^ 0x07;
 800a000:	f083 0207 	eor.w	r2, r3, #7
 800a004:	bf18      	it	ne
 800a006:	4613      	movne	r3, r2

	  unsigned char cmd1[] = {0x05, motor, reg, 0xFF}; // set CRC to FF and calculate in next step
 800a008:	2205      	movs	r2, #5
	  swuart_calcCRC(cmd1, 4);

	  for(int i=0; i<4; i++)
	  {
		  USART_SendData(USART3, cmd1[i]);
 800a00a:	4c1e      	ldr	r4, [pc, #120]	; (800a084 <tmc_read+0x1a8>)
	  unsigned char cmd1[] = {0x05, motor, reg, 0xFF}; // set CRC to FF and calculate in next step
 800a00c:	f88d 6005 	strb.w	r6, [sp, #5]
 800a010:	f88d 5006 	strb.w	r5, [sp, #6]
 800a014:	f88d 3007 	strb.w	r3, [sp, #7]
 800a018:	f88d 2004 	strb.w	r2, [sp, #4]
 800a01c:	ae01      	add	r6, sp, #4
 800a01e:	ad02      	add	r5, sp, #8
		  USART_SendData(USART3, cmd1[i]);
 800a020:	f816 1b01 	ldrb.w	r1, [r6], #1
 800a024:	4620      	mov	r0, r4
 800a026:	f7f7 fdd7 	bl	8001bd8 <USART_SendData>
		  while (!(USART3->SR & USART_FLAG_TXE));
 800a02a:	8823      	ldrh	r3, [r4, #0]
 800a02c:	061b      	lsls	r3, r3, #24
 800a02e:	d5fc      	bpl.n	800a02a <tmc_read+0x14e>
	  for(int i=0; i<4; i++)
 800a030:	42ae      	cmp	r6, r5
 800a032:	d1f5      	bne.n	800a020 <tmc_read+0x144>
	  }

	  _delay_ms(10);
 800a034:	200a      	movs	r0, #10
 800a036:	f7f9 fce9 	bl	8003a0c <_delay_ms>

	  int c1 = 0;
	  c1 = serial3_get_rx_buffer_count();
 800a03a:	f7fd fb29 	bl	8007690 <serial3_get_rx_buffer_count>
 800a03e:	4606      	mov	r6, r0

	  printString("[TMC:");
 800a040:	4811      	ldr	r0, [pc, #68]	; (800a088 <tmc_read+0x1ac>)
 800a042:	f7fa fea1 	bl	8004d88 <printString>
	  for(int i=0; i < c1; i++)
 800a046:	b1ae      	cbz	r6, 800a074 <tmc_read+0x198>
 800a048:	2400      	movs	r4, #0
	  {
		  uint8_t d = serial3_read();
		  itoa (d, buffer, 10);
		  printString(buffer);
		  if(i<(c1-1))
			  printString(",");
 800a04a:	f8df 8044 	ldr.w	r8, [pc, #68]	; 800a090 <tmc_read+0x1b4>
 800a04e:	1e77      	subs	r7, r6, #1
		  uint8_t d = serial3_read();
 800a050:	f7fd fb72 	bl	8007738 <serial3_read>
		  itoa (d, buffer, 10);
 800a054:	220a      	movs	r2, #10
 800a056:	4629      	mov	r1, r5
 800a058:	f001 f9ec 	bl	800b434 <itoa>
		  printString(buffer);
 800a05c:	4628      	mov	r0, r5
 800a05e:	f7fa fe93 	bl	8004d88 <printString>
		  if(i<(c1-1))
 800a062:	42bc      	cmp	r4, r7
	  for(int i=0; i < c1; i++)
 800a064:	f104 0401 	add.w	r4, r4, #1
		  if(i<(c1-1))
 800a068:	da02      	bge.n	800a070 <tmc_read+0x194>
			  printString(",");
 800a06a:	4640      	mov	r0, r8
 800a06c:	f7fa fe8c 	bl	8004d88 <printString>
	  for(int i=0; i < c1; i++)
 800a070:	42a6      	cmp	r6, r4
 800a072:	d1ed      	bne.n	800a050 <tmc_read+0x174>
	  }
	  printString("]\r\n");
 800a074:	4805      	ldr	r0, [pc, #20]	; (800a08c <tmc_read+0x1b0>)
 800a076:	f7fa fe87 	bl	8004d88 <printString>

	  serial3_reset_read_buffer();
 800a07a:	f7fd fc7d 	bl	8007978 <serial3_reset_read_buffer>

}
 800a07e:	b00a      	add	sp, #40	; 0x28
 800a080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a084:	40004800 	.word	0x40004800
 800a088:	0800c880 	.word	0x0800c880
 800a08c:	0800c888 	.word	0x0800c888
 800a090:	0800c88c 	.word	0x0800c88c

0800a094 <Standard_GetConfiguration>:
* Output         : None.
* Return         : Return 1 , if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
uint8_t *Standard_GetConfiguration(uint16_t Length)
{
 800a094:	b508      	push	{r3, lr}
  if (Length == 0)
 800a096:	b138      	cbz	r0, 800a0a8 <Standard_GetConfiguration+0x14>
  {
    pInformation->Ctrl_Info.Usb_wLength =
      sizeof(pInformation->Current_Configuration);
    return 0;
  }
  pUser_Standard_Requests->User_GetConfiguration();
 800a098:	4b06      	ldr	r3, [pc, #24]	; (800a0b4 <Standard_GetConfiguration+0x20>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	4798      	blx	r3
  return (uint8_t *)&pInformation->Current_Configuration;
 800a0a0:	4b05      	ldr	r3, [pc, #20]	; (800a0b8 <Standard_GetConfiguration+0x24>)
 800a0a2:	6818      	ldr	r0, [r3, #0]
 800a0a4:	300a      	adds	r0, #10
}
 800a0a6:	bd08      	pop	{r3, pc}
    pInformation->Ctrl_Info.Usb_wLength =
 800a0a8:	2201      	movs	r2, #1
 800a0aa:	4b03      	ldr	r3, [pc, #12]	; (800a0b8 <Standard_GetConfiguration+0x24>)
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	821a      	strh	r2, [r3, #16]
    return 0;
 800a0b0:	bd08      	pop	{r3, pc}
 800a0b2:	bf00      	nop
 800a0b4:	2000149c 	.word	0x2000149c
 800a0b8:	200014a0 	.word	0x200014a0

0800a0bc <Standard_GetInterface>:
* Output         : None.
* Return         : Return 0, if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
uint8_t *Standard_GetInterface(uint16_t Length)
{
 800a0bc:	b508      	push	{r3, lr}
  if (Length == 0)
 800a0be:	b138      	cbz	r0, 800a0d0 <Standard_GetInterface+0x14>
  {
    pInformation->Ctrl_Info.Usb_wLength =
      sizeof(pInformation->Current_AlternateSetting);
    return 0;
  }
  pUser_Standard_Requests->User_GetInterface();
 800a0c0:	4b06      	ldr	r3, [pc, #24]	; (800a0dc <Standard_GetInterface+0x20>)
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	689b      	ldr	r3, [r3, #8]
 800a0c6:	4798      	blx	r3
  return (uint8_t *)&pInformation->Current_AlternateSetting;
 800a0c8:	4b05      	ldr	r3, [pc, #20]	; (800a0e0 <Standard_GetInterface+0x24>)
 800a0ca:	6818      	ldr	r0, [r3, #0]
 800a0cc:	300c      	adds	r0, #12
}
 800a0ce:	bd08      	pop	{r3, pc}
    pInformation->Ctrl_Info.Usb_wLength =
 800a0d0:	2201      	movs	r2, #1
 800a0d2:	4b03      	ldr	r3, [pc, #12]	; (800a0e0 <Standard_GetInterface+0x24>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	821a      	strh	r2, [r3, #16]
    return 0;
 800a0d8:	bd08      	pop	{r3, pc}
 800a0da:	bf00      	nop
 800a0dc:	2000149c 	.word	0x2000149c
 800a0e0:	200014a0 	.word	0x200014a0

0800a0e4 <Standard_GetStatus>:
* Output         : None.
* Return         : Return 0, if the request is at end of data block,
*                  or is invalid when "Length" is 0.
*******************************************************************************/
uint8_t *Standard_GetStatus(uint16_t Length)
{
 800a0e4:	b508      	push	{r3, lr}
  if (Length == 0)
 800a0e6:	2800      	cmp	r0, #0
 800a0e8:	d033      	beq.n	800a152 <Standard_GetStatus+0x6e>
    pInformation->Ctrl_Info.Usb_wLength = 2;
    return 0;
  }

  /* Reset Status Information */
  StatusInfo.w = 0;
 800a0ea:	2100      	movs	r1, #0

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800a0ec:	4b1e      	ldr	r3, [pc, #120]	; (800a168 <Standard_GetStatus+0x84>)
  StatusInfo.w = 0;
 800a0ee:	481f      	ldr	r0, [pc, #124]	; (800a16c <Standard_GetStatus+0x88>)
  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800a0f0:	681a      	ldr	r2, [r3, #0]
  StatusInfo.w = 0;
 800a0f2:	8001      	strh	r1, [r0, #0]
 800a0f4:	7813      	ldrb	r3, [r2, #0]
  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800a0f6:	f013 037f 	ands.w	r3, r3, #127	; 0x7f
 800a0fa:	d016      	beq.n	800a12a <Standard_GetStatus+0x46>
    {
      ClrBit(StatusInfo0, 0);
    }
  }
  /*Interface Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 800a0fc:	2b01      	cmp	r3, #1
 800a0fe:	d027      	beq.n	800a150 <Standard_GetStatus+0x6c>
  {
    return (uint8_t *)&StatusInfo;
  }
  /*Get EndPoint Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 800a100:	2b02      	cmp	r3, #2
 800a102:	d124      	bne.n	800a14e <Standard_GetStatus+0x6a>
  {
    uint8_t Related_Endpoint;
    uint8_t wIndex0 = pInformation->USBwIndex0;
 800a104:	7952      	ldrb	r2, [r2, #5]

    Related_Endpoint = (wIndex0 & 0x0f);
 800a106:	f002 030f 	and.w	r3, r2, #15
    if (ValBit(wIndex0, 7))
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 800a10a:	009b      	lsls	r3, r3, #2
 800a10c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a110:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
    if (ValBit(wIndex0, 7))
 800a114:	0612      	lsls	r2, r2, #24
      if (_GetTxStallStatus(Related_Endpoint))
 800a116:	681b      	ldr	r3, [r3, #0]
    if (ValBit(wIndex0, 7))
 800a118:	d420      	bmi.n	800a15c <Standard_GetStatus+0x78>
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 800a11a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a11e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a122:	d10e      	bne.n	800a142 <Standard_GetStatus+0x5e>
        SetBit(StatusInfo0, 0); /* IN Endpoint stalled */
 800a124:	2301      	movs	r3, #1
 800a126:	7003      	strb	r3, [r0, #0]
 800a128:	e00b      	b.n	800a142 <Standard_GetStatus+0x5e>
    uint8_t Feature = pInformation->Current_Feature;
 800a12a:	7a52      	ldrb	r2, [r2, #9]
    if (ValBit(Feature, 5))
 800a12c:	0693      	lsls	r3, r2, #26
 800a12e:	bf4c      	ite	mi
 800a130:	2302      	movmi	r3, #2
 800a132:	7803      	ldrbpl	r3, [r0, #0]
    if (ValBit(Feature, 6))
 800a134:	0651      	lsls	r1, r2, #25
      SetBit(StatusInfo0, 0);
 800a136:	bf4c      	ite	mi
 800a138:	f043 0301 	orrmi.w	r3, r3, #1
      ClrBit(StatusInfo0, 0);
 800a13c:	f023 0301 	bicpl.w	r3, r3, #1
 800a140:	7003      	strb	r3, [r0, #0]
  }
  else
  {
    return NULL;
  }
  pUser_Standard_Requests->User_GetStatus();
 800a142:	4b0b      	ldr	r3, [pc, #44]	; (800a170 <Standard_GetStatus+0x8c>)
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	691b      	ldr	r3, [r3, #16]
 800a148:	4798      	blx	r3
  return (uint8_t *)&StatusInfo;
 800a14a:	4808      	ldr	r0, [pc, #32]	; (800a16c <Standard_GetStatus+0x88>)
 800a14c:	bd08      	pop	{r3, pc}
    return NULL;
 800a14e:	4608      	mov	r0, r1
}
 800a150:	bd08      	pop	{r3, pc}
    pInformation->Ctrl_Info.Usb_wLength = 2;
 800a152:	2202      	movs	r2, #2
 800a154:	4b04      	ldr	r3, [pc, #16]	; (800a168 <Standard_GetStatus+0x84>)
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	821a      	strh	r2, [r3, #16]
    return 0;
 800a15a:	bd08      	pop	{r3, pc}
      if (_GetTxStallStatus(Related_Endpoint))
 800a15c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a160:	2b10      	cmp	r3, #16
 800a162:	d1ee      	bne.n	800a142 <Standard_GetStatus+0x5e>
 800a164:	e7de      	b.n	800a124 <Standard_GetStatus+0x40>
 800a166:	bf00      	nop
 800a168:	200014a0 	.word	0x200014a0
 800a16c:	20001470 	.word	0x20001470
 800a170:	2000149c 	.word	0x2000149c

0800a174 <DataStageIn>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void DataStageIn(void)
{
 800a174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
 800a178:	4f24      	ldr	r7, [pc, #144]	; (800a20c <DataStageIn+0x98>)
 800a17a:	683d      	ldr	r5, [r7, #0]
  uint32_t save_wLength = pEPinfo->Usb_wLength;
 800a17c:	8a2c      	ldrh	r4, [r5, #16]
  uint32_t ControlState = pInformation->ControlState;

  uint8_t *DataBuffer;
  uint32_t Length;

  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
 800a17e:	b92c      	cbnz	r4, 800a18c <DataStageIn+0x18>
  uint32_t ControlState = pInformation->ControlState;
 800a180:	7a2e      	ldrb	r6, [r5, #8]
  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
 800a182:	2e04      	cmp	r6, #4
 800a184:	d02b      	beq.n	800a1de <DataStageIn+0x6a>
    }
    
    goto Expect_Status_Out;
  }

  Length = pEPinfo->PacketSize;
 800a186:	8aab      	ldrh	r3, [r5, #20]
 800a188:	2604      	movs	r6, #4
 800a18a:	e004      	b.n	800a196 <DataStageIn+0x22>
 800a18c:	8aab      	ldrh	r3, [r5, #20]
  ControlState = (save_wLength <= Length) ? LAST_IN_DATA : IN_DATA;
 800a18e:	429c      	cmp	r4, r3
 800a190:	bf8c      	ite	hi
 800a192:	2602      	movhi	r6, #2
 800a194:	2604      	movls	r6, #4
  if (Length > save_wLength)
  {
    Length = save_wLength;
  }

  DataBuffer = (*pEPinfo->CopyData)(Length);
 800a196:	429c      	cmp	r4, r3
 800a198:	bf28      	it	cs
 800a19a:	461c      	movcs	r4, r3
 800a19c:	69ab      	ldr	r3, [r5, #24]
 800a19e:	4620      	mov	r0, r4
 800a1a0:	4798      	blx	r3
 800a1a2:	4680      	mov	r8, r0

#ifdef STM32F10X_CL
  PCD_EP_Write (ENDP0, DataBuffer, Length);
#else   
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);
 800a1a4:	2000      	movs	r0, #0
 800a1a6:	f000 fdd3 	bl	800ad50 <GetEPTxAddr>
 800a1aa:	4622      	mov	r2, r4
 800a1ac:	4601      	mov	r1, r0
 800a1ae:	4640      	mov	r0, r8
 800a1b0:	f000 fce4 	bl	800ab7c <UserToPMABufferCopy>
#endif /* STM32F10X_CL */ 

  SetEPTxCount(ENDP0, Length);
 800a1b4:	4621      	mov	r1, r4
 800a1b6:	2000      	movs	r0, #0
 800a1b8:	f000 fde6 	bl	800ad88 <SetEPTxCount>

  pEPinfo->Usb_wLength -= Length;
  pEPinfo->Usb_wOffset += Length;
  vSetEPTxStatus(EP_TX_VALID);
 800a1bc:	2030      	movs	r0, #48	; 0x30

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 800a1be:	f44f 5240 	mov.w	r2, #12288	; 0x3000
  pEPinfo->Usb_wLength -= Length;
 800a1c2:	8a2b      	ldrh	r3, [r5, #16]
  pEPinfo->Usb_wOffset += Length;
 800a1c4:	8a69      	ldrh	r1, [r5, #18]
  pEPinfo->Usb_wLength -= Length;
 800a1c6:	1b1b      	subs	r3, r3, r4
 800a1c8:	822b      	strh	r3, [r5, #16]
  pEPinfo->Usb_wOffset += Length;
 800a1ca:	440c      	add	r4, r1
  USB_StatusOut();/* Expect the host to abort the data IN stage */
 800a1cc:	4b10      	ldr	r3, [pc, #64]	; (800a210 <DataStageIn+0x9c>)
  vSetEPTxStatus(EP_TX_VALID);
 800a1ce:	4911      	ldr	r1, [pc, #68]	; (800a214 <DataStageIn+0xa0>)
  pEPinfo->Usb_wOffset += Length;
 800a1d0:	826c      	strh	r4, [r5, #18]
  vSetEPTxStatus(EP_TX_VALID);
 800a1d2:	8008      	strh	r0, [r1, #0]
 800a1d4:	683d      	ldr	r5, [r7, #0]
  USB_StatusOut();/* Expect the host to abort the data IN stage */
 800a1d6:	801a      	strh	r2, [r3, #0]

Expect_Status_Out:
  pInformation->ControlState = ControlState;
 800a1d8:	722e      	strb	r6, [r5, #8]
}
 800a1da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Data_Mul_MaxPacketSize == TRUE)
 800a1de:	4b0e      	ldr	r3, [pc, #56]	; (800a218 <DataStageIn+0xa4>)
 800a1e0:	681a      	ldr	r2, [r3, #0]
 800a1e2:	2a01      	cmp	r2, #1
 800a1e4:	d006      	beq.n	800a1f4 <DataStageIn+0x80>
      vSetEPTxStatus(EP_TX_STALL);
 800a1e6:	2210      	movs	r2, #16
 800a1e8:	2607      	movs	r6, #7
 800a1ea:	4b0a      	ldr	r3, [pc, #40]	; (800a214 <DataStageIn+0xa0>)
 800a1ec:	801a      	strh	r2, [r3, #0]
  pInformation->ControlState = ControlState;
 800a1ee:	722e      	strb	r6, [r5, #8]
}
 800a1f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      Send0LengthData();
 800a1f4:	2730      	movs	r7, #48	; 0x30
 800a1f6:	4909      	ldr	r1, [pc, #36]	; (800a21c <DataStageIn+0xa8>)
 800a1f8:	4a09      	ldr	r2, [pc, #36]	; (800a220 <DataStageIn+0xac>)
 800a1fa:	6809      	ldr	r1, [r1, #0]
 800a1fc:	4805      	ldr	r0, [pc, #20]	; (800a214 <DataStageIn+0xa0>)
 800a1fe:	b289      	uxth	r1, r1
 800a200:	440a      	add	r2, r1
 800a202:	0052      	lsls	r2, r2, #1
 800a204:	6014      	str	r4, [r2, #0]
      Data_Mul_MaxPacketSize = FALSE;
 800a206:	601c      	str	r4, [r3, #0]
      Send0LengthData();
 800a208:	8007      	strh	r7, [r0, #0]
 800a20a:	e7e5      	b.n	800a1d8 <DataStageIn+0x64>
 800a20c:	200014a0 	.word	0x200014a0
 800a210:	200014a6 	.word	0x200014a6
 800a214:	200014a8 	.word	0x200014a8
 800a218:	20000c20 	.word	0x20000c20
 800a21c:	40005c50 	.word	0x40005c50
 800a220:	20003002 	.word	0x20003002

0800a224 <Standard_ClearFeature>:
{
 800a224:	b538      	push	{r3, r4, r5, lr}
  uint32_t     Type_Rec = Type_Recipient;
 800a226:	4b30      	ldr	r3, [pc, #192]	; (800a2e8 <Standard_ClearFeature+0xc4>)
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	7818      	ldrb	r0, [r3, #0]
  if (Type_Rec == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800a22c:	f010 007f 	ands.w	r0, r0, #127	; 0x7f
 800a230:	d003      	beq.n	800a23a <Standard_ClearFeature+0x16>
  else if (Type_Rec == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 800a232:	2802      	cmp	r0, #2
 800a234:	d006      	beq.n	800a244 <Standard_ClearFeature+0x20>
  return USB_UNSUPPORT;
 800a236:	2002      	movs	r0, #2
}
 800a238:	bd38      	pop	{r3, r4, r5, pc}
    ClrBit(pInformation->Current_Feature, 5);
 800a23a:	7a5a      	ldrb	r2, [r3, #9]
 800a23c:	f022 0220 	bic.w	r2, r2, #32
 800a240:	725a      	strb	r2, [r3, #9]
    return USB_SUCCESS;
 800a242:	bd38      	pop	{r3, r4, r5, pc}
    if ((pInformation->USBwValue != ENDPOINT_STALL)
 800a244:	885a      	ldrh	r2, [r3, #2]
 800a246:	2a00      	cmp	r2, #0
 800a248:	d1f6      	bne.n	800a238 <Standard_ClearFeature+0x14>
        || (pInformation->USBwIndex1 != 0))
 800a24a:	791a      	ldrb	r2, [r3, #4]
 800a24c:	2a00      	cmp	r2, #0
 800a24e:	d1f3      	bne.n	800a238 <Standard_ClearFeature+0x14>
    wIndex0 = pInformation->USBwIndex0;
 800a250:	7958      	ldrb	r0, [r3, #5]
    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 800a252:	4d26      	ldr	r5, [pc, #152]	; (800a2ec <Standard_ClearFeature+0xc8>)
    if (ValBit(pInformation->USBwIndex0, 7))
 800a254:	b241      	sxtb	r1, r0
    rEP = wIndex0 & ~0x80;
 800a256:	f020 0080 	bic.w	r0, r0, #128	; 0x80
      Status = _GetEPTxStatus(Related_Endpoint);
 800a25a:	0084      	lsls	r4, r0, #2
 800a25c:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 800a260:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
 800a264:	6822      	ldr	r2, [r4, #0]
    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 800a266:	782d      	ldrb	r5, [r5, #0]
    if (ValBit(pInformation->USBwIndex0, 7))
 800a268:	2900      	cmp	r1, #0
      Status = _GetEPTxStatus(Related_Endpoint);
 800a26a:	bfb4      	ite	lt
 800a26c:	f002 0230 	andlt.w	r2, r2, #48	; 0x30
      Status = _GetEPRxStatus(Related_Endpoint);
 800a270:	f402 5240 	andge.w	r2, r2, #12288	; 0x3000
    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 800a274:	42a8      	cmp	r0, r5
 800a276:	d2de      	bcs.n	800a236 <Standard_ClearFeature+0x12>
 800a278:	2a00      	cmp	r2, #0
 800a27a:	d0dc      	beq.n	800a236 <Standard_ClearFeature+0x12>
        || (pInformation->Current_Configuration == 0))
 800a27c:	7a9b      	ldrb	r3, [r3, #10]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d0d9      	beq.n	800a236 <Standard_ClearFeature+0x12>
    if (wIndex0 & 0x80)
 800a282:	2900      	cmp	r1, #0
      if (_GetTxStallStatus(Related_Endpoint ))
 800a284:	6823      	ldr	r3, [r4, #0]
    if (wIndex0 & 0x80)
 800a286:	db0a      	blt.n	800a29e <Standard_ClearFeature+0x7a>
      if (_GetRxStallStatus(Related_Endpoint))
 800a288:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a28c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a290:	d012      	beq.n	800a2b8 <Standard_ClearFeature+0x94>
    pUser_Standard_Requests->User_ClearFeature();
 800a292:	4b17      	ldr	r3, [pc, #92]	; (800a2f0 <Standard_ClearFeature+0xcc>)
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	695b      	ldr	r3, [r3, #20]
 800a298:	4798      	blx	r3
    return USB_SUCCESS;
 800a29a:	2000      	movs	r0, #0
 800a29c:	bd38      	pop	{r3, r4, r5, pc}
      if (_GetTxStallStatus(Related_Endpoint ))
 800a29e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a2a2:	2b10      	cmp	r3, #16
 800a2a4:	d1f5      	bne.n	800a292 <Standard_ClearFeature+0x6e>
        ClearDTOG_TX(Related_Endpoint);
 800a2a6:	b2c4      	uxtb	r4, r0
 800a2a8:	4620      	mov	r0, r4
 800a2aa:	f000 fd1f 	bl	800acec <ClearDTOG_TX>
        SetEPTxStatus(Related_Endpoint, EP_TX_VALID);
 800a2ae:	4620      	mov	r0, r4
 800a2b0:	2130      	movs	r1, #48	; 0x30
 800a2b2:	f000 fc9d 	bl	800abf0 <SetEPTxStatus>
 800a2b6:	e7ec      	b.n	800a292 <Standard_ClearFeature+0x6e>
        if (Related_Endpoint == ENDP0)
 800a2b8:	b990      	cbnz	r0, 800a2e0 <Standard_ClearFeature+0xbc>
          SetEPRxCount(Related_Endpoint, Device_Property.MaxPacketSize);
 800a2ba:	4b0e      	ldr	r3, [pc, #56]	; (800a2f4 <Standard_ClearFeature+0xd0>)
 800a2bc:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 800a2c0:	f000 fd70 	bl	800ada4 <SetEPRxCount>
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
 800a2c4:	6823      	ldr	r3, [r4, #0]
 800a2c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a2ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2ce:	b29b      	uxth	r3, r3
 800a2d0:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800a2d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a2d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2dc:	6023      	str	r3, [r4, #0]
 800a2de:	e7d8      	b.n	800a292 <Standard_ClearFeature+0x6e>
          ClearDTOG_RX(Related_Endpoint);
 800a2e0:	f000 fcf2 	bl	800acc8 <ClearDTOG_RX>
 800a2e4:	e7ee      	b.n	800a2c4 <Standard_ClearFeature+0xa0>
 800a2e6:	bf00      	nop
 800a2e8:	200014a0 	.word	0x200014a0
 800a2ec:	200000b0 	.word	0x200000b0
 800a2f0:	2000149c 	.word	0x2000149c
 800a2f4:	20000080 	.word	0x20000080

0800a2f8 <Standard_SetEndPointFeature>:
{
 800a2f8:	b538      	push	{r3, r4, r5, lr}
  wIndex0 = pInformation->USBwIndex0;
 800a2fa:	4b21      	ldr	r3, [pc, #132]	; (800a380 <Standard_SetEndPointFeature+0x88>)
  if (Related_Endpoint >= Device_Table.Total_Endpoint
 800a2fc:	4d21      	ldr	r5, [pc, #132]	; (800a384 <Standard_SetEndPointFeature+0x8c>)
  wIndex0 = pInformation->USBwIndex0;
 800a2fe:	6818      	ldr	r0, [r3, #0]
  if (Related_Endpoint >= Device_Table.Total_Endpoint
 800a300:	782d      	ldrb	r5, [r5, #0]
  wIndex0 = pInformation->USBwIndex0;
 800a302:	7942      	ldrb	r2, [r0, #5]
  if (ValBit(pInformation->USBwIndex0, 7))
 800a304:	b254      	sxtb	r4, r2
  rEP = wIndex0 & ~0x80;
 800a306:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    Status = _GetEPTxStatus(Related_Endpoint);
 800a30a:	0093      	lsls	r3, r2, #2
 800a30c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a310:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800a314:	6819      	ldr	r1, [r3, #0]
  if (ValBit(pInformation->USBwIndex0, 7))
 800a316:	2c00      	cmp	r4, #0
    Status = _GetEPTxStatus(Related_Endpoint);
 800a318:	bfb4      	ite	lt
 800a31a:	f001 0130 	andlt.w	r1, r1, #48	; 0x30
    Status = _GetEPRxStatus(Related_Endpoint);
 800a31e:	f401 5140 	andge.w	r1, r1, #12288	; 0x3000
  if (Related_Endpoint >= Device_Table.Total_Endpoint
 800a322:	42aa      	cmp	r2, r5
 800a324:	d301      	bcc.n	800a32a <Standard_SetEndPointFeature+0x32>
    return USB_UNSUPPORT;
 800a326:	2002      	movs	r0, #2
}
 800a328:	bd38      	pop	{r3, r4, r5, pc}
      || pInformation->USBwValue != 0 || Status == 0
 800a32a:	8842      	ldrh	r2, [r0, #2]
 800a32c:	2a00      	cmp	r2, #0
 800a32e:	d1fa      	bne.n	800a326 <Standard_SetEndPointFeature+0x2e>
 800a330:	2900      	cmp	r1, #0
 800a332:	d0f8      	beq.n	800a326 <Standard_SetEndPointFeature+0x2e>
      || pInformation->Current_Configuration == 0)
 800a334:	7a82      	ldrb	r2, [r0, #10]
 800a336:	2a00      	cmp	r2, #0
 800a338:	d0f5      	beq.n	800a326 <Standard_SetEndPointFeature+0x2e>
    if (wIndex0 & 0x80)
 800a33a:	2c00      	cmp	r4, #0
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 800a33c:	681a      	ldr	r2, [r3, #0]
    if (wIndex0 & 0x80)
 800a33e:	db11      	blt.n	800a364 <Standard_SetEndPointFeature+0x6c>
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
 800a340:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a344:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800a348:	b292      	uxth	r2, r2
 800a34a:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
 800a34e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a352:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a356:	601a      	str	r2, [r3, #0]
  pUser_Standard_Requests->User_SetEndPointFeature();
 800a358:	4b0b      	ldr	r3, [pc, #44]	; (800a388 <Standard_SetEndPointFeature+0x90>)
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	699b      	ldr	r3, [r3, #24]
 800a35e:	4798      	blx	r3
  return USB_SUCCESS;
 800a360:	2000      	movs	r0, #0
 800a362:	bd38      	pop	{r3, r4, r5, pc}
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 800a364:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800a368:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a36c:	b292      	uxth	r2, r2
 800a36e:	f082 0210 	eor.w	r2, r2, #16
 800a372:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a376:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a37a:	601a      	str	r2, [r3, #0]
 800a37c:	e7ec      	b.n	800a358 <Standard_SetEndPointFeature+0x60>
 800a37e:	bf00      	nop
 800a380:	200014a0 	.word	0x200014a0
 800a384:	200000b0 	.word	0x200000b0
 800a388:	2000149c 	.word	0x2000149c

0800a38c <Standard_GetDescriptorData>:
  wOffset = pInformation->Ctrl_Info.Usb_wOffset;
 800a38c:	4b05      	ldr	r3, [pc, #20]	; (800a3a4 <Standard_GetDescriptorData+0x18>)
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	8a5a      	ldrh	r2, [r3, #18]
  if (Length == 0)
 800a392:	b110      	cbz	r0, 800a39a <Standard_GetDescriptorData+0xe>
  return pDesc->Descriptor + wOffset;
 800a394:	6808      	ldr	r0, [r1, #0]
 800a396:	4410      	add	r0, r2
}
 800a398:	4770      	bx	lr
    pInformation->Ctrl_Info.Usb_wLength = pDesc->Descriptor_Size - wOffset;
 800a39a:	8889      	ldrh	r1, [r1, #4]
 800a39c:	1a8a      	subs	r2, r1, r2
 800a39e:	821a      	strh	r2, [r3, #16]
    return 0;
 800a3a0:	4770      	bx	lr
 800a3a2:	bf00      	nop
 800a3a4:	200014a0 	.word	0x200014a0

0800a3a8 <Setup0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Setup0_Process(void)
{
 800a3a8:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
#endif /* STM32F10X_CL */

  if (pInformation->ControlState != PAUSE)
 800a3aa:	4ea7      	ldr	r6, [pc, #668]	; (800a648 <Setup0_Process+0x2a0>)
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 800a3ac:	4ba7      	ldr	r3, [pc, #668]	; (800a64c <Setup0_Process+0x2a4>)
  if (pInformation->ControlState != PAUSE)
 800a3ae:	6834      	ldr	r4, [r6, #0]
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 800a3b0:	681a      	ldr	r2, [r3, #0]
  if (pInformation->ControlState != PAUSE)
 800a3b2:	7a23      	ldrb	r3, [r4, #8]
{
 800a3b4:	b083      	sub	sp, #12
  if (pInformation->ControlState != PAUSE)
 800a3b6:	2b09      	cmp	r3, #9
 800a3b8:	d039      	beq.n	800a42e <Setup0_Process+0x86>
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 800a3ba:	4ba5      	ldr	r3, [pc, #660]	; (800a650 <Setup0_Process+0x2a8>)
 800a3bc:	b292      	uxth	r2, r2
 800a3be:	4413      	add	r3, r2
 800a3c0:	005b      	lsls	r3, r3, #1
 800a3c2:	881d      	ldrh	r5, [r3, #0]
 800a3c4:	006d      	lsls	r5, r5, #1
 800a3c6:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 800a3ca:	f505 45c0 	add.w	r5, r5, #24576	; 0x6000
  {
    pInformation->USBbmRequestType = *pBuf.b++; /* bmRequestType */
 800a3ce:	782b      	ldrb	r3, [r5, #0]
 800a3d0:	7023      	strb	r3, [r4, #0]
    pInformation->USBbRequest = *pBuf.b++; /* bRequest */
 800a3d2:	786b      	ldrb	r3, [r5, #1]
 800a3d4:	7063      	strb	r3, [r4, #1]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
 800a3d6:	88a8      	ldrh	r0, [r5, #4]
 800a3d8:	f000 fd16 	bl	800ae08 <ByteSwap>
 800a3dc:	8060      	strh	r0, [r4, #2]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
 800a3de:	8928      	ldrh	r0, [r5, #8]
 800a3e0:	6834      	ldr	r4, [r6, #0]
 800a3e2:	f000 fd11 	bl	800ae08 <ByteSwap>
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength */
  }

  pInformation->ControlState = SETTING_UP;
 800a3e6:	2201      	movs	r2, #1
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
 800a3e8:	80a0      	strh	r0, [r4, #4]
    pInformation->USBwLength = *pBuf.w; /* wLength */
 800a3ea:	89ab      	ldrh	r3, [r5, #12]
 800a3ec:	6834      	ldr	r4, [r6, #0]
 800a3ee:	80e3      	strh	r3, [r4, #6]
  pInformation->ControlState = SETTING_UP;
 800a3f0:	7222      	strb	r2, [r4, #8]
  if (pInformation->USBwLength == 0)
 800a3f2:	b30b      	cbz	r3, 800a438 <Setup0_Process+0x90>
  uint32_t Request_No = pInformation->USBbRequest;
 800a3f4:	7860      	ldrb	r0, [r4, #1]
  if (Request_No == GET_DESCRIPTOR)
 800a3f6:	2806      	cmp	r0, #6
 800a3f8:	f000 8091 	beq.w	800a51e <Setup0_Process+0x176>
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
 800a3fc:	2800      	cmp	r0, #0
 800a3fe:	d14b      	bne.n	800a498 <Setup0_Process+0xf0>
 800a400:	8861      	ldrh	r1, [r4, #2]
 800a402:	2900      	cmp	r1, #0
 800a404:	f000 80a3 	beq.w	800a54e <Setup0_Process+0x1a6>
 800a408:	4d92      	ldr	r5, [pc, #584]	; (800a654 <Setup0_Process+0x2ac>)
    Result = (*pProperty->Class_Data_Setup)(pInformation->USBbRequest);
 800a40a:	682b      	ldr	r3, [r5, #0]
 800a40c:	691b      	ldr	r3, [r3, #16]
 800a40e:	4798      	blx	r3
    if (Result == USB_NOT_READY)
 800a410:	2803      	cmp	r0, #3
 800a412:	f000 8112 	beq.w	800a63a <Setup0_Process+0x292>
  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
 800a416:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a41a:	6833      	ldr	r3, [r6, #0]
 800a41c:	8a1a      	ldrh	r2, [r3, #16]
 800a41e:	428a      	cmp	r2, r1
 800a420:	f000 8092 	beq.w	800a548 <Setup0_Process+0x1a0>
  if ((Result == USB_UNSUPPORT) || (pInformation->Ctrl_Info.Usb_wLength == 0))
 800a424:	2802      	cmp	r0, #2
 800a426:	d147      	bne.n	800a4b8 <Setup0_Process+0x110>
    pInformation->ControlState = STALLED;
 800a428:	2208      	movs	r2, #8
 800a42a:	721a      	strb	r2, [r3, #8]
 800a42c:	e01c      	b.n	800a468 <Setup0_Process+0xc0>
  pInformation->ControlState = SETTING_UP;
 800a42e:	2201      	movs	r2, #1
 800a430:	88e3      	ldrh	r3, [r4, #6]
 800a432:	7222      	strb	r2, [r4, #8]
  if (pInformation->USBwLength == 0)
 800a434:	2b00      	cmp	r3, #0
 800a436:	d1dd      	bne.n	800a3f4 <Setup0_Process+0x4c>
 800a438:	7823      	ldrb	r3, [r4, #0]
  uint32_t RequestNo = pInformation->USBbRequest;
 800a43a:	7867      	ldrb	r7, [r4, #1]
  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800a43c:	f013 037f 	ands.w	r3, r3, #127	; 0x7f
 800a440:	d047      	beq.n	800a4d2 <Setup0_Process+0x12a>
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 800a442:	2b01      	cmp	r3, #1
 800a444:	f000 80cf 	beq.w	800a5e6 <Setup0_Process+0x23e>
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 800a448:	2b02      	cmp	r3, #2
 800a44a:	f000 8129 	beq.w	800a6a0 <Setup0_Process+0x2f8>
 800a44e:	4d81      	ldr	r5, [pc, #516]	; (800a654 <Setup0_Process+0x2ac>)
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
 800a450:	682b      	ldr	r3, [r5, #0]
 800a452:	4638      	mov	r0, r7
 800a454:	695b      	ldr	r3, [r3, #20]
 800a456:	4798      	blx	r3
    if (Result == USB_NOT_READY)
 800a458:	2803      	cmp	r0, #3
 800a45a:	f000 8157 	beq.w	800a70c <Setup0_Process+0x364>
 800a45e:	6834      	ldr	r4, [r6, #0]
  if (Result != USB_SUCCESS)
 800a460:	2800      	cmp	r0, #0
 800a462:	d04f      	beq.n	800a504 <Setup0_Process+0x15c>
          || (pInformation->Current_Configuration != 0))
 800a464:	2308      	movs	r3, #8
  pInformation->ControlState = ControlState;
 800a466:	7223      	strb	r3, [r4, #8]
{
#ifdef STM32F10X_CL  
  USB_OTG_EP *ep;
#endif /* STM32F10X_CL */
      
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 800a468:	4b7b      	ldr	r3, [pc, #492]	; (800a658 <Setup0_Process+0x2b0>)
 800a46a:	2000      	movs	r0, #0
 800a46c:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 800a470:	f000 fc98 	bl	800ada4 <SetEPRxCount>

  if (pInformation->ControlState == STALLED)
 800a474:	6833      	ldr	r3, [r6, #0]
 800a476:	7a18      	ldrb	r0, [r3, #8]
 800a478:	2808      	cmp	r0, #8
 800a47a:	d106      	bne.n	800a48a <Setup0_Process+0xe2>
  {
    vSetEPRxStatus(EP_RX_STALL);
 800a47c:	f44f 5480 	mov.w	r4, #4096	; 0x1000
    vSetEPTxStatus(EP_TX_STALL);
 800a480:	2210      	movs	r2, #16
    vSetEPRxStatus(EP_RX_STALL);
 800a482:	4976      	ldr	r1, [pc, #472]	; (800a65c <Setup0_Process+0x2b4>)
    vSetEPTxStatus(EP_TX_STALL);
 800a484:	4b76      	ldr	r3, [pc, #472]	; (800a660 <Setup0_Process+0x2b8>)
    vSetEPRxStatus(EP_RX_STALL);
 800a486:	800c      	strh	r4, [r1, #0]
    vSetEPTxStatus(EP_TX_STALL);
 800a488:	801a      	strh	r2, [r3, #0]
}
 800a48a:	f1a0 0009 	sub.w	r0, r0, #9
 800a48e:	fab0 f080 	clz	r0, r0
 800a492:	0940      	lsrs	r0, r0, #5
 800a494:	b003      	add	sp, #12
 800a496:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if (Request_No == GET_CONFIGURATION)
 800a498:	2808      	cmp	r0, #8
 800a49a:	d16a      	bne.n	800a572 <Setup0_Process+0x1ca>
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800a49c:	7823      	ldrb	r3, [r4, #0]
 800a49e:	065b      	lsls	r3, r3, #25
 800a4a0:	d1b2      	bne.n	800a408 <Setup0_Process+0x60>
      CopyRoutine = Standard_GetConfiguration;
 800a4a2:	4b70      	ldr	r3, [pc, #448]	; (800a664 <Setup0_Process+0x2bc>)
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 800a4a4:	2000      	movs	r0, #0
    pInformation->Ctrl_Info.CopyData = CopyRoutine;
 800a4a6:	61a3      	str	r3, [r4, #24]
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 800a4a8:	8260      	strh	r0, [r4, #18]
    (*CopyRoutine)(0);
 800a4aa:	4798      	blx	r3
  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
 800a4ac:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a4b0:	6833      	ldr	r3, [r6, #0]
 800a4b2:	8a1a      	ldrh	r2, [r3, #16]
 800a4b4:	428a      	cmp	r2, r1
 800a4b6:	d047      	beq.n	800a548 <Setup0_Process+0x1a0>
  if ((Result == USB_UNSUPPORT) || (pInformation->Ctrl_Info.Usb_wLength == 0))
 800a4b8:	2a00      	cmp	r2, #0
 800a4ba:	d0b5      	beq.n	800a428 <Setup0_Process+0x80>
  if (ValBit(pInformation->USBbmRequestType, 7))
 800a4bc:	f993 1000 	ldrsb.w	r1, [r3]
 800a4c0:	2900      	cmp	r1, #0
 800a4c2:	db79      	blt.n	800a5b8 <Setup0_Process+0x210>
    pInformation->ControlState = OUT_DATA;
 800a4c4:	2003      	movs	r0, #3
    vSetEPRxStatus(EP_RX_VALID); /* enable for next data reception */
 800a4c6:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800a4ca:	4a64      	ldr	r2, [pc, #400]	; (800a65c <Setup0_Process+0x2b4>)
    pInformation->ControlState = OUT_DATA;
 800a4cc:	7218      	strb	r0, [r3, #8]
    vSetEPRxStatus(EP_RX_VALID); /* enable for next data reception */
 800a4ce:	8011      	strh	r1, [r2, #0]
 800a4d0:	e7ca      	b.n	800a468 <Setup0_Process+0xc0>
    if (RequestNo == SET_CONFIGURATION)
 800a4d2:	2f09      	cmp	r7, #9
 800a4d4:	f000 8102 	beq.w	800a6dc <Setup0_Process+0x334>
    else if (RequestNo == SET_ADDRESS)
 800a4d8:	2f05      	cmp	r7, #5
 800a4da:	f000 80cf 	beq.w	800a67c <Setup0_Process+0x2d4>
    else if (RequestNo == SET_FEATURE)
 800a4de:	2f03      	cmp	r7, #3
 800a4e0:	f000 80e7 	beq.w	800a6b2 <Setup0_Process+0x30a>
    else if (RequestNo == CLEAR_FEATURE)
 800a4e4:	2f01      	cmp	r7, #1
 800a4e6:	d1b2      	bne.n	800a44e <Setup0_Process+0xa6>
      if (pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP
 800a4e8:	78e3      	ldrb	r3, [r4, #3]
 800a4ea:	2b01      	cmp	r3, #1
 800a4ec:	d1af      	bne.n	800a44e <Setup0_Process+0xa6>
          && pInformation->USBwIndex == 0
 800a4ee:	88a3      	ldrh	r3, [r4, #4]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d1ac      	bne.n	800a44e <Setup0_Process+0xa6>
          && ValBit(pInformation->Current_Feature, 5))
 800a4f4:	7a63      	ldrb	r3, [r4, #9]
 800a4f6:	069b      	lsls	r3, r3, #26
 800a4f8:	d5a9      	bpl.n	800a44e <Setup0_Process+0xa6>
        Result = Standard_ClearFeature();
 800a4fa:	f7ff fe93 	bl	800a224 <Standard_ClearFeature>
  if (Result != USB_SUCCESS)
 800a4fe:	2800      	cmp	r0, #0
 800a500:	d1a5      	bne.n	800a44e <Setup0_Process+0xa6>
 800a502:	6834      	ldr	r4, [r6, #0]
  USB_StatusIn();
 800a504:	2500      	movs	r5, #0
 800a506:	2030      	movs	r0, #48	; 0x30
 800a508:	4a50      	ldr	r2, [pc, #320]	; (800a64c <Setup0_Process+0x2a4>)
 800a50a:	4b57      	ldr	r3, [pc, #348]	; (800a668 <Setup0_Process+0x2c0>)
 800a50c:	6812      	ldr	r2, [r2, #0]
 800a50e:	4954      	ldr	r1, [pc, #336]	; (800a660 <Setup0_Process+0x2b8>)
 800a510:	b292      	uxth	r2, r2
 800a512:	4413      	add	r3, r2
 800a514:	005b      	lsls	r3, r3, #1
 800a516:	601d      	str	r5, [r3, #0]
 800a518:	2306      	movs	r3, #6
 800a51a:	8008      	strh	r0, [r1, #0]
 800a51c:	e7a3      	b.n	800a466 <Setup0_Process+0xbe>
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800a51e:	7823      	ldrb	r3, [r4, #0]
 800a520:	065d      	lsls	r5, r3, #25
 800a522:	f47f af71 	bne.w	800a408 <Setup0_Process+0x60>
      uint8_t wValue1 = pInformation->USBwValue1;
 800a526:	78a3      	ldrb	r3, [r4, #2]
        CopyRoutine = pProperty->GetDeviceDescriptor;
 800a528:	4d4a      	ldr	r5, [pc, #296]	; (800a654 <Setup0_Process+0x2ac>)
      if (wValue1 == DEVICE_DESCRIPTOR)
 800a52a:	2b01      	cmp	r3, #1
 800a52c:	f000 80eb 	beq.w	800a706 <Setup0_Process+0x35e>
      else if (wValue1 == CONFIG_DESCRIPTOR)
 800a530:	2b02      	cmp	r3, #2
 800a532:	f000 8086 	beq.w	800a642 <Setup0_Process+0x29a>
      else if (wValue1 == STRING_DESCRIPTOR)
 800a536:	2b03      	cmp	r3, #3
 800a538:	f47f af67 	bne.w	800a40a <Setup0_Process+0x62>
        CopyRoutine = pProperty->GetStringDescriptor;
 800a53c:	682b      	ldr	r3, [r5, #0]
 800a53e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (CopyRoutine)
 800a540:	2b00      	cmp	r3, #0
 800a542:	d1af      	bne.n	800a4a4 <Setup0_Process+0xfc>
 800a544:	2006      	movs	r0, #6
 800a546:	e760      	b.n	800a40a <Setup0_Process+0x62>
    pInformation->ControlState = PAUSE;
 800a548:	2209      	movs	r2, #9
 800a54a:	721a      	strb	r2, [r3, #8]
 800a54c:	e78c      	b.n	800a468 <Setup0_Process+0xc0>
           && (pInformation->USBwIndex1 == 0))
 800a54e:	6863      	ldr	r3, [r4, #4]
 800a550:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a554:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a558:	f47f af56 	bne.w	800a408 <Setup0_Process+0x60>
 800a55c:	7820      	ldrb	r0, [r4, #0]
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800a55e:	f010 007f 	ands.w	r0, r0, #127	; 0x7f
 800a562:	f040 80d6 	bne.w	800a712 <Setup0_Process+0x36a>
        && (pInformation->USBwIndex == 0))
 800a566:	88a3      	ldrh	r3, [r4, #4]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	f47f af4d 	bne.w	800a408 <Setup0_Process+0x60>
        CopyRoutine = Standard_GetStatus;
 800a56e:	4b3f      	ldr	r3, [pc, #252]	; (800a66c <Setup0_Process+0x2c4>)
 800a570:	e798      	b.n	800a4a4 <Setup0_Process+0xfc>
  else if (Request_No == GET_INTERFACE)
 800a572:	280a      	cmp	r0, #10
 800a574:	f47f af48 	bne.w	800a408 <Setup0_Process+0x60>
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 800a578:	7823      	ldrb	r3, [r4, #0]
 800a57a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a57e:	2b01      	cmp	r3, #1
 800a580:	f47f af42 	bne.w	800a408 <Setup0_Process+0x60>
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
 800a584:	7aa3      	ldrb	r3, [r4, #10]
 800a586:	2b00      	cmp	r3, #0
 800a588:	f43f af3e 	beq.w	800a408 <Setup0_Process+0x60>
 800a58c:	8861      	ldrh	r1, [r4, #2]
 800a58e:	2900      	cmp	r1, #0
 800a590:	f47f af3a 	bne.w	800a408 <Setup0_Process+0x60>
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
 800a594:	6863      	ldr	r3, [r4, #4]
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
 800a596:	4d2f      	ldr	r5, [pc, #188]	; (800a654 <Setup0_Process+0x2ac>)
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
 800a598:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a59c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a5a0:	f47f af33 	bne.w	800a40a <Setup0_Process+0x62>
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
 800a5a4:	682b      	ldr	r3, [r5, #0]
 800a5a6:	7960      	ldrb	r0, [r4, #5]
 800a5a8:	699b      	ldr	r3, [r3, #24]
 800a5aa:	4798      	blx	r3
 800a5ac:	2800      	cmp	r0, #0
 800a5ae:	f040 80ed 	bne.w	800a78c <Setup0_Process+0x3e4>
 800a5b2:	6834      	ldr	r4, [r6, #0]
      CopyRoutine = Standard_GetInterface;
 800a5b4:	4b2e      	ldr	r3, [pc, #184]	; (800a670 <Setup0_Process+0x2c8>)
 800a5b6:	e775      	b.n	800a4a4 <Setup0_Process+0xfc>
    __IO uint32_t wLength = pInformation->USBwLength;
 800a5b8:	88d9      	ldrh	r1, [r3, #6]
 800a5ba:	9101      	str	r1, [sp, #4]
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
 800a5bc:	9801      	ldr	r0, [sp, #4]
 800a5be:	4282      	cmp	r2, r0
 800a5c0:	d834      	bhi.n	800a62c <Setup0_Process+0x284>
    else if (pInformation->Ctrl_Info.Usb_wLength < pInformation->USBwLength)
 800a5c2:	4291      	cmp	r1, r2
 800a5c4:	f240 80ab 	bls.w	800a71e <Setup0_Process+0x376>
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
 800a5c8:	4922      	ldr	r1, [pc, #136]	; (800a654 <Setup0_Process+0x2ac>)
 800a5ca:	6809      	ldr	r1, [r1, #0]
 800a5cc:	f891 002c 	ldrb.w	r0, [r1, #44]	; 0x2c
 800a5d0:	b281      	uxth	r1, r0
 800a5d2:	4291      	cmp	r1, r2
 800a5d4:	f240 80a8 	bls.w	800a728 <Setup0_Process+0x380>
        Data_Mul_MaxPacketSize = FALSE;
 800a5d8:	2000      	movs	r0, #0
 800a5da:	4a26      	ldr	r2, [pc, #152]	; (800a674 <Setup0_Process+0x2cc>)
 800a5dc:	6010      	str	r0, [r2, #0]
    pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
 800a5de:	8299      	strh	r1, [r3, #20]
    DataStageIn();
 800a5e0:	f7ff fdc8 	bl	800a174 <DataStageIn>
 800a5e4:	e740      	b.n	800a468 <Setup0_Process+0xc0>
    if (RequestNo == SET_INTERFACE)
 800a5e6:	2f0b      	cmp	r7, #11
 800a5e8:	f47f af31 	bne.w	800a44e <Setup0_Process+0xa6>
  Re = (*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, pInformation->USBwValue0);
 800a5ec:	4d19      	ldr	r5, [pc, #100]	; (800a654 <Setup0_Process+0x2ac>)
 800a5ee:	78e1      	ldrb	r1, [r4, #3]
 800a5f0:	682b      	ldr	r3, [r5, #0]
 800a5f2:	7960      	ldrb	r0, [r4, #5]
 800a5f4:	699b      	ldr	r3, [r3, #24]
 800a5f6:	4798      	blx	r3
  if (pInformation->Current_Configuration != 0)
 800a5f8:	6833      	ldr	r3, [r6, #0]
 800a5fa:	7a9a      	ldrb	r2, [r3, #10]
 800a5fc:	2a00      	cmp	r2, #0
 800a5fe:	f43f af27 	beq.w	800a450 <Setup0_Process+0xa8>
    if ((Re != USB_SUCCESS) || (pInformation->USBwIndex1 != 0)
 800a602:	2800      	cmp	r0, #0
 800a604:	f47f af24 	bne.w	800a450 <Setup0_Process+0xa8>
 800a608:	791a      	ldrb	r2, [r3, #4]
 800a60a:	2a00      	cmp	r2, #0
 800a60c:	f47f af20 	bne.w	800a450 <Setup0_Process+0xa8>
        || (pInformation->USBwValue1 != 0))
 800a610:	789b      	ldrb	r3, [r3, #2]
 800a612:	2b00      	cmp	r3, #0
 800a614:	f47f af1c 	bne.w	800a450 <Setup0_Process+0xa8>
      pUser_Standard_Requests->User_SetInterface();
 800a618:	4b17      	ldr	r3, [pc, #92]	; (800a678 <Setup0_Process+0x2d0>)
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	68db      	ldr	r3, [r3, #12]
 800a61e:	4798      	blx	r3
      pInformation->Current_Interface = pInformation->USBwIndex0;
 800a620:	6834      	ldr	r4, [r6, #0]
 800a622:	7962      	ldrb	r2, [r4, #5]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 800a624:	78e3      	ldrb	r3, [r4, #3]
      pInformation->Current_Interface = pInformation->USBwIndex0;
 800a626:	72e2      	strb	r2, [r4, #11]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 800a628:	7323      	strb	r3, [r4, #12]
 800a62a:	e76b      	b.n	800a504 <Setup0_Process+0x15c>
 800a62c:	4a09      	ldr	r2, [pc, #36]	; (800a654 <Setup0_Process+0x2ac>)
      pInformation->Ctrl_Info.Usb_wLength = wLength;
 800a62e:	9901      	ldr	r1, [sp, #4]
 800a630:	6812      	ldr	r2, [r2, #0]
 800a632:	8219      	strh	r1, [r3, #16]
 800a634:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
 800a638:	e7d1      	b.n	800a5de <Setup0_Process+0x236>
      pInformation->ControlState = PAUSE;
 800a63a:	2209      	movs	r2, #9
 800a63c:	6833      	ldr	r3, [r6, #0]
 800a63e:	721a      	strb	r2, [r3, #8]
 800a640:	e712      	b.n	800a468 <Setup0_Process+0xc0>
        CopyRoutine = pProperty->GetConfigDescriptor;
 800a642:	682b      	ldr	r3, [r5, #0]
 800a644:	6a1b      	ldr	r3, [r3, #32]
 800a646:	e77b      	b.n	800a540 <Setup0_Process+0x198>
 800a648:	200014a0 	.word	0x200014a0
 800a64c:	40005c50 	.word	0x40005c50
 800a650:	20003004 	.word	0x20003004
 800a654:	20001478 	.word	0x20001478
 800a658:	20000080 	.word	0x20000080
 800a65c:	200014a6 	.word	0x200014a6
 800a660:	200014a8 	.word	0x200014a8
 800a664:	0800a095 	.word	0x0800a095
 800a668:	20003002 	.word	0x20003002
 800a66c:	0800a0e5 	.word	0x0800a0e5
 800a670:	0800a0bd 	.word	0x0800a0bd
 800a674:	20000c20 	.word	0x20000c20
 800a678:	2000149c 	.word	0x2000149c
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
 800a67c:	f994 3003 	ldrsb.w	r3, [r4, #3]
 800a680:	2b00      	cmp	r3, #0
 800a682:	f6ff aeef 	blt.w	800a464 <Setup0_Process+0xbc>
 800a686:	78a3      	ldrb	r3, [r4, #2]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	f47f aeeb 	bne.w	800a464 <Setup0_Process+0xbc>
          || (pInformation->USBwIndex != 0)
 800a68e:	88a3      	ldrh	r3, [r4, #4]
 800a690:	2b00      	cmp	r3, #0
 800a692:	f47f aee7 	bne.w	800a464 <Setup0_Process+0xbc>
          || (pInformation->Current_Configuration != 0))
 800a696:	7aa3      	ldrb	r3, [r4, #10]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	f43f af33 	beq.w	800a504 <Setup0_Process+0x15c>
 800a69e:	e6e1      	b.n	800a464 <Setup0_Process+0xbc>
    if (RequestNo == CLEAR_FEATURE)
 800a6a0:	2f01      	cmp	r7, #1
 800a6a2:	f43f af2a 	beq.w	800a4fa <Setup0_Process+0x152>
    else if (RequestNo == SET_FEATURE)
 800a6a6:	2f03      	cmp	r7, #3
 800a6a8:	f47f aed1 	bne.w	800a44e <Setup0_Process+0xa6>
      Result = Standard_SetEndPointFeature();
 800a6ac:	f7ff fe24 	bl	800a2f8 <Standard_SetEndPointFeature>
 800a6b0:	e725      	b.n	800a4fe <Setup0_Process+0x156>
      if ((pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP)
 800a6b2:	78e3      	ldrb	r3, [r4, #3]
 800a6b4:	2b01      	cmp	r3, #1
 800a6b6:	f47f aeca 	bne.w	800a44e <Setup0_Process+0xa6>
          && (pInformation->USBwIndex == 0)
 800a6ba:	88a3      	ldrh	r3, [r4, #4]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	f47f aec6 	bne.w	800a44e <Setup0_Process+0xa6>
          && (ValBit(pInformation->Current_Feature, 5)))
 800a6c2:	7a63      	ldrb	r3, [r4, #9]
 800a6c4:	069a      	lsls	r2, r3, #26
 800a6c6:	f57f aec2 	bpl.w	800a44e <Setup0_Process+0xa6>
  pUser_Standard_Requests->User_SetDeviceFeature();
 800a6ca:	4a32      	ldr	r2, [pc, #200]	; (800a794 <Setup0_Process+0x3ec>)
  SetBit(pInformation->Current_Feature, 5);
 800a6cc:	f043 0320 	orr.w	r3, r3, #32
  pUser_Standard_Requests->User_SetDeviceFeature();
 800a6d0:	6812      	ldr	r2, [r2, #0]
  SetBit(pInformation->Current_Feature, 5);
 800a6d2:	7263      	strb	r3, [r4, #9]
  pUser_Standard_Requests->User_SetDeviceFeature();
 800a6d4:	69d3      	ldr	r3, [r2, #28]
 800a6d6:	4798      	blx	r3
 800a6d8:	6834      	ldr	r4, [r6, #0]
 800a6da:	e713      	b.n	800a504 <Setup0_Process+0x15c>
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
 800a6dc:	4a2e      	ldr	r2, [pc, #184]	; (800a798 <Setup0_Process+0x3f0>)
  if ((pInformation->USBwValue0 <=
 800a6de:	78e3      	ldrb	r3, [r4, #3]
 800a6e0:	7852      	ldrb	r2, [r2, #1]
 800a6e2:	429a      	cmp	r2, r3
 800a6e4:	f4ff aeb3 	bcc.w	800a44e <Setup0_Process+0xa6>
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
 800a6e8:	78a2      	ldrb	r2, [r4, #2]
 800a6ea:	2a00      	cmp	r2, #0
 800a6ec:	f47f aeaf 	bne.w	800a44e <Setup0_Process+0xa6>
      && (pInformation->USBwIndex == 0)) /*call Back usb spec 2.0*/
 800a6f0:	88a2      	ldrh	r2, [r4, #4]
 800a6f2:	2a00      	cmp	r2, #0
 800a6f4:	f47f aeab 	bne.w	800a44e <Setup0_Process+0xa6>
    pUser_Standard_Requests->User_SetConfiguration();
 800a6f8:	4a26      	ldr	r2, [pc, #152]	; (800a794 <Setup0_Process+0x3ec>)
    pInformation->Current_Configuration = pInformation->USBwValue0;
 800a6fa:	72a3      	strb	r3, [r4, #10]
    pUser_Standard_Requests->User_SetConfiguration();
 800a6fc:	6813      	ldr	r3, [r2, #0]
 800a6fe:	685b      	ldr	r3, [r3, #4]
 800a700:	4798      	blx	r3
 800a702:	6834      	ldr	r4, [r6, #0]
 800a704:	e6fe      	b.n	800a504 <Setup0_Process+0x15c>
        CopyRoutine = pProperty->GetDeviceDescriptor;
 800a706:	682b      	ldr	r3, [r5, #0]
 800a708:	69db      	ldr	r3, [r3, #28]
 800a70a:	e719      	b.n	800a540 <Setup0_Process+0x198>
 800a70c:	6834      	ldr	r4, [r6, #0]
    if (Result == USB_NOT_READY)
 800a70e:	2309      	movs	r3, #9
 800a710:	e6a9      	b.n	800a466 <Setup0_Process+0xbe>
    else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 800a712:	2801      	cmp	r0, #1
 800a714:	d02d      	beq.n	800a772 <Setup0_Process+0x3ca>
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 800a716:	2802      	cmp	r0, #2
 800a718:	d011      	beq.n	800a73e <Setup0_Process+0x396>
      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 800a71a:	2000      	movs	r0, #0
 800a71c:	e674      	b.n	800a408 <Setup0_Process+0x60>
 800a71e:	4a1f      	ldr	r2, [pc, #124]	; (800a79c <Setup0_Process+0x3f4>)
 800a720:	6812      	ldr	r2, [r2, #0]
 800a722:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
 800a726:	e75a      	b.n	800a5de <Setup0_Process+0x236>
      else if ((pInformation->Ctrl_Info.Usb_wLength % pProperty->MaxPacketSize) == 0)
 800a728:	fb92 f4f0 	sdiv	r4, r2, r0
 800a72c:	fb00 2214 	mls	r2, r0, r4, r2
 800a730:	2a00      	cmp	r2, #0
 800a732:	f47f af54 	bne.w	800a5de <Setup0_Process+0x236>
        Data_Mul_MaxPacketSize = TRUE;
 800a736:	2001      	movs	r0, #1
 800a738:	4a19      	ldr	r2, [pc, #100]	; (800a7a0 <Setup0_Process+0x3f8>)
 800a73a:	6010      	str	r0, [r2, #0]
 800a73c:	e74f      	b.n	800a5de <Setup0_Process+0x236>
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
 800a73e:	7960      	ldrb	r0, [r4, #5]
 800a740:	f000 020f 	and.w	r2, r0, #15
        Status = _GetEPTxStatus(Related_Endpoint);
 800a744:	0093      	lsls	r3, r2, #2
      if (ValBit(pInformation->USBwIndex0, 7))
 800a746:	0601      	lsls	r1, r0, #24
        Status = _GetEPTxStatus(Related_Endpoint);
 800a748:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 800a74c:	4912      	ldr	r1, [pc, #72]	; (800a798 <Setup0_Process+0x3f0>)
        Status = _GetEPTxStatus(Related_Endpoint);
 800a74e:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800a752:	681b      	ldr	r3, [r3, #0]
      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 800a754:	7809      	ldrb	r1, [r1, #0]
        Status = _GetEPTxStatus(Related_Endpoint);
 800a756:	bf4c      	ite	mi
 800a758:	f003 0330 	andmi.w	r3, r3, #48	; 0x30
        Status = _GetEPRxStatus(Related_Endpoint);
 800a75c:	f403 5340 	andpl.w	r3, r3, #12288	; 0x3000
      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 800a760:	428a      	cmp	r2, r1
 800a762:	d2da      	bcs.n	800a71a <Setup0_Process+0x372>
 800a764:	f010 0070 	ands.w	r0, r0, #112	; 0x70
 800a768:	d1d7      	bne.n	800a71a <Setup0_Process+0x372>
          && (Status != 0))
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	f47f aeff 	bne.w	800a56e <Setup0_Process+0x1c6>
 800a770:	e64a      	b.n	800a408 <Setup0_Process+0x60>
      if (((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS)
 800a772:	4d0a      	ldr	r5, [pc, #40]	; (800a79c <Setup0_Process+0x3f4>)
 800a774:	7960      	ldrb	r0, [r4, #5]
 800a776:	682b      	ldr	r3, [r5, #0]
 800a778:	699b      	ldr	r3, [r3, #24]
 800a77a:	4798      	blx	r3
 800a77c:	b930      	cbnz	r0, 800a78c <Setup0_Process+0x3e4>
          && (pInformation->Current_Configuration != 0))
 800a77e:	6834      	ldr	r4, [r6, #0]
 800a780:	7aa3      	ldrb	r3, [r4, #10]
 800a782:	2b00      	cmp	r3, #0
 800a784:	f47f aef3 	bne.w	800a56e <Setup0_Process+0x1c6>
 800a788:	7860      	ldrb	r0, [r4, #1]
 800a78a:	e63e      	b.n	800a40a <Setup0_Process+0x62>
 800a78c:	6833      	ldr	r3, [r6, #0]
 800a78e:	7858      	ldrb	r0, [r3, #1]
 800a790:	e63b      	b.n	800a40a <Setup0_Process+0x62>
 800a792:	bf00      	nop
 800a794:	2000149c 	.word	0x2000149c
 800a798:	200000b0 	.word	0x200000b0
 800a79c:	20001478 	.word	0x20001478
 800a7a0:	20000c20 	.word	0x20000c20

0800a7a4 <In0_Process>:
{
 800a7a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t ControlState = pInformation->ControlState;
 800a7a6:	4c29      	ldr	r4, [pc, #164]	; (800a84c <In0_Process+0xa8>)
 800a7a8:	6823      	ldr	r3, [r4, #0]
 800a7aa:	7a1a      	ldrb	r2, [r3, #8]
  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 800a7ac:	2a02      	cmp	r2, #2
 800a7ae:	d026      	beq.n	800a7fe <In0_Process+0x5a>
 800a7b0:	2a04      	cmp	r2, #4
 800a7b2:	d024      	beq.n	800a7fe <In0_Process+0x5a>
  else if (ControlState == WAIT_STATUS_IN)
 800a7b4:	2a06      	cmp	r2, #6
 800a7b6:	d018      	beq.n	800a7ea <In0_Process+0x46>
 800a7b8:	2108      	movs	r1, #8
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 800a7ba:	4a25      	ldr	r2, [pc, #148]	; (800a850 <In0_Process+0xac>)
  pInformation->ControlState = ControlState;
 800a7bc:	7219      	strb	r1, [r3, #8]
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 800a7be:	2000      	movs	r0, #0
 800a7c0:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
 800a7c4:	f000 faee 	bl	800ada4 <SetEPRxCount>
  if (pInformation->ControlState == STALLED)
 800a7c8:	6823      	ldr	r3, [r4, #0]
 800a7ca:	7a18      	ldrb	r0, [r3, #8]
 800a7cc:	2808      	cmp	r0, #8
 800a7ce:	d106      	bne.n	800a7de <In0_Process+0x3a>
    vSetEPRxStatus(EP_RX_STALL);
 800a7d0:	f44f 5480 	mov.w	r4, #4096	; 0x1000
    vSetEPTxStatus(EP_TX_STALL);
 800a7d4:	2210      	movs	r2, #16
    vSetEPRxStatus(EP_RX_STALL);
 800a7d6:	491f      	ldr	r1, [pc, #124]	; (800a854 <In0_Process+0xb0>)
    vSetEPTxStatus(EP_TX_STALL);
 800a7d8:	4b1f      	ldr	r3, [pc, #124]	; (800a858 <In0_Process+0xb4>)
    vSetEPRxStatus(EP_RX_STALL);
 800a7da:	800c      	strh	r4, [r1, #0]
    vSetEPTxStatus(EP_TX_STALL);
 800a7dc:	801a      	strh	r2, [r3, #0]
}
 800a7de:	f1a0 0009 	sub.w	r0, r0, #9
 800a7e2:	fab0 f080 	clz	r0, r0
 800a7e6:	0940      	lsrs	r0, r0, #5
 800a7e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 800a7ea:	785a      	ldrb	r2, [r3, #1]
 800a7ec:	2a05      	cmp	r2, #5
 800a7ee:	d00b      	beq.n	800a808 <In0_Process+0x64>
    (*pProperty->Process_Status_IN)();
 800a7f0:	4b1a      	ldr	r3, [pc, #104]	; (800a85c <In0_Process+0xb8>)
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	689b      	ldr	r3, [r3, #8]
 800a7f6:	4798      	blx	r3
 800a7f8:	6823      	ldr	r3, [r4, #0]
 800a7fa:	2108      	movs	r1, #8
 800a7fc:	e7dd      	b.n	800a7ba <In0_Process+0x16>
    DataStageIn();
 800a7fe:	f7ff fcb9 	bl	800a174 <DataStageIn>
    ControlState = pInformation->ControlState;
 800a802:	6823      	ldr	r3, [r4, #0]
 800a804:	7a19      	ldrb	r1, [r3, #8]
 800a806:	e7d8      	b.n	800a7ba <In0_Process+0x16>
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 800a808:	781a      	ldrb	r2, [r3, #0]
 800a80a:	f012 027f 	ands.w	r2, r2, #127	; 0x7f
 800a80e:	d1ef      	bne.n	800a7f0 <In0_Process+0x4c>
{
#ifdef STM32F10X_CL 
  PCD_EP_SetAddress ((uint8_t)Val);
#else 
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;
 800a810:	4913      	ldr	r1, [pc, #76]	; (800a860 <In0_Process+0xbc>)
      SetDeviceAddress(pInformation->USBwValue0);
 800a812:	f893 e003 	ldrb.w	lr, [r3, #3]
  uint32_t nEP = Device_Table.Total_Endpoint;
 800a816:	780d      	ldrb	r5, [r1, #0]

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 800a818:	b175      	cbz	r5, 800a838 <In0_Process+0x94>
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 800a81a:	f640 770f 	movw	r7, #3855	; 0xf0f
 800a81e:	f248 0680 	movw	r6, #32896	; 0x8080
  for (i = 0; i < nEP; i++)
 800a822:	4910      	ldr	r1, [pc, #64]	; (800a864 <In0_Process+0xc0>)
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 800a824:	680b      	ldr	r3, [r1, #0]
 800a826:	ea42 0006 	orr.w	r0, r2, r6
 800a82a:	403b      	ands	r3, r7
  for (i = 0; i < nEP; i++)
 800a82c:	3201      	adds	r2, #1
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 800a82e:	4303      	orrs	r3, r0
  for (i = 0; i < nEP; i++)
 800a830:	4295      	cmp	r5, r2
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 800a832:	f841 3b04 	str.w	r3, [r1], #4
  for (i = 0; i < nEP; i++)
 800a836:	d1f5      	bne.n	800a824 <In0_Process+0x80>
  } /* for */
  _SetDADDR(Val | DADDR_EF); /* set device address and enable function */
 800a838:	490b      	ldr	r1, [pc, #44]	; (800a868 <In0_Process+0xc4>)
      pUser_Standard_Requests->User_SetDeviceAddress();
 800a83a:	4a0c      	ldr	r2, [pc, #48]	; (800a86c <In0_Process+0xc8>)
  _SetDADDR(Val | DADDR_EF); /* set device address and enable function */
 800a83c:	f04e 0380 	orr.w	r3, lr, #128	; 0x80
 800a840:	600b      	str	r3, [r1, #0]
      pUser_Standard_Requests->User_SetDeviceAddress();
 800a842:	6813      	ldr	r3, [r2, #0]
 800a844:	6a1b      	ldr	r3, [r3, #32]
 800a846:	4798      	blx	r3
 800a848:	e7d2      	b.n	800a7f0 <In0_Process+0x4c>
 800a84a:	bf00      	nop
 800a84c:	200014a0 	.word	0x200014a0
 800a850:	20000080 	.word	0x20000080
 800a854:	200014a6 	.word	0x200014a6
 800a858:	200014a8 	.word	0x200014a8
 800a85c:	20001478 	.word	0x20001478
 800a860:	200000b0 	.word	0x200000b0
 800a864:	40005c00 	.word	0x40005c00
 800a868:	40005c4c 	.word	0x40005c4c
 800a86c:	2000149c 	.word	0x2000149c

0800a870 <Out0_Process>:
{
 800a870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t ControlState = pInformation->ControlState;
 800a872:	4d3c      	ldr	r5, [pc, #240]	; (800a964 <Out0_Process+0xf4>)
 800a874:	682c      	ldr	r4, [r5, #0]
 800a876:	7a23      	ldrb	r3, [r4, #8]
  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 800a878:	2b02      	cmp	r3, #2
 800a87a:	d007      	beq.n	800a88c <Out0_Process+0x1c>
 800a87c:	2b04      	cmp	r3, #4
 800a87e:	d005      	beq.n	800a88c <Out0_Process+0x1c>
  else if ((ControlState == OUT_DATA) || (ControlState == LAST_OUT_DATA))
 800a880:	2b03      	cmp	r3, #3
 800a882:	d01c      	beq.n	800a8be <Out0_Process+0x4e>
 800a884:	2b05      	cmp	r3, #5
 800a886:	d01a      	beq.n	800a8be <Out0_Process+0x4e>
  else if (ControlState == WAIT_STATUS_OUT)
 800a888:	2b07      	cmp	r3, #7
 800a88a:	d049      	beq.n	800a920 <Out0_Process+0xb0>
 800a88c:	2308      	movs	r3, #8
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 800a88e:	4a36      	ldr	r2, [pc, #216]	; (800a968 <Out0_Process+0xf8>)
  pInformation->ControlState = ControlState;
 800a890:	7223      	strb	r3, [r4, #8]
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 800a892:	2000      	movs	r0, #0
 800a894:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
 800a898:	f000 fa84 	bl	800ada4 <SetEPRxCount>
  if (pInformation->ControlState == STALLED)
 800a89c:	682b      	ldr	r3, [r5, #0]
 800a89e:	7a18      	ldrb	r0, [r3, #8]
 800a8a0:	2808      	cmp	r0, #8
 800a8a2:	d106      	bne.n	800a8b2 <Out0_Process+0x42>
    vSetEPRxStatus(EP_RX_STALL);
 800a8a4:	f44f 5480 	mov.w	r4, #4096	; 0x1000
    vSetEPTxStatus(EP_TX_STALL);
 800a8a8:	2210      	movs	r2, #16
    vSetEPRxStatus(EP_RX_STALL);
 800a8aa:	4930      	ldr	r1, [pc, #192]	; (800a96c <Out0_Process+0xfc>)
    vSetEPTxStatus(EP_TX_STALL);
 800a8ac:	4b30      	ldr	r3, [pc, #192]	; (800a970 <Out0_Process+0x100>)
    vSetEPRxStatus(EP_RX_STALL);
 800a8ae:	800c      	strh	r4, [r1, #0]
    vSetEPTxStatus(EP_TX_STALL);
 800a8b0:	801a      	strh	r2, [r3, #0]
  return Post0_Process();
 800a8b2:	f1a0 0009 	sub.w	r0, r0, #9
 800a8b6:	fab0 f080 	clz	r0, r0
 800a8ba:	0940      	lsrs	r0, r0, #5
}
 800a8bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (pEPinfo->CopyData && save_rLength)
 800a8be:	69a3      	ldr	r3, [r4, #24]
  save_rLength = pEPinfo->Usb_rLength;
 800a8c0:	8a22      	ldrh	r2, [r4, #16]
  if (pEPinfo->CopyData && save_rLength)
 800a8c2:	b1bb      	cbz	r3, 800a8f4 <Out0_Process+0x84>
 800a8c4:	2a00      	cmp	r2, #0
 800a8c6:	d032      	beq.n	800a92e <Out0_Process+0xbe>
    Length = pEPinfo->PacketSize;
 800a8c8:	8aa6      	ldrh	r6, [r4, #20]
    Buffer = (*pEPinfo->CopyData)(Length);
 800a8ca:	4296      	cmp	r6, r2
 800a8cc:	bf28      	it	cs
 800a8ce:	4616      	movcs	r6, r2
 800a8d0:	4630      	mov	r0, r6
 800a8d2:	4798      	blx	r3
    pEPinfo->Usb_rLength -= Length;
 800a8d4:	8a22      	ldrh	r2, [r4, #16]
    pEPinfo->Usb_rOffset += Length;
 800a8d6:	8a63      	ldrh	r3, [r4, #18]
    pEPinfo->Usb_rLength -= Length;
 800a8d8:	1b92      	subs	r2, r2, r6
    pEPinfo->Usb_rOffset += Length;
 800a8da:	4433      	add	r3, r6
    Buffer = (*pEPinfo->CopyData)(Length);
 800a8dc:	4607      	mov	r7, r0
    pEPinfo->Usb_rLength -= Length;
 800a8de:	8222      	strh	r2, [r4, #16]
    pEPinfo->Usb_rOffset += Length;
 800a8e0:	8263      	strh	r3, [r4, #18]
    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
 800a8e2:	2000      	movs	r0, #0
 800a8e4:	f000 fa42 	bl	800ad6c <GetEPRxAddr>
 800a8e8:	4632      	mov	r2, r6
 800a8ea:	4601      	mov	r1, r0
 800a8ec:	4638      	mov	r0, r7
 800a8ee:	f000 f959 	bl	800aba4 <PMAToUserBufferCopy>
 800a8f2:	8a22      	ldrh	r2, [r4, #16]
  if (pEPinfo->Usb_rLength != 0)
 800a8f4:	b302      	cbz	r2, 800a938 <Out0_Process+0xc8>
    SetEPTxCount(ENDP0, 0);
 800a8f6:	2100      	movs	r1, #0
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 800a8f8:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800a8fc:	4b1b      	ldr	r3, [pc, #108]	; (800a96c <Out0_Process+0xfc>)
    SetEPTxCount(ENDP0, 0);
 800a8fe:	4608      	mov	r0, r1
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 800a900:	801a      	strh	r2, [r3, #0]
    SetEPTxCount(ENDP0, 0);
 800a902:	f000 fa41 	bl	800ad88 <SetEPTxCount>
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 800a906:	2230      	movs	r2, #48	; 0x30
 800a908:	8a23      	ldrh	r3, [r4, #16]
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 800a90a:	8aa1      	ldrh	r1, [r4, #20]
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 800a90c:	4818      	ldr	r0, [pc, #96]	; (800a970 <Out0_Process+0x100>)
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 800a90e:	4299      	cmp	r1, r3
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 800a910:	8002      	strh	r2, [r0, #0]
 800a912:	682a      	ldr	r2, [r5, #0]
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 800a914:	d922      	bls.n	800a95c <Out0_Process+0xec>
    if (pEPinfo->Usb_rLength > 0)
 800a916:	b31b      	cbz	r3, 800a960 <Out0_Process+0xf0>
      pInformation->ControlState = LAST_OUT_DATA;
 800a918:	2305      	movs	r3, #5
 800a91a:	4614      	mov	r4, r2
 800a91c:	7213      	strb	r3, [r2, #8]
 800a91e:	e7b6      	b.n	800a88e <Out0_Process+0x1e>
    (*pProperty->Process_Status_OUT)();
 800a920:	4b14      	ldr	r3, [pc, #80]	; (800a974 <Out0_Process+0x104>)
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	68db      	ldr	r3, [r3, #12]
 800a926:	4798      	blx	r3
 800a928:	682c      	ldr	r4, [r5, #0]
 800a92a:	2308      	movs	r3, #8
 800a92c:	e7af      	b.n	800a88e <Out0_Process+0x1e>
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 800a92e:	8aa3      	ldrh	r3, [r4, #20]
 800a930:	b933      	cbnz	r3, 800a940 <Out0_Process+0xd0>
    pInformation->ControlState = OUT_DATA;
 800a932:	2303      	movs	r3, #3
 800a934:	7223      	strb	r3, [r4, #8]
 800a936:	e7aa      	b.n	800a88e <Out0_Process+0x1e>
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 800a938:	8aa3      	ldrh	r3, [r4, #20]
 800a93a:	682c      	ldr	r4, [r5, #0]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d0f8      	beq.n	800a932 <Out0_Process+0xc2>
 800a940:	480b      	ldr	r0, [pc, #44]	; (800a970 <Out0_Process+0x100>)
      pInformation->ControlState = WAIT_STATUS_IN;
 800a942:	2306      	movs	r3, #6
      USB_StatusIn();
 800a944:	2700      	movs	r7, #0
 800a946:	2630      	movs	r6, #48	; 0x30
 800a948:	4a0b      	ldr	r2, [pc, #44]	; (800a978 <Out0_Process+0x108>)
      pInformation->ControlState = WAIT_STATUS_IN;
 800a94a:	7223      	strb	r3, [r4, #8]
      USB_StatusIn();
 800a94c:	6811      	ldr	r1, [r2, #0]
 800a94e:	4a0b      	ldr	r2, [pc, #44]	; (800a97c <Out0_Process+0x10c>)
 800a950:	b289      	uxth	r1, r1
 800a952:	440a      	add	r2, r1
 800a954:	0052      	lsls	r2, r2, #1
 800a956:	6017      	str	r7, [r2, #0]
 800a958:	8006      	strh	r6, [r0, #0]
    ControlState = pInformation->ControlState; /* may be changed outside the function */
 800a95a:	e798      	b.n	800a88e <Out0_Process+0x1e>
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 800a95c:	4614      	mov	r4, r2
 800a95e:	e7e8      	b.n	800a932 <Out0_Process+0xc2>
    if (pEPinfo->Usb_rLength > 0)
 800a960:	4614      	mov	r4, r2
 800a962:	e7ee      	b.n	800a942 <Out0_Process+0xd2>
 800a964:	200014a0 	.word	0x200014a0
 800a968:	20000080 	.word	0x20000080
 800a96c:	200014a6 	.word	0x200014a6
 800a970:	200014a8 	.word	0x200014a8
 800a974:	20001478 	.word	0x20001478
 800a978:	40005c50 	.word	0x40005c50
 800a97c:	20003002 	.word	0x20003002

0800a980 <SetDeviceAddress>:
{
 800a980:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t nEP = Device_Table.Total_Endpoint;
 800a982:	4b0c      	ldr	r3, [pc, #48]	; (800a9b4 <SetDeviceAddress+0x34>)
 800a984:	781d      	ldrb	r5, [r3, #0]
  for (i = 0; i < nEP; i++)
 800a986:	b17d      	cbz	r5, 800a9a8 <SetDeviceAddress+0x28>
 800a988:	2200      	movs	r2, #0
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 800a98a:	f640 770f 	movw	r7, #3855	; 0xf0f
 800a98e:	f248 0680 	movw	r6, #32896	; 0x8080
  for (i = 0; i < nEP; i++)
 800a992:	4909      	ldr	r1, [pc, #36]	; (800a9b8 <SetDeviceAddress+0x38>)
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 800a994:	680b      	ldr	r3, [r1, #0]
 800a996:	ea42 0406 	orr.w	r4, r2, r6
 800a99a:	403b      	ands	r3, r7
  for (i = 0; i < nEP; i++)
 800a99c:	3201      	adds	r2, #1
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 800a99e:	4323      	orrs	r3, r4
  for (i = 0; i < nEP; i++)
 800a9a0:	4295      	cmp	r5, r2
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 800a9a2:	f841 3b04 	str.w	r3, [r1], #4
  for (i = 0; i < nEP; i++)
 800a9a6:	d1f5      	bne.n	800a994 <SetDeviceAddress+0x14>
  _SetDADDR(Val | DADDR_EF); /* set device address and enable function */
 800a9a8:	4b04      	ldr	r3, [pc, #16]	; (800a9bc <SetDeviceAddress+0x3c>)
 800a9aa:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 800a9ae:	6018      	str	r0, [r3, #0]
#endif  /* STM32F10X_CL */  
}
 800a9b0:	bcf0      	pop	{r4, r5, r6, r7}
 800a9b2:	4770      	bx	lr
 800a9b4:	200000b0 	.word	0x200000b0
 800a9b8:	40005c00 	.word	0x40005c00
 800a9bc:	40005c4c 	.word	0x40005c4c

0800a9c0 <NOP_Process>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
 800a9c0:	4770      	bx	lr
 800a9c2:	bf00      	nop

0800a9c4 <USB_Init>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Init(void)
{
 800a9c4:	b470      	push	{r4, r5, r6}
  pInformation = &Device_Info;
  pInformation->ControlState = 2;
 800a9c6:	2602      	movs	r6, #2
  pInformation = &Device_Info;
 800a9c8:	4a06      	ldr	r2, [pc, #24]	; (800a9e4 <USB_Init+0x20>)
 800a9ca:	4d07      	ldr	r5, [pc, #28]	; (800a9e8 <USB_Init+0x24>)
  pProperty = &Device_Property;
 800a9cc:	4c07      	ldr	r4, [pc, #28]	; (800a9ec <USB_Init+0x28>)
 800a9ce:	4b08      	ldr	r3, [pc, #32]	; (800a9f0 <USB_Init+0x2c>)
  pUser_Standard_Requests = &User_Standard_Requests;
 800a9d0:	4908      	ldr	r1, [pc, #32]	; (800a9f4 <USB_Init+0x30>)
 800a9d2:	4809      	ldr	r0, [pc, #36]	; (800a9f8 <USB_Init+0x34>)
  pInformation->ControlState = 2;
 800a9d4:	7216      	strb	r6, [r2, #8]
  pProperty = &Device_Property;
 800a9d6:	6023      	str	r3, [r4, #0]
  pInformation = &Device_Info;
 800a9d8:	602a      	str	r2, [r5, #0]
  /* Initialize devices one by one */
  pProperty->Init();
 800a9da:	681b      	ldr	r3, [r3, #0]
  pUser_Standard_Requests = &User_Standard_Requests;
 800a9dc:	6008      	str	r0, [r1, #0]
}
 800a9de:	bc70      	pop	{r4, r5, r6}
  pProperty->Init();
 800a9e0:	4718      	bx	r3
 800a9e2:	bf00      	nop
 800a9e4:	20001480 	.word	0x20001480
 800a9e8:	200014a0 	.word	0x200014a0
 800a9ec:	20001478 	.word	0x20001478
 800a9f0:	20000080 	.word	0x20000080
 800a9f4:	2000149c 	.word	0x2000149c
 800a9f8:	200000d4 	.word	0x200000d4

0800a9fc <CTR_LP>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
 800a9fc:	2300      	movs	r3, #0
{
 800a9fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa02:	4e56      	ldr	r6, [pc, #344]	; (800ab5c <CTR_LP+0x160>)
 800aa04:	b084      	sub	sp, #16
  /* stay in loop while pending ints */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 800aa06:	f8df 916c 	ldr.w	r9, [pc, #364]	; 800ab74 <CTR_LP+0x178>
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 800aa0a:	f8df 816c 	ldr.w	r8, [pc, #364]	; 800ab78 <CTR_LP+0x17c>
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 800aa0e:	4f54      	ldr	r7, [pc, #336]	; (800ab60 <CTR_LP+0x164>)
  __IO uint16_t wEPVal = 0;
 800aa10:	f8ad 300e 	strh.w	r3, [sp, #14]
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 800aa14:	f8d9 3000 	ldr.w	r3, [r9]
	    SaveRState = _GetENDPOINT(ENDP0);
 800aa18:	4c52      	ldr	r4, [pc, #328]	; (800ab64 <CTR_LP+0x168>)
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 800aa1a:	b299      	uxth	r1, r3
 800aa1c:	041b      	lsls	r3, r3, #16
	    SaveRState = _GetENDPOINT(ENDP0);
 800aa1e:	4d52      	ldr	r5, [pc, #328]	; (800ab68 <CTR_LP+0x16c>)
	    SaveTState = SaveRState & EPTX_STAT;
 800aa20:	4a52      	ldr	r2, [pc, #328]	; (800ab6c <CTR_LP+0x170>)
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 800aa22:	8031      	strh	r1, [r6, #0]
 800aa24:	f140 808e 	bpl.w	800ab44 <CTR_LP+0x148>
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 800aa28:	8833      	ldrh	r3, [r6, #0]
 800aa2a:	f003 030f 	and.w	r3, r3, #15
      wEPVal = _GetENDPOINT(EPindex);
 800aa2e:	0099      	lsls	r1, r3, #2
 800aa30:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800aa34:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 800aa38:	f888 3000 	strb.w	r3, [r8]
    if (EPindex == 0)
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d130      	bne.n	800aaa2 <CTR_LP+0xa6>
	    _SetEPRxTxStatus(ENDP0,EP_RX_NAK,EP_TX_NAK);
 800aa40:	f64b 7abf 	movw	sl, #49087	; 0xbfbf
	    SaveRState = _GetENDPOINT(ENDP0);
 800aa44:	6823      	ldr	r3, [r4, #0]
 800aa46:	b29b      	uxth	r3, r3
 800aa48:	802b      	strh	r3, [r5, #0]
	    SaveTState = SaveRState & EPTX_STAT;
 800aa4a:	882b      	ldrh	r3, [r5, #0]
 800aa4c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800aa50:	8013      	strh	r3, [r2, #0]
	    SaveRState &=  EPRX_STAT;	
 800aa52:	882b      	ldrh	r3, [r5, #0]
 800aa54:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800aa58:	802b      	strh	r3, [r5, #0]
	    _SetEPRxTxStatus(ENDP0,EP_RX_NAK,EP_TX_NAK);
 800aa5a:	6823      	ldr	r3, [r4, #0]
 800aa5c:	ea03 030a 	and.w	r3, r3, sl
 800aa60:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800aa64:	f083 0320 	eor.w	r3, r3, #32
 800aa68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa70:	6023      	str	r3, [r4, #0]
      if ((wIstr & ISTR_DIR) == 0)
 800aa72:	8833      	ldrh	r3, [r6, #0]
 800aa74:	06d8      	lsls	r0, r3, #27
 800aa76:	d53c      	bpl.n	800aaf2 <CTR_LP+0xf6>
        wEPVal = _GetENDPOINT(ENDP0);
 800aa78:	6823      	ldr	r3, [r4, #0]
 800aa7a:	b29b      	uxth	r3, r3
 800aa7c:	f8ad 300e 	strh.w	r3, [sp, #14]
        if ((wEPVal &EP_SETUP) != 0)
 800aa80:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800aa84:	0519      	lsls	r1, r3, #20
 800aa86:	d460      	bmi.n	800ab4a <CTR_LP+0x14e>
        else if ((wEPVal & EP_CTR_RX) != 0)
 800aa88:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800aa8c:	041b      	lsls	r3, r3, #16
 800aa8e:	d5c1      	bpl.n	800aa14 <CTR_LP+0x18>
          _ClearEP_CTR_RX(ENDP0);
 800aa90:	f640 718f 	movw	r1, #3983	; 0xf8f
 800aa94:	6823      	ldr	r3, [r4, #0]
 800aa96:	9201      	str	r2, [sp, #4]
 800aa98:	400b      	ands	r3, r1
 800aa9a:	6023      	str	r3, [r4, #0]
          Out0_Process();
 800aa9c:	f7ff fee8 	bl	800a870 <Out0_Process>
 800aaa0:	e02f      	b.n	800ab02 <CTR_LP+0x106>
      wEPVal = _GetENDPOINT(EPindex);
 800aaa2:	680a      	ldr	r2, [r1, #0]
 800aaa4:	b292      	uxth	r2, r2
 800aaa6:	f8ad 200e 	strh.w	r2, [sp, #14]
      if ((wEPVal & EP_CTR_RX) != 0)
 800aaaa:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 800aaae:	0410      	lsls	r0, r2, #16
 800aab0:	d414      	bmi.n	800aadc <CTR_LP+0xe0>
      if ((wEPVal & EP_CTR_TX) != 0)
 800aab2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800aab6:	061a      	lsls	r2, r3, #24
 800aab8:	d5ac      	bpl.n	800aa14 <CTR_LP+0x18>
        _ClearEP_CTR_TX(EPindex);
 800aaba:	f648 700f 	movw	r0, #36623	; 0x8f0f
 800aabe:	f898 2000 	ldrb.w	r2, [r8]
 800aac2:	0093      	lsls	r3, r2, #2
 800aac4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800aac8:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800aacc:	6819      	ldr	r1, [r3, #0]
        (*pEpInt_IN[EPindex-1])();
 800aace:	3a01      	subs	r2, #1
        _ClearEP_CTR_TX(EPindex);
 800aad0:	4001      	ands	r1, r0
        (*pEpInt_IN[EPindex-1])();
 800aad2:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
        _ClearEP_CTR_TX(EPindex);
 800aad6:	6019      	str	r1, [r3, #0]
        (*pEpInt_IN[EPindex-1])();
 800aad8:	4790      	blx	r2
 800aada:	e79b      	b.n	800aa14 <CTR_LP+0x18>
        _ClearEP_CTR_RX(EPindex);
 800aadc:	f640 748f 	movw	r4, #3983	; 0xf8f
 800aae0:	680a      	ldr	r2, [r1, #0]
        (*pEpInt_OUT[EPindex-1])();
 800aae2:	4823      	ldr	r0, [pc, #140]	; (800ab70 <CTR_LP+0x174>)
        _ClearEP_CTR_RX(EPindex);
 800aae4:	4022      	ands	r2, r4
        (*pEpInt_OUT[EPindex-1])();
 800aae6:	3b01      	subs	r3, #1
 800aae8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        _ClearEP_CTR_RX(EPindex);
 800aaec:	600a      	str	r2, [r1, #0]
        (*pEpInt_OUT[EPindex-1])();
 800aaee:	4798      	blx	r3
 800aaf0:	e7df      	b.n	800aab2 <CTR_LP+0xb6>
        _ClearEP_CTR_TX(ENDP0);
 800aaf2:	f648 710f 	movw	r1, #36623	; 0x8f0f
 800aaf6:	6823      	ldr	r3, [r4, #0]
 800aaf8:	9201      	str	r2, [sp, #4]
 800aafa:	400b      	ands	r3, r1
 800aafc:	6023      	str	r3, [r4, #0]
        In0_Process();
 800aafe:	f7ff fe51 	bl	800a7a4 <In0_Process>
		     _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
 800ab02:	6823      	ldr	r3, [r4, #0]
 800ab04:	8829      	ldrh	r1, [r5, #0]
 800ab06:	ea03 0a0a 	and.w	sl, r3, sl
 800ab0a:	9a01      	ldr	r2, [sp, #4]
 800ab0c:	882b      	ldrh	r3, [r5, #0]
 800ab0e:	f411 5f80 	tst.w	r1, #4096	; 0x1000
 800ab12:	bf18      	it	ne
 800ab14:	f48a 5a80 	eorne.w	sl, sl, #4096	; 0x1000
 800ab18:	049e      	lsls	r6, r3, #18
 800ab1a:	8813      	ldrh	r3, [r2, #0]
 800ab1c:	bf48      	it	mi
 800ab1e:	f48a 5a00 	eormi.w	sl, sl, #8192	; 0x2000
 800ab22:	06dd      	lsls	r5, r3, #27
 800ab24:	8813      	ldrh	r3, [r2, #0]
 800ab26:	bf48      	it	mi
 800ab28:	f08a 0a10 	eormi.w	sl, sl, #16
 800ab2c:	069c      	lsls	r4, r3, #26
 800ab2e:	bf48      	it	mi
 800ab30:	f08a 0a20 	eormi.w	sl, sl, #32
 800ab34:	f44a 4a00 	orr.w	sl, sl, #32768	; 0x8000
 800ab38:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 800ab3c:	4a09      	ldr	r2, [pc, #36]	; (800ab64 <CTR_LP+0x168>)
 800ab3e:	fa1f f38a 	uxth.w	r3, sl
 800ab42:	6013      	str	r3, [r2, #0]
      } /* if((wEPVal & EP_CTR_TX) != 0) */

    }/* if(EPindex == 0) else */

  }/* while(...) */
}
 800ab44:	b004      	add	sp, #16
 800ab46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          _ClearEP_CTR_RX(ENDP0); /* SETUP bit kept frozen while CTR_RX = 1 */
 800ab4a:	f640 718f 	movw	r1, #3983	; 0xf8f
 800ab4e:	6823      	ldr	r3, [r4, #0]
 800ab50:	9201      	str	r2, [sp, #4]
 800ab52:	400b      	ands	r3, r1
 800ab54:	6023      	str	r3, [r4, #0]
          Setup0_Process();
 800ab56:	f7ff fc27 	bl	800a3a8 <Setup0_Process>
 800ab5a:	e7d2      	b.n	800ab02 <CTR_LP+0x106>
 800ab5c:	200014ec 	.word	0x200014ec
 800ab60:	20000038 	.word	0x20000038
 800ab64:	40005c00 	.word	0x40005c00
 800ab68:	200014a6 	.word	0x200014a6
 800ab6c:	200014a8 	.word	0x200014a8
 800ab70:	20000054 	.word	0x20000054
 800ab74:	40005c44 	.word	0x40005c44
 800ab78:	2000147c 	.word	0x2000147c

0800ab7c <UserToPMABufferCopy>:
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 800ab7c:	3201      	adds	r2, #1
  uint32_t i, temp1;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 800ab7e:	1052      	asrs	r2, r2, #1
 800ab80:	d00e      	beq.n	800aba0 <UserToPMABufferCopy+0x24>
 800ab82:	2300      	movs	r3, #0
{
 800ab84:	b410      	push	{r4}
 800ab86:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
 800ab8a:	f501 5140 	add.w	r1, r1, #12288	; 0x3000
 800ab8e:	0049      	lsls	r1, r1, #1
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    *pdwVal++ = temp1 | (uint16_t) * pbUsrBuf << 8;
 800ab90:	f830 4b02 	ldrh.w	r4, [r0], #2
 800ab94:	f821 4023 	strh.w	r4, [r1, r3, lsl #2]
 800ab98:	3301      	adds	r3, #1
  for (i = n; i != 0; i--)
 800ab9a:	429a      	cmp	r2, r3
 800ab9c:	d1f8      	bne.n	800ab90 <UserToPMABufferCopy+0x14>
    pdwVal++;
    pbUsrBuf++;
  }
}
 800ab9e:	bc10      	pop	{r4}
 800aba0:	4770      	bx	lr
 800aba2:	bf00      	nop

0800aba4 <PMAToUserBufferCopy>:
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 800aba4:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
 800aba8:	3201      	adds	r2, #1
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 800abaa:	f501 5140 	add.w	r1, r1, #12288	; 0x3000
  for (i = n; i != 0; i--)
 800abae:	1052      	asrs	r2, r2, #1
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 800abb0:	ea4f 0141 	mov.w	r1, r1, lsl #1
  for (i = n; i != 0; i--)
 800abb4:	d005      	beq.n	800abc2 <PMAToUserBufferCopy+0x1e>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 800abb6:	f851 3b04 	ldr.w	r3, [r1], #4
  for (i = n; i != 0; i--)
 800abba:	3a01      	subs	r2, #1
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 800abbc:	f820 3b02 	strh.w	r3, [r0], #2
  for (i = n; i != 0; i--)
 800abc0:	d1f9      	bne.n	800abb6 <PMAToUserBufferCopy+0x12>
 800abc2:	4770      	bx	lr

0800abc4 <SetBTABLE>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetBTABLE(uint16_t wRegValue)
{
  _SetBTABLE(wRegValue);
 800abc4:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 800abc8:	4a01      	ldr	r2, [pc, #4]	; (800abd0 <SetBTABLE+0xc>)
 800abca:	4003      	ands	r3, r0
 800abcc:	6013      	str	r3, [r2, #0]
 800abce:	4770      	bx	lr
 800abd0:	40005c50 	.word	0x40005c50

0800abd4 <SetEPType>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPType(uint8_t bEpNum, uint16_t wType)
{
  _SetEPType(bEpNum, wType);
 800abd4:	0080      	lsls	r0, r0, #2
 800abd6:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800abda:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 800abde:	6803      	ldr	r3, [r0, #0]
 800abe0:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800abe4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800abe8:	4319      	orrs	r1, r3
 800abea:	b289      	uxth	r1, r1
 800abec:	6001      	str	r1, [r0, #0]
 800abee:	4770      	bx	lr

0800abf0 <SetEPTxStatus>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPTxStatus(bEpNum, wState);
 800abf0:	0080      	lsls	r0, r0, #2
 800abf2:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800abf6:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 800abfa:	6803      	ldr	r3, [r0, #0]
 800abfc:	06ca      	lsls	r2, r1, #27
 800abfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ac06:	b29b      	uxth	r3, r3
 800ac08:	bf48      	it	mi
 800ac0a:	f083 0310 	eormi.w	r3, r3, #16
 800ac0e:	068a      	lsls	r2, r1, #26
 800ac10:	bf48      	it	mi
 800ac12:	f083 0320 	eormi.w	r3, r3, #32
 800ac16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ac1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac1e:	6003      	str	r3, [r0, #0]
 800ac20:	4770      	bx	lr
 800ac22:	bf00      	nop

0800ac24 <SetEPRxStatus>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPRxStatus(bEpNum, wState);
 800ac24:	0080      	lsls	r0, r0, #2
 800ac26:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800ac2a:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 800ac2e:	6803      	ldr	r3, [r0, #0]
 800ac30:	04ca      	lsls	r2, r1, #19
 800ac32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ac36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac3a:	b29b      	uxth	r3, r3
 800ac3c:	bf48      	it	mi
 800ac3e:	f483 5380 	eormi.w	r3, r3, #4096	; 0x1000
 800ac42:	048a      	lsls	r2, r1, #18
 800ac44:	bf48      	it	mi
 800ac46:	f483 5300 	eormi.w	r3, r3, #8192	; 0x2000
 800ac4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ac4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac52:	6003      	str	r3, [r0, #0]
 800ac54:	4770      	bx	lr
 800ac56:	bf00      	nop

0800ac58 <SetEPTxValid>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxValid(uint8_t bEpNum)
{
  _SetEPTxStatus(bEpNum, EP_TX_VALID);
 800ac58:	0080      	lsls	r0, r0, #2
 800ac5a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800ac5e:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 800ac62:	6803      	ldr	r3, [r0, #0]
 800ac64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ac6c:	b29b      	uxth	r3, r3
 800ac6e:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 800ac72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ac76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac7a:	6003      	str	r3, [r0, #0]
 800ac7c:	4770      	bx	lr
 800ac7e:	bf00      	nop

0800ac80 <SetEPRxValid>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxValid(uint8_t bEpNum)
{
  _SetEPRxStatus(bEpNum, EP_RX_VALID);
 800ac80:	0080      	lsls	r0, r0, #2
 800ac82:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800ac86:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 800ac8a:	6803      	ldr	r3, [r0, #0]
 800ac8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ac90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac94:	b29b      	uxth	r3, r3
 800ac96:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800ac9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ac9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aca2:	6003      	str	r3, [r0, #0]
 800aca4:	4770      	bx	lr
 800aca6:	bf00      	nop

0800aca8 <Clear_Status_Out>:
 800aca8:	f640 630f 	movw	r3, #3599	; 0xe0f
 800acac:	0080      	lsls	r0, r0, #2
 800acae:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800acb2:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 800acb6:	6802      	ldr	r2, [r0, #0]
 800acb8:	4013      	ands	r3, r2
 800acba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800acbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800acc2:	6003      	str	r3, [r0, #0]
 800acc4:	4770      	bx	lr
 800acc6:	bf00      	nop

0800acc8 <ClearDTOG_RX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_RX(uint8_t bEpNum)
{
  _ClearDTOG_RX(bEpNum);
 800acc8:	0080      	lsls	r0, r0, #2
 800acca:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800acce:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 800acd2:	6803      	ldr	r3, [r0, #0]
 800acd4:	045b      	lsls	r3, r3, #17
 800acd6:	d508      	bpl.n	800acea <ClearDTOG_RX+0x22>
 800acd8:	f640 720f 	movw	r2, #3855	; 0xf0f
 800acdc:	6803      	ldr	r3, [r0, #0]
 800acde:	4013      	ands	r3, r2
 800ace0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ace4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ace8:	6003      	str	r3, [r0, #0]
 800acea:	4770      	bx	lr

0800acec <ClearDTOG_TX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_TX(uint8_t bEpNum)
{
  _ClearDTOG_TX(bEpNum);
 800acec:	0080      	lsls	r0, r0, #2
 800acee:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800acf2:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 800acf6:	6803      	ldr	r3, [r0, #0]
 800acf8:	065b      	lsls	r3, r3, #25
 800acfa:	d508      	bpl.n	800ad0e <ClearDTOG_TX+0x22>
 800acfc:	f640 720f 	movw	r2, #3855	; 0xf0f
 800ad00:	6803      	ldr	r3, [r0, #0]
 800ad02:	4013      	ands	r3, r2
 800ad04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad08:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ad0c:	6003      	str	r3, [r0, #0]
 800ad0e:	4770      	bx	lr

0800ad10 <SetEPTxAddr>:
 800ad10:	4b06      	ldr	r3, [pc, #24]	; (800ad2c <SetEPTxAddr+0x1c>)
 800ad12:	0849      	lsrs	r1, r1, #1
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	0049      	lsls	r1, r1, #1
 800ad18:	b29b      	uxth	r3, r3
 800ad1a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800ad1e:	f100 5000 	add.w	r0, r0, #536870912	; 0x20000000
 800ad22:	f500 5040 	add.w	r0, r0, #12288	; 0x3000
 800ad26:	0040      	lsls	r0, r0, #1
 800ad28:	6001      	str	r1, [r0, #0]
 800ad2a:	4770      	bx	lr
 800ad2c:	40005c50 	.word	0x40005c50

0800ad30 <SetEPRxAddr>:
 800ad30:	4a05      	ldr	r2, [pc, #20]	; (800ad48 <SetEPRxAddr+0x18>)
 800ad32:	4b06      	ldr	r3, [pc, #24]	; (800ad4c <SetEPRxAddr+0x1c>)
 800ad34:	6812      	ldr	r2, [r2, #0]
 800ad36:	0849      	lsrs	r1, r1, #1
 800ad38:	b292      	uxth	r2, r2
 800ad3a:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800ad3e:	4413      	add	r3, r2
 800ad40:	0049      	lsls	r1, r1, #1
 800ad42:	005b      	lsls	r3, r3, #1
 800ad44:	6019      	str	r1, [r3, #0]
 800ad46:	4770      	bx	lr
 800ad48:	40005c50 	.word	0x40005c50
 800ad4c:	20003004 	.word	0x20003004

0800ad50 <GetEPTxAddr>:
 800ad50:	4b05      	ldr	r3, [pc, #20]	; (800ad68 <GetEPTxAddr+0x18>)
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	b29b      	uxth	r3, r3
 800ad56:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800ad5a:	f100 5000 	add.w	r0, r0, #536870912	; 0x20000000
 800ad5e:	f500 5040 	add.w	r0, r0, #12288	; 0x3000
 800ad62:	0040      	lsls	r0, r0, #1
 800ad64:	8800      	ldrh	r0, [r0, #0]
 800ad66:	4770      	bx	lr
 800ad68:	40005c50 	.word	0x40005c50

0800ad6c <GetEPRxAddr>:
 800ad6c:	4a04      	ldr	r2, [pc, #16]	; (800ad80 <GetEPRxAddr+0x14>)
 800ad6e:	4b05      	ldr	r3, [pc, #20]	; (800ad84 <GetEPRxAddr+0x18>)
 800ad70:	6812      	ldr	r2, [r2, #0]
 800ad72:	b292      	uxth	r2, r2
 800ad74:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800ad78:	4403      	add	r3, r0
 800ad7a:	005b      	lsls	r3, r3, #1
 800ad7c:	8818      	ldrh	r0, [r3, #0]
 800ad7e:	4770      	bx	lr
 800ad80:	40005c50 	.word	0x40005c50
 800ad84:	20003004 	.word	0x20003004

0800ad88 <SetEPTxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPTxCount(bEpNum, wCount);
 800ad88:	4a04      	ldr	r2, [pc, #16]	; (800ad9c <SetEPTxCount+0x14>)
 800ad8a:	4b05      	ldr	r3, [pc, #20]	; (800ada0 <SetEPTxCount+0x18>)
 800ad8c:	6812      	ldr	r2, [r2, #0]
 800ad8e:	b292      	uxth	r2, r2
 800ad90:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800ad94:	4403      	add	r3, r0
 800ad96:	005b      	lsls	r3, r3, #1
 800ad98:	6019      	str	r1, [r3, #0]
 800ad9a:	4770      	bx	lr
 800ad9c:	40005c50 	.word	0x40005c50
 800ada0:	20003002 	.word	0x20003002

0800ada4 <SetEPRxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPRxCount(bEpNum, wCount);
 800ada4:	4a0e      	ldr	r2, [pc, #56]	; (800ade0 <SetEPRxCount+0x3c>)
 800ada6:	4b0f      	ldr	r3, [pc, #60]	; (800ade4 <SetEPRxCount+0x40>)
 800ada8:	6812      	ldr	r2, [r2, #0]
 800adaa:	293e      	cmp	r1, #62	; 0x3e
 800adac:	b292      	uxth	r2, r2
 800adae:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800adb2:	4403      	add	r3, r0
 800adb4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800adb8:	d90a      	bls.n	800add0 <SetEPRxCount+0x2c>
 800adba:	094a      	lsrs	r2, r1, #5
 800adbc:	06c8      	lsls	r0, r1, #27
 800adbe:	bf04      	itt	eq
 800adc0:	f102 32ff 	addeq.w	r2, r2, #4294967295
 800adc4:	b292      	uxtheq	r2, r2
 800adc6:	0292      	lsls	r2, r2, #10
 800adc8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800adcc:	601a      	str	r2, [r3, #0]
 800adce:	4770      	bx	lr
 800add0:	084a      	lsrs	r2, r1, #1
 800add2:	07c9      	lsls	r1, r1, #31
 800add4:	bf48      	it	mi
 800add6:	3201      	addmi	r2, #1
 800add8:	0292      	lsls	r2, r2, #10
 800adda:	601a      	str	r2, [r3, #0]
 800addc:	4770      	bx	lr
 800adde:	bf00      	nop
 800ade0:	40005c50 	.word	0x40005c50
 800ade4:	20003006 	.word	0x20003006

0800ade8 <GetEPRxCount>:
 800ade8:	4a05      	ldr	r2, [pc, #20]	; (800ae00 <GetEPRxCount+0x18>)
 800adea:	4b06      	ldr	r3, [pc, #24]	; (800ae04 <GetEPRxCount+0x1c>)
 800adec:	6812      	ldr	r2, [r2, #0]
 800adee:	b292      	uxth	r2, r2
 800adf0:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800adf4:	4403      	add	r3, r0
 800adf6:	005b      	lsls	r3, r3, #1
 800adf8:	6818      	ldr	r0, [r3, #0]
 800adfa:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800adfe:	4770      	bx	lr
 800ae00:	40005c50 	.word	0x40005c50
 800ae04:	20003006 	.word	0x20003006

0800ae08 <ByteSwap>:
uint16_t ByteSwap(uint16_t wSwW)
{
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
 800ae08:	b2c3      	uxtb	r3, r0
 800ae0a:	0a00      	lsrs	r0, r0, #8
  return(wRet);
}
 800ae0c:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800ae10:	4770      	bx	lr
 800ae12:	bf00      	nop

0800ae14 <USB_SIL_Init>:
{
#ifndef STM32F10X_CL
  
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
 800ae14:	2000      	movs	r0, #0
  wInterrupt_Mask = IMR_MSK;
 800ae16:	f44f 4306 	mov.w	r3, #34304	; 0x8600
{
 800ae1a:	b410      	push	{r4}
  wInterrupt_Mask = IMR_MSK;
 800ae1c:	4903      	ldr	r1, [pc, #12]	; (800ae2c <USB_SIL_Init+0x18>)
  _SetISTR(0);
 800ae1e:	4c04      	ldr	r4, [pc, #16]	; (800ae30 <USB_SIL_Init+0x1c>)
  /* set interrupts mask */
  _SetCNTR(wInterrupt_Mask);
 800ae20:	4a04      	ldr	r2, [pc, #16]	; (800ae34 <USB_SIL_Init+0x20>)
  _SetISTR(0);
 800ae22:	6020      	str	r0, [r4, #0]
  wInterrupt_Mask = IMR_MSK;
 800ae24:	800b      	strh	r3, [r1, #0]
  OTG_DEV_Init();
  
#endif /* STM32F10X_CL */

  return 0;
}
 800ae26:	bc10      	pop	{r4}
  _SetCNTR(wInterrupt_Mask);
 800ae28:	6013      	str	r3, [r2, #0]
}
 800ae2a:	4770      	bx	lr
 800ae2c:	200014a4 	.word	0x200014a4
 800ae30:	40005c44 	.word	0x40005c44
 800ae34:	40005c40 	.word	0x40005c40

0800ae38 <USB_SIL_Read>:
*                     received data buffer.
* Output         : None.
* Return         : Number of received data (in Bytes).
*******************************************************************************/
uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
{
 800ae38:	b570      	push	{r4, r5, r6, lr}
  uint32_t DataLength = 0;

#ifndef STM32F10X_CL

  /* Get the number of received data on the selected Endpoint */
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 800ae3a:	f000 057f 	and.w	r5, r0, #127	; 0x7f
 800ae3e:	4628      	mov	r0, r5
{
 800ae40:	460e      	mov	r6, r1
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 800ae42:	f7ff ffd1 	bl	800ade8 <GetEPRxCount>
 800ae46:	4604      	mov	r4, r0
  
  /* Use the memory interface function to write to the selected endpoint */
  PMAToUserBufferCopy(pBufferPointer, GetEPRxAddr(bEpAddr & 0x7F), DataLength);
 800ae48:	4628      	mov	r0, r5
 800ae4a:	f7ff ff8f 	bl	800ad6c <GetEPRxAddr>
 800ae4e:	4622      	mov	r2, r4
 800ae50:	4601      	mov	r1, r0
 800ae52:	4630      	mov	r0, r6
 800ae54:	f7ff fea6 	bl	800aba4 <PMAToUserBufferCopy>
  
#endif /* STM32F10X_CL */

  /* Return the number of received data */
  return DataLength;
}
 800ae58:	4620      	mov	r0, r4
 800ae5a:	bd70      	pop	{r4, r5, r6, pc}

0800ae5c <Set_USBClock>:

/*******************************************************************************
 * Description    : Configures USB Clock input (48MHz)
 *******************************************************************************/
void Set_USBClock(void)
{
 800ae5c:	b508      	push	{r3, lr}
	/* Select USBCLK source */
	RCC_USBCLKConfig(RCC_USBCLKSource_PLLCLK_1Div5);
 800ae5e:	2000      	movs	r0, #0
 800ae60:	f7f6 fce4 	bl	800182c <RCC_USBCLKConfig>

	/* Enable the USB clock */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USB, ENABLE);
}
 800ae64:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USB, ENABLE);
 800ae68:	2101      	movs	r1, #1
 800ae6a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800ae6e:	f7f6 bd45 	b.w	80018fc <RCC_APB1PeriphClockCmd>
 800ae72:	bf00      	nop

0800ae74 <USB_Interrupts_Config>:

/*******************************************************************************
 * Description    : Configures the USB interrupts
 *******************************************************************************/
void USB_Interrupts_Config(void)
{
 800ae74:	b500      	push	{lr}
	NVIC_InitTypeDef NVIC_InitStructure;

	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
 800ae76:	f44f 60c0 	mov.w	r0, #1536	; 0x600
{
 800ae7a:	b083      	sub	sp, #12
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
 800ae7c:	f7f6 f93a 	bl	80010f4 <NVIC_PriorityGroupConfig>

	NVIC_InitStructure.NVIC_IRQChannel = USB_LP_CAN1_RX0_IRQn;
 800ae80:	4b04      	ldr	r3, [pc, #16]	; (800ae94 <USB_Interrupts_Config+0x20>)
 800ae82:	a802      	add	r0, sp, #8
 800ae84:	f840 3d04 	str.w	r3, [r0, #-4]!
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
 800ae88:	f7f6 f93e 	bl	8001108 <NVIC_Init>
}
 800ae8c:	b003      	add	sp, #12
 800ae8e:	f85d fb04 	ldr.w	pc, [sp], #4
 800ae92:	bf00      	nop
 800ae94:	01000114 	.word	0x01000114

0800ae98 <USB_Cable_Config>:

/*******************************************************************************
 * Description    : Software Connection/Disconnection of USB Cable
 *******************************************************************************/
void USB_Cable_Config(FunctionalState NewState)
{
 800ae98:	4770      	bx	lr
 800ae9a:	bf00      	nop

0800ae9c <Get_SerialNum>:
 *******************************************************************************/
void Get_SerialNum(void)
{
	uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

	Device_Serial0 = *(__IO uint32_t*) (0x1FFFF7E8);
 800ae9c:	4a3a      	ldr	r2, [pc, #232]	; (800af88 <Get_SerialNum+0xec>)
	Device_Serial1 = *(__IO uint32_t*) (0x1FFFF7EC);
 800ae9e:	493b      	ldr	r1, [pc, #236]	; (800af8c <Get_SerialNum+0xf0>)
	Device_Serial2 = *(__IO uint32_t*) (0x1FFFF7F0);
 800aea0:	4b3b      	ldr	r3, [pc, #236]	; (800af90 <Get_SerialNum+0xf4>)
	Device_Serial0 = *(__IO uint32_t*) (0x1FFFF7E8);
 800aea2:	6812      	ldr	r2, [r2, #0]
	Device_Serial1 = *(__IO uint32_t*) (0x1FFFF7EC);
 800aea4:	6809      	ldr	r1, [r1, #0]
	Device_Serial2 = *(__IO uint32_t*) (0x1FFFF7F0);
 800aea6:	681b      	ldr	r3, [r3, #0]

	Device_Serial0 += Device_Serial2;

	if (Device_Serial0 != 0)
 800aea8:	18d2      	adds	r2, r2, r3
 800aeaa:	d06c      	beq.n	800af86 <Get_SerialNum+0xea>
{
 800aeac:	b410      	push	{r4}
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
		}

		value = value << 4;

		pbuf[2 * idx + 1] = 0;
 800aeae:	2400      	movs	r4, #0
		if (((value >> 28)) < 0xA)
 800aeb0:	0f10      	lsrs	r0, r2, #28
			pbuf[2 * idx] = (value >> 28) + '0';
 800aeb2:	4b38      	ldr	r3, [pc, #224]	; (800af94 <Get_SerialNum+0xf8>)
		if (((value >> 28)) < 0xA)
 800aeb4:	2809      	cmp	r0, #9
			pbuf[2 * idx] = (value >> 28) + '0';
 800aeb6:	bf94      	ite	ls
 800aeb8:	3030      	addls	r0, #48	; 0x30
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800aeba:	3037      	addhi	r0, #55	; 0x37
 800aebc:	7098      	strb	r0, [r3, #2]
		if (((value >> 28)) < 0xA)
 800aebe:	f3c2 6003 	ubfx	r0, r2, #24, #4
 800aec2:	2809      	cmp	r0, #9
			pbuf[2 * idx] = (value >> 28) + '0';
 800aec4:	bf94      	ite	ls
 800aec6:	3030      	addls	r0, #48	; 0x30
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800aec8:	3037      	addhi	r0, #55	; 0x37
 800aeca:	7118      	strb	r0, [r3, #4]
		if (((value >> 28)) < 0xA)
 800aecc:	f3c2 5003 	ubfx	r0, r2, #20, #4
 800aed0:	2809      	cmp	r0, #9
			pbuf[2 * idx] = (value >> 28) + '0';
 800aed2:	bf94      	ite	ls
 800aed4:	3030      	addls	r0, #48	; 0x30
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800aed6:	3037      	addhi	r0, #55	; 0x37
 800aed8:	7198      	strb	r0, [r3, #6]
		if (((value >> 28)) < 0xA)
 800aeda:	f3c2 4003 	ubfx	r0, r2, #16, #4
 800aede:	2809      	cmp	r0, #9
			pbuf[2 * idx] = (value >> 28) + '0';
 800aee0:	bf94      	ite	ls
 800aee2:	3030      	addls	r0, #48	; 0x30
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800aee4:	3037      	addhi	r0, #55	; 0x37
 800aee6:	7218      	strb	r0, [r3, #8]
		if (((value >> 28)) < 0xA)
 800aee8:	f3c2 3003 	ubfx	r0, r2, #12, #4
 800aeec:	2809      	cmp	r0, #9
			pbuf[2 * idx] = (value >> 28) + '0';
 800aeee:	bf94      	ite	ls
 800aef0:	3030      	addls	r0, #48	; 0x30
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800aef2:	3037      	addhi	r0, #55	; 0x37
 800aef4:	7298      	strb	r0, [r3, #10]
		if (((value >> 28)) < 0xA)
 800aef6:	f3c2 2003 	ubfx	r0, r2, #8, #4
 800aefa:	2809      	cmp	r0, #9
			pbuf[2 * idx] = (value >> 28) + '0';
 800aefc:	bf94      	ite	ls
 800aefe:	3030      	addls	r0, #48	; 0x30
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800af00:	3037      	addhi	r0, #55	; 0x37
 800af02:	7318      	strb	r0, [r3, #12]
		if (((value >> 28)) < 0xA)
 800af04:	f3c2 1003 	ubfx	r0, r2, #4, #4
 800af08:	2809      	cmp	r0, #9
			pbuf[2 * idx] = (value >> 28) + '0';
 800af0a:	bf94      	ite	ls
 800af0c:	3030      	addls	r0, #48	; 0x30
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800af0e:	3037      	addhi	r0, #55	; 0x37
		pbuf[2 * idx + 1] = 0;
 800af10:	70dc      	strb	r4, [r3, #3]
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800af12:	7398      	strb	r0, [r3, #14]
		pbuf[2 * idx + 1] = 0;
 800af14:	2400      	movs	r4, #0
 800af16:	2000      	movs	r0, #0
 800af18:	715c      	strb	r4, [r3, #5]
 800af1a:	73d8      	strb	r0, [r3, #15]
 800af1c:	2400      	movs	r4, #0
 800af1e:	2000      	movs	r0, #0
 800af20:	71dc      	strb	r4, [r3, #7]
 800af22:	7458      	strb	r0, [r3, #17]
 800af24:	2400      	movs	r4, #0
 800af26:	2000      	movs	r0, #0
 800af28:	725c      	strb	r4, [r3, #9]
 800af2a:	74d8      	strb	r0, [r3, #19]
 800af2c:	2400      	movs	r4, #0
 800af2e:	2000      	movs	r0, #0
		if (((value >> 28)) < 0xA)
 800af30:	f002 020f 	and.w	r2, r2, #15
 800af34:	2a09      	cmp	r2, #9
			pbuf[2 * idx] = (value >> 28) + '0';
 800af36:	bf94      	ite	ls
 800af38:	3230      	addls	r2, #48	; 0x30
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800af3a:	3237      	addhi	r2, #55	; 0x37
 800af3c:	741a      	strb	r2, [r3, #16]
		if (((value >> 28)) < 0xA)
 800af3e:	0f0a      	lsrs	r2, r1, #28
 800af40:	2a09      	cmp	r2, #9
			pbuf[2 * idx] = (value >> 28) + '0';
 800af42:	bf94      	ite	ls
 800af44:	3230      	addls	r2, #48	; 0x30
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800af46:	3237      	addhi	r2, #55	; 0x37
 800af48:	749a      	strb	r2, [r3, #18]
		if (((value >> 28)) < 0xA)
 800af4a:	f3c1 6203 	ubfx	r2, r1, #24, #4
 800af4e:	2a09      	cmp	r2, #9
			pbuf[2 * idx] = (value >> 28) + '0';
 800af50:	bf94      	ite	ls
 800af52:	3230      	addls	r2, #48	; 0x30
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800af54:	3237      	addhi	r2, #55	; 0x37
 800af56:	751a      	strb	r2, [r3, #20]
		if (((value >> 28)) < 0xA)
 800af58:	f3c1 5203 	ubfx	r2, r1, #20, #4
 800af5c:	2a09      	cmp	r2, #9
			pbuf[2 * idx] = (value >> 28) + '0';
 800af5e:	bf94      	ite	ls
 800af60:	3230      	addls	r2, #48	; 0x30
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800af62:	3237      	addhi	r2, #55	; 0x37
 800af64:	759a      	strb	r2, [r3, #22]
		if (((value >> 28)) < 0xA)
 800af66:	f3c1 4203 	ubfx	r2, r1, #16, #4
 800af6a:	2a09      	cmp	r2, #9
			pbuf[2 * idx] = (value >> 28) + '0';
 800af6c:	bf94      	ite	ls
 800af6e:	3230      	addls	r2, #48	; 0x30
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800af70:	3237      	addhi	r2, #55	; 0x37
		pbuf[2 * idx + 1] = 0;
 800af72:	72dc      	strb	r4, [r3, #11]
 800af74:	7558      	strb	r0, [r3, #21]
 800af76:	2400      	movs	r4, #0
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800af78:	761a      	strb	r2, [r3, #24]
		pbuf[2 * idx + 1] = 0;
 800af7a:	2000      	movs	r0, #0
 800af7c:	2200      	movs	r2, #0
 800af7e:	735c      	strb	r4, [r3, #13]
 800af80:	75d8      	strb	r0, [r3, #23]
 800af82:	765a      	strb	r2, [r3, #25]
}
 800af84:	bc10      	pop	{r4}
 800af86:	4770      	bx	lr
 800af88:	1ffff7e8 	.word	0x1ffff7e8
 800af8c:	1ffff7ec 	.word	0x1ffff7ec
 800af90:	1ffff7f0 	.word	0x1ffff7f0
 800af94:	2000001c 	.word	0x2000001c

0800af98 <EP1_IN_Callback.part.0>:
	uint8_t head;

	if(_GetEPTxStatus(ENDP1) != EP_TX_NAK) return;
	txUsbLock = 1; // this may be removed, just make sure the local head variable save the serial_tx_buffer_head before doing condition check
	head = serial_tx_buffer_head;
	txUsbLock = 0; // this may be removed
 800af98:	2100      	movs	r1, #0
	txUsbLock = 1; // this may be removed, just make sure the local head variable save the serial_tx_buffer_head before doing condition check
 800af9a:	2001      	movs	r0, #1
void EP1_IN_Callback(void)
 800af9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	txUsbLock = 1; // this may be removed, just make sure the local head variable save the serial_tx_buffer_head before doing condition check
 800af9e:	4b2a      	ldr	r3, [pc, #168]	; (800b048 <EP1_IN_Callback.part.0+0xb0>)

	if ((head != serial_tx_buffer_tail)) {
 800afa0:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800b058 <EP1_IN_Callback.part.0+0xc0>
	head = serial_tx_buffer_head;
 800afa4:	4a29      	ldr	r2, [pc, #164]	; (800b04c <EP1_IN_Callback.part.0+0xb4>)
	txUsbLock = 1; // this may be removed, just make sure the local head variable save the serial_tx_buffer_head before doing condition check
 800afa6:	7018      	strb	r0, [r3, #0]
	txUsbLock = 0; // this may be removed
 800afa8:	7019      	strb	r1, [r3, #0]
	if ((head != serial_tx_buffer_tail)) {
 800afaa:	f89c 3000 	ldrb.w	r3, [ip]
	head = serial_tx_buffer_head;
 800afae:	7811      	ldrb	r1, [r2, #0]
	if ((head != serial_tx_buffer_tail)) {
 800afb0:	4299      	cmp	r1, r3
 800afb2:	d040      	beq.n	800b036 <EP1_IN_Callback.part.0+0x9e>
		if (head > serial_tx_buffer_tail)
 800afb4:	f89c 3000 	ldrb.w	r3, [ip]
 800afb8:	4299      	cmp	r1, r3
			USB_Tx_length = head - serial_tx_buffer_tail;
 800afba:	f89c 3000 	ldrb.w	r3, [ip]
		else
			USB_Tx_length = TX_BUFFER_SIZE - serial_tx_buffer_tail + head;
 800afbe:	bf98      	it	ls
 800afc0:	3180      	addls	r1, #128	; 0x80
 800afc2:	1ac9      	subs	r1, r1, r3
 800afc4:	b289      	uxth	r1, r1

		if (USB_Tx_length != 0) {
 800afc6:	2900      	cmp	r1, #0
 800afc8:	d035      	beq.n	800b036 <EP1_IN_Callback.part.0+0x9e>
 800afca:	2940      	cmp	r1, #64	; 0x40
				USB_Tx_length = 64;

			// UserToPMABufferCopy(&serial_tx_buffer[serial_tx_buffer_tail], ENDP1_TXADDR, USB_Tx_length);

			{
				uint8_t *pbUsrBuf = serial_tx_buffer + serial_tx_buffer_tail;
 800afcc:	4e20      	ldr	r6, [pc, #128]	; (800b050 <EP1_IN_Callback.part.0+0xb8>)
 800afce:	bf28      	it	cs
 800afd0:	2140      	movcs	r1, #64	; 0x40
				uint32_t n = (USB_Tx_length + 1) >> 1; /* n = (wNBytes + 1) / 2 */
				uint32_t i;
				uint16_t temp1;
				uint16_t *pdwVal= (uint16_t *)(ENDP1_TXADDR * 2 + PMAAddr);

				for (i = 0; i<n; i++) {
 800afd2:	2500      	movs	r5, #0
 800afd4:	4637      	mov	r7, r6
				uint8_t *pbUsrBuf = serial_tx_buffer + serial_tx_buffer_tail;
 800afd6:	f89c 2000 	ldrb.w	r2, [ip]
				uint32_t n = (USB_Tx_length + 1) >> 1; /* n = (wNBytes + 1) / 2 */
 800afda:	f101 0e01 	add.w	lr, r1, #1
 800afde:	4c1d      	ldr	r4, [pc, #116]	; (800b054 <EP1_IN_Callback.part.0+0xbc>)
 800afe0:	ea4f 0e6e 	mov.w	lr, lr, asr #1
				uint8_t *pbUsrBuf = serial_tx_buffer + serial_tx_buffer_tail;
 800afe4:	4432      	add	r2, r6
					temp1 = (uint16_t) *pbUsrBuf;
					pbUsrBuf++;
 800afe6:	1c53      	adds	r3, r2, #1
					if (pbUsrBuf - serial_tx_buffer == TX_BUFFER_SIZE)
 800afe8:	1b98      	subs	r0, r3, r6
						pbUsrBuf = serial_tx_buffer;

					*pdwVal++ = temp1 | (uint16_t) * pbUsrBuf << 8;
 800afea:	2880      	cmp	r0, #128	; 0x80
 800afec:	bf08      	it	eq
 800afee:	463b      	moveq	r3, r7
 800aff0:	7810      	ldrb	r0, [r2, #0]
 800aff2:	f813 2b01 	ldrb.w	r2, [r3], #1
				for (i = 0; i<n; i++) {
 800aff6:	3501      	adds	r5, #1
					*pdwVal++ = temp1 | (uint16_t) * pbUsrBuf << 8;
 800aff8:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
					pdwVal++;
					pbUsrBuf++;
					if (pbUsrBuf - serial_tx_buffer == TX_BUFFER_SIZE)
 800affc:	1b9a      	subs	r2, r3, r6
 800affe:	2a80      	cmp	r2, #128	; 0x80
 800b000:	bf14      	ite	ne
 800b002:	461a      	movne	r2, r3
 800b004:	463a      	moveq	r2, r7
				for (i = 0; i<n; i++) {
 800b006:	45ae      	cmp	lr, r5
					*pdwVal++ = temp1 | (uint16_t) * pbUsrBuf << 8;
 800b008:	f824 0c04 	strh.w	r0, [r4, #-4]
 800b00c:	f104 0404 	add.w	r4, r4, #4
				for (i = 0; i<n; i++) {
 800b010:	d8e9      	bhi.n	800afe6 <EP1_IN_Callback.part.0+0x4e>
						pbUsrBuf = serial_tx_buffer;
					}
			}

		serial_tx_buffer_tail += USB_Tx_length;
 800b012:	f89c 3000 	ldrb.w	r3, [ip]
 800b016:	440b      	add	r3, r1
 800b018:	b2db      	uxtb	r3, r3
 800b01a:	f88c 3000 	strb.w	r3, [ip]
		if (serial_tx_buffer_tail >= TX_BUFFER_SIZE)
 800b01e:	f89c 3000 	ldrb.w	r3, [ip]
 800b022:	061b      	lsls	r3, r3, #24
 800b024:	d408      	bmi.n	800b038 <EP1_IN_Callback.part.0+0xa0>
			serial_tx_buffer_tail -= TX_BUFFER_SIZE;
		SetEPTxCount(ENDP1, USB_Tx_length);
 800b026:	2001      	movs	r0, #1
 800b028:	f7ff feae 	bl	800ad88 <SetEPTxCount>
		SetEPTxValid(ENDP1);
		}
	}
}
 800b02c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		SetEPTxValid(ENDP1);
 800b030:	2001      	movs	r0, #1
 800b032:	f7ff be11 	b.w	800ac58 <SetEPTxValid>
 800b036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			serial_tx_buffer_tail -= TX_BUFFER_SIZE;
 800b038:	f89c 3000 	ldrb.w	r3, [ip]
 800b03c:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 800b040:	f88c 3000 	strb.w	r3, [ip]
 800b044:	e7ef      	b.n	800b026 <EP1_IN_Callback.part.0+0x8e>
 800b046:	bf00      	nop
 800b048:	20000c24 	.word	0x20000c24
 800b04c:	20000a70 	.word	0x20000a70
 800b050:	20001204 	.word	0x20001204
 800b054:	40006184 	.word	0x40006184
 800b058:	20000a71 	.word	0x20000a71

0800b05c <EP3_OUT_Callback>:
{
 800b05c:	b510      	push	{r4, lr}
	USB_Rx_Cnt = USB_SIL_Read(EP3_OUT, USB_Rx_Buffer);
 800b05e:	4c07      	ldr	r4, [pc, #28]	; (800b07c <EP3_OUT_Callback+0x20>)
 800b060:	2003      	movs	r0, #3
 800b062:	4621      	mov	r1, r4
 800b064:	f7ff fee8 	bl	800ae38 <USB_SIL_Read>
	OnUsbDataRx(USB_Rx_Buffer, USB_Rx_Cnt);
 800b068:	b2c1      	uxtb	r1, r0
 800b06a:	4620      	mov	r0, r4
 800b06c:	f7fc fb7c 	bl	8007768 <OnUsbDataRx>
}
 800b070:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	SetEPRxValid(ENDP3);
 800b074:	2003      	movs	r0, #3
 800b076:	f7ff be03 	b.w	800ac80 <SetEPRxValid>
 800b07a:	bf00      	nop
 800b07c:	200014ac 	.word	0x200014ac

0800b080 <EP1_IN_Callback>:
	if(_GetEPTxStatus(ENDP1) != EP_TX_NAK) return;
 800b080:	4b04      	ldr	r3, [pc, #16]	; (800b094 <EP1_IN_Callback+0x14>)
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b088:	2b20      	cmp	r3, #32
 800b08a:	d000      	beq.n	800b08e <EP1_IN_Callback+0xe>
 800b08c:	4770      	bx	lr
 800b08e:	f7ff bf83 	b.w	800af98 <EP1_IN_Callback.part.0>
 800b092:	bf00      	nop
 800b094:	40005c04 	.word	0x40005c04

0800b098 <SOF_Callback>:

/*	\brief Start Of Frame (SOF) callback
 */
void SOF_Callback(void)
{
	if(bDeviceState == CONFIGURED)
 800b098:	4b06      	ldr	r3, [pc, #24]	; (800b0b4 <SOF_Callback+0x1c>)
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	2b05      	cmp	r3, #5
 800b09e:	d000      	beq.n	800b0a2 <SOF_Callback+0xa>
 800b0a0:	4770      	bx	lr
	if(_GetEPTxStatus(ENDP1) != EP_TX_NAK) return;
 800b0a2:	4b05      	ldr	r3, [pc, #20]	; (800b0b8 <SOF_Callback+0x20>)
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b0aa:	2b20      	cmp	r3, #32
 800b0ac:	d1f8      	bne.n	800b0a0 <SOF_Callback+0x8>
 800b0ae:	f7ff bf73 	b.w	800af98 <EP1_IN_Callback.part.0>
 800b0b2:	bf00      	nop
 800b0b4:	20000c28 	.word	0x20000c28
 800b0b8:	40005c04 	.word	0x40005c04

0800b0bc <USB_Istr>:
* Return         :
*******************************************************************************/
void USB_Istr(void)
{

  wIstr = _GetISTR();
 800b0bc:	4917      	ldr	r1, [pc, #92]	; (800b11c <USB_Istr+0x60>)
{
 800b0be:	b570      	push	{r4, r5, r6, lr}
  wIstr = _GetISTR();
 800b0c0:	680b      	ldr	r3, [r1, #0]
 800b0c2:	4c17      	ldr	r4, [pc, #92]	; (800b120 <USB_Istr+0x64>)
 800b0c4:	b29b      	uxth	r3, r3

#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 800b0c6:	4d17      	ldr	r5, [pc, #92]	; (800b124 <USB_Istr+0x68>)
  wIstr = _GetISTR();
 800b0c8:	8023      	strh	r3, [r4, #0]
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 800b0ca:	8822      	ldrh	r2, [r4, #0]
 800b0cc:	882b      	ldrh	r3, [r5, #0]
 800b0ce:	401a      	ands	r2, r3
 800b0d0:	0590      	lsls	r0, r2, #22
 800b0d2:	d416      	bmi.n	800b102 <USB_Istr+0x46>
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
  
#if (IMR_MSK & ISTR_CTR)
  if (wIstr & ISTR_CTR & wInterrupt_Mask)
 800b0d4:	8822      	ldrh	r2, [r4, #0]
 800b0d6:	401a      	ands	r2, r3
 800b0d8:	0412      	lsls	r2, r2, #16
 800b0da:	d40e      	bmi.n	800b0fa <USB_Istr+0x3e>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
#if (IMR_MSK & ISTR_RESET)
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
 800b0dc:	8822      	ldrh	r2, [r4, #0]
 800b0de:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 800b0e2:	4213      	tst	r3, r2
 800b0e4:	d100      	bne.n	800b0e8 <USB_Istr+0x2c>
 800b0e6:	bd70      	pop	{r4, r5, r6, pc}
  {
    _SetISTR((uint16_t)CLR_RESET);
 800b0e8:	f64f 31ff 	movw	r1, #64511	; 0xfbff
#ifdef ESOF_CALLBACK
    ESOF_Callback();
#endif
  }
#endif
} /* USB_Istr */
 800b0ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    _SetISTR((uint16_t)CLR_RESET);
 800b0f0:	4a0a      	ldr	r2, [pc, #40]	; (800b11c <USB_Istr+0x60>)
    Device_Property.Reset();
 800b0f2:	4b0d      	ldr	r3, [pc, #52]	; (800b128 <USB_Istr+0x6c>)
    _SetISTR((uint16_t)CLR_RESET);
 800b0f4:	6011      	str	r1, [r2, #0]
    Device_Property.Reset();
 800b0f6:	685b      	ldr	r3, [r3, #4]
 800b0f8:	4718      	bx	r3
    CTR_LP();
 800b0fa:	f7ff fc7f 	bl	800a9fc <CTR_LP>
 800b0fe:	882b      	ldrh	r3, [r5, #0]
 800b100:	e7ec      	b.n	800b0dc <USB_Istr+0x20>
    _SetISTR((uint16_t)CLR_SOF);
 800b102:	f64f 53ff 	movw	r3, #65023	; 0xfdff
    bIntPackSOF++;
 800b106:	4a09      	ldr	r2, [pc, #36]	; (800b12c <USB_Istr+0x70>)
    _SetISTR((uint16_t)CLR_SOF);
 800b108:	600b      	str	r3, [r1, #0]
    bIntPackSOF++;
 800b10a:	7813      	ldrb	r3, [r2, #0]
 800b10c:	3301      	adds	r3, #1
 800b10e:	b2db      	uxtb	r3, r3
 800b110:	7013      	strb	r3, [r2, #0]
    SOF_Callback();
 800b112:	f7ff ffc1 	bl	800b098 <SOF_Callback>
 800b116:	882b      	ldrh	r3, [r5, #0]
 800b118:	e7dc      	b.n	800b0d4 <USB_Istr+0x18>
 800b11a:	bf00      	nop
 800b11c:	40005c44 	.word	0x40005c44
 800b120:	200014ec 	.word	0x200014ec
 800b124:	200014a4 	.word	0x200014a4
 800b128:	20000080 	.word	0x20000080
 800b12c:	20000c25 	.word	0x20000c25

0800b130 <Virtual_Com_Port_SetConfiguration>:
*******************************************************************************/
void Virtual_Com_Port_SetConfiguration(void)
{
  DEVICE_INFO *pInfo = &Device_Info;

  if (pInfo->Current_Configuration != 0)
 800b130:	4b03      	ldr	r3, [pc, #12]	; (800b140 <Virtual_Com_Port_SetConfiguration+0x10>)
 800b132:	7a9b      	ldrb	r3, [r3, #10]
 800b134:	b113      	cbz	r3, 800b13c <Virtual_Com_Port_SetConfiguration+0xc>
  {
    /* Device configured */
    bDeviceState = CONFIGURED;
 800b136:	2205      	movs	r2, #5
 800b138:	4b02      	ldr	r3, [pc, #8]	; (800b144 <Virtual_Com_Port_SetConfiguration+0x14>)
 800b13a:	601a      	str	r2, [r3, #0]
 800b13c:	4770      	bx	lr
 800b13e:	bf00      	nop
 800b140:	20001480 	.word	0x20001480
 800b144:	20000c28 	.word	0x20000c28

0800b148 <Virtual_Com_Port_SetDeviceAddress>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_SetDeviceAddress (void)
{
  bDeviceState = ADDRESSED;
 800b148:	2204      	movs	r2, #4
 800b14a:	4b01      	ldr	r3, [pc, #4]	; (800b150 <Virtual_Com_Port_SetDeviceAddress+0x8>)
 800b14c:	601a      	str	r2, [r3, #0]
 800b14e:	4770      	bx	lr
 800b150:	20000c28 	.word	0x20000c28

0800b154 <Virtual_Com_Port_Status_In>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Status_In(void)
{
  if (Request == SET_LINE_CODING)
 800b154:	4b03      	ldr	r3, [pc, #12]	; (800b164 <Virtual_Com_Port_Status_In+0x10>)
 800b156:	781a      	ldrb	r2, [r3, #0]
 800b158:	2a20      	cmp	r2, #32
  {
    Request = 0;
 800b15a:	bf04      	itt	eq
 800b15c:	2200      	moveq	r2, #0
 800b15e:	701a      	strbeq	r2, [r3, #0]
 800b160:	4770      	bx	lr
 800b162:	bf00      	nop
 800b164:	20000c26 	.word	0x20000c26

0800b168 <Virtual_Com_Port_Status_Out>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Status_Out(void)
{}
 800b168:	4770      	bx	lr
 800b16a:	bf00      	nop

0800b16c <Virtual_Com_Port_Data_Setup>:
{
  uint8_t    *(*CopyRoutine)(uint16_t);

  CopyRoutine = NULL;

  if (RequestNo == GET_LINE_CODING)
 800b16c:	2821      	cmp	r0, #33	; 0x21
 800b16e:	d004      	beq.n	800b17a <Virtual_Com_Port_Data_Setup+0xe>
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
    }
  }
  else if (RequestNo == SET_LINE_CODING)
 800b170:	2820      	cmp	r0, #32
 800b172:	4603      	mov	r3, r0
 800b174:	d011      	beq.n	800b19a <Virtual_Com_Port_Data_Setup+0x2e>
    Request = SET_LINE_CODING;
  }

  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
 800b176:	2002      	movs	r0, #2
 800b178:	4770      	bx	lr
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 800b17a:	4b0f      	ldr	r3, [pc, #60]	; (800b1b8 <Virtual_Com_Port_Data_Setup+0x4c>)
 800b17c:	681a      	ldr	r2, [r3, #0]
 800b17e:	7813      	ldrb	r3, [r2, #0]
 800b180:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b184:	2b21      	cmp	r3, #33	; 0x21
 800b186:	d1f6      	bne.n	800b176 <Virtual_Com_Port_Data_Setup+0xa>
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
 800b188:	490c      	ldr	r1, [pc, #48]	; (800b1bc <Virtual_Com_Port_Data_Setup+0x50>)
{
 800b18a:	b510      	push	{r4, lr}
  }

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
  pInformation->Ctrl_Info.Usb_wOffset = 0;
 800b18c:	2400      	movs	r4, #0
  pInformation->Ctrl_Info.CopyData = CopyRoutine;
 800b18e:	6191      	str	r1, [r2, #24]
  pInformation->Ctrl_Info.Usb_wOffset = 0;
 800b190:	8254      	strh	r4, [r2, #18]
  (*CopyRoutine)(0);
 800b192:	4620      	mov	r0, r4
 800b194:	4788      	blx	r1
  return USB_SUCCESS;
 800b196:	4620      	mov	r0, r4
 800b198:	bd10      	pop	{r4, pc}
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 800b19a:	4a07      	ldr	r2, [pc, #28]	; (800b1b8 <Virtual_Com_Port_Data_Setup+0x4c>)
 800b19c:	6812      	ldr	r2, [r2, #0]
 800b19e:	7811      	ldrb	r1, [r2, #0]
 800b1a0:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800b1a4:	2921      	cmp	r1, #33	; 0x21
 800b1a6:	d003      	beq.n	800b1b0 <Virtual_Com_Port_Data_Setup+0x44>
    Request = SET_LINE_CODING;
 800b1a8:	4a05      	ldr	r2, [pc, #20]	; (800b1c0 <Virtual_Com_Port_Data_Setup+0x54>)
    return USB_UNSUPPORT;
 800b1aa:	2002      	movs	r0, #2
    Request = SET_LINE_CODING;
 800b1ac:	7013      	strb	r3, [r2, #0]
 800b1ae:	4770      	bx	lr
 800b1b0:	4803      	ldr	r0, [pc, #12]	; (800b1c0 <Virtual_Com_Port_Data_Setup+0x54>)
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
 800b1b2:	4904      	ldr	r1, [pc, #16]	; (800b1c4 <Virtual_Com_Port_Data_Setup+0x58>)
    Request = SET_LINE_CODING;
 800b1b4:	7003      	strb	r3, [r0, #0]
 800b1b6:	e7e8      	b.n	800b18a <Virtual_Com_Port_Data_Setup+0x1e>
 800b1b8:	200014a0 	.word	0x200014a0
 800b1bc:	0800b351 	.word	0x0800b351
 800b1c0:	20000c26 	.word	0x20000c26
 800b1c4:	0800b1fd 	.word	0x0800b1fd

0800b1c8 <Virtual_Com_Port_NoData_Setup>:
* Return         : USB_UNSUPPORT or USB_SUCCESS.
*******************************************************************************/
RESULT Virtual_Com_Port_NoData_Setup(uint8_t RequestNo)
{

  if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 800b1c8:	4b07      	ldr	r3, [pc, #28]	; (800b1e8 <Virtual_Com_Port_NoData_Setup+0x20>)
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	781b      	ldrb	r3, [r3, #0]
 800b1ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b1d2:	2b21      	cmp	r3, #33	; 0x21
 800b1d4:	d001      	beq.n	800b1da <Virtual_Com_Port_NoData_Setup+0x12>
    {
      return USB_SUCCESS;
    }
  }

  return USB_UNSUPPORT;
 800b1d6:	2002      	movs	r0, #2
}
 800b1d8:	4770      	bx	lr
    if (RequestNo == SET_COMM_FEATURE)
 800b1da:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800b1de:	2802      	cmp	r0, #2
      return USB_SUCCESS;
 800b1e0:	bf14      	ite	ne
 800b1e2:	2002      	movne	r0, #2
 800b1e4:	2000      	moveq	r0, #0
 800b1e6:	4770      	bx	lr
 800b1e8:	200014a0 	.word	0x200014a0

0800b1ec <Virtual_Com_Port_Get_Interface_Setting>:
* Output         : None.
* Return         : The address of the string descriptors.
*******************************************************************************/
RESULT Virtual_Com_Port_Get_Interface_Setting(uint8_t Interface, uint8_t AlternateSetting)
{
  if (AlternateSetting > 0)
 800b1ec:	b109      	cbz	r1, 800b1f2 <Virtual_Com_Port_Get_Interface_Setting+0x6>
  {
    return USB_UNSUPPORT;
 800b1ee:	2002      	movs	r0, #2
  else if (Interface > 1)
  {
    return USB_UNSUPPORT;
  }
  return USB_SUCCESS;
}
 800b1f0:	4770      	bx	lr
  else if (Interface > 1)
 800b1f2:	2801      	cmp	r0, #1
  return USB_SUCCESS;
 800b1f4:	bf8c      	ite	hi
 800b1f6:	2002      	movhi	r0, #2
 800b1f8:	2000      	movls	r0, #0
 800b1fa:	4770      	bx	lr

0800b1fc <Virtual_Com_Port_SetLineCoding>:
* Output         : None.
* Return         : Linecoding structure base address.
*******************************************************************************/
uint8_t *Virtual_Com_Port_SetLineCoding(uint16_t Length)
{
  if (Length == 0)
 800b1fc:	b108      	cbz	r0, 800b202 <Virtual_Com_Port_SetLineCoding+0x6>
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
    return NULL;
  }
  return(uint8_t *)&linecoding;
 800b1fe:	4803      	ldr	r0, [pc, #12]	; (800b20c <Virtual_Com_Port_SetLineCoding+0x10>)
}
 800b200:	4770      	bx	lr
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
 800b202:	2208      	movs	r2, #8
 800b204:	4b02      	ldr	r3, [pc, #8]	; (800b210 <Virtual_Com_Port_SetLineCoding+0x14>)
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	821a      	strh	r2, [r3, #16]
    return NULL;
 800b20a:	4770      	bx	lr
 800b20c:	200000f8 	.word	0x200000f8
 800b210:	200014a0 	.word	0x200014a0

0800b214 <Virtual_Com_Port_init>:
{
 800b214:	b510      	push	{r4, lr}
  pInformation->Current_Configuration = 0;
 800b216:	2400      	movs	r4, #0
  Get_SerialNum();
 800b218:	f7ff fe40 	bl	800ae9c <Get_SerialNum>
  pInformation->Current_Configuration = 0;
 800b21c:	4b04      	ldr	r3, [pc, #16]	; (800b230 <Virtual_Com_Port_init+0x1c>)
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	729c      	strb	r4, [r3, #10]
  PowerOn();
 800b222:	f000 f8a1 	bl	800b368 <PowerOn>
  USB_SIL_Init();
 800b226:	f7ff fdf5 	bl	800ae14 <USB_SIL_Init>
  bDeviceState = UNCONNECTED;
 800b22a:	4b02      	ldr	r3, [pc, #8]	; (800b234 <Virtual_Com_Port_init+0x20>)
 800b22c:	601c      	str	r4, [r3, #0]
 800b22e:	bd10      	pop	{r4, pc}
 800b230:	200014a0 	.word	0x200014a0
 800b234:	20000c28 	.word	0x20000c28

0800b238 <Virtual_Com_Port_Reset>:
{
 800b238:	b510      	push	{r4, lr}
  pInformation->Current_Configuration = 0;
 800b23a:	2400      	movs	r4, #0
 800b23c:	4b32      	ldr	r3, [pc, #200]	; (800b308 <Virtual_Com_Port_Reset+0xd0>)
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 800b23e:	4a33      	ldr	r2, [pc, #204]	; (800b30c <Virtual_Com_Port_Reset+0xd4>)
  pInformation->Current_Configuration = 0;
 800b240:	681b      	ldr	r3, [r3, #0]
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 800b242:	79d2      	ldrb	r2, [r2, #7]
  pInformation->Current_Configuration = 0;
 800b244:	729c      	strb	r4, [r3, #10]
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 800b246:	725a      	strb	r2, [r3, #9]
  pInformation->Current_Interface = 0;
 800b248:	72dc      	strb	r4, [r3, #11]
  SetBTABLE(BTABLE_ADDRESS);
 800b24a:	4620      	mov	r0, r4
 800b24c:	f7ff fcba 	bl	800abc4 <SetBTABLE>
  SetEPType(ENDP0, EP_CONTROL);
 800b250:	4620      	mov	r0, r4
 800b252:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b256:	f7ff fcbd 	bl	800abd4 <SetEPType>
  SetEPTxStatus(ENDP0, EP_TX_STALL);
 800b25a:	4620      	mov	r0, r4
 800b25c:	2110      	movs	r1, #16
 800b25e:	f7ff fcc7 	bl	800abf0 <SetEPTxStatus>
  SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 800b262:	4620      	mov	r0, r4
 800b264:	2140      	movs	r1, #64	; 0x40
 800b266:	f7ff fd63 	bl	800ad30 <SetEPRxAddr>
  SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 800b26a:	2180      	movs	r1, #128	; 0x80
 800b26c:	4620      	mov	r0, r4
 800b26e:	f7ff fd4f 	bl	800ad10 <SetEPTxAddr>
  Clear_Status_Out(ENDP0);
 800b272:	4620      	mov	r0, r4
 800b274:	f7ff fd18 	bl	800aca8 <Clear_Status_Out>
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 800b278:	4b25      	ldr	r3, [pc, #148]	; (800b310 <Virtual_Com_Port_Reset+0xd8>)
 800b27a:	4620      	mov	r0, r4
 800b27c:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 800b280:	f7ff fd90 	bl	800ada4 <SetEPRxCount>
  SetEPRxValid(ENDP0);
 800b284:	4620      	mov	r0, r4
 800b286:	f7ff fcfb 	bl	800ac80 <SetEPRxValid>
  SetEPType(ENDP1, EP_BULK);
 800b28a:	4621      	mov	r1, r4
 800b28c:	2001      	movs	r0, #1
 800b28e:	f7ff fca1 	bl	800abd4 <SetEPType>
  SetEPTxAddr(ENDP1, ENDP1_TXADDR);
 800b292:	21c0      	movs	r1, #192	; 0xc0
 800b294:	2001      	movs	r0, #1
 800b296:	f7ff fd3b 	bl	800ad10 <SetEPTxAddr>
  SetEPTxStatus(ENDP1, EP_TX_NAK);
 800b29a:	2120      	movs	r1, #32
 800b29c:	2001      	movs	r0, #1
 800b29e:	f7ff fca7 	bl	800abf0 <SetEPTxStatus>
  SetEPRxStatus(ENDP1, EP_RX_DIS);
 800b2a2:	4621      	mov	r1, r4
 800b2a4:	2001      	movs	r0, #1
 800b2a6:	f7ff fcbd 	bl	800ac24 <SetEPRxStatus>
  SetEPType(ENDP2, EP_INTERRUPT);
 800b2aa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800b2ae:	2002      	movs	r0, #2
 800b2b0:	f7ff fc90 	bl	800abd4 <SetEPType>
  SetEPTxAddr(ENDP2, ENDP2_TXADDR);
 800b2b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b2b8:	2002      	movs	r0, #2
 800b2ba:	f7ff fd29 	bl	800ad10 <SetEPTxAddr>
  SetEPRxStatus(ENDP2, EP_RX_DIS);
 800b2be:	4621      	mov	r1, r4
 800b2c0:	2002      	movs	r0, #2
 800b2c2:	f7ff fcaf 	bl	800ac24 <SetEPRxStatus>
  SetEPTxStatus(ENDP2, EP_TX_NAK);
 800b2c6:	2120      	movs	r1, #32
 800b2c8:	2002      	movs	r0, #2
 800b2ca:	f7ff fc91 	bl	800abf0 <SetEPTxStatus>
  SetEPType(ENDP3, EP_BULK);
 800b2ce:	4621      	mov	r1, r4
 800b2d0:	2003      	movs	r0, #3
 800b2d2:	f7ff fc7f 	bl	800abd4 <SetEPType>
  SetEPRxAddr(ENDP3, ENDP3_RXADDR);
 800b2d6:	f44f 7188 	mov.w	r1, #272	; 0x110
 800b2da:	2003      	movs	r0, #3
 800b2dc:	f7ff fd28 	bl	800ad30 <SetEPRxAddr>
  SetEPRxCount(ENDP3, VIRTUAL_COM_PORT_DATA_SIZE);
 800b2e0:	2140      	movs	r1, #64	; 0x40
 800b2e2:	2003      	movs	r0, #3
 800b2e4:	f7ff fd5e 	bl	800ada4 <SetEPRxCount>
  SetEPRxStatus(ENDP3, EP_RX_VALID);
 800b2e8:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800b2ec:	2003      	movs	r0, #3
 800b2ee:	f7ff fc99 	bl	800ac24 <SetEPRxStatus>
  SetEPTxStatus(ENDP3, EP_TX_DIS);
 800b2f2:	4621      	mov	r1, r4
 800b2f4:	2003      	movs	r0, #3
 800b2f6:	f7ff fc7b 	bl	800abf0 <SetEPTxStatus>
  SetDeviceAddress(0);
 800b2fa:	4620      	mov	r0, r4
 800b2fc:	f7ff fb40 	bl	800a980 <SetDeviceAddress>
  bDeviceState = ATTACHED;
 800b300:	2201      	movs	r2, #1
 800b302:	4b04      	ldr	r3, [pc, #16]	; (800b314 <Virtual_Com_Port_Reset+0xdc>)
 800b304:	601a      	str	r2, [r3, #0]
 800b306:	bd10      	pop	{r4, pc}
 800b308:	200014a0 	.word	0x200014a0
 800b30c:	0800c890 	.word	0x0800c890
 800b310:	20000080 	.word	0x20000080
 800b314:	20000c28 	.word	0x20000c28

0800b318 <Virtual_Com_Port_GetDeviceDescriptor>:
  return Standard_GetDescriptorData(Length, &Device_Descriptor);
 800b318:	4901      	ldr	r1, [pc, #4]	; (800b320 <Virtual_Com_Port_GetDeviceDescriptor+0x8>)
 800b31a:	f7ff b837 	b.w	800a38c <Standard_GetDescriptorData>
 800b31e:	bf00      	nop
 800b320:	20000078 	.word	0x20000078

0800b324 <Virtual_Com_Port_GetConfigDescriptor>:
  return Standard_GetDescriptorData(Length, &Config_Descriptor);
 800b324:	4901      	ldr	r1, [pc, #4]	; (800b32c <Virtual_Com_Port_GetConfigDescriptor+0x8>)
 800b326:	f7ff b831 	b.w	800a38c <Standard_GetDescriptorData>
 800b32a:	bf00      	nop
 800b32c:	20000070 	.word	0x20000070

0800b330 <Virtual_Com_Port_GetStringDescriptor>:
  uint8_t wValue0 = pInformation->USBwValue0;
 800b330:	4b05      	ldr	r3, [pc, #20]	; (800b348 <Virtual_Com_Port_GetStringDescriptor+0x18>)
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	78db      	ldrb	r3, [r3, #3]
  if (wValue0 > 4)
 800b336:	2b04      	cmp	r3, #4
 800b338:	d804      	bhi.n	800b344 <Virtual_Com_Port_GetStringDescriptor+0x14>
    return Standard_GetDescriptorData(Length, &String_Descriptor[wValue0]);
 800b33a:	4904      	ldr	r1, [pc, #16]	; (800b34c <Virtual_Com_Port_GetStringDescriptor+0x1c>)
 800b33c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b340:	f7ff b824 	b.w	800a38c <Standard_GetDescriptorData>
}
 800b344:	2000      	movs	r0, #0
 800b346:	4770      	bx	lr
 800b348:	200014a0 	.word	0x200014a0
 800b34c:	200000b4 	.word	0x200000b4

0800b350 <Virtual_Com_Port_GetLineCoding>:
 800b350:	b108      	cbz	r0, 800b356 <Virtual_Com_Port_GetLineCoding+0x6>
 800b352:	4803      	ldr	r0, [pc, #12]	; (800b360 <Virtual_Com_Port_GetLineCoding+0x10>)
 800b354:	4770      	bx	lr
 800b356:	2208      	movs	r2, #8
 800b358:	4b02      	ldr	r3, [pc, #8]	; (800b364 <Virtual_Com_Port_GetLineCoding+0x14>)
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	821a      	strh	r2, [r3, #16]
 800b35e:	4770      	bx	lr
 800b360:	200000f8 	.word	0x200000f8
 800b364:	200014a0 	.word	0x200014a0

0800b368 <PowerOn>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
RESULT PowerOn(void)
{
 800b368:	b538      	push	{r3, r4, r5, lr}
#ifndef STM32F10X_CL
  uint16_t wRegVal;

  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);
 800b36a:	2001      	movs	r0, #1
 800b36c:	f7ff fd94 	bl	800ae98 <USB_Cable_Config>
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
 800b370:	2200      	movs	r2, #0
  /*** Clear pending interrupts ***/
  _SetISTR(0);
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 800b372:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
  _SetCNTR(wRegVal);
 800b376:	2001      	movs	r0, #1
 800b378:	4b04      	ldr	r3, [pc, #16]	; (800b38c <PowerOn+0x24>)
  _SetISTR(0);
 800b37a:	4d05      	ldr	r5, [pc, #20]	; (800b390 <PowerOn+0x28>)
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 800b37c:	4c05      	ldr	r4, [pc, #20]	; (800b394 <PowerOn+0x2c>)
  _SetCNTR(wRegVal);
 800b37e:	6018      	str	r0, [r3, #0]
  _SetCNTR(wInterrupt_Mask);
 800b380:	601a      	str	r2, [r3, #0]
  _SetCNTR(wInterrupt_Mask);
#endif /* STM32F10X_CL */

  return USB_SUCCESS;
}
 800b382:	4610      	mov	r0, r2
  _SetISTR(0);
 800b384:	602a      	str	r2, [r5, #0]
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 800b386:	8021      	strh	r1, [r4, #0]
  _SetCNTR(wInterrupt_Mask);
 800b388:	6019      	str	r1, [r3, #0]
}
 800b38a:	bd38      	pop	{r3, r4, r5, pc}
 800b38c:	40005c40 	.word	0x40005c40
 800b390:	40005c44 	.word	0x40005c44
 800b394:	200014a4 	.word	0x200014a4

0800b398 <NMI_Handler>:
 800b398:	4770      	bx	lr
 800b39a:	bf00      	nop

0800b39c <HardFault_Handler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void HardFault_Handler(void)
{
 800b39c:	e7fe      	b.n	800b39c <HardFault_Handler>
 800b39e:	bf00      	nop

0800b3a0 <MemManage_Handler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void MemManage_Handler(void)
{
 800b3a0:	e7fe      	b.n	800b3a0 <MemManage_Handler>
 800b3a2:	bf00      	nop

0800b3a4 <BusFault_Handler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void BusFault_Handler(void)
{
 800b3a4:	e7fe      	b.n	800b3a4 <BusFault_Handler>
 800b3a6:	bf00      	nop

0800b3a8 <UsageFault_Handler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void UsageFault_Handler(void)
{
 800b3a8:	e7fe      	b.n	800b3a8 <UsageFault_Handler>
 800b3aa:	bf00      	nop

0800b3ac <SVC_Handler>:
 800b3ac:	4770      	bx	lr
 800b3ae:	bf00      	nop

0800b3b0 <DebugMon_Handler>:
 800b3b0:	4770      	bx	lr
 800b3b2:	bf00      	nop

0800b3b4 <PendSV_Handler>:
 800b3b4:	4770      	bx	lr
 800b3b6:	bf00      	nop

0800b3b8 <USB_LP_CAN1_RX0_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  USB_Istr();
 800b3b8:	f7ff be80 	b.w	800b0bc <USB_Istr>

0800b3bc <__libc_init_array>:
 800b3bc:	b570      	push	{r4, r5, r6, lr}
 800b3be:	2500      	movs	r5, #0
 800b3c0:	4e0c      	ldr	r6, [pc, #48]	; (800b3f4 <__libc_init_array+0x38>)
 800b3c2:	4c0d      	ldr	r4, [pc, #52]	; (800b3f8 <__libc_init_array+0x3c>)
 800b3c4:	1ba4      	subs	r4, r4, r6
 800b3c6:	10a4      	asrs	r4, r4, #2
 800b3c8:	42a5      	cmp	r5, r4
 800b3ca:	d109      	bne.n	800b3e0 <__libc_init_array+0x24>
 800b3cc:	f001 f92e 	bl	800c62c <_init>
 800b3d0:	2500      	movs	r5, #0
 800b3d2:	4e0a      	ldr	r6, [pc, #40]	; (800b3fc <__libc_init_array+0x40>)
 800b3d4:	4c0a      	ldr	r4, [pc, #40]	; (800b400 <__libc_init_array+0x44>)
 800b3d6:	1ba4      	subs	r4, r4, r6
 800b3d8:	10a4      	asrs	r4, r4, #2
 800b3da:	42a5      	cmp	r5, r4
 800b3dc:	d105      	bne.n	800b3ea <__libc_init_array+0x2e>
 800b3de:	bd70      	pop	{r4, r5, r6, pc}
 800b3e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b3e4:	4798      	blx	r3
 800b3e6:	3501      	adds	r5, #1
 800b3e8:	e7ee      	b.n	800b3c8 <__libc_init_array+0xc>
 800b3ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b3ee:	4798      	blx	r3
 800b3f0:	3501      	adds	r5, #1
 800b3f2:	e7f2      	b.n	800b3da <__libc_init_array+0x1e>
 800b3f4:	0800cd3c 	.word	0x0800cd3c
 800b3f8:	0800cd3c 	.word	0x0800cd3c
 800b3fc:	0800cd3c 	.word	0x0800cd3c
 800b400:	0800cd40 	.word	0x0800cd40

0800b404 <__itoa>:
 800b404:	1e93      	subs	r3, r2, #2
 800b406:	2b22      	cmp	r3, #34	; 0x22
 800b408:	b510      	push	{r4, lr}
 800b40a:	460c      	mov	r4, r1
 800b40c:	d904      	bls.n	800b418 <__itoa+0x14>
 800b40e:	2300      	movs	r3, #0
 800b410:	461c      	mov	r4, r3
 800b412:	700b      	strb	r3, [r1, #0]
 800b414:	4620      	mov	r0, r4
 800b416:	bd10      	pop	{r4, pc}
 800b418:	2a0a      	cmp	r2, #10
 800b41a:	d109      	bne.n	800b430 <__itoa+0x2c>
 800b41c:	2800      	cmp	r0, #0
 800b41e:	da07      	bge.n	800b430 <__itoa+0x2c>
 800b420:	232d      	movs	r3, #45	; 0x2d
 800b422:	700b      	strb	r3, [r1, #0]
 800b424:	2101      	movs	r1, #1
 800b426:	4240      	negs	r0, r0
 800b428:	4421      	add	r1, r4
 800b42a:	f000 f81d 	bl	800b468 <__utoa>
 800b42e:	e7f1      	b.n	800b414 <__itoa+0x10>
 800b430:	2100      	movs	r1, #0
 800b432:	e7f9      	b.n	800b428 <__itoa+0x24>

0800b434 <itoa>:
 800b434:	f7ff bfe6 	b.w	800b404 <__itoa>

0800b438 <memcmp>:
 800b438:	b510      	push	{r4, lr}
 800b43a:	3901      	subs	r1, #1
 800b43c:	4402      	add	r2, r0
 800b43e:	4290      	cmp	r0, r2
 800b440:	d101      	bne.n	800b446 <memcmp+0xe>
 800b442:	2000      	movs	r0, #0
 800b444:	bd10      	pop	{r4, pc}
 800b446:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b44a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b44e:	42a3      	cmp	r3, r4
 800b450:	d0f5      	beq.n	800b43e <memcmp+0x6>
 800b452:	1b18      	subs	r0, r3, r4
 800b454:	bd10      	pop	{r4, pc}

0800b456 <memset>:
 800b456:	4603      	mov	r3, r0
 800b458:	4402      	add	r2, r0
 800b45a:	4293      	cmp	r3, r2
 800b45c:	d100      	bne.n	800b460 <memset+0xa>
 800b45e:	4770      	bx	lr
 800b460:	f803 1b01 	strb.w	r1, [r3], #1
 800b464:	e7f9      	b.n	800b45a <memset+0x4>
	...

0800b468 <__utoa>:
 800b468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b46a:	b08b      	sub	sp, #44	; 0x2c
 800b46c:	4603      	mov	r3, r0
 800b46e:	460f      	mov	r7, r1
 800b470:	466d      	mov	r5, sp
 800b472:	4c1c      	ldr	r4, [pc, #112]	; (800b4e4 <__utoa+0x7c>)
 800b474:	f104 0e20 	add.w	lr, r4, #32
 800b478:	462e      	mov	r6, r5
 800b47a:	6820      	ldr	r0, [r4, #0]
 800b47c:	6861      	ldr	r1, [r4, #4]
 800b47e:	3408      	adds	r4, #8
 800b480:	c603      	stmia	r6!, {r0, r1}
 800b482:	4574      	cmp	r4, lr
 800b484:	4635      	mov	r5, r6
 800b486:	d1f7      	bne.n	800b478 <__utoa+0x10>
 800b488:	7921      	ldrb	r1, [r4, #4]
 800b48a:	6820      	ldr	r0, [r4, #0]
 800b48c:	7131      	strb	r1, [r6, #4]
 800b48e:	1e91      	subs	r1, r2, #2
 800b490:	2922      	cmp	r1, #34	; 0x22
 800b492:	6030      	str	r0, [r6, #0]
 800b494:	f04f 0100 	mov.w	r1, #0
 800b498:	d904      	bls.n	800b4a4 <__utoa+0x3c>
 800b49a:	7039      	strb	r1, [r7, #0]
 800b49c:	460f      	mov	r7, r1
 800b49e:	4638      	mov	r0, r7
 800b4a0:	b00b      	add	sp, #44	; 0x2c
 800b4a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b4a4:	1e78      	subs	r0, r7, #1
 800b4a6:	4606      	mov	r6, r0
 800b4a8:	fbb3 f5f2 	udiv	r5, r3, r2
 800b4ac:	fb02 3315 	mls	r3, r2, r5, r3
 800b4b0:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 800b4b4:	4473      	add	r3, lr
 800b4b6:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800b4ba:	1c4c      	adds	r4, r1, #1
 800b4bc:	f806 3f01 	strb.w	r3, [r6, #1]!
 800b4c0:	462b      	mov	r3, r5
 800b4c2:	b965      	cbnz	r5, 800b4de <__utoa+0x76>
 800b4c4:	553d      	strb	r5, [r7, r4]
 800b4c6:	187a      	adds	r2, r7, r1
 800b4c8:	1acc      	subs	r4, r1, r3
 800b4ca:	42a3      	cmp	r3, r4
 800b4cc:	dae7      	bge.n	800b49e <__utoa+0x36>
 800b4ce:	7844      	ldrb	r4, [r0, #1]
 800b4d0:	7815      	ldrb	r5, [r2, #0]
 800b4d2:	3301      	adds	r3, #1
 800b4d4:	f800 5f01 	strb.w	r5, [r0, #1]!
 800b4d8:	f802 4901 	strb.w	r4, [r2], #-1
 800b4dc:	e7f4      	b.n	800b4c8 <__utoa+0x60>
 800b4de:	4621      	mov	r1, r4
 800b4e0:	e7e2      	b.n	800b4a8 <__utoa+0x40>
 800b4e2:	bf00      	nop
 800b4e4:	0800c91e 	.word	0x0800c91e

0800b4e8 <ceilf>:
 800b4e8:	b570      	push	{r4, r5, r6, lr}
 800b4ea:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800b4ee:	0df5      	lsrs	r5, r6, #23
 800b4f0:	3d7f      	subs	r5, #127	; 0x7f
 800b4f2:	2d16      	cmp	r5, #22
 800b4f4:	4601      	mov	r1, r0
 800b4f6:	4604      	mov	r4, r0
 800b4f8:	dc26      	bgt.n	800b548 <ceilf+0x60>
 800b4fa:	2d00      	cmp	r5, #0
 800b4fc:	da0e      	bge.n	800b51c <ceilf+0x34>
 800b4fe:	4918      	ldr	r1, [pc, #96]	; (800b560 <ceilf+0x78>)
 800b500:	f7f5 face 	bl	8000aa0 <__addsf3>
 800b504:	2100      	movs	r1, #0
 800b506:	f7f5 fd8f 	bl	8001028 <__aeabi_fcmpgt>
 800b50a:	b128      	cbz	r0, 800b518 <ceilf+0x30>
 800b50c:	2c00      	cmp	r4, #0
 800b50e:	db23      	blt.n	800b558 <ceilf+0x70>
 800b510:	2e00      	cmp	r6, #0
 800b512:	bf18      	it	ne
 800b514:	f04f 547e 	movne.w	r4, #1065353216	; 0x3f800000
 800b518:	4621      	mov	r1, r4
 800b51a:	e01b      	b.n	800b554 <ceilf+0x6c>
 800b51c:	4e11      	ldr	r6, [pc, #68]	; (800b564 <ceilf+0x7c>)
 800b51e:	412e      	asrs	r6, r5
 800b520:	4230      	tst	r0, r6
 800b522:	d017      	beq.n	800b554 <ceilf+0x6c>
 800b524:	490e      	ldr	r1, [pc, #56]	; (800b560 <ceilf+0x78>)
 800b526:	f7f5 fabb 	bl	8000aa0 <__addsf3>
 800b52a:	2100      	movs	r1, #0
 800b52c:	f7f5 fd7c 	bl	8001028 <__aeabi_fcmpgt>
 800b530:	2800      	cmp	r0, #0
 800b532:	d0f1      	beq.n	800b518 <ceilf+0x30>
 800b534:	2c00      	cmp	r4, #0
 800b536:	bfc2      	ittt	gt
 800b538:	f44f 0300 	movgt.w	r3, #8388608	; 0x800000
 800b53c:	fa43 f505 	asrgt.w	r5, r3, r5
 800b540:	1964      	addgt	r4, r4, r5
 800b542:	ea24 0406 	bic.w	r4, r4, r6
 800b546:	e7e7      	b.n	800b518 <ceilf+0x30>
 800b548:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800b54c:	d302      	bcc.n	800b554 <ceilf+0x6c>
 800b54e:	f7f5 faa7 	bl	8000aa0 <__addsf3>
 800b552:	4601      	mov	r1, r0
 800b554:	4608      	mov	r0, r1
 800b556:	bd70      	pop	{r4, r5, r6, pc}
 800b558:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800b55c:	e7dc      	b.n	800b518 <ceilf+0x30>
 800b55e:	bf00      	nop
 800b560:	7149f2ca 	.word	0x7149f2ca
 800b564:	007fffff 	.word	0x007fffff

0800b568 <cosf>:
 800b568:	b507      	push	{r0, r1, r2, lr}
 800b56a:	4a18      	ldr	r2, [pc, #96]	; (800b5cc <cosf+0x64>)
 800b56c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800b570:	4293      	cmp	r3, r2
 800b572:	4601      	mov	r1, r0
 800b574:	dc03      	bgt.n	800b57e <cosf+0x16>
 800b576:	2100      	movs	r1, #0
 800b578:	f000 fb52 	bl	800bc20 <__kernel_cosf>
 800b57c:	e004      	b.n	800b588 <cosf+0x20>
 800b57e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b582:	db04      	blt.n	800b58e <cosf+0x26>
 800b584:	f7f5 fa8a 	bl	8000a9c <__aeabi_fsub>
 800b588:	b003      	add	sp, #12
 800b58a:	f85d fb04 	ldr.w	pc, [sp], #4
 800b58e:	4669      	mov	r1, sp
 800b590:	f000 f99c 	bl	800b8cc <__ieee754_rem_pio2f>
 800b594:	f000 0203 	and.w	r2, r0, #3
 800b598:	2a01      	cmp	r2, #1
 800b59a:	d005      	beq.n	800b5a8 <cosf+0x40>
 800b59c:	2a02      	cmp	r2, #2
 800b59e:	d00a      	beq.n	800b5b6 <cosf+0x4e>
 800b5a0:	b972      	cbnz	r2, 800b5c0 <cosf+0x58>
 800b5a2:	9901      	ldr	r1, [sp, #4]
 800b5a4:	9800      	ldr	r0, [sp, #0]
 800b5a6:	e7e7      	b.n	800b578 <cosf+0x10>
 800b5a8:	9901      	ldr	r1, [sp, #4]
 800b5aa:	9800      	ldr	r0, [sp, #0]
 800b5ac:	f000 fe5a 	bl	800c264 <__kernel_sinf>
 800b5b0:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800b5b4:	e7e8      	b.n	800b588 <cosf+0x20>
 800b5b6:	9901      	ldr	r1, [sp, #4]
 800b5b8:	9800      	ldr	r0, [sp, #0]
 800b5ba:	f000 fb31 	bl	800bc20 <__kernel_cosf>
 800b5be:	e7f7      	b.n	800b5b0 <cosf+0x48>
 800b5c0:	2201      	movs	r2, #1
 800b5c2:	9901      	ldr	r1, [sp, #4]
 800b5c4:	9800      	ldr	r0, [sp, #0]
 800b5c6:	f000 fe4d 	bl	800c264 <__kernel_sinf>
 800b5ca:	e7dd      	b.n	800b588 <cosf+0x20>
 800b5cc:	3f490fd8 	.word	0x3f490fd8

0800b5d0 <floorf>:
 800b5d0:	b570      	push	{r4, r5, r6, lr}
 800b5d2:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800b5d6:	0df5      	lsrs	r5, r6, #23
 800b5d8:	3d7f      	subs	r5, #127	; 0x7f
 800b5da:	2d16      	cmp	r5, #22
 800b5dc:	4601      	mov	r1, r0
 800b5de:	4604      	mov	r4, r0
 800b5e0:	dc26      	bgt.n	800b630 <floorf+0x60>
 800b5e2:	2d00      	cmp	r5, #0
 800b5e4:	da0e      	bge.n	800b604 <floorf+0x34>
 800b5e6:	4917      	ldr	r1, [pc, #92]	; (800b644 <floorf+0x74>)
 800b5e8:	f7f5 fa5a 	bl	8000aa0 <__addsf3>
 800b5ec:	2100      	movs	r1, #0
 800b5ee:	f7f5 fd1b 	bl	8001028 <__aeabi_fcmpgt>
 800b5f2:	b128      	cbz	r0, 800b600 <floorf+0x30>
 800b5f4:	2c00      	cmp	r4, #0
 800b5f6:	da23      	bge.n	800b640 <floorf+0x70>
 800b5f8:	4b13      	ldr	r3, [pc, #76]	; (800b648 <floorf+0x78>)
 800b5fa:	2e00      	cmp	r6, #0
 800b5fc:	bf18      	it	ne
 800b5fe:	461c      	movne	r4, r3
 800b600:	4621      	mov	r1, r4
 800b602:	e01b      	b.n	800b63c <floorf+0x6c>
 800b604:	4e11      	ldr	r6, [pc, #68]	; (800b64c <floorf+0x7c>)
 800b606:	412e      	asrs	r6, r5
 800b608:	4230      	tst	r0, r6
 800b60a:	d017      	beq.n	800b63c <floorf+0x6c>
 800b60c:	490d      	ldr	r1, [pc, #52]	; (800b644 <floorf+0x74>)
 800b60e:	f7f5 fa47 	bl	8000aa0 <__addsf3>
 800b612:	2100      	movs	r1, #0
 800b614:	f7f5 fd08 	bl	8001028 <__aeabi_fcmpgt>
 800b618:	2800      	cmp	r0, #0
 800b61a:	d0f1      	beq.n	800b600 <floorf+0x30>
 800b61c:	2c00      	cmp	r4, #0
 800b61e:	bfbe      	ittt	lt
 800b620:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 800b624:	fa43 f505 	asrlt.w	r5, r3, r5
 800b628:	1964      	addlt	r4, r4, r5
 800b62a:	ea24 0406 	bic.w	r4, r4, r6
 800b62e:	e7e7      	b.n	800b600 <floorf+0x30>
 800b630:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800b634:	d302      	bcc.n	800b63c <floorf+0x6c>
 800b636:	f7f5 fa33 	bl	8000aa0 <__addsf3>
 800b63a:	4601      	mov	r1, r0
 800b63c:	4608      	mov	r0, r1
 800b63e:	bd70      	pop	{r4, r5, r6, pc}
 800b640:	2400      	movs	r4, #0
 800b642:	e7dd      	b.n	800b600 <floorf+0x30>
 800b644:	7149f2ca 	.word	0x7149f2ca
 800b648:	bf800000 	.word	0xbf800000
 800b64c:	007fffff 	.word	0x007fffff

0800b650 <lroundf>:
 800b650:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800b654:	2800      	cmp	r0, #0
 800b656:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 800b65a:	b510      	push	{r4, lr}
 800b65c:	bfb4      	ite	lt
 800b65e:	f04f 34ff 	movlt.w	r4, #4294967295
 800b662:	2401      	movge	r4, #1
 800b664:	2a1e      	cmp	r2, #30
 800b666:	dc1b      	bgt.n	800b6a0 <lroundf+0x50>
 800b668:	2a00      	cmp	r2, #0
 800b66a:	da04      	bge.n	800b676 <lroundf+0x26>
 800b66c:	3201      	adds	r2, #1
 800b66e:	bf18      	it	ne
 800b670:	2400      	movne	r4, #0
 800b672:	4620      	mov	r0, r4
 800b674:	bd10      	pop	{r4, pc}
 800b676:	2a16      	cmp	r2, #22
 800b678:	bfd8      	it	le
 800b67a:	f44f 0380 	movle.w	r3, #4194304	; 0x400000
 800b67e:	f3c0 0116 	ubfx	r1, r0, #0, #23
 800b682:	bfd8      	it	le
 800b684:	4113      	asrle	r3, r2
 800b686:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800b68a:	bfcd      	iteet	gt
 800b68c:	3b96      	subgt	r3, #150	; 0x96
 800b68e:	185b      	addle	r3, r3, r1
 800b690:	f1c2 0217 	rsble	r2, r2, #23
 800b694:	fa01 f303 	lslgt.w	r3, r1, r3
 800b698:	bfd8      	it	le
 800b69a:	40d3      	lsrle	r3, r2
 800b69c:	435c      	muls	r4, r3
 800b69e:	e7e8      	b.n	800b672 <lroundf+0x22>
 800b6a0:	f7f5 fce2 	bl	8001068 <__aeabi_f2iz>
 800b6a4:	4604      	mov	r4, r0
 800b6a6:	e7e4      	b.n	800b672 <lroundf+0x22>

0800b6a8 <sinf>:
 800b6a8:	b507      	push	{r0, r1, r2, lr}
 800b6aa:	4a19      	ldr	r2, [pc, #100]	; (800b710 <sinf+0x68>)
 800b6ac:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800b6b0:	4293      	cmp	r3, r2
 800b6b2:	4601      	mov	r1, r0
 800b6b4:	dc04      	bgt.n	800b6c0 <sinf+0x18>
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	2100      	movs	r1, #0
 800b6ba:	f000 fdd3 	bl	800c264 <__kernel_sinf>
 800b6be:	e004      	b.n	800b6ca <sinf+0x22>
 800b6c0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b6c4:	db04      	blt.n	800b6d0 <sinf+0x28>
 800b6c6:	f7f5 f9e9 	bl	8000a9c <__aeabi_fsub>
 800b6ca:	b003      	add	sp, #12
 800b6cc:	f85d fb04 	ldr.w	pc, [sp], #4
 800b6d0:	4669      	mov	r1, sp
 800b6d2:	f000 f8fb 	bl	800b8cc <__ieee754_rem_pio2f>
 800b6d6:	f000 0003 	and.w	r0, r0, #3
 800b6da:	2801      	cmp	r0, #1
 800b6dc:	d006      	beq.n	800b6ec <sinf+0x44>
 800b6de:	2802      	cmp	r0, #2
 800b6e0:	d009      	beq.n	800b6f6 <sinf+0x4e>
 800b6e2:	b980      	cbnz	r0, 800b706 <sinf+0x5e>
 800b6e4:	2201      	movs	r2, #1
 800b6e6:	9901      	ldr	r1, [sp, #4]
 800b6e8:	9800      	ldr	r0, [sp, #0]
 800b6ea:	e7e6      	b.n	800b6ba <sinf+0x12>
 800b6ec:	9901      	ldr	r1, [sp, #4]
 800b6ee:	9800      	ldr	r0, [sp, #0]
 800b6f0:	f000 fa96 	bl	800bc20 <__kernel_cosf>
 800b6f4:	e7e9      	b.n	800b6ca <sinf+0x22>
 800b6f6:	2201      	movs	r2, #1
 800b6f8:	9901      	ldr	r1, [sp, #4]
 800b6fa:	9800      	ldr	r0, [sp, #0]
 800b6fc:	f000 fdb2 	bl	800c264 <__kernel_sinf>
 800b700:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800b704:	e7e1      	b.n	800b6ca <sinf+0x22>
 800b706:	9901      	ldr	r1, [sp, #4]
 800b708:	9800      	ldr	r0, [sp, #0]
 800b70a:	f000 fa89 	bl	800bc20 <__kernel_cosf>
 800b70e:	e7f7      	b.n	800b700 <sinf+0x58>
 800b710:	3f490fd8 	.word	0x3f490fd8

0800b714 <atan2f>:
 800b714:	f000 b84a 	b.w	800b7ac <__ieee754_atan2f>

0800b718 <sqrtf>:
 800b718:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b71a:	b08b      	sub	sp, #44	; 0x2c
 800b71c:	4604      	mov	r4, r0
 800b71e:	f000 fa2d 	bl	800bb7c <__ieee754_sqrtf>
 800b722:	4b20      	ldr	r3, [pc, #128]	; (800b7a4 <sqrtf+0x8c>)
 800b724:	4606      	mov	r6, r0
 800b726:	f993 5000 	ldrsb.w	r5, [r3]
 800b72a:	1c6b      	adds	r3, r5, #1
 800b72c:	d02a      	beq.n	800b784 <sqrtf+0x6c>
 800b72e:	4621      	mov	r1, r4
 800b730:	4620      	mov	r0, r4
 800b732:	f7f5 fc83 	bl	800103c <__aeabi_fcmpun>
 800b736:	4607      	mov	r7, r0
 800b738:	bb20      	cbnz	r0, 800b784 <sqrtf+0x6c>
 800b73a:	2100      	movs	r1, #0
 800b73c:	4620      	mov	r0, r4
 800b73e:	f7f5 fc55 	bl	8000fec <__aeabi_fcmplt>
 800b742:	b1f8      	cbz	r0, 800b784 <sqrtf+0x6c>
 800b744:	2301      	movs	r3, #1
 800b746:	9300      	str	r3, [sp, #0]
 800b748:	4b17      	ldr	r3, [pc, #92]	; (800b7a8 <sqrtf+0x90>)
 800b74a:	4620      	mov	r0, r4
 800b74c:	9301      	str	r3, [sp, #4]
 800b74e:	9708      	str	r7, [sp, #32]
 800b750:	f7f4 fe62 	bl	8000418 <__aeabi_f2d>
 800b754:	2200      	movs	r2, #0
 800b756:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b75a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b75e:	2300      	movs	r3, #0
 800b760:	b99d      	cbnz	r5, 800b78a <sqrtf+0x72>
 800b762:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b766:	4668      	mov	r0, sp
 800b768:	f000 fdf2 	bl	800c350 <matherr>
 800b76c:	b1a8      	cbz	r0, 800b79a <sqrtf+0x82>
 800b76e:	9b08      	ldr	r3, [sp, #32]
 800b770:	b11b      	cbz	r3, 800b77a <sqrtf+0x62>
 800b772:	f000 ff55 	bl	800c620 <__errno>
 800b776:	9b08      	ldr	r3, [sp, #32]
 800b778:	6003      	str	r3, [r0, #0]
 800b77a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b77e:	f7f5 f939 	bl	80009f4 <__aeabi_d2f>
 800b782:	4606      	mov	r6, r0
 800b784:	4630      	mov	r0, r6
 800b786:	b00b      	add	sp, #44	; 0x2c
 800b788:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b78a:	4610      	mov	r0, r2
 800b78c:	4619      	mov	r1, r3
 800b78e:	f7f4 ffc1 	bl	8000714 <__aeabi_ddiv>
 800b792:	2d02      	cmp	r5, #2
 800b794:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b798:	d1e5      	bne.n	800b766 <sqrtf+0x4e>
 800b79a:	f000 ff41 	bl	800c620 <__errno>
 800b79e:	2321      	movs	r3, #33	; 0x21
 800b7a0:	6003      	str	r3, [r0, #0]
 800b7a2:	e7e4      	b.n	800b76e <sqrtf+0x56>
 800b7a4:	20000100 	.word	0x20000100
 800b7a8:	0800c943 	.word	0x0800c943

0800b7ac <__ieee754_atan2f>:
 800b7ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7ae:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b7b2:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800b7b6:	4603      	mov	r3, r0
 800b7b8:	dc05      	bgt.n	800b7c6 <__ieee754_atan2f+0x1a>
 800b7ba:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800b7be:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800b7c2:	4607      	mov	r7, r0
 800b7c4:	dd04      	ble.n	800b7d0 <__ieee754_atan2f+0x24>
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	f7f5 f96a 	bl	8000aa0 <__addsf3>
 800b7cc:	4603      	mov	r3, r0
 800b7ce:	e010      	b.n	800b7f2 <__ieee754_atan2f+0x46>
 800b7d0:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800b7d4:	d103      	bne.n	800b7de <__ieee754_atan2f+0x32>
 800b7d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b7da:	f000 bdbb 	b.w	800c354 <atanf>
 800b7de:	178c      	asrs	r4, r1, #30
 800b7e0:	f004 0402 	and.w	r4, r4, #2
 800b7e4:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800b7e8:	b92a      	cbnz	r2, 800b7f6 <__ieee754_atan2f+0x4a>
 800b7ea:	2c02      	cmp	r4, #2
 800b7ec:	d023      	beq.n	800b836 <__ieee754_atan2f+0x8a>
 800b7ee:	2c03      	cmp	r4, #3
 800b7f0:	d023      	beq.n	800b83a <__ieee754_atan2f+0x8e>
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b7f6:	b91e      	cbnz	r6, 800b800 <__ieee754_atan2f+0x54>
 800b7f8:	2f00      	cmp	r7, #0
 800b7fa:	da53      	bge.n	800b8a4 <__ieee754_atan2f+0xf8>
 800b7fc:	4b2a      	ldr	r3, [pc, #168]	; (800b8a8 <__ieee754_atan2f+0xfc>)
 800b7fe:	e7f8      	b.n	800b7f2 <__ieee754_atan2f+0x46>
 800b800:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800b804:	d11b      	bne.n	800b83e <__ieee754_atan2f+0x92>
 800b806:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800b80a:	d10b      	bne.n	800b824 <__ieee754_atan2f+0x78>
 800b80c:	2c02      	cmp	r4, #2
 800b80e:	d005      	beq.n	800b81c <__ieee754_atan2f+0x70>
 800b810:	2c03      	cmp	r4, #3
 800b812:	d005      	beq.n	800b820 <__ieee754_atan2f+0x74>
 800b814:	2c01      	cmp	r4, #1
 800b816:	d141      	bne.n	800b89c <__ieee754_atan2f+0xf0>
 800b818:	4b24      	ldr	r3, [pc, #144]	; (800b8ac <__ieee754_atan2f+0x100>)
 800b81a:	e7ea      	b.n	800b7f2 <__ieee754_atan2f+0x46>
 800b81c:	4b24      	ldr	r3, [pc, #144]	; (800b8b0 <__ieee754_atan2f+0x104>)
 800b81e:	e7e8      	b.n	800b7f2 <__ieee754_atan2f+0x46>
 800b820:	4b24      	ldr	r3, [pc, #144]	; (800b8b4 <__ieee754_atan2f+0x108>)
 800b822:	e7e6      	b.n	800b7f2 <__ieee754_atan2f+0x46>
 800b824:	2c02      	cmp	r4, #2
 800b826:	d006      	beq.n	800b836 <__ieee754_atan2f+0x8a>
 800b828:	2c03      	cmp	r4, #3
 800b82a:	d006      	beq.n	800b83a <__ieee754_atan2f+0x8e>
 800b82c:	2c01      	cmp	r4, #1
 800b82e:	d137      	bne.n	800b8a0 <__ieee754_atan2f+0xf4>
 800b830:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b834:	e7dd      	b.n	800b7f2 <__ieee754_atan2f+0x46>
 800b836:	4b20      	ldr	r3, [pc, #128]	; (800b8b8 <__ieee754_atan2f+0x10c>)
 800b838:	e7db      	b.n	800b7f2 <__ieee754_atan2f+0x46>
 800b83a:	4b20      	ldr	r3, [pc, #128]	; (800b8bc <__ieee754_atan2f+0x110>)
 800b83c:	e7d9      	b.n	800b7f2 <__ieee754_atan2f+0x46>
 800b83e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800b842:	d0d9      	beq.n	800b7f8 <__ieee754_atan2f+0x4c>
 800b844:	1b92      	subs	r2, r2, r6
 800b846:	15d2      	asrs	r2, r2, #23
 800b848:	2a3c      	cmp	r2, #60	; 0x3c
 800b84a:	dc17      	bgt.n	800b87c <__ieee754_atan2f+0xd0>
 800b84c:	2900      	cmp	r1, #0
 800b84e:	da01      	bge.n	800b854 <__ieee754_atan2f+0xa8>
 800b850:	323c      	adds	r2, #60	; 0x3c
 800b852:	db15      	blt.n	800b880 <__ieee754_atan2f+0xd4>
 800b854:	4618      	mov	r0, r3
 800b856:	f7f5 fadf 	bl	8000e18 <__aeabi_fdiv>
 800b85a:	f000 fe8b 	bl	800c574 <fabsf>
 800b85e:	f000 fd79 	bl	800c354 <atanf>
 800b862:	4603      	mov	r3, r0
 800b864:	2c01      	cmp	r4, #1
 800b866:	d00d      	beq.n	800b884 <__ieee754_atan2f+0xd8>
 800b868:	2c02      	cmp	r4, #2
 800b86a:	d00e      	beq.n	800b88a <__ieee754_atan2f+0xde>
 800b86c:	2c00      	cmp	r4, #0
 800b86e:	d0c0      	beq.n	800b7f2 <__ieee754_atan2f+0x46>
 800b870:	4913      	ldr	r1, [pc, #76]	; (800b8c0 <__ieee754_atan2f+0x114>)
 800b872:	4618      	mov	r0, r3
 800b874:	f7f5 f914 	bl	8000aa0 <__addsf3>
 800b878:	490f      	ldr	r1, [pc, #60]	; (800b8b8 <__ieee754_atan2f+0x10c>)
 800b87a:	e00c      	b.n	800b896 <__ieee754_atan2f+0xea>
 800b87c:	4b11      	ldr	r3, [pc, #68]	; (800b8c4 <__ieee754_atan2f+0x118>)
 800b87e:	e7f1      	b.n	800b864 <__ieee754_atan2f+0xb8>
 800b880:	2300      	movs	r3, #0
 800b882:	e7ef      	b.n	800b864 <__ieee754_atan2f+0xb8>
 800b884:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b888:	e7b3      	b.n	800b7f2 <__ieee754_atan2f+0x46>
 800b88a:	490d      	ldr	r1, [pc, #52]	; (800b8c0 <__ieee754_atan2f+0x114>)
 800b88c:	4618      	mov	r0, r3
 800b88e:	f7f5 f907 	bl	8000aa0 <__addsf3>
 800b892:	4601      	mov	r1, r0
 800b894:	4808      	ldr	r0, [pc, #32]	; (800b8b8 <__ieee754_atan2f+0x10c>)
 800b896:	f7f5 f901 	bl	8000a9c <__aeabi_fsub>
 800b89a:	e797      	b.n	800b7cc <__ieee754_atan2f+0x20>
 800b89c:	4b0a      	ldr	r3, [pc, #40]	; (800b8c8 <__ieee754_atan2f+0x11c>)
 800b89e:	e7a8      	b.n	800b7f2 <__ieee754_atan2f+0x46>
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	e7a6      	b.n	800b7f2 <__ieee754_atan2f+0x46>
 800b8a4:	4b07      	ldr	r3, [pc, #28]	; (800b8c4 <__ieee754_atan2f+0x118>)
 800b8a6:	e7a4      	b.n	800b7f2 <__ieee754_atan2f+0x46>
 800b8a8:	bfc90fdb 	.word	0xbfc90fdb
 800b8ac:	bf490fdb 	.word	0xbf490fdb
 800b8b0:	4016cbe4 	.word	0x4016cbe4
 800b8b4:	c016cbe4 	.word	0xc016cbe4
 800b8b8:	40490fdb 	.word	0x40490fdb
 800b8bc:	c0490fdb 	.word	0xc0490fdb
 800b8c0:	33bbbd2e 	.word	0x33bbbd2e
 800b8c4:	3fc90fdb 	.word	0x3fc90fdb
 800b8c8:	3f490fdb 	.word	0x3f490fdb

0800b8cc <__ieee754_rem_pio2f>:
 800b8cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8d0:	4a9d      	ldr	r2, [pc, #628]	; (800bb48 <__ieee754_rem_pio2f+0x27c>)
 800b8d2:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800b8d6:	4295      	cmp	r5, r2
 800b8d8:	b087      	sub	sp, #28
 800b8da:	460c      	mov	r4, r1
 800b8dc:	4607      	mov	r7, r0
 800b8de:	dc04      	bgt.n	800b8ea <__ieee754_rem_pio2f+0x1e>
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	6020      	str	r0, [r4, #0]
 800b8e4:	604b      	str	r3, [r1, #4]
 800b8e6:	2600      	movs	r6, #0
 800b8e8:	e01a      	b.n	800b920 <__ieee754_rem_pio2f+0x54>
 800b8ea:	4a98      	ldr	r2, [pc, #608]	; (800bb4c <__ieee754_rem_pio2f+0x280>)
 800b8ec:	4295      	cmp	r5, r2
 800b8ee:	dc4b      	bgt.n	800b988 <__ieee754_rem_pio2f+0xbc>
 800b8f0:	2800      	cmp	r0, #0
 800b8f2:	4997      	ldr	r1, [pc, #604]	; (800bb50 <__ieee754_rem_pio2f+0x284>)
 800b8f4:	f025 050f 	bic.w	r5, r5, #15
 800b8f8:	4e96      	ldr	r6, [pc, #600]	; (800bb54 <__ieee754_rem_pio2f+0x288>)
 800b8fa:	dd23      	ble.n	800b944 <__ieee754_rem_pio2f+0x78>
 800b8fc:	f7f5 f8ce 	bl	8000a9c <__aeabi_fsub>
 800b900:	42b5      	cmp	r5, r6
 800b902:	4607      	mov	r7, r0
 800b904:	d010      	beq.n	800b928 <__ieee754_rem_pio2f+0x5c>
 800b906:	4994      	ldr	r1, [pc, #592]	; (800bb58 <__ieee754_rem_pio2f+0x28c>)
 800b908:	f7f5 f8c8 	bl	8000a9c <__aeabi_fsub>
 800b90c:	4601      	mov	r1, r0
 800b90e:	6020      	str	r0, [r4, #0]
 800b910:	4638      	mov	r0, r7
 800b912:	f7f5 f8c3 	bl	8000a9c <__aeabi_fsub>
 800b916:	4990      	ldr	r1, [pc, #576]	; (800bb58 <__ieee754_rem_pio2f+0x28c>)
 800b918:	f7f5 f8c0 	bl	8000a9c <__aeabi_fsub>
 800b91c:	2601      	movs	r6, #1
 800b91e:	6060      	str	r0, [r4, #4]
 800b920:	4630      	mov	r0, r6
 800b922:	b007      	add	sp, #28
 800b924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b928:	498c      	ldr	r1, [pc, #560]	; (800bb5c <__ieee754_rem_pio2f+0x290>)
 800b92a:	f7f5 f8b7 	bl	8000a9c <__aeabi_fsub>
 800b92e:	498c      	ldr	r1, [pc, #560]	; (800bb60 <__ieee754_rem_pio2f+0x294>)
 800b930:	4605      	mov	r5, r0
 800b932:	f7f5 f8b3 	bl	8000a9c <__aeabi_fsub>
 800b936:	4601      	mov	r1, r0
 800b938:	6020      	str	r0, [r4, #0]
 800b93a:	4628      	mov	r0, r5
 800b93c:	f7f5 f8ae 	bl	8000a9c <__aeabi_fsub>
 800b940:	4987      	ldr	r1, [pc, #540]	; (800bb60 <__ieee754_rem_pio2f+0x294>)
 800b942:	e7e9      	b.n	800b918 <__ieee754_rem_pio2f+0x4c>
 800b944:	f7f5 f8ac 	bl	8000aa0 <__addsf3>
 800b948:	42b5      	cmp	r5, r6
 800b94a:	4607      	mov	r7, r0
 800b94c:	d00e      	beq.n	800b96c <__ieee754_rem_pio2f+0xa0>
 800b94e:	4982      	ldr	r1, [pc, #520]	; (800bb58 <__ieee754_rem_pio2f+0x28c>)
 800b950:	f7f5 f8a6 	bl	8000aa0 <__addsf3>
 800b954:	4601      	mov	r1, r0
 800b956:	6020      	str	r0, [r4, #0]
 800b958:	4638      	mov	r0, r7
 800b95a:	f7f5 f89f 	bl	8000a9c <__aeabi_fsub>
 800b95e:	497e      	ldr	r1, [pc, #504]	; (800bb58 <__ieee754_rem_pio2f+0x28c>)
 800b960:	f7f5 f89e 	bl	8000aa0 <__addsf3>
 800b964:	f04f 36ff 	mov.w	r6, #4294967295
 800b968:	6060      	str	r0, [r4, #4]
 800b96a:	e7d9      	b.n	800b920 <__ieee754_rem_pio2f+0x54>
 800b96c:	497b      	ldr	r1, [pc, #492]	; (800bb5c <__ieee754_rem_pio2f+0x290>)
 800b96e:	f7f5 f897 	bl	8000aa0 <__addsf3>
 800b972:	497b      	ldr	r1, [pc, #492]	; (800bb60 <__ieee754_rem_pio2f+0x294>)
 800b974:	4605      	mov	r5, r0
 800b976:	f7f5 f893 	bl	8000aa0 <__addsf3>
 800b97a:	4601      	mov	r1, r0
 800b97c:	6020      	str	r0, [r4, #0]
 800b97e:	4628      	mov	r0, r5
 800b980:	f7f5 f88c 	bl	8000a9c <__aeabi_fsub>
 800b984:	4976      	ldr	r1, [pc, #472]	; (800bb60 <__ieee754_rem_pio2f+0x294>)
 800b986:	e7eb      	b.n	800b960 <__ieee754_rem_pio2f+0x94>
 800b988:	4a76      	ldr	r2, [pc, #472]	; (800bb64 <__ieee754_rem_pio2f+0x298>)
 800b98a:	4295      	cmp	r5, r2
 800b98c:	f300 808c 	bgt.w	800baa8 <__ieee754_rem_pio2f+0x1dc>
 800b990:	f000 fdf0 	bl	800c574 <fabsf>
 800b994:	4974      	ldr	r1, [pc, #464]	; (800bb68 <__ieee754_rem_pio2f+0x29c>)
 800b996:	4680      	mov	r8, r0
 800b998:	f7f5 f98a 	bl	8000cb0 <__aeabi_fmul>
 800b99c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800b9a0:	f7f5 f87e 	bl	8000aa0 <__addsf3>
 800b9a4:	f7f5 fb60 	bl	8001068 <__aeabi_f2iz>
 800b9a8:	4606      	mov	r6, r0
 800b9aa:	f7f5 f92d 	bl	8000c08 <__aeabi_i2f>
 800b9ae:	4968      	ldr	r1, [pc, #416]	; (800bb50 <__ieee754_rem_pio2f+0x284>)
 800b9b0:	4682      	mov	sl, r0
 800b9b2:	f7f5 f97d 	bl	8000cb0 <__aeabi_fmul>
 800b9b6:	4601      	mov	r1, r0
 800b9b8:	4640      	mov	r0, r8
 800b9ba:	f7f5 f86f 	bl	8000a9c <__aeabi_fsub>
 800b9be:	4966      	ldr	r1, [pc, #408]	; (800bb58 <__ieee754_rem_pio2f+0x28c>)
 800b9c0:	4680      	mov	r8, r0
 800b9c2:	4650      	mov	r0, sl
 800b9c4:	f7f5 f974 	bl	8000cb0 <__aeabi_fmul>
 800b9c8:	2e1f      	cmp	r6, #31
 800b9ca:	4681      	mov	r9, r0
 800b9cc:	dc0c      	bgt.n	800b9e8 <__ieee754_rem_pio2f+0x11c>
 800b9ce:	4a67      	ldr	r2, [pc, #412]	; (800bb6c <__ieee754_rem_pio2f+0x2a0>)
 800b9d0:	1e71      	subs	r1, r6, #1
 800b9d2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800b9d6:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800b9da:	4293      	cmp	r3, r2
 800b9dc:	d004      	beq.n	800b9e8 <__ieee754_rem_pio2f+0x11c>
 800b9de:	4649      	mov	r1, r9
 800b9e0:	4640      	mov	r0, r8
 800b9e2:	f7f5 f85b 	bl	8000a9c <__aeabi_fsub>
 800b9e6:	e009      	b.n	800b9fc <__ieee754_rem_pio2f+0x130>
 800b9e8:	4649      	mov	r1, r9
 800b9ea:	4640      	mov	r0, r8
 800b9ec:	f7f5 f856 	bl	8000a9c <__aeabi_fsub>
 800b9f0:	15ed      	asrs	r5, r5, #23
 800b9f2:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800b9f6:	1aeb      	subs	r3, r5, r3
 800b9f8:	2b08      	cmp	r3, #8
 800b9fa:	dc01      	bgt.n	800ba00 <__ieee754_rem_pio2f+0x134>
 800b9fc:	6020      	str	r0, [r4, #0]
 800b9fe:	e024      	b.n	800ba4a <__ieee754_rem_pio2f+0x17e>
 800ba00:	4956      	ldr	r1, [pc, #344]	; (800bb5c <__ieee754_rem_pio2f+0x290>)
 800ba02:	4650      	mov	r0, sl
 800ba04:	f7f5 f954 	bl	8000cb0 <__aeabi_fmul>
 800ba08:	4681      	mov	r9, r0
 800ba0a:	4601      	mov	r1, r0
 800ba0c:	4640      	mov	r0, r8
 800ba0e:	f7f5 f845 	bl	8000a9c <__aeabi_fsub>
 800ba12:	4601      	mov	r1, r0
 800ba14:	4683      	mov	fp, r0
 800ba16:	4640      	mov	r0, r8
 800ba18:	f7f5 f840 	bl	8000a9c <__aeabi_fsub>
 800ba1c:	4649      	mov	r1, r9
 800ba1e:	f7f5 f83d 	bl	8000a9c <__aeabi_fsub>
 800ba22:	4680      	mov	r8, r0
 800ba24:	494e      	ldr	r1, [pc, #312]	; (800bb60 <__ieee754_rem_pio2f+0x294>)
 800ba26:	4650      	mov	r0, sl
 800ba28:	f7f5 f942 	bl	8000cb0 <__aeabi_fmul>
 800ba2c:	4641      	mov	r1, r8
 800ba2e:	f7f5 f835 	bl	8000a9c <__aeabi_fsub>
 800ba32:	4601      	mov	r1, r0
 800ba34:	4681      	mov	r9, r0
 800ba36:	4658      	mov	r0, fp
 800ba38:	f7f5 f830 	bl	8000a9c <__aeabi_fsub>
 800ba3c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800ba40:	1aed      	subs	r5, r5, r3
 800ba42:	2d19      	cmp	r5, #25
 800ba44:	dc15      	bgt.n	800ba72 <__ieee754_rem_pio2f+0x1a6>
 800ba46:	46d8      	mov	r8, fp
 800ba48:	6020      	str	r0, [r4, #0]
 800ba4a:	6825      	ldr	r5, [r4, #0]
 800ba4c:	4640      	mov	r0, r8
 800ba4e:	4629      	mov	r1, r5
 800ba50:	f7f5 f824 	bl	8000a9c <__aeabi_fsub>
 800ba54:	4649      	mov	r1, r9
 800ba56:	f7f5 f821 	bl	8000a9c <__aeabi_fsub>
 800ba5a:	2f00      	cmp	r7, #0
 800ba5c:	6060      	str	r0, [r4, #4]
 800ba5e:	f6bf af5f 	bge.w	800b920 <__ieee754_rem_pio2f+0x54>
 800ba62:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 800ba66:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800ba6a:	6025      	str	r5, [r4, #0]
 800ba6c:	6060      	str	r0, [r4, #4]
 800ba6e:	4276      	negs	r6, r6
 800ba70:	e756      	b.n	800b920 <__ieee754_rem_pio2f+0x54>
 800ba72:	493f      	ldr	r1, [pc, #252]	; (800bb70 <__ieee754_rem_pio2f+0x2a4>)
 800ba74:	4650      	mov	r0, sl
 800ba76:	f7f5 f91b 	bl	8000cb0 <__aeabi_fmul>
 800ba7a:	4605      	mov	r5, r0
 800ba7c:	4601      	mov	r1, r0
 800ba7e:	4658      	mov	r0, fp
 800ba80:	f7f5 f80c 	bl	8000a9c <__aeabi_fsub>
 800ba84:	4601      	mov	r1, r0
 800ba86:	4680      	mov	r8, r0
 800ba88:	4658      	mov	r0, fp
 800ba8a:	f7f5 f807 	bl	8000a9c <__aeabi_fsub>
 800ba8e:	4629      	mov	r1, r5
 800ba90:	f7f5 f804 	bl	8000a9c <__aeabi_fsub>
 800ba94:	4605      	mov	r5, r0
 800ba96:	4937      	ldr	r1, [pc, #220]	; (800bb74 <__ieee754_rem_pio2f+0x2a8>)
 800ba98:	4650      	mov	r0, sl
 800ba9a:	f7f5 f909 	bl	8000cb0 <__aeabi_fmul>
 800ba9e:	4629      	mov	r1, r5
 800baa0:	f7f4 fffc 	bl	8000a9c <__aeabi_fsub>
 800baa4:	4681      	mov	r9, r0
 800baa6:	e79a      	b.n	800b9de <__ieee754_rem_pio2f+0x112>
 800baa8:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800baac:	db05      	blt.n	800baba <__ieee754_rem_pio2f+0x1ee>
 800baae:	4601      	mov	r1, r0
 800bab0:	f7f4 fff4 	bl	8000a9c <__aeabi_fsub>
 800bab4:	6060      	str	r0, [r4, #4]
 800bab6:	6020      	str	r0, [r4, #0]
 800bab8:	e715      	b.n	800b8e6 <__ieee754_rem_pio2f+0x1a>
 800baba:	15ee      	asrs	r6, r5, #23
 800babc:	3e86      	subs	r6, #134	; 0x86
 800babe:	eba5 55c6 	sub.w	r5, r5, r6, lsl #23
 800bac2:	4628      	mov	r0, r5
 800bac4:	f7f5 fad0 	bl	8001068 <__aeabi_f2iz>
 800bac8:	f7f5 f89e 	bl	8000c08 <__aeabi_i2f>
 800bacc:	4601      	mov	r1, r0
 800bace:	9003      	str	r0, [sp, #12]
 800bad0:	4628      	mov	r0, r5
 800bad2:	f7f4 ffe3 	bl	8000a9c <__aeabi_fsub>
 800bad6:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800bada:	f7f5 f8e9 	bl	8000cb0 <__aeabi_fmul>
 800bade:	4680      	mov	r8, r0
 800bae0:	f7f5 fac2 	bl	8001068 <__aeabi_f2iz>
 800bae4:	f7f5 f890 	bl	8000c08 <__aeabi_i2f>
 800bae8:	4601      	mov	r1, r0
 800baea:	9004      	str	r0, [sp, #16]
 800baec:	4605      	mov	r5, r0
 800baee:	4640      	mov	r0, r8
 800baf0:	f7f4 ffd4 	bl	8000a9c <__aeabi_fsub>
 800baf4:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800baf8:	f7f5 f8da 	bl	8000cb0 <__aeabi_fmul>
 800bafc:	2100      	movs	r1, #0
 800bafe:	9005      	str	r0, [sp, #20]
 800bb00:	f7f5 fa6a 	bl	8000fd8 <__aeabi_fcmpeq>
 800bb04:	b1e8      	cbz	r0, 800bb42 <__ieee754_rem_pio2f+0x276>
 800bb06:	2100      	movs	r1, #0
 800bb08:	4628      	mov	r0, r5
 800bb0a:	f7f5 fa65 	bl	8000fd8 <__aeabi_fcmpeq>
 800bb0e:	2800      	cmp	r0, #0
 800bb10:	bf14      	ite	ne
 800bb12:	2301      	movne	r3, #1
 800bb14:	2302      	moveq	r3, #2
 800bb16:	4a18      	ldr	r2, [pc, #96]	; (800bb78 <__ieee754_rem_pio2f+0x2ac>)
 800bb18:	4621      	mov	r1, r4
 800bb1a:	9201      	str	r2, [sp, #4]
 800bb1c:	2202      	movs	r2, #2
 800bb1e:	a803      	add	r0, sp, #12
 800bb20:	9200      	str	r2, [sp, #0]
 800bb22:	4632      	mov	r2, r6
 800bb24:	f000 f910 	bl	800bd48 <__kernel_rem_pio2f>
 800bb28:	2f00      	cmp	r7, #0
 800bb2a:	4606      	mov	r6, r0
 800bb2c:	f6bf aef8 	bge.w	800b920 <__ieee754_rem_pio2f+0x54>
 800bb30:	6823      	ldr	r3, [r4, #0]
 800bb32:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bb36:	6023      	str	r3, [r4, #0]
 800bb38:	6863      	ldr	r3, [r4, #4]
 800bb3a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bb3e:	6063      	str	r3, [r4, #4]
 800bb40:	e795      	b.n	800ba6e <__ieee754_rem_pio2f+0x1a2>
 800bb42:	2303      	movs	r3, #3
 800bb44:	e7e7      	b.n	800bb16 <__ieee754_rem_pio2f+0x24a>
 800bb46:	bf00      	nop
 800bb48:	3f490fd8 	.word	0x3f490fd8
 800bb4c:	4016cbe3 	.word	0x4016cbe3
 800bb50:	3fc90f80 	.word	0x3fc90f80
 800bb54:	3fc90fd0 	.word	0x3fc90fd0
 800bb58:	37354443 	.word	0x37354443
 800bb5c:	37354400 	.word	0x37354400
 800bb60:	2e85a308 	.word	0x2e85a308
 800bb64:	43490f80 	.word	0x43490f80
 800bb68:	3f22f984 	.word	0x3f22f984
 800bb6c:	0800c94c 	.word	0x0800c94c
 800bb70:	2e85a300 	.word	0x2e85a300
 800bb74:	248d3132 	.word	0x248d3132
 800bb78:	0800c9cc 	.word	0x0800c9cc

0800bb7c <__ieee754_sqrtf>:
 800bb7c:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800bb80:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800bb84:	b570      	push	{r4, r5, r6, lr}
 800bb86:	4603      	mov	r3, r0
 800bb88:	4604      	mov	r4, r0
 800bb8a:	d309      	bcc.n	800bba0 <__ieee754_sqrtf+0x24>
 800bb8c:	4601      	mov	r1, r0
 800bb8e:	f7f5 f88f 	bl	8000cb0 <__aeabi_fmul>
 800bb92:	4601      	mov	r1, r0
 800bb94:	4620      	mov	r0, r4
 800bb96:	f7f4 ff83 	bl	8000aa0 <__addsf3>
 800bb9a:	4604      	mov	r4, r0
 800bb9c:	4620      	mov	r0, r4
 800bb9e:	bd70      	pop	{r4, r5, r6, pc}
 800bba0:	2a00      	cmp	r2, #0
 800bba2:	d0fb      	beq.n	800bb9c <__ieee754_sqrtf+0x20>
 800bba4:	2800      	cmp	r0, #0
 800bba6:	da06      	bge.n	800bbb6 <__ieee754_sqrtf+0x3a>
 800bba8:	4601      	mov	r1, r0
 800bbaa:	f7f4 ff77 	bl	8000a9c <__aeabi_fsub>
 800bbae:	4601      	mov	r1, r0
 800bbb0:	f7f5 f932 	bl	8000e18 <__aeabi_fdiv>
 800bbb4:	e7f1      	b.n	800bb9a <__ieee754_sqrtf+0x1e>
 800bbb6:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800bbba:	ea4f 54e0 	mov.w	r4, r0, asr #23
 800bbbe:	d204      	bcs.n	800bbca <__ieee754_sqrtf+0x4e>
 800bbc0:	2200      	movs	r2, #0
 800bbc2:	0219      	lsls	r1, r3, #8
 800bbc4:	d529      	bpl.n	800bc1a <__ieee754_sqrtf+0x9e>
 800bbc6:	3a01      	subs	r2, #1
 800bbc8:	1aa4      	subs	r4, r4, r2
 800bbca:	3c7f      	subs	r4, #127	; 0x7f
 800bbcc:	07e2      	lsls	r2, r4, #31
 800bbce:	f04f 0200 	mov.w	r2, #0
 800bbd2:	ea4f 0164 	mov.w	r1, r4, asr #1
 800bbd6:	4616      	mov	r6, r2
 800bbd8:	f04f 0419 	mov.w	r4, #25
 800bbdc:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800bbe0:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800bbe4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bbe8:	bf48      	it	mi
 800bbea:	005b      	lslmi	r3, r3, #1
 800bbec:	005b      	lsls	r3, r3, #1
 800bbee:	1835      	adds	r5, r6, r0
 800bbf0:	429d      	cmp	r5, r3
 800bbf2:	bfde      	ittt	le
 800bbf4:	182e      	addle	r6, r5, r0
 800bbf6:	1b5b      	suble	r3, r3, r5
 800bbf8:	1812      	addle	r2, r2, r0
 800bbfa:	3c01      	subs	r4, #1
 800bbfc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bc00:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800bc04:	d1f3      	bne.n	800bbee <__ieee754_sqrtf+0x72>
 800bc06:	b113      	cbz	r3, 800bc0e <__ieee754_sqrtf+0x92>
 800bc08:	3201      	adds	r2, #1
 800bc0a:	f022 0201 	bic.w	r2, r2, #1
 800bc0e:	1054      	asrs	r4, r2, #1
 800bc10:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 800bc14:	eb04 54c1 	add.w	r4, r4, r1, lsl #23
 800bc18:	e7c0      	b.n	800bb9c <__ieee754_sqrtf+0x20>
 800bc1a:	005b      	lsls	r3, r3, #1
 800bc1c:	3201      	adds	r2, #1
 800bc1e:	e7d0      	b.n	800bbc2 <__ieee754_sqrtf+0x46>

0800bc20 <__kernel_cosf>:
 800bc20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc24:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 800bc28:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800bc2c:	4606      	mov	r6, r0
 800bc2e:	460f      	mov	r7, r1
 800bc30:	da03      	bge.n	800bc3a <__kernel_cosf+0x1a>
 800bc32:	f7f5 fa19 	bl	8001068 <__aeabi_f2iz>
 800bc36:	2800      	cmp	r0, #0
 800bc38:	d070      	beq.n	800bd1c <__kernel_cosf+0xfc>
 800bc3a:	4631      	mov	r1, r6
 800bc3c:	4630      	mov	r0, r6
 800bc3e:	f7f5 f837 	bl	8000cb0 <__aeabi_fmul>
 800bc42:	4605      	mov	r5, r0
 800bc44:	4937      	ldr	r1, [pc, #220]	; (800bd24 <__kernel_cosf+0x104>)
 800bc46:	f7f5 f833 	bl	8000cb0 <__aeabi_fmul>
 800bc4a:	4937      	ldr	r1, [pc, #220]	; (800bd28 <__kernel_cosf+0x108>)
 800bc4c:	f7f4 ff28 	bl	8000aa0 <__addsf3>
 800bc50:	4629      	mov	r1, r5
 800bc52:	f7f5 f82d 	bl	8000cb0 <__aeabi_fmul>
 800bc56:	4935      	ldr	r1, [pc, #212]	; (800bd2c <__kernel_cosf+0x10c>)
 800bc58:	f7f4 ff20 	bl	8000a9c <__aeabi_fsub>
 800bc5c:	4629      	mov	r1, r5
 800bc5e:	f7f5 f827 	bl	8000cb0 <__aeabi_fmul>
 800bc62:	4933      	ldr	r1, [pc, #204]	; (800bd30 <__kernel_cosf+0x110>)
 800bc64:	f7f4 ff1c 	bl	8000aa0 <__addsf3>
 800bc68:	4629      	mov	r1, r5
 800bc6a:	f7f5 f821 	bl	8000cb0 <__aeabi_fmul>
 800bc6e:	4931      	ldr	r1, [pc, #196]	; (800bd34 <__kernel_cosf+0x114>)
 800bc70:	f7f4 ff14 	bl	8000a9c <__aeabi_fsub>
 800bc74:	4629      	mov	r1, r5
 800bc76:	f7f5 f81b 	bl	8000cb0 <__aeabi_fmul>
 800bc7a:	492f      	ldr	r1, [pc, #188]	; (800bd38 <__kernel_cosf+0x118>)
 800bc7c:	f7f4 ff10 	bl	8000aa0 <__addsf3>
 800bc80:	4629      	mov	r1, r5
 800bc82:	f7f5 f815 	bl	8000cb0 <__aeabi_fmul>
 800bc86:	4b2d      	ldr	r3, [pc, #180]	; (800bd3c <__kernel_cosf+0x11c>)
 800bc88:	4680      	mov	r8, r0
 800bc8a:	429c      	cmp	r4, r3
 800bc8c:	dc1d      	bgt.n	800bcca <__kernel_cosf+0xaa>
 800bc8e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800bc92:	4628      	mov	r0, r5
 800bc94:	f7f5 f80c 	bl	8000cb0 <__aeabi_fmul>
 800bc98:	4641      	mov	r1, r8
 800bc9a:	4604      	mov	r4, r0
 800bc9c:	4628      	mov	r0, r5
 800bc9e:	f7f5 f807 	bl	8000cb0 <__aeabi_fmul>
 800bca2:	4639      	mov	r1, r7
 800bca4:	4605      	mov	r5, r0
 800bca6:	4630      	mov	r0, r6
 800bca8:	f7f5 f802 	bl	8000cb0 <__aeabi_fmul>
 800bcac:	4601      	mov	r1, r0
 800bcae:	4628      	mov	r0, r5
 800bcb0:	f7f4 fef4 	bl	8000a9c <__aeabi_fsub>
 800bcb4:	4601      	mov	r1, r0
 800bcb6:	4620      	mov	r0, r4
 800bcb8:	f7f4 fef0 	bl	8000a9c <__aeabi_fsub>
 800bcbc:	4601      	mov	r1, r0
 800bcbe:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800bcc2:	f7f4 feeb 	bl	8000a9c <__aeabi_fsub>
 800bcc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bcca:	4b1d      	ldr	r3, [pc, #116]	; (800bd40 <__kernel_cosf+0x120>)
 800bccc:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800bcd0:	429c      	cmp	r4, r3
 800bcd2:	bfcc      	ite	gt
 800bcd4:	4c1b      	ldrgt	r4, [pc, #108]	; (800bd44 <__kernel_cosf+0x124>)
 800bcd6:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 800bcda:	4621      	mov	r1, r4
 800bcdc:	f7f4 fede 	bl	8000a9c <__aeabi_fsub>
 800bce0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800bce4:	4681      	mov	r9, r0
 800bce6:	4628      	mov	r0, r5
 800bce8:	f7f4 ffe2 	bl	8000cb0 <__aeabi_fmul>
 800bcec:	4621      	mov	r1, r4
 800bcee:	f7f4 fed5 	bl	8000a9c <__aeabi_fsub>
 800bcf2:	4641      	mov	r1, r8
 800bcf4:	4604      	mov	r4, r0
 800bcf6:	4628      	mov	r0, r5
 800bcf8:	f7f4 ffda 	bl	8000cb0 <__aeabi_fmul>
 800bcfc:	4639      	mov	r1, r7
 800bcfe:	4605      	mov	r5, r0
 800bd00:	4630      	mov	r0, r6
 800bd02:	f7f4 ffd5 	bl	8000cb0 <__aeabi_fmul>
 800bd06:	4601      	mov	r1, r0
 800bd08:	4628      	mov	r0, r5
 800bd0a:	f7f4 fec7 	bl	8000a9c <__aeabi_fsub>
 800bd0e:	4601      	mov	r1, r0
 800bd10:	4620      	mov	r0, r4
 800bd12:	f7f4 fec3 	bl	8000a9c <__aeabi_fsub>
 800bd16:	4601      	mov	r1, r0
 800bd18:	4648      	mov	r0, r9
 800bd1a:	e7d2      	b.n	800bcc2 <__kernel_cosf+0xa2>
 800bd1c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800bd20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd24:	ad47d74e 	.word	0xad47d74e
 800bd28:	310f74f6 	.word	0x310f74f6
 800bd2c:	3493f27c 	.word	0x3493f27c
 800bd30:	37d00d01 	.word	0x37d00d01
 800bd34:	3ab60b61 	.word	0x3ab60b61
 800bd38:	3d2aaaab 	.word	0x3d2aaaab
 800bd3c:	3e999999 	.word	0x3e999999
 800bd40:	3f480000 	.word	0x3f480000
 800bd44:	3e900000 	.word	0x3e900000

0800bd48 <__kernel_rem_pio2f>:
 800bd48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd4c:	b0d9      	sub	sp, #356	; 0x164
 800bd4e:	9304      	str	r3, [sp, #16]
 800bd50:	9101      	str	r1, [sp, #4]
 800bd52:	4bb4      	ldr	r3, [pc, #720]	; (800c024 <__kernel_rem_pio2f+0x2dc>)
 800bd54:	9962      	ldr	r1, [sp, #392]	; 0x188
 800bd56:	1ed4      	subs	r4, r2, #3
 800bd58:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bd5c:	2500      	movs	r5, #0
 800bd5e:	9302      	str	r3, [sp, #8]
 800bd60:	9b04      	ldr	r3, [sp, #16]
 800bd62:	f04f 0b00 	mov.w	fp, #0
 800bd66:	3b01      	subs	r3, #1
 800bd68:	9303      	str	r3, [sp, #12]
 800bd6a:	2308      	movs	r3, #8
 800bd6c:	fb94 f4f3 	sdiv	r4, r4, r3
 800bd70:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800bd74:	1c66      	adds	r6, r4, #1
 800bd76:	9b02      	ldr	r3, [sp, #8]
 800bd78:	eba2 06c6 	sub.w	r6, r2, r6, lsl #3
 800bd7c:	9a03      	ldr	r2, [sp, #12]
 800bd7e:	9005      	str	r0, [sp, #20]
 800bd80:	eb03 0802 	add.w	r8, r3, r2
 800bd84:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 800bd86:	1aa7      	subs	r7, r4, r2
 800bd88:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800bd8c:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
 800bd90:	4545      	cmp	r5, r8
 800bd92:	dd10      	ble.n	800bdb6 <__kernel_rem_pio2f+0x6e>
 800bd94:	2500      	movs	r5, #0
 800bd96:	f04f 0b00 	mov.w	fp, #0
 800bd9a:	f50d 7a88 	add.w	sl, sp, #272	; 0x110
 800bd9e:	9b02      	ldr	r3, [sp, #8]
 800bda0:	429d      	cmp	r5, r3
 800bda2:	dc28      	bgt.n	800bdf6 <__kernel_rem_pio2f+0xae>
 800bda4:	9b04      	ldr	r3, [sp, #16]
 800bda6:	46d9      	mov	r9, fp
 800bda8:	eb03 0805 	add.w	r8, r3, r5
 800bdac:	ab1c      	add	r3, sp, #112	; 0x70
 800bdae:	eb03 0888 	add.w	r8, r3, r8, lsl #2
 800bdb2:	2700      	movs	r7, #0
 800bdb4:	e018      	b.n	800bde8 <__kernel_rem_pio2f+0xa0>
 800bdb6:	42ef      	cmn	r7, r5
 800bdb8:	d407      	bmi.n	800bdca <__kernel_rem_pio2f+0x82>
 800bdba:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800bdbe:	f7f4 ff23 	bl	8000c08 <__aeabi_i2f>
 800bdc2:	f84a 0025 	str.w	r0, [sl, r5, lsl #2]
 800bdc6:	3501      	adds	r5, #1
 800bdc8:	e7e2      	b.n	800bd90 <__kernel_rem_pio2f+0x48>
 800bdca:	4658      	mov	r0, fp
 800bdcc:	e7f9      	b.n	800bdc2 <__kernel_rem_pio2f+0x7a>
 800bdce:	9b05      	ldr	r3, [sp, #20]
 800bdd0:	f858 1d04 	ldr.w	r1, [r8, #-4]!
 800bdd4:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800bdd8:	f7f4 ff6a 	bl	8000cb0 <__aeabi_fmul>
 800bddc:	4601      	mov	r1, r0
 800bdde:	4648      	mov	r0, r9
 800bde0:	f7f4 fe5e 	bl	8000aa0 <__addsf3>
 800bde4:	4681      	mov	r9, r0
 800bde6:	3701      	adds	r7, #1
 800bde8:	9b03      	ldr	r3, [sp, #12]
 800bdea:	429f      	cmp	r7, r3
 800bdec:	ddef      	ble.n	800bdce <__kernel_rem_pio2f+0x86>
 800bdee:	f84a 9025 	str.w	r9, [sl, r5, lsl #2]
 800bdf2:	3501      	adds	r5, #1
 800bdf4:	e7d3      	b.n	800bd9e <__kernel_rem_pio2f+0x56>
 800bdf6:	9b02      	ldr	r3, [sp, #8]
 800bdf8:	aa08      	add	r2, sp, #32
 800bdfa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bdfe:	9307      	str	r3, [sp, #28]
 800be00:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 800be02:	9f02      	ldr	r7, [sp, #8]
 800be04:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800be08:	9306      	str	r3, [sp, #24]
 800be0a:	46ba      	mov	sl, r7
 800be0c:	f04f 4887 	mov.w	r8, #1132462080	; 0x43800000
 800be10:	ab58      	add	r3, sp, #352	; 0x160
 800be12:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 800be16:	f853 4c50 	ldr.w	r4, [r3, #-80]
 800be1a:	ad07      	add	r5, sp, #28
 800be1c:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 800be20:	f1ba 0f00 	cmp.w	sl, #0
 800be24:	dc57      	bgt.n	800bed6 <__kernel_rem_pio2f+0x18e>
 800be26:	4631      	mov	r1, r6
 800be28:	4620      	mov	r0, r4
 800be2a:	f000 fba7 	bl	800c57c <scalbnf>
 800be2e:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 800be32:	4604      	mov	r4, r0
 800be34:	f7f4 ff3c 	bl	8000cb0 <__aeabi_fmul>
 800be38:	f7ff fbca 	bl	800b5d0 <floorf>
 800be3c:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800be40:	f7f4 ff36 	bl	8000cb0 <__aeabi_fmul>
 800be44:	4601      	mov	r1, r0
 800be46:	4620      	mov	r0, r4
 800be48:	f7f4 fe28 	bl	8000a9c <__aeabi_fsub>
 800be4c:	4604      	mov	r4, r0
 800be4e:	f7f5 f90b 	bl	8001068 <__aeabi_f2iz>
 800be52:	4680      	mov	r8, r0
 800be54:	f7f4 fed8 	bl	8000c08 <__aeabi_i2f>
 800be58:	4601      	mov	r1, r0
 800be5a:	4620      	mov	r0, r4
 800be5c:	f7f4 fe1e 	bl	8000a9c <__aeabi_fsub>
 800be60:	2e00      	cmp	r6, #0
 800be62:	4604      	mov	r4, r0
 800be64:	dd55      	ble.n	800bf12 <__kernel_rem_pio2f+0x1ca>
 800be66:	1e7b      	subs	r3, r7, #1
 800be68:	aa08      	add	r2, sp, #32
 800be6a:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 800be6e:	f1c6 0208 	rsb	r2, r6, #8
 800be72:	fa45 f002 	asr.w	r0, r5, r2
 800be76:	4480      	add	r8, r0
 800be78:	4090      	lsls	r0, r2
 800be7a:	1a2d      	subs	r5, r5, r0
 800be7c:	aa08      	add	r2, sp, #32
 800be7e:	f1c6 0007 	rsb	r0, r6, #7
 800be82:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
 800be86:	4105      	asrs	r5, r0
 800be88:	2d00      	cmp	r5, #0
 800be8a:	dd50      	ble.n	800bf2e <__kernel_rem_pio2f+0x1e6>
 800be8c:	2200      	movs	r2, #0
 800be8e:	4691      	mov	r9, r2
 800be90:	f108 0801 	add.w	r8, r8, #1
 800be94:	4297      	cmp	r7, r2
 800be96:	f300 8085 	bgt.w	800bfa4 <__kernel_rem_pio2f+0x25c>
 800be9a:	2e00      	cmp	r6, #0
 800be9c:	dd05      	ble.n	800beaa <__kernel_rem_pio2f+0x162>
 800be9e:	2e01      	cmp	r6, #1
 800bea0:	f000 8097 	beq.w	800bfd2 <__kernel_rem_pio2f+0x28a>
 800bea4:	2e02      	cmp	r6, #2
 800bea6:	f000 809e 	beq.w	800bfe6 <__kernel_rem_pio2f+0x29e>
 800beaa:	2d02      	cmp	r5, #2
 800beac:	d13f      	bne.n	800bf2e <__kernel_rem_pio2f+0x1e6>
 800beae:	4621      	mov	r1, r4
 800beb0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800beb4:	f7f4 fdf2 	bl	8000a9c <__aeabi_fsub>
 800beb8:	4604      	mov	r4, r0
 800beba:	f1b9 0f00 	cmp.w	r9, #0
 800bebe:	d036      	beq.n	800bf2e <__kernel_rem_pio2f+0x1e6>
 800bec0:	4631      	mov	r1, r6
 800bec2:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800bec6:	f000 fb59 	bl	800c57c <scalbnf>
 800beca:	4601      	mov	r1, r0
 800becc:	4620      	mov	r0, r4
 800bece:	f7f4 fde5 	bl	8000a9c <__aeabi_fsub>
 800bed2:	4604      	mov	r4, r0
 800bed4:	e02b      	b.n	800bf2e <__kernel_rem_pio2f+0x1e6>
 800bed6:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800beda:	4620      	mov	r0, r4
 800bedc:	f7f4 fee8 	bl	8000cb0 <__aeabi_fmul>
 800bee0:	f7f5 f8c2 	bl	8001068 <__aeabi_f2iz>
 800bee4:	f7f4 fe90 	bl	8000c08 <__aeabi_i2f>
 800bee8:	4641      	mov	r1, r8
 800beea:	4683      	mov	fp, r0
 800beec:	f7f4 fee0 	bl	8000cb0 <__aeabi_fmul>
 800bef0:	4601      	mov	r1, r0
 800bef2:	4620      	mov	r0, r4
 800bef4:	f7f4 fdd2 	bl	8000a9c <__aeabi_fsub>
 800bef8:	f7f5 f8b6 	bl	8001068 <__aeabi_f2iz>
 800befc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bf00:	f845 0f04 	str.w	r0, [r5, #4]!
 800bf04:	f859 102a 	ldr.w	r1, [r9, sl, lsl #2]
 800bf08:	4658      	mov	r0, fp
 800bf0a:	f7f4 fdc9 	bl	8000aa0 <__addsf3>
 800bf0e:	4604      	mov	r4, r0
 800bf10:	e786      	b.n	800be20 <__kernel_rem_pio2f+0xd8>
 800bf12:	d105      	bne.n	800bf20 <__kernel_rem_pio2f+0x1d8>
 800bf14:	1e7b      	subs	r3, r7, #1
 800bf16:	aa08      	add	r2, sp, #32
 800bf18:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 800bf1c:	122d      	asrs	r5, r5, #8
 800bf1e:	e7b3      	b.n	800be88 <__kernel_rem_pio2f+0x140>
 800bf20:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800bf24:	f7f5 f876 	bl	8001014 <__aeabi_fcmpge>
 800bf28:	2800      	cmp	r0, #0
 800bf2a:	d139      	bne.n	800bfa0 <__kernel_rem_pio2f+0x258>
 800bf2c:	4605      	mov	r5, r0
 800bf2e:	2100      	movs	r1, #0
 800bf30:	4620      	mov	r0, r4
 800bf32:	f7f5 f851 	bl	8000fd8 <__aeabi_fcmpeq>
 800bf36:	2800      	cmp	r0, #0
 800bf38:	f000 8098 	beq.w	800c06c <__kernel_rem_pio2f+0x324>
 800bf3c:	1e7c      	subs	r4, r7, #1
 800bf3e:	4623      	mov	r3, r4
 800bf40:	2200      	movs	r2, #0
 800bf42:	9902      	ldr	r1, [sp, #8]
 800bf44:	428b      	cmp	r3, r1
 800bf46:	da55      	bge.n	800bff4 <__kernel_rem_pio2f+0x2ac>
 800bf48:	2a00      	cmp	r2, #0
 800bf4a:	d16e      	bne.n	800c02a <__kernel_rem_pio2f+0x2e2>
 800bf4c:	2301      	movs	r3, #1
 800bf4e:	f06f 0103 	mvn.w	r1, #3
 800bf52:	fb01 f203 	mul.w	r2, r1, r3
 800bf56:	9807      	ldr	r0, [sp, #28]
 800bf58:	5882      	ldr	r2, [r0, r2]
 800bf5a:	2a00      	cmp	r2, #0
 800bf5c:	d050      	beq.n	800c000 <__kernel_rem_pio2f+0x2b8>
 800bf5e:	f06f 0803 	mvn.w	r8, #3
 800bf62:	9a04      	ldr	r2, [sp, #16]
 800bf64:	1c7d      	adds	r5, r7, #1
 800bf66:	19d4      	adds	r4, r2, r7
 800bf68:	aa58      	add	r2, sp, #352	; 0x160
 800bf6a:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800bf6e:	3cf4      	subs	r4, #244	; 0xf4
 800bf70:	441f      	add	r7, r3
 800bf72:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 800bf76:	42bd      	cmp	r5, r7
 800bf78:	f73f af47 	bgt.w	800be0a <__kernel_rem_pio2f+0xc2>
 800bf7c:	9b06      	ldr	r3, [sp, #24]
 800bf7e:	f04f 0a00 	mov.w	sl, #0
 800bf82:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bf86:	f7f4 fe3f 	bl	8000c08 <__aeabi_i2f>
 800bf8a:	f04f 0b00 	mov.w	fp, #0
 800bf8e:	f844 0f04 	str.w	r0, [r4, #4]!
 800bf92:	9b03      	ldr	r3, [sp, #12]
 800bf94:	459a      	cmp	sl, r3
 800bf96:	dd35      	ble.n	800c004 <__kernel_rem_pio2f+0x2bc>
 800bf98:	f849 b025 	str.w	fp, [r9, r5, lsl #2]
 800bf9c:	3501      	adds	r5, #1
 800bf9e:	e7ea      	b.n	800bf76 <__kernel_rem_pio2f+0x22e>
 800bfa0:	2502      	movs	r5, #2
 800bfa2:	e773      	b.n	800be8c <__kernel_rem_pio2f+0x144>
 800bfa4:	ab08      	add	r3, sp, #32
 800bfa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfaa:	f1b9 0f00 	cmp.w	r9, #0
 800bfae:	d109      	bne.n	800bfc4 <__kernel_rem_pio2f+0x27c>
 800bfb0:	b12b      	cbz	r3, 800bfbe <__kernel_rem_pio2f+0x276>
 800bfb2:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800bfb6:	a908      	add	r1, sp, #32
 800bfb8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800bfbc:	2301      	movs	r3, #1
 800bfbe:	3201      	adds	r2, #1
 800bfc0:	4699      	mov	r9, r3
 800bfc2:	e767      	b.n	800be94 <__kernel_rem_pio2f+0x14c>
 800bfc4:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800bfc8:	a908      	add	r1, sp, #32
 800bfca:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800bfce:	464b      	mov	r3, r9
 800bfd0:	e7f5      	b.n	800bfbe <__kernel_rem_pio2f+0x276>
 800bfd2:	1e7a      	subs	r2, r7, #1
 800bfd4:	ab08      	add	r3, sp, #32
 800bfd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bfde:	a908      	add	r1, sp, #32
 800bfe0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800bfe4:	e761      	b.n	800beaa <__kernel_rem_pio2f+0x162>
 800bfe6:	1e7a      	subs	r2, r7, #1
 800bfe8:	ab08      	add	r3, sp, #32
 800bfea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bff2:	e7f4      	b.n	800bfde <__kernel_rem_pio2f+0x296>
 800bff4:	a908      	add	r1, sp, #32
 800bff6:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800bffa:	3b01      	subs	r3, #1
 800bffc:	430a      	orrs	r2, r1
 800bffe:	e7a0      	b.n	800bf42 <__kernel_rem_pio2f+0x1fa>
 800c000:	3301      	adds	r3, #1
 800c002:	e7a6      	b.n	800bf52 <__kernel_rem_pio2f+0x20a>
 800c004:	fb08 f30a 	mul.w	r3, r8, sl
 800c008:	9a05      	ldr	r2, [sp, #20]
 800c00a:	58e0      	ldr	r0, [r4, r3]
 800c00c:	f852 102a 	ldr.w	r1, [r2, sl, lsl #2]
 800c010:	f7f4 fe4e 	bl	8000cb0 <__aeabi_fmul>
 800c014:	4601      	mov	r1, r0
 800c016:	4658      	mov	r0, fp
 800c018:	f7f4 fd42 	bl	8000aa0 <__addsf3>
 800c01c:	f10a 0a01 	add.w	sl, sl, #1
 800c020:	4683      	mov	fp, r0
 800c022:	e7b6      	b.n	800bf92 <__kernel_rem_pio2f+0x24a>
 800c024:	0800cd10 	.word	0x0800cd10
 800c028:	3c01      	subs	r4, #1
 800c02a:	ab08      	add	r3, sp, #32
 800c02c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800c030:	3e08      	subs	r6, #8
 800c032:	2b00      	cmp	r3, #0
 800c034:	d0f8      	beq.n	800c028 <__kernel_rem_pio2f+0x2e0>
 800c036:	4631      	mov	r1, r6
 800c038:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800c03c:	f000 fa9e 	bl	800c57c <scalbnf>
 800c040:	46a1      	mov	r9, r4
 800c042:	4682      	mov	sl, r0
 800c044:	f04f 576e 	mov.w	r7, #998244352	; 0x3b800000
 800c048:	ae44      	add	r6, sp, #272	; 0x110
 800c04a:	f1b9 0f00 	cmp.w	r9, #0
 800c04e:	da3f      	bge.n	800c0d0 <__kernel_rem_pio2f+0x388>
 800c050:	2700      	movs	r7, #0
 800c052:	f04f 0b00 	mov.w	fp, #0
 800c056:	4b82      	ldr	r3, [pc, #520]	; (800c260 <__kernel_rem_pio2f+0x518>)
 800c058:	aa30      	add	r2, sp, #192	; 0xc0
 800c05a:	ebb4 0a07 	subs.w	sl, r4, r7
 800c05e:	d462      	bmi.n	800c126 <__kernel_rem_pio2f+0x3de>
 800c060:	a944      	add	r1, sp, #272	; 0x110
 800c062:	eb01 0a8a 	add.w	sl, r1, sl, lsl #2
 800c066:	46d9      	mov	r9, fp
 800c068:	2600      	movs	r6, #0
 800c06a:	e053      	b.n	800c114 <__kernel_rem_pio2f+0x3cc>
 800c06c:	4271      	negs	r1, r6
 800c06e:	4620      	mov	r0, r4
 800c070:	f000 fa84 	bl	800c57c <scalbnf>
 800c074:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800c078:	4604      	mov	r4, r0
 800c07a:	f7f4 ffcb 	bl	8001014 <__aeabi_fcmpge>
 800c07e:	b1f8      	cbz	r0, 800c0c0 <__kernel_rem_pio2f+0x378>
 800c080:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800c084:	4620      	mov	r0, r4
 800c086:	f7f4 fe13 	bl	8000cb0 <__aeabi_fmul>
 800c08a:	f7f4 ffed 	bl	8001068 <__aeabi_f2iz>
 800c08e:	f7f4 fdbb 	bl	8000c08 <__aeabi_i2f>
 800c092:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800c096:	4681      	mov	r9, r0
 800c098:	f7f4 fe0a 	bl	8000cb0 <__aeabi_fmul>
 800c09c:	4601      	mov	r1, r0
 800c09e:	4620      	mov	r0, r4
 800c0a0:	f7f4 fcfc 	bl	8000a9c <__aeabi_fsub>
 800c0a4:	f7f4 ffe0 	bl	8001068 <__aeabi_f2iz>
 800c0a8:	ab08      	add	r3, sp, #32
 800c0aa:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800c0ae:	4648      	mov	r0, r9
 800c0b0:	f7f4 ffda 	bl	8001068 <__aeabi_f2iz>
 800c0b4:	1c7c      	adds	r4, r7, #1
 800c0b6:	ab08      	add	r3, sp, #32
 800c0b8:	3608      	adds	r6, #8
 800c0ba:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c0be:	e7ba      	b.n	800c036 <__kernel_rem_pio2f+0x2ee>
 800c0c0:	4620      	mov	r0, r4
 800c0c2:	f7f4 ffd1 	bl	8001068 <__aeabi_f2iz>
 800c0c6:	ab08      	add	r3, sp, #32
 800c0c8:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800c0cc:	463c      	mov	r4, r7
 800c0ce:	e7b2      	b.n	800c036 <__kernel_rem_pio2f+0x2ee>
 800c0d0:	ab08      	add	r3, sp, #32
 800c0d2:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 800c0d6:	f7f4 fd97 	bl	8000c08 <__aeabi_i2f>
 800c0da:	4651      	mov	r1, sl
 800c0dc:	f7f4 fde8 	bl	8000cb0 <__aeabi_fmul>
 800c0e0:	4639      	mov	r1, r7
 800c0e2:	f846 0029 	str.w	r0, [r6, r9, lsl #2]
 800c0e6:	4650      	mov	r0, sl
 800c0e8:	f7f4 fde2 	bl	8000cb0 <__aeabi_fmul>
 800c0ec:	f109 39ff 	add.w	r9, r9, #4294967295
 800c0f0:	4682      	mov	sl, r0
 800c0f2:	e7aa      	b.n	800c04a <__kernel_rem_pio2f+0x302>
 800c0f4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c0f8:	f85a 1026 	ldr.w	r1, [sl, r6, lsl #2]
 800c0fc:	9204      	str	r2, [sp, #16]
 800c0fe:	9303      	str	r3, [sp, #12]
 800c100:	f7f4 fdd6 	bl	8000cb0 <__aeabi_fmul>
 800c104:	4601      	mov	r1, r0
 800c106:	4648      	mov	r0, r9
 800c108:	f7f4 fcca 	bl	8000aa0 <__addsf3>
 800c10c:	4681      	mov	r9, r0
 800c10e:	9a04      	ldr	r2, [sp, #16]
 800c110:	9b03      	ldr	r3, [sp, #12]
 800c112:	3601      	adds	r6, #1
 800c114:	9902      	ldr	r1, [sp, #8]
 800c116:	428e      	cmp	r6, r1
 800c118:	dc01      	bgt.n	800c11e <__kernel_rem_pio2f+0x3d6>
 800c11a:	42be      	cmp	r6, r7
 800c11c:	ddea      	ble.n	800c0f4 <__kernel_rem_pio2f+0x3ac>
 800c11e:	f842 9027 	str.w	r9, [r2, r7, lsl #2]
 800c122:	3701      	adds	r7, #1
 800c124:	e799      	b.n	800c05a <__kernel_rem_pio2f+0x312>
 800c126:	9b62      	ldr	r3, [sp, #392]	; 0x188
 800c128:	2b03      	cmp	r3, #3
 800c12a:	d826      	bhi.n	800c17a <__kernel_rem_pio2f+0x432>
 800c12c:	e8df f003 	tbb	[pc, r3]
 800c130:	2a02021c 	.word	0x2a02021c
 800c134:	4626      	mov	r6, r4
 800c136:	2000      	movs	r0, #0
 800c138:	af30      	add	r7, sp, #192	; 0xc0
 800c13a:	2e00      	cmp	r6, #0
 800c13c:	da40      	bge.n	800c1c0 <__kernel_rem_pio2f+0x478>
 800c13e:	2d00      	cmp	r5, #0
 800c140:	d044      	beq.n	800c1cc <__kernel_rem_pio2f+0x484>
 800c142:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 800c146:	9a01      	ldr	r2, [sp, #4]
 800c148:	af58      	add	r7, sp, #352	; 0x160
 800c14a:	4601      	mov	r1, r0
 800c14c:	6013      	str	r3, [r2, #0]
 800c14e:	f857 0da0 	ldr.w	r0, [r7, #-160]!
 800c152:	f7f4 fca3 	bl	8000a9c <__aeabi_fsub>
 800c156:	2601      	movs	r6, #1
 800c158:	42b4      	cmp	r4, r6
 800c15a:	da39      	bge.n	800c1d0 <__kernel_rem_pio2f+0x488>
 800c15c:	b10d      	cbz	r5, 800c162 <__kernel_rem_pio2f+0x41a>
 800c15e:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800c162:	9b01      	ldr	r3, [sp, #4]
 800c164:	6058      	str	r0, [r3, #4]
 800c166:	e008      	b.n	800c17a <__kernel_rem_pio2f+0x432>
 800c168:	2000      	movs	r0, #0
 800c16a:	ae30      	add	r6, sp, #192	; 0xc0
 800c16c:	2c00      	cmp	r4, #0
 800c16e:	da21      	bge.n	800c1b4 <__kernel_rem_pio2f+0x46c>
 800c170:	b10d      	cbz	r5, 800c176 <__kernel_rem_pio2f+0x42e>
 800c172:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800c176:	9b01      	ldr	r3, [sp, #4]
 800c178:	6018      	str	r0, [r3, #0]
 800c17a:	f008 0007 	and.w	r0, r8, #7
 800c17e:	b059      	add	sp, #356	; 0x164
 800c180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c184:	f10d 0ac0 	add.w	sl, sp, #192	; 0xc0
 800c188:	eb0a 0684 	add.w	r6, sl, r4, lsl #2
 800c18c:	4637      	mov	r7, r6
 800c18e:	46a1      	mov	r9, r4
 800c190:	f1b9 0f00 	cmp.w	r9, #0
 800c194:	dc22      	bgt.n	800c1dc <__kernel_rem_pio2f+0x494>
 800c196:	4627      	mov	r7, r4
 800c198:	2f01      	cmp	r7, #1
 800c19a:	dc38      	bgt.n	800c20e <__kernel_rem_pio2f+0x4c6>
 800c19c:	2000      	movs	r0, #0
 800c19e:	2c01      	cmp	r4, #1
 800c1a0:	dc4c      	bgt.n	800c23c <__kernel_rem_pio2f+0x4f4>
 800c1a2:	2d00      	cmp	r5, #0
 800c1a4:	d150      	bne.n	800c248 <__kernel_rem_pio2f+0x500>
 800c1a6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 800c1a8:	9a01      	ldr	r2, [sp, #4]
 800c1aa:	6013      	str	r3, [r2, #0]
 800c1ac:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 800c1ae:	6053      	str	r3, [r2, #4]
 800c1b0:	6090      	str	r0, [r2, #8]
 800c1b2:	e7e2      	b.n	800c17a <__kernel_rem_pio2f+0x432>
 800c1b4:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 800c1b8:	f7f4 fc72 	bl	8000aa0 <__addsf3>
 800c1bc:	3c01      	subs	r4, #1
 800c1be:	e7d5      	b.n	800c16c <__kernel_rem_pio2f+0x424>
 800c1c0:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
 800c1c4:	f7f4 fc6c 	bl	8000aa0 <__addsf3>
 800c1c8:	3e01      	subs	r6, #1
 800c1ca:	e7b6      	b.n	800c13a <__kernel_rem_pio2f+0x3f2>
 800c1cc:	4603      	mov	r3, r0
 800c1ce:	e7ba      	b.n	800c146 <__kernel_rem_pio2f+0x3fe>
 800c1d0:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
 800c1d4:	f7f4 fc64 	bl	8000aa0 <__addsf3>
 800c1d8:	3601      	adds	r6, #1
 800c1da:	e7bd      	b.n	800c158 <__kernel_rem_pio2f+0x410>
 800c1dc:	683b      	ldr	r3, [r7, #0]
 800c1de:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800c1e2:	4619      	mov	r1, r3
 800c1e4:	4610      	mov	r0, r2
 800c1e6:	9303      	str	r3, [sp, #12]
 800c1e8:	9202      	str	r2, [sp, #8]
 800c1ea:	f7f4 fc59 	bl	8000aa0 <__addsf3>
 800c1ee:	9a02      	ldr	r2, [sp, #8]
 800c1f0:	4601      	mov	r1, r0
 800c1f2:	4683      	mov	fp, r0
 800c1f4:	4610      	mov	r0, r2
 800c1f6:	f7f4 fc51 	bl	8000a9c <__aeabi_fsub>
 800c1fa:	9b03      	ldr	r3, [sp, #12]
 800c1fc:	f109 39ff 	add.w	r9, r9, #4294967295
 800c200:	4619      	mov	r1, r3
 800c202:	f7f4 fc4d 	bl	8000aa0 <__addsf3>
 800c206:	6038      	str	r0, [r7, #0]
 800c208:	f847 bd04 	str.w	fp, [r7, #-4]!
 800c20c:	e7c0      	b.n	800c190 <__kernel_rem_pio2f+0x448>
 800c20e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c212:	f8d6 b000 	ldr.w	fp, [r6]
 800c216:	4618      	mov	r0, r3
 800c218:	4659      	mov	r1, fp
 800c21a:	9302      	str	r3, [sp, #8]
 800c21c:	f7f4 fc40 	bl	8000aa0 <__addsf3>
 800c220:	9b02      	ldr	r3, [sp, #8]
 800c222:	4601      	mov	r1, r0
 800c224:	4681      	mov	r9, r0
 800c226:	4618      	mov	r0, r3
 800c228:	f7f4 fc38 	bl	8000a9c <__aeabi_fsub>
 800c22c:	4659      	mov	r1, fp
 800c22e:	f7f4 fc37 	bl	8000aa0 <__addsf3>
 800c232:	3f01      	subs	r7, #1
 800c234:	6030      	str	r0, [r6, #0]
 800c236:	f846 9d04 	str.w	r9, [r6, #-4]!
 800c23a:	e7ad      	b.n	800c198 <__kernel_rem_pio2f+0x450>
 800c23c:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
 800c240:	f7f4 fc2e 	bl	8000aa0 <__addsf3>
 800c244:	3c01      	subs	r4, #1
 800c246:	e7aa      	b.n	800c19e <__kernel_rem_pio2f+0x456>
 800c248:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 800c24a:	9a01      	ldr	r2, [sp, #4]
 800c24c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c250:	6013      	str	r3, [r2, #0]
 800c252:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 800c254:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800c258:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c25c:	6053      	str	r3, [r2, #4]
 800c25e:	e7a7      	b.n	800c1b0 <__kernel_rem_pio2f+0x468>
 800c260:	0800cce4 	.word	0x0800cce4

0800c264 <__kernel_sinf>:
 800c264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c268:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800c26c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800c270:	4604      	mov	r4, r0
 800c272:	460f      	mov	r7, r1
 800c274:	4691      	mov	r9, r2
 800c276:	da03      	bge.n	800c280 <__kernel_sinf+0x1c>
 800c278:	f7f4 fef6 	bl	8001068 <__aeabi_f2iz>
 800c27c:	2800      	cmp	r0, #0
 800c27e:	d035      	beq.n	800c2ec <__kernel_sinf+0x88>
 800c280:	4621      	mov	r1, r4
 800c282:	4620      	mov	r0, r4
 800c284:	f7f4 fd14 	bl	8000cb0 <__aeabi_fmul>
 800c288:	4605      	mov	r5, r0
 800c28a:	4601      	mov	r1, r0
 800c28c:	4620      	mov	r0, r4
 800c28e:	f7f4 fd0f 	bl	8000cb0 <__aeabi_fmul>
 800c292:	4929      	ldr	r1, [pc, #164]	; (800c338 <__kernel_sinf+0xd4>)
 800c294:	4606      	mov	r6, r0
 800c296:	4628      	mov	r0, r5
 800c298:	f7f4 fd0a 	bl	8000cb0 <__aeabi_fmul>
 800c29c:	4927      	ldr	r1, [pc, #156]	; (800c33c <__kernel_sinf+0xd8>)
 800c29e:	f7f4 fbfd 	bl	8000a9c <__aeabi_fsub>
 800c2a2:	4629      	mov	r1, r5
 800c2a4:	f7f4 fd04 	bl	8000cb0 <__aeabi_fmul>
 800c2a8:	4925      	ldr	r1, [pc, #148]	; (800c340 <__kernel_sinf+0xdc>)
 800c2aa:	f7f4 fbf9 	bl	8000aa0 <__addsf3>
 800c2ae:	4629      	mov	r1, r5
 800c2b0:	f7f4 fcfe 	bl	8000cb0 <__aeabi_fmul>
 800c2b4:	4923      	ldr	r1, [pc, #140]	; (800c344 <__kernel_sinf+0xe0>)
 800c2b6:	f7f4 fbf1 	bl	8000a9c <__aeabi_fsub>
 800c2ba:	4629      	mov	r1, r5
 800c2bc:	f7f4 fcf8 	bl	8000cb0 <__aeabi_fmul>
 800c2c0:	4921      	ldr	r1, [pc, #132]	; (800c348 <__kernel_sinf+0xe4>)
 800c2c2:	f7f4 fbed 	bl	8000aa0 <__addsf3>
 800c2c6:	4680      	mov	r8, r0
 800c2c8:	f1b9 0f00 	cmp.w	r9, #0
 800c2cc:	d111      	bne.n	800c2f2 <__kernel_sinf+0x8e>
 800c2ce:	4601      	mov	r1, r0
 800c2d0:	4628      	mov	r0, r5
 800c2d2:	f7f4 fced 	bl	8000cb0 <__aeabi_fmul>
 800c2d6:	491d      	ldr	r1, [pc, #116]	; (800c34c <__kernel_sinf+0xe8>)
 800c2d8:	f7f4 fbe0 	bl	8000a9c <__aeabi_fsub>
 800c2dc:	4631      	mov	r1, r6
 800c2de:	f7f4 fce7 	bl	8000cb0 <__aeabi_fmul>
 800c2e2:	4601      	mov	r1, r0
 800c2e4:	4620      	mov	r0, r4
 800c2e6:	f7f4 fbdb 	bl	8000aa0 <__addsf3>
 800c2ea:	4604      	mov	r4, r0
 800c2ec:	4620      	mov	r0, r4
 800c2ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2f2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800c2f6:	4638      	mov	r0, r7
 800c2f8:	f7f4 fcda 	bl	8000cb0 <__aeabi_fmul>
 800c2fc:	4641      	mov	r1, r8
 800c2fe:	4681      	mov	r9, r0
 800c300:	4630      	mov	r0, r6
 800c302:	f7f4 fcd5 	bl	8000cb0 <__aeabi_fmul>
 800c306:	4601      	mov	r1, r0
 800c308:	4648      	mov	r0, r9
 800c30a:	f7f4 fbc7 	bl	8000a9c <__aeabi_fsub>
 800c30e:	4629      	mov	r1, r5
 800c310:	f7f4 fcce 	bl	8000cb0 <__aeabi_fmul>
 800c314:	4639      	mov	r1, r7
 800c316:	f7f4 fbc1 	bl	8000a9c <__aeabi_fsub>
 800c31a:	490c      	ldr	r1, [pc, #48]	; (800c34c <__kernel_sinf+0xe8>)
 800c31c:	4605      	mov	r5, r0
 800c31e:	4630      	mov	r0, r6
 800c320:	f7f4 fcc6 	bl	8000cb0 <__aeabi_fmul>
 800c324:	4601      	mov	r1, r0
 800c326:	4628      	mov	r0, r5
 800c328:	f7f4 fbba 	bl	8000aa0 <__addsf3>
 800c32c:	4601      	mov	r1, r0
 800c32e:	4620      	mov	r0, r4
 800c330:	f7f4 fbb4 	bl	8000a9c <__aeabi_fsub>
 800c334:	e7d9      	b.n	800c2ea <__kernel_sinf+0x86>
 800c336:	bf00      	nop
 800c338:	2f2ec9d3 	.word	0x2f2ec9d3
 800c33c:	32d72f34 	.word	0x32d72f34
 800c340:	3638ef1b 	.word	0x3638ef1b
 800c344:	39500d01 	.word	0x39500d01
 800c348:	3c088889 	.word	0x3c088889
 800c34c:	3e2aaaab 	.word	0x3e2aaaab

0800c350 <matherr>:
 800c350:	2000      	movs	r0, #0
 800c352:	4770      	bx	lr

0800c354 <atanf>:
 800c354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c358:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800c35c:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 800c360:	4604      	mov	r4, r0
 800c362:	4607      	mov	r7, r0
 800c364:	db0e      	blt.n	800c384 <atanf+0x30>
 800c366:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800c36a:	dd04      	ble.n	800c376 <atanf+0x22>
 800c36c:	4601      	mov	r1, r0
 800c36e:	f7f4 fb97 	bl	8000aa0 <__addsf3>
 800c372:	4604      	mov	r4, r0
 800c374:	e003      	b.n	800c37e <atanf+0x2a>
 800c376:	2800      	cmp	r0, #0
 800c378:	f300 80d2 	bgt.w	800c520 <atanf+0x1cc>
 800c37c:	4c69      	ldr	r4, [pc, #420]	; (800c524 <atanf+0x1d0>)
 800c37e:	4620      	mov	r0, r4
 800c380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c384:	4b68      	ldr	r3, [pc, #416]	; (800c528 <atanf+0x1d4>)
 800c386:	429d      	cmp	r5, r3
 800c388:	dc0e      	bgt.n	800c3a8 <atanf+0x54>
 800c38a:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 800c38e:	da08      	bge.n	800c3a2 <atanf+0x4e>
 800c390:	4966      	ldr	r1, [pc, #408]	; (800c52c <atanf+0x1d8>)
 800c392:	f7f4 fb85 	bl	8000aa0 <__addsf3>
 800c396:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c39a:	f7f4 fe45 	bl	8001028 <__aeabi_fcmpgt>
 800c39e:	2800      	cmp	r0, #0
 800c3a0:	d1ed      	bne.n	800c37e <atanf+0x2a>
 800c3a2:	f04f 36ff 	mov.w	r6, #4294967295
 800c3a6:	e01c      	b.n	800c3e2 <atanf+0x8e>
 800c3a8:	f000 f8e4 	bl	800c574 <fabsf>
 800c3ac:	4b60      	ldr	r3, [pc, #384]	; (800c530 <atanf+0x1dc>)
 800c3ae:	4604      	mov	r4, r0
 800c3b0:	429d      	cmp	r5, r3
 800c3b2:	dc7c      	bgt.n	800c4ae <atanf+0x15a>
 800c3b4:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800c3b8:	429d      	cmp	r5, r3
 800c3ba:	dc67      	bgt.n	800c48c <atanf+0x138>
 800c3bc:	4601      	mov	r1, r0
 800c3be:	f7f4 fb6f 	bl	8000aa0 <__addsf3>
 800c3c2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c3c6:	f7f4 fb69 	bl	8000a9c <__aeabi_fsub>
 800c3ca:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800c3ce:	4605      	mov	r5, r0
 800c3d0:	4620      	mov	r0, r4
 800c3d2:	f7f4 fb65 	bl	8000aa0 <__addsf3>
 800c3d6:	4601      	mov	r1, r0
 800c3d8:	4628      	mov	r0, r5
 800c3da:	f7f4 fd1d 	bl	8000e18 <__aeabi_fdiv>
 800c3de:	2600      	movs	r6, #0
 800c3e0:	4604      	mov	r4, r0
 800c3e2:	4621      	mov	r1, r4
 800c3e4:	4620      	mov	r0, r4
 800c3e6:	f7f4 fc63 	bl	8000cb0 <__aeabi_fmul>
 800c3ea:	4601      	mov	r1, r0
 800c3ec:	4680      	mov	r8, r0
 800c3ee:	f7f4 fc5f 	bl	8000cb0 <__aeabi_fmul>
 800c3f2:	4605      	mov	r5, r0
 800c3f4:	494f      	ldr	r1, [pc, #316]	; (800c534 <atanf+0x1e0>)
 800c3f6:	f7f4 fc5b 	bl	8000cb0 <__aeabi_fmul>
 800c3fa:	494f      	ldr	r1, [pc, #316]	; (800c538 <atanf+0x1e4>)
 800c3fc:	f7f4 fb50 	bl	8000aa0 <__addsf3>
 800c400:	4629      	mov	r1, r5
 800c402:	f7f4 fc55 	bl	8000cb0 <__aeabi_fmul>
 800c406:	494d      	ldr	r1, [pc, #308]	; (800c53c <atanf+0x1e8>)
 800c408:	f7f4 fb4a 	bl	8000aa0 <__addsf3>
 800c40c:	4629      	mov	r1, r5
 800c40e:	f7f4 fc4f 	bl	8000cb0 <__aeabi_fmul>
 800c412:	494b      	ldr	r1, [pc, #300]	; (800c540 <atanf+0x1ec>)
 800c414:	f7f4 fb44 	bl	8000aa0 <__addsf3>
 800c418:	4629      	mov	r1, r5
 800c41a:	f7f4 fc49 	bl	8000cb0 <__aeabi_fmul>
 800c41e:	4949      	ldr	r1, [pc, #292]	; (800c544 <atanf+0x1f0>)
 800c420:	f7f4 fb3e 	bl	8000aa0 <__addsf3>
 800c424:	4629      	mov	r1, r5
 800c426:	f7f4 fc43 	bl	8000cb0 <__aeabi_fmul>
 800c42a:	4947      	ldr	r1, [pc, #284]	; (800c548 <atanf+0x1f4>)
 800c42c:	f7f4 fb38 	bl	8000aa0 <__addsf3>
 800c430:	4641      	mov	r1, r8
 800c432:	f7f4 fc3d 	bl	8000cb0 <__aeabi_fmul>
 800c436:	4945      	ldr	r1, [pc, #276]	; (800c54c <atanf+0x1f8>)
 800c438:	4680      	mov	r8, r0
 800c43a:	4628      	mov	r0, r5
 800c43c:	f7f4 fc38 	bl	8000cb0 <__aeabi_fmul>
 800c440:	4943      	ldr	r1, [pc, #268]	; (800c550 <atanf+0x1fc>)
 800c442:	f7f4 fb2b 	bl	8000a9c <__aeabi_fsub>
 800c446:	4629      	mov	r1, r5
 800c448:	f7f4 fc32 	bl	8000cb0 <__aeabi_fmul>
 800c44c:	4941      	ldr	r1, [pc, #260]	; (800c554 <atanf+0x200>)
 800c44e:	f7f4 fb25 	bl	8000a9c <__aeabi_fsub>
 800c452:	4629      	mov	r1, r5
 800c454:	f7f4 fc2c 	bl	8000cb0 <__aeabi_fmul>
 800c458:	493f      	ldr	r1, [pc, #252]	; (800c558 <atanf+0x204>)
 800c45a:	f7f4 fb1f 	bl	8000a9c <__aeabi_fsub>
 800c45e:	4629      	mov	r1, r5
 800c460:	f7f4 fc26 	bl	8000cb0 <__aeabi_fmul>
 800c464:	493d      	ldr	r1, [pc, #244]	; (800c55c <atanf+0x208>)
 800c466:	f7f4 fb19 	bl	8000a9c <__aeabi_fsub>
 800c46a:	4629      	mov	r1, r5
 800c46c:	f7f4 fc20 	bl	8000cb0 <__aeabi_fmul>
 800c470:	1c73      	adds	r3, r6, #1
 800c472:	4601      	mov	r1, r0
 800c474:	4640      	mov	r0, r8
 800c476:	d139      	bne.n	800c4ec <atanf+0x198>
 800c478:	f7f4 fb12 	bl	8000aa0 <__addsf3>
 800c47c:	4621      	mov	r1, r4
 800c47e:	f7f4 fc17 	bl	8000cb0 <__aeabi_fmul>
 800c482:	4601      	mov	r1, r0
 800c484:	4620      	mov	r0, r4
 800c486:	f7f4 fb09 	bl	8000a9c <__aeabi_fsub>
 800c48a:	e772      	b.n	800c372 <atanf+0x1e>
 800c48c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c490:	f7f4 fb04 	bl	8000a9c <__aeabi_fsub>
 800c494:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c498:	4605      	mov	r5, r0
 800c49a:	4620      	mov	r0, r4
 800c49c:	f7f4 fb00 	bl	8000aa0 <__addsf3>
 800c4a0:	4601      	mov	r1, r0
 800c4a2:	4628      	mov	r0, r5
 800c4a4:	f7f4 fcb8 	bl	8000e18 <__aeabi_fdiv>
 800c4a8:	2601      	movs	r6, #1
 800c4aa:	4604      	mov	r4, r0
 800c4ac:	e799      	b.n	800c3e2 <atanf+0x8e>
 800c4ae:	4b2c      	ldr	r3, [pc, #176]	; (800c560 <atanf+0x20c>)
 800c4b0:	429d      	cmp	r5, r3
 800c4b2:	dc14      	bgt.n	800c4de <atanf+0x18a>
 800c4b4:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800c4b8:	f7f4 faf0 	bl	8000a9c <__aeabi_fsub>
 800c4bc:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800c4c0:	4605      	mov	r5, r0
 800c4c2:	4620      	mov	r0, r4
 800c4c4:	f7f4 fbf4 	bl	8000cb0 <__aeabi_fmul>
 800c4c8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c4cc:	f7f4 fae8 	bl	8000aa0 <__addsf3>
 800c4d0:	4601      	mov	r1, r0
 800c4d2:	4628      	mov	r0, r5
 800c4d4:	f7f4 fca0 	bl	8000e18 <__aeabi_fdiv>
 800c4d8:	2602      	movs	r6, #2
 800c4da:	4604      	mov	r4, r0
 800c4dc:	e781      	b.n	800c3e2 <atanf+0x8e>
 800c4de:	4601      	mov	r1, r0
 800c4e0:	4820      	ldr	r0, [pc, #128]	; (800c564 <atanf+0x210>)
 800c4e2:	f7f4 fc99 	bl	8000e18 <__aeabi_fdiv>
 800c4e6:	2603      	movs	r6, #3
 800c4e8:	4604      	mov	r4, r0
 800c4ea:	e77a      	b.n	800c3e2 <atanf+0x8e>
 800c4ec:	f7f4 fad8 	bl	8000aa0 <__addsf3>
 800c4f0:	4621      	mov	r1, r4
 800c4f2:	f7f4 fbdd 	bl	8000cb0 <__aeabi_fmul>
 800c4f6:	4b1c      	ldr	r3, [pc, #112]	; (800c568 <atanf+0x214>)
 800c4f8:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800c4fc:	f7f4 face 	bl	8000a9c <__aeabi_fsub>
 800c500:	4621      	mov	r1, r4
 800c502:	f7f4 facb 	bl	8000a9c <__aeabi_fsub>
 800c506:	4b19      	ldr	r3, [pc, #100]	; (800c56c <atanf+0x218>)
 800c508:	4601      	mov	r1, r0
 800c50a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c50e:	f7f4 fac5 	bl	8000a9c <__aeabi_fsub>
 800c512:	2f00      	cmp	r7, #0
 800c514:	4604      	mov	r4, r0
 800c516:	f6bf af32 	bge.w	800c37e <atanf+0x2a>
 800c51a:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
 800c51e:	e72e      	b.n	800c37e <atanf+0x2a>
 800c520:	4c13      	ldr	r4, [pc, #76]	; (800c570 <atanf+0x21c>)
 800c522:	e72c      	b.n	800c37e <atanf+0x2a>
 800c524:	bfc90fdb 	.word	0xbfc90fdb
 800c528:	3edfffff 	.word	0x3edfffff
 800c52c:	7149f2ca 	.word	0x7149f2ca
 800c530:	3f97ffff 	.word	0x3f97ffff
 800c534:	3c8569d7 	.word	0x3c8569d7
 800c538:	3d4bda59 	.word	0x3d4bda59
 800c53c:	3d886b35 	.word	0x3d886b35
 800c540:	3dba2e6e 	.word	0x3dba2e6e
 800c544:	3e124925 	.word	0x3e124925
 800c548:	3eaaaaab 	.word	0x3eaaaaab
 800c54c:	bd15a221 	.word	0xbd15a221
 800c550:	3d6ef16b 	.word	0x3d6ef16b
 800c554:	3d9d8795 	.word	0x3d9d8795
 800c558:	3de38e38 	.word	0x3de38e38
 800c55c:	3e4ccccd 	.word	0x3e4ccccd
 800c560:	401bffff 	.word	0x401bffff
 800c564:	bf800000 	.word	0xbf800000
 800c568:	0800cd2c 	.word	0x0800cd2c
 800c56c:	0800cd1c 	.word	0x0800cd1c
 800c570:	3fc90fdb 	.word	0x3fc90fdb

0800c574 <fabsf>:
 800c574:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800c578:	4770      	bx	lr
	...

0800c57c <scalbnf>:
 800c57c:	f030 4300 	bics.w	r3, r0, #2147483648	; 0x80000000
 800c580:	b510      	push	{r4, lr}
 800c582:	4602      	mov	r2, r0
 800c584:	460c      	mov	r4, r1
 800c586:	d028      	beq.n	800c5da <scalbnf+0x5e>
 800c588:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c58c:	d304      	bcc.n	800c598 <scalbnf+0x1c>
 800c58e:	4601      	mov	r1, r0
 800c590:	f7f4 fa86 	bl	8000aa0 <__addsf3>
 800c594:	4602      	mov	r2, r0
 800c596:	e020      	b.n	800c5da <scalbnf+0x5e>
 800c598:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c59c:	d215      	bcs.n	800c5ca <scalbnf+0x4e>
 800c59e:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 800c5a2:	f7f4 fb85 	bl	8000cb0 <__aeabi_fmul>
 800c5a6:	4b18      	ldr	r3, [pc, #96]	; (800c608 <scalbnf+0x8c>)
 800c5a8:	4602      	mov	r2, r0
 800c5aa:	429c      	cmp	r4, r3
 800c5ac:	db22      	blt.n	800c5f4 <scalbnf+0x78>
 800c5ae:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800c5b2:	3b19      	subs	r3, #25
 800c5b4:	4423      	add	r3, r4
 800c5b6:	2bfe      	cmp	r3, #254	; 0xfe
 800c5b8:	dd09      	ble.n	800c5ce <scalbnf+0x52>
 800c5ba:	4611      	mov	r1, r2
 800c5bc:	4813      	ldr	r0, [pc, #76]	; (800c60c <scalbnf+0x90>)
 800c5be:	f000 f829 	bl	800c614 <copysignf>
 800c5c2:	4912      	ldr	r1, [pc, #72]	; (800c60c <scalbnf+0x90>)
 800c5c4:	f7f4 fb74 	bl	8000cb0 <__aeabi_fmul>
 800c5c8:	e7e4      	b.n	800c594 <scalbnf+0x18>
 800c5ca:	0ddb      	lsrs	r3, r3, #23
 800c5cc:	e7f2      	b.n	800c5b4 <scalbnf+0x38>
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	dd05      	ble.n	800c5de <scalbnf+0x62>
 800c5d2:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 800c5d6:	ea40 52c3 	orr.w	r2, r0, r3, lsl #23
 800c5da:	4610      	mov	r0, r2
 800c5dc:	bd10      	pop	{r4, pc}
 800c5de:	f113 0f16 	cmn.w	r3, #22
 800c5e2:	da09      	bge.n	800c5f8 <scalbnf+0x7c>
 800c5e4:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c5e8:	429c      	cmp	r4, r3
 800c5ea:	4611      	mov	r1, r2
 800c5ec:	dce6      	bgt.n	800c5bc <scalbnf+0x40>
 800c5ee:	4808      	ldr	r0, [pc, #32]	; (800c610 <scalbnf+0x94>)
 800c5f0:	f000 f810 	bl	800c614 <copysignf>
 800c5f4:	4906      	ldr	r1, [pc, #24]	; (800c610 <scalbnf+0x94>)
 800c5f6:	e7e5      	b.n	800c5c4 <scalbnf+0x48>
 800c5f8:	3319      	adds	r3, #25
 800c5fa:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 800c5fe:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 800c602:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800c606:	e7dd      	b.n	800c5c4 <scalbnf+0x48>
 800c608:	ffff3cb0 	.word	0xffff3cb0
 800c60c:	7149f2ca 	.word	0x7149f2ca
 800c610:	0da24260 	.word	0x0da24260

0800c614 <copysignf>:
 800c614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800c618:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800c61c:	4308      	orrs	r0, r1
 800c61e:	4770      	bx	lr

0800c620 <__errno>:
 800c620:	4b01      	ldr	r3, [pc, #4]	; (800c628 <__errno+0x8>)
 800c622:	6818      	ldr	r0, [r3, #0]
 800c624:	4770      	bx	lr
 800c626:	bf00      	nop
 800c628:	20000104 	.word	0x20000104

0800c62c <_init>:
 800c62c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c62e:	bf00      	nop
 800c630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c632:	bc08      	pop	{r3}
 800c634:	469e      	mov	lr, r3
 800c636:	4770      	bx	lr

0800c638 <_fini>:
 800c638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c63a:	bf00      	nop
 800c63c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c63e:	bc08      	pop	{r3}
 800c640:	469e      	mov	lr, r3
 800c642:	4770      	bx	lr
